package unalcol.optimization.operators;

import unalcol.optimization.generation.RepairProvider;
import unalcol.types.collection.vector.*;

/**
 * <p>Title:ArityOne</p>
 * <p>Description: A unary operator</p>
 * <p>Copyright:    Copyright (c) 2010</p>
 * @author Jonatan Gomez
 * @version 1.0
 */

public abstract class ArityOne<G> extends Operator<G> {

  /**
   * Apply the unary genetic operator over the individual
   * @param obj Individual to be modified by the genetic operator
   * @return extra information of the genetic operator
   */
  public abstract Vector<G> generates(G obj);

  /**
   * Apply the unary genetic operator over the individual
   * @param obj Individual to be modified by the genetic operator
   * @return extra information of the genetic operator
   */
  public Vector<G> applies(G obj){
      Vector<G> pop = generates(obj);
      for( int i=0; i<pop.size(); i++ ){
        pop.set( i, (G)RepairProvider.repair(pop.get(i)) );          
      }
      return pop;
  }

  /**
   * Apply the genetic operator to the first individual in the population of parents
   * This method is parent compatible
   * @param parents Collection of parents used by the genetic operator (selects just the first
   * one in the collection
   * @return A collection of individuals generated by the gentic operator
   */
  public Vector<G> generates( Vector<G> parents ){
      return generates(parents.get(0));
  }

  /**
   * Return the genetic operator arity
   * @return the genetic operator arity
   */
  public int getArity() { return 1; }
}
