package unalcol.random;

import unalcol.random.raw.*;
import unalcol.random.rngpack.RanMT;

/**
 * <p>Random number generator utility</p>
 *
 * <p>Copyright: Copyright (c) 2009</p>
 *
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 */
public class Random {
    /**
     * Underline random generator
     */
    private static RawGenerator generator = new JavaGenerator(); //RanMT();

    /**
     * Gets the raw generator
     * @return RawGenerator
     */
    public static RawGenerator get(){
    return generator;
    }


    /**
     * Sets the raw generator used by any program
     * @param newGenerator New Raw Generator
     * @return RawGenerator Old Raw Generator
     */
    public static RawGenerator set(RawGenerator newGenerator) {
        RawGenerator oldGenerator = generator;
        generator = newGenerator;
        return oldGenerator;
    }

    public static RawGenerator new_generator(){
        return new RanMT();
    }
    
    /**
     * Generates a uniform random number in the interval [0.0,1.0)
     * @return A uniform random number in the interval [0.0,1.0)
     */
    public static double random() {
        return generator.next();
    }

    /**
     * Generates a boolean value with equal probability
     * @return A boolean value with equal probability
     */
    public static boolean nextBoolean() {
        return (random() >= 0.5);
    }

    /**
     * Generates a boolean value with the given probability
     * @param falseProbability The probability of generating a <i>false</i> value (1.0-falseProbability)
     * provides the probability of generating a <i>true</i> value
     * @return A boolean value with the given probability
     */
    public static boolean nextBoolean(double falseProbability) {
        return (random() >= falseProbability);
    }

    /**
     * Generates a uniform integer value in the interval [0,max)
     * @param max Sup limit of the integer values generated by the utility
     * @return A uniform integer value in the interval [0,max)
     */
    public static int nextInt(int max) {
        return ((int) (max * random()));
    }
    
    public static void main( String[] args ){
        int sample = 100;
        int size = 32;
        for( int i=0; i<sample; i++ ){
            int sign = 1;
            int n = 0;
            for( int j=0; j<size; j++ ){
//                if( Math.random() < 0.5*(1.0-sign) +(double)(sign*n)/(double)(n+sign) ){
                if( Math.random() < 0.5 ){
                    System.out.print('1');
                    n++;
                    if( n==0 ){ sign = 1; }
                }else{
                    System.out.print('0');
                    n--;
                    if( n==-1 ){
                        sign = -1;
                    }
                }
            }
            System.out.println();
        }
    }
}
