package unalcol.optimization.operators;
import unalcol.types.collection.vector.*;
/**
 * <p>Title: Refining Operator</p>
 *
 * <p>Description: Genetic operator that modifies the individuals generated by other
 * genetic operator using a set of ArityOne genetic operators (mutation or local search)</p>
 *
 * <p>Copyright: Copyright (c) 2010</p>
 *
 * @author Jonatan Gomez
 * @version 1.0
 */
public class RefiningOperator<G> extends Operator<G>{
        protected Operator<G> refined;
        protected ArityOne<G>[] refining;
        /**
         * Constructor: Creates a refining genetic operator with the given operators
         * @param refined Genetic operator to be refined
         * @param refining Genetic operator refining the individuals produced by the refined operator
         */
        public RefiningOperator( Operator<G> refined, ArityOne<G> refining) {
            this.refined = refined;
            this.refining = new ArityOne[]{refining};
        }

        /**
         * Constructor: Creates a refining genetic operator with the given operators
         * @param refined Genetic operator to be refined
         * @param refining Genetic operators refining the individuals produced by the refined operator
         */
        public RefiningOperator( Operator<G> refined, ArityOne<G>[] refining) {
            this.refined = refined;
            this.refining = refining;
        }

      /**
       * Apply the genetic operator to the individuals in the population of parents
       * an refine the offspring using the refining operators
       * @param parents Collection of parents used by the genetic operator
       * @return A collection of individuals generated by the refined genetic operator
       */
        @Override
        public Vector<G> generates( Vector<G> parents ){
            Vector<G> ind = refined.generates( parents );
            for( int i=0; i<refining.length; i++ ){
                Vector<G> newInd = new Vector();
                for (int j = 0; j < ind.size(); j++) {
                        Vector<G> subInd = refining[i].generates( ind.get(i) );
                        int size = subInd.size();
                        for (int h = 0; h < size; h++) {
                            newInd.add( subInd.get(h) );
                        }
                }
                ind.clear();
                ind = newInd;
            }
            return ind;
        }

        public int getArity(){ return refined.getArity(); }

        public Object owner(){
            return refined.owner();
        }
}