<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="D:\thesisCode\BioRIMP\test_data\code\optimization\src\unalcol\optimization\operators\binary\varlength\Join.java"><package>package <name><name>unalcol</name>.<name>optimization</name>.<name>operators</name>.<name>binary</name>.<name>varlength</name></name>;</package>
<import>import <name><name>unalcol</name>.<name>optimization</name>.<name>operators</name>.<name>binary</name>.<name>BinaryArityTwo</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>bitarray</name>.<name>BitArray</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>vector</name></name>.*;</import>
<import>import <name><name>unalcol</name>.<name>clone</name></name>.*;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Title: Join&lt;/p&gt;
 * &lt;p&gt;Description: Joins two chromosomes&lt;/p&gt;
 * &lt;p&gt;Copyright: Copyright (c) 2010&lt;/p&gt;
 * @author Jonatan Gomez
 * @version 1.0
 */</comment>

<class><specifier>public</specifier> class <name>Join</name> <super><extends>extends <name>BinaryArityTwo</name></extends></super><block>{

  <comment type="javadoc">/**
   * Apply the simple point crossover operation over the given genomes
   * @param c1 The first parent
   * @param c2 The second parent
   */</comment>
  <function><type><specifier>public</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>BitArray</name></argument>&gt;</argument_list></name></type> <name>generates</name><parameter_list>(<param><decl><type><name>BitArray</name></type> <name>c1</name></decl></param>, <param><decl><type><name>BitArray</name></type> <name>c2</name></decl></param>)</parameter_list> <block>{
      <try>try <block>{
          <decl_stmt><decl><type><name>BitArray</name></type> <name>genome</name> =<init> <expr>(<name>BitArray</name>) <call><name><name>Clone</name>.<name>get</name></name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>genome</name>.<name>add</name></name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <decl_stmt><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>BitArray</name></argument>&gt;</argument_list></name></type> <name>v</name> =<init> <expr>new <call><name><name>Vector</name><argument_list>&lt;<argument><name>BitArray</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>v</name>.<name>add</name></name><argument_list>(<argument><expr><name>genome</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>v</name></expr>;</return>
      }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
      }</block></catch></try>
      <return>return <expr><name>null</name></expr>;</return>
  }</block></function>


 <comment type="javadoc">/**
  * Testing function
  */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>argv</name></decl></param>)</parameter_list><block>{
    <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"*** Generating a genome of 20 genes randomly ***"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>BitArray</name></type> <name>parent1</name> =<init> <expr>new <call><name>BitArray</name><argument_list>(<argument><expr>20</expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>parent1</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"*** Generating a genome of 10 genes randomly ***"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>BitArray</name></type> <name>parent2</name> =<init> <expr>new <call><name>BitArray</name><argument_list>(<argument><expr>10</expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>parent2</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Join</name></type> <name>xover</name> =<init> <expr>new <call><name>Join</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"*** Applying the croosover ***"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>BitArray</name></type> <name>child</name> =<init> <expr><call><name><name>xover</name>.<name>generates</name></name><argument_list>(<argument><expr><name>parent1</name></expr></argument>, <argument><expr><name>parent2</name></expr></argument>)</argument_list></call>.<call><name>get</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"New Individual " + <name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  }</block></function>
}</block></class>
</unit>
