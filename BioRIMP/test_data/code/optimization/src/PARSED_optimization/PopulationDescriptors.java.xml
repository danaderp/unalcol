<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="D:\thesisCode\BioRIMP\test_data\code\optimization\src\unalcol\optimization\PopulationDescriptors.java"><package>package <name><name>unalcol</name>.<name>optimization</name></name>;</package>

<import>import <name><name>unalcol</name>.<name>optimization</name>.<name>solution</name>.<name>Solution</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>real</name>.<name>matrix</name></name>.*;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>real</name></name>.*;</import>
<import>import <name><name>unalcol</name>.<name>descriptors</name></name>.*;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>vector</name></name>.*;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Title: PopulationDescriptors&lt;/p&gt;
 *
 * &lt;p&gt;Description: Numeric Description of a population of candidate solutions.
 * Basically, a population is described by the index of the best candidate solution,
 * the maximum, minimum, average and standard deviation of the optimization function
 * values obtained by the candidate solutions of the population.&lt;/p&gt;
 *
 * &lt;p&gt;Copyright: Copyright (c) 2010&lt;/p&gt;
 *
 * &lt;p&gt;Company: Kunsamu&lt;/p&gt;
 *
 * @author Jonatan Gomez
 * @version 1.0
 */</comment>
<class><specifier>public</specifier> class <name>PopulationDescriptors</name> <super><implements>implements <name>DescriptorsService</name></implements></super><block>{
    <comment type="javadoc">/**
     * Returns the Class that owns the PlugIn
     * @return Class The PlugIns owner class
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>Object</name></type> <name>owner</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>PopulationDescriptors</name>.<name><name/></name></name>class</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Gets a numeric Description of a population of candidate solutions.
     * @param stat Statistical information of the population
     * @return Numeric Description of a population of candidate solutions.
     * Basically, a population is described by the index of the best candidate solution,
     * the maximum, minimum, average and standard deviation of the optimization function
     * values obtained by the candidate solutions of the population.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name><index>[]</index></type> <name>apply</name><parameter_list>(<param><decl><type><name><name>Statistics</name><index>[]</index></name></type> <name>stat</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>s</name> =<init> <expr>new <name><name>double</name><index>[<expr>5</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <comment type="line">// Fitness stats</comment>
        <expr_stmt><expr><name><name>s</name><index>[<expr>0</expr>]</index></name> = <name><name>stat</name><index>[<expr>0</expr>]</index></name>.<name>maxIndex</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>s</name><index>[<expr>1</expr>]</index></name> = <name><name>stat</name><index>[<expr>0</expr>]</index></name>.<name>max</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>s</name><index>[<expr>2</expr>]</index></name> = <name><name>stat</name><index>[<expr>0</expr>]</index></name>.<name>min</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>s</name><index>[<expr>3</expr>]</index></name> = <name><name>stat</name><index>[<expr>0</expr>]</index></name>.<name>avg</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>s</name><index>[<expr>4</expr>]</index></name> = <name><name>stat</name><index>[<expr>0</expr>]</index></name>.<name>deviation</name></expr>;</expr_stmt>
        <return>return <expr><name>s</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Gets a numeric Description of a population of candidate solutions.
     * @param obj Population to be analized
     * @return Numeric Description of a population of candidate solutions.
     * Basically, a population is described by the index of the best candidate solution,
     * the maximum, minimum, average and standard deviation of the optimization function
     * values obtained by the candidate solutions of the population.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name><index>[]</index></type> <name>descriptors</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>descriptors</name><argument_list>(<argument><expr>(<name><name>Vector</name><argument_list>&lt;<argument><name>Solution</name></argument>&gt;</argument_list></name>) <name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Gets a numeric Description of a population of candidate solutions.
     * @param pop Population to be analized
     * @return Numeric Description of a population of candidate solutions.
     * Basically, a population is described by the index of the best candidate solution,
     * the maximum, minimum, average and standard deviation of the optimization function
     * values obtained by the candidate solutions of the population.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name><index>[]</index></type> <name>descriptors</name><parameter_list>(<param><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>Solution</name></argument>&gt;</argument_list></name></type> <name>pop</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>DescriptorsService</name></type> <name>descriptors</name> =<init> <expr><call><name><name>DescriptorsProvider</name>.<name>get</name></name><argument_list>(<argument><expr><call><name><name>pop</name>.<name>get</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>.<call><name>getClass</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>n</name> =<init> <expr><call><name><name>pop</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name><index>[]</index><index>[]</index></type> <name>indStat</name> =<init> <expr>new <name><name>double</name><index>[<expr><name>n</name></expr>]</index><index>[]</index></name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name><name>indStat</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name><name>descriptors</name>.<name>descriptors</name></name><argument_list>(<argument><expr><call><name><name>pop</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><call><name>apply</name><argument_list>(<argument><expr><call><name><name>DoubleMatrixUtil</name>.<name>statistics</name></name><argument_list>(<argument><expr><name>indStat</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class></unit>
