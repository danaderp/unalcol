<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="D:\thesisCode\BioRIMP\test_data\code\optimization\src\unalcol\optimization\testbed\binary\M9_Deceptive.java"><package>package <name><name>unalcol</name>.<name>optimization</name>.<name>testbed</name>.<name>binary</name></name>;</package>

<import>import <name><name>unalcol</name>.<name>optimization</name></name>.*;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>bitarray</name>.<name>BitArray</name></name>;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Title: M9_Deceptive&lt;/p&gt;
 * &lt;p&gt;Description: Extended deceptive binary functions&lt;/p&gt;
 * &lt;p&gt;Copyright: Copyright (c) 2010&lt;/p&gt;
 * &lt;p&gt;Company: Kunsamu&lt;/p&gt;
 * @author Jonatan Gomez
 * @version 1.0
 */</comment>
<class><specifier>public</specifier> class <name>M9_Deceptive</name> <super><extends>extends <name><name>OptimizationFunction</name><argument_list>&lt;<argument><name>BitArray</name></argument>&gt;</argument_list></name></extends></super> <block>{

  <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>length</name> =<init> <expr>8</expr></init></decl>;</decl_stmt>
  <comment type="javadoc">/**
   * Distance
   * @param genes Bitarray source
   * @param b Boolean array
   * @param start Position
   * @return The distance
   */</comment>
  <function><type><specifier>public</specifier> <name>int</name></type> <name>distance</name><parameter_list>(<param><decl><type><name>BitArray</name></type> <name>genes</name></decl></param>, <param><decl><type><name><name>boolean</name><index>[]</index></name></type> <name>b</name></decl></param>, <param><decl><type><name>int</name></type> <name>start</name></decl></param>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>d</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
    <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr><name>length</name> * <name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>length</name> * (<name>start</name> + 1)</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
      <if>if <condition>(<expr><call><name><name>genes</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> ^ <name><name>b</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then> <block>{ <expr_stmt><expr><name>d</name>++</expr>;</expr_stmt> }</block></then></if>
      <expr_stmt><expr><name>j</name>++</expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><name>d</name></expr>;</return>
  }</block></function>
  <comment type="javadoc">/**
   * Distance0
   * @param genes Bitarray source
   * @param start Position
   * @return Distance0
   */</comment>
  <function><type><specifier>public</specifier> <name>int</name></type> <name>distance0</name><parameter_list>(<param><decl><type><name>BitArray</name></type> <name>genes</name></decl></param>, <param><decl><type><name>int</name></type> <name>start</name></decl></param>)</parameter_list><block>{
    <decl_stmt><decl><type><name>boolean</name><index>[]</index></type> <name>b</name> =<init> <expr>new <name><name>boolean</name><index>[]</index></name><block>{<expr>false</expr>,<expr>false</expr>,<expr>false</expr>,<expr>false</expr>,<expr>false</expr>,<expr>false</expr>,<expr>false</expr>,<expr>false</expr>}</block></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>distance</name><argument_list>(<argument><expr><name>genes</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>
  <comment type="javadoc">/**
   * Distance1
   * @param genes Bitarray source
   * @param start Position
   * @return Distance1
   */</comment>
  <function><type><specifier>public</specifier> <name>int</name></type> <name>distance1</name><parameter_list>(<param><decl><type><name>BitArray</name></type> <name>genes</name></decl></param>, <param><decl><type><name>int</name></type> <name>start</name></decl></param>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>boolean</name><index>[]</index></type> <name>b</name> =<init> <expr>new <name><name>boolean</name><index>[]</index></name><block>{<expr>true</expr>,<expr>false</expr>,<expr>false</expr>,<expr>false</expr>,<expr>true</expr>,<expr>true</expr>,<expr>false</expr>,<expr>false</expr>}</block></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>distance</name><argument_list>(<argument><expr><name>genes</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>
  <comment type="javadoc">/**
   * Distance2
   * @param genes Bitarray source
   * @param start Position
   * @return Distance2
   */</comment>
  <function><type><specifier>public</specifier> <name>int</name></type> <name>distance2</name><parameter_list>(  <param><decl><type><name>BitArray</name></type> <name>genes</name></decl></param>, <param><decl><type><name>int</name></type> <name>start</name></decl></param> )</parameter_list><block>{
    <decl_stmt><decl><type><name>boolean</name><index>[]</index></type> <name>b</name> =<init> <expr>new <name><name>boolean</name><index>[]</index></name><block>{<expr>false</expr>,<expr>true</expr>,<expr>false</expr>,<expr>false</expr>,<expr>true</expr>,<expr>false</expr>,<expr>true</expr>,<expr>false</expr>}</block></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>distance</name><argument_list>(<argument><expr><name>genes</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <comment type="javadoc">/**
   * Return the integer value codified by the bits in a section of the array
   * @param genes Bitarray source
   * @param start Index of the first bit in the section to extract the index
   * @return The integer value codified by the bits in a section of the array
   */</comment>
  <function><type><specifier>public</specifier> <name>int</name></type> <name>getValue</name><parameter_list>(<param><decl><type><name>BitArray</name></type> <name>genes</name></decl></param>, <param><decl><type><name>int</name></type> <name>start</name></decl></param>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>d0</name> =<init> <expr><call><name>distance0</name><argument_list>( <argument><expr><name>genes</name></expr></argument>, <argument><expr><name>start</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>d1</name> =<init> <expr><call><name>distance1</name><argument_list>( <argument><expr><name>genes</name></expr></argument>, <argument><expr><name>start</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>d2</name> =<init> <expr><call><name>distance2</name><argument_list>( <argument><expr><name>genes</name></expr></argument>, <argument><expr><name>start</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>d</name> =<init> <expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>d0</name></expr></argument>,<argument><expr><name>d1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>d</name> = <call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><name>d2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>( <expr><name>d</name> == 0</expr> )</condition><then><block>{ <expr_stmt><expr><name>d</name> = 10</expr>;</expr_stmt> }</block></then></if><empty_stmt>;</empty_stmt>
    <return>return <expr><name>d</name></expr>;</return>
  }</block></function>

  <comment type="javadoc">/**
   * Evaluate the max ones OptimizationFunction function over the binary array given
   * @param x Binary Array to be evaluated
   * @return the OptimizationFunction function over the binary array
   */</comment>
  <function><type><specifier>public</specifier> <name>Double</name></type> <name>apply</name><parameter_list>( <param><decl><type><name>BitArray</name></type> <name>x</name></decl></param> )</parameter_list><block>{
    <decl_stmt><decl><type><name>double</name></type> <name>f</name>=<init><expr>0.0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name> =<init> <expr><call><name><name>x</name>.<name>size</name></name><argument_list>()</argument_list></call> / <name>length</name></expr></init></decl>;</decl_stmt>
    <for>for( <init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> )<block>{
      <expr_stmt><expr><name>f</name> += <call><name>getValue</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><name>f</name></expr>;</return>
  }</block></function>
}</block></class>
</unit>
