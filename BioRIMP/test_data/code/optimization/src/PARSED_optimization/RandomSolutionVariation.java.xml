<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="D:\thesisCode\BioRIMP\test_data\code\optimization\src\unalcol\optimization\random\RandomSolutionVariation.java"><comment type="block">/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */</comment>
<package>package <name><name>unalcol</name>.<name>optimization</name>.<name>random</name></name>;</package>

<import>import <name><name>unalcol</name>.<name>optimization</name>.<name>operators</name>.<name>ArityOne</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>optimization</name>.<name>solution</name>.<name>Solution</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>optimization</name>.<name>solution</name>.<name>SolutionVariation</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>vector</name>.<name>Vector</name></name>;</import>

<comment type="javadoc">/**
 *
 * @author jgomez
 */</comment>
<class><specifier>public</specifier> class <name><name>RandomSolutionVariation</name> <argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name> <super><extends>extends <name><name>SolutionVariation</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></extends></super><block>{
  <comment type="javadoc">/**
   * Set of genetic operators that are used by CEA for evolving the solution chromosomes
   */</comment>
  <decl_stmt><decl><type><specifier>protected</specifier> <name><name>ArityOne</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>mutation</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

  <comment type="javadoc">/**
   * Constructor: Creates a Hill Climbing transformation
   * @param grow Growing function from encoding to problem solution space
   * @param mutation Genetic operator used to evolve the solution
   */</comment>
  <constructor><specifier>public</specifier> <name>RandomSolutionVariation</name><parameter_list>( <param><decl><type><name><name>ArityOne</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>mutation</name></decl></param> )</parameter_list><block>{
      <expr_stmt><expr><name><name>this</name>.<name>mutation</name></name> = <name>mutation</name></expr>;</expr_stmt>
  }</block></constructor>

  <comment type="javadoc">/**
   * Transforms the given population to another population according to its rules.
   * @param population The population to be transformed
   * @param replacement Replacement strategy
   * @param f Function to be optimized
   */</comment>
  <function><type><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name><name>Solution</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>apply</name><parameter_list>(<param><decl><type><name><name>Solution</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>solution</name></decl></param>)</parameter_list> <block>{
      <decl_stmt><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name><name>Solution</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>buffer</name> =<init> <expr>new <call><name><name>Vector</name><argument_list>&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>v</name> =<init> <expr><call><name><name>mutation</name>.<name>applies</name></name><argument_list>(<argument><expr><call><name><name>solution</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for( <init><decl><type><name>int</name></type> <name>k</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>k</name>&lt;<call><name><name>v</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>k</name>++</expr></incr> )<block>{
        <expr_stmt><expr><call><name><name>buffer</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>solution</name>.<name>newInstance</name></name><argument_list>(<argument><expr><call><name><name>v</name>.<name>get</name></name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></for>
      <return>return <expr><name>buffer</name></expr>;</return>
  }</block></function>
  
  <function><type><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <name>Object</name></type> <name>owner</name><parameter_list>()</parameter_list><block>{
      <return>return <expr><name><name>Object</name>.<name><name/></name></name>class</expr>;</return>
  }</block></function>
}</block></class>
</unit>
