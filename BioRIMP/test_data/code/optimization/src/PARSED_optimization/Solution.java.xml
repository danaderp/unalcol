<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\BioRIMP\test_data\code\optimization\src\unalcol\optimization\solution\Solution.java"><package>package <name><name>unalcol</name>.<name>optimization</name>.<name>solution</name></name>;</package>

<import>import <name><name>unalcol</name>.<name>optimization</name>.<name>OptimizationFunction</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>sort</name>.<name>ReversedOrder</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>vector</name>.<name>Vector</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>vector</name>.<name>VectorSort</name></name>;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Title: Solution&lt;/p&gt;
 *
 * &lt;p&gt;Description: Abstract class representing a candidate solution of an
 * optimization problem (solution point and value)&lt;/p&gt;
 *
 * &lt;p&gt;Copyright: Copyright (c) 2010&lt;/p&gt;
 *
 * &lt;p&gt;Company: Kunsamu&lt;/p&gt;
 *
 * @author Jonatan Gomez
 * @version 1.0
 */</comment>
<class><specifier>public</specifier> class <name><name>Solution</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name> <block>{
    
    <decl_stmt><decl><type><specifier>protected</specifier> <name>T</name></type> <name>object</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Value obtained by the candidate solution
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>double</name></type> <name>value</name> =<init> <expr><name><name>Double</name>.<name>NaN</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Function being optimized
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>OptimizationFunction</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>f</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    
    <constructor><specifier>public</specifier> <name>Solution</name><parameter_list>()</parameter_list><block>{        
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>Solution</name><parameter_list>( <param><decl><type><name>T</name></type> <name>_object</name></decl></param> )</parameter_list><block>{
        <expr_stmt><expr><name>object</name> = <name>_object</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Gets the candidate solution
     * @return Candidate object solution represented by the solution
     */</comment>
    <function><type><specifier>public</specifier> <name>T</name></type> <name>get</name><parameter_list>()</parameter_list><block>{
        <return>return <expr><name>object</name></expr>;</return>
    }</block></function>
    
    <function><type><specifier>public</specifier> <name><name>Solution</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>newInstance</name><parameter_list>( <param><decl><type><name>T</name></type> <name>object</name></decl></param> )</parameter_list><block>{
        <return>return <expr>new <call><name>Solution</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Gets the value obtained by the candidate solution
     * @return Value obtained by the candidate solution
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>value</name><parameter_list>()</parameter_list><block>{
        <comment type="line">//if( f != null &amp;&amp; (mutable() || f.isNonStationary()) ){</comment>
        <comment type="line">//    value =  f.apply(get());</comment>
        <comment type="line">//</comment>}
        <return>return <expr><name>value</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>mutable</name><parameter_list>()</parameter_list><block>{ <return>return <expr>false</expr>;</return> }</block></function>

    <comment type="javadoc">/**
     * Evaluates the candidate solution using the given optimization function
     * @param f Optimization function used for evaluating the candidate solution
     * @return Value obtained by the candidate solution on the optimization function
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>evaluate</name><parameter_list>( <param><decl><type><name><name>OptimizationFunction</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>f</name></decl></param> )</parameter_list><block>{
        <if>if<condition>( <expr><name><name>this</name>.<name>f</name></name> != <name>f</name> || <call><name>mutable</name><argument_list>()</argument_list></call> || <call><name><name>f</name>.<name>isNonStationary</name></name><argument_list>()</argument_list></call> || <name>value</name> == <name><name>Double</name>.<name>NaN</name></name></expr> )</condition><then><block>{
            <expr_stmt><expr><name><name>this</name>.<name>f</name></name> = <name>f</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>value</name> = <call><name><name>f</name>.<name>apply</name></name><argument_list>(<argument><expr><call><name>get</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>value</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Gets a numeric description of the solution
     * @return Numeric description of the solution
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name><index>[]</index></type> <name>descriptors</name><parameter_list>()</parameter_list><block>{
        <return>return <expr>(new <call><name>SolutionDescriptors</name><argument_list>()</argument_list></call>).<call><name>descriptors</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>evaluate</name><parameter_list>( <param><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>Solution</name></argument>&gt;</argument_list></name></type> <name>v</name></decl></param>, <param><decl><type><name>OptimizationFunction</name></type> <name>f</name></decl></param> )</parameter_list><block>{
        <for>for( <init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<call><name><name>v</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> )<block>{
            <expr_stmt><expr><call><name><name>v</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>.<call><name>evaluate</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>
    
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Solution</name></type> <name>best</name><parameter_list>( <param><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>Solution</name></argument>&gt;</argument_list></name></type> <name>v</name></decl></param> )</parameter_list><block>{
        <decl_stmt><decl><type><name>SolutionOrder</name></type> <name>order</name> =<init> <expr>new <call><name>SolutionOrder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if<condition>( <expr><call><name><name>v</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 0</expr> )</condition><then><block>{
            <decl_stmt><decl><type><name>Solution</name></type> <name>s</name> =<init> <expr><call><name><name>v</name>.<name>get</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for( <init><decl><type><name>int</name></type> <name>i</name>=<init><expr>1</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<call><name><name>v</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> )<block>{
                <if>if<condition>( <expr><call><name><name>order</name>.<name>compare</name></name><argument_list>(<argument><expr><call><name><name>v</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call> &gt; 0</expr> )</condition><then><block>{
                    <expr_stmt><expr><name>s</name> = <call><name><name>v</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
            <return>return <expr><name>s</name></expr>;</return>
        }</block></then></if>
        <return>return <expr><name>null</name></expr>;</return>
    }</block></function>
    
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>sort</name><parameter_list>( <param><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>Solution</name></argument>&gt;</argument_list></name></type> <name>v</name></decl></param> )</parameter_list><block>{
        <decl_stmt><decl><type><name>VectorSort</name></type> <name>sort_alg</name> =<init>
                <expr>new <call><name>VectorSort</name><argument_list>(<argument><expr>new <call><name>ReversedOrder</name><argument_list>( <argument><expr>new <call><name>SolutionOrder</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sort_alg</name>.<name>apply</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class></unit>
