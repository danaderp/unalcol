<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="D:\thesisCode\BioRIMP\test_data\code\optimization\src\unalcol\optimization\util\RealVectorPopulationOptimizationDemo.java"><comment type="block">/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */</comment>
<package>package <name><name>unalcol</name>.<name>optimization</name>.<name>util</name></name>;</package>

<import>import <name><name>unalcol</name>.<name>optimization</name>.<name>iterative</name>.<name>IterativePopulationOptimizer</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>instance</name>.<name>InstanceProvider</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>optimization</name></name>.*;</import>
<import>import <name><name>unalcol</name>.<name>optimization</name>.<name>operators</name></name>.*;</import>
<import>import <name><name>unalcol</name>.<name>optimization</name>.<name>transformation</name></name>.*;</import>
<import>import <name><name>unalcol</name>.<name>algorithm</name>.<name>iterative</name></name>.*;</import>
<import>import <name><name>unalcol</name>.<name>instance</name>.<name>InstanceService</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>math</name>.<name>logic</name></name>.*;</import>
<import>import <name><name>unalcol</name>.<name>reflect</name>.<name>service</name></name>.*;</import>
<import>import <name><name>unalcol</name>.<name>reflect</name>.<name>util</name></name>.*;</import>
<import>import <name><name>unalcol</name>.<name>io</name></name>.*;</import>
<import>import <name><name>unalcol</name>.<name>optimization</name>.<name>generation</name>.<name>Repair</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>optimization</name>.<name>operators</name>.<name>real</name></name>.*;</import>
<import>import <name><name>unalcol</name>.<name>optimization</name>.<name>solution</name>.<name>Solution</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>optimization</name>.<name>solution</name>.<name>SolutionInstance</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>optimization</name>.<name>testbed</name>.<name>real</name></name>.*;</import>
<import>import <name><name>unalcol</name>.<name>random</name>.<name>real</name></name>.*;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>real</name>.<name>array</name>.<name>DoubleArraySimpleWriteService</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>tracer</name></name>.*;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>vector</name>.<name>Vector</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>real</name>.<name>array</name>.<name>DoubleArrayInit</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>real</name>.<name>array</name>.<name>DoubleArrayInstance</name></name>;</import>

<comment type="javadoc">/**
 *
 * @author jgomez
 */</comment>
<class><specifier>public</specifier> class <name>RealVectorPopulationOptimizationDemo</name> <block>{
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>( <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></param> )</parameter_list><block>{
        <comment type="line">// Reflection</comment>
        <decl_stmt><decl><type><name>ServiceProvider</name></type> <name>provider</name> =<init> <expr><call><name><name>ReflectUtil</name>.<name>getProvider</name></name><argument_list>(<argument><expr>"services/"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DoubleArraySimpleWriteService</name></type> <name>key</name> =<init> <expr>new <call><name>DoubleArraySimpleWriteService</name><argument_list>(<argument><expr>','</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>provider</name>.<name>register</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>provider</name>.<name>setDefault_service</name></name><argument_list>(<argument><expr><name><name>WriteService</name>.<name><name/></name></name>class</expr></argument>,<argument><expr><name><name>double</name><index>[]</index></name>.class</expr></argument>,<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Search Space </comment>
        <decl_stmt><decl><type><name>int</name></type> <name>DIMENSION</name> =<init> <expr>10</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>min</name> =<init> <expr><call><name><name>DoubleArrayInit</name>.<name>create</name></name><argument_list>(<argument><expr><name>DIMENSION</name></expr></argument>, <argument><expr>-512.0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>max</name> =<init> <expr><call><name><name>DoubleArrayInit</name>.<name>create</name></name><argument_list>(<argument><expr><name>DIMENSION</name></expr></argument>, <argument><expr>512.0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>InstanceService</name></type> <name>ikey</name> =<init> <expr>new <call><name>DoubleArrayInstance</name><argument_list>(<argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>t</name> =<init> <expr>new <name><name>double</name><index>[<expr><name>DIMENSION</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>t</name> = (<name><name>double</name><index>[]</index></name>)<call><name><name>ikey</name>.<name>get</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for( <init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name>DIMENSION</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> )<block>{
          <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><name><name>min</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name><name>provider</name>.<name>register</name></name><argument_list>(<argument><expr><name>ikey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>provider</name>.<name>setDefault_service</name></name><argument_list>(<argument><expr><name><name>InstanceService</name>.<name><name/></name></name>class</expr></argument>,<argument><expr><name><name>double</name><index>[]</index></name>.class</expr></argument>,<argument><expr><name>ikey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>Repair</name><argument_list>&lt;<argument><name>double</name><index>[]</index></argument>&gt;</argument_list></name></type> <name>rkey</name> =<init> <expr>new <call><name>RealVectorScaleRepair</name><argument_list>(<argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
        <expr_stmt><expr><call><name><name>provider</name>.<name>register</name></name><argument_list>(<argument><expr><name>rkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>provider</name>.<name>setDefault_service</name></name><argument_list>(<argument><expr><name><name>Repair</name>.<name><name/></name></name>class</expr></argument>,<argument><expr><name><name>double</name><index>[]</index></name>.class</expr></argument>,<argument><expr><name>rkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Solution Space</comment>
        <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>x</name> =<init> <expr>new <name><name>double</name><index>[<expr><name>DIMENSION</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Solution</name><argument_list>&lt;<argument><name>double</name><index>[]</index></argument>&gt;</argument_list></name></type> <name>solution</name> =<init> <expr>new <call><name><name>Solution</name><argument_list>&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SolutionInstance</name></type> <name>skey</name> =<init> <expr>new <call><name>SolutionInstance</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>provider</name>.<name>register</name></name><argument_list>(<argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>provider</name>.<name>setDefault_service</name></name><argument_list>(<argument><expr><name><name>InstanceService</name>.<name><name/></name></name>class</expr></argument>,<argument><expr><name><name>Solution</name>.<name><name/></name></name>class</expr></argument>,<argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Initial population</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>POPSIZE</name> =<init> <expr>100</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name><name>Solution</name><argument_list>&lt;<argument><name>double</name><index>[]</index></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>pop</name> =<init> <expr><call><name><name>InstanceProvider</name>.<name>get</name></name><argument_list>(<argument><expr><name>solution</name></expr></argument>, <argument><expr><name>POPSIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Function being optimized</comment>
        <decl_stmt><decl><type><name>OptimizationFunction</name></type> <name>function</name> =<init> <expr>new <call><name>Schwefel</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> 
        
        <comment type="line">// Evaluating the fitness of the initial population</comment>
        <expr_stmt><expr><call><name><name>Solution</name>.<name>evaluate</name></name><argument_list>(<argument><expr>(<name>Vector</name>)<name>pop</name></expr></argument>,<argument><expr><name>function</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>sigma</name> =<init> <expr>0.2</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GaussianMutation</name></type> <name>mutation</name> =<init> <expr>new <call><name>GaussianMutation</name><argument_list>(<argument><expr><call><name><name>DoubleArrayInit</name>.<name>create</name></name><argument_list>(<argument><expr><name>DIMENSION</name></expr></argument>, <argument><expr><name>sigma</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 <comment type="block">/*       
        ArityOne mutation = new EllipticMutation(DIMENSION, sigma,
//                new StandardGaussianGenerator());
                new SimplestSymmetricPowerLawGenerator());
*/</comment>
        <comment type="line">// Hill Climbing</comment>
<comment type="line">//        Transformation transformation = new HillClimbing(mutation);</comment>
        <decl_stmt><decl><type><name>Transformation</name></type> <name>transformation</name> =<init> <expr>new <call><name>ESOneFifth</name><argument_list>(<argument><expr><name>mutation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Evolution generations</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>MAXITER</name> =<init> <expr>10</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Predicate</name></type> <name>condition</name> =<init> <expr>new <call><name>ForLoopCondition</name><argument_list>(<argument><expr><name>MAXITER</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Evolutionary algorithm (is a population optimizer)</comment>
        <decl_stmt><decl><type><name>PopulationOptimizer</name></type> <name>optimizer</name> =<init> <expr>new <call><name>IterativePopulationOptimizer</name><argument_list>(<argument><expr><name>condition</name></expr></argument>,
                <argument><expr><name>transformation</name></expr></argument>, <argument><expr><name>pop</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// A console set tracer</comment>
        <decl_stmt><decl><type><name>Tracer</name></type> <name>tracer</name> =<init> <expr>new <call><name>ConsoleTracer</name><argument_list>(<argument><expr><name>optimizer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// Adding the tracer collection to the given population optimizer (evolutionary algorithm)</comment>
        <expr_stmt><expr><call><name><name>provider</name>.<name>register</name></name><argument_list>(<argument><expr><name>tracer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//tracer = new FileTracer(optimizer, "hc.txt", true);</comment>
        <comment type="line">//provider.register(tracer);</comment>

        <comment type="line">// running the population optimizer (the evolutionary algorithm)</comment>
        <expr_stmt><expr><call><name><name>optimizer</name>.<name>apply</name></name><argument_list>(<argument><expr><name>function</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>tracer</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
 
    }</block></function>    
}</block></class>
</unit>
