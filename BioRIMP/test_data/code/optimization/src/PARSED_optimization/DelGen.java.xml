<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="D:\thesisCode\BioRIMP\test_data\code\optimization\src\unalcol\optimization\operators\binary\varlength\DelGen.java"><package>package <name><name>unalcol</name>.<name>optimization</name>.<name>operators</name>.<name>binary</name>.<name>varlength</name></name>;</package>
<import>import <name><name>unalcol</name>.<name>optimization</name>.<name>operators</name>.<name>binary</name>.<name>BinaryArityOne</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>random</name></name>.*;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>bitarray</name>.<name>BitArray</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>clone</name></name>.*;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>vector</name></name>.*;</import>


<comment type="javadoc">/**
 * &lt;p&gt;Title: DelGen&lt;/p&gt;
 * &lt;p&gt;Description: The gene deletion operator.  Deletes a gene in the genome&lt;/p&gt;
 * &lt;p&gt;Copyright: Copyright (c) 2010&lt;/p&gt;
 * @author Jonatan Gomez
 * @version 1.0
 */</comment>

<class><specifier>public</specifier> class <name>DelGen</name> <super><extends>extends <name>BinaryArityOne</name></extends></super> <block>{
  <comment type="javadoc">/**
   * If the last gene is going to be deleted or one randomly selected
   */</comment>
  <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>del_last_gene</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>gene_size</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>min_length</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>max_length</name></decl>;</decl_stmt>


  <constructor><specifier>public</specifier> <name>DelGen</name><parameter_list>(<param><decl><type><name>int</name></type> <name>gene_size</name></decl></param>, <param><decl><type><name>int</name></type> <name>min_length</name></decl></param>, <param><decl><type><name>int</name></type> <name>max_length</name></decl></param>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name>.<name>gene_size</name></name> = <name>gene_size</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name>.<name>min_length</name></name> = <name>min_length</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name>.<name>max_length</name></name> = <name>max_length</name></expr>;</expr_stmt>
  }</block></constructor>


  <comment type="javadoc">/**
   * Constructor: create a deletion gene operator that deletes a gene of a genome
   * @param gene_size Number of bits defining a gene
   * @param min_length Minimum number of genes in the chromosome
   * @param max_length Maximun number of genes in the chromosome
   * @param del_last_gene Determines if the gene to be deleted is the last in
   * the genome or not. A true value indicates that the last gene is deleted.
   * A false value indiciates that a gene is randomly selected and deleted
   */</comment>
  <constructor><specifier>public</specifier> <name>DelGen</name><parameter_list>(<param><decl><type><name>int</name></type> <name>gene_size</name></decl></param>, <param><decl><type><name>int</name></type> <name>min_length</name></decl></param>, <param><decl><type><name>int</name></type> <name>max_length</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>del_last_gene</name></decl></param>)</parameter_list> <block>{
      <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>gene_size</name></expr></argument>, <argument><expr><name>min_length</name></expr></argument>, <argument><expr><name>max_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name>.<name>del_last_gene</name></name> = <name>del_last_gene</name></expr>;</expr_stmt>
  }</block></constructor>

  <comment type="javadoc">/**
   * Delete from the given genome the last gene
   * @param gen Genome to be modified
   */</comment>
  <function><type><specifier>public</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>BitArray</name></argument>&gt;</argument_list></name></type> <name>generates</name><parameter_list>(<param><decl><type><name>BitArray</name></type> <name>gen</name></decl></param>)</parameter_list> <block>{
      <try>try<block>{
          <decl_stmt><decl><type><name>BitArray</name></type> <name>genome</name> =<init> <expr>(<name>BitArray</name>) <call><name><name>Clone</name>.<name>get</name></name><argument_list>(<argument><expr><name>gen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if>if <condition>(<expr><call><name><name>genome</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; <name>min_length</name> + <name>gene_size</name></expr>)</condition><then> <block>{
              <if>if <condition>(<expr><name>del_last_gene</name></expr>)</condition><then> <block>{
                  <expr_stmt><expr><call><name><name>genome</name>.<name>del</name></name><argument_list>(<argument><expr><name>gene_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              }</block></then> <else>else <block>{
                  <decl_stmt><decl><type><name>int</name></type> <name>size</name> =<init> <expr>(<call><name><name>genome</name>.<name>size</name></name><argument_list>()</argument_list></call>-<name>min_length</name>)/<name>gene_size</name></expr></init></decl>;</decl_stmt>
                  <decl_stmt><decl><type><name>int</name></type> <name>k</name> =<init> <expr><call><name><name>Random</name>.<name>nextInt</name></name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                  <decl_stmt><decl><type><name>BitArray</name></type> <name>right</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><name>right</name> = <call><name><name>genome</name>.<name>subBitArray</name></name><argument_list>(<argument><expr><name>min_length</name> + (<name>k</name> + 1) * <name>gene_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>genome</name>.<name>del</name></name><argument_list>(<argument><expr>(<name>size</name> - <name>k</name>) * <name>gene_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>genome</name>.<name>add</name></name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              }</block></else></if>
          }</block></then></if>
          <decl_stmt><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>BitArray</name></argument>&gt;</argument_list></name></type> <name>v</name> =<init> <expr>new <call><name><name>Vector</name><argument_list>&lt;<argument><name>BitArray</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>v</name>.<name>add</name></name><argument_list>(<argument><expr><name>genome</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>v</name></expr>;</return>
      }</block><catch>catch( <param><decl><type><name>Exception</name></type> <name>e</name></decl></param> )<block>{
      }</block></catch></try>
      <return>return <expr><name>null</name></expr>;</return>
 }</block></function>

 <comment type="javadoc">/**
  * Testing function
  */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>argv</name></decl></param>)</parameter_list><block>{
    <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"*** Generating a genome of 27 genes randomly ***"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>BitArray</name></type> <name>genome</name> =<init> <expr>new <call><name>BitArray</name><argument_list>(<argument><expr>27</expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>genome</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"*** Generating a Deletion Gen operation with gen length of 3 ***"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>DelGen</name></type> <name>del</name> =<init> <expr>new <call><name>DelGen</name><argument_list>(<argument><expr>21</expr></argument>, <argument><expr>27</expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"*** Applying the deletion ***"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>BitArray</name></type> <name>gene</name> =<init> <expr><call><name><name>del</name>.<name>generates</name></name><argument_list>(<argument><expr><name>genome</name></expr></argument>)</argument_list></call>.<call><name>get</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"*** Mutated genome ***"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><name>gene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  }</block></function>
}</block></class>
</unit>
