<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="D:\thesisCode\BioRIMP\test_data\code\optimization\src\unalcol\optimization\selection\Uniform.java"><package>package <name><name>unalcol</name>.<name>optimization</name>.<name>selection</name></name>;</package>

<import>import <name><name>unalcol</name>.<name>optimization</name>.<name>solution</name>.<name>Solution</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>optimization</name></name>.*;</import>
<import>import <name><name>unalcol</name>.<name>random</name>.<name>integer</name></name>.*;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>vector</name></name>.*;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Title: Uniform&lt;/p&gt;
 * &lt;p&gt;Description: The uniform selection operator. In this selection strategy all individuals
 * have the same probability to be choosen&lt;/p&gt;
 * &lt;p&gt;Copyright: Copyright (c) 2010&lt;/p&gt;
 * &lt;p&gt;Company: Kunsamu&lt;/p&gt;
 * @author Jonatan Gomez
 * @version 1.0
 */</comment>

<class><specifier>public</specifier> class <name><name>Uniform</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name> <super><extends>extends <name><name>Selection</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></extends></super> <block>{

  <comment type="javadoc">/**
   * Default constructor
   */</comment>
  <constructor><specifier>public</specifier> <name>Uniform</name><parameter_list>()</parameter_list><block>{
  }</block></constructor>

  <comment type="javadoc">/**
   * Choose an individuals from the population
   * @param generator A uniform random generator for selecting the candidate solution
   * @param population Population source of the selection process
   * @return Index of the tournament winner individual
   */</comment>
  <function><type><specifier>protected</specifier> <name><name>Solution</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>choose_one</name><parameter_list>( <param><decl><type><name>UniformIntegerGenerator</name></type> <name>generator</name></decl></param>,
                                    <param><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name><name>Solution</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>population</name></decl></param> )</parameter_list><block>{
    <return>return <expr><call><name><name>population</name>.<name>get</name></name><argument_list>(<argument><expr><call><name><name>generator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <comment type="javadoc">/**
   * Choose an individuals from the population
   * @param generator A uniform random generator for selecting the tournament players
   * @param population Population source of the selection process
   * @return Index of the tournament winner individual
   */</comment>
  <function><type><specifier>public</specifier> <name><name>Solution</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>choose_one</name><parameter_list>( <param><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name><name>Solution</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>population</name></decl></param> )</parameter_list><block>{
    <return>return <expr><call><name>choose_one</name><argument_list>(<argument><expr>new <call><name>UniformIntegerGenerator</name><argument_list>(<argument><expr><call><name><name>population</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>population</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <comment type="javadoc">/**
   * Choose a set of individuals from the population including the individual x
   * @param population Population source of the selection process
   * @param x Individual to be included in the selection
   */</comment>
  <function><type><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name><name>Solution</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>apply</name><parameter_list>( <param><decl><type><name>int</name></type> <name>n</name></decl></param>, <param><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name><name>Solution</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>population</name></decl></param> )</parameter_list><block>{
    <decl_stmt><decl><type><name>UniformIntegerGenerator</name></type> <name>g</name> =<init>  <expr>new <call><name>UniformIntegerGenerator</name><argument_list>(<argument><expr><call><name><name>population</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name><name>Solution</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>sel</name> =<init> <expr>new <call><name><name>Vector</name><argument_list>&lt;<argument><name><name>Solution</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <expr_stmt><expr><call><name><name>sel</name>.<name>add</name></name><argument_list>(<argument><expr><call><name>choose_one</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>population</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><name>sel</name></expr>;</return>
  }</block></function>
}</block></class></unit>
