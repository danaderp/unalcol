<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\BioRIMP\test_data\code\optimization\src\unalcol\optimization\selection\Elitism.java"><package>package <name><name>unalcol</name>.<name>optimization</name>.<name>selection</name></name>;</package>

<import>import <name><name>unalcol</name>.<name>optimization</name>.<name>solution</name>.<name>SolutionOrder</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>optimization</name>.<name>solution</name>.<name>Solution</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>clone</name>.<name>Clone</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>optimization</name></name>.*;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>vector</name></name>.*;</import>
<import>import <name><name>unalcol</name>.<name>random</name>.<name>integer</name></name>.*;</import>
<import>import <name><name>unalcol</name>.<name>sort</name>.<name>ReversedOrder</name></name>;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Title: Elitism&lt;/p&gt;
 * &lt;p&gt;Description: A elitist selection strategy. In this strategy the best individuals
 * (Elite percentage) are always selected and the worst individuals (cull percentange)
 * are never taken into account. The remaining part of the individual is choosen
 * randomly, and each individual has a probability to be choosen that is proportional to
 * its OptimizationFunction.&lt;/p&gt;
 * &lt;p&gt;Copyright: Copyright (c) 2010&lt;/p&gt;
 * &lt;p&gt;Company: Kunsamu&lt;/p&gt;
 * @author Jonatan Gomez
 * @version 1.0
 */</comment>
<class><specifier>public</specifier> class <name><name>Elitism</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name> <super><extends>extends <name><name>Selection</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></extends></super> <block>{

  <comment type="javadoc">/**
   * Elite percentage: Percentage of individuals to be included in the selection
   * according to their OptimizationFunction
   */</comment>
  <decl_stmt><decl><type><specifier>protected</specifier> <name>double</name></type> <name>elite_percentage</name> =<init> <expr>0.1</expr></init></decl>;</decl_stmt>
  <comment type="javadoc">/**
   * Cull percentage: percentage of individuals to be excluded in the selection
   * according to their OptimizationFunction
   */</comment>
  <decl_stmt><decl><type><specifier>protected</specifier> <name>double</name></type> <name>cull_percentage</name> =<init> <expr>0.1</expr></init></decl>;</decl_stmt>

  <comment type="javadoc">/**
   * Constructor: Create a Elitist selection strategy.
   * @param _environment Environment of the Population
   * @param _n Number of individuals to be choosen
   * @param _includeX If the individual given in the apply method is going to be selected always or not
   * @param _elite_percentage Percentage of individuals to be included in the selection
   * @param _cull_percentage Percentage of individuals to be excluded in the selection
   */</comment>
  <constructor><specifier>public</specifier> <name>Elitism</name><parameter_list>( <param><decl><type><name>double</name></type> <name>_elite_percentage</name></decl></param>, <param><decl><type><name>double</name></type> <name>_cull_percentage</name></decl></param> )</parameter_list><block>{
    <expr_stmt><expr><name>elite_percentage</name> = <name>_elite_percentage</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cull_percentage</name> = <name>_cull_percentage</name></expr>;</expr_stmt>
  }</block></constructor>

  <comment type="javadoc">/**
   * Choose a set of individuals from the population including the individual x
   * @param population Population source of the selection process
   * @param x Individual to be included in the selection
   */</comment>
  <function><type><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name><name>Solution</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>apply</name><parameter_list>( <param><decl><type><name>int</name></type> <name>n</name></decl></param>, <param><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name><name>Solution</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>parents</name></decl></param> )</parameter_list><block>{
      <decl_stmt><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name><name>Solution</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>sel</name> =<init> <expr>new <call><name>Vector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>s</name> =<init> <expr><call><name><name>parents</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>parents</name> = (<name><name>Vector</name><argument_list>&lt;<argument><name><name>Solution</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name>)<call><name><name>Clone</name>.<name>get</name></name><argument_list>(<argument><expr><name>parents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name><name>VectorSort</name><argument_list>&lt;<argument><name><name>Solution</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>sort</name> =<init> <expr>new <call><name>VectorSort</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>sort</name>.<name>apply</name></name><argument_list>( <argument><expr><name>parents</name></expr></argument>, <argument><expr>new <call><name>ReversedOrder</name><argument_list>( <argument><expr>new <call><name>SolutionOrder</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr></argument>  )</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>m</name> =<init> <expr><call>(<name>int</name>) <argument_list>(<argument><expr><call><name><name>parents</name>.<name>size</name></name><argument_list>()</argument_list></call> * <name>elite_percentage</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>n</name> &amp;&amp; <name>i</name> &lt; <name>m</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
          <expr_stmt><expr><call><name><name>sel</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>parents</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></for>
      <if>if<condition>( <expr><name>m</name>&lt;<name>n</name></expr> )</condition><then><block>{
          <decl_stmt><decl><type><name>int</name></type> <name>k</name> =<init> <expr><call>(<name>int</name>) <argument_list>(<argument><expr><name>s</name> * (1.0 - <name>cull_percentage</name>)</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>weight</name> =<init> <expr>new <name><name>double</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>double</name></type> <name>total</name> =<init> <expr><name>k</name> * (<name>k</name> + 1) / 2.0</expr></init></decl>;</decl_stmt>
          <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>k</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
              <expr_stmt><expr><name><name>weight</name><index>[<expr><name>i</name></expr>]</index></name> = (<name>k</name> - <name>i</name>) / <name>total</name></expr>;</expr_stmt>
          }</block></for>
          <decl_stmt><decl><type><name>Roulette</name></type> <name>generator</name> =<init> <expr>new <call><name>Roulette</name><argument_list>(<argument><expr><name>weight</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name>n</name> -= <name>m</name></expr>;</expr_stmt>
          <decl_stmt><decl><type><name>int</name><index>[]</index></type> <name>index</name> =<init> <expr><call><name><name>generator</name>.<name>generate</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <for>for (<init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
              <expr_stmt><expr><call><name><name>sel</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>parents</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>index</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></for>
      }</block></then></if>
      <return>return <expr><name>sel</name></expr>;</return>
  }</block></function>

  <comment type="javadoc">/**
   * Gets a single candidate solution from the population using the selection mechanism
   * @param population Population of candidate solutions used for getting one candidate solution
   * @return A single candidate solution from the population
   */</comment>
  <function><type><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <name><name>Solution</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>choose_one</name><parameter_list>( <param><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name><name>Solution</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>population</name></decl></param> )</parameter_list><block>{
      <decl_stmt><decl><type><name>SolutionOrder</name></type> <name>order</name> =<init> <expr>new <call><name>SolutionOrder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>Solution</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>theOne</name> =<init> <expr><call><name><name>population</name>.<name>get</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for( <init><decl><type><name>int</name></type> <name>i</name>=<init><expr>1</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<call><name><name>population</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> )<block>{
          <if>if<condition>( <expr><call><name><name>order</name>.<name>compare</name></name><argument_list>(<argument><expr><name>theOne</name></expr></argument>, <argument><expr><call><name><name>population</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &lt; 0</expr> )</condition><then><block>{
              <expr_stmt><expr><name>theOne</name> = <call><name><name>population</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then></if>
      }</block></for>
      <return>return <expr><name>theOne</name></expr>;</return>
  }</block></function>
}</block></class></unit>
