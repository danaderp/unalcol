<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="D:\thesisCode\BioRIMP\test_data\code\optimization\src\unalcol\optimization\testbed\real\lsgo_benchmark\ShiftedPermutatedFunction.java"><package>package <name><name>unalcol</name>.<name>optimization</name>.<name>testbed</name>.<name>real</name>.<name>lsgo_benchmark</name></name>;</package>
<comment type="block">/*
 * Copyright (c) 2009 Thomas Weise for NICAL
 * http://www.it-weise.de/
 * tweise@gmx.de
 *
 * GNU LESSER GENERAL PUBLIC LICENSE (Version 2.1, February 1999)
 */</comment>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>

<comment type="javadoc">/**
 * A function which is shifted and permutated
 * 
 * @author Thomas Weise
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>ShiftedPermutatedFunction</name> <super><extends>extends <name>ShiftedFunction</name></extends></super> <block>{

  <comment type="javadoc">/** the serial version id */</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>1</expr></init></decl>;</decl_stmt>

  <comment type="javadoc">/** the permutation */</comment>
  <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>int</name><index>[]</index></type> <name>m_p</name></decl>;</decl_stmt>

  <comment type="javadoc">/**
   * Create a new shifted function
   * 
   * @param o
   *          the shifted global optimum
   * @param p
   *          the permutation vector
   * @param min
   *          the minimum value a decision variable can take on
   * @param max
   *          the maximum value a decision variable can take on
   */</comment>
  <constructor><specifier>protected</specifier> <name>ShiftedPermutatedFunction</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>double</name><index>[]</index></name></type> <name>o</name></decl></param>, <param><decl><type><specifier>final</specifier> <name><name>int</name><index>[]</index></name></type> <name>p</name></decl></param>,
      <param><decl><type><specifier>final</specifier> <name>double</name></type> <name>min</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>double</name></type> <name>max</name></decl></param>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name>.<name>m_p</name></name> = <name>p</name></expr>;</expr_stmt>
  }</block></constructor>

  <comment type="javadoc">/**
   * Obtain the permutation vector of the benchmark function
   * 
   * @return the permutation of the benchmark function
   */</comment>
  <function><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name><index>[]</index></type> <name>getPermutationVector</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name><name>this</name>.<name>m_p</name></name></expr>;</return>
  }</block></function>

  <comment type="javadoc">/**
   * Store the utility information
   * 
   * @param f
   *          the directory
   * @throws Throwable
   *           a possible io exception
   */</comment>
  <comment type="line">// @Override</comment>
  <function><type><name>void</name></type> <name>storeUtilityInfo</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>File</name></type> <name>f</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>Throwable</name></expr></argument></throws> <block>{
    <decl_stmt><decl><type><name>Throwable</name></type> <name>s</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>s</name> = <name>null</name></expr>;</expr_stmt>

    <try>try <block>{
      <expr_stmt><expr><call><name><name>super</name>.<name>storeUtilityInfo</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block> <catch>catch (<param><decl><type><name>Throwable</name></type> <name>t</name></decl></param>) <block>{
      <expr_stmt><expr><name>s</name> = <name>t</name></expr>;</expr_stmt>
    }</block></catch></try>

    <try>try <block>{
      <expr_stmt><expr><call><name><name>Utils</name>.<name>storePermVector</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><call><name><name>this</name>.<name>getShortName</name></name><argument_list>()</argument_list></call> + <comment type="line">//</comment> 
          "_p.txt"</expr></argument>)</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>this</name>.<name>m_p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//$NON-NLS-1$</comment>
    }</block> <catch>catch (<param><decl><type><name>Throwable</name></type> <name>t</name></decl></param>) <block>{
      <if>if <condition>(<expr><name>s</name> == <name>null</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>s</name> = <name>t</name></expr>;</expr_stmt>
      }</block></then></if>
    }</block></catch></try>

    <if>if <condition>(<expr><name>s</name> != <name>null</name></expr>)</condition><then> <block>{
      <throw>throw <expr><name>s</name></expr>;</throw>
    }</block></then></if>
  }</block></function>

}</block></class>
</unit>
