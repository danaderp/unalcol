<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="D:\thesisCode\BioRIMP\test_data\code\optimization\src\unalcol\optimization\operators\binary\Mutation.java"><package>package <name><name>unalcol</name>.<name>optimization</name>.<name>operators</name>.<name>binary</name></name>;</package>

<import>import <name><name>unalcol</name>.<name>random</name>.<name>util</name></name>.*;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>bitarray</name>.<name>BitArray</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>vector</name></name>.*;</import>
<import>import <name><name>unalcol</name>.<name>clone</name></name>.*;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Title: Mutation&lt;/p&gt;
 * &lt;p&gt;Description: The simple bit mutation operator&lt;/p&gt;
 * &lt;p&gt;Copyright: Copyright (c) 2010&lt;/p&gt;
 * @author Jonatan Gomez
 * @version 1.0
 */</comment>

<class><specifier>public</specifier> class <name>Mutation</name> <super><extends>extends <name>BinaryArityOne</name></extends></super> <block>{
  <comment type="javadoc">/**
   * Probability of mutating one single bit
   */</comment>
  <decl_stmt><decl><type><specifier>protected</specifier> <name>double</name></type> <name>bit_mutation_rate</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>

  <comment type="javadoc">/**
   * Constructor: Creates a mutation with a mutation probability depending on the size of the genome
   */</comment>
  <constructor><specifier>public</specifier> <name>Mutation</name><parameter_list>()</parameter_list> <block>{}</block></constructor>

  <comment type="javadoc">/**
   * Constructor: Creates a mutation with the given mutation rate
   * @param bit_mutation_rate Probability of mutating each single bit
   */</comment>
  <constructor><specifier>public</specifier> <name>Mutation</name><parameter_list>(<param><decl><type><name>double</name></type> <name>bit_mutation_rate</name></decl></param>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name>.<name>bit_mutation_rate</name></name> = <name>bit_mutation_rate</name></expr>;</expr_stmt>
  }</block></constructor>

  <comment type="javadoc">/**
   * Flips a bit in the given genome
   * @param gen Genome to be modified
   * @return Number of mutated bits
   */</comment>
  <function><type><specifier>public</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>BitArray</name></argument>&gt;</argument_list></name></type> <name>generates</name><parameter_list>(<param><decl><type><name>BitArray</name></type> <name>gen</name></decl></param>)</parameter_list> <block>{
    <try>try<block>{
      <decl_stmt><decl><type><name>BitArray</name></type> <name>genome</name> =<init> <expr>(<name>BitArray</name>) <call><name><name>Clone</name>.<name>get</name></name><argument_list>(<argument><expr><name>gen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>count</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>double</name></type> <name>rate</name> =<init> <expr>1.0 - ((<name>bit_mutation_rate</name> == 0.0)?1.0/<call><name><name>genome</name>.<name>size</name></name><argument_list>()</argument_list></call>:<name>bit_mutation_rate</name>)</expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>BooleanGenerator</name></type> <name>g</name> =<init> <expr>new <call><name>BooleanGenerator</name><argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>genome</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <if>if <condition>(<expr><call><name><name>g</name>.<name>next</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>genome</name>.<name>not</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>count</name>++</expr>;</expr_stmt>
        }</block></then></if>
      }</block></for>
      <decl_stmt><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>BitArray</name></argument>&gt;</argument_list></name></type> <name>v</name> =<init> <expr>new <call><name><name>Vector</name><argument_list>&lt;<argument><name>BitArray</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>v</name>.<name>add</name></name><argument_list>(<argument><expr><name>genome</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>v</name></expr>;</return>
    }</block><catch>catch( <param><decl><type><name>Exception</name></type> <name>e</name></decl></param> )<block>{ 
        <expr_stmt><expr><call><name><name>e</name>.<name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"[Mutation]"+<call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></catch></try>
    <return>return <expr><name>null</name></expr>;</return>
  }</block></function>



 <comment type="javadoc">/**
  * Testing function
  */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>argv</name></decl></param>)</parameter_list><block>{
    <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"*** Generating a genome of 21 genes randomly ***"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>BitArray</name></type> <name>genome</name> =<init> <expr>new <call><name>BitArray</name><argument_list>(<argument><expr>21</expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>genome</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Mutation</name></type> <name>mutation</name> =<init> <expr>new <call><name>Mutation</name><argument_list>(<argument><expr>0.05</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"*** Applying the mutation ***"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>BitArray</name></type> <name>mutated</name> =<init> <expr><call><name><name>mutation</name>.<name>generates</name></name><argument_list>(<argument><expr><name>genome</name></expr></argument>)</argument_list></call>.<call><name>get</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Mutated array " + <name>mutated</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  }</block></function>

}</block></class>
</unit>
