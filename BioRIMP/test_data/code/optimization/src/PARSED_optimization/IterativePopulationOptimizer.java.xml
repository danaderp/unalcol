<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="D:\thesisCode\BioRIMP\test_data\code\optimization\src\unalcol\optimization\iterative\IterativePopulationOptimizer.java"><package>package <name><name>unalcol</name>.<name>optimization</name>.<name>iterative</name></name>;</package>

<import>import <name><name>unalcol</name>.<name>optimization</name>.<name>transformation</name>.<name>Transformation</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>tracer</name></name>.*;</import>
<import>import <name><name>unalcol</name>.<name>descriptors</name></name>.*;</import>
<import>import <name><name>unalcol</name>.<name>algorithm</name>.<name>iterative</name></name>.*;</import>
<import>import <name><name>unalcol</name>.<name>math</name>.<name>logic</name>.<name>Predicate</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>optimization</name>.<name>OptimizationFunction</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>optimization</name>.<name>PopulationOptimizer</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>optimization</name>.<name>solution</name>.<name>Solution</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>vector</name>.<name>Vector</name></name>;</import>


<comment type="javadoc">/**
 * &lt;p&gt;Title: IterativePopulationOptimizer&lt;/p&gt;
 * &lt;p&gt;Description: Abstract iterative population based optimization techniique&lt;/p&gt;
 * &lt;p&gt;Copyright:    Copyright (c) 2010&lt;/p&gt;
 * &lt;p&gt;Company: Kunsamu&lt;/p&gt;
 * @author Jonatan Gomez
 * @version 1.0
 */</comment>
<class><specifier>public</specifier> class <name><name>IterativePopulationOptimizer</name><argument_list>&lt;<argument><name>S</name></argument>&gt;</argument_list></name>
        <super><extends>extends <name><name>IterativeAlgorithm</name><argument_list>&lt;<argument><name><name>OptimizationFunction</name><argument_list>&lt;<argument><name>S</name></argument>&gt;</argument_list></name></argument>,<argument><name><name>Vector</name><argument_list>&lt;<argument><name><name>Solution</name><argument_list>&lt;<argument><name>S</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></extends>
        <implements>implements <name><name>PopulationOptimizer</name><argument_list>&lt;<argument><name>S</name></argument>&gt;</argument_list></name></implements></super><block>{

  <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>generation</name></decl>;</decl_stmt>

  <comment type="javadoc">/**
   * The transformation function used to evolve the population
   */</comment>
  <decl_stmt><decl><type><specifier>protected</specifier> <name><name>Transformation</name><argument_list>&lt;<argument><name>S</name></argument>&gt;</argument_list></name></type> <name>transformation</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

  <function><type><specifier>public</specifier> <name>int</name></type> <name>generation</name><parameter_list>()</parameter_list><block>{
      <return>return <expr><name>generation</name></expr>;</return>
  }</block></function>

  <function><type><specifier>public</specifier> <name><name>Transformation</name><argument_list>&lt;<argument><name>S</name></argument>&gt;</argument_list></name></type> <name>transformation</name><parameter_list>()</parameter_list><block>{
      <return>return <expr><name>transformation</name></expr>;</return>
  }</block></function>

  <comment type="javadoc">/**
   * Constructor: Creates an evolutionary algorithm with the given population,
   * continuation condition and transformation function
   * @param population  The population to evolved
   * @param transformation The transformation operation
   * @param condition  The evolution condition (the evolutionary process is executed
   * until the condition is false)
   */</comment>
  <constructor><specifier>public</specifier> <name>IterativePopulationOptimizer</name><parameter_list>( <param><decl><type><name>Predicate</name></type> <name>condition</name></decl></param>,
                              <param><decl><type><name><name>Transformation</name><argument_list>&lt;<argument><name>S</name></argument>&gt;</argument_list></name></type> <name>transformation</name></decl></param>, <param><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name><name>Solution</name><argument_list>&lt;<argument><name>S</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>population</name></decl></param> )</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>condition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name>.<name>transformation</name></name> = <name>transformation</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name>.<name>output</name></name> = <name>population</name></expr>;</expr_stmt>
  }</block></constructor>

  <comment type="javadoc">/**
   * Initializes the algorithm.
   */</comment>
  <function><type><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <name>void</name></type> <name>init</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name>.<name>init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>transformation</name> != <name>null</name></expr>)</condition><then> <block>{ <expr_stmt><expr><call><name><name>transformation</name>.<name>init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> }</block></then></if>
  }</block></function>

  <function><type><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name><name>Solution</name><argument_list>&lt;<argument><name>S</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>nonIterOutput</name><parameter_list>( <param><decl><type><name><name>OptimizationFunction</name><argument_list>&lt;<argument><name>S</name></argument>&gt;</argument_list></name></type> <name>f</name></decl></param> )</parameter_list><block>{
      <expr_stmt><expr><call><name><name>Solution</name>.<name>evaluate</name></name><argument_list>(<argument><expr>(<name>Vector</name>)<name>output</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>generation</name> = 0</expr>;</expr_stmt>
      <expr_stmt><expr><call><name>updateTrace</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>output</name></expr>;</return>
  }</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>updateTrace</name><parameter_list>()</parameter_list><block>{
      <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>stat</name> =<init> <expr><call><name><name>DescriptorsProvider</name>.<name>descriptors</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>best</name> =<init> <expr><call><name><name>DescriptorsProvider</name>.<name>descriptors</name></name><argument_list>(<argument><expr><call><name><name>output</name>.<name>get</name></name><argument_list>(<argument><expr>(<name>int</name>)<name><name>stat</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call>.<call><name>get</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if<condition>( <expr><name>best</name> != <name>null</name></expr> )</condition><then><block>{
          <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>nstat</name> =<init> <expr>new <name><name>double</name><index>[<expr><name><name>stat</name>.<name>length</name></name>+<name><name>best</name>.<name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
          <for>for( <init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name><name>stat</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> )<block>{
              <expr_stmt><expr><name><name>nstat</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>stat</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
          }</block></for>
          <decl_stmt><decl><type><name>int</name></type> <name>k</name> =<init> <expr><name><name>stat</name>.<name>length</name></name></expr></init></decl>;</decl_stmt>
          <for>for( <init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name><name>best</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> )<block>{
              <expr_stmt><expr><name><name>nstat</name><index>[<expr><name>i</name>+<name>k</name></expr>]</index></name> = <name><name>best</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
          }</block></for>
          <expr_stmt><expr><name>stat</name> = <name>nstat</name></expr>;</expr_stmt>
      }</block></then></if>
      <expr_stmt><expr><call><name><name>TracerProvider</name>.<name>trace</name></name><argument_list>( <argument><expr><name>this</name></expr></argument>, <argument><expr><name>stat</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  }</block></function>


  <comment type="javadoc">/**
   * An evolutionary algorithm iteration
   */</comment>
  <function><type><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name><name>Solution</name><argument_list>&lt;<argument><name>S</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>iteration</name><parameter_list>( <param><decl><type><name>int</name></type> <name>k</name></decl></param>, <param><decl><type><name><name>OptimizationFunction</name><argument_list>&lt;<argument><name>S</name></argument>&gt;</argument_list></name></type> <name>f</name></decl></param>, 
          <param><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name><name>Solution</name><argument_list>&lt;<argument><name>S</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>output</name></decl></param> )</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name>.<name>output</name></name> = <call><name><name>transformation</name>.<name>apply</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>generation</name> = <name>k</name>+1</expr>;</expr_stmt>
    <expr_stmt><expr><call><name>updateTrace</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name><name>this</name>.<name>output</name></name></expr>;</return>
  }</block></function>
}</block></class></unit>
