<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="D:\thesisCode\BioRIMP\test_data\code\optimization\src\unalcol\optimization\random\SteadyState.java"><comment type="block">/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */</comment>
<package>package <name><name>unalcol</name>.<name>optimization</name>.<name>random</name></name>;</package>

<import>import <name><name>unalcol</name>.<name>optimization</name>.<name>solution</name>.<name>Solution</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>optimization</name>.<name>solution</name>.<name>SolutionOrder</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>optimization</name>.<name>solution</name>.<name>SolutionReplacement</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>vector</name>.<name>Vector</name></name>;</import>

<comment type="javadoc">/**
 *
 * @author jgomez
 */</comment>
<class><specifier>public</specifier> class <name><name>SteadyState</name> <argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name> <super><extends>extends <name><name>SolutionReplacement</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></extends></super><block>{
    <decl_stmt><decl><type><specifier>protected</specifier> <name>SolutionOrder</name></type> <name>order</name> =<init> <expr>new <call><name>SolutionOrder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <constructor><specifier>public</specifier> <name>SteadyState</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name><name>Solution</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>apply</name><parameter_list>( <param><decl><type><name><name>Solution</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>solution</name></decl></param>, <param><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name><name>Solution</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>candidates</name></decl></param>)</parameter_list><block>{
        <decl_stmt><decl><type><name><name>Solution</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>theCandidate</name> =<init> <expr><call><name><name>Solution</name>.<name>best</name></name><argument_list>(<argument><expr>(<name>Vector</name>)<name>candidates</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if<condition>( <expr><call><name><name>order</name>.<name>compare</name></name><argument_list>(<argument><expr><name>theCandidate</name></expr></argument>, <argument><expr><name>solution</name></expr></argument>)</argument_list></call> &gt;= 0</expr> )</condition><then><block>{
            <return>return <expr><name>theCandidate</name></expr>;</return>
        }</block></then><else>else<block>{
            <return>return <expr><name>solution</name></expr>;</return>
        }</block></else></if>
    }</block></function>
}</block></class>
</unit>
