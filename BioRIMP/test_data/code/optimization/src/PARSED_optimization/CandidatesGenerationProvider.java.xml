<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="D:\thesisCode\BioRIMP\test_data\code\optimization\src\unalcol\optimization\generation\CandidatesGenerationProvider.java"><package>package <name><name>unalcol</name>.<name>optimization</name>.<name>generation</name></name>;</package>
<import>import <name><name>unalcol</name>.<name>reflect</name>.<name>service</name></name>.*;</import>
<import>import <name><name>unalcol</name>.<name>reflect</name>.<name>util</name></name>.*;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Title: CandidatesGenerationProvider&lt;/p&gt;
 * &lt;p&gt;Description: Candidates Generation provider. It is for compatibility with
 * the service provider infra-structure&lt;/p&gt;
 * &lt;p&gt;Copyright: Copyright (c) 2010&lt;/p&gt;
 * &lt;p&gt;Company: Kunsamu&lt;/p&gt;
 * @author Jonatan Gomez
 * @version 1.0
 */</comment>

<class><specifier>public</specifier> class <name>CandidatesGenerationProvider</name> <block>{

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>PopulationGeneration</name><index>[]</index></type> <name>get</name><parameter_list>()</parameter_list><block>{
        <try>try<block>{
           <decl_stmt><decl><type><name>Service</name><index>[]</index></type> <name>services</name> =<init> <expr><call><name><name>ReflectUtil</name>.<name>getProvider</name></name><argument_list>()</argument_list></call>.
                   <call><name>owned_services</name><argument_list>(<argument><expr><name><name>PopulationGeneration</name>.<name><name/></name></name>class</expr></argument>, <argument><expr><name><name>Object</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
           <decl_stmt><decl><type><name>PopulationGeneration</name><index>[]</index></type> <name>tr</name> =<init> <expr>new <name><name>PopulationGeneration</name><index>[<expr><name><name>services</name>.<name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
           <for>for( <init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name><name>services</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> )<block>{
               <expr_stmt><expr><name><name>tr</name><index>[<expr><name>i</name></expr>]</index></name> = (<name>PopulationGeneration</name>)<name><name>services</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
           }</block></for>
           <return>return <expr><name>tr</name></expr>;</return>
        }</block><catch>catch( <param><decl><type><name>Exception</name></type> <name>e</name></decl></param> )<block>{
            <expr_stmt><expr><call><name><name>e</name>.<name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <return>return <expr>new <name><name>PopulationGeneration</name><index>[<expr>0</expr>]</index></name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>PopulationGeneration</name></type> <name>get</name><parameter_list>( <param><decl><type><name>Object</name></type> <name>obj</name></decl></param> )</parameter_list><block>{
        <try>try<block>{
            <return>return <expr>((<name>PopulationGeneration</name>)
                    <call><name><name>ReflectUtil</name>.<name>getProvider</name></name><argument_list>()</argument_list></call>.
                    <call><name>default_service</name><argument_list>(<argument><expr><name><name>PopulationGeneration</name>.<name><name/></name></name>class</expr></argument>,<argument><expr><name>obj</name></expr></argument>)</argument_list></call>)</expr>;</return>
        }</block><catch>catch( <param><decl><type><name>Exception</name></type> <name>e</name></decl></param> )<block>{
        }</block></catch></try>
        <return>return <expr><name>null</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
