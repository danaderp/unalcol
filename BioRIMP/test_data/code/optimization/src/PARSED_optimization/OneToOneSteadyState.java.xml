<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\BioRIMP\test_data\code\optimization\src\unalcol\optimization\replacement\OneToOneSteadyState.java"><comment type="block">/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */</comment>
<package>package <name><name>unalcol</name>.<name>optimization</name>.<name>replacement</name></name>;</package>

<import>import <name><name>unalcol</name>.<name>optimization</name>.<name>solution</name>.<name>Solution</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>vector</name>.<name>Vector</name></name>;</import>

<comment type="javadoc">/**
 *
 * @author jgomez
 */</comment>
<class><specifier>public</specifier> class <name><name>OneToOneSteadyState</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name>  <super><extends>extends <name><name>Replacement</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></extends></super><block>{
    <constructor><specifier>public</specifier> <name>OneToOneSteadyState</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name><name>Solution</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>apply</name><parameter_list>( <param><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name><name>Solution</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>parent</name></decl></param>, <param><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name><name>Solution</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>offspring</name></decl></param>)</parameter_list><block>{
        <try>try<block>{
            <decl_stmt><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name><name>Solution</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>candidates</name> =<init> <expr>new <call><name>Vector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>n</name> =<init> <expr><call><name><name>offspring</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>m</name> =<init> <expr><call><name><name>parent</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>r</name> =<init> <expr><name>n</name>&lt;<name>m</name>?<name>n</name>:<name>m</name></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>r</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <if>if<condition>( <expr><call><name><name>parent</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>.<call><name>value</name><argument_list>()</argument_list></call> &gt; <call><name><name>offspring</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>.<call><name>value</name><argument_list>()</argument_list></call></expr> )</condition><then><block>{
                    <expr_stmt><expr><call><name><name>candidates</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>parent</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then><else>else<block>{
                    <expr_stmt><expr><call><name><name>candidates</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>offspring</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></for>
            <return>return <expr><name>candidates</name></expr>;</return>
        }</block><catch>catch( <param><decl><type><name>Exception</name></type> <name>e</name></decl></param> )<block>{
            <expr_stmt><expr><call><name><name>e</name>.<name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <return>return <expr><name>null</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
