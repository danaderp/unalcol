<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="D:\thesisCode\BioRIMP\test_data\code\optimization\src\unalcol\optimization\testbed\real\LSGOFunctionWrap.java"><comment type="block">/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */</comment>
<package>package <name><name>unalcol</name>.<name>optimization</name>.<name>testbed</name>.<name>real</name></name>;</package>
<import>import <name><name>unalcol</name>.<name>optimization</name>.<name>OptimizationFunction</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>optimization</name>.<name>testbed</name>.<name>real</name>.<name>lsgo_benchmark</name></name>.*;</import>
<comment type="javadoc">/**
 *
 * @author jgomez
 */</comment>
<class><specifier>public</specifier> class <name>LSGOFunctionWrap</name> <super><extends>extends <name><name>OptimizationFunction</name><argument_list>&lt;<argument><name><name>double</name><index>[]</index></name></argument>&gt;</argument_list></name></extends></super> <block>{
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Function</name></type> <name>f</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>evaluations</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>resolution</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>double</name></type> <name>factor</name> =<init> <expr>1.0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>cres</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>multires</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Function</name><index>[]</index></type> <name>F</name> =<init> <expr>new <name><name>Function</name><index>[]</index></name><block>{
        <expr>new <call><name>F1</name><argument_list>()</argument_list></call></expr>, <expr>new <call><name>F2</name><argument_list>()</argument_list></call></expr>, <expr>new <call><name>F3</name><argument_list>()</argument_list></call></expr>, <expr>new <call><name>F4</name><argument_list>()</argument_list></call></expr>, <expr>new <call><name>F5</name><argument_list>()</argument_list></call></expr>, 
        <expr>new <call><name>F6</name><argument_list>()</argument_list></call></expr>, <expr>new <call><name>F7</name><argument_list>()</argument_list></call></expr>, <expr>new <call><name>F8</name><argument_list>()</argument_list></call></expr>, <expr>new <call><name>F9</name><argument_list>()</argument_list></call></expr>, <expr>new <call><name>F10</name><argument_list>()</argument_list></call></expr>,
        <expr>new <call><name>F11</name><argument_list>()</argument_list></call></expr>, <expr>new <call><name>F12</name><argument_list>()</argument_list></call></expr>, <expr>new <call><name>F13</name><argument_list>()</argument_list></call></expr>, <expr>new <call><name>F14</name><argument_list>()</argument_list></call></expr>, <expr>new <call><name>F15</name><argument_list>()</argument_list></call></expr>, 
        <expr>new <call><name>F16</name><argument_list>()</argument_list></call></expr>, <expr>new <call><name>F17</name><argument_list>()</argument_list></call></expr>, <expr>new <call><name>F18</name><argument_list>()</argument_list></call></expr>, <expr>new <call><name>F19</name><argument_list>()</argument_list></call></expr>, <expr>new <call><name>F20</name><argument_list>()</argument_list></call></expr>
    }</block></expr></init></decl>;</decl_stmt>
    
    <constructor><specifier>public</specifier> <name>LSGOFunctionWrap</name><parameter_list>( <param><decl><type><name>int</name></type> <name>f</name></decl></param>, <param><decl><type><name>int</name></type> <name>res</name></decl></param> )</parameter_list><block>{
        <expr_stmt><expr><name><name>this</name>.<name>f</name></name> = <name><name>F</name><index>[<expr><name>f</name>-1</expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>resolution</name></name> = <name>res</name></expr>;</expr_stmt>
    }</block></constructor>
    
    <constructor><specifier>public</specifier> <name>LSGOFunctionWrap</name><parameter_list>( <param><decl><type><name>Function</name></type> <name>f</name></decl></param>, <param><decl><type><name>int</name></type> <name>res</name></decl></param> )</parameter_list><block>{
        <expr_stmt><expr><name><name>this</name>.<name>f</name></name> = <name>f</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>resolution</name></name> = <name>res</name></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Evaluate the OptimizationFunction function over the real vector given
     * @param x Real vector to be evaluated
     * @return the OptimizationFunction function over the real vector
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>Double</name></type> <name>apply</name><parameter_list>( <param><decl><type><name><name>double</name><index>[]</index></name></type> <name>x</name></decl></param> )</parameter_list><block>{
        <expr_stmt><expr><name>evaluations</name>++</expr>;</expr_stmt>
        <if>if<condition>( <expr><name>multires</name></expr> )</condition><then><block>{
            <decl_stmt><decl><type><name>int</name></type> <name>nres</name> =<init> <expr><name>evaluations</name> / <name>resolution</name></expr></init></decl>;</decl_stmt>
            <if>if<condition>( <expr><name>cres</name> != <name>nres</name></expr> )</condition><then><block>{
                <expr_stmt><expr><name>factor</name> *= 2.0</expr>;</expr_stmt>
                <expr_stmt><expr><name>cres</name>++</expr>;</expr_stmt>
            }</block></then></if>

            <if>if<condition>( <expr><name>cres</name> &lt; 30</expr> )</condition><then><block>{
                <for>for( <init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name><name>x</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> )<block>{
                    <expr_stmt><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name><name>Math</name>.<name>round</name></name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name>*<name>factor</name></expr></argument>)</argument_list></call>/<name>factor</name></expr>;</expr_stmt>
                }</block></for>
            }</block></then></if>
        }</block></then></if>
        <return>return <expr>-<call><name><name>f</name>.<name>compute</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Determines if the fitness function is stationary or not, i.e.,
     * if the value of the function for a given value can change in time (non-stationary) 
     * or not (stationary)
     * @return true if the fitness function is not stationary, false if it is stationary
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>boolean</name></type> <name>isNonStationary</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><name>multires</name> &amp;&amp; (<name>evaluations</name>-1)%<name>resolution</name>==0</expr>;</return> }</block></function>
    
    
    <function><type><specifier>public</specifier> <name>int</name></type> <name>dim</name><parameter_list>()</parameter_list><block>{ <return>return <expr><call><name><name>f</name>.<name>getDimension</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>min</name><parameter_list>()</parameter_list><block>{ <return>return <expr><call><name><name>f</name>.<name>getMin</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>max</name><parameter_list>()</parameter_list><block>{ <return>return <expr><call><name><name>f</name>.<name>getMax</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>    
    
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>( <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></param> )</parameter_list><block>{
        <decl_stmt><decl><type><name>double</name></type> <name>x</name> =<init> <expr><call><name><name>Math</name>.<name>random</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>res</name> =<init> <expr>1.0</expr></init></decl>;</decl_stmt>
        <for>for(<init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;20</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{
            <decl_stmt><decl><type><name>double</name></type> <name>y</name> =<init> <expr><call><name><name>Math</name>.<name>round</name></name><argument_list>(<argument><expr><name>x</name>*<name>res</name></expr></argument>)</argument_list></call>/<name>res</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><name>res</name> + "," + <name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>res</name> *= 10.0</expr>;</expr_stmt>
        }</block></for>
    }</block></function>
}</block></class>
</unit>
