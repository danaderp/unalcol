<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="D:\thesisCode\BioRIMP\test_data\code\optimization\src\unalcol\optimization\operators\real\FlipMutation.java"><package>package <name><name>unalcol</name>.<name>optimization</name>.<name>operators</name>.<name>real</name></name>;</package>
<import>import <name><name>unalcol</name>.<name>random</name></name>.*;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>vector</name></name>.*;</import>
<import>import <name><name>unalcol</name>.<name>clone</name></name>.*;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Title: FlipMutation&lt;/p&gt;
 * &lt;p&gt;Description: Changes one component of the encoded double[] with the complement
 * in the interval defined for the component (x = min + max - x)&lt;/p&gt;
 * &lt;p&gt;Copyright: Copyright (c) 2010&lt;/p&gt;
 * @author Jonatan Gomez
 * @version 1.0
 */</comment>
<class><specifier>public</specifier> class <name>FlipMutation</name> <super><extends>extends <name>RealArityOne</name></extends></super> <block>{
  <comment type="javadoc">/**
   * Default constructor
   */</comment>
  <constructor><specifier>public</specifier> <name>FlipMutation</name><parameter_list>()</parameter_list> <block>{
  }</block></constructor>

  <comment type="javadoc">/**
   * Modifies one component of the encoded double[] with the complement
   * in the interval defined for the component (x=min+max-x)
   * @param gen Genome to be modified
   * @return Index of the real modified
   */</comment>
  <function><type><specifier>public</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>double</name><index>[]</index></argument>&gt;</argument_list></name></type> <name>generates</name><parameter_list>(<param><decl><type><name><name>double</name><index>[]</index></name></type> <name>gen</name></decl></param>)</parameter_list> <block>{
      <try>try <block>{
          <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>genome</name> =<init> <expr>(<name><name>double</name><index>[]</index></name>) <call><name><name>Clone</name>.<name>get</name></name><argument_list>(<argument><expr><name>gen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int</name></type> <name>posX</name> =<init> <expr><call><name><name>Random</name>.<name>nextInt</name></name><argument_list>(<argument><expr><name><name>genome</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>double</name></type> <name>prob</name> =<init> <expr>1.0/<name><name>gen</name>.<name>length</name></name></expr></init></decl>;</decl_stmt>
          <for>for( <init><decl><type><name>int</name></type> <name>pos</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>pos</name>&lt;<name><name>genome</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>pos</name>++</expr></incr> )<block>{
              <if>if<condition>( <expr><name>pos</name> == <name>posX</name></expr> <comment type="block">/*Math.random() &lt; prob*/</comment> )</condition><then><block>{
                  <decl_stmt><decl><type><name>double</name></type> <name>x</name> =<init> <expr><name><name>genome</name><index>[<expr><name>pos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><name><name>genome</name><index>[<expr><name>pos</name></expr>]</index></name> = 1.0 - <name>x</name></expr>;</expr_stmt>
              }</block></then></if>
          }</block></for>    
          <decl_stmt><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>double</name><index>[]</index></argument>&gt;</argument_list></name></type> <name>v</name> =<init> <expr>new <call><name><name>Vector</name><argument_list>&lt;<argument><name><name>double</name><index>[]</index></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>v</name>.<name>add</name></name><argument_list>(<argument><expr><name>genome</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>v</name></expr>;</return>
      }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
      }</block></catch></try>
      <return>return <expr><name>null</name></expr>;</return>
  }</block></function>
}</block></class></unit>
