<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\BioRIMP\test_data\code\optimization\src\unalcol\optimization\PopulationToSingleOptimizer.java"><package>package <name><name>unalcol</name>.<name>optimization</name></name>;</package>

<import>import <name><name>unalcol</name>.<name>optimization</name>.<name>solution</name>.<name>Solution</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>optimization</name>.<name>selection</name>.<name>Selection</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>vector</name>.<name>Vector</name></name>;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Title: PopulationToSingleOptimizer&lt;/p&gt;
 *
 * &lt;p&gt;Description: PopulationOptimizer to Optimizer Converter&lt;/p&gt;
 *
 * &lt;p&gt;Copyright: Copyright (c) 2010&lt;/p&gt;
 *
 * &lt;p&gt;Company: Kunsamu&lt;/p&gt;
 *
 * @author Jonatan Gomez
 * @version 1.0
 */</comment>
<class><specifier>public</specifier> class <name><name>PopulationToSingleOptimizer</name><argument_list>&lt;<argument><name>S</name></argument>&gt;</argument_list></name> <super><implements>implements <name><name>Optimizer</name><argument_list>&lt;<argument><name>S</name></argument>&gt;</argument_list></name></implements></super><block>{
    <comment type="javadoc">/**
     * Inner population optimizer
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>PopulationOptimizer</name><argument_list>&lt;<argument><name>S</name></argument>&gt;</argument_list></name></type> <name>optimizer</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Final candidate solution selection method (takes one candidate solution from the population)
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>Selection</name><argument_list>&lt;<argument><name>S</name></argument>&gt;</argument_list></name></type> <name>selection</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a PopulationOptimizer to Optimizer Converter
     * @param optimizer Population optimizer
     * @param selection Final candidate solution selection method
     */</comment>
    <constructor><name>PopulationToSingleOptimizer</name><parameter_list>( <param><decl><type><name><name>PopulationOptimizer</name><argument_list>&lt;<argument><name>S</name></argument>&gt;</argument_list></name></type> <name>optimizer</name></decl></param>,
                         <param><decl><type><name><name>Selection</name><argument_list>&lt;<argument><name>S</name></argument>&gt;</argument_list></name></type> <name>selection</name></decl></param> )</parameter_list><block>{
        <expr_stmt><expr><name><name>this</name>.<name>optimizer</name></name> = <name>optimizer</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>selection</name></name> = <name>selection</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Tries to optimize the given function
     * @param f Function to be optimized
     * @return A candidate solution for the optimization problem
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name><name>Solution</name><argument_list>&lt;<argument><name>S</name></argument>&gt;</argument_list></name></type> <name>apply</name><parameter_list>( <param><decl><type><name><name>OptimizationFunction</name><argument_list>&lt;<argument><name>S</name></argument>&gt;</argument_list></name></type> <name>f</name></decl></param> )</parameter_list><block>{
        <decl_stmt><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name><name>Solution</name><argument_list>&lt;<argument><name>S</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>pop</name> =<init> <expr><call><name><name>optimizer</name>.<name>apply</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>selection</name>.<name>choose_one</name></name><argument_list>(<argument><expr><name>pop</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class></unit>
