<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\BioRIMP\test_data\code\optimization\src\unalcol\optimization\util\ScaledRealVectorFunction.java"><comment type="block">/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */</comment>
<package>package <name><name>unalcol</name>.<name>optimization</name>.<name>util</name></name>;</package>

<import>import <name><name>unalcol</name>.<name>optimization</name>.<name>OptimizationFunction</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>real</name>.<name>array</name>.<name>RealVectorLinealScale</name></name>;</import>
<comment type="javadoc">/**
 *
 * @author jgomez
 */</comment>
<class><specifier>public</specifier> class <name>ScaledRealVectorFunction</name> <super><extends>extends <name><name>OptimizationFunction</name><argument_list>&lt;<argument><name><name>double</name><index>[]</index></name></argument>&gt;</argument_list></name></extends></super> <block>{
    <decl_stmt><decl><type><specifier>protected</specifier> <name>RealVectorLinealScale</name></type> <name>scale</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>OptimizationFunction</name><argument_list>&lt;<argument><name>double</name><index>[]</index></argument>&gt;</argument_list></name></type> <name>f</name></decl>;</decl_stmt>
    
    <constructor><specifier>public</specifier> <name>ScaledRealVectorFunction</name><parameter_list>( <param><decl><type><name><name>double</name><index>[]</index></name></type> <name>min</name></decl></param>, <param><decl><type><name><name>double</name><index>[]</index></name></type> <name>max</name></decl></param>, 
            <param><decl><type><name><name>OptimizationFunction</name><argument_list>&lt;<argument><name><name>double</name><index>[]</index></name></argument>&gt;</argument_list></name></type> <name>_f</name></decl></param> )</parameter_list><block>{
        <expr_stmt><expr><name>scale</name> = new <call><name>RealVectorLinealScale</name><argument_list>(<argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>f</name> = <name>_f</name></expr>;</expr_stmt>
    }</block></constructor>
    
    <constructor><specifier>public</specifier> <name>ScaledRealVectorFunction</name><parameter_list>( <param><decl><type><name>RealVectorLinealScale</name></type> <name>_scale</name></decl></param>, 
            <param><decl><type><name><name>OptimizationFunction</name><argument_list>&lt;<argument><name><name>double</name><index>[]</index></name></argument>&gt;</argument_list></name></type> <name>_f</name></decl></param> )</parameter_list><block>{
        <expr_stmt><expr><name>scale</name> = <name>_scale</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>f</name> = <name>_f</name></expr>;</expr_stmt>
    }</block></constructor>
    
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>Double</name></type> <name>apply</name><parameter_list>( <param><decl><type><name><name>double</name><index>[]</index></name></type> <name>x</name></decl></param> )</parameter_list><block>{
<comment type="block">/*        if( Math.random() &lt; 0.1 ){
            System.out.println(Persistency.toString(x));
            System.out.println("****"+Persistency.toString(scale.inverse(x)));
        } */</comment>
        <return>return <expr><call><name><name>f</name>.<name>apply</name></name><argument_list>(<argument><expr><call><name><name>scale</name>.<name>inverse</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
