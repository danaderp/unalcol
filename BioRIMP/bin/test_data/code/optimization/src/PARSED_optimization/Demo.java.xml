<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\BioRIMP\test_data\code\optimization\src\unalcol\optimization\testbed\real\lsgo_benchmark\Demo.java"><package>package <name><name>unalcol</name>.<name>optimization</name>.<name>testbed</name>.<name>real</name>.<name>lsgo_benchmark</name></name>;</package>
<import>import <name><name>java</name>.<name>util</name>.<name>Random</name></name>;</import>

<comment type="block">/*
 * Copyright (c) 2009 Thomas Weise
 * http://www.it-weise.de/
 * tweise@gmx.de
 * 
 * GNU LESSER GENERAL PUBLIC LICENSE (Version 2.1, February 1999)
 */</comment>

<comment type="javadoc">/**
 * This is a demo class illustrating the usage of the benchmark functions.
 * For this purpose, we apply a very simple hill climbing strategy.
 */</comment>
<class><specifier>public</specifier> class <name>Demo</name> <block>{

  <comment type="javadoc">/**
   * This is a demo class illustrating the usage of the benchmark
   * functions.
   * 
   * @param params
   *          the parameters which are completely ignored ^^
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>void</name></type> <name>main</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>params</name></decl></param>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>Function</name></type> <name>f</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>double</name><index>[]</index></type> <name>best</name>, <name>cur</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>dim</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>double</name></type> <name>min</name>, <name>max</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>b</name>, <name>c</name>, <name>old</name>, <name>neu</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name>, <name>it</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Random</name></type> <name>r</name></decl>;</decl_stmt>

    <comment type="line">// Create the default instance of F12.</comment>
    <comment type="line">// Each objective function has been implemented in a class of a</comment>
    <comment type="line">// corrsponding name.</comment>
    <comment type="line">// Please be aware that you need one separate instance per thread!</comment>
    <expr_stmt><expr><name>f</name> = new <call><name>F12</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Create a random number generator.</comment>
    <expr_stmt><expr><name>r</name> = new <call><name>Random</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Obtain the dimension of the objective function: 1000 in the default</comment>
    <comment type="line">// case.</comment>
    <expr_stmt><expr><name>dim</name> = <call><name><name>f</name>.<name>getDimension</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Obtain the lower and upper bound of the search space.</comment>
    <comment type="line">// This boundary is the same for all dimensions.</comment>
    <expr_stmt><expr><name>min</name> = <call><name><name>f</name>.<name>getMin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>max</name> = <call><name><name>f</name>.<name>getMax</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>best</name> = new <name><name>double</name><index>[<expr><name>dim</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cur</name> = new <name><name>double</name><index>[<expr><name>dim</name></expr>]</index></name></expr>;</expr_stmt>

    <comment type="line">// All functions are subject to minimization, hence this is the worst</comment>
    <comment type="line">// objective value possible.</comment>
    <expr_stmt><expr><name>b</name> = <name><name>Double</name>.<name>POSITIVE_INFINITY</name></name></expr>;</expr_stmt>

    <comment type="line">// Initialize the hill climber with a random point from the search</comment>
    <comment type="line">// space.</comment>
    <for>for (<init><expr><name>i</name> = (<name>dim</name> - 1)</expr>;</init> <condition><expr><name>i</name> &gt;= 0</expr>;</condition> <incr><expr><name>i</name>--</expr></incr>) <block>{
      <expr_stmt><expr><name><name>cur</name><index>[<expr><name>i</name></expr>]</index></name> = (<name>min</name> + (<call><name><name>r</name>.<name>nextDouble</name></name><argument_list>()</argument_list></call> * (<name>max</name> - <name>min</name>)))</expr>;</expr_stmt>
    }</block></for>

    <comment type="line">// Run the hill climber infinitely long.</comment>
    <for>for (<init><expr><name>it</name> = 0</expr>;</init><condition>;</condition> <incr><expr><name>it</name>++</expr></incr>) <block>{
      <comment type="line">// Compute the objective value.</comment>
      <expr_stmt><expr><name>c</name> = <call><name><name>f</name>.<name>compute</name></name><argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// Did we find an improvement?</comment>
      <if>if <condition>(<expr><name>c</name> &lt; <name>b</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>b</name> = <name>c</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>best</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>dim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"new best: " + <name>b</name> + <comment type="line">//$NON-NLS-1$</comment>
            " in iteration " + <name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//$NON-NLS-1$</comment>
      }</block></then></if>

      <comment type="line">// A very simple mutation strategy.</comment>
      <do>do <block>{
        <expr_stmt><expr><name>i</name> = <call><name><name>r</name>.<name>nextInt</name></name><argument_list>(<argument><expr><name>dim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>old</name> = <name><name>best</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <do>do <block>{
          <expr_stmt><expr><name>neu</name> = (<name>old</name> + (<call><name><name>r</name>.<name>nextGaussian</name></name><argument_list>()</argument_list></call> * <call><name><name>Math</name>.<name>exp</name></name><argument_list>(<argument><expr><call><name><name>r</name>.<name>nextInt</name></name><argument_list>(<argument><expr>40</expr></argument>)</argument_list></call> - 35</expr></argument>)</argument_list></call>))</expr>;</expr_stmt>
        }</block> while <condition>(<expr>(<name>neu</name> &lt; <name>min</name>) || (<name>neu</name> &gt; <name>max</name>)</expr>)</condition>;</do>
        <expr_stmt><expr><name><name>cur</name><index>[<expr><name>i</name></expr>]</index></name> = <name>neu</name></expr>;</expr_stmt>
      }</block> while <condition>(<expr><call><name><name>r</name>.<name>nextInt</name></name><argument_list>(<argument><expr>10</expr></argument>)</argument_list></call> &gt; 0</expr>)</condition>;</do>
    }</block></for>

  }</block></function>
}</block></class>
</unit>
