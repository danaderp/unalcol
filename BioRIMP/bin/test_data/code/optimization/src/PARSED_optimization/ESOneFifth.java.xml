<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\BioRIMP\test_data\code\optimization\src\unalcol\optimization\util\ESOneFifth.java"><comment type="block">/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */</comment>
<package>package <name><name>unalcol</name>.<name>optimization</name>.<name>util</name></name>;</package>

<import>import <name><name>unalcol</name>.<name>optimization</name>.<name>OptimizationFunction</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>optimization</name>.<name>generation</name>.<name>RandomCandidatesGeneration</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>optimization</name>.<name>operators</name>.<name>real</name>.<name>GaussianMutation</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>optimization</name>.<name>replacement</name>.<name>OneToOneSteadyState</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>optimization</name>.<name>solution</name>.<name>Solution</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>optimization</name>.<name>transformation</name>.<name>Transformation</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>vector</name>.<name>Vector</name></name>;</import>

<comment type="javadoc">/**
 *
 * @author Jonatan
 */</comment>
<class><specifier>public</specifier> class <name>ESOneFifth</name> <super><extends>extends <name><name>Transformation</name><argument_list>&lt;<argument><name><name>double</name><index>[]</index></name></argument>&gt;</argument_list></name></extends></super><block>{
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>G</name> =<init> <expr>20</expr></init></decl>;</decl_stmt> 
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>double</name></type> <name>a</name> =<init> <expr>0.9</expr></init></decl>;</decl_stmt> 
    <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>k</name>=<init><expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name><index>[]</index></type> <name>counter</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>double</name><index>[]</index><index>[]</index></type> <name>sigma</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>GaussianMutation</name></type> <name>mutation</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>ESOneFifthRandomCandidatesGeneration</name></type> <name>gen</name></decl>;</decl_stmt>
    <constructor><specifier>public</specifier> <name>ESOneFifth</name><parameter_list>( <param><decl><type><name>GaussianMutation</name></type> <name>mutation</name></decl></param> )</parameter_list><block>{
        <expr_stmt><expr><call><name>super</name><argument_list>( <argument><expr>new <call><name>ESOneFifthRandomCandidatesGeneration</name><argument_list>(<argument><expr><name>mutation</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <call><name>OneToOneSteadyState</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>mutation</name></name> = <name>mutation</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>gen</name></name> = (<name>ESOneFifthRandomCandidatesGeneration</name>)<name>strategy</name></expr>;</expr_stmt>
    }</block></constructor>
    
    
    <comment type="javadoc">/**
     * Transforms the given population to another population according to its rules.
     * @param population The population to be transformed
     * @return Offspring population
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name><name>Solution</name><argument_list>&lt;<argument><name>double</name><index>[]</index></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>apply</name><parameter_list>( <param><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name><name>Solution</name><argument_list>&lt;<argument><name><name>double</name><index>[]</index></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>population</name></decl></param>, <param><decl><type><name><name>OptimizationFunction</name><argument_list>&lt;<argument><name><name>double</name><index>[]</index></name></argument>&gt;</argument_list></name></type> <name>f</name></decl></param> )</parameter_list><block>{
        <if>if<condition>( <expr><name>counter</name> == <name>null</name></expr> )</condition><then><block>{
            <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>s</name> =<init> <expr><call><name><name>mutation</name>.<name>getSigma</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>counter</name> = new <name><name>int</name><index>[<expr><call><name><name>population</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>sigma</name> = new <name><name>double</name><index>[<expr><name><name>counter</name>.<name>length</name></name></expr>]</index><index>[]</index></name></expr>;</expr_stmt>
            <for>for( <init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name><name>counter</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{
                <expr_stmt><expr><name><name>sigma</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name><name>s</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></then></if>
        <expr_stmt><expr><name>k</name>++</expr>;</expr_stmt>
        <if>if<condition>(<expr><name>k</name>==<name>G</name></expr>)</condition><then><block>{
            <comment type="line">// The 1/5 rule</comment>
            <decl_stmt><decl><type><name>double</name></type> <name>p</name></decl>;</decl_stmt>
            <for>for( <init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name><name>counter</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{
                <expr_stmt><expr><name>p</name> = (<name>double</name>)<name><name>counter</name><index>[<expr><name>i</name></expr>]</index></name>/(<name>double</name>)<name>G</name></expr>;</expr_stmt>
                <if>if<condition>(<expr><name>p</name>&gt;0.2</expr>)</condition><then><block>{
                    <for>for( <init><decl><type><name>int</name></type> <name>j</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>j</name>&lt;<name><name>sigma</name><index>[<expr><name>i</name></expr>]</index></name>.<name>length</name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr> )<block>{
                        <expr_stmt><expr><name><name>sigma</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> /= <name>a</name></expr>;</expr_stmt>
                    }</block></for>
                }</block></then><else>else<block>{
                    <if>if<condition>( <expr><name>p</name>&lt;0.2</expr> )</condition><then><block>{
                        <for>for( <init><decl><type><name>int</name></type> <name>j</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>j</name>&lt;<name><name>sigma</name><index>[<expr><name>i</name></expr>]</index></name>.<name>length</name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr> )<block>{
                            <expr_stmt><expr><name><name>sigma</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> *= <name>a</name></expr>;</expr_stmt>
                        }</block></for>
                    }</block></then></if>
                }</block></else></if>
                <expr_stmt><expr><name><name>counter</name><index>[<expr><name>i</name></expr>]</index></name> = 0</expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><name>k</name>=0</expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>gen</name>.<name>setSigma</name></name><argument_list>(<argument><expr><name>sigma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name><name>Solution</name><argument_list>&lt;<argument><name>double</name><index>[]</index></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>offspring</name> =<init> <expr><call><name><name>strategy</name>.<name>apply</name></name><argument_list>(<argument><expr><name>population</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Solution</name>.<name>evaluate</name></name><argument_list>(<argument><expr>(<name>Vector</name>)<name>offspring</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>( <expr><call><name><name>f</name>.<name>isNonStationary</name></name><argument_list>()</argument_list></call></expr> )</condition><then><block>{
            <expr_stmt><expr><call><name><name>Solution</name>.<name>evaluate</name></name><argument_list>(<argument><expr>(<name>Vector</name>)<name>population</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <for>for( <init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name><name>counter</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{
            <if>if<condition>(<expr><call><name><name>offspring</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>.<call><name>value</name><argument_list>()</argument_list></call> &lt; <call><name><name>population</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>.<call><name>value</name><argument_list>()</argument_list></call></expr> )</condition><then><block>{
                <expr_stmt><expr><name><name>counter</name><index>[<expr><name>i</name></expr>]</index></name>++</expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <return>return <expr><call><name><name>replacement</name>.<name>apply</name></name><argument_list>(<argument><expr><name>population</name></expr></argument>, <argument><expr><name>offspring</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    
}</block></class>
</unit>
