<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\BioRIMP\test_data\code\optimization\src\unalcol\optimization\generation\RepairProvider.java"><comment type="block">/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */</comment>
<package>package <name><name>unalcol</name>.<name>optimization</name>.<name>generation</name></name>;</package>

<import>import <name><name>unalcol</name>.<name>reflect</name>.<name>util</name>.<name>ReflectUtil</name></name>;</import>

<comment type="javadoc">/**
 *
 * @author jgomez
 */</comment>
<class><specifier>public</specifier> class <name>RepairProvider</name> <block>{
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Object</name></type> <name>repair</name><parameter_list>( <param><decl><type><name>Object</name></type> <name>obj</name></decl></param> )</parameter_list><block>{
        <decl_stmt><decl><type><name>Repair</name></type> <name>r</name> =<init> <expr><call><name>get</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>r</name>.<name>repair</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Repair</name></type> <name>get</name><parameter_list>( <param><decl><type><name>Object</name></type> <name>obj</name></decl></param> )</parameter_list><block>{
        <try>try<block>{
            <return>return <expr>((<name>Repair</name>)
                    <call><name><name>ReflectUtil</name>.<name>getProvider</name></name><argument_list>()</argument_list></call>.
                    <call><name>default_service</name><argument_list>(<argument><expr><name><name>Repair</name>.<name><name/></name></name>class</expr></argument>,<argument><expr><name>obj</name></expr></argument>)</argument_list></call>)</expr>;</return>
        }</block><catch>catch( <param><decl><type><name>Exception</name></type> <name>e</name></decl></param> )<block>{
        }</block></catch></try>
        <return>return <expr><name>null</name></expr>;</return>
    }</block></function>
    
}</block></class>
</unit>
