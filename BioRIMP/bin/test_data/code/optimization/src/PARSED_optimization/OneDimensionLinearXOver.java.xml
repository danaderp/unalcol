<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\BioRIMP\test_data\code\optimization\src\unalcol\optimization\operators\real\OneDimensionLinearXOver.java"><package>package <name><name>unalcol</name>.<name>optimization</name>.<name>operators</name>.<name>real</name></name>;</package>

<import>import <name><name>unalcol</name>.<name>random</name></name>.*;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>vector</name></name>.*;</import>

<import>import <name><name>unalcol</name>.<name>clone</name></name>.*;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Title: LinearXOver&lt;/p&gt;
 * &lt;p&gt;Description:Applies a linear crossover to a single component&lt;/p&gt;
 * &lt;p&gt;Copyright: Copyright (c) 2010&lt;/p&gt;
 * @author Jonatan Gomez
 * @version 1.0
 */</comment>
<class><specifier>public</specifier> class <name>OneDimensionLinearXOver</name> <super><extends>extends <name>RealArityTwo</name></extends></super> <block>{
  <comment type="javadoc">/**
   * Default constructor
   */</comment>
  <constructor><specifier>public</specifier> <name>OneDimensionLinearXOver</name><parameter_list>()</parameter_list> <block>{
  }</block></constructor>

  <comment type="javadoc">/**
   * Apply the 2-ary genetic operator over the individual genomes
   * @param c1 First Individuals genome to be modified by the genetic operator
   * @param c2 Second Individuals genome to be modified by the genetic operator
   * @return extra information of the genetic operator
   */</comment>
  <function><type><specifier>public</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>double</name><index>[]</index></argument>&gt;</argument_list></name></type> <name>generates</name><parameter_list>(<param><decl><type><name><name>double</name><index>[]</index></name></type> <name>c1</name></decl></param>, <param><decl><type><name><name>double</name><index>[]</index></name></type> <name>c2</name></decl></param>)</parameter_list> <block>{
      <try>try <block>{
          <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>x</name> =<init> <expr>(<name><name>double</name><index>[]</index></name>) <call><name><name>Clone</name>.<name>get</name></name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>y</name> =<init> <expr>(<name><name>double</name><index>[]</index></name>) <call><name><name>Clone</name>.<name>get</name></name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int</name></type> <name>min</name> =<init> <expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name><name>x</name>.<name>length</name></name></expr></argument>, <argument><expr><name><name>y</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <decl_stmt><decl><type><name>int</name></type> <name>pos</name> =<init> <expr><call><name><name>Random</name>.<name>nextInt</name></name><argument_list>(<argument><expr><name>min</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <decl_stmt><decl><type><name>double</name></type> <name>alpha</name> =<init> <expr><call><name><name>Random</name>.<name>random</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>double</name></type> <name>alpha_1</name> =<init> <expr>1.0 - <name>alpha</name></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>double</name></type> <name>tx</name>, <name>ty</name></decl>;</decl_stmt>
          <expr_stmt><expr><name>tx</name> = <name><name>x</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>
          <expr_stmt><expr><name>ty</name> = <name><name>y</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>x</name><index>[<expr><name>pos</name></expr>]</index></name> = <name>alpha</name> * <name>tx</name> + <name>alpha_1</name> * <name>ty</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>y</name><index>[<expr><name>pos</name></expr>]</index></name> = <name>alpha_1</name> * <name>tx</name> + <name>alpha</name> * <name>ty</name></expr>;</expr_stmt>
          <decl_stmt><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>double</name><index>[]</index></argument>&gt;</argument_list></name></type> <name>v</name> =<init> <expr>new <call><name><name>Vector</name><argument_list>&lt;<argument><name><name>double</name><index>[]</index></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>v</name>.<name>add</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>v</name>.<name>add</name></name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>v</name></expr>;</return>
      }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
      }</block></catch></try>
      <return>return <expr><name>null</name></expr>;</return>
  }</block></function>
}</block></class>
</unit>
