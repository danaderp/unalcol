<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C#" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\test_sys_cs\Test6.cs"><using>using <name>System</name>;</using>

<class><specifier>public</specifier> class <name>Test6</name>
<block>{
    <constructor><specifier>public</specifier> <name>Test6</name><parameter_list>()</parameter_list>
	<block>{
        <expr_stmt><expr><call><name>thisisacall</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>bool</name></type> <name>b</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>b</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>doSomething</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr>!<name>b</name></expr>)</condition><then>
        <block>{

            <expr_stmt><expr><call><name>doSomething2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><call><name>doSomething3</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if></else></if>

        <while>while <condition>(<expr><name>b</name></expr>)</condition>
        <block>{
            <expr_stmt><expr><call><name>doSomething4</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></while>

        <do>do
        <block>{
            <expr_stmt><expr><call><name>doSomething5</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr>new <call><name>Exception</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block> while <condition>(<expr><name>b</name></expr>)</condition>;</do>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>length</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <block>{
            <expr_stmt><expr><call><name>doSomething6</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        }</block></for>

        <switch>switch <condition>(<expr><name>b</name></expr>)</condition>
        <block>{
            <case>case <expr>1</expr>:
                <expr_stmt><expr><call><name>doSomething7</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr>2</expr>:
                <expr_stmt><expr><call><name>doSomething7</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><default>default:
                <break>break;</break>
        </default>}</block></switch>

        <try>try
        <block>{
            <decl_stmt><decl><type><name>string</name></type> <name>s</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>ProcessString</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <comment type="line">// Most specific: </comment>
        <catch>catch (<param><decl><type><name>ArgumentNullException</name></type> <name>e</name></decl></param>)
        <block>{
            <expr_stmt><expr><call><name><name>Console</name>.<name>WriteLine</name></name><argument_list>(<argument><expr>"{0} First exception caught."</expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch>
        <comment type="line">// Least specific: </comment>
        <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)
        <block>{
            <expr_stmt><expr><call><name><name>Console</name>.<name>WriteLine</name></name><argument_list>(<argument><expr>"{0} Second exception caught."</expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw;</throw>
        }</block></catch></try>

        <return>return;</return>

	}</block></constructor>

    <function><type><name>void</name></type> <name>method1</name><parameter_list>()</parameter_list>
    <block>{
       
    }</block></function>

    <function><type><name>void</name></type> <name>method2</name><parameter_list>()</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>thisisacall</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>void</name></type> <name>method2</name><parameter_list>()</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>thisisacall</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>bool</name></type> <name>b</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>b</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>doSomething</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then><else>else <if>if<condition>(<expr>!<name>b</name></expr>)</condition><then>
        <block>{
            
            <expr_stmt><expr><call><name>doSomething2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><call><name>doSomething3</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if></else></if>

        <while>while <condition>(<expr><name>b</name></expr>)</condition>
        <block>{
            <expr_stmt><expr><call><name>doSomething4</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></while>

        <do>do
        <block>{
            <expr_stmt><expr><call><name>doSomething5</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr>new <call><name>Exception</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block> while <condition>(<expr><name>b</name></expr>)</condition>;</do>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>length</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <block>{
            <expr_stmt><expr><call><name>doSomething6</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        }</block></for>

        <switch>switch <condition>(<expr><name>b</name></expr>)</condition>
        <block>{
            <case>case   <expr>1</expr>:
                <expr_stmt><expr><call><name>doSomething7</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr>2</expr>:
                <expr_stmt><expr><call><name>doSomething7</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><default>default:
                <break>break;</break>
        </default>}</block></switch>

        <try>try
        <block>{
            <decl_stmt><decl><type><name>string</name></type> <name>s</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>ProcessString</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <comment type="line">// Most specific: </comment>
        <catch>catch (<param><decl><type><name>ArgumentNullException</name></type> <name>e</name></decl></param>)
        <block>{
            <expr_stmt><expr><call><name><name>Console</name>.<name>WriteLine</name></name><argument_list>(<argument><expr>"{0} First exception caught."</expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch>
        <comment type="line">// Least specific: </comment>
        <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)
        <block>{
            <expr_stmt><expr><call><name><name>Console</name>.<name>WriteLine</name></name><argument_list>(<argument><expr>"{0} Second exception caught."</expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw;</throw>
        }</block></catch></try>

        <return>return;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>method3</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>sum</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

        <while>while <condition>(<expr><name>i</name> &lt; 10</expr>)</condition>
        <block>{
            <expr_stmt><expr><name>i</name>++</expr>;</expr_stmt>
            <expr_stmt><expr><name>sum</name> += <name>i</name></expr>;</expr_stmt>
        }</block></while>

        <comment type="line">// ?: conditional operator.</comment>
        <decl_stmt><decl><type><name>string</name></type> <name>classify</name> =<init> <expr>(<name>sum</name> &gt; 0) ? "positive" : "negative"</expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>Console</name>.<name>WriteLine</name></name><argument_list>(<argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <foreach>foreach (<init><decl><type><name>var</name></type> <name>item</name> <init>in <expr><name>collection</name></expr></init></decl></init>)
        <block>{
            
        }</block></foreach>
    }</block></function>
}</block></class>
</unit>
