<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp"  language="C#" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\test_sys_cs\GenericList.cs"><namespace>namespace <name><name>test</name>.<name>test2</name></name>
<block>{

    <namespace>namespace <name>test3</name>
    <block>{
        <namespace>namespace <name>test4</name>
        <block>{
            <comment type="line">// Declare the generic class. </comment>
            <class><specifier>public</specifier> class <name><name>GenericList</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name>
            <block>{
                <function><type><name>void</name></type> <name>Add</name><parameter_list>(<param><decl><type><name>T</name></type> <name>input</name></decl></param>)</parameter_list> <block>{ }</block></function>
                <class><specifier>public</specifier> class <name><name>Nested3</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name>
                <block>{
                    <class><specifier>public</specifier> class <name><name>Nested4</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name>
                    <block>{
                        <class><specifier>public</specifier> class <name>Nested5</name>
                        <block>{
                        }</block></class>
                    }</block></class>
                }</block></class>
            }</block></class>
        }</block></namespace>
    }</block></namespace>

    <namespace>namespace <name><name>test5</name>.<name>test6</name></name>
    <block>{

        <comment type="block">/**
         * 
         * Test comment
         * 
         **/</comment>
        <class>class <name>TestGenericList</name>
        <block>{
            <class><specifier>private</specifier> class <name>ExampleClass</name> <block>{ }</block></class>
            <function><type><specifier>static</specifier> <name>void</name></type> <name>Main</name><parameter_list>()</parameter_list>
            <block>{
                <comment type="line">// Declare a list of type int.</comment>
                <decl_stmt><decl><type><name><name>GenericList</name><argument_list>&lt;<argument><name>int</name></argument>&gt;</argument_list></name></type> <name>list1</name> =<init> <expr>new <call><name><name>GenericList</name><argument_list>&lt;<argument><name>int</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="line">// Declare a list of type string.</comment>
                <decl_stmt><decl><type><name><name>GenericList</name><argument_list>&lt;<argument><name>string</name></argument>&gt;</argument_list></name></type> <name>list2</name> =<init> <expr>new <call><name><name>GenericList</name><argument_list>&lt;<argument><name>string</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="line">// Declare a list of type ExampleClass.</comment>
                <decl_stmt><decl><type><name><name>GenericList</name><argument_list>&lt;<argument><name>ExampleClass</name></argument>&gt;</argument_list></name></type> <name>list3</name> =<init> <expr>new <call><name><name>GenericList</name><argument_list>&lt;<argument><name>ExampleClass</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            }</block></function>

            <class><specifier>public</specifier> class <name>Nested</name>
            <block>{
                <decl_stmt><decl><type><specifier>private</specifier> <name>Container</name></type> <name>parent</name></decl>;</decl_stmt>

                <constructor><specifier>public</specifier> <name>Nested</name><parameter_list>()</parameter_list>
                <block>{
                }</block></constructor>
                <constructor><specifier>public</specifier> <name>Nested</name><parameter_list>(<param><decl><type><name>Container</name></type> <name>parent</name></decl></param>)</parameter_list>
                <block>{
                    <expr_stmt><expr><name><name>this</name>.<name>parent</name></name> = <name>parent</name></expr>;</expr_stmt>
                }</block></constructor>

                <class><specifier>public</specifier> class <name><name>Nested2</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name>
                <block>{
                }</block></class>
            }</block></class>

        }</block></class>
    }</block></namespace>


    
}</block></namespace>
</unit>
