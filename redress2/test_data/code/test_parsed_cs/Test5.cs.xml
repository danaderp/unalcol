<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C#" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\test_sys_cs\Test5.cs"><using>using <name>System</name>;</using>

<namespace>namespace <name><name>test</name>.<name>test2</name></name>
<block>{
    
    <class><specifier>public</specifier> class <name>Test5</name>
    <block>{

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>field1</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>field2</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>field3</name> =<init> <expr>new <call><name>String</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>field4</name> =<init> <expr>new <call><name>String</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>field5</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>field6</name></decl>;</decl_stmt>

        <comment type="line">// private field </comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>DateTime</name></type> <name>date</name></decl>;</decl_stmt>

        <comment type="line">// public field (Generally not recommended.) </comment>
        <decl_stmt><decl><type><specifier>public</specifier> <name>string</name></type> <name>day</name></decl>;</decl_stmt>

        <comment type="line">// Public property exposes date field safely. </comment>
        <decl_stmt><decl><type><specifier>public</specifier> <name>DateTime</name></type> <name>Date</name>
        <block>{
            <function><name>get</name>
            <block>{
                <return>return <expr><name>date</name></expr>;</return>
            }</block></function>
            <function><name>set</name>
            <block>{
                <comment type="line">// Set some reasonable boundaries for likely birth dates. </comment>
                <if>if <condition>(<expr><name><name>value</name>.<name>Year</name></name> &gt; 1900 &amp;&amp; <name><name>value</name>.<name>Year</name></name> &lt;= <name><name>DateTime</name>.<name>Today</name>.<name>Year</name></name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>date</name> = <name>value</name></expr>;</expr_stmt>
                }</block></then>
                <else>else
                    <throw>throw <expr>new <call><name>ArgumentOutOfRangeException</name><argument_list>()</argument_list></call></expr>;</throw></else></if>
            }</block></function>

        }</block></decl></decl_stmt>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>method1</name><parameter_list>(<param><decl><type><name>String</name></type> <name>field1</name></decl></param>)</parameter_list>
        <block>{

        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>method2</name><parameter_list>(<param><decl><type><name>String</name></type> <name>field1</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>field2</name></decl>;</decl_stmt>

        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>method3</name><parameter_list>(<param><decl><type><name>String</name></type> <name>field1</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>field2</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>field3</name> = "test"</expr>;</expr_stmt>

        }</block></function>


        <function><type><specifier>public</specifier> <name>void</name></type> <name>method4</name><parameter_list>(<param><decl><type><name>String</name></type> <name>field1</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>field2</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>field3</name> = "test"</expr>;</expr_stmt>

            <expr_stmt><expr><call><name>thisisacall</name><argument_list>(<argument><expr><name>field4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        }</block></function>


        <function><type><specifier>public</specifier> <name>void</name></type> <name>method5</name><parameter_list>(<param><decl><type><name>String</name></type> <name>field1</name></decl></param>)</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>field2</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>field3</name> = "test"</expr>;</expr_stmt>

            <expr_stmt><expr><call><name>thisisacall</name><argument_list>(<argument><expr><name>field4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>this</name>.<name>field5</name></name> = ""</expr>;</expr_stmt>

        }</block></function>

        <constructor><specifier>public</specifier> <name>Test5</name><parameter_list>()</parameter_list>
        <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>field2</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>field3</name> = "test"</expr>;</expr_stmt>

            <expr_stmt><expr><call><name>thisisacall</name><argument_list>(<argument><expr><name>field4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>this</name>.<name>field5</name></name> = ""</expr>;</expr_stmt>
            <expr_stmt><expr><name>field6</name> = ""</expr>;</expr_stmt>
         }</block></constructor>


    }</block></class>
}</block></namespace>

</unit>
