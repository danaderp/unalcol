<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\types\collection\array\MutableArrayCollection.java"><package>package <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>array</name></name>;</package>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>collection</name></name>.*;</import>
<comment type="javadoc">/**
 * &lt;p&gt;Title: MutableArrayCollection&lt;/p&gt;
 *
 * &lt;p&gt;Description: An array collection that can be modified&lt;/p&gt;
 *
 * &lt;p&gt;Copyright: Copyright (c) 2009&lt;/p&gt;
 *
 * &lt;p&gt;Company: Kunsamu&lt;/p&gt;
 *
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 */</comment>
<class type="interface"><specifier>public</specifier> interface <name><name>MutableArrayCollection</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name> <super><extends>extends <name><name>ArrayCollection</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name>, <name><name>MutableCollection</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></extends></super><block>{
        <comment type="javadoc">/**
         * Adds an element to the array at the given position
         * @param index Position where the element will be located in the array
         * @param data Element to be added
         * @return &lt;i&gt;true&lt;/i&gt; if the element was added, &lt;i&gt;false&lt;/i&gt; otherwise
         * @throws ArrayIndexOutOfBoundsException if the given index is out of the array range &lt;i&gt; 0 &amp;lt;= index &amp;lt;=size&lt;/i&gt;
         */</comment>
        <function_decl><type><specifier>public</specifier> <name>boolean</name></type> <name>add</name><parameter_list>( <param><decl><type><name>int</name></type> <name>index</name></decl></param>, <param><decl><type><name>T</name></type> <name>data</name></decl></param> )</parameter_list>  <throws>throws <argument><expr><name>ArrayIndexOutOfBoundsException</name></expr></argument></throws>;</function_decl>
        <comment type="javadoc">/**
         * Removes the element of the array at the given position
         * @param index Position where the element will be removed from the array
         * @return &lt;i&gt;true&lt;/i&gt; if the element was removed, &lt;i&gt;false&lt;/i&gt; otherwise
         * @throws ArrayIndexOutOfBoundsException if the given index is out of the array range &lt;i&gt; 0 &amp;lt;= index &amp;lt;=size&lt;/i&gt;
         */</comment>
        <function_decl><type><specifier>public</specifier> <name>boolean</name></type> <name>remove</name><parameter_list>( <param><decl><type><name>int</name></type> <name>index</name></decl></param> )</parameter_list> <throws>throws <argument><expr><name>ArrayIndexOutOfBoundsException</name></expr></argument></throws>;</function_decl>
        <comment type="javadoc">/**
         * Sets an element at the given position in the array
         * @param index Position where the element will be set in the array
         * @return &lt;i&gt;true&lt;/i&gt; if the element was set, &lt;i&gt;false&lt;/i&gt; otherwise
         * @throws ArrayIndexOutOfBoundsException if the given index is out of the array range &lt;i&gt; 0 &amp;lt;= index &amp;lt;=size&lt;/i&gt;
         */</comment>
        <function_decl><type><specifier>public</specifier> <name>boolean</name></type> <name>set</name><parameter_list>( <param><decl><type><name>int</name></type> <name>index</name></decl></param>, <param><decl><type><name>T</name></type> <name>data</name></decl></param> )</parameter_list> <throws>throws <argument><expr><name>ArrayIndexOutOfBoundsException</name></expr></argument></throws>;</function_decl>

}</block></class>
</unit>
