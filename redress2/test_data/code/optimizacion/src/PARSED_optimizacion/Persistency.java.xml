<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\io\Persistency.java"><package>package <name><name>unalcol</name>.<name>io</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name></name>.*;</import>

<import>import <name><name>unalcol</name>.<name>reflect</name>.<name>util</name></name>.*;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Title: Persistent&lt;/p&gt;
 * &lt;p&gt;Description: Class for object's persistency.&lt;/p&gt;
 * &lt;p&gt;Copyright: Copyright (c) 2009&lt;/p&gt;
 * &lt;p&gt;Company: Kunsamu&lt;/p&gt;
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 */</comment>
<class><specifier>public</specifier> class <name>Persistency</name><block>{
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>WriteService</name></type> <name>getWrite</name><parameter_list>( <param><decl><type><name>Object</name></type> <name>obj</name></decl></param> )</parameter_list><block>{
        <try>try<block>{
            <return>return <expr>((<name>WriteService</name>)<call><name><name>ReflectUtil</name>.<name>getProvider</name></name><argument_list>()</argument_list></call>.<call><name>default_service</name><argument_list>(<argument><expr><name><name>WriteService</name>.<name><name/></name></name>class</expr></argument>,<argument><expr><name>obj</name></expr></argument>)</argument_list></call>)</expr>;</return>
        }</block><catch>catch( <param><decl><type><name>Exception</name></type> <name>e</name></decl></param> )<block>{
        }</block></catch></try>
        <return>return <expr><name>null</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ReadService</name></type> <name>getRead</name><parameter_list>( <param><decl><type><name>Object</name></type> <name>obj</name></decl></param> )</parameter_list><block>{
        <try>try<block>{
            <return>return <expr>((<name>ReadService</name>)<call><name><name>ReflectUtil</name>.<name>getProvider</name></name><argument_list>()</argument_list></call>.<call><name>default_service</name><argument_list>(<argument><expr><name><name>ReadService</name>.<name><name/></name></name>class</expr></argument>,<argument><expr><name>obj</name></expr></argument>)</argument_list></call>)</expr>;</return>
        }</block><catch>catch( <param><decl><type><name>Exception</name></type> <name>e</name></decl></param> )<block>{
        }</block></catch></try>
        <return>return <expr><name>null</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Writes an object to the given writer (The object should has a write method)
     * @param obj Object to write
     * @param writer The writer object
     * @throws IOException IOException
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>write</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>, <param><decl><type><name>Writer</name></type> <name>writer</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>WriteService</name></type> <name>method</name> =<init> <expr><call><name>getWrite</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>method</name>.<name>write</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>writer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Reads an object from the given reader (The object should has a read method)
     * @param obj Object to read
     * @param reader The reader object
     * @throws IOException IOException
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Object</name></type> <name>read</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>, <param><decl><type><name>ShortTermMemoryReader</name></type> <name>reader</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>ReadService</name></type> <name>method</name> =<init> <expr><call><name>getRead</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>method</name>.<name>read</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Gets the persistent version of an object in String version. The Class which the
     * object belongs to should have associated a ClassPersistence object in the
     * Persistence class
     * @param obj Object that will be stored in an string
     * @return String containing the persistent version of the object
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>toString</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <try>try <block>{
            <decl_stmt><decl><type><name>StringWriter</name></type> <name>sw</name> =<init> <expr>new <call><name>StringWriter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>sw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sw</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>sw</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{}</block></catch></try>
        <return>return <expr><call><name><name>obj</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
    
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>readSeparator</name><parameter_list>( <param><decl><type><name>ShortTermMemoryReader</name></type> <name>reader</name></decl></param>, 
            <param><decl><type><name>char</name></type> <name>separator</name></decl></param> )</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws><block>{
        <try>try<block>{
            <decl_stmt><decl><type><name>char</name></type> <name>c</name> =<init> <expr>(<name>char</name>)<call><name><name>reader</name>.<name>read</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while<condition>( <expr><name>c</name>!=<name>separator</name> &amp;&amp; <call><name><name>Character</name>.<name>isSpaceChar</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block>{
                <expr_stmt><expr><name>c</name> = (<name>char</name>)<call><name><name>reader</name>.<name>read</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></while>
            <if>if<condition>( <expr><name>c</name> != <name>separator</name> &amp;&amp; <name>c</name> != (<name>char</name>)-1</expr> )</condition><then><block>{
                <throw>throw <expr>new <call><name>Exception</name><argument_list>(<argument><expr>"Non available separator..."</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
        }</block><catch>catch( <param><decl><type><name>Exception</name></type> <name>e</name></decl></param> )<block>{
            <throw>throw <expr><call><name><name>reader</name>.<name>getException</name></name><argument_list>(<argument><expr>"Double Array Parser Error "+<call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>


}</block></class></unit>
