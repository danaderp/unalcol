<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\reflect\loader\tool\ResourcePathLoader.java"><package>package <name><name>unalcol</name>.<name>reflect</name>.<name>loader</name>.<name>tool</name></name>;</package>

<import>import <name><name>unalcol</name>.<name>reflect</name>.<name>loader</name>.<name>ResourceLoaderTool</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>URL</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>MalformedURLException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Tool used by the ClassLoader for loading resources from a given Path&lt;/p&gt;
 *
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 */</comment>
<class><specifier>public</specifier> class <name>ResourcePathLoader</name> <super><implements>implements <name>ResourceLoaderTool</name></implements></super> <block>{
        <comment type="javadoc">/**
         * Resources Path
         */</comment>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>path</name></decl>;</decl_stmt>

        <comment type="javadoc">/** Makes a URL from a file
         * @param fil File to be converted to URL
         * @return A URL for the given file
         */</comment>
        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>URL</name></type> <name>make</name><parameter_list>(<param><decl><type><name>File</name></type> <name>fil</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>MalformedURLException</name></expr></argument></throws> <block>{
            <decl_stmt><decl><type><name>URL</name></type> <name>url</name> =<init> <expr>new <call><name>URL</name><argument_list>(<argument><expr>"file"</expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><call><name><name>fil</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><name>url</name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/** Makes a URL from a file within a JAR
         * @param name Name of the resource to be converted to a URL
         * @param jar Jar File containing the resource
         * @return A URL for the given resource in the jar file
         */</comment>
        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>URL</name></type> <name>make</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>, <param><decl><type><name>File</name></type> <name>jar</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>MalformedURLException</name></expr></argument></throws> <block>{
            <decl_stmt><decl><type><name>StringBuilder</name></type> <name>filename</name> =<init> <expr>new <call><name>StringBuilder</name><argument_list>(<argument><expr>"file:///"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>filename</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>jar</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>filename</name>.<name>append</name></name><argument_list>(<argument><expr>"!/"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>filename</name>.<name>append</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>sf</name> =<init> <expr><call><name><name>filename</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>sfu</name> =<init> <expr><call><name><name>sf</name>.<name>replace</name></name><argument_list>(<argument><expr>'\\'</expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>URL</name></type> <name>url</name> =<init> <expr>new <call><name>URL</name><argument_list>(<argument><expr>"jar"</expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>sfu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><name>url</name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Creates a tool used by the ClassLoader for loading resources from a given Path
         * @param path Resources Path
         */</comment>
        <constructor><specifier>public</specifier> <name>ResourcePathLoader</name><parameter_list>( <param><decl><type><name>String</name></type> <name>path</name></decl></param> )</parameter_list><block>{
            <expr_stmt><expr><name><name>this</name>.<name>path</name></name> = <name>path</name></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="javadoc">/**
         * Returns a resource from the path as a URL
         * @param name a resource name.
         * @return a resource from the path as a URL
         */</comment>
        <function><type><annotation>@<name>Override</name></annotation>        
        <specifier>public</specifier> <name>URL</name></type> <name>getResource</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>MalformedURLException</name></expr></argument></throws><block>{
            <return>return <expr><call><name>make</name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Returns a resource from the path as an InputStream
         * @param name a resource name.
         * @return a resource from the path as an InputStream
         */</comment>
        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <name>InputStream</name></type> <name>getResourceAsStream</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws><block>{
                <return>return <expr>new <call><name>FileInputStream</name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
}</block></class></unit>
