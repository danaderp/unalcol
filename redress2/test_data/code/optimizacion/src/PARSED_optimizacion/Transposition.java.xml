<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\optimization\operators\binary\Transposition.java"><package>package <name><name>unalcol</name>.<name>optimization</name>.<name>operators</name>.<name>binary</name></name>;</package>

<import>import <name><name>unalcol</name>.<name>random</name>.<name>integer</name></name>.*;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>bitarray</name>.<name>BitArray</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>clone</name></name>.*;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>vector</name></name>.*;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Title: Transposition&lt;/p&gt;
 * &lt;p&gt;Description: The simple transposition operator (without flanking)&lt;/p&gt;
 * &lt;p&gt;Copyright: Copyright (c) 2010&lt;/p&gt;
 * @author Jonatan Gomez
 * @version 1.0
 */</comment>

<class><specifier>public</specifier> class <name>Transposition</name> <super><extends>extends <name>BinaryArityOne</name></extends></super> <block>{
    <constructor><specifier>public</specifier> <name>Transposition</name><parameter_list>()</parameter_list><block>{}</block></constructor>
    
  <comment type="javadoc">/**
   * Interchange the bits between two positions randomly chosen
   * Example:      genome = 100011001110
   * Transposition 2-10:    101100110010
   * @param _genome Genome to be modified
   */</comment>
  <function><type><specifier>public</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>BitArray</name></argument>&gt;</argument_list></name></type> <name>generates</name><parameter_list>(<param><decl><type><name>BitArray</name></type> <name>_genome</name></decl></param>)</parameter_list> <block>{
      <try>try<block>{
          <decl_stmt><decl><type><name>BitArray</name></type> <name>genome</name> =<init> <expr>(<name>BitArray</name>) <call><name><name>Clone</name>.<name>get</name></name><argument_list>(<argument><expr><name>_genome</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <decl_stmt><decl><type><name>UniformIntegerGenerator</name></type> <name>gen</name> =<init> <expr>new <call><name>UniformIntegerGenerator</name><argument_list>(<argument><expr><call><name><name>genome</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int</name></type> <name>start</name> =<init> <expr><call><name><name>gen</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int</name></type> <name>end</name> =<init> <expr><call><name><name>gen</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

          <if>if <condition>(<expr><name>start</name> &gt; <name>end</name></expr>)</condition><then> <block>{
              <decl_stmt><decl><type><name>int</name></type> <name>t</name> =<init> <expr><name>start</name></expr></init></decl>;</decl_stmt>
              <expr_stmt><expr><name>start</name> = <name>end</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>end</name> = <name>t</name></expr>;</expr_stmt>
          }</block></then></if>
          <decl_stmt><decl><type><name>boolean</name></type> <name>tr</name></decl>;</decl_stmt>

          <while>while <condition>(<expr><name>start</name> &lt; <name>end</name></expr>)</condition> <block>{
              <expr_stmt><expr><name>tr</name> = <call><name><name>genome</name>.<name>get</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>genome</name>.<name>set</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><call><name><name>genome</name>.<name>get</name></name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>genome</name>.<name>set</name></name><argument_list>(<argument><expr><name>end</name></expr></argument>, <argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>start</name>++</expr>;</expr_stmt>
              <expr_stmt><expr><name>end</name>--</expr>;</expr_stmt>
          }</block></while>
          <decl_stmt><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>BitArray</name></argument>&gt;</argument_list></name></type> <name>v</name> =<init> <expr>new <call><name><name>Vector</name><argument_list>&lt;<argument><name>BitArray</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>v</name>.<name>add</name></name><argument_list>(<argument><expr><name>genome</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>v</name></expr>;</return>
      }</block><catch>catch( <param><decl><type><name>Exception</name></type> <name>e</name></decl></param> )<block>{}</block></catch></try>
      <return>return <expr><name>null</name></expr>;</return>
  }</block></function>
}</block></class>
</unit>
