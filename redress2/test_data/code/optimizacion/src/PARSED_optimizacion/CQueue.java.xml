<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\types\collection\list\CQueue.java"><package>package <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>list</name></name>;</package>

<comment type="javadoc">/**
 * &lt;p&gt;Title: CQueue&lt;/p&gt;
 * &lt;p&gt;Description: A circular queue.&lt;/p&gt;
 * &lt;p&gt;Copyright: Copyright (c) 2006&lt;/p&gt;
 * &lt;p&gt;Company: Kunsamu&lt;/p&gt;
 * @author Jonatan Gomez
 * @version 1.0
 */</comment>
<class><specifier>public</specifier> class <name><name>CQueue</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name> <block>{
  <comment type="javadoc">/**
   * The cursor of the circular queue (current position)
   */</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <name><name>Node</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>start</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

  <comment type="javadoc">/**
   * Constructor: Creates a empty circular queue
   */</comment>
  <constructor><specifier>public</specifier> <name>CQueue</name><parameter_list>()</parameter_list> <block>{ }</block></constructor>

  <comment type="javadoc">/**
   * Determines if the circular queue is empty or not.
   * @return True if the queue is empty, false in other case
   */</comment>
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>empty</name><parameter_list>()</parameter_list> <block>{ <return>return <expr>(<name>start</name> == <name>null</name>)</expr>;</return> }</block></function>

  <comment type="javadoc">/**
   * Advances in the circular one position.
   * &lt;p&gt;C = a -&gt; b -&gt; c -&gt; d --&gt; a&lt;/p&gt;
   * &lt;p&gt;C.next() =&gt;  C = b -&gt; c -&gt; d -&gt; a --&gt; b and returns b&lt;/p&gt;
   * @return The object at the circular queue cursor position after advancing one position. Returns null if the queue is empty
   */</comment>
  <function><type><specifier>public</specifier> <name>T</name></type> <name>next</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>T</name></type> <name>val</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>start</name> = <name><name>start</name>.<name>next</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>val</name> = <name><name>start</name>.<name>data</name></name></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>val</name></expr>;</return>
  }</block></function>

  <comment type="javadoc">/**
   * Advances in the circular queue n positions.
   * &lt;p&gt;C = a -&gt; b -&gt; c -&gt; d --&gt; a&lt;/p&gt;
   * &lt;p&gt;C.advance( 2 ) =&gt;  C = c -&gt; d -&gt; a -&gt; b --&gt; c and returns c&lt;/p&gt;
   * @param n The number of positions to advance
   * @return The object at the circular queue cursor position after advancing n positions. Returns null if the queue is empty
   */</comment>
  <function><type><specifier>public</specifier> <name>T</name></type> <name>advance</name><parameter_list>(<param><decl><type><name>int</name></type> <name>n</name></decl></param>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>T</name></type> <name>val</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <expr_stmt><expr><name>start</name> = <name><name>start</name>.<name>next</name></name></expr>;</expr_stmt>
      }</block></for>
      <expr_stmt><expr><name>val</name> = <name><name>start</name>.<name>data</name></name></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>val</name></expr>;</return>
  }</block></function>

  <comment type="javadoc">/**
   * Backs in the circular one position.
   * &lt;p&gt;C = a -&gt; b -&gt; c -&gt; d --&gt; a&lt;/p&gt;
   * &lt;p&gt;C.prev( ) =&gt;  C = d -&gt; a -&gt; b -&gt; c --&gt; d and returns d&lt;/p&gt;
   * @return The object at the circular queue cursor position after backing one position. Returns null if the queue is empty
   */</comment>
  <function><type><specifier>public</specifier> <name>T</name></type> <name>prev</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>T</name></type> <name>val</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>start</name> = <name><name>start</name>.<name>prev</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>val</name> = <name><name>start</name>.<name>data</name></name></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>val</name></expr>;</return>
  }</block></function>

  <comment type="javadoc">/**
   * Adds a new object to the circular queue. The object is added after the current object in the queue. The cursor is not moved.
   * &lt;p&gt;C = a -&gt; b -&gt; c -&gt; d --&gt; a&lt;/p&gt;
   * &lt;p&gt;C.add( x ) =&gt;  C = a -&gt; x -&gt; b -&gt; c -&gt; d --&gt; a&lt;/p&gt;
   * @param data The object to be added
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>T</name></type> <name>data</name></decl></param>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>start</name> = new <call><name>Node</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>start</name>.<name>prev</name></name> = <name>start</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>start</name>.<name>next</name></name> = <name>start</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <decl_stmt><decl><type><name>Node</name></type> <name>aux</name> =<init> <expr>new <call><name>Node</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>aux</name>.<name>next</name></name> = <name><name>start</name>.<name>next</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>aux</name>.<name>next</name>.<name>prev</name></name> = <name>aux</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>start</name>.<name>next</name></name> = <name>aux</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>aux</name>.<name>prev</name></name> = <name>start</name></expr>;</expr_stmt>
    }</block></else></if>
  }</block></function>

  <comment type="javadoc">/**
   * Deletes the current object in the circular queue.
   * The new current object is the next to the old current object
   * &lt;p&gt;C = a -&gt; b -&gt; c -&gt; d --&gt; a&lt;/p&gt;
   * &lt;p&gt;C.del() =&gt;  C = b -&gt; c -&gt; d --&gt; b&lt;/p&gt;
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>del</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr>!<call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <if>if <condition>(<expr><name><name>start</name>.<name>next</name></name> == <name>start</name></expr>)</condition><then> <block>{
    	<expr_stmt><expr><name>start</name> = <name>null</name></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><name><name>start</name>.<name>prev</name>.<name>next</name></name> = <name><name>start</name>.<name>next</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>start</name>.<name>next</name>.<name>prev</name></name> = <name><name>start</name>.<name>prev</name></name></expr>;</expr_stmt>
        <comment type="line">//start = start.prev;</comment>
        <expr_stmt><expr><name>start</name> = <name><name>start</name>.<name>next</name></name></expr>;</expr_stmt>
      }</block></else></if>
    }</block></then></if>
  }</block></function>

  <comment type="javadoc">/**
   * Gets the current object in the circular queue. If the circular queue is empty return null
   * &lt;p&gt;C = a -&gt; b -&gt; c -&gt; d --&gt; a&lt;/p&gt;
   * &lt;p&gt;C.get() = a&lt;/p&gt;
   * @return The cursor of the circular queue
   */</comment>
  <function><type><specifier>public</specifier> <name>T</name></type> <name>get</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>T</name></type> <name>data</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{ <expr_stmt><expr><name>data</name> = <name><name>start</name>.<name>data</name></name></expr>;</expr_stmt> }</block></then></if>
    <return>return <expr><name>data</name></expr>;</return>
  }</block></function>
}</block></class>
</unit>
