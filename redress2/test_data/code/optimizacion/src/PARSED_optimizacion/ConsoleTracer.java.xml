<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\tracer\ConsoleTracer.java"><package>package <name><name>unalcol</name>.<name>tracer</name></name>;</package>
<import>import <name><name>unalcol</name>.<name>io</name></name>.*;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Title: ConsoleTracer&lt;/p&gt;
 * &lt;p&gt;Description: A Tracer based on the java console&lt;/p&gt;
 * &lt;p&gt;Copyright: Copyright (c) 2009&lt;/p&gt;
 * &lt;p&gt;Company: Kunsamu&lt;/p&gt;
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 */</comment>

<class><specifier>public</specifier> class <name>ConsoleTracer</name> <super><extends>extends <name>Tracer</name></extends></super> <block>{
    <comment type="javadoc">/**
     * Determines if a new line symbol is added after tracing an object
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>addNewLine</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a console tracer (writes a data object per line
     */</comment>
    <constructor><specifier>public</specifier> <name>ConsoleTracer</name><parameter_list>( <param><decl><type><name>Object</name></type> <name>owner</name></decl></param> )</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>( <argument><expr><name>owner</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a console tracer
     * @param addNewLine Determines if a new line symbol is added after tracing an object
     */</comment>
    <constructor><specifier>public</specifier> <name>ConsoleTracer</name><parameter_list>( <param><decl><type><name>Object</name></type> <name>owner</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>addNewLine</name></decl></param> )</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>( <argument><expr><name>owner</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>addNewLine</name></name> = <name>addNewLine</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Shows the traced information sent by the source into the console
     * @param obj Traced information to be sown in the console
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if<condition>( <expr><name>tracing</name></expr> )</condition><then><block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>Persistency</name>.<name>toString</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Return the traced information
     * @return null since the console does not store the traced information
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>Object</name></type> <name>get</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>null</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Cleans the traced information
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>clean</name><parameter_list>()</parameter_list> <block>{}</block></function>

    <comment type="javadoc">/**
     * Closes the console (does nothing)
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <block>{}</block></function><empty_stmt>;</empty_stmt>
}</block></class>
</unit>
