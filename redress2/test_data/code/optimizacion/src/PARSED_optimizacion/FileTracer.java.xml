<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\tracer\FileTracer.java"><package>package <name><name>unalcol</name>.<name>tracer</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>FileWriter</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>io</name>.<name>Persistency</name></name>;</import>

<comment type="line">// import unalcol.Unalcol;</comment>

<comment type="javadoc">/**
 * &lt;p&gt;Title: ConsoleTracer&lt;/p&gt;
 * &lt;p&gt;Description: A Tracer based on the java console&lt;/p&gt;
 * &lt;p&gt;Copyright: Copyright (c) 2009&lt;/p&gt;
 * &lt;p&gt;Company: Kunsamu&lt;/p&gt;
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 */</comment>

<class><specifier>public</specifier> class <name>FileTracer</name> <super><extends>extends <name>Tracer</name></extends></super> <block>{
    <comment type="javadoc">/**
     * File that is associated to the tracer
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>FileWriter</name></type> <name>file</name></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * File Name
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>fileName</name></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * Determines if a new line symbol is added after tracing an object
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>addNewLine</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a console tracer
     * @param fileName File Name
     * @param addNewline used for determining if a new line symbol is added after tracing an object or not
     */</comment>
    <constructor><specifier>public</specifier> <name>FileTracer</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>owner</name></decl></param>, <param><decl><type><name>String</name></type> <name>fileName</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>addNewline</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>( <argument><expr><name>owner</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>fileName</name></name> = <name>fileName</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>addNewLine</name></name> = <name>addNewline</name></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>file</name> = new <call><name>FileWriter</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
            <comment type="line">// @TODO I have to check the tracer architecture as plugins</comment>
            <comment type="line">//e.printStackTrace();</comment>
        }</block></catch></try>
    }</block></constructor>

    <comment type="javadoc">/**
     * Shows the traced information sent by the source into the console
     * @param obj Traced information to be sown in the console
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <try>try <block>{
            <expr_stmt><expr><call><name><name>file</name>.<name>write</name></name><argument_list>(<argument><expr><call><name><name>Persistency</name>.<name>toString</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>addNewLine</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>file</name>.<name>write</name></name><argument_list>(<argument><expr>'\n'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name><name>e</name>.<name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * Return the traced information
     * @return null since the console does not store the traced information
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>get</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>null</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Closes the associated file
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <block>{
        <try>try <block>{
            <expr_stmt><expr><call><name><name>file</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name><name>e</name>.<name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * Cleans the traced information
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>clean</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>file</name> = new <call><name>FileWriter</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name><name>e</name>.<name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>
}</block></class></unit>
