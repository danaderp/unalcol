<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\reflect\loader\tool\JarLoader.java"><package>package <name><name>unalcol</name>.<name>reflect</name>.<name>loader</name>.<name>tool</name></name>;</package>
<import>import <name><name>unalcol</name>.<name>reflect</name>.<name>loader</name>.<name>ResourceLoaderTool</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>reflect</name>.<name>loader</name>.<name>LoaderTool</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name></name>.*;</import>
<import>import <name><name>java</name>.<name>net</name></name>.*;</import>
<import>import <name><name>java</name>.<name>util</name></name>.*;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>zip</name></name>.*;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Tool used by the ClassLoader for loading class Bytes and Resources from a Jar File&lt;/p&gt;
 *
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 */</comment>
<class><specifier>public</specifier> class <name>JarLoader</name> <super><implements>implements <name>LoaderTool</name>, <name>ResourceLoaderTool</name></implements></super><block>{
    <comment type="javadoc">/**
     * Jar File containing class files
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>File</name></type> <name>jar</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a Tool for loading class file bytes and resources from an specific Jar File
     * @param jar Jar File containing class files and resources
     */</comment>
    <constructor><specifier>public</specifier> <name>JarLoader</name><parameter_list>( <param><decl><type><name>File</name></type> <name>jar</name></decl></param> )</parameter_list><block>{
        <expr_stmt><expr><name><name>this</name>.<name>jar</name></name> = <name>jar</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/** Loads the class bytes from a Jar file
     * @param name Name of the resource
     * @return Class bytes from a file if possible, null otherwise.
     */</comment>
    <function><type><specifier>public</specifier> <name>byte</name><index>[]</index></type> <name>loadBytes</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>BufferedInputStream</name></type> <name>bis</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <decl_stmt><decl><type><name>ZipFile</name></type> <name>jarFile</name> =<init> <expr>new <call><name>ZipFile</name><argument_list>(<argument><expr><name>jar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Enumeration</name></type> <name>entries</name> =<init> <expr><call><name><name>jarFile</name>.<name>entries</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>entries</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <decl_stmt><decl><type><name>ZipEntry</name></type> <name>entry</name> =<init> <expr>(<name>ZipEntry</name>) <call><name><name>entries</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>className</name> =<init> <expr><call><name><name>entry</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>className</name> = <call><name><name>className</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>,
                        <argument><expr><call><name><name>className</name>.<name>length</name></name><argument_list>()</argument_list></call> - 6</expr></argument>)</argument_list></call>.<call><name>replace</name><argument_list>(<argument><expr>'/'</expr></argument>,
                        <argument><expr>'.'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><call><name><name>className</name>.<name>equals</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>bis</name> = new <call><name>BufferedInputStream</name><argument_list>(<argument><expr><call><name><name>jarFile</name>.<name>getInputStream</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>size</name> =<init> <expr>(<name>int</name>) <call><name><name>entry</name>.<name>getSize</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>data</name> =<init> <expr>new <name><name>byte</name><index>[<expr><name>size</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>b</name> =<init> <expr>0</expr></init>, <name>eofFlag</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
                    <while>while <condition>(<expr>(<name>size</name> - <name>b</name>) &gt; 0</expr>)</condition> <block>{
                        <expr_stmt><expr><name>eofFlag</name> = <call><name><name>bis</name>.<name>read</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>size</name> - <name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>eofFlag</name> == -1</expr>)</condition><then><break>break;</break></then></if>
                        <expr_stmt><expr><name>b</name> += <name>eofFlag</name></expr>;</expr_stmt>
                    }</block></while>
                    <return>return <expr><name>data</name></expr>;</return>
                }</block></then></if>
            }</block></while>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{}</block></catch> <finally>finally <block>{
            <try>try <block>{
                <if>if <condition>(<expr><name>bis</name> != <name>null</name></expr>)</condition><then> <expr_stmt><expr><call><name><name>bis</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
            }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{}</block></catch></try>
        }</block></finally></try>
        <return>return <expr><name>null</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a resource from JAR file as a URL
     * @param name a resource name.
     * @return a resource from the JAR file as a URL
     */</comment>
    <function><type><specifier>public</specifier> <name>URL</name></type> <name>getResource</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>resourceBytes</name></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>resourceBytes</name> = <call><name>loadBytes</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>resourceBytes</name> != <name>null</name></expr>)</condition><then> <block>{
                <return>return <expr><call><name><name>ResourcePathLoader</name>.<name>make</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>jar</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>
        }</block> <catch>catch (<param><decl><type><name>MalformedURLException</name></type> <name>e</name></decl></param>) <block>{
        }</block></catch></try>
        <return>return <expr><name>null</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a resource from the JAR file as an InputStream
     * @param name a resource name.
     * @return a resource from the JAR file as an InputStream
     */</comment>
    <function><type><specifier>public</specifier> <name>InputStream</name></type> <name>getResourceAsStream</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>resourceBytes</name></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>resourceBytes</name> = <call><name>loadBytes</name><argument_list>( <argument><expr><name>name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>resourceBytes</name> != <name>null</name></expr>)</condition><then> <block>{
                <return>return <expr>new <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><name>resourceBytes</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
        }</block></catch></try>
        <return>return <expr><name>null</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Gets the name of the Jar File
     * @return Jar File name
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list><block>{
        <return>return <expr><call><name><name>jar</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Gets the Jar File used for loading class bytes
     * @return Jar File containing class files
     */</comment>
    <function><type><specifier>public</specifier> <name>File</name></type> <name>file</name><parameter_list>()</parameter_list><block>{
        <return>return <expr><name>jar</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list><block>{}</block></function>

}</block></class>
</unit>
