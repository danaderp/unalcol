<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\types\integer\IntUtil.java"><package>package <name><name>unalcol</name>.<name>types</name>.<name>integer</name></name>;</package>


<comment type="javadoc">/**
 * &lt;p&gt;Set of constants and methods operating on the primitive &lt;i&gt;int&lt;/i&gt; data type,
 * for example, for accessing the bit representation of an int &lt;/p&gt;
 *
 * &lt;p&gt;Copyright: Copyright (c) 2009&lt;/p&gt;
 * 
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 *
 */</comment>


<class><specifier>public</specifier> class <name>IntUtil</name> <block>{

    <comment type="javadoc">/**
     * The minimum integer that can be represented
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>MIN_INT</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The maximum integer that can be represented
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>MAX_INT</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * A integer with the lowest bit set in one and the remainig bits set in zero
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>LOWEST_BIT</name> =<init> <expr>1</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * A integer with the highest bit set in one and the remainig bits set in zero
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>HIGHEST_BIT</name> =<init> <expr>1 &lt;&lt; 31</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The number of bits used to represent an integer
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>INTEGER_SIZE</name> =<init> <expr>32</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Integer used to apply the modulus operation respect to the integer size
     * &lt;p&gt;  x &amp; MOD_MASK = x mod INTEGER_SIZE &lt;/p&gt;
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>MOD_MASK</name> =<init> <expr>31</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Integer used to apply the division operation respect to the integer size
     * &lt;p&gt;  x &gt;&gt;&gt; DIV_MASK = x div INTEGER_SIZE &lt;/p&gt;
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>DIV_MASK</name> =<init> <expr>5</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * A integer with all the bits set in one
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>ONE_BITS</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Initializes the bit array static information (INTEGER_SIZE in bits, MOD_MASK, etc)
     */</comment>
    static <block>{
        <expr_stmt><expr><name>LOWEST_BIT</name> = 1</expr>;</expr_stmt>
        <expr_stmt><expr><name>ONE_BITS</name> = -1</expr>;</expr_stmt>
        <expr_stmt><expr><name>INTEGER_SIZE</name> = 0</expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>val</name> =<init> <expr>1</expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>val</name> != 0</expr>)</condition> <block>{
            <expr_stmt><expr><name>val</name> &lt;&lt;= 1</expr>;</expr_stmt>
            <expr_stmt><expr><name>INTEGER_SIZE</name>++</expr>;</expr_stmt>
        }</block></while>

        <expr_stmt><expr><name>MOD_MASK</name> = (<name>INTEGER_SIZE</name> - 1)</expr>;</expr_stmt>

        <expr_stmt><expr><name>MIN_INT</name> = (1 &lt;&lt; <name>MOD_MASK</name>)</expr>;</expr_stmt>
        <expr_stmt><expr><name>MAX_INT</name> = <name>MIN_INT</name> - 1</expr>;</expr_stmt>

        <expr_stmt><expr><name>HIGHEST_BIT</name> = 1 &lt;&lt; <name>MOD_MASK</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>DIV_MASK</name> = -1</expr>;</expr_stmt>
        <expr_stmt><expr><name>val</name> = <name>INTEGER_SIZE</name></expr>;</expr_stmt>
        <while>while <condition>(<expr><name>val</name> &gt; 0</expr>)</condition> <block>{
            <expr_stmt><expr><name>val</name> &gt;&gt;&gt;= 1</expr>;</expr_stmt>
            <expr_stmt><expr><name>DIV_MASK</name>++</expr>;</expr_stmt>
        }</block></while>
    }</block>

    <comment type="javadoc">/**
     * Transforms an unsigned binary number to reflected binary Gray code. For example the integer value
     * 2 is represented in binary code as: 0000.....0010
     * 2 is represented in gray code as: 0000.....0011 (3 in binary)
     * binarytoGray( 2 ) = 3
     * @param num Integer number to be converted to Gray code
     * @return Integer value that represents the value num (in gray binary format)
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>binaryToGray</name><parameter_list>(<param><decl><type><name>int</name></type> <name>num</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>(<name>num</name> &gt;&gt;&gt; 1) ^ <name>num</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Determines the minimum number of bits required for representing n different values
     * @param n Number of different values
     * @return Number of bits required for representing such n different values
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getBitsNumber</name><parameter_list>(<param><decl><type><name>int</name></type> <name>n</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call>(<name>int</name>) <argument_list>(<argument><expr><call><name><name>Math</name>.<name>log</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> / <call><name><name>Math</name>.<name>log</name></name><argument_list>(<argument><expr>2.0</expr></argument>)</argument_list></call> + 0.9999</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Transforms a reflected binary Gray code number to a unsigned binary number. For example,
     * 0000.....0011 in binary code represents 3, but in Gray code represents 2.
     * grayToBinary( 3 ) = 2
     * @param num Integer number in Gray code that will be converted to Binary code
     * @return Unsigned Integer value that is represented by the Gray value num
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>grayToBinary</name><parameter_list>(<param><decl><type><name>int</name></type> <name>num</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>k</name> =<init> <expr>(<name>INTEGER_SIZE</name> &gt;&gt;&gt; 1)</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>temp</name> =<init> <expr><name>num</name></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>k</name> &gt; 0</expr>)</condition> <block>{
            <expr_stmt><expr><name>temp</name> ^= (<name>temp</name> &gt;&gt;&gt; <name>k</name>)</expr>;</expr_stmt>
            <expr_stmt><expr><name>k</name> &gt;&gt;&gt;= 1</expr>;</expr_stmt>
        }</block></while>
        <return>return <expr><name>temp</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
