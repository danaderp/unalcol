<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\types\collection\vector\sparse\ImmutableSparseVector.java"><comment type="block">/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */</comment>
<package>package <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>vector</name>.<name>sparse</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>array</name>.<name>ArrayCollection</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>vector</name>.<name>SortedVector</name></name>;</import>

<comment type="javadoc">/**
 *
 * @author jgomez
 */</comment>
<class><specifier>public</specifier> class <name><name>ImmutableSparseVector</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name> <super><implements>implements <name><name>ArrayCollection</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></implements></super><block>{
    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>SortedVector</name><argument_list>&lt;<argument><name><name>SparseElement</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>vector</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>SparseElement</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>loc</name> =<init> <expr>new <call><name>SparseElement</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        
    <constructor><specifier>public</specifier> <name>ImmutableSparseVector</name><parameter_list>( <param><decl><type><name><name>SortedVector</name><argument_list>&lt;<argument><name><name>SparseElement</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>vector</name></decl></param> )</parameter_list><block>{
        <expr_stmt><expr><name><name>this</name>.<name>vector</name></name> = <name>vector</name></expr>;</expr_stmt> <comment type="line">// new SortedVector(new SparseElementOrder());</comment>
    }</block></constructor>
    
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>T</name></type> <name>get</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>ArrayIndexOutOfBoundsException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><name><name>loc</name>.<name>index</name></name> = <name>index</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>index</name> = <call><name><name>vector</name>.<name>findIndex</name></name><argument_list>(<argument><expr><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>vector</name>.<name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call>.<call><name>value</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>iterator</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>new <call><name><name>SparseVectorIterator</name><argument_list>&lt;&gt;</argument_list></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name><name>SparseElement</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>sparse_elements</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>vector</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>findIndex</name><parameter_list>(<param><decl><type><name>T</name></type> <name>data</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>k</name>=<init><expr>0</expr></init></decl>;</decl_stmt>
        <while>while<condition>( <expr><name>k</name>&lt;<call><name>size</name><argument_list>()</argument_list></call> &amp;&amp; !<call><name><name>data</name>.<name>equals</name></name><argument_list>(<argument><expr><call><name><name>vector</name>.<name>get</name></name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call>.<call><name>value</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> )</condition><block>{ <expr_stmt><expr><name>k</name>++</expr>;</expr_stmt> }</block></while>
        <return>return <expr>(<name>k</name>==<call><name>size</name><argument_list>()</argument_list></call>)?-1:<name>k</name></expr>;</return>
    }</block></function>
    
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>boolean</name></type> <name>isEmpty</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>vector</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>int</name></type> <name>size</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>vector</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
    
    <function><type><specifier>public</specifier> <name><name>SortedVector</name><argument_list>&lt;<argument><name><name>SparseElement</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>sparseVector</name><parameter_list>()</parameter_list><block>{
        <return>return <expr><name>vector</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
