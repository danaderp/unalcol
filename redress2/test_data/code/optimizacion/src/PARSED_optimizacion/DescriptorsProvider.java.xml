<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\descriptors\DescriptorsProvider.java"><package>package <name><name>unalcol</name>.<name>descriptors</name></name>;</package>

<import>import <name><name>unalcol</name>.<name>reflect</name>.<name>util</name></name>.*;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Descriptors Service Provider&lt;/p&gt;
 *
 * &lt;p&gt;Copyright: Copyright (c) 2010&lt;/p&gt;
 *
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 */</comment>
<class><specifier>public</specifier> class <name>DescriptorsProvider</name><block>{

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>DescriptorsService</name></type> <name>get</name><parameter_list>( <param><decl><type><name>Object</name></type> <name>obj</name></decl></param> )</parameter_list><block>{
        <try>try<block>{
            <return>return <expr>((<name>DescriptorsService</name>)<call><name><name>ReflectUtil</name>.<name>getProvider</name></name><argument_list>()</argument_list></call>.<call><name>default_service</name><argument_list>(<argument><expr><name><name>DescriptorsService</name>.<name><name/></name></name>class</expr></argument>,<argument><expr><name>obj</name></expr></argument>)</argument_list></call>)</expr>;</return>
        }</block><catch>catch( <param><decl><type><name>Exception</name></type> <name>e</name></decl></param> )<block>{
            <expr_stmt><expr><call><name><name>e</name>.<name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <return>return <expr><name>null</name></expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     * Obtains the descriptors of an object
     * @param obj Object to be analized
     * @return An array of double values used for describing the object
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>double</name><index>[]</index></type> <name>descriptors</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>DescriptorsService</name></type> <name>method</name> =<init> <expr><call><name>get</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>method</name>.<name>descriptors</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class></unit>
