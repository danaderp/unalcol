<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\optimization\iterative\IterativePopulationOptimizerDescriptors.java"><package>package <name><name>unalcol</name>.<name>optimization</name>.<name>iterative</name></name>;</package>
<import>import <name><name>unalcol</name>.<name>descriptors</name></name>.*;</import>
<import>import <name><name>unalcol</name>.<name>optimization</name>.<name>PopulationDescriptors</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>optimization</name>.<name>solution</name>.<name>Solution</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>optimization</name>.<name>transformation</name>.<name>Transformation</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>vector</name>.<name>Vector</name></name>;</import>


<comment type="javadoc">/**
 * &lt;p&gt;Title: IterativePopulationOptimizerDescriptors&lt;/p&gt;
 *
 * &lt;p&gt;Description: Numeric Description of an iterative population based optimizer. It includes:&lt;/p&gt;
 * &lt;p&gt; * current iteration&lt;/p&gt;
 * &lt;p&gt; * Numeric description of the current population.&lt;/p&gt;
 * &lt;p&gt; * Numeric description of the transformation applied (if available).&lt;/p&gt;
 *
 * &lt;p&gt;Copyright: Copyright (c) 2010&lt;/p&gt;
 *
 * &lt;p&gt;Company: Kunsamu&lt;/p&gt;
 *
 * @author Jonatan Gomez
 * @version 1.0
 */</comment>
<class><specifier>public</specifier> class <name>IterativePopulationOptimizerDescriptors</name> <super><implements>implements <name>DescriptorsService</name></implements></super><block>{
    <comment type="javadoc">/**
     * Returns the Class that owns the PlugIn
     * @return Class The PlugIns owner class
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>owner</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>IterativePopulationOptimizer</name>.<name><name/></name></name>class</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * &lt;p&gt;Gets a numeric description of an Iterative Population Optimizer. It includes:&lt;/p&gt;
     * &lt;p&gt;current iteration&lt;/p&gt;
     * &lt;p&gt;Numeric description of the current population.&lt;/p&gt;
     * &lt;p&gt;Numeric description of the transformation applied (if available).&lt;/p&gt;
     * @param obj Population base iterative optimizer
     * @return Numeric description of an Iterative Population Optimizer.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name><index>[]</index></type> <name>descriptors</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>descriptors</name><argument_list>(<argument><expr>(<name>IterativePopulationOptimizer</name>) <name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * &lt;p&gt;Gets a numeric description of an Iterative Population Optimizer. It includes:&lt;/p&gt;
     * &lt;p&gt;current iteration&lt;/p&gt;
     * &lt;p&gt;Numeric description of the current population.&lt;/p&gt;
     * &lt;p&gt;Numeric description of the transformation applied (if available).&lt;/p&gt;
     * @param obj Population base iterative optimizer
     * @return Numeric description of an Iterative Population Optimizer.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name><index>[]</index></type> <name>descriptors</name><parameter_list>(<param><decl><type><name>IterativePopulationOptimizer</name></type> <name>ea</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>Solution</name></argument>&gt;</argument_list></name></type> <name>p</name> =<init> <expr>(<name><name>Vector</name><argument_list>&lt;<argument><name>Solution</name></argument>&gt;</argument_list></name>)<call><name><name>ea</name>.<name>output</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DescriptorsService</name></type> <name>d</name> =<init> <expr><call><name><name>DescriptorsProvider</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>PopulationDescriptors</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>pd</name> =<init> <expr><call><name><name>d</name>.<name>descriptors</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>np</name> =<init> <expr><name><name>pd</name>.<name>length</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Transformation</name></type> <name>t</name> =<init> <expr><call><name><name>ea</name>.<name>transformation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>d</name> = <call><name><name>DescriptorsProvider</name>.<name>get</name></name><argument_list>(<argument><expr><call><name><name>t</name>.<name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>td</name> =<init> <expr>(<name>d</name> != <name>null</name>) ? <call><name><name>d</name>.<name>descriptors</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> : new <name><name>double</name><index>[<expr>0</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>nt</name> =<init> <expr>(<name>td</name>!=<name>null</name>)?<name><name>td</name>.<name>length</name></name>:0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>st</name> =<init> <expr>new <name><name>double</name><index>[<expr><name>np</name> + <name>nt</name> + 1</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>st</name><index>[<expr>0</expr>]</index></name> = <call><name><name>ea</name>.<name>generation</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <for>for(<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>np</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name><name>st</name><index>[<expr><name>i</name> + 1</expr>]</index></name> = <name><name>pd</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></for>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>nt</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name><name>st</name><index>[<expr><name>i</name> + <name>np</name> + 1</expr>]</index></name> = <name><name>td</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>st</name></expr>;</return>
    }</block></function>
}</block></class></unit>
