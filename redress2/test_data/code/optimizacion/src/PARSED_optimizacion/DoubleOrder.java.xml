<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\types\real\DoubleOrder.java"><package>package <name><name>unalcol</name>.<name>types</name>.<name>real</name></name>;</package>

<import>import <name><name>unalcol</name>.<name>sort</name></name>.*;</import>


<comment type="javadoc">/**
 * &lt;p&gt;Compares to Doubles&lt;/p&gt;
 *
 * &lt;p&gt;Copyright: Copyright (c) 2009&lt;/p&gt;
 * 
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 */</comment>

<class><specifier>public</specifier> class <name>DoubleOrder</name> <super><implements>implements <name><name>Order</name><argument_list>&lt;<argument><name>Double</name></argument>&gt;</argument_list></name></implements></super> <block>{
    <comment type="javadoc">/**
     * Returns the Class that owns the PlugIn
     * @return Class The PlugIns owner class
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>owner</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>Double</name>.<name><name/></name></name>class</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * The base PlugIn class its is overwritring
     * @return Class PlugIn being overwritten
     */</comment>
    <function><type><specifier>public</specifier> <name>Class</name></type> <name>base</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>Order</name>.<name><name/></name></name>class</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Determines if the first Double is less than (in some order) the second Double (one&lt;two)
     * @param one First Double
     * @param two Second Double
     * @return (one&lt;two)
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<param><decl><type><name>Double</name></type> <name>one</name></decl></param>, <param><decl><type><name>Double</name></type> <name>two</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>one</name>.<name>compareTo</name></name><argument_list>(<argument><expr><name>two</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
