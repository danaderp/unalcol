<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\types\collection\bitarray\BitArrayCollection.java"><comment type="block">/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */</comment>
<package>package <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>bitarray</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>array</name>.<name>ArrayCollection</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>array</name>.<name>ArrayCollectionIterator</name></name>;</import>

<comment type="javadoc">/**
 *
 * @author jgomez
 */</comment>
<class><specifier>public</specifier> class <name>BitArrayCollection</name> <super><implements>implements <name><name>ArrayCollection</name><argument_list>&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></implements></super><block>{
   <decl_stmt><decl><type><specifier>protected</specifier> <name>BitArray</name></type> <name>array</name></decl>;</decl_stmt>
   
   <constructor><specifier>public</specifier> <name>BitArrayCollection</name><parameter_list>( <param><decl><type><name><name>boolean</name><index>[]</index></name></type> <name>bits</name></decl></param> )</parameter_list><block>{
       <expr_stmt><expr><name>array</name> = new <call><name>BitArray</name><argument_list>(<argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   }</block></constructor>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>Boolean</name></type> <name>get</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>ArrayIndexOutOfBoundsException</name></expr></argument></throws> <block>{
        <throw>throw <expr>new <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr>"Not supported yet."</expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>int</name></type> <name>size</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>array</name>.<name>dimension</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>iterator</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>new <call><name><name>ArrayCollectionIterator</name><argument_list>&lt;&gt;</argument_list></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>boolean</name></type> <name>isEmpty</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>size</name><argument_list>()</argument_list></call>==0</expr>;</return>
    }</block></function>
}</block></class>
</unit>
