<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\random\util\Shuffle.java"><package>package <name><name>unalcol</name>.<name>random</name>.<name>util</name></name>;</package>

<import>import <name><name>unalcol</name>.<name>random</name>.<name>integer</name></name>.*;</import>
<comment type="line">//import unalcol.types.collection.vector.*;</comment>

<comment type="javadoc">/**
 * &lt;p&gt;Shuffles an array (vector) of objects&lt;/p&gt;
 *
 * &lt;p&gt;Copyright: Copyright (c) 2009&lt;/p&gt;
 *
 * &lt;p&gt;Company: Kunsamu&lt;/p&gt;
 *
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 */</comment>
<class><specifier>public</specifier> class <name><name>Shuffle</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name> <block>{
    <comment type="javadoc">/**
     * Generates an array with all the integers in the interval [0,n) stored in a random fashion
     * @param n Sup limit (the generated array has &lt;i&gt;n&lt;/i&gt; elements (the integer numbers in the interval [0,n))
     * @return An array with all the integers in the interval [0,n) stored in a random fashion
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name><index>[]</index></type> <name>apply</name><parameter_list>(<param><decl><type><name>int</name></type> <name>n</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name><index>[]</index></type> <name>set</name> =<init> <expr>new <name><name>int</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name><name>set</name><index>[<expr><name>i</name></expr>]</index></name> = <name>i</name></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name>apply</name><argument_list>(<argument><expr><name>set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>set</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Suffles the given array of integers
     * @param set Array of integers to be suffle
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>apply</name><parameter_list>(<param><decl><type><name><name>int</name><index>[]</index></name></type> <name>set</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>m</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>j</name>, <name>k</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>temp</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>n</name> =<init> <expr><name><name>set</name>.<name>length</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>UniformIntegerGenerator</name></type> <name>g</name> =<init> <expr>new <call><name>UniformIntegerGenerator</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name><index>[]</index></type> <name>indices</name> =<init> <expr><call><name><name>g</name>.<name>generate</name></name><argument_list>(<argument><expr>2 * <name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>j</name> = <name><name>indices</name><index>[<expr><name>m</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>m</name>++</expr>;</expr_stmt>
            <expr_stmt><expr><name>k</name> = <name><name>indices</name><index>[<expr><name>m</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>m</name>++</expr>;</expr_stmt>
            <expr_stmt><expr><name>temp</name> = <name><name>set</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>set</name><index>[<expr><name>j</name></expr>]</index></name> = <name><name>set</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>set</name><index>[<expr><name>k</name></expr>]</index></name> = <name>temp</name></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Suffles the given array of Objects
     * @param set Array of objects to be suffle
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>apply</name><parameter_list>(<param><decl><type><name><name>T</name><index>[]</index></name></type> <name>set</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>m</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>j</name>, <name>k</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>T</name></type> <name>temp</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>n</name> =<init> <expr><name><name>set</name>.<name>length</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>UniformIntegerGenerator</name></type> <name>g</name> =<init> <expr>new <call><name>UniformIntegerGenerator</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name><index>[]</index></type> <name>indices</name> =<init> <expr><call><name><name>g</name>.<name>generate</name></name><argument_list>(<argument><expr>2 * <name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>j</name> = <name><name>indices</name><index>[<expr><name>m</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>m</name>++</expr>;</expr_stmt>
            <expr_stmt><expr><name>k</name> = <name><name>indices</name><index>[<expr><name>m</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>m</name>++</expr>;</expr_stmt>
            <expr_stmt><expr><name>temp</name> = <name><name>set</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>set</name><index>[<expr><name>j</name></expr>]</index></name> = <name><name>set</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>set</name><index>[<expr><name>k</name></expr>]</index></name> = <name>temp</name></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Suffles the given Objects Vector
     * @param set Vector of objects to be suffle
     */</comment>
<comment type="block">/*    public void apply(Vector&lt;T&gt; set) {
        int m = 0;
        int j, k;
        T temp;
        int n = set.size();
        UniformIntegerGenerator g = new UniformIntegerGenerator(n);
        int[] indices = g.generate(2 * n);
        for (int i = 0; i &lt; n; i++) {
            j = indices[m];
            m++;
            k = indices[m];
            m++;
            temp = set.get(j);
            set.set(j, set.get(k));
            set.set(k, temp);
        }
    }
*/</comment>
}</block></class></unit>
