<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\types\collection\list\List.java"><package>package <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>list</name></name>;</package>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>NoSuchElementException</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>FiniteCollection</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>Location</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>MutableCollection</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>SearchCollection</name></name>;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Title: List&lt;/p&gt;
 *
 * &lt;p&gt;Description: A list of objects&lt;/p&gt;
 *
 * &lt;p&gt;Copyright: Copyright (c) 2009&lt;/p&gt;
 *
 * &lt;p&gt;Company: Kunsamu&lt;/p&gt;
 *
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 */</comment>
<class><specifier>public</specifier> class <name><name>List</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name> <super><implements>implements <name><name>FiniteCollection</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name>, <name><name>MutableCollection</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name>, <name><name>SearchCollection</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></implements></super> <block>{
    <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>size</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>Node</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>head</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>Node</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>last</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>List</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <comment type="javadoc">/**
     * Removes all the objects in the data structure
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>    
    <specifier>public</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list><block>{
        <expr_stmt><expr><name>head</name> = <name>null</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>last</name> = <name>null</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>size</name> = 0</expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Determines the number of objects stored by the data structure
     * @return Number of objects stored by the data structure
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>int</name></type> <name>size</name><parameter_list>()</parameter_list><block>{ <return>return <expr><name>size</name></expr>;</return> }</block></function>

    <comment type="javadoc">/**
     * Determines if the data structure is empty or not
     * @return &lt;i&gt;true&lt;/i&gt; if the data structure is empty &lt;i&gt;false&lt;/i&gt; otherwise
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>boolean</name></type> <name>isEmpty</name><parameter_list>()</parameter_list><block>{
        <return>return <expr>(<name>size</name>==0)</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Obtains an iterator of the objects in the list
     * @return Iterator of the objects in the list
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>iterator</name><parameter_list>()</parameter_list><block>{
        <return>return <expr>new <call><name>ListIterator</name><argument_list>( <argument><expr><name>head</name></expr></argument> )</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Obtains an iterator of the objects in the list starting at the given Locator
     * @param locator Locator used for starting the iterator, the first element returned by the iterator is the one in the locator
     * (if some one is in the locator)
     * @return Iterator of the objects in the list starting at the given Locator
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>iterator</name><parameter_list>( <param><decl><type><name><name>Location</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>locator</name></decl></param> )</parameter_list><block>{
        <if>if<condition>( <expr><name>locator</name> <name>instanceof</name> <name>ListLocation</name></expr> )</condition><then><block>{
            <return>return <expr>new <call><name><name>ListIterator</name><argument_list>&lt;&gt;</argument_list></name><argument_list>( <argument><expr>((<name>ListLocation</name>)<name>locator</name>).<name>node</name></expr></argument> )</argument_list></call></expr>;</return>
        }</block></then></if>
        <return>return <expr><name>null</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Inserts a data element in the structure
     * @param data Data element to be inserted
     * @return &lt;i&gt;true&lt;/i&gt; if the element could be added, &lt;i&gt;false&lt;/i&gt; otherwise
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>boolean</name></type> <name>add</name><parameter_list>(<param><decl><type><name>T</name></type> <name>data</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>Node</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>aux</name> =<init> <expr>new <call><name><name>Node</name><argument_list>&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>head</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>head</name> = <name>aux</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name><name>last</name>.<name>next</name></name> = <name>aux</name></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>last</name> = <name>aux</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>size</name>++</expr>;</expr_stmt>
        <return>return <expr>true</expr>;</return>
    }</block></function>

    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>del</name><parameter_list>( <param><decl><type><name><name>Node</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>node</name></decl></param> )</parameter_list><block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>flag</name> =<init> <expr>(<name>node</name> != <name>null</name>)</expr></init></decl>;</decl_stmt>
        <if>if<condition>( <expr><name>flag</name></expr> )</condition><then><block>{
            <expr_stmt><expr><name>size</name>--</expr>;</expr_stmt>
            <if>if<condition>( <expr><name><name>node</name>.<name>prev</name></name> != <name>null</name></expr> )</condition><then><block>{
                <expr_stmt><expr><name><name>node</name>.<name>prev</name>.<name>next</name></name> = <name><name>node</name>.<name>next</name></name></expr>;</expr_stmt>
            }</block></then><else>else<block>{
                <expr_stmt><expr><name>head</name> = <name><name>node</name>.<name>next</name></name></expr>;</expr_stmt>
            }</block></else></if>
            <if>if<condition>( <expr><name><name>node</name>.<name>next</name></name> != <name>null</name></expr> )</condition><then><block>{
                <expr_stmt><expr><name><name>node</name>.<name>next</name>.<name>prev</name></name> = <name><name>node</name>.<name>prev</name></name></expr>;</expr_stmt>
            }</block></then><else>else<block>{
                <expr_stmt><expr><name>last</name> = <name><name>node</name>.<name>prev</name></name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if>
        <return>return <expr><name>flag</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Removes the element indicated by the locator
     * @param locator The location information of the object to be deleted
     * @return &lt;i&gt;true&lt;/i&gt; if the element could be removed, &lt;i&gt;false&lt;/i&gt; otherwise
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>boolean</name></type> <name>del</name><parameter_list>( <param><decl><type><name><name>Location</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>locator</name></decl></param> )</parameter_list><block>{
        <if>if<condition>( <expr><name>locator</name> <name>instanceof</name> <name>ListLocation</name></expr> )</condition><then><block>{
            <return>return <expr><call><name>del</name><argument_list>( <argument><expr>((<name><name>ListIterator</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name>)<name>locator</name>).<name>node</name></expr></argument> )</argument_list></call></expr>;</return>
        }</block></then></if>
        <return>return <expr>false</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Removes a data element from the structure
     * @param data Data element to be removed
     * @return &lt;i&gt;true&lt;/i&gt; if the element could be removed, &lt;i&gt;false&lt;/i&gt; otherwise
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>boolean</name></type> <name>del</name><parameter_list>(<param><decl><type><name>T</name></type> <name>data</name></decl></param>)</parameter_list><block>{
        <decl_stmt><decl><type><name><name>Node</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>aux</name> =<init> <expr><name>head</name></expr></init></decl>;</decl_stmt>
        <while>while<condition>( <expr><name>aux</name> != <name>null</name> &amp;&amp; !<call><name><name>data</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>aux</name>.<name>data</name></name></expr></argument>)</argument_list></call></expr> )</condition><block>{
            <expr_stmt><expr><name>aux</name> = <name><name>aux</name>.<name>next</name></name></expr>;</expr_stmt>
        }</block></while>
        <return>return <expr><call><name>del</name><argument_list>( <argument><expr><name>aux</name></expr></argument> )</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Locates the given object in the structure
     * @param data Data object to be located
     * @return A data object if the object belongs to the data structure, &lt;i&gt;false&lt;/i&gt; otherwise
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name><name>Location</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>find</name><parameter_list>( <param><decl><type><name>T</name></type> <name>data</name></decl></param> )</parameter_list><block>{
        <decl_stmt><decl><type><name><name>Node</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>aux</name> =<init> <expr><name>head</name></expr></init></decl>;</decl_stmt>
        <while>while<condition>( <expr><name>aux</name> != <name>null</name> &amp;&amp; !<call><name><name>data</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>aux</name>.<name>data</name></name></expr></argument>)</argument_list></call></expr> )</condition><block>{
            <expr_stmt><expr><name>aux</name> = <name><name>aux</name>.<name>next</name></name></expr>;</expr_stmt>
        }</block></while>
        <return>return <expr>new <call><name><name>ListLocation</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name><argument_list>( <argument><expr><name>aux</name></expr></argument> )</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Determines if the given object belongs to the structure
     * @param data Data object to be located
     * @return &lt;i&gt;true&lt;/i&gt;If the objects belongs to the structure, &lt;i&gt;false&gt;otherwise&lt;/i&gt;
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>boolean</name></type> <name>contains</name><parameter_list>( <param><decl><type><name>T</name></type> <name>data</name></decl></param> )</parameter_list><block>{
       <try>try<block>{
           <expr_stmt><expr><call><name>find</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call>.<call><name>get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           <return>return <expr>true</expr>;</return>
       }</block><catch>catch( <param><decl><type><name>NoSuchElementException</name></type> <name>e</name></decl></param> )<block>{
           <return>return <expr>false</expr>;</return>
       }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>T</name></type> <name>get</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>NoSuchElementException</name></expr></argument></throws><block>{
        <try>try<block>{
            <return>return <expr><name><name>head</name>.<name>data</name></name></expr>;</return>
        }</block><catch>catch( <param><decl><type><name>Exception</name></type> <name>e</name></decl></param> )<block>{
            <throw>throw <expr>new <call><name>NoSuchElementException</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>
}</block></class></unit>
