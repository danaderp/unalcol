<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\sort\OrderWrapper.java"><package>package <name><name>unalcol</name>.<name>sort</name></name>;</package>
<import>import <name><name>unalcol</name>.<name>reflect</name>.<name>service</name></name>.*;</import>
<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name>.<name>Method</name></name>;</import>

<comment type="javadoc">/**
 * &lt;p&gt;An order wrappper method. Used for classes that already define a compareTo method&lt;/p&gt;
 *
 * &lt;p&gt;Copyright: Copyright (c) 2010&lt;/p&gt;
 *
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 */</comment>
<class><specifier>public</specifier> class <name>OrderWrapper</name> <super><extends>extends <name>ServiceWrapper</name></extends> <implements>implements <name>Order</name></implements></super><block>{
    <comment type="javadoc">/**
     * Creates an order wrapped method for classes with the compareTo method
     */</comment>
    <constructor><specifier>public</specifier> <name>OrderWrapper</name><parameter_list>()</parameter_list><block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr>"compareTo"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Determines if one elements is less, equal or greather than other.
     * A value &lt; 0 indicates that one is less than two, a value = 0 indicates
     * that one is equal to two and a value &gt; 0 indicates that one is greather than two
     * @param one First object to be compared
     * @param two Second object to be compared
     * @return a value &lt; 0 if one &lt; two, 0 if one == two and &gt; 0 if one &gt; two.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>compare</name><parameter_list>( <param><decl><type><name>Object</name></type> <name>one</name></decl></param>, <param><decl><type><name>Object</name></type> <name>two</name></decl></param> )</parameter_list><block>{
        <try>try<block>{
           <decl_stmt><decl><type><name>Method</name></type> <name>m</name> =<init> <expr><call><name><name>one</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getMethod</name><argument_list>(<argument><expr><name>method_name</name></expr></argument>, <argument><expr><call><name><name>two</name>.<name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
           <return>return <expr>(<name>Integer</name>)<call><name><name>m</name>.<name>invoke</name></name><argument_list>(<argument><expr><name>one</name></expr></argument>, <argument><expr><name>two</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block><catch>catch( <param><decl><type><name>Exception</name></type> <name>e</name></decl></param> )<block>{
            <return>return <expr>(<call><name><name>one</name>.<name>toString</name></name><argument_list>()</argument_list></call>.<call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>two</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>)</expr>;</return>
        }</block></catch></try>
    }</block></function>
}</block></class></unit>
