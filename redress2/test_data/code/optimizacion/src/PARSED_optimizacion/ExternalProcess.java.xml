<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\process\ExternalProcess.java"><package>package <name><name>unalcol</name>.<name>process</name></name>;</package>
<import>import <name><name>java</name>.<name>io</name></name>.*;</import>

<comment type="javadoc">/**
 * &lt;p&gt;A Class for Executing External Process (commands).&lt;/p&gt;
 *
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 */</comment>
<class><specifier>public</specifier> class <name>ExternalProcess</name> <super><implements>implements <name>Runnable</name></implements></super><block>{
    <comment type="javadoc">/**
     * The external process (including arguments) to be executed
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name><index>[]</index></type> <name>command</name></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * The external process (including arguments) to be executed
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>commandLine</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * Java Process executing the command
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Process</name></type> <name>process</name></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * Flag that indicates if the process is running or not
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>is_running</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * External process status, returned by the os
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>status</name></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * Stream used for reporting the error messages generated by the external process
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>PrintStream</name></type> <name>err</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * Stream used for reporting the output messages generated by the external process
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>PrintStream</name></type> <name>out</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Created a External Process representing the command sent as parameter
     * @param command The external process (including arguments) to be executed
     */</comment>
    <constructor><specifier>public</specifier> <name>ExternalProcess</name><parameter_list>( <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>command</name></decl></param> )</parameter_list><block>{
        <expr_stmt><expr><name><name>this</name>.<name>command</name></name> = <name>command</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Created a External Process representing the command sent as parameter
     * @param commandLine The external process (including arguments) to be executed
     */</comment>
    <constructor><specifier>public</specifier> <name>ExternalProcess</name><parameter_list>( <param><decl><type><name>String</name></type> <name>commandLine</name></decl></param> )</parameter_list><block>{
        <expr_stmt><expr><name><name>this</name>.<name>commandLine</name></name> = <name>commandLine</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a External Process representing the command sent as parameter
     * @param commandLine The external process (including arguments) to be executed
     * @param out Stream used for reporting the output messages generated by the exteernal process
     * @param err Stream used for reporting the error messages generated by the exteernal process
     */</comment>
    <constructor><specifier>public</specifier> <name>ExternalProcess</name><parameter_list>( <param><decl><type><name>String</name></type> <name>commandLine</name></decl></param>, <param><decl><type><name>PrintStream</name></type> <name>out</name></decl></param>, <param><decl><type><name>PrintStream</name></type> <name>err</name></decl></param> )</parameter_list><block>{
        <expr_stmt><expr><name><name>this</name>.<name>commandLine</name></name> = <name>commandLine</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>err</name></name> = <name>err</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>out</name></name> = <name>out</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a External Process representing the command sent as parameter
     * @param command The external process (including arguments) to be executed
     * @param out Stream used for reporting the output messages generated by the external process
     * @param err Stream used for reporting the error messages generated by the external process
     */</comment>
    <constructor><specifier>public</specifier> <name>ExternalProcess</name><parameter_list>( <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>command</name></decl></param>, <param><decl><type><name>PrintStream</name></type> <name>out</name></decl></param>, <param><decl><type><name>PrintStream</name></type> <name>err</name></decl></param> )</parameter_list><block>{
        <expr_stmt><expr><name><name>this</name>.<name>command</name></name> = <name>command</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>err</name></name> = <name>err</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>out</name></name> = <name>out</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Executes the external process
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list><block>{
        <try>try<block>{
            <if>if<condition>( <expr><name>commandLine</name> == <name>null</name></expr> )</condition><then><block>{
                <expr_stmt><expr><name>process</name> = <call><name><name>Runtime</name>.<name>getRuntime</name></name><argument_list>()</argument_list></call>.<call><name>exec</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then><else>else<block>{
                <expr_stmt><expr><name>process</name> = <call><name><name>Runtime</name>.<name>getRuntime</name></name><argument_list>()</argument_list></call>.<call><name>exec</name><argument_list>(<argument><expr><name>commandLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><name>is_running</name> = true</expr>;</expr_stmt>
            <decl_stmt><decl><type><name>ProcessInputStream</name></type> <name>input</name> =<init> 
                    <expr>new <call><name>ProcessInputStream</name><argument_list>(<argument><expr><call><name><name>process</name>.<name>getInputStream</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ProcessInputStream</name></type> <name>error</name> =<init> 
                    <expr>new <call><name>ProcessInputStream</name><argument_list>(<argument><expr><call><name><name>process</name>.<name>getErrorStream</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>input</name>.<name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>error</name>.<name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>status</name> = <call><name><name>process</name>.<name>waitFor</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>is_running</name> = false</expr>;</expr_stmt>
        }</block><catch>catch( <param><decl><type><name>Exception</name></type> <name>e</name></decl></param> )<block>{
            <if>if<condition>( <expr><name>err</name> != <name>null</name></expr> )</condition><then><block>{
                <decl_stmt><decl><type><name>PrintStream</name></type> <name>temp</name> =<init> <expr><name><name>System</name>.<name>err</name></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>System</name>.<name>setErr</name></name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>e</name>.<name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>System</name>.<name>setErr</name></name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>status</name> = <name><name>Integer</name>.<name>MAX_VALUE</name></name></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * Gets the process status
     * @return The external process status that is returned by the os
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>status</name><parameter_list>()</parameter_list><block>{
        <return>return <expr><name>status</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Executes the external process sent as parameter
     * @param command The external process (including arguments) to be executed
     * @return &lt;i&gt;true&lt;/i&gt; if the command was executed without errors, &lt;i&gt;false&lt;/i&gt; otherwise
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>run</name><parameter_list>( <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>command</name></decl></param> )</parameter_list><block>{
        <decl_stmt><decl><type><name>ExternalProcess</name></type> <name>p</name> =<init> <expr>new <call><name>ExternalProcess</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>(<call><name><name>p</name>.<name>status</name></name><argument_list>()</argument_list></call>==0)</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Executes the external process sent as parameter
     * @param command The external process (including arguments) to be executed
     * @param out Stream used for reporting the output messages generated by the exteernal process
     * @param err Stream used for reporting the error messages generated by the exteernal process
     * @return &lt;i&gt;true&lt;/i&gt; if the command was executed without errors, &lt;i&gt;false&lt;/i&gt; otherwise
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>run</name><parameter_list>( <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>command</name></decl></param>, <param><decl><type><name>PrintStream</name></type> <name>out</name></decl></param>, <param><decl><type><name>PrintStream</name></type> <name>err</name></decl></param> )</parameter_list><block>{
        <decl_stmt><decl><type><name>ExternalProcess</name></type> <name>p</name> =<init> <expr>new <call><name>ExternalProcess</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>(<call><name><name>p</name>.<name>status</name></name><argument_list>()</argument_list></call>==0)</expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Executes the external process sent as parameter
     * @param command The external process (including arguments) to be executed
     * @param out Stream used for reporting the output messages generated by the exteernal process
     * @param err Stream used for reporting the error messages generated by the exteernal process
     * @return &lt;i&gt;true&lt;/i&gt; if the command was executed without errors, &lt;i&gt;false&lt;/i&gt; otherwise
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>run</name><parameter_list>( <param><decl><type><name>String</name></type> <name>command</name></decl></param>, <param><decl><type><name>PrintStream</name></type> <name>out</name></decl></param>, <param><decl><type><name>PrintStream</name></type> <name>err</name></decl></param> )</parameter_list><block>{
        <decl_stmt><decl><type><name>ExternalProcess</name></type> <name>p</name> =<init> <expr>new <call><name>ExternalProcess</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>(<call><name><name>p</name>.<name>status</name></name><argument_list>()</argument_list></call>==0)</expr>;</return>
    }</block></function>
    
}</block></class>
</unit>
