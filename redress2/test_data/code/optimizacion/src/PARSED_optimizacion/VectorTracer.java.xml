<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\tracer\VectorTracer.java"><package>package <name><name>unalcol</name>.<name>tracer</name></name>;</package>

<import>import <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>vector</name></name>.*;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Title: VectorTracer&lt;/p&gt;
 * &lt;p&gt;Description: A Tracer that stores the traced information into a Vector.&lt;/p&gt;
 * &lt;p&gt;Copyright: Copyright (c) 2009&lt;/p&gt;
 * &lt;p&gt;Company: Kunsamu&lt;/p&gt;
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 */</comment>
<class><specifier>public</specifier> class <name>VectorTracer</name> <super><extends>extends <name>Tracer</name></extends></super> <block>{
    <comment type="javadoc">/**
     * Objects added by the source
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Vector</name></type> <name>tracedObjects</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>resolution</name> =<init> <expr>1</expr></init></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>counter</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a new VectorTracer
     */</comment>
    <constructor><specifier>public</specifier> <name>VectorTracer</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>owner</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>( <argument><expr><name>owner</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tracedObjects</name> = new <call><name>Vector</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a new VectorTracer
     */</comment>
    <constructor><specifier>public</specifier> <name>VectorTracer</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>owner</name></decl></param>, <param><decl><type><name>int</name></type> <name>resolution</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>( <argument><expr><name>owner</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>resolution</name></name> = <name>resolution</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>tracedObjects</name> = new <call><name>Vector</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Adds a new Object into the Tracer
     * @param obj Traced information to be added
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if<condition>( <expr><name>tracing</name></expr> )</condition><then><block>{
            <if>if<condition>( <expr><name>resolution</name> == 1</expr> )</condition><then><block>{
                <expr_stmt><expr><call><name><name>tracedObjects</name>.<name>add</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then><else>else<block>{
                <if>if<condition>( <expr><name>counter</name> == 0</expr> )</condition><then><block>{
                    <expr_stmt><expr><call><name><name>tracedObjects</name>.<name>add</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>    
                <expr_stmt><expr><name>counter</name> = (<name>counter</name> + 1)%<name>resolution</name></expr>;</expr_stmt>
            }</block></else></if>    
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the traced information
     * @return A Vector of objects representing the traced information
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>Object</name></type> <name>get</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>tracedObjects</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Cleans the traced information
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>clean</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>tracedObjects</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tracedObjects</name> = <name>null</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>counter</name> = 0</expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Closes the tracer (does nothing)
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <block>{}</block></function>
}</block></class></unit>
