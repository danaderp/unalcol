<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\types\real\StatisticsWithMedian.java"><comment type="block">/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */</comment>
<package>package <name><name>unalcol</name>.<name>types</name>.<name>real</name></name>;</package>

<import>import <name><name>unalcol</name>.<name>types</name>.<name>real</name>.<name>array</name>.<name>DoubleArray</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>real</name>.<name>array</name>.<name>DoubleArraySort</name></name>;</import>

<comment type="javadoc">/**
 *
 * @author jgomez
 */</comment>
<class><specifier>public</specifier> class <name>StatisticsWithMedian</name> <super><extends>extends <name>Statistics</name></extends></super><block>{
    <decl_stmt><decl><type><specifier>public</specifier> <name>double</name></type> <name>median</name></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * Creates an empty statistical information
     */</comment>
    <constructor><specifier>public</specifier> <name>StatisticsWithMedian</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <comment type="javadoc">/**
     * Computes the statistical information of the given array of doubles
     * @param x Array to be statistically analyzed
     */</comment>
    <constructor><specifier>public</specifier> <name>StatisticsWithMedian</name><parameter_list>(<param><decl><type><name><name>double</name><index>[]</index></name></type> <name>x</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>( <argument><expr><name>x</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>compute_median</name><argument_list>(<argument><expr><call><name><name>x</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Computes the statistical information of the given column of a double matrix
     * @param x Matrix to be statistically analyzed
     * @param c column to be analyzed
     */</comment>
    <constructor><specifier>public</specifier> <name>StatisticsWithMedian</name><parameter_list>(<param><decl><type><name><name>double</name><index>[]</index><index>[]</index></name></type> <name>x</name></decl></param>, <param><decl><type><name>int</name></type> <name>c</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>( <argument><expr><name>x</name></expr></argument>, <argument><expr><name>c</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>y</name> =<init> <expr>new <name><name>double</name><index>[<expr><name><name>x</name>.<name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for( <init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name><name>y</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> )<block>{
            <expr_stmt><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>x</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name>compute_median</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Computes the statistical information of the given row of a double matrix
     * @param r Row to be analyzed
     * @param x Matrix to be statistically analyzed
     */</comment>
    <constructor><specifier>public</specifier> <name>StatisticsWithMedian</name><parameter_list>(<param><decl><type><name>int</name></type> <name>r</name></decl></param>, <param><decl><type><name><name>double</name><index>[]</index><index>[]</index></name></type> <name>x</name></decl></param> )</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>( <argument><expr><name>r</name></expr></argument>, <argument><expr><name>x</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>compute_median</name><argument_list>( <argument><expr><name><name>x</name><index>[<expr><name>r</name></expr>]</index></name>.<call><name>clone</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <function><type><specifier>private</specifier> <name>void</name></type> <name>compute_median</name><parameter_list>( <param><decl><type><name><name>double</name><index>[]</index></name></type> <name>x</name></decl></param>)</parameter_list><block>{
        <expr_stmt><expr><call><name><name>DoubleArraySort</name>.<name>merge</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
        <decl_stmt><decl><type><name>int</name></type> <name>n</name> =<init> <expr><name><name>x</name>.<name>length</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>median</name> = ((<name>n</name>%2)==0)?(<name><name>x</name><index>[<expr><name>n</name>/2</expr>]</index></name>+<name><name>x</name><index>[<expr><name>n</name>/2-1</expr>]</index></name>)/2.0:<name><name>x</name><index>[<expr><name>n</name>/2</expr>]</index></name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Obtains the statistical information in an array of doubles format (min, max, average, variance, deviation)
     * @return Statistical information in an array of doubles format
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>double</name><index>[]</index></type> <name>get</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>values</name> =<init> <expr>new <name><name>double</name><index>[<expr>6</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr>0</expr>]</index></name> = <name>min</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr>1</expr>]</index></name> = <name>max</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr>2</expr>]</index></name> = <name>median</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr>3</expr>]</index></name> = <name>avg</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr>4</expr>]</index></name> = <name>variance</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr>5</expr>]</index></name> = <name>deviation</name></expr>;</expr_stmt>
        <return>return <expr><name>values</name></expr>;</return>
    }</block></function>    
}</block></class>
</unit>
