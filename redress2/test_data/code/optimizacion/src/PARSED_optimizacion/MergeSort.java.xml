<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\sort\algorithm\MergeSort.java"><package>package <name><name>unalcol</name>.<name>sort</name>.<name>algorithm</name></name>;</package>

<import>import <name><name>unalcol</name>.<name>sort</name></name>.*;</import>

<comment type="javadoc">/**
 * &lt;p&gt;MergeSort algorithm&lt;/p&gt;
 *
 * &lt;p&gt;Copyright: Copyright (c) 2010&lt;/p&gt;
 * 
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 */</comment>
<class><specifier>public</specifier> class <name><name>MergeSort</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name> <super><extends>extends <name><name>Sort</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></extends></super> <block>{

    <comment type="javadoc">/**
     * InsertionSort for sorting an array of less than 8 elements
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>InsertionSort</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>insertion</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Default constructor
     */</comment>
    <constructor><specifier>public</specifier> <name>MergeSort</name><parameter_list>()</parameter_list><block>{}</block></constructor>

    <comment type="javadoc">/**
     * Creates a merge sort algorithm using the given order
     * @param order Order used for sorting the objects
     */</comment>
    <constructor><specifier>public</specifier> <name>MergeSort</name><parameter_list>(<param><decl><type><name><name>Order</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>order</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a merge sort algorithm using the given order and overwriting array flag
     * @param order Order used for sorting the objects
     * @param overwrite If the array should be overwrited or not
     */</comment>
    <constructor><specifier>public</specifier> <name>MergeSort</name><parameter_list>(<param><decl><type><name><name>Order</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>order</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>overwrite</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>order</name></expr></argument>, <argument><expr><name>overwrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Sorts a portion of the array of objects according to the given order (it does not creates a new array)
     * @param a Array of objects to be sorted
     * @param start Initial position in the array to be sorted
     * @param end Final position in the array to be sorte
     * @return &lt;i&gt;true&lt;/i&gt; If the sorting process was done without fails, &lt;i&gt;false&lt;/i&gt; otherwise
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>apply</name><parameter_list>(<param><decl><type><name><name>T</name><index>[]</index></name></type> <name>a</name></decl></param>, <param><decl><type><name>int</name></type> <name>start</name></decl></param>, <param><decl><type><name>int</name></type> <name>end</name></decl></param>)</parameter_list> <block>{
       <if>if<condition>( <expr><call><name>getOrder</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> != <name>null</name></expr> )</condition><then><block>{
           <expr_stmt><expr><name>insertion</name> = new <call><name>InsertionSort</name><argument_list>(<argument><expr><name>order</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <decl_stmt><decl><type><name>int</name></type> <name>i</name>=<init><expr><name>start</name></expr></init></decl>;</decl_stmt>
            <while>while<condition>( <expr><name>i</name>&lt;<name>end</name>-1 &amp;&amp; <call><name><name>order</name>.<name>compare</name></name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><name>i</name>+1</expr>]</index></name></expr></argument>)</argument_list></call> &lt;= 0</expr> )</condition><block>{ <expr_stmt><expr><name>i</name>++</expr>;</expr_stmt> }</block></while>
            <if>if<condition>( <expr><name>i</name>&lt;<name>end</name>-1</expr> )</condition><then><block>{
                <decl_stmt><decl><type><name>int</name></type> <name>n</name> =<init> <expr><name>end</name> - <name>start</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>T</name><index>[]</index></type> <name>ca</name> =<init> <expr>(<name><name>T</name><index>[]</index></name>)new <name><name>Object</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>ca</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>this</name>.<name>rec_apply</name></name><argument_list>( <argument><expr><name>ca</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>ca</name></expr></argument>,<argument><expr>0</expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>start</name></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
       <return>return <expr>false</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Recursive merge sort method
     * @param a Array to be sorted
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>rec_apply</name><parameter_list>(<param><decl><type><name><name>T</name><index>[]</index></name></type> <name>a</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>n</name> =<init> <expr><name><name>a</name>.<name>length</name></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>n</name> &gt; 7</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>nizq</name> =<init> <expr><name>n</name> / 2</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>nder</name> =<init> <expr><name>n</name> - <name>nizq</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>T</name><index>[]</index></type> <name>aIzq</name> =<init> <expr>(<name><name>T</name><index>[]</index></name>)new <name><name>Object</name><index>[<expr><name>nizq</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>T</name><index>[]</index></type> <name>aDer</name> =<init> <expr>(<name><name>T</name><index>[]</index></name>)new <name><name>Object</name><index>[<expr><name>nder</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>aIzq</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>nizq</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>nizq</name></expr></argument>, <argument><expr><name>aDer</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>nder</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>rec_apply</name></name><argument_list>(<argument><expr><name>aIzq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>rec_apply</name></name><argument_list>(<argument><expr><name>aDer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>k</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>izq</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>der</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>izq</name> &lt; <name>nizq</name> &amp;&amp; <name>der</name> &lt; <name>nder</name> &amp;&amp; <name>continueFlag</name></expr>)</condition> <block>{
                <if>if <condition>(<expr><call><name><name>order</name>.<name>compare</name></name><argument_list>(<argument><expr><name><name>aIzq</name><index>[<expr><name>izq</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>aDer</name><index>[<expr><name>der</name></expr>]</index></name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>a</name><index>[<expr><name>k</name></expr>]</index></name> = <name><name>aIzq</name><index>[<expr><name>izq</name></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>izq</name>++</expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><name><name>a</name><index>[<expr><name>k</name></expr>]</index></name> = <name><name>aDer</name><index>[<expr><name>der</name></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>der</name>++</expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr><name>k</name>++</expr>;</expr_stmt>
            }</block></while> <while>while <condition>(<expr><name>izq</name> &lt; <name>nizq</name> &amp;&amp; <name>continueFlag</name></expr>)</condition> <block>{
                <expr_stmt><expr><name><name>a</name><index>[<expr><name>k</name></expr>]</index></name> = <name><name>aIzq</name><index>[<expr><name>izq</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>izq</name>++</expr>;</expr_stmt>
                <expr_stmt><expr><name>k</name>++</expr>;</expr_stmt>
            }</block></while> <while>while <condition>(<expr><name>der</name> &lt; <name>nder</name> &amp;&amp; <name>continueFlag</name></expr>)</condition> <block>{
                <expr_stmt><expr><name><name>a</name><index>[<expr><name>k</name></expr>]</index></name> = <name><name>aDer</name><index>[<expr><name>der</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>der</name>++</expr>;</expr_stmt>
                <expr_stmt><expr><name>k</name>++</expr>;</expr_stmt>
            }</block></while>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>insertion</name>.<name>apply</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>
}</block></class></unit>
