<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\types\collection\vector\SortedVectorInsert.java"><package>package <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>vector</name></name>;</package>


<import>import <name><name>unalcol</name>.<name>sort</name></name>.*;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Title: SortedInsert&lt;/p&gt;
 *
 * &lt;p&gt;Description: Insert operation for sorted vectors&lt;/p&gt;
 *
 * &lt;p&gt;Copyright: Copyright (c) 2009&lt;/p&gt;
 *
 * &lt;p&gt;Company: Kunsamu&lt;/p&gt;
 *
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 */</comment>
<class><specifier>public</specifier> class <name><name>SortedVectorInsert</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name> <block>{
    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>SortedVectorSearch</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>search</name> =<init> <expr>new <call><name><name>SortedVectorSearch</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <constructor><specifier>public</specifier> <name>SortedVectorInsert</name><parameter_list>()</parameter_list> <block>{}</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>apply</name><parameter_list>( <param><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>set</name></decl></param>, <param><decl><type><name>T</name></type> <name>x</name></decl></param>, <param><decl><type><name><name>Order</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>order</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>multiSet</name></decl></param> )</parameter_list><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>pos</name> =<init> <expr><call><name><name>search</name>.<name>findRight</name></name><argument_list>(<argument><expr><name>set</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>order</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if<condition>( <expr><name>pos</name> &gt; 0</expr> )</condition><then><block>{
          <if>if<condition>( <expr><name>multiSet</name> || <call><name><name>order</name>.<name>compare</name></name><argument_list>( <argument><expr><call><name><name>set</name>.<name>get</name></name><argument_list>(<argument><expr><name>pos</name>-1</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>x</name></expr></argument> )</argument_list></call>!=0</expr> )</condition><then><block>{
              <if>if<condition>( <expr><name>pos</name> == <call><name><name>set</name>.<name>size</name></name><argument_list>()</argument_list></call></expr> )</condition><then><block>{ <expr_stmt><expr><call><name><name>set</name>.<name>add</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></then><else>else<block>{ <expr_stmt><expr><call><name><name>set</name>.<name>add</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></else></if>
          }</block></then></if>
        }</block></then><else>else<block>{
          <expr_stmt><expr><call><name><name>set</name>.<name>add</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>
}</block></class>
</unit>
