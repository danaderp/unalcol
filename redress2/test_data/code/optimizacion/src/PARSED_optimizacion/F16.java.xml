<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\optimization\testbed\real\lsgo_benchmark\F16.java"><package>package <name><name>unalcol</name>.<name>optimization</name>.<name>testbed</name>.<name>real</name>.<name>lsgo_benchmark</name></name>;</package>
<comment type="block">/*
 * Copyright (c) 2009 Thomas Weise for NICAL
 * http://www.it-weise.de/
 * tweise@gmx.de
 *
 * GNU LESSER GENERAL PUBLIC LICENSE (Version 2.1, February 1999)
 */</comment>

<comment type="javadoc">/**
 * &lt;p&gt;
 * The D/m-group group Shifted and m-rotated Ackleyï¿½s Function: F16.
 * &lt;/p&gt;
 * &lt;p&gt;
 * This function is not &lt;warning&gt;not threadsafe&lt;/warning&gt; because it uses
 * internal temporary variables. Therefore, you should always use each
 * instance of this function for one single {#link java.lang.Thread} only.
 * You may clone or serialize function instances to use multiple threads.
 * &lt;p&gt;
 * 
 * @author Thomas Weise
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>F16</name> <super><extends>extends <name>ShiftedPermutatedRotatedFunction</name></extends></super> <block>{

  <comment type="javadoc">/** the serial version id */</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>1</expr></init></decl>;</decl_stmt>

  <comment type="javadoc">/** the maximum value */</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>double</name></type> <name>MAX</name> =<init> <expr>32d</expr></init></decl>;</decl_stmt>

  <comment type="javadoc">/** the minimum value */</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>double</name></type> <name>MIN</name> =<init> <expr>(-<name>MAX</name>)</expr></init></decl>;</decl_stmt>

  <comment type="javadoc">/**
   * Create a new D/m-group group Shifted and m-rotated Ackleyï¿½s Function
   * 
   * @param o
   *          the shifted global optimum
   * @param p
   *          the permutation vector
   * @param m
   *          the rotation matrix
   */</comment>
  <constructor><specifier>public</specifier> <name>F16</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>double</name><index>[]</index></name></type> <name>o</name></decl></param>, <param><decl><type><specifier>final</specifier> <name><name>int</name><index>[]</index></name></type> <name>p</name></decl></param>, <param><decl><type><specifier>final</specifier> <name><name>double</name><index>[]</index></name></type> <name>m</name></decl></param>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>MIN</name></expr></argument>, <argument><expr><name>MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <comment type="javadoc">/**
   * Create a default instance of F16.
   * 
   * @param r
   *          the randomizer to use
   */</comment>
  <constructor><specifier>public</specifier> <name>F16</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Randomizer</name></type> <name>r</name></decl></param>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><call><name><name>r</name>.<name>createShiftVector</name></name><argument_list>(<argument><expr><name><name>Defaults</name>.<name>DEFAULT_DIM</name></name></expr></argument>, <argument><expr><name>MIN</name></expr></argument>, <argument><expr><name>MAX</name></expr></argument>)</argument_list></call></expr></argument>,<comment type="line">//</comment>
        <argument><expr><call><name><name>r</name>.<name>createPermVector</name></name><argument_list>(<argument><expr><name><name>Defaults</name>.<name>DEFAULT_DIM</name></name></expr></argument>)</argument_list></call></expr></argument>,<comment type="line">//</comment>
        <argument><expr><call><name><name>r</name>.<name>createRotMatrix1D</name></name><argument_list>(<argument><expr><name><name>Defaults</name>.<name>DEFAULT_M</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//</comment>
  }</block></constructor>

  <comment type="javadoc">/**
   * Create a default instance of F16.
   */</comment>
  <constructor><specifier>public</specifier> <name>F16</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><call><name><name>Defaults</name>.<name>getRandomizer</name></name><argument_list>(<argument><expr><name><name>F16</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <comment type="javadoc">/**
   * Compute the value of the elliptic function. This function takes into
   * consideration only the first {{@link #getDimension()} elements of the
   * candidate vector.
   * 
   * @param x
   *          the candidate solution vector
   * @return the value of the function
   */</comment>
  <comment type="line">// @Override</comment>
  <function><type><specifier>public</specifier> <specifier>final</specifier> <name>double</name></type> <name>compute</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>double</name><index>[]</index></name></type> <name>x</name></decl></param>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>max</name>, <name>gs</name>, <name>d</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>s</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name>, <name>e</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>gs</name> = <name><name>this</name>.<name>m_matDim</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>d</name> = <name><name>this</name>.<name>m_dimension</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>max</name> = (<name>d</name> / <name>gs</name>)</expr>;</expr_stmt>

    <expr_stmt><expr><name>s</name> = 0d</expr>;</expr_stmt>
    <expr_stmt><expr><name>e</name> = 0</expr>;</expr_stmt>
    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>max</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
      <expr_stmt><expr><name>s</name> += <call><name><name>Kernel</name>.<name>shiftedPermRotAckley</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>this</name>.<name>m_o</name></name></expr></argument>, <argument><expr><name><name>this</name>.<name>m_p</name></name></expr></argument>, <argument><expr><name><name>this</name>.<name>m_m</name></name></expr></argument>,<comment type="line">//</comment>
          <argument><expr><name>e</name></expr></argument>, <argument><expr><name>gs</name></expr></argument>, <argument><expr><name><name>this</name>.<name>m_tmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//</comment>
      <expr_stmt><expr><name>e</name> += <name>gs</name></expr>;</expr_stmt>
    }</block></for>

    <return>return <expr>(<name>s</name> <comment type="block">/*
               * + Kernel.shiftedPermAckley(x, this.m_o, this.m_p, e,
               * this.m_dimension - e)
               */</comment>)</expr>;</return>
  }</block></function>

  <comment type="javadoc">/**
   * Obtain the full name of the benchmark function (according to
   * &amp;quot;Benchmark Functions for the CECï¿½2010 Special Session and
   * Competition on Large-Scale Global Optimization&amp;quot; Ke Tang, Xiaodong
   * Li, P. N. Suganthan, Zhenyu Yang, and Thomas Weise CEC'2010)
   * 
   * @return the full name of the benchmark function
   */</comment>
  <comment type="line">// @Override</comment>
  <function><type><specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>getFullName</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr>"D/m-group group Shifted and m-rotated Ackleyï¿½s Function"</expr>;</return><comment type="line">//$NON-NLS-1$</comment>
  }</block></function>

  <comment type="javadoc">/**
   * Obtain the short name of the benchmark function (according to
   * &amp;quot;Benchmark Functions for the CECï¿½2010 Special Session and
   * Competition on Large-Scale Global Optimization&amp;quot; Ke Tang, Xiaodong
   * Li, P. N. Suganthan, Zhenyu Yang, and Thomas Weise CEC'2010)
   * 
   * @return the short name of the benchmark function
   */</comment>
  <comment type="line">// @Override</comment>
  <function><type><specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>getShortName</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr>"F16"</expr>;</return> <comment type="line">//$NON-NLS-1$</comment>
  }</block></function>
}</block></class>
</unit>
