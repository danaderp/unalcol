<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\tracer\TracerProvider.java"><package>package <name><name>unalcol</name>.<name>tracer</name></name>;</package>

<import>import <name><name>unalcol</name>.<name>reflect</name>.<name>util</name></name>.*;</import>
<import>import <name><name>unalcol</name>.<name>reflect</name>.<name>service</name></name>.*;</import>


<comment type="javadoc">/**
 * &lt;p&gt;Title: Tracing&lt;/p&gt;
 *
 * &lt;p&gt;Description: Unalcol class for maintaining the set of tracers for given objects&lt;/p&gt;
 *
 * &lt;p&gt;Copyright: Copyright (c) 2009&lt;/p&gt;
 *
 * &lt;p&gt;Company: Kunsamu&lt;/p&gt;
 *
 * @author Jonatan Gomez
 * @version 1.0
 */</comment>
<class><specifier>public</specifier> class <name>TracerProvider</name><block>{

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Tracer</name><index>[]</index></type> <name>get</name><parameter_list>( <param><decl><type><name>Object</name></type> <name>obj</name></decl></param> )</parameter_list><block>{
        <try>try<block>{
           <decl_stmt><decl><type><name>Service</name><index>[]</index></type> <name>services</name> =<init> <expr><call><name><name>ReflectUtil</name>.<name>getProvider</name></name><argument_list>()</argument_list></call>.<call><name>owned_services</name><argument_list>(<argument><expr><name><name>Tracer</name>.<name><name/></name></name>class</expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
           <decl_stmt><decl><type><name>Tracer</name><index>[]</index></type> <name>tracers</name> =<init> <expr>new <name><name>Tracer</name><index>[<expr><name><name>services</name>.<name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
           <for>for( <init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name><name>services</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> )<block>{
               <expr_stmt><expr><name><name>tracers</name><index>[<expr><name>i</name></expr>]</index></name> = (<name>Tracer</name>)<name><name>services</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
           }</block></for>
           <return>return <expr><name>tracers</name></expr>;</return>
        }</block><catch>catch( <param><decl><type><name>Exception</name></type> <name>e</name></decl></param> )<block>{
            <expr_stmt><expr><call><name><name>e</name>.<name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <return>return <expr>new <name><name>Tracer</name><index>[<expr>0</expr>]</index></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a data object to each tracer associated to a given object
     * @param obj Object being traced
     * @param data Object to be added to each tracer associated to the object
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>trace</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>, <param><decl><type><name>Object</name></type> <name>data</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Tracer</name><index>[]</index></type> <name>services</name> =<init> <expr><call><name>get</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for( <init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name><name>services</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> )<block>{
            <expr_stmt><expr><name><name>services</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>add</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Closes each tracer associated to a given object
     * @param obj Object being traced
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>close</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Tracer</name><index>[]</index></type> <name>services</name> =<init> <expr><call><name>get</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for( <init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name><name>services</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> )<block>{
            <expr_stmt><expr><name><name>services</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Cleans each tracer associated to a given object
     * @param obj Object being traced
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>clean</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Tracer</name><index>[]</index></type> <name>services</name> =<init> <expr><call><name>get</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for( <init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name><name>services</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> )<block>{
            <expr_stmt><expr><name><name>services</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>clean</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>
    
}</block></class></unit>
