<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\optimization\testbed\binary\MaxOnes.java"><package>package <name><name>unalcol</name>.<name>optimization</name>.<name>testbed</name>.<name>binary</name></name>;</package>

<import>import <name><name>unalcol</name>.<name>optimization</name></name>.*;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>bitarray</name>.<name>BitArray</name></name>;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Title: MaxOnes&lt;/p&gt;
 * &lt;p&gt;Description: The OptimizationFunction of a binary array is the number of ones in the array&lt;/p&gt;
 * &lt;p&gt;Copyright:    Copyright (c) 2010/p&gt;
 * &lt;p&gt;Company: Kunsamu&lt;/p&gt;
 * @author Jonatan Gomez
 * @version 1.0
 *
 */</comment>

<class><specifier>public</specifier> class <name>MaxOnes</name> <super><extends>extends <name><name>OptimizationFunction</name><argument_list>&lt;<argument><name>BitArray</name></argument>&gt;</argument_list></name></extends></super><block>{

  <comment type="javadoc">/**
   * Evaluate the max ones OptimizationFunction function over the binary array given
   * @param x Binary Array to be evaluated
   * @return the OptimizationFunction function over the binary array
   */</comment>
  <function><type><specifier>public</specifier> <name>Double</name></type> <name>apply</name><parameter_list>( <param><decl><type><name>BitArray</name></type> <name>x</name></decl></param> )</parameter_list><block>{
    <decl_stmt><decl><type><name>double</name></type> <name>f</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
    <for>for( <init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<call><name><name>x</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> )<block>{
      <if>if<condition>( <expr><call><name><name>x</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr> )</condition><then><block>{ <expr_stmt><expr><name>f</name>++</expr>;</expr_stmt> }</block></then></if>
    }</block></for>
    <return>return <expr><name>f</name></expr>;</return>
  }</block></function>

}</block></class>
</unit>
