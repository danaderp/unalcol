<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\algorithm\iterative\IterativeAlgorithm.java"><package>package <name><name>unalcol</name>.<name>algorithm</name>.<name>iterative</name></name>;</package>

<import>import <name><name>unalcol</name>.<name>math</name>.<name>function</name>.<name>Function</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>algorithm</name></name>.*;</import>
<import>import <name><name>unalcol</name>.<name>math</name>.<name>logic</name>.<name>Predicate</name></name>;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Abstract version of an iterative algorithm.&lt;/p&gt;
 *
 * &lt;p&gt;Copyright: Copyright (c) 2010&lt;/p&gt;
 * 
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 */</comment>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name><name>IterativeAlgorithm</name><argument_list>&lt;<argument><name>I</name></argument>, <argument><name>O</name></argument>&gt;</argument_list></name> <super><extends>extends <name><name>Algorithm</name><argument_list>&lt;<argument><name>I</name></argument>, <argument><name>O</name></argument>&gt;</argument_list></name></extends></super> <block>{

    <comment type="javadoc">/**
     * The continuation condition
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>Predicate</name><argument_list>&lt;<argument><name><name>Function</name><argument_list>&lt;<argument><name>I</name></argument>, <argument><name>O</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>condition</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Delay between each iteration (in millisecs)
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>delay</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructor: Creates an iterative algorithm with the given continuation condition
     * @param condition  The algorithm stop condition (the algorithm is executed
     * until the condition is false)
     * @param delay Elapsed time between iterations (millisecs)
     */</comment>
    <constructor><specifier>public</specifier> <name>IterativeAlgorithm</name><parameter_list>(<param><decl><type><name><name>Predicate</name><argument_list>&lt;<argument><name><name>Function</name><argument_list>&lt;<argument><name>I</name></argument>, <argument><name>O</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>condition</name></decl></param>, <param><decl><type><name>long</name></type> <name>delay</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>condition</name></name> = <name>condition</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>delay</name></name> = <name>delay</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructor: Creates an iterative algorithm with the given continuation condition
     * @param condition  The algorithm stop condition (the algorithm is executed
     * until the condition is false)
     */</comment>
    <constructor><specifier>public</specifier> <name>IterativeAlgorithm</name><parameter_list>(<param><decl><type><name><name>Predicate</name><argument_list>&lt;<argument><name><name>Function</name><argument_list>&lt;<argument><name>I</name></argument>, <argument><name>O</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>condition</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>condition</name></name> = <name>condition</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructor: Creates an iterative algorithm without the continuation condition
     * useful for running the algorithm iteration by iteration.
     */</comment>
    <constructor><specifier>public</specifier> <name>IterativeAlgorithm</name><parameter_list>()</parameter_list> <block>{}</block></constructor>

    <comment type="javadoc">/**
     * Inits the algorithm. Useful to initialize internal variables
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>init</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>condition</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>condition</name>.<name>init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>continueFlag</name> = true</expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Determines the output produced by the iterative algorithm if no iterations are performed
     * @param input The algorithm input
     * @return O The output produced by the iterative algorithm if no iterations are performed
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>O</name></type> <name>nonIterOutput</name><parameter_list>(<param><decl><type><name>I</name></type> <name>input</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="javadoc">/**
     * An algorithm's iteration
     * @param k The current algorithm's iteration
     * @param input Current input
     * @param output Current output
     * @return The output of the algorithm after k iterations
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>O</name></type> <name>iteration</name><parameter_list>(<param><decl><type><name>int</name></type> <name>k</name></decl></param>, <param><decl><type><name>I</name></type> <name>input</name></decl></param>, <param><decl><type><name>O</name></type> <name>output</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="javadoc">/**
     * Updates the input according to the previous input and output
     * @param input Current input
     * @param output Current output
     * @return New input used by the iterative algorithm
     */</comment>
    <function><type><specifier>protected</specifier> <name>I</name></type> <name>update</name><parameter_list>(<param><decl><type><name>I</name></type> <name>input</name></decl></param>, <param><decl><type><name>O</name></type> <name>output</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name>input</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>sleep</name><parameter_list>()</parameter_list><block>{
        <if>if <condition>(<expr><name>delay</name> &gt; 0</expr>)</condition><then> <block>{
            <try>try <block>{
                <expr_stmt><expr><call><name><name>Thread</name>.<name>sleep</name></name><argument_list>(<argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
                <expr_stmt><expr><call><name><name>e</name>.<name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></then></if>        
    }</block></function>
    
    <comment type="javadoc">/**
     * Executes the iterative algorithm. Keeps a vector with the results of each
     * iteration of the algorithm
     * @param input Input of the algorithm
     * @return Output produced by the algorithm
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>O</name></type> <name>apply</name><parameter_list>(<param><decl><type><name>I</name></type> <name>input</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>output</name> = <call><name>nonIterOutput</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>condition</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>k</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>condition</name>.<name>evaluate</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call> &amp;&amp; <name>continueFlag</name></expr>)</condition> <block>{
                <expr_stmt><expr><call><name>sleep</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>output</name> = <call><name>iteration</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>input</name> = <call><name>update</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>k</name>++</expr>;</expr_stmt>
            }</block></while>
        }</block></then></if>
        <return>return <expr><name>output</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the current iterative algorithm condition
     * @return The current iterative algorithm condition
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Predicate</name><argument_list>&lt;<argument><name><name>Function</name><argument_list>&lt;<argument><name>I</name></argument>, <argument><name>O</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getCondition</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>condition</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the iterative algorithm condition
     * @param condition  The algorithm condition (the algorithms is executed
     * until the condition is false)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCondition</name><parameter_list>(<param><decl><type><name><name>Predicate</name><argument_list>&lt;<argument><name><name>Function</name><argument_list>&lt;<argument><name>I</name></argument>, <argument><name>O</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>condition</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>condition</name></name> = <name>condition</name></expr>;</expr_stmt>
    }</block></function>
}</block></class></unit>
