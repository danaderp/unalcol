<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\optimization\testbed\real\RealFitness.java"><package>package <name><name>unalcol</name>.<name>optimization</name>.<name>testbed</name>.<name>real</name></name>;</package>

<import>import <name><name>unalcol</name>.<name>optimization</name></name>.*;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Title: RealFitness&lt;/p&gt;
 * &lt;p&gt;Description: Abstract OptimizationFunction function for real values (one dimension)&lt;/p&gt;
 * &lt;p&gt;Copyright: Copyright (c) 2010&lt;/p&gt;
 * &lt;p&gt;Company: Kunsamu&lt;/p&gt;
 * @author Jonatan Gomez
 * @version 1.0
 */</comment>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>RealFitness</name> <super><extends>extends <name><name>OptimizationFunction</name><argument_list>&lt;<argument><name>Double</name></argument>&gt;</argument_list></name></extends></super><block>{

  <comment type="javadoc">/**
   * Evaluates the OptimizationFunction function in the given real value
   * @param x value used for evaluating the OptimizationFunction function
   * @return The OptimizationFunction function value for the given value
   */</comment>
  <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>double</name></type> <name>apply</name><parameter_list>(<param><decl><type><name>double</name></type> <name>x</name></decl></param>)</parameter_list>;</function_decl>

  <comment type="javadoc">/**
   * Evaluates the OptimizationFunction funtion in the first component of the RealVector
   * @param x RealVector used for sending the real value to be evaluated
   * @return The OptimizationFunction function value for the given value (first component of the RealVector)
   */</comment>
  <function><type><specifier>public</specifier> <name>Double</name></type> <name>apply</name><parameter_list>(<param><decl><type><name>Double</name></type> <name>x</name></decl></param>)</parameter_list> <block>{
    <return>return <expr><call><name><name>this</name>.<name>apply</name></name><argument_list>( <argument><expr><call><name><name>x</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</return>
  }</block></function>
}</block></class>
</unit>
