<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\optimization\testbed\real\lsgo_benchmark\Defaults.java"><package>package <name><name>unalcol</name>.<name>optimization</name>.<name>testbed</name>.<name>real</name>.<name>lsgo_benchmark</name></name>;</package>

<comment type="block">/*
 * Copyright (c) 2009 Thomas Weise for NICAL
 * http://www.it-weise.de/
 * tweise@gmx.de
 *
 * GNU LESSER GENERAL PUBLIC LICENSE (Version 2.1, February 1999)
 */</comment>


<comment type="javadoc">/**
 * This internal class holds the default values for everything
 * 
 * @author Thomas Weise
 */</comment>
<class><specifier>final</specifier> class <name>Defaults</name> <block>{

  <comment type="javadoc">/** the default dimension */</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DEFAULT_DIM</name> =<init> <expr>100</expr></init></decl>;</decl_stmt>

  <comment type="javadoc">/** the default m */</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>DEFAULT_M</name> =<init> <expr>50</expr></init></decl>;</decl_stmt>

  <comment type="javadoc">/**
   * Obtain the randomizer
   * 
   * @param c
   *          the class to get the randomizer for
   * @return the randomizer
   */</comment>
  <function><type><specifier>static</specifier> <specifier>final</specifier> <name>Randomizer</name></type> <name>getRandomizer</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Class</name></type><comment type="block">/* &lt;?&gt; */</comment><name>c</name></decl></param>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>long</name></type> <name>l</name></decl>;</decl_stmt>

    <try>try <block>{
      <expr_stmt><expr><name>l</name> = <call><name><name>Long</name>.<name>parseLong</name></name><argument_list>(<argument><expr><call><name><name>c</name>.<name>getSimpleName</name></name><argument_list>()</argument_list></call>.<call><name>substring</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block> <catch>catch (<param><decl><type><name>Throwable</name></type> <name>tt</name></decl></param>) <block>{
      <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>tt</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>

    <return>return <expr>new <call><name>Randomizer</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <comment type="line">// /** the full directory path of this package */</comment>
  <comment type="line">// private static final String FULL_DIR = Kernel.class.getPackage()</comment>
  <comment type="line">// .getName().replace('.', File.pathSeparatorChar);</comment>
  <comment type="line">//</comment>
  <comment type="line">// /** the rotation matrix suffix */</comment>
  <comment type="line">//  private static final String ROT_MAT_SUFFIX = "_M.txt"; //$NON-NLS-1$</comment>
  <comment type="line">//</comment>
  <comment type="line">// /** the shift vector suffix */</comment>
  <comment type="line">//  private static final String SHIFT_VECTOR_SUFFIX = "_o.txt"; //$NON-NLS-1$</comment>
  <comment type="line">//</comment>
  <comment type="line">// /** the permutation vector suffix */</comment>
  <comment type="line">//  private static final String PERM_VECTOR_SUFFIX = "_P.txt"; //$NON-NLS-1$</comment>
  <comment type="line">//</comment>
  <comment type="line">// /**</comment>
  <comment type="line">// * Obtain the default rotation matrix for class c</comment>
  <comment type="line">// *</comment>
  <comment type="line">// * @param c</comment>
  <comment type="line">// * the class</comment>
  <comment type="line">// * @return the default rotation matrix for class c</comment>
  <comment type="line">// */</comment>
  <comment type="line">// static final double[] defaultRotMatrix(final Class&lt;?&gt; c) {</comment>
  <comment type="line">// final InputStream is;</comment>
  <comment type="line">// final String s;</comment>
  <comment type="line">// final double[] d;</comment>
  <comment type="line">//</comment>
  <comment type="line">// s = c.getSimpleName() + ROT_MAT_SUFFIX;</comment>
  <comment type="line">//</comment>
  <comment type="line">// try {</comment>
  <comment type="line">// is = Kernel.class.getResourceAsStream(s);</comment>
  <comment type="line">// if (is != null) {</comment>
  <comment type="line">// d = Utils.loadRotMatrix(is);</comment>
  <comment type="line">// } else {</comment>
  <comment type="line">// d = Utils.loadRotMatrix(FULL_DIR + File.pathSeparatorChar + s);</comment>
  <comment type="line">// }</comment>
  <comment type="line">// DEFAULT_M = (int) (0.9d + Math.sqrt(d.length));</comment>
  <comment type="line">// return d;</comment>
  <comment type="line">// } catch (Throwable t) {</comment>
  <comment type="line">// return Utils.defaultRandomRotMatrix(DEFAULT_M);</comment>
  <comment type="line">// }</comment>
  <comment type="line">// }</comment>
  <comment type="line">//</comment>
  <comment type="line">// /**</comment>
  <comment type="line">// * Obtain the default shift vector for class c</comment>
  <comment type="line">// *</comment>
  <comment type="line">// * @param c</comment>
  <comment type="line">// * the class</comment>
  <comment type="line">// * @return the default shift vector for class c</comment>
  <comment type="line">// */</comment>
  <comment type="line">// static final double[] defaultShiftVec(final Class&lt;?&gt; c) {</comment>
  <comment type="line">// final InputStream is;</comment>
  <comment type="line">// final String s;</comment>
  <comment type="line">// double min, max;</comment>
  <comment type="line">// final double[] d;</comment>
  <comment type="line">//</comment>
  <comment type="line">// s = c.getSimpleName() + SHIFT_VECTOR_SUFFIX;</comment>
  <comment type="line">//</comment>
  <comment type="line">// try {</comment>
  <comment type="line">// is = Kernel.class.getResourceAsStream(s);</comment>
  <comment type="line">// if (is != null) {</comment>
  <comment type="line">// d = Utils.loadShiftVector(is);</comment>
  <comment type="line">// } else {</comment>
  <comment type="line">// d = Utils.loadShiftVector(FULL_DIR + File.pathSeparatorChar + s);</comment>
  <comment type="line">// }</comment>
  <comment type="line">// return d;</comment>
  <comment type="line">// } catch (Throwable t) {</comment>
  <comment type="line">//</comment>
  <comment type="line">// try {</comment>
  <comment type="line">//        min = ((Number) (c.getDeclaredField("MIN").get(null))).doubleValue(); //$NON-NLS-1$      </comment>
  <comment type="line">// } catch (Throwable tt) {</comment>
  <comment type="line">// min = -100d;</comment>
  <comment type="line">// }</comment>
  <comment type="line">//</comment>
  <comment type="line">// try {</comment>
  <comment type="line">//        max = ((Number) (c.getDeclaredField("MAX").get(null))).doubleValue(); //$NON-NLS-1$      </comment>
  <comment type="line">// } catch (Throwable tt) {</comment>
  <comment type="line">// max = -100d;</comment>
  <comment type="line">// }</comment>
  <comment type="line">// return Utils.defaultRandomShiftVector(DEFAULT_DIM, min, max);</comment>
  <comment type="line">// }</comment>
  <comment type="line">// }</comment>
  <comment type="line">//</comment>
  <comment type="line">// /**</comment>
  <comment type="line">// * Obtain the default permutation vector for class c</comment>
  <comment type="line">// *</comment>
  <comment type="line">// * @param c</comment>
  <comment type="line">// * the class</comment>
  <comment type="line">// * @return the default permutation vector for class c</comment>
  <comment type="line">// */</comment>
  <comment type="line">// static final int[] defaultPermVec(final Class&lt;?&gt; c) {</comment>
  <comment type="line">// final InputStream is;</comment>
  <comment type="line">// final String s;</comment>
  <comment type="line">// final int[] d;</comment>
  <comment type="line">//</comment>
  <comment type="line">// s = c.getSimpleName() + PERM_VECTOR_SUFFIX;</comment>
  <comment type="line">//</comment>
  <comment type="line">// try {</comment>
  <comment type="line">// is = Kernel.class.getResourceAsStream(s);</comment>
  <comment type="line">// if (is != null) {</comment>
  <comment type="line">// d = Utils.loadPermVector(is);</comment>
  <comment type="line">// } else {</comment>
  <comment type="line">// d = Utils.loadPermVector(FULL_DIR + File.pathSeparatorChar + s);</comment>
  <comment type="line">// }</comment>
  <comment type="line">// return d;</comment>
  <comment type="line">// } catch (Throwable t) {</comment>
  <comment type="line">// return Utils.defaultRandomPermVector(DEFAULT_DIM);</comment>
  <comment type="line">// }</comment>
  <comment type="line">// }</comment>

}</block></class>
</unit>
