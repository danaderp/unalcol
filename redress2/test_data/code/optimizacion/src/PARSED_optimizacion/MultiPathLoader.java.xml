<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\reflect\loader\tool\MultiPathLoader.java"><package>package <name><name>unalcol</name>.<name>reflect</name>.<name>loader</name>.<name>tool</name></name>;</package>
<import>import <name><name>unalcol</name>.<name>reflect</name>.<name>loader</name></name>.*;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>vector</name></name>.*;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Keeps Track of paths conntaining java class, source or resources.&lt;/p&gt;
 *
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 */</comment>
<class><specifier>public</specifier> class <name>MultiPathLoader</name> <super><implements>implements <name>LoaderTool</name></implements></super><block>{
    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>PathLoader</name></argument>&gt;</argument_list></name></type> <name>paths</name> =<init> <expr>new <call><name><name>Vector</name><argument_list>&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <constructor><specifier>public</specifier> <name>MultiPathLoader</name><parameter_list>()</parameter_list><block>{
    }</block></constructor>

    <comment type="javadoc">/** Loads the bytes from file
     * @param classname Name of the resource
     * @return Class bytes from the disk if possible, null otherwise.
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>byte</name><index>[]</index></type> <name>loadBytes</name><parameter_list>(<param><decl><type><name>String</name></type> <name>classname</name></decl></param>)</parameter_list><block>{

        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>buf</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>n</name> =<init> <expr><call><name><name>paths</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if<condition>( <expr><name>n</name> &gt; 0</expr> )</condition><then><block>{
            <decl_stmt><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</decl_stmt>
            <while>while<condition>( <expr><name>i</name>&lt;<name>n</name> &amp;&amp; <name>buf</name> == <name>null</name></expr> )</condition><block>{
                <expr_stmt><expr><name>buf</name> = <call><name><name>paths</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>.<call><name>loadBytes</name><argument_list>(<argument><expr><name>classname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>i</name>++</expr>;</expr_stmt>
            }</block></while>
        }</block></then></if>
        <return>return <expr><name>buf</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Add a new path to the paths collection
     * @param path Path to be added
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>( <param><decl><type><name>String</name></type> <name>path</name></decl></param> )</parameter_list><block>{
        <expr_stmt><expr><call><name><name>paths</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>PathLoader</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Gets the path names
     * @return  Path Names
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>paths</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>pths</name> =<init> <expr>new <name><name>String</name><index>[<expr><call><name><name>this</name>.<name>paths</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for( <init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<call><name><name>this</name>.<name>paths</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{
            <expr_stmt><expr><name><name>pths</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name><name>this</name>.<name>paths</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>.<call><name>path</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>pths</name></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list><block>{
        <expr_stmt><expr><call><name><name>paths</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
