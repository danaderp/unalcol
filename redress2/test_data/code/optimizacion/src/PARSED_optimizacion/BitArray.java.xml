<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\types\collection\bitarray\BitArray.java"><package>package <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>bitarray</name></name>;</package>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>integer</name>.<name>IntUtil</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>random</name>.<name>integer</name></name>.*;</import>
<import>import <name><name>unalcol</name>.<name>random</name></name>.*;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Title: BitArray&lt;/p&gt;
 * &lt;p&gt;Description: Stores the positions with a value different of the default value,
 * the values are bits&lt;/p&gt;
 * &lt;p&gt;Copyright: Copyright (c) 2006&lt;/p&gt;
 * &lt;p&gt;Company: Kunsamu&lt;/p&gt;
 * @author Jonatan Gomez
 * @version 1.0
 *
 */</comment>

<class><specifier>public</specifier> class <name>BitArray</name> <super><implements>implements <name>Cloneable</name></implements></super> <block>{
  <comment type="javadoc">/**
   * Integer array used to store the bits
   */</comment>
 <decl_stmt><decl><type><specifier>private</specifier> <name>int</name><index>[]</index></type> <name>data</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
  <comment type="javadoc">/**
   * The number of bits in the bit array
   */</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>n</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

  <comment type="javadoc">/**
   * Constructor: Creates a bit array of n bits, in a random way or with all bit in false according to the randomly argument
   * @param n The size of the bit array
   * @param randomly If the array will be initialized randomly or not
   */</comment>
  <constructor><specifier>public</specifier> <name>BitArray</name><parameter_list>(<param><decl><type><name>int</name></type> <name>n</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>randomly</name></decl></param>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name>.<name>n</name></name> = <name>n</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>m</name> =<init> <expr><call><name>getIndex</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> + 1</expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>data</name> = new <name><name>int</name><index>[<expr><name>m</name></expr>]</index></name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>randomly</name></expr>)</condition><then><block>{
      <decl_stmt><decl><type><name>UniformIntegerGenerator</name></type> <name>g</name> =<init> <expr>new <call><name>UniformIntegerGenerator</name><argument_list>(<argument><expr><name><name>IntUtil</name>.<name>HIGHEST_BIT</name></name> &gt;&gt;&gt; 1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>g</name>.<name>generate</name></name><argument_list>( <argument><expr><name>data</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>m</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <if>if<condition>(<expr><call><name><name>Random</name>.<name>nextBoolean</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{ <expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> = -<name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt> }</block></then></if>
      }</block></for>
    }</block></then> <else>else <block>{
      <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>m</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> = 0</expr>;</expr_stmt>
      }</block></for>
    }</block></else></if>
  }</block></constructor>

  <comment type="javadoc">/**
   * Constructor: Creates a clone of the bit array given as argument
   * @param source The bit array that will be cloned
   */</comment>
  <constructor><specifier>public</specifier> <name>BitArray</name><parameter_list>(<param><decl><type><name>BitArray</name></type> <name>source</name></decl></param>)</parameter_list> <block>{
    <if>if <condition>(<expr><name><name>source</name>.<name>data</name></name> != <name>null</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>n</name> = <name><name>source</name>.<name>n</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>data</name> = new <name><name>int</name><index>[<expr><name><name>source</name>.<name>data</name>.<name>length</name></name></expr>]</index></name></expr>;</expr_stmt>
      <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>source</name>.<name>data</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>source</name>.<name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      }</block></for>
    }</block></then></if>
  }</block></constructor>

  <comment type="javadoc">/**
   * Constructor: Creates a bit array using the boolean values given in the array
   * @param source The bits that will conform the bit array
   */</comment>
  <constructor><specifier>public</specifier> <name>BitArray</name> <parameter_list>(<param><decl><type><name><name>boolean</name><index>[]</index></name></type> <name>source</name></decl></param>)</parameter_list> <block>{
    <expr_stmt><expr><name>n</name> = <name><name>source</name>.<name>length</name></name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>m</name> =<init> <expr><call><name>getIndex</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> + 1</expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>data</name> = new <name><name>int</name><index>[<expr><name>m</name></expr>]</index></name></expr>;</expr_stmt>
    <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
      <expr_stmt><expr><call><name>set</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>source</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
  }</block></constructor>

  <comment type="javadoc">/**
   * Constructor: Creates a bit array using the boolean values given in the string
   * @param source The String with the bits that will conform the bit array
   */</comment>
  <constructor><specifier>public</specifier> <name>BitArray</name><parameter_list>(<param><decl><type><name>String</name></type> <name>source</name></decl></param>)</parameter_list> <block>{
    <expr_stmt><expr><name>n</name> = <call><name><name>source</name>.<name>length</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>m</name> =<init> <expr><call><name>getIndex</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> + 1</expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>data</name> = new <name><name>int</name><index>[<expr><name>m</name></expr>]</index></name></expr>;</expr_stmt>
    <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
      <expr_stmt><expr><call><name>set</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr>(<call><name><name>source</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> == '1')</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
  }</block></constructor>


  <comment type="javadoc">/**
   * Utilizada para retornar un BitArray
   * @param limit Utilizado para asignarle el tamano al BitArray con el numero de bit requeridos para represnetar su valor
   * @return BitArray de tamano igual al numero de bit para representar limit y contiene 0 y 1 aleatorios
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>BitArray</name></type> <name>random</name><parameter_list>(<param><decl><type><name>int</name></type> <name>limit</name></decl></param>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>size</name> =<init> <expr><call><name><name>IntUtil</name>.<name>getBitsNumber</name></name><argument_list>(<argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr>new <call><name>BitArray</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>


  <comment type="javadoc">/**
   * Utilizada para clonar un BitArray, sin copiar su referencia
   * @return The new BitArray
   */</comment>
  <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr>new <call><name>BitArray</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <comment type="javadoc">/**
   * Returns the buffer position (the integer that contains the bit) of an specific bit
   * &lt;p&gt;  m DIV INTEGER_SIZE &lt;/P&gt;
   * @param m The bit index
   * @return The buffer position of an specific bit
   */</comment>
  <function><type><specifier>private</specifier> <name>int</name></type> <name>getIndex</name> <parameter_list>(<param><decl><type><name>int</name></type>  <name>m</name></decl></param>)</parameter_list> <block>{
    <return>return <expr>(<name>m</name> &gt;&gt;&gt; <name><name>IntUtil</name>.<name>DIV_MASK</name></name>)</expr>;</return>
  }</block></function>

  <comment type="javadoc">/**
   * Returns the position of a specific bit in the integer that contains it.
   * &lt;p&gt;  m MOD INTEGER_SIZE &lt;/p&gt;
   * @param m The bit index
   * @return The position of a specific bit in the integer that contains it
   */</comment>
  <function><type><specifier>private</specifier> <name>int</name></type> <name>getBit</name><parameter_list>(<param><decl><type><name>int</name></type> <name>m</name></decl></param>)</parameter_list> <block>{
    <return>return <expr>(<name>m</name> &amp; <name><name>IntUtil</name>.<name>MOD_MASK</name></name>)</expr>;</return>
  }</block></function>

  <comment type="javadoc">/**
   * Sets a bit to a given value
   * @param i The bit index
   * @param v The new value for the bit
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>set</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>v</name></decl></param>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>m</name> =<init> <expr><call><name>getIndex</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>p</name> =<init> <expr><call><name>getBit</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>vmask</name> =<init> <expr>(<name><name>IntUtil</name>.<name>HIGHEST_BIT</name></name> &gt;&gt;&gt; <name>p</name>)</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>dmask</name> =<init> <expr><name>vmask</name> &amp; <name><name>data</name><index>[<expr><name>m</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>v</name></expr>)</condition><then> <block>{
      <if>if <condition>(<expr><name>dmask</name> == 0</expr>)</condition><then> <block>{ <expr_stmt><expr><name><name>data</name><index>[<expr><name>m</name></expr>]</index></name> |= <name>vmask</name></expr>;</expr_stmt> }</block></then></if><empty_stmt>;</empty_stmt>
    }</block></then> <else>else <block>{
      <if>if <condition>(<expr><name>dmask</name> != 0</expr>)</condition><then> <block>{ <expr_stmt><expr><name><name>data</name><index>[<expr><name>m</name></expr>]</index></name> ^= <name>vmask</name></expr>;</expr_stmt> }</block></then></if>
    }</block></else></if>
  }</block></function>

  <comment type="javadoc">/**
   * Returns the boolean value of a specific position
   * @param i The bit index
   * @return The boolean value of a specific position
   */</comment>
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>get</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>m</name> =<init> <expr><call><name>getIndex</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>p</name> =<init> <expr><call><name>getBit</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr>(((<name><name>IntUtil</name>.<name>HIGHEST_BIT</name></name> &gt;&gt;&gt; <name>p</name>) &amp; <name><name>data</name><index>[<expr><name>m</name></expr>]</index></name>) != 0)</expr>;</return>
  }</block></function>

  <comment type="javadoc">/**
   * Returns a sub bit array of the bit array starting from the position start until the end of the bit array.
   * &lt;p&gt;  A = 1000111001&lt;/p&gt;
   * &lt;p&gt;  A.subBitArray( 4 ) = 111001&lt;/p&gt;
   * &lt;p&gt;  A.subArray( 0 ) = 1000111001&lt;/p&gt;
   * &lt;p&gt;  A.subArray( 10 ) = empty bit array&lt;/p&gt;
   * @param start The start position
   * @return A sub bit array of the bit array starting from the position start until the end of the bit array.
   */</comment>
  <function><type><specifier>public</specifier> <name>BitArray</name></type> <name>subBitArray</name><parameter_list>(<param><decl><type><name>int</name></type> <name>start</name></decl></param>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>BitArray</name></type> <name>subArray</name> =<init> <expr>new <call><name>BitArray</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>subArray</name>.<name>leftShift</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>subArray</name>.<name>n</name></name> -= <name>start</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>subArray</name>.<name>n</name></name> &lt; 0</expr>)</condition><then> <block>{ <expr_stmt><expr><name><name>subArray</name>.<name>n</name></name> = 0</expr>;</expr_stmt> }</block></then></if>
    <return>return <expr><name>subArray</name></expr>;</return>
  }</block></function>

  <comment type="javadoc">/**
   * Returns the sub bit array of the bit array starting at the position start and the previous to the position end-1.
   * If the end position is greater than the last position of the array then the function will return only the last bits.
   * &lt;p&gt;  A = 1000111001&lt;/p&gt;
   * &lt;p&gt;  A.subBitArray( 4, 7 ) = 111&lt;/p&gt;
   * &lt;p&gt;  A.subArray( 0, 4 ) = 1000&lt;/p&gt;
   * &lt;p&gt;  A.subArray( 7, 11 ) = 001&lt;/p&gt;
   * @param start The start position of the substring
   * @param end The end position + 1 of the subarray
   * @return The sub bit array of the bit array starting at the position start and the previous to the position end-1.
   */</comment>
  <function><type><specifier>public</specifier> <name>BitArray</name></type> <name>subBitArray</name><parameter_list>(<param><decl><type><name>int</name></type> <name>start</name></decl></param>, <param><decl><type><name>int</name></type> <name>end</name></decl></param>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>length</name> =<init> <expr><name>end</name> - <name>start</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BitArray</name></type> <name>subArray</name> =<init> <expr><call><name>subBitArray</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name><name>subArray</name>.<name>n</name></name> &gt; <name>length</name></expr>)</condition><then> <block>{ <expr_stmt><expr><name><name>subArray</name>.<name>n</name></name> = <name>length</name></expr>;</expr_stmt> }</block></then></if><empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name><name>subArray</name>.<name>rightSetToZero</name></name><argument_list>(<argument><expr><name><name>subArray</name>.<name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>subArray</name></expr>;</return>
  }</block></function>

  <comment type="javadoc">/**
   * Shifts the bit array to the left in k bits. The remaining bits will be set to zero.
   * &lt;p&gt;  A = 1010011011&lt;/p&gt;
   * &lt;p&gt;  A.left_shift( 3 ) = 0011011000&lt;/p&gt;
   * @param k The number of bits to be shifted
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>leftShift</name><parameter_list>(<param><decl><type><name>int</name></type> <name>k</name></decl></param>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>data</name> != <name>null</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>rightSetToZero</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>startindex</name> =<init> <expr><call><name>getIndex</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>k</name> = <call><name>getBit</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>k</name> &gt; 0</expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>supk</name> =<init> <expr><name><name>IntUtil</name>.<name>INTEGER_SIZE</name></name> - <name>k</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>m</name> =<init> <expr><name><name>data</name>.<name>length</name></name> - 1</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>j</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr><name>startindex</name></expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>m</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
          <expr_stmt><expr><name><name>data</name><index>[<expr><name>j</name></expr>]</index></name> = (<name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> &lt;&lt; <name>k</name>) | (<name><name>data</name><index>[<expr><name>i</name> + 1</expr>]</index></name> &gt;&gt;&gt; <name>supk</name>)</expr>;</expr_stmt>
          <expr_stmt><expr><name>j</name>++</expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><name><name>data</name><index>[<expr><name>j</name></expr>]</index></name> = (<name><name>data</name><index>[<expr><name>m</name></expr>]</index></name> &lt;&lt; <name>k</name>)</expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr><name>j</name> + 1</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>m</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{ <expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> = 0</expr>;</expr_stmt> }</block></for>
      }</block></then> <else>else <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>j</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr><name>startindex</name></expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>data</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
          <expr_stmt><expr><name><name>data</name><index>[<expr><name>j</name></expr>]</index></name> = <name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
          <expr_stmt><expr><name>j</name>++</expr>;</expr_stmt>
        }</block></for>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr><name>j</name></expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>data</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{ <expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> = 0</expr>;</expr_stmt> }</block></for>
      }</block></else></if>
    }</block></then></if>
  }</block></function>

  <comment type="javadoc">/**
   * Shifts the bit array to the right in k bits. The remaining bits will be set to zero
   * &lt;p&gt;  A = 1010011011&lt;/p&gt;
   * &lt;p&gt;  A.right_shift( 3 ) = 0001010011&lt;/p&gt;
   * @param k The number of bits to be shifted
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>rightShift</name><parameter_list>(<param><decl><type><name>int</name></type> <name>k</name></decl></param>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>data</name> != <name>null</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>rightSetToZero</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>startindex</name> =<init> <expr><call><name>getIndex</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>k</name> = <call><name>getBit</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>k</name> &gt; 0</expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>supk</name> =<init> <expr><name><name>IntUtil</name>.<name>INTEGER_SIZE</name></name> - <name>k</name></expr></init></decl>;</decl_stmt>
        <comment type="line">//int m = data.length - 1;</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>j</name> =<init> <expr><name><name>data</name>.<name>length</name></name> - 1 - <name>startindex</name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr><name><name>data</name>.<name>length</name></name> - 1</expr></init></decl>;</init> <condition><expr><name>i</name> &gt; <name>startindex</name></expr>;</condition> <incr><expr><name>i</name>--</expr></incr>) <block>{
          <expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> = (<name><name>data</name><index>[<expr><name>j</name></expr>]</index></name> &gt;&gt;&gt; <name>k</name>) | (<name><name>data</name><index>[<expr><name>j</name> - 1</expr>]</index></name> &lt;&lt; <name>supk</name>)</expr>;</expr_stmt>
          <expr_stmt><expr><name>j</name>--</expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><name><name>data</name><index>[<expr><name>startindex</name></expr>]</index></name> = (<name><name>data</name><index>[<expr>0</expr>]</index></name> &gt;&gt;&gt; <name>k</name>)</expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>startindex</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{ <expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> = 0</expr>;</expr_stmt> }</block></for>
      }</block></then> <else>else <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>j</name> =<init> <expr><name><name>data</name>.<name>length</name></name> - 1 - <name>startindex</name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr><name><name>data</name>.<name>length</name></name> - 1</expr></init></decl>;</init> <condition><expr><name>i</name> &gt;= <name>startindex</name></expr>;</condition> <incr><expr><name>i</name>--</expr></incr>) <block>{
          <expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>data</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
          <expr_stmt><expr><name>j</name>--</expr>;</expr_stmt>
        }</block></for>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>startindex</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{ <expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> = 0</expr>;</expr_stmt> }</block></for>
      }</block></else></if>
    }</block></then></if>
  }</block></function>

  <comment type="javadoc">/**
   * Add the given bit array to the end of the bit array.
   * &lt;p&gt;  A = 1001&lt;/p&gt;
   * &lt;p&gt;  B = 11001&lt;/p&gt;
   * &lt;p&gt;  A.add( B ) = 100111001&lt;/p&gt;
   * @param source The bit array to be added to the end
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>BitArray</name></type> <name>source</name></decl></param>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>BitArray</name></type> <name>newBitArray</name> =<init> <expr>new <call><name>BitArray</name> <argument_list>(<argument><expr><name>n</name> + <name><name>source</name>.<name>n</name></name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>newBitArray</name>.<name>or</name></name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>newBitArray</name>.<name>rightShift</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>newBitArray</name>.<name>or</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>data</name> = <name><name>newBitArray</name>.<name>data</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> = <name><name>newBitArray</name>.<name>n</name></name></expr>;</expr_stmt>
  }</block></function>

  <comment type="javadoc">/**
   * Add the given bit to the end of the bit array
   * @param v The bit to be added
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>v</name></decl></param>)</parameter_list> <block>{
    <if>if <condition>(<expr><name><name>data</name>.<name>length</name></name> * <name><name>IntUtil</name>.<name>INTEGER_SIZE</name></name> == <name>n</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>int</name><index>[]</index></type> <name>newdata</name> =<init> <expr>new <name><name>int</name><index>[<expr><name><name>data</name>.<name>length</name></name> + 1</expr>]</index></name></expr></init></decl>;</decl_stmt>
      <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>data</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <expr_stmt><expr><name><name>newdata</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      }</block></for>
      <if>if <condition>(<expr><name>v</name></expr>)</condition><then> <block>{ <expr_stmt><expr><name><name>newdata</name><index>[<expr><name><name>data</name>.<name>length</name></name></expr>]</index></name> = <name><name>IntUtil</name>.<name>HIGHEST_BIT</name></name></expr>;</expr_stmt>
      }</block></then> <else>else <block>{ <expr_stmt><expr><name><name>newdata</name><index>[<expr><name><name>data</name>.<name>length</name></name></expr>]</index></name> = 0</expr>;</expr_stmt> }</block></else></if>
      <expr_stmt><expr><name>data</name> = <name>newdata</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name>set</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><name>n</name>++</expr>;</expr_stmt>
  }</block></function>

  <comment type="javadoc">/**
   * Removes the last bit in the bit array
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>del</name><parameter_list>()</parameter_list> <block>{
   <expr_stmt><expr><call><name>del</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <comment type="javadoc">/**
   * Removes the last k bits from the bit array
   * @param k the number of bits to be removed
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>del</name><parameter_list>(<param><decl><type><name>int</name></type> <name>k</name></decl></param>)</parameter_list> <block>{
    <expr_stmt><expr><name>n</name> -= <name>k</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>n</name> &gt; 0</expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>m</name> =<init> <expr><call><name>getIndex</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>m</name> + 1 &lt; <name><name>data</name>.<name>length</name></name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>int</name><index>[]</index></type> <name>newdata</name> =<init> <expr>new <name><name>int</name><index>[<expr><name>m</name> + 1</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt;= <name>m</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
          <expr_stmt><expr><name><name>newdata</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><name>data</name> = <name>newdata</name></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><name>n</name> = 0</expr>;</expr_stmt>
      <expr_stmt><expr><name>data</name> = new <name><name>int</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
    }</block></else></if>
  }</block></function>

  <comment type="javadoc">/**
   * Returns the number of bits in the array
   * @return The number of bits in the array
   */</comment>
  <function><type><specifier>public</specifier> <name>int</name></type> <name>size</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><name>n</name></expr>;</return> }</block></function>

  <comment type="javadoc">/**
   * Sets all the bits in the array to zero
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>zero</name><parameter_list>()</parameter_list> <block>{
    <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>data</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
      <expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> = 0</expr>;</expr_stmt>
    }</block></for>
  }</block></function>

  <comment type="javadoc">/**
   * Set the last bits to zero starting to the given position.
   * &lt;p&gt; A = 1000111011&lt;/p&gt;
   * &lt;p&gt; A.rightSetToZero( 6 ) = 1000110000&lt;/p&gt;
   * @param start The start position to be set to zero
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>rightSetToZero</name><parameter_list>(<param><decl><type><name>int</name></type> <name>start</name></decl></param>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>m</name> =<init> <expr><call><name>getIndex</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>data</name> != <name>null</name> &amp;&amp; 0 &lt;= <name>m</name> &amp;&amp; <name>m</name> &lt; <name><name>data</name>.<name>length</name></name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>r</name> =<init> <expr><call><name>getBit</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>mask</name></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>r</name> &gt; 0</expr>)</condition><then> <block>{ <expr_stmt><expr><name>mask</name> = <name><name>IntUtil</name>.<name>ONE_BITS</name></name> &lt;&lt; (<name><name>IntUtil</name>.<name>INTEGER_SIZE</name></name> - <name>r</name>)</expr>;</expr_stmt>
      }</block></then> <else>else <block>{ <expr_stmt><expr><name>mask</name> = 0</expr>;</expr_stmt> }</block></else></if>
      <expr_stmt><expr><name><name>data</name><index>[<expr><name>m</name></expr>]</index></name> &amp;= <name>mask</name></expr>;</expr_stmt>
      <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr><name>m</name> + 1</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>data</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> = 0</expr>;</expr_stmt>
      }</block></for>
    }</block></then></if>
  }</block></function>

  <comment type="javadoc">/**
   * Set the last bits to one starting to the given position.
   * &lt;p&gt; A = 1000110011&lt;/p&gt;
   * &lt;p&gt; A.rightSetToOne( 6 ) = 1000111111&lt;/p&gt;
   * @param start The start position to be set to one
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>rightSetToOne</name><parameter_list>(<param><decl><type><name>int</name></type> <name>start</name></decl></param>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>m</name> =<init> <expr><call><name>getIndex</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>0 &lt;= <name>m</name> &amp;&amp; <name>m</name> &lt; <name><name>data</name>.<name>length</name></name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>r</name> =<init> <expr><call><name>getBit</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>mask</name> =<init> <expr><name><name>IntUtil</name>.<name>ONE_BITS</name></name> &gt;&gt;&gt; <name>r</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>data</name><index>[<expr><name>m</name></expr>]</index></name> |= <name>mask</name></expr>;</expr_stmt>
      <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr><name>m</name> + 1</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>data</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>IntUtil</name>.<name>ONE_BITS</name></name></expr>;</expr_stmt>
      }</block></for>
    }</block></then></if>
  }</block></function>


  <comment type="javadoc">/**
   * Set the first bits to zero.
   * &lt;p&gt; A = 1000111011&lt;/p&gt;
   * &lt;p&gt; A.leftSetToZero( 6 ) = 0000001011&lt;/p&gt;
   * @param end The number of bits to be set to zero
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>leftSetToZero</name><parameter_list>(<param><decl><type><name>int</name></type> <name>end</name></decl></param>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>m</name> =<init> <expr><call><name>getIndex</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>0 &lt;= <name>m</name> &amp;&amp; <name>m</name> &lt; <name><name>data</name>.<name>length</name></name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>r</name> =<init> <expr><call><name>getBit</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>mask</name> =<init> <expr><name><name>IntUtil</name>.<name>ONE_BITS</name></name> &gt;&gt;&gt; <name>r</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>data</name><index>[<expr><name>m</name></expr>]</index></name> &amp;= <name>mask</name></expr>;</expr_stmt>
      <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>m</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> = 0</expr>;</expr_stmt>
      }</block></for>
    }</block></then></if>
  }</block></function>

  <comment type="javadoc">/**
   * Set the first bits to one.
   * &lt;p&gt; A = 1000111011&lt;/p&gt;
   * &lt;p&gt; A.leftSetToOne( 6 ) = 1111111011&lt;/p&gt;
   * @param end The number of bits to be set to one
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>leftSetToOne</name><parameter_list>(<param><decl><type><name>int</name></type> <name>end</name></decl></param>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>m</name> =<init> <expr><call><name>getIndex</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>0 &lt;= <name>m</name> &amp;&amp; <name>m</name> &lt; <name><name>data</name>.<name>length</name></name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>r</name> =<init> <expr><call><name>getBit</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>mask</name> =<init> <expr><name><name>IntUtil</name>.<name>ONE_BITS</name></name> &lt;&lt; (<name><name>IntUtil</name>.<name>INTEGER_SIZE</name></name> - <name>r</name>)</expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>data</name><index>[<expr><name>m</name></expr>]</index></name> |= <name>mask</name></expr>;</expr_stmt>
      <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>m</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>IntUtil</name>.<name>ONE_BITS</name></name></expr>;</expr_stmt>
      }</block></for>
    }</block></then></if>
  }</block></function>

  <comment type="javadoc">/**
   * Performs the and operator between the bit array and the given bit array.
   * &lt;p&gt;  A = 10011001011&lt;/p&gt;
   * &lt;p&gt;  B = 0101010101&lt;/p&gt;
   * &lt;p&gt;  A.and( B ) = 00010001011&lt;/p&gt;
   * &lt;p&gt;  B.and( A ) = 0001000101&lt;/p&gt;
   * @param arg2 The array used to perform the and operator
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>and</name><parameter_list>(<param><decl><type><name>BitArray</name></type> <name>arg2</name></decl></param>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>arg2</name>.<name>rightSetToOne</name></name><argument_list>(<argument><expr><name><name>arg2</name>.<name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>m</name> =<init> <expr><name><name>arg2</name>.<name>data</name>.<name>length</name></name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name><name>data</name>.<name>length</name></name> &lt; <name>m</name></expr>)</condition><then> <block>{ <expr_stmt><expr><name>m</name> = <name><name>data</name>.<name>length</name></name></expr>;</expr_stmt> }</block></then></if>
    <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>m</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
      <expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> &amp;= <name><name>arg2</name>.<name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
  }</block></function>

  <comment type="javadoc">/**
   * Performs the or operator between the bit array and the given bit array.
   * &lt;p&gt;  A = 10011001011&lt;/p&gt;
   * &lt;p&gt;  B = 0101010101&lt;/p&gt;
   * &lt;p&gt;  A.or( B ) = 11011101011&lt;/p&gt;
   * &lt;p&gt;  B.or( A ) = 1101110101&lt;/p&gt;
   * @param arg2 The array used to perform the or operator
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>or</name><parameter_list>(<param><decl><type><name>BitArray</name></type> <name>arg2</name></decl></param>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>arg2</name>.<name>rightSetToZero</name></name><argument_list>(<argument><expr><name><name>arg2</name>.<name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>m</name> =<init> <expr><name><name>arg2</name>.<name>data</name>.<name>length</name></name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name><name>data</name>.<name>length</name></name> &lt; <name>m</name></expr>)</condition><then> <block>{ <expr_stmt><expr><name>m</name> = <name><name>data</name>.<name>length</name></name></expr>;</expr_stmt> }</block></then></if>
    <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>m</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
      <expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> |= <name><name>arg2</name>.<name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
  }</block></function>

  <comment type="javadoc">/**
   * Performs the xor operator between the bit array and the given bit array.
   * &lt;p&gt;  A = 10011001011&lt;/p&gt;
   * &lt;p&gt;  B = 0101010101&lt;/p&gt;
   * &lt;p&gt;  A.xor( B ) = 11001100001&lt;/p&gt;
   * &lt;p&gt;  B.xor( A ) = 1100110000&lt;/p&gt;
   * @param arg2 The array used to perform the xor operator
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>xor</name><parameter_list>(<param><decl><type><name>BitArray</name></type> <name>arg2</name></decl></param>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>m</name> =<init> <expr><name><name>arg2</name>.<name>data</name>.<name>length</name></name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name><name>data</name>.<name>length</name></name> &lt; <name>m</name></expr>)</condition><then> <block>{ <expr_stmt><expr><name>m</name> = <name><name>data</name>.<name>length</name></name></expr>;</expr_stmt> }</block></then></if>
    <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>m</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
      <expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> ^= <name><name>arg2</name>.<name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
  }</block></function>

  <comment type="javadoc">/**
   * Flips all the bits in the bit array
   * &lt;p&gt;  A = 10001001&lt;/p&gt;
   * &lt;p&gt;  A.not() = 01110110&lt;/p&gt;
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>not</name><parameter_list>()</parameter_list> <block>{
    <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>data</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
      <expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> ^= <name><name>IntUtil</name>.<name>ONE_BITS</name></name></expr>;</expr_stmt>
    }</block></for>
  }</block></function>

  <comment type="javadoc">/**
   * Flips the bit given
   * &lt;p&gt; A = 10011011&lt;/p&gt;
   * &lt;p&gt; A.not( 3 ) = 10001011&lt;/p&gt;
   * &lt;p&gt; A.not( 5 ) = 10011111&lt;/p&gt;
   * @param bit apply not
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>not</name><parameter_list>(<param><decl><type><name>int</name></type> <name>bit</name></decl></param>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>m</name> =<init> <expr><call><name>getIndex</name><argument_list>(<argument><expr><name>bit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>p</name> =<init> <expr><call><name>getBit</name><argument_list>(<argument><expr><name>bit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>data</name><index>[<expr><name>m</name></expr>]</index></name> ^= (<name><name>IntUtil</name>.<name>HIGHEST_BIT</name></name> &gt;&gt;&gt; <name>p</name>)</expr>;</expr_stmt>
  }</block></function>

  <comment type="javadoc">/**
   * Converts the bit array to a string
   * &lt;p&gt;  A = 1000111&lt;/p&gt;
   * &lt;p&gt;  A.toString() = "1000111"&lt;/p&gt;
   * @return The String representation of the bit array
   */</comment>
  <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>String</name></type> <name>text</name> =<init> <expr>""</expr></init></decl>;</decl_stmt>
    <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
      <if>if <condition>(<expr><call><name>get</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{  <expr_stmt><expr><name>text</name> += "1"</expr>;</expr_stmt>
      }</block></then> <else>else <block>{ <expr_stmt><expr><name>text</name> += "0"</expr>;</expr_stmt> }</block></else></if>
    }</block></for>
    <return>return <expr><name>text</name></expr>;</return>
  }</block></function>

  <comment type="javadoc">/**
   * Compares a BitArray with other Object
   * @param obj The ther object to be compared with the bitarray
   * @return true if the object is a bitarray with the same information than the bit array
   * false in other case
   */</comment>
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>boolean</name></type> <name>flag</name> =<init> <expr>(<name>obj</name> <name>instanceof</name> <name>BitArray</name>)</expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>flag</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>BitArray</name></type> <name>other</name> =<init> <expr>(<name>BitArray</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>s</name> =<init> <expr><call><name>size</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>flag</name> = (<call><name><name>other</name>.<name>size</name></name><argument_list>()</argument_list></call> == <name>s</name>)</expr>;</expr_stmt>
      <if>if <condition>(<expr><name>flag</name> &amp;&amp; <name>s</name> &gt; 0</expr>)</condition><then> <block>{
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>data</name>.<name>length</name></name> - 1 &amp;&amp; <name>flag</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
          <expr_stmt><expr><name>flag</name> = (<name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> == <name><name>other</name>.<name>data</name><index>[<expr><name>i</name></expr>]</index></name>)</expr>;</expr_stmt>
        }</block></for>
        <if>if <condition>(<expr><name>flag</name></expr>)</condition><then> <block>{
          <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>(<name><name>data</name>.<name>length</name></name> - 1) * <name><name>IntUtil</name>.<name>INTEGER_SIZE</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>s</name> &amp;&amp; <name>flag</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>flag</name> = (<call><name>get</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> == <call><name><name>other</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>)</expr>;</expr_stmt>
          }</block></for>
        }</block></then></if>
      }</block></then></if>
    }</block></then></if>
    <return>return <expr><name>flag</name></expr>;</return>
  }</block></function>

  <comment type="line">// Special methods and atributes</comment>
 <comment type="javadoc">/**
   * If the BitArray is using Gray code for representing the integer numbers
   */</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>useGrayCode</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

 <comment type="javadoc">/**
   * Returns the integer at the given buffer position.
   * @param i The buffer position
   * @return The integer at the given buffer position.
   */</comment>
  <function><type><specifier>public</specifier> <name>int</name></type> <name>getInt</name> <parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>x</name> =<init> <expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>useGrayCode</name></expr>)</condition><then> <block>{ <expr_stmt><expr><name>x</name> = <call><name><name>IntUtil</name>.<name>grayToBinary</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></then></if>
    <return>return <expr><name>x</name></expr>;</return>
  }</block></function>

    <comment type="javadoc">/**
   * Sets the integer value at the given buffer position.
   * @param i The buffer position
   * @param value The new integer for the given buffer position.
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>setInt</name> <parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>, <param><decl><type><name>int</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>useGrayCode</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name><name>IntUtil</name>.<name>binaryToGray</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> = <name>value</name></expr>;</expr_stmt>
    }</block></else></if>
  }</block></function>

  <comment type="javadoc">/**
   * Gets the array which stores the bits
   * @return The data of the bits array
   */</comment>
  <function><type><specifier>public</specifier> <name>int</name><index>[]</index></type> <name>getData</name><parameter_list>()</parameter_list> <block>{
	  <return>return <expr><name>data</name></expr>;</return>
  }</block></function>

  <comment type="javadoc">/**
   * Sets the data of the bits array
   * @param data The data of the bits array
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>setData</name><parameter_list>(<param><decl><type><name><name>int</name><index>[]</index></name></type> <name>data</name></decl></param>)</parameter_list> <block>{
	  <expr_stmt><expr><name><name>this</name>.<name>data</name></name> = <name>data</name></expr>;</expr_stmt>
  }</block></function>

  <comment type="javadoc">/**
   * Gets the dimension of the bits array
   * @return The dimension
   */</comment>
  <function><type><specifier>public</specifier> <name>int</name></type> <name>dimension</name><parameter_list>()</parameter_list> <block>{
	  <return>return <expr><name>n</name></expr>;</return>
  }</block></function>


}</block></class>
</unit>
