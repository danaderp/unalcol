<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\optimization\operators\real\EllipticMutation.java"><comment type="block">/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */</comment>
<package>package <name><name>unalcol</name>.<name>optimization</name>.<name>operators</name>.<name>real</name></name>;</package>

<import>import <name><name>unalcol</name>.<name>clone</name>.<name>Clone</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>random</name>.<name>real</name>.<name>DoubleGenerator</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>vector</name>.<name>Vector</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>real</name>.<name>array</name>.<name>DoubleArrayInit</name></name>;</import>

<comment type="javadoc">/**
 *
 * @author jgomez
 */</comment>
<class><specifier>public</specifier> class <name>EllipticMutation</name>   <super><extends>extends <name>RealArityOne</name></extends></super> <block>{
  <comment type="javadoc">/**
   * Gauss number generator
   */</comment>
  <decl_stmt><decl><type><specifier>protected</specifier> <name>DoubleGenerator</name><index>[]</index></type> <name>g</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
  <comment type="javadoc">/**
   * sigma: standard deviation
   */</comment>
  <decl_stmt><decl><type><specifier>protected</specifier> <name>double</name><index>[]</index></type> <name>sigma</name></decl>;</decl_stmt>

  <comment type="javadoc">/**
   * Creates a Gaussian Mutation with the given standard deviation per component
   * @param _sigma Standard deviation per component
   */</comment>
  <constructor><specifier>public</specifier> <name>EllipticMutation</name><parameter_list>( <param><decl><type><name><name>double</name><index>[]</index></name></type> <name>_sigma</name></decl></param>, <param><decl><type><name>DoubleGenerator</name></type> <name>_g</name></decl></param> )</parameter_list> <block>{
    <expr_stmt><expr><name>sigma</name> = <call><name><name>_sigma</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>var</name> = new <name><name>double</name><index>[<expr><name><name>sigma</name>.<name>length</name></name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>g</name> = new <name><name>DoubleGenerator</name><index>[<expr><name><name>sigma</name>.<name>length</name></name></expr>]</index></name></expr>;</expr_stmt>
    <for>for( <init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name><name>g</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> )<block>{
<comment type="line">//        g[i] = _g.new_instance();</comment>
        <expr_stmt><expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name> = <name>_g</name></expr>;</expr_stmt>
    }</block></for>    
  }</block></constructor>

  <comment type="javadoc">/**
   * Creates a Gaussian Mutation with the given standard deviation per component
   * @param _sigma Standard deviation per component
   */</comment>
  <constructor><specifier>public</specifier> <name>EllipticMutation</name><parameter_list>( <param><decl><type><name>int</name></type> <name>n</name></decl></param>, <param><decl><type><name>double</name></type> <name>_sigma</name></decl></param>, <param><decl><type><name>DoubleGenerator</name></type> <name>_g</name></decl></param> )</parameter_list> <block>{
    <expr_stmt><expr><call><name>this</name><argument_list>( <argument><expr><call><name><name>DoubleArrayInit</name>.<name>create</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>_sigma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>_g</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  
  <decl_stmt><decl><type><specifier>protected</specifier> <name>double</name><index>[]</index></type> <name>var</name></decl>;</decl_stmt>
  <function><type><specifier>public</specifier> <name>double</name><index>[]</index></type> <name>variation</name><parameter_list>()</parameter_list><block>{
      <for>for( <init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name><name>var</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{
         <expr_stmt><expr><name><name>var</name><index>[<expr><name>i</name></expr>]</index></name> =  <name><name>sigma</name><index>[<expr><name>i</name></expr>]</index></name>*<name><name>g</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>next</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></for>
      <return>return <expr><name>var</name></expr>;</return>
  }</block></function>
  
  <comment type="javadoc">/**
   * Modifies the number in a random position for a Gaussian value with mean
   * the value encoded in the genome and sigma given as attribute
   * @param gen Genome to be modified
   * @return Index of the real modified
   */</comment>
  <function><type><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>double</name><index>[]</index></argument>&gt;</argument_list></name></type> <name>generates</name><parameter_list>(<param><decl><type><name><name>double</name><index>[]</index></name></type> <name>gen</name></decl></param>)</parameter_list> <block>{
      <try>try <block>{
          <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>genome</name> =<init> <expr>(<name><name>double</name><index>[]</index></name>) <call><name><name>Clone</name>.<name>get</name></name><argument_list>(<argument><expr><name>gen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>variation</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <for>for( <init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name><name>genome</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> )<block>{
              <expr_stmt><expr><name><name>genome</name><index>[<expr><name>i</name></expr>]</index></name> += <name><name>var</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
          }</block></for>
          <decl_stmt><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>double</name><index>[]</index></argument>&gt;</argument_list></name></type> <name>v</name> =<init> <expr>new <call><name>Vector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>v</name>.<name>add</name></name><argument_list>(<argument><expr><name>genome</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>v</name></expr>;</return>
      }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
          <expr_stmt><expr><call><name><name>e</name>.<name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></catch></try>
      <return>return <expr><name>null</name></expr>;</return>
  }</block></function>
}</block></class>

</unit>
