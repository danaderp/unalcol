<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\sort\algorithm\InsertionSort.java"><package>package <name><name>unalcol</name>.<name>sort</name>.<name>algorithm</name></name>;</package>
<import>import <name><name>unalcol</name>.<name>sort</name></name>.*;</import>

<comment type="javadoc">/**
 * &lt;p&gt;InsertionSort algorithm&lt;/p&gt;
 *
 * &lt;p&gt;Copyright: Copyright (c) 2010&lt;/p&gt;
 * 
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 */</comment>
<class><specifier>public</specifier> class <name><name>InsertionSort</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name> <super><extends>extends <name><name>Sort</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></extends></super> <block>{
  <comment type="javadoc">/**
   * Default constructor
   */</comment>
  <constructor><specifier>public</specifier> <name>InsertionSort</name><parameter_list>()</parameter_list><block>{}</block></constructor>

  <comment type="javadoc">/**
   * Crates a Insertion sort algorithm with the given order
   * @param order Order used for sorting the objects
   */</comment>
  <constructor><specifier>public</specifier> <name>InsertionSort</name><parameter_list>( <param><decl><type><name><name>Order</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>order</name></decl></param> )</parameter_list><block>{
      <expr_stmt><expr><call><name>super</name><argument_list>( <argument><expr><name>order</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <comment type="javadoc">/**
   * Creates a Insertion sort algorithm using the given order and overwriting array flag
   * @param order Order used for sorting the objects
   * @param overwrite If the array should be overwrited or not
   */</comment>
  <constructor><specifier>public</specifier> <name>InsertionSort</name><parameter_list>( <param><decl><type><name><name>Order</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>order</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>overwrite</name></decl></param> )</parameter_list><block>{
      <expr_stmt><expr><call><name>super</name><argument_list>( <argument><expr><name>order</name></expr></argument>, <argument><expr><name>overwrite</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <comment type="javadoc">/**
   * Sorts a vector of objects using Insertion sort
   * @param a array to be sorted
   */</comment>
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>apply</name><parameter_list>(<param><decl><type><name><name>T</name><index>[]</index></name></type> <name>a</name></decl></param>, <param><decl><type><name>int</name></type> <name>start</name></decl></param>, <param><decl><type><name>int</name></type> <name>end</name></decl></param>)</parameter_list> <block>{
      <if>if<condition>( <expr><call><name>getOrder</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> != <name>null</name></expr> )</condition><then><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>n</name> =<init> <expr><name><name>a</name>.<name>length</name></name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>end</name> &amp;&amp; <name>continueFlag</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
          <decl_stmt><decl><type><name>int</name></type> <name>j</name> =<init> <expr><name>i</name> - 1</expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>T</name></type> <name>value</name> =<init> <expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
          <while>while<condition>( <expr><name>j</name> &gt;= <name>start</name> &amp;&amp; <call><name><name>order</name>.<name>compare</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call>&lt;0 &amp;&amp; <name>continueFlag</name></expr>)</condition> <block>{
            <expr_stmt><expr><name><name>a</name><index>[<expr><name>j</name>+1</expr>]</index></name> = <name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>j</name>--</expr>;</expr_stmt>
          }</block></while>
          <expr_stmt><expr><name><name>a</name><index>[<expr><name>j</name>+1</expr>]</index></name> = <name>value</name></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr>true</expr>;</return>
      }</block></then></if>
      <return>return <expr>false</expr>;</return>
  }</block></function>
}</block></class>
</unit>
