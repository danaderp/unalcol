<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\types\collection\list\Stack.java"><package>package <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>list</name></name>;</package>

<comment type="javadoc">/**
 * &lt;p&gt;Title: Stack&lt;/p&gt;
 *
 * &lt;p&gt;Description: An stack &lt;/p&gt;
 *
 * &lt;p&gt;Copyright: Copyright (c) 2007&lt;/p&gt;
 *
 * &lt;p&gt;Company: Kunsamu&lt;/p&gt;
 *
 * @author Jonatan Gomez
 * @version 1.0
 */</comment>
<class><specifier>public</specifier> class <name><name>Stack</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name> <super><extends>extends <name><name>Queue</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></extends></super><block>{
    <constructor><specifier>public</specifier> <name>Stack</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>add</name><parameter_list>( <param><decl><type><name>T</name></type> <name>data</name></decl></param> )</parameter_list><block>{
        <decl_stmt><decl><type><name><name>Node</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>node</name> =<init> <expr>new <call><name><name>Node</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>node</name>.<name>next</name></name> = <name>head</name></expr>;</expr_stmt>
        <if>if<condition>( <expr><name>head</name> == <name>null</name></expr> )</condition><then><block>{
            <expr_stmt><expr><name>last</name> = <name>node</name></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>head</name> = <name>node</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>size</name>++</expr>;</expr_stmt>
        <return>return <expr>true</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>push</name><parameter_list>( <param><decl><type><name>T</name></type> <name>data</name></decl></param> )</parameter_list><block>{
        <expr_stmt><expr><call><name>add</name><argument_list>( <argument><expr><name>data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>T</name></type> <name>pop</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name>T</name></type> <name>t</name> =<init> <expr><call><name>get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>del</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>t</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
