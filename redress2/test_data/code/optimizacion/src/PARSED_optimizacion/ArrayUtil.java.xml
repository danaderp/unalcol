<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\types\collection\array\ArrayUtil.java"><comment type="block">/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */</comment>

<package>package <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>array</name></name>;</package>

<comment type="javadoc">/**
 *
 * @author jgomez
 */</comment>
<class><specifier>public</specifier> class <name>ArrayUtil</name> <block>{
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>rightRotation</name><parameter_list>( <param><decl><type><name>int</name></type> <name>start</name></decl></param>, <param><decl><type><name>int</name></type> <name>end</name></decl></param>, <param><decl><type><name><name>Object</name><index>[]</index></name></type> <name>a</name></decl></param> )</parameter_list><block>{
        <for>for( <init><decl><type><name>int</name></type> <name>i</name>=<init><expr><name>end</name></expr></init></decl>;</init> <condition><expr><name>i</name>&gt;<name>start</name></expr>;</condition> <incr><expr><name>i</name>--</expr></incr> )<block>{
            <expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>a</name><index>[<expr><name>i</name>-1</expr>]</index></name></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>leftRotation</name><parameter_list>( <param><decl><type><name>int</name></type> <name>start</name></decl></param>, <param><decl><type><name>int</name></type> <name>end</name></decl></param>, <param><decl><type><name><name>Object</name><index>[]</index></name></type> <name>a</name></decl></param> )</parameter_list><block>{
        <for>for( <init><decl><type><name>int</name></type> <name>i</name>=<init><expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name>end</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> )<block>{
            <expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>a</name><index>[<expr><name>i</name>+1</expr>]</index></name></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>insert</name><parameter_list>( <param><decl><type><name>int</name></type> <name>n</name></decl></param>, <param><decl><type><name><name>Object</name><index>[]</index></name></type> <name>a</name></decl></param>, <param><decl><type><name>Object</name></type> <name>x</name></decl></param>, <param><decl><type><name>int</name></type> <name>i</name></decl></param> )</parameter_list><block>{
        <expr_stmt><expr><call><name>rightRotation</name><argument_list>( <argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>a</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> = <name>x</name></expr>;</expr_stmt>
    }</block></function>
    
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>del</name><parameter_list>( <param><decl><type><name>int</name></type> <name>n</name></decl></param>, <param><decl><type><name><name>Object</name><index>[]</index></name></type> <name>a</name></decl></param>, <param><decl><type><name>int</name></type> <name>i</name></decl></param> )</parameter_list><block>{
        <expr_stmt><expr><call><name>leftRotation</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name>-1</expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
