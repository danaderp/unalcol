<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\io\WriteServiceWrapper.java"><package>package <name><name>unalcol</name>.<name>io</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Writer</name></name>;</import>
<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name></name>.*;</import>

<import>import <name><name>unalcol</name>.<name>reflect</name>.<name>service</name></name>.*;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Title: PersistentWrapper&lt;/p&gt;
 * &lt;p&gt;Description: Persistence methods for objects of a given class&lt;/p&gt;
 * &lt;p&gt;Copyright: Copyright (c) 2008&lt;/p&gt;
 * &lt;p&gt;Company: Kunsamu&lt;/p&gt;
 * @author Jonatan Gomez
 * @version 1.0
 */</comment>
<class><specifier>public</specifier> class <name>WriteServiceWrapper</name> <super><extends>extends <name>ServiceWrapper</name></extends> <implements>implements
        <name>WriteService</name></implements></super> <block>{
    <comment type="javadoc">/**
     * Creates a set of persistence methods for object of the given class
     */</comment>
    <constructor><specifier>public</specifier> <name>WriteServiceWrapper</name><parameter_list>()</parameter_list><block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr>"write"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Writes an object to the given writer (The object should has a write method)
     * @param obj Object to write
     * @param writer The writer object
     * @throws IOException IOException
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>, <param><decl><type><name>Writer</name></type> <name>writer</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <try>try <block>{
            <decl_stmt><decl><type><name>Method</name></type> <name>m</name> =<init> <expr><call><name><name>obj</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getMethod</name><argument_list>(<argument><expr><name>method_name</name></expr></argument>, <argument><expr>new <name><name>Class</name><index>[]</index></name> <block>{<expr><name><name>Writer</name>.<name><name/></name></name>class</expr>}</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>m</name>.<name>invoke</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>new <name><name>Object</name><index>[]</index></name> <block>{<expr><name>writer</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>IOException</name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>
}</block></class>
</unit>
