<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\types\collection\Test.java"><package>package <name><name>unalcol</name>.<name>types</name>.<name>collection</name></name>;</package>
<comment type="line">//import unalcol.types.collection.vector.*;</comment>
<comment type="line">//import java.util.Vector;</comment>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>array</name>.<name>ArrayCollectionLocation</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>vector</name>.<name>Vector</name></name>;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Title: &lt;/p&gt;
 *
 * &lt;p&gt;Description: &lt;/p&gt;
 *
 * &lt;p&gt;Copyright: Copyright (c) 2009&lt;/p&gt;
 *
 * &lt;p&gt;Company: Kunsamu&lt;/p&gt;
 *
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 */</comment>
<class><specifier>public</specifier> class <name>Test</name> <block>{
    <constructor><specifier>public</specifier> <name>Test</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>( <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></param> )</parameter_list><block>{
        
<comment type="line">//        System.out.println( 5 &gt;&gt; 2 );</comment>
<comment type="line">//        System.out.println( (5 &amp; 4) == 4 );</comment>
<comment type="line">//        System.out.println( 10 &lt;&lt; 2 );</comment>
        
      <decl_stmt><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>v</name> =<init> <expr>new <call><name><name>Vector</name><argument_list>&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<comment type="line">//      ArrayList&lt;Integer&gt; v = new ArrayList&lt;&gt;();</comment>
<comment type="block">/*      long m, p, n;

      n  = System.nanoTime();
      for( int i=0; i&lt;100000; i++ ){
          v.add( i );
      }
      p = System.nanoTime();
      m = p - n;
      System.out.print( m + " " );
      
      n = System.nanoTime();
      for(int i=0; i&lt;100000; i++ ){
          v.add(i,-i);
      }
      p = System.nanoTime();
      m = p - n;
      System.out.print( m  + " " );

      n = System.nanoTime();
      for(int i=0; i&lt;100000; i++ ){
          v.remove(i);
//          v.remove(i);
      }
      p = System.nanoTime();
      m = p - n;
      System.out.print( m );

      n = System.nanoTime();
      for(int i=0; i&lt;99000; i++ ){
          v.remove(0);
//          v.remove(i);
      }
      p = System.nanoTime();
      m = p - n;
      System.out.println( m );

      for(int i=0; i&lt;1000; i++ ){
          System.out.println( v.get(i));
      }
*/</comment>      
      
      <decl_stmt><decl><type><name>Integer</name><index>[]</index></type> <name>x</name> =<init> <expr>new <name><name>Integer</name><index>[<expr>50</expr>]</index></name></expr></init></decl>;</decl_stmt>
      <for>for( <init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name><name>x</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{
          <expr_stmt><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> = <name>i</name></expr>;</expr_stmt>
      }</block></for>
      <expr_stmt><expr><name>v</name> = new <call><name><name>Vector</name><argument_list>&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for( <init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;10</expr>;</condition> <incr><expr><name>i</name>++</expr></incr> )<block>{
          <expr_stmt><expr><call><name><name>v</name>.<name>remove</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></for>
      <for>for(<init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<call><name><name>v</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> )<block>{
          <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>( <argument><expr><call><name><name>v</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      }</block></for>
      
      <for>for( <init><decl><type><name>Integer</name></type> <name>k</name>:<range><expr><name>v</name></expr></range></decl></init>)<block>{
          <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>( <argument><expr>"##"+<name>k</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>          
      }</block></for>
      
      <decl_stmt><decl><type><name><name>ArrayCollectionLocation</name><argument_list>&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>loc</name> =<init> <expr>new <call><name><name>ArrayCollectionLocation</name><argument_list>&lt;&gt;</argument_list></name><argument_list>(<argument><expr>4</expr></argument>,<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for(<init><decl><type><name><name>Iterator</name><argument_list>&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>iter</name> =<init> <expr><call><name><name>v</name>.<name>iterator</name></name><argument_list>(<argument><expr><name>loc</name></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>iter</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr/>)<block>{
          <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>( <argument><expr>"#==#"+<call><name><name>iter</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>          
      }</block></for>
      
    }</block></function>  

}</block></class>
</unit>
