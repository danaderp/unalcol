<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\optimization\solution\SolutionOrder.java"><package>package <name><name>unalcol</name>.<name>optimization</name>.<name>solution</name></name>;</package>
<import>import <name><name>unalcol</name>.<name>sort</name>.<name>Order</name></name>;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Title: SolutionOrder&lt;/p&gt;
 * &lt;p&gt;Description: Ordering of Candidate Solutions (given by the value obtained by
 * candidate solutions on the optimization function.&lt;/p&gt;
 * &lt;p&gt;Copyright:    Copyright (c) 2010&lt;/p&gt;
 * &lt;p&gt;Company: Kunsamu&lt;/p&gt;
 * @author Jonatan Gomez
 * @version 1.0
 */</comment>
<class><specifier>public</specifier> class <name>SolutionOrder</name> <super><implements>implements <name><name>Order</name><argument_list>&lt;<argument><name>Solution</name></argument>&gt;</argument_list></name></implements></super><block>{
    <comment type="javadoc">/**
     * Returns the Class that owns the PlugIn
     * @return Class The PlugIns owner class
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>owner</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>Solution</name>.<name><name/></name></name>class</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Compares candidate solution &lt;i&gt;x&lt;/i&gt; againts candidate solution &lt;i&gt;y&lt;/i&gt;
     * using the value obtained by the candidate solutions on the optimization function.
     * @return &lt;i&gt;less than 0&lt;/i&gt; if &lt;i&gt;x&lt;/i&gt; is less than &lt;i&gt;y&lt;/i&gt; according to their
     * optimization function value, &lt;i&gt;0&lt;/i&gt; if &lt;i&gt;x&lt;/i&gt; and &lt;i&gt;y&lt;/i&gt; have the same
     * optimization function value, &lt;i&gt;greater than 0 &lt;/i&gt; if &lt;i&gt;x&lt;/i&gt; is greater than
     * &lt;i&gt;y&lt;/i&gt; according to their optimization function value.
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<param><decl><type><name>Solution</name></type> <name>x</name></decl></param>, <param><decl><type><name>Solution</name></type> <name>y</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>Double</name>.<name>compare</name></name><argument_list>(<argument><expr><call><name><name>x</name>.<name>value</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>y</name>.<name>value</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class></unit>
