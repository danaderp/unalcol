<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\types\collection\vector\sparse\SparseElement.java"><package>package <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>vector</name>.<name>sparse</name></name>;</package>

<import>import <name><name>unalcol</name>.<name>clone</name>.<name>Clone</name></name>;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Title: SparseValue&lt;/p&gt;
 * &lt;p&gt;Description: Stores a position of a vector where this position&lt;/p&gt;
 * have a value different of the default value.
 * &lt;p&gt;Copyright: Copyright (c) 2006&lt;/p&gt;
 * &lt;p&gt;Company: Kunsamu&lt;/p&gt;
 * @author Jonatan Gomez
 * @version 1.0
 */</comment>
<class><specifier>public</specifier> class <name><name>SparseElement</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name><block>{
  <comment type="javadoc">/**
   * The position of a vector
   */</comment>
  <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>index</name></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>protected</specifier> <name>T</name></type> <name>obj</name></decl>;</decl_stmt>

  <comment type="javadoc">/**
   * Constructor: Creates a SparseValue with an index
   * @param index The object stored by the index
   */</comment>
  <constructor><specifier>public</specifier> <name>SparseElement</name> <parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>, <param><decl><type><name>T</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name>.<name>index</name></name> = <name>index</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name>.<name>obj</name></name> = <name>obj</name></expr>;</expr_stmt>
  }</block></constructor>

  <comment type="javadoc">/**
   * To clone a SparseValue
   * @return The new SparseValue
   */</comment>
  <function><type><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <name><name>SparseElement</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>clone</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr>new <call><name>SparseElement</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><call><name><name>Clone</name>.<name>get</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <comment type="javadoc">/**
   * Converts the index to a string
   * @return A string with the index
   */</comment>
  <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr>"" + <name>index</name></expr>;</return>
  }</block></function>

  <comment type="javadoc">/**
   * Returns the index
   * @return The index
   */</comment>
  <function><type><specifier>public</specifier> <name>int</name></type> <name>index</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>index</name></expr>;</return>
  }</block></function>
  
  <function><type><specifier>public</specifier> <name>T</name></type> <name>value</name><parameter_list>()</parameter_list><block>{
      <return>return <expr><name>obj</name></expr>;</return>
  }</block></function>
  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>setIndex</name><parameter_list>( <param><decl><type><name>int</name></type> <name>index</name></decl></param> )</parameter_list><block>{
      <expr_stmt><expr><name><name>this</name>.<name>index</name></name> = <name>index</name></expr>;</expr_stmt>
  }</block></function>
  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>setValue</name><parameter_list>( <param><decl><type><name>T</name></type> <name>obj</name></decl></param> )</parameter_list><block>{
      <expr_stmt><expr><name><name>this</name>.<name>obj</name></name> = <name>obj</name></expr>;</expr_stmt>
  }</block></function>
  
}</block></class>
</unit>
