<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\optimization\selection\Tournament.java"><package>package <name><name>unalcol</name>.<name>optimization</name>.<name>selection</name></name>;</package>

<import>import <name><name>unalcol</name>.<name>optimization</name>.<name>solution</name>.<name>Solution</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>optimization</name></name>.*;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>vector</name></name>.*;</import>
<import>import <name><name>unalcol</name>.<name>random</name>.<name>integer</name>.<name>UniformIntegerGenerator</name></name>;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Title: Tournament&lt;/p&gt;
 * &lt;p&gt;Description: A tournament selection strategy. In this strategy each individual that
 * is choosen is selected from a group of individuals. The group of individuals are choosen
 * randomly from the population with a uniform probability. From this group of individuals
 * one is choosen using the OptimizationFunction as the probability to win the game.&lt;/p&gt;
 * &lt;p&gt;Copyright: Copyright (c) 2010&lt;/p&gt;
 * &lt;p&gt;Company: Kunsamu&lt;/p&gt;
 * @author Jonatan Gomez
 * @version 1.0
 */</comment>
 <class><specifier>public</specifier> class <name><name>Tournament</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name> <super><extends>extends <name><name>Uniform</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></extends></super><block>{
  <comment type="javadoc">/**
   * The tournament size
   */</comment>
  <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>m</name> =<init> <expr>4</expr></init></decl>;</decl_stmt>

  <comment type="javadoc">/**
   * Selection mechanism used for selecting the tournament winner
   */</comment>
  <decl_stmt><decl><type><specifier>protected</specifier> <name><name>Selection</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>inner</name> =<init> <expr>new <call><name><name>Elitism</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr>1.0</expr></argument>,<argument><expr>0.0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="javadoc">/**
   * Constructor: Create a tournament selection strategy with m players.
   * @param m The number of players in the tournament
   */</comment>
  <constructor><specifier>public</specifier> <name>Tournament</name><parameter_list>( <param><decl><type><name>int</name></type> <name>m</name></decl></param> )</parameter_list><block>{
    <expr_stmt><expr><name><name>this</name>.<name>m</name></name> = <name>m</name></expr>;</expr_stmt>
  }</block></constructor>

  <comment type="javadoc">/**
   * Constructor: Create a tournament selection strategy with m players, using the given
   * selection strategy for selecting the tournament winner.
   * @param m The number of players in the tournament
   * @param s The inner selection stÂ¿rategy for determining the tournament winner
   */</comment>
  <constructor><specifier>public</specifier> <name>Tournament</name><parameter_list>( <param><decl><type><name>int</name></type> <name>m</name></decl></param>, <param><decl><type><name><name>Selection</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>s</name></decl></param> )</parameter_list><block>{
    <expr_stmt><expr><name><name>this</name>.<name>m</name></name> = <name>m</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name>.<name>inner</name></name> = <name>s</name></expr>;</expr_stmt>
  }</block></constructor>

  <comment type="javadoc">/**
   * Choose an individuals from the population
   * @param generator A uniform random generator for selecting the tournament players
   * @param population Population source of the selection process
   * @return Index of the tournament winner individual
   */</comment>
  <function><type><annotation>@<name>Override</name></annotation>
  <specifier>protected</specifier> <name><name>Solution</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>choose_one</name><parameter_list>( <param><decl><type><name>UniformIntegerGenerator</name></type> <name>generator</name></decl></param>,
                                    <param><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name><name>Solution</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>population</name></decl></param> )</parameter_list><block>{
    <decl_stmt><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name><name>Solution</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>candidates</name> =<init> <expr>new <call><name><name>Vector</name><argument_list>&lt;<argument><name><name>Solution</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for( <init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name>m</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> )<block>{
      <expr_stmt><expr><call><name><name>candidates</name>.<name>add</name></name><argument_list>( <argument><expr><call><name><name>population</name>.<name>get</name></name><argument_list>( <argument><expr><call><name><name>generator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><call><name><name>inner</name>.<name>choose_one</name></name><argument_list>(<argument><expr><name>candidates</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>
}</block></class></unit>
