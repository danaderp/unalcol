<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\reflect\loader\tool\MultiJarLoader.java"><package>package <name><name>unalcol</name>.<name>reflect</name>.<name>loader</name>.<name>tool</name></name>;</package>

<import>import <name><name>unalcol</name>.<name>reflect</name>.<name>loader</name></name>.*;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>vector</name></name>.*;</import>
<import>import <name><name>java</name>.<name>io</name></name>.*;</import>
<import>import <name><name>java</name>.<name>net</name></name>.*;</import>


<comment type="javadoc">/**
 * &lt;p&gt;Keep Track of Jars and Zip Files containing (possibly) class files and resources&lt;/p&gt;
 *
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 */</comment>
<class><specifier>public</specifier> class <name>MultiJarLoader</name> <super><implements>implements <name>LoaderTool</name>, <name>ResourceLoaderTool</name></implements></super><block>{
    <comment type="javadoc">/**
     * Set of loaded jar files
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>JarLoader</name></argument>&gt;</argument_list></name></type> <name>jarFiles</name> =<init> <expr>new <call><name><name>Vector</name><argument_list>&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a Jars file manager
     */</comment>
    <constructor><specifier>public</specifier> <name>MultiJarLoader</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <comment type="javadoc">/**
     * Adds a jar file to the resources
     * @param f Jar file to be added
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>String</name></type> <name>f</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>add</name><argument_list>( <argument><expr>new <call><name>File</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a jar file to the resources
     * @param f Jar file to be added
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>File</name></type> <name>f</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>f</name>.<name>getName</name></name><argument_list>()</argument_list></call>.<call><name>endsWith</name><argument_list>(<argument><expr>".jar"</expr></argument>)</argument_list></call> || <call><name><name>f</name>.<name>getName</name></name><argument_list>()</argument_list></call>.<call><name>endsWith</name><argument_list>(<argument><expr>".zip"</expr></argument>)</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name><name>jarFiles</name>.<name>add</name></name><argument_list>( <argument><expr>new <call><name>JarLoader</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Loads the jar files from a path
     * @param path Jar Files path
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>load</name><parameter_list>(<param><decl><type><name>String</name></type> <name>path</name></decl></param>)</parameter_list> <block>{
        <comment type="line">//find all JAR files on the path and subdirectories</comment>
        <decl_stmt><decl><type><name>File</name></type> <name>f</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>list</name> =<init> <expr><call><name><name>f</name>.<name>list</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>list</name> == <name>null</name></expr>)</condition><then>
            <return>return;</return></then></if>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>list</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>f</name> = new <call><name>File</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name><name>f</name>.<name>isFile</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then><else>else<block>{
                <if>if<condition>( <expr><call><name><name>f</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr> )</condition><then><block>{
                    <expr_stmt><expr><call><name>load</name><argument_list>( <argument><expr><call><name><name>f</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></else></if>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a resource from the path or JAR files as a URL
     * @param name a resource name.
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>URL</name></type> <name>getResource</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>URL</name></type> <name>url</name>=<init><expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <while>while<condition>( <expr><name>i</name>&lt;<call><name><name>jarFiles</name>.<name>size</name></name><argument_list>()</argument_list></call> &amp;&amp; <name>url</name>==<name>null</name></expr>)</condition> <block>{
            <expr_stmt><expr><name>url</name> = <call><name><name>jarFiles</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>.<call><name>getResource</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>i</name>++</expr>;</expr_stmt>
        }</block></while>
        <return>return <expr><name>url</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a resource from the path or JAR files as an InputStream
     * @param name a resource name.
     * @return a resource from the path or JAR files as an InputStream
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>InputStream</name></type> <name>getResourceAsStream</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>InputStream</name></type> <name>is</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <while>while<condition>( <expr><name>i</name>&lt;<call><name><name>jarFiles</name>.<name>size</name></name><argument_list>()</argument_list></call> &amp;&amp; <name>is</name>==<name>null</name></expr>)</condition> <block>{
            <expr_stmt><expr><name>is</name> = <call><name><name>jarFiles</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>.<call><name>getResourceAsStream</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>i</name>++</expr>;</expr_stmt>
        }</block></while>
        <return>return <expr><name>is</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/** Loads the class bytes from JAR files in the specific path
     * @param name Name of the resource
     * @return Class bytes from a file if possible, null otherwise.
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>byte</name><index>[]</index></type> <name>loadBytes</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>classBytes</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <while>while<condition>( <expr><name>i</name>&lt;<call><name><name>jarFiles</name>.<name>size</name></name><argument_list>()</argument_list></call> &amp;&amp; <name>classBytes</name>==<name>null</name></expr>)</condition> <block>{
            <expr_stmt><expr><name>classBytes</name> = <call><name><name>jarFiles</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>.<call><name>loadBytes</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>i</name>++</expr>;</expr_stmt>
        }</block></while>
        <return>return <expr><name>classBytes</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Gets the set of Jar Files in the path
     * @return Jar Files in the path
     */</comment>
    <function><type><specifier>public</specifier> <name>JarLoader</name><index>[]</index></type> <name>jarFiles</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name>JarLoader</name><index>[]</index></type> <name>jars</name> =<init> <expr>new <name><name>JarLoader</name><index>[<expr><call><name><name>jarFiles</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for( <init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name><name>jars</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> )<block>{
            <expr_stmt><expr><name><name>jars</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name><name>jarFiles</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>jars</name></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list><block>{
        <expr_stmt><expr><call><name><name>jarFiles</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class></unit>
