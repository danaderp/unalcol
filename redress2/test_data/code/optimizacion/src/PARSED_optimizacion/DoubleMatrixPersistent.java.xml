<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\types\real\matrix\DoubleMatrixPersistent.java"><package>package <name><name>unalcol</name>.<name>types</name>.<name>real</name>.<name>matrix</name></name>;</package>
<import>import <name><name>java</name>.<name>io</name></name>.*;</import>

<import>import <name><name>unalcol</name>.<name>io</name></name>.*;</import>


<comment type="javadoc">/**
 * &lt;p&gt;Title: DoubleMatrixPersistent &lt;/p&gt;
 * &lt;p&gt;Description: A double matrix persistent method&lt;/p&gt;
 * &lt;p&gt;Copyright: Copyright (c) 2009&lt;/p&gt;
 * &lt;p&gt;Company: Kunsamu&lt;/p&gt;
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 */</comment>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>DoubleMatrixPersistent</name> <super><implements>implements <name>WriteService</name></implements></super><block>{
    <decl_stmt><decl><type><specifier>protected</specifier> <name>double</name><index>[]</index><index>[]</index></type> <name>theBase</name> =<init> <expr>new <name><name>double</name><index>[<expr>0</expr>]</index><index>[]</index></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Returns the Class that owns the PlugIn
     * @return Class The PlugIns owner class
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>owner</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>theBase</name>.<name>getClass</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Writes an array to the given writer
     * @param obj array to write
     * @param out The writer object
     * @throws IOException IOException
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>write</name><parameter_list>(<param><decl><type><name><name>double</name><index>[]</index><index>[]</index></name></type> <name>obj</name></decl></param>, <param><decl><type><name>Writer</name></type> <name>out</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>;</function_decl>

    <comment type="javadoc">/**
     * Writes an object to the given writer (The object should has a write method)
     * @param obj Object to write
     * @param out The writer object
     * @throws IOException IOException
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>, <param><decl><type><name>Writer</name></type> <name>out</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws><block>{
        <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr>(<name><name>double</name><index>[]</index><index>[]</index></name>)<name>obj</name></expr></argument>, <argument><expr><name>out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
