<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\random\util\BooleanGenerator.java"><package>package <name><name>unalcol</name>.<name>random</name>.<name>util</name></name>;</package>

<import>import <name><name>unalcol</name>.<name>random</name>.<name>Random</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>random</name>.<name>raw</name>.<name>RawGenerator</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>random</name>.<name>rngpack</name>.<name>RanMT</name></name>;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Generates boolean values with a given probability&lt;/p&gt;
 *
 * &lt;p&gt;Copyright: Copyright (c) 2009&lt;/p&gt;
 *
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 */</comment>
<class><specifier>public</specifier> class <name>BooleanGenerator</name> <block>{
    
    <decl_stmt><decl><type><specifier>protected</specifier> <name>RawGenerator</name></type> <name>g</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Probability of generating a &lt;i&gt;false&lt;/i&gt; value
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>double</name></type> <name>falseProbability</name> =<init> <expr>0.5</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a boolean generator with the same probability of generating a &lt;i&gt;true&lt;/i&gt; and &lt;i&gt;false&lt;i&gt; value
     */</comment>
    <constructor><specifier>public</specifier> <name>BooleanGenerator</name><parameter_list>()</parameter_list><block>{
        <expr_stmt><expr><name>g</name> = <call><name><name>Random</name>.<name>get</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a boolean generator with the given probability of generating a &lt;i&gt;false&lt;/i&gt; value (1.0-falseProbability) is
     * the probability of generating a &lt;i&gt;true&lt;/i&gt; value
     * @param falseProbability Probability of generating a &lt;i&gt;false&lt;/i&gt; value
     */</comment>
    <constructor><specifier>public</specifier> <name>BooleanGenerator</name><parameter_list>(<param><decl><type><name>double</name></type> <name>falseProbability</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>falseProbability</name></name> = <name>falseProbability</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>g</name> = <call><name><name>Random</name>.<name>get</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a boolean generator with the given probability of generating a &lt;i&gt;false&lt;/i&gt; value (1.0-falseProbability) is
     * the probability of generating a &lt;i&gt;true&lt;/i&gt; value
     * @param falseProbability Probability of generating a &lt;i&gt;false&lt;/i&gt; value
     */</comment>
    <constructor><specifier>public</specifier> <name>BooleanGenerator</name><parameter_list>(<param><decl><type><name>double</name></type> <name>falseProbability</name></decl></param>, <param><decl><type><name>RawGenerator</name></type> <name>_g</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>g</name> = <name>_g</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>falseProbability</name></name> = <name>falseProbability</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Produces a boolean value according to the stored probability distribution
     * @return A boolean value according to the stored probability distribution
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>next</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>(<call><name><name>g</name>.<name>next</name></name><argument_list>()</argument_list></call>&gt;=<name>falseProbability</name>)</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a set of random boolean values
     * @param v Array where boolean values will be stored
     * @param m The total number of random boolean values
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>generate</name><parameter_list>(<param><decl><type><name><name>boolean</name><index>[]</index></name></type> <name>v</name></decl></param>, <param><decl><type><name>int</name></type> <name>m</name></decl></param>)</parameter_list> <block>{
      <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>m</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <expr_stmt><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name><name>this</name>.<name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a set of random boolean values
     * @param m The total number of random boolean values
     * @return A set of m random boolean values
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name><index>[]</index></type> <name>generate</name><parameter_list>(<param><decl><type><name>int</name></type> <name>m</name></decl></param>)</parameter_list> <block>{
      <decl_stmt><decl><type><name>boolean</name><index>[]</index></type> <name>v</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>m</name> &gt; 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><name>v</name> = new <name><name>boolean</name><index>[<expr><name>m</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>generate</name><argument_list>( <argument><expr><name>v</name></expr></argument>, <argument><expr><name>m</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <return>return <expr><name>v</name></expr>;</return>
    }</block></function>
    
    <function><type><specifier>public</specifier> <name>BooleanGenerator</name></type> <name>new_instance</name><parameter_list>()</parameter_list><block>{
        <return>return <expr>new <call><name>BooleanGenerator</name><argument_list>(<argument><expr><name>falseProbability</name></expr></argument>, <argument><expr><call><name><name>g</name>.<name>new_instance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class></unit>
