<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\types\collection\vector\ImmutableVector.java"><package>package <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>vector</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>array</name></name>.*;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>collection</name></name>.*;</import>

<import>import <name><name>java</name>.<name>util</name>.<name>NoSuchElementException</name></name>;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Title: &lt;/p&gt;
 *
 * &lt;p&gt;Description: &lt;/p&gt;
 *
 * &lt;p&gt;Copyright: Copyright (c) 2009&lt;/p&gt;
 *
 * &lt;p&gt;Company: Kunsamu&lt;/p&gt;
 *
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 */</comment>
<class><specifier>public</specifier> class <name><name>ImmutableVector</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name> <super><implements>implements <name><name>ArrayCollection</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name>, <name><name>SearchCollection</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></implements></super> <block>{
    <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>T</name><index>[]</index></type> <name>buffer</name></decl>;</decl_stmt>
    <constructor><specifier>public</specifier> <name>ImmutableVector</name><parameter_list>( <param><decl><type><name><name>T</name><index>[]</index></name></type> <name>buffer</name></decl></param> )</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>buffer</name></name> = <name>buffer</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>size</name> = (<name>buffer</name>!=<name>null</name>)?<name><name>buffer</name>.<name>length</name></name>:0</expr>;</expr_stmt>
    }</block></constructor>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>T</name></type> <name>get</name><parameter_list>( <param><decl><type><name>int</name></type> <name>index</name></decl></param> )</parameter_list> <throws>throws <argument><expr><name>IndexOutOfBoundsException</name></expr></argument></throws><block>{
        <return>return <expr><name><name>buffer</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>int</name></type> <name>size</name><parameter_list>()</parameter_list><block>{
        <return>return <expr><name>size</name></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>boolean</name></type> <name>isEmpty</name><parameter_list>()</parameter_list><block>{
        <return>return <expr>(<name>size</name>==0)</expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>iterator</name><parameter_list>()</parameter_list><block>{
        <return>return <expr>new <call><name>ArrayCollectionIterator</name><argument_list>( <argument><expr>0</expr></argument>, <argument><expr><name>this</name></expr></argument> )</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>iterator</name><parameter_list>( <param><decl><type><name><name>Location</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>locator</name></decl></param> )</parameter_list><block>{
        <if>if<condition>( <expr><name>locator</name> <name>instanceof</name> <name>ArrayCollectionLocation</name></expr> )</condition><then><block>{
            <return>return <expr>new <call><name>ArrayCollectionIterator</name><argument_list>( <argument><expr>(<name>ArrayCollectionLocation</name>)<name>locator</name></expr></argument> )</argument_list></call></expr>;</return>
        }</block></then></if>
        <return>return <expr><name>null</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>findIndex</name><parameter_list>( <param><decl><type><name>T</name></type> <name>data</name></decl></param> )</parameter_list><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>k</name>=<init><expr>0</expr></init></decl>;</decl_stmt>
        <while>while<condition>( <expr><name>k</name>&lt;<name>size</name> &amp;&amp; !<call><name><name>data</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>buffer</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{ <expr_stmt><expr><name>k</name>++</expr>;</expr_stmt> }</block></while>
        <return>return <expr>(<name>k</name>==<name>size</name>)?-1:<name>k</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Locates the given object in the structure
     * @param data Data object to be located
     * @return A data iterator starting at the given object (when the next method is called),
     * If the element is not in the data strucuture the hasNext method will return an exception
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name><name>Location</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>find</name><parameter_list>(<param><decl><type><name>T</name></type> <name>data</name></decl></param>)</parameter_list><block>{
        <return>return <expr>new <call><name>ArrayCollectionLocation</name><argument_list>( <argument><expr><call><name>findIndex</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument> )</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Determines if the given object belongs to the structure
     * @param data Data object to be located
     * @return &lt;i&gt;true&lt;/i&gt;If the objects belongs to the structure, &lt;i&gt;false&gt;otherwise&lt;/i&gt;
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>boolean</name></type> <name>contains</name><parameter_list>( <param><decl><type><name>T</name></type> <name>data</name></decl></param> )</parameter_list><block>{
       <try>try<block>{
           <expr_stmt><expr><call><name>find</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call>.<call><name>get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           <return>return <expr>true</expr>;</return>
       }</block><catch>catch( <param><decl><type><name>NoSuchElementException</name></type> <name>e</name></decl></param> )<block>{
           <return>return <expr>false</expr>;</return>
       }</block></catch></try>
    }</block></function>
}</block></class>
</unit>
