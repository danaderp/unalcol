<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\types\collection\vector\SortedVectorSearch.java"><package>package <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>vector</name></name>;</package>


<import>import <name><name>unalcol</name>.<name>sort</name></name>.*;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Title: SortedVectorSearch&lt;/p&gt;
 * &lt;p&gt;Description: Searching algorithms for sorted vectors&lt;/p&gt;
 * &lt;p&gt;Copyright: Copyright (c) 2009&lt;/p&gt;
 * &lt;p&gt;Company: Kunsamu&lt;/p&gt;
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 */</comment>
<class><specifier>public</specifier> class <name><name>SortedVectorSearch</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name> <block>{
    <decl_stmt><decl><type><name><name>Search</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>search</name> =<init> <expr>new <call><name><name>Search</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Searches for the position of the given element. The vector should be sorted
     * @param sorted Vector of elements (should be sorted)
     * @param x Element to be located
     * @param order Order used for locating the object
     * @return The position of the given object, -1 if the given object is not in the vector
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>find</name><parameter_list>(<param><decl><type><name><name>ImmutableVector</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>sorted</name></decl></param>, <param><decl><type><name>T</name></type> <name>x</name></decl></param>, <param><decl><type><name><name>Order</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>order</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>search</name>.<name>find</name></name><argument_list>(<argument><expr><name><name>sorted</name>.<name>buffer</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>sorted</name>.<name>size</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>order</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Searches for the position of the given element. The vector should be sorted
     * @param sorted Vector of elements (should be sorted)
     * @param x Element to be located
     * @param order Order used for locating the object
     * @return The position of the given object, -1 if the given object is not in the vector
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>find</name><parameter_list>(<param><decl><type><name><name>ImmutableVector</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>sorted</name></decl></param>, <param><decl><type><name>int</name></type> <name>start</name></decl></param>, <param><decl><type><name>int</name></type> <name>end</name></decl></param>, <param><decl><type><name>T</name></type> <name>x</name></decl></param>, <param><decl><type><name><name>Order</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>order</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>search</name>.<name>find</name></name><argument_list>(<argument><expr><name><name>sorted</name>.<name>buffer</name></name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr>(<name>end</name>&lt;=<name><name>sorted</name>.<name>size</name></name>)?<name>end</name>:<name><name>sorted</name>.<name>size</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>order</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Determines if the sorted vector contains the given element (according to the associated order)
     * @param sorted Vector of elements (should be sorted)
     * @param x Element to be located
     * @param order Order used for locating the object
     * @return &lt;i&gt;true&lt;/i&gt; if the element belongs to the sorted vector, &lt;i&gt;false&lt;/i&gt; otherwise
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>contains</name><parameter_list>(<param><decl><type><name><name>ImmutableVector</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>sorted</name></decl></param>, <param><decl><type><name>T</name></type> <name>x</name></decl></param>, <param><decl><type><name><name>Order</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>order</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>(<call><name>find</name><argument_list>(<argument><expr><name>sorted</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>sorted</name>.<name>size</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>order</name></expr></argument>)</argument_list></call> != -1)</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Determines if the sorted vector contains the given element (according to the associated order)
     * @param sorted Vector of elements (should be sorted)
     * @param x Element to be located
     * @param order Order used for locating the object
     * @return &lt;i&gt;true&lt;/i&gt; if the element belongs to the sorted vector, &lt;i&gt;false&lt;/i&gt; otherwise
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>contains</name><parameter_list>(<param><decl><type><name><name>ImmutableVector</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>sorted</name></decl></param>, <param><decl><type><name>int</name></type> <name>start</name></decl></param>, <param><decl><type><name>int</name></type> <name>end</name></decl></param>, <param><decl><type><name>T</name></type> <name>x</name></decl></param>, <param><decl><type><name><name>Order</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>order</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>(<call><name>find</name><argument_list>(<argument><expr><name>sorted</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr>(<name>end</name>&lt;=<name><name>sorted</name>.<name>size</name></name>)?<name>end</name>:<name><name>sorted</name>.<name>size</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>order</name></expr></argument>)</argument_list></call> != -1)</expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     * Searches for the position of the first element in the vector that is bigger
     * than the given element. The vector should be sorted
     * @param sorted Vector of elements (should be sorted)
     * @param x Element to be located
     * @param order verify to order
     * @return Position of the object that is bigger than the given element
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>findRight</name><parameter_list>(<param><decl><type><name><name>ImmutableVector</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>sorted</name></decl></param>, <param><decl><type><name>T</name></type> <name>x</name></decl></param>, <param><decl><type><name><name>Order</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>order</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>search</name>.<name>findRight</name></name><argument_list>(<argument><expr><name><name>sorted</name>.<name>buffer</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>sorted</name>.<name>size</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>order</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     * Searches for the position of the first element in the vector that is bigger
     * than the given element. The vector should be sorted
     * @param sorted Vector of elements (should be sorted)
     * @param x Element to be located
     * @param order verify to order
     * @return Position of the object that is bigger than the given element
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>findRight</name><parameter_list>(<param><decl><type><name><name>ImmutableVector</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>sorted</name></decl></param>, <param><decl><type><name>int</name></type> <name>start</name></decl></param>, <param><decl><type><name>int</name></type> <name>end</name></decl></param>, <param><decl><type><name>T</name></type> <name>x</name></decl></param>, <param><decl><type><name><name>Order</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>order</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>search</name>.<name>findRight</name></name><argument_list>(<argument><expr><name><name>sorted</name>.<name>buffer</name></name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr>(<name>end</name>&lt;=<name><name>sorted</name>.<name>size</name></name>)?<name>end</name>:<name><name>sorted</name>.<name>size</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>order</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Searches for the position of the last element in the vector that is smaller
     * than the element given. The vector should be sorted
     * @param sorted Vector of elements (should be sorted)
     * @param x Element to be located
     * @param order Order used for locating the element
     * @return Position of the object that is smaller than the given element
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>findLeft</name><parameter_list>(<param><decl><type><name><name>ImmutableVector</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>sorted</name></decl></param>, <param><decl><type><name>T</name></type> <name>x</name></decl></param>, <param><decl><type><name><name>Order</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>order</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>search</name>.<name>findLeft</name></name><argument_list>(<argument><expr><name><name>sorted</name>.<name>buffer</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>sorted</name>.<name>size</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>order</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Searches for the position of the last element in the vector that is smaller
     * than the element given. The vector should be sorted
     * @param sorted Vector of elements (should be sorted)
     * @param x Element to be located
     * @param order Order used for locating the element
     * @return Position of the object that is smaller than the given element
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>findLeft</name><parameter_list>(<param><decl><type><name><name>ImmutableVector</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>sorted</name></decl></param>, <param><decl><type><name>T</name></type> <name>x</name></decl></param>, <param><decl><type><name>int</name></type> <name>start</name></decl></param>, <param><decl><type><name>int</name></type> <name>end</name></decl></param>, <param><decl><type><name><name>Order</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>order</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>search</name>.<name>findLeft</name></name><argument_list>(<argument><expr><name><name>sorted</name>.<name>buffer</name></name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr>(<name>end</name>&lt;=<name><name>sorted</name>.<name>size</name></name>)?<name>end</name>:<name><name>sorted</name>.<name>size</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>order</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
