<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\reflect\loader\Loader.java"><package>package <name><name>unalcol</name>.<name>reflect</name>.<name>loader</name></name>;</package>

<import>import <name><name>unalcol</name>.<name>reflect</name>.<name>util</name></name>.*;</import>
<import>import <name><name>unalcol</name>.<name>reflect</name>.<name>loader</name>.<name>tool</name></name>.*;</import>
<import>import <name><name>java</name>.<name>io</name></name>.*;</import>
<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name></name>.*;</import>
<import>import <name><name>java</name>.<name>net</name></name>.*;</import>
<import>import <name><name>java</name>.<name>util</name></name>.*;</import>

<comment type="javadoc">/**
 * &lt;p&gt;A class loader for the unalcol library (reflection).
 * Unalcol uses this class loader to load and compile resources from an specific directory.
 * This class loader will also load classes and resources from JAR files. Specially designed for loading
 * Services (PlugIns)&lt;/p&gt;
 *
 * &lt;p&gt; The class loader searches for classes and resources in the following order:
 * &lt;ol&gt;
 *  &lt;li&gt; Source directory&lt;/li&gt;
 *  &lt;li&gt; Classes directory&lt;/li&gt;
 *  &lt;li&gt; JAR files in the libraries directory&lt;/li&gt;
 *  &lt;li&gt; Application directory&lt;/li&gt;
 * &lt;/ol&gt;
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 */</comment>
<class><specifier>public</specifier> class <name>Loader</name> <super><extends>extends <name>ClassLoader</name></extends></super> <block>{

    <comment type="javadoc">/**
     * Cache of compiled and loaded resources
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Hashtable</name></type> <name>cache</name> =<init> <expr>new <call><name>Hashtable</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Set of loaded jar files
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>MultiJarLoader</name></type> <name>libraries</name> =<init>  <expr>new <call><name>MultiJarLoader</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Class Loader from java files (compile and load Java files, if possible) located in a directory
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>SourcePathLoader</name></type> <name>source</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Class Loader from class files located in a directory
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>PathLoader</name></type> <name>classes</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Class Loader from class files located in the application directory
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>MultiPathLoader</name></type> <name>main</name> =<init> <expr>new <call><name>MultiPathLoader</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Resources Manager located in a directory
     */</comment>
    <decl_stmt><decl><type><name>ResourcePathLoader</name></type> <name>resources</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a non-initialize Loader.
     */</comment>
    <constructor><specifier>public</specifier> <name>Loader</name><parameter_list>()</parameter_list><block>{
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>Loader</name><parameter_list>(<param><decl><type><name>ClassLoader</name></type> <name>parent</name></decl></param>)</parameter_list><block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>init</name><parameter_list>()</parameter_list><block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>main</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>libraries</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>cache</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>classPath</name> =<init> <expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"java.class.path"</expr></argument>)</argument_list></call>.<call><name>split</name><argument_list>(<argument><expr>""+<call><name><name>JavaOS</name>.<name>pathSeparator</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for( <init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name><name>classPath</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{
            <if>if<condition>( <expr><name><name>classPath</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>endsWith</name><argument_list>(<argument><expr>".jar"</expr></argument>)</argument_list></call> || <name><name>classPath</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>endsWith</name><argument_list>(<argument><expr>".zip"</expr></argument>)</argument_list></call></expr> )</condition><then><block>{
                <expr_stmt><expr><call><name><name>this</name>.<name>libraries</name>.<name>add</name></name><argument_list>(<argument><expr><name><name>classPath</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then><else>else<block>{
                <expr_stmt><expr><call><name><name>this</name>.<name>main</name>.<name>add</name></name><argument_list>(<argument><expr><name><name>classPath</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Initializes the ClassLoader that searches in the directory path
     * passed as a parameter. The constructor automatically finds all JAR and ZIP
     * files in the path and first level of subdirectories. The JAR and ZIP files
     * are stored in a Vector for future searches.
     * @param libs Libraries Path
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>( <param><decl><type><name>String</name></type> <name>libs</name></decl></param> )</parameter_list><block>{
        <if>if<condition>( <expr><name>libs</name> != <name>null</name></expr> )</condition><then><block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>libraries</name>.<name>load</name></name><argument_list>(<argument><expr><call><name><name>JavaOS</name>.<name>absolutePath</name></name><argument_list>(<argument><expr><name>libs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Initializes the ClassLoader that searches in the directory path
     * passed as a parameter. The constructor automatically finds all JAR and ZIP
     * files in the path and first level of subdirectories. The JAR and ZIP files
     * are stored in a Vector for future searches.
     * @param libs Libraries Path
     * @param classes Classes Path
     * @param resources Resources Path
     * @param sources Sources Path
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>set</name><parameter_list>( <param><decl><type><name>String</name></type> <name>libs</name></decl></param>, <param><decl><type><name>String</name></type> <name>classes</name></decl></param>, <param><decl><type><name>String</name></type> <name>resources</name></decl></param>,
                     <param><decl><type><name>String</name></type> <name>sources</name></decl></param> )</parameter_list><block>{
        <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if>if<condition>( <expr><name>libs</name> != <name>null</name></expr> )</condition><then><block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>libraries</name>.<name>load</name></name><argument_list>(<argument><expr><call><name><name>JavaOS</name>.<name>absolutePath</name></name><argument_list>(<argument><expr><name>libs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>resources</name></name> = new <call><name>ResourcePathLoader</name><argument_list>(<argument><expr><call><name><name>JavaOS</name>.<name>absolutePath</name></name><argument_list>(<argument><expr><name>resources</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>source</name></name> = new <call><name>SourcePathLoader</name><argument_list>(<argument><expr><call><name><name>JavaOS</name>.<name>absolutePath</name></name><argument_list>(<argument><expr><name>sources</name></expr></argument>)</argument_list></call></expr></argument>,
                                                <argument><expr><call><name><name>JavaOS</name>.<name>absolutePath</name></name><argument_list>(<argument><expr><name>sources</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>libraries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>classes</name></name> = new <call><name>PathLoader</name><argument_list>(<argument><expr><call><name><name>JavaOS</name>.<name>absolutePath</name></name><argument_list>(<argument><expr><name>classes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a resource from the path or JAR files as a URL
     * @param name a resource name.
     */</comment>
    <function><type><specifier>public</specifier> <name>URL</name></type> <name>getResource</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// try system loader first</comment>
        <decl_stmt><decl><type><name>URL</name></type> <name>res</name> =<init> <expr><call><name><name>super</name>.<name>getResource</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>res</name> == <name>null</name></expr>)</condition><then> <block>{
            <comment type="line">// try resources path</comment>
            <try>try <block>{
                <expr_stmt><expr><name>res</name> = <call><name><name>resources</name>.<name>getResource</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{}</block></catch></try>
            <if>if <condition>(<expr><name>res</name> == <name>null</name></expr>)</condition><then> <block>{
                <comment type="line">// otherwise look in JAR files</comment>
                <return>return <expr><name>res</name> = <call><name><name>libraries</name>.<name>getResource</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>
        }</block></then></if>
        <return>return <expr><name>res</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a resource from the path or JAR files as an InputStream
     * @param name a resource name.
     * @return a resource from the path or JAR files as an InputStream
     */</comment>
    <function><type><specifier>public</specifier> <name>InputStream</name></type> <name>getResourceAsStream</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <comment type="line">//try the system loader first</comment>
        <decl_stmt><decl><type><name>InputStream</name></type> <name>is</name> =<init> <expr><call><name><name>super</name>.<name>getResourceAsStream</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>is</name> == <name>null</name></expr>)</condition><then> <block>{
            <comment type="line">// try resources path</comment>
            <try>try <block>{
                <expr_stmt><expr><name>is</name> = <call><name><name>resources</name>.<name>getResourceAsStream</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{}</block></catch></try>
            <if>if <condition>(<expr><name>is</name> == <name>null</name></expr>)</condition><then> <block>{
                <comment type="line">//look in JAR files</comment>
                <expr_stmt><expr><name>is</name> = <call><name><name>libraries</name>.<name>getResourceAsStream</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <return>return <expr><name>is</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a Class from the path or JAR files. Classes are automatically resolved.
     * @param className a class name without the .class extension.
     * @return a Class from the path or JAR files. Classes are automatically resolved.
     */</comment>
    <function><type><specifier>public</specifier> <name>Class</name></type> <name>loadArrayClass</name><parameter_list>(<param><decl><type><name>String</name></type> <name>className</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>k</name> =<init> <expr><call><name><name>className</name>.<name>lastIndexOf</name></name><argument_list>(<argument><expr>"["</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>k</name> &gt;= 0</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>index</name> =<init> <expr><call><name><name>className</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"@"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>index</name> &gt;= 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>className</name> = <call><name><name>className</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <return>return <expr><call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr><name>className</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name>loadClass</name><argument_list>(<argument><expr><name>className</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a Class from the path or JAR files. Classes are automatically resolved.
     * @param className a class name without the .class extension.
     * @return a Class from the path or JAR files. Classes are automatically resolved.
     */</comment>
    <function><type><specifier>public</specifier> <name>Class</name></type> <name>loadClass</name><parameter_list>(<param><decl><type><name>String</name></type> <name>className</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{
        <comment type="line">// If trying to load the Loader class then use the system class already loaded</comment>
        <decl_stmt><decl><type><name>Class</name></type> <name>result</name> =<init> <expr><call><name>findLoadedClass</name><argument_list>(<argument><expr><name>className</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if<condition>( <expr><name>result</name> != <name>null</name></expr> )</condition><then><block>{
            <return>return <expr><name>result</name></expr>;</return>
        }</block></then></if>

        <expr_stmt><expr><name>result</name> = (<name>Class</name>)<call><name><name>cache</name>.<name>get</name></name><argument_list>(<argument><expr><name>className</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>( <expr><name>result</name> != <name>null</name></expr> )</condition><then> <return>return <expr><name>result</name></expr>;</return></then></if>
        
        <if>if<condition>( <expr>!<call><name>getClass</name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"java.system.class.loader"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> )</condition><then><block>{
            <expr_stmt><expr><name>result</name> = <call><name>loadSystemClass</name><argument_list>(<argument><expr><name>className</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if<condition>( <expr><name>result</name> != <name>null</name></expr> )</condition><then><block>{
            <return>return <expr><name>result</name></expr>;</return>
        }</block></then></if>
        <if>if<condition>( <expr><call><name><name>className</name>.<name>equals</name></name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
            <return>return <expr><call><name>loadSystemClass</name><argument_list>(<argument><expr><name>className</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>className</name>.<name>length</name></name><argument_list>()</argument_list></call> &gt; 0 &amp;&amp; <call><name><name>className</name>.<name>charAt</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call> == '['</expr>)</condition><then>
            <return>return <expr><call><name>loadArrayClass</name><argument_list>(<argument><expr><name>className</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
        <return>return <expr>(<call><name>loadClass</name><argument_list>(<argument><expr><name>className</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call>)</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Loads a Class from the system class loader if possible
     * @param className Name of the class to be loaded
     * @return The class object if the System Class Loader can load it, &lt;i&gt;null&lt;/i&gt; otherwise.
     */</comment>
    <function><type><specifier>public</specifier> <name>Class</name></type> <name>loadSystemClass</name><parameter_list>(<param><decl><type><name>String</name></type> <name>className</name></decl></param>)</parameter_list> <block>{
        <try>try <block>{
            <return>return <expr><call><name>getParent</name><argument_list>()</argument_list></call>.<call><name>loadClass</name><argument_list>(<argument><expr><name>className</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a Class from the path or JAR files. Classes are resolved if resolveIt is true.
     * @param className a String class name without the .class extension.
     *        resolveIt a boolean (should almost always be true)
     * @return a Class from the path or JAR files. Classes are resolved if resolveIt is true.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>Class</name></type> <name>loadClass</name><parameter_list>(<param><decl><type><name>String</name></type> <name>className</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>resolveIt</name></decl></param>)</parameter_list> <throws>throws
            <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{

        <comment type="line">// If trying to load the Loader class then use the system class already loaded</comment>
        <if>if<condition>( <expr><call><name><name>className</name>.<name>equals</name></name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
            <return>return <expr><call><name>loadSystemClass</name><argument_list>(<argument><expr><name>className</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>Class</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if<condition>( <expr>!<call><name>getClass</name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"java.system.class.loader"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> )</condition><then><block>{
            <expr_stmt><expr><name>result</name> = <call><name>loadSystemClass</name><argument_list>(<argument><expr><name>className</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>( <expr><name>result</name> != <name>null</name></expr> )</condition><then><block>{ <return>return <expr><name>result</name></expr>;</return> }</block></then></if>
        }</block></then></if>


        <comment type="line">// try the local cache of classes</comment>
        <expr_stmt><expr><name>result</name> = (<name>Class</name>) <call><name><name>cache</name>.<name>get</name></name><argument_list>(<argument><expr><name>className</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>result</name> == <name>null</name></expr>)</condition><then> <block>{
            <comment type="line">// Try to load it from source code, class path or jars directory</comment>
            <expr_stmt><expr><name>result</name> = <call><name>loadClassBytes</name><argument_list>(<argument><expr><name>className</name></expr></argument>, <argument><expr><name>resolveIt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>( <expr><name>result</name> == <name>null</name> &amp;&amp;
                <call><name>getClass</name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"java.system.class.loader"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> )</condition><then><block>{
            <comment type="line">// try the system class loader</comment>
                <expr_stmt><expr><name>result</name> = <call><name>loadSystemClass</name><argument_list>(<argument><expr><name>className</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <comment type="line">// Adding to the local cache</comment>
            <if>if <condition>(<expr><name>result</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>cache</name>.<name>put</name></name><argument_list>(<argument><expr><name>className</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then><else>else<block>{
                <throw>throw <expr>new <call><name>ClassNotFoundException</name><argument_list>(<argument><expr><name>className</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></else></if>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Loads the class bytes from the disk. Returns an array of bytes that will
     * be defined as a Class. This should be overloaded to have the Class Loader
     * look in more places.
     * @param name a class name without the .class extension.
     * @return Class bytes from the disk if possible, null otherwise.
     */</comment>
    <function><type><specifier>protected</specifier> <name>Class</name></type> <name>loadClassBytes</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>resolveIt</name></decl></param>)</parameter_list><block>{
        <decl_stmt><decl><type><name>Class</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>classBytes</name> =<init> <expr><call><name>loadBytes</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>classBytes</name> != <name>null</name></expr>)</condition><then> <block>{
            <try>try<block>{
                <expr_stmt><expr><name>result</name> = <call><name>defineClass</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>classBytes</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>classBytes</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">//Resolve if necessary</comment>
                <if>if <condition>(<expr><name>result</name> != <name>null</name> &amp;&amp; <name>resolveIt</name></expr>)</condition><then><block>{
                    <expr_stmt><expr><call><name>resolveClass</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
                <try>try<block>{
                    <expr_stmt><expr><name>result</name> =   <call><name><name>this</name>.<name>getParent</name></name><argument_list>()</argument_list></call>.<call><name>loadClass</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block><catch>catch( <param><decl><type><name>Exception</name></type> <name>e1</name></decl></param> )<block>{}</block></catch></try>
            }</block></catch></try>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/** Loads the bytes from file
     * @param path Path where the resource is stored (a Java file or a Class file)
     * @param classname Name of the resource
     * @return Class bytes from the disk if possible, null otherwise.
     */</comment>
    <function><type><specifier>private</specifier> <name>byte</name><index>[]</index></type> <name>loadBytes</name><parameter_list>(<param><decl><type><name>String</name></type> <name>classname</name></decl></param>)</parameter_list><block>{

        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>buf</name> =<init> <expr><call><name><name>main</name>.<name>loadBytes</name></name><argument_list>(<argument><expr><name>classname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if<condition>( <expr><name>buf</name> == <name>null</name> &amp;&amp; <call><name>usingPlugInPaths</name><argument_list>()</argument_list></call></expr> )</condition><then><block>{
            <expr_stmt><expr><name>buf</name> = <call><name><name>source</name>.<name>loadBytes</name></name><argument_list>(<argument><expr><name>classname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>( <expr><name>buf</name> == <name>null</name></expr> )</condition><then><block>{
                <expr_stmt><expr><name>buf</name> = <call><name><name>classes</name>.<name>loadBytes</name></name><argument_list>(<argument><expr><name>classname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if<condition>( <expr><name>buf</name> == <name>null</name></expr> )</condition><then><block>{
                    <expr_stmt><expr><name>buf</name> = <call><name><name>libraries</name>.<name>loadBytes</name></name><argument_list>(<argument><expr><name>classname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></then></if>
        <return>return <expr><name>buf</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Creates an instance of primitive types
     * @param the_class Primitive Type
     * @return New Instance of the given primitive class
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>newInstancePrimitive</name><parameter_list>(<param><decl><type><name>Class</name></type> <name>the_class</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>the_class</name> == <name><name>Integer</name>.<name>TYPE</name></name></expr>)</condition><then>
            <return>return <expr>0</expr>;</return></then>
        <else>else <if>if <condition>(<expr><name>the_class</name> == <name><name>Long</name>.<name>TYPE</name></name></expr>)</condition><then>
            <return>return <expr>0L</expr>;</return></then>
        <else>else <if>if <condition>(<expr><name>the_class</name> == <name><name>Short</name>.<name>TYPE</name></name></expr>)</condition><then>
            <return>return <expr>0</expr>;</return></then>
        <else>else <if>if <condition>(<expr><name>the_class</name> == <name><name>Byte</name>.<name>TYPE</name></name></expr>)</condition><then>
            <return>return <expr>0</expr>;</return></then>
        <else>else <if>if <condition>(<expr><name>the_class</name> == <name><name>Double</name>.<name>TYPE</name></name></expr>)</condition><then>
            <return>return <expr>0.0</expr>;</return></then>
        <else>else <if>if <condition>(<expr><name>the_class</name> == <name><name>Float</name>.<name>TYPE</name></name></expr>)</condition><then>
            <return>return <expr>0.0f</expr>;</return></then>
        <else>else <if>if <condition>(<expr><name>the_class</name> == <name><name>Character</name>.<name>TYPE</name></name></expr>)</condition><then>
            <return>return <expr>' '</expr>;</return></then>
        <else>else <return>return <expr>false</expr>;</return></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Creates a new instance of an object using the simplest constructor
     * @param the_class Class which will produce a new instance
     * @return New instance of the given class
     * @throws Exception
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>newInstanceSimplestConstructor</name><parameter_list>(<param><decl><type><name>Class</name></type> <name>the_class</name></decl></param>)</parameter_list> <throws>throws
            <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>Constructor</name><index>[]</index></type> <name>constructors</name> =<init> <expr><call><name><name>the_class</name>.
                                     <name>getConstructors</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>k</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>primitives</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>non_primitives</name> =<init> <expr><name><name>Integer</name>.<name>MAX_VALUE</name></name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>constructors</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>Class</name><index>[]</index></type> <name>parameters</name> =<init> <expr><name><name>constructors</name><index>[<expr><name>i</name></expr>]</index></name>.
                                 <call><name>getParameterTypes</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>prim</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>non_prim</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>j</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>j</name> &lt; <name><name>parameters</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
                <if>if <condition>(<expr><name><name>parameters</name><index>[<expr><name>j</name></expr>]</index></name>.<call><name>isPrimitive</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>prim</name>++</expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><name>non_prim</name>++</expr>;</expr_stmt>
                }</block></else></if>
            }</block></for>
            <if>if <condition>(<expr><name>primitives</name> &lt; <name>prim</name> ||
                (<name>primitives</name> == <name>prim</name> &amp;&amp;
                 <name>non_primitives</name> &gt; <name>non_prim</name>)</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>k</name> = <name>i</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>primitives</name> = <name>prim</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>non_primitives</name> = <name>non_prim</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>

        <if>if<condition>( <expr><name>k</name>&lt;<name><name>constructors</name>.<name>length</name></name></expr> )</condition><then><block>{
            <decl_stmt><decl><type><name>Class</name><index>[]</index></type> <name>parameter_class</name> =<init> <expr><name><name>constructors</name><index>[<expr><name>k</name></expr>]</index></name>.
                                      <call><name>getParameterTypes</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Object</name><index>[]</index></type> <name>parameter</name> =<init> <expr>new <name><name>Object</name><index>[<expr><name><name>parameter_class</name>.
                                 <name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>parameter</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <expr_stmt><expr><name><name>parameter</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name>newInstance</name><argument_list>(<argument><expr><name><name>parameter_class</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <return>return <expr><name><name>constructors</name><index>[<expr><name>k</name></expr>]</index></name>.<call><name>newInstance</name><argument_list>(<argument><expr><name>parameter</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <return>return <expr><name>null</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Creates a new instance of an object (includes arrays, Double, Long, Short, Byte, Integer, Float, and Character classes)
     * @param the_class Class which will produce a new instance
     * @return New instance of the given class
     * @throws Exception
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>newInstance</name><parameter_list>(<param><decl><type><name>Class</name></type> <name>the_class</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><call><name><name>the_class</name>.<name>isPrimitive</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name>newInstancePrimitive</name><argument_list>(<argument><expr><name>the_class</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
            <if>if <condition>(<expr><call><name><name>the_class</name>.<name>isArray</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><call><name><name>Array</name>.<name>newInstance</name></name><argument_list>(<argument><expr><call><name><name>the_class</name>.<name>getComponentType</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
            }</block></then> <else>else <block>{
                <try>try <block>{
                    <return>return <expr><call><name><name>the_class</name>.<name>newInstance</name></name><argument_list>()</argument_list></call></expr>;</return>
                }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
                    <return>return <expr><call><name>newInstanceSimplestConstructor</name><argument_list>(<argument><expr><name>the_class</name></expr></argument>)</argument_list></call></expr>;</return>
                }</block></catch></try>
            }</block></else></if>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Creates a new instance of an object (includes arrays, Double, Long, Short, Byte, Integer, Float, and Character classes)
     * @param className Name of the class which will produce a new instance
     * @return New instance of the given class
     * @throws Exception
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>newInstance</name><parameter_list>(<param><decl><type><name>String</name></type> <name>className</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <return>return <expr><call><name>newInstance</name><argument_list>(<argument><expr><call><name>loadClass</name><argument_list>(<argument><expr><name>className</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Gets the applications path
     * @return Applications path
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>systemClassPath</name><parameter_list>()</parameter_list><block>{
        <return>return <expr><call><name><name>main</name>.<name>paths</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Gets the source path
     * @return Source path
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>sourcePath</name><parameter_list>()</parameter_list><block>{
        <return>return <expr><call><name><name>source</name>.<name>sourcePath</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Gets the class path
     * @return Class path
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>classPath</name><parameter_list>()</parameter_list><block>{
        <return>return <expr><call><name><name>classes</name>.<name>path</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Puts a Class in the cache of the Loader
     * @param cl Class to be added to the Cache of the Loader
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>put</name><parameter_list>( <param><decl><type><name>Class</name></type> <name>cl</name></decl></param> )</parameter_list><block>{
        <expr_stmt><expr><call><name><name>cache</name>.<name>put</name></name><argument_list>(<argument><expr><call><name><name>cl</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Gets the set of Jar Files in the libraries path
     * @return Jar Files in the libraries path
     */</comment>
    <function><type><specifier>public</specifier> <name>JarLoader</name><index>[]</index></type> <name>jarFiles</name><parameter_list>()</parameter_list><block>{
        <return>return <expr><call><name><name>libraries</name>.<name>jarFiles</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Determines if the Loader is using PlugIn paths or not
     * @return &lt;i&gt;true&lt;/i&gt; If the Loader is using plugIns path, &lt;i&gt;false&lt;/i&gt; otherwise.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>usingPlugInPaths</name><parameter_list>()</parameter_list><block>{
        <return>return<expr>(<name>source</name>!=<name>null</name>)</expr>;</return>
    }</block></function>
}</block></class></unit>
