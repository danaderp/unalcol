<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\types\collection\vector\VectorSort.java"><package>package <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>vector</name></name>;</package>
<import>import <name><name>unalcol</name>.<name>algorithm</name></name>.*;</import>
<import>import <name><name>unalcol</name>.<name>sort</name></name>.*;</import>
<import>import <name><name>unalcol</name>.<name>sort</name>.<name>algorithm</name></name>.*;</import>
<import>import <name><name>unalcol</name>.<name>clone</name></name>.*;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Title: &lt;/p&gt;
 *
 * &lt;p&gt;Description: &lt;/p&gt;
 *
 * &lt;p&gt;Copyright: Copyright (c) 2010&lt;/p&gt;
 *
 * &lt;p&gt;Company: Kunsamu &lt;/p&gt;
 *
 * @author Jonatan Gomez
 * @version 1.0
 */</comment>
<class><specifier>public</specifier> class <name><name>VectorSort</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name> <super><extends>extends <name><name>ThreadFunction</name><argument_list>&lt;<argument><name><name>ImmutableVector</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>,<argument><name><name>ImmutableVector</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>overwrite</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>Sort</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>sort</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>VectorSort</name><parameter_list>()</parameter_list><block>{
        <expr_stmt><expr><name>sort</name> = new <call><name><name>MergeSort</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>VectorSort</name><parameter_list>( <param><decl><type><name><name>Sort</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>_sort</name></decl></param> )</parameter_list> <block>{
        <expr_stmt><expr><name>sort</name> = <name>_sort</name></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>VectorSort</name><parameter_list>( <param><decl><type><name><name>Order</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>_order</name></decl></param> )</parameter_list> <block>{
        <expr_stmt><expr><name>sort</name> = new <call><name><name>MergeSort</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name><argument_list>( <argument><expr><name>_order</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>apply</name><parameter_list>( <param><decl><type><name><name>ImmutableVector</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>input</name></decl></param>, <param><decl><type><name><name>Order</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>order</name></decl></param> )</parameter_list><block>{
        <expr_stmt><expr><call><name>apply</name><argument_list>( <argument><expr><name>input</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>input</name>.<name>size</name></name></expr></argument>, <argument><expr><name>order</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>apply</name><parameter_list>( <param><decl><type><name><name>ImmutableVector</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>input</name></decl></param>, <param><decl><type><name>int</name></type> <name>start</name></decl></param>, <param><decl><type><name>int</name></type> <name>end</name></decl></param>, <param><decl><type><name><name>Order</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>order</name></decl></param> )</parameter_list><block>{
        <decl_stmt><decl><type><name>T</name><index>[]</index></type> <name>obj</name> =<init> <expr>(<name><name>T</name><index>[]</index></name>)<name><name>input</name>.<name>buffer</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sort</name>.<name>apply</name></name><argument_list>( <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>order</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>ImmutableVector</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>apply</name><parameter_list>( <param><decl><type><name><name>ImmutableVector</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>input</name></decl></param> )</parameter_list><block>{
        <if>if<condition>( <expr><call><name><name>input</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 0</expr> )</condition><then><block>{
            <if>if <condition>(<expr>!<name>overwrite</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>input</name> = (<name><name>Vector</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name>) <call><name><name>Clone</name>.<name>get</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <decl_stmt><decl><type><name><name>Order</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>order</name> =<init> <expr><call><name><name>sort</name>.<name>getOrder</name></name><argument_list>(<argument><expr><name><name>input</name>.<name>buffer</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>apply</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>input</name>.<name>size</name></name></expr></argument>, <argument><expr><name>order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>input</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
