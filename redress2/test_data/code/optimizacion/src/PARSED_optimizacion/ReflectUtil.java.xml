<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\reflect\util\ReflectUtil.java"><package>package <name><name>unalcol</name>.<name>reflect</name>.<name>util</name></name>;</package>

<import>import <name><name>unalcol</name>.<name>reflect</name>.<name>service</name></name>.*;</import>
<import>import <name><name>unalcol</name>.<name>reflect</name>.<name>loader</name>.<name>Loader</name></name>;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Set of methods for simplifying the use of the Reflection infra-structure&lt;/p&gt;
 *
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 */</comment>
<class><specifier>public</specifier> class <name>ReflectUtil</name> <block>{
    <comment type="javadoc">/**
     * The Service hierarchy infra-structure
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <name>ServiceProvider</name></type> <name>provider</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Gets the Loader (ClassLoader) used by the given class
     * @return Loader (ClassLoader) used by the given class
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Loader</name></type> <name>getLoader</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name>Loader</name></type> <name>loader</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if<condition>( <expr><call><name><name>ClassLoader</name>.<name>getSystemClassLoader</name></name><argument_list>()</argument_list></call> <name>instanceof</name> <name>Loader</name></expr> )</condition><then><block>{
            <expr_stmt><expr><name>loader</name> = (<name>Loader</name>)<call><name><name>ClassLoader</name>.<name>getSystemClassLoader</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then><else>else<block>{
            <expr_stmt><expr><name>loader</name> = new <call><name>Loader</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><name>loader</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns The service provider
     * @return The service provider
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ServiceProvider</name></type> <name>getProvider</name><parameter_list>()</parameter_list><block>{
        <if>if<condition>( <expr><name>provider</name> == <name>null</name></expr> )</condition><then><block>{
            <decl_stmt><decl><type><name>Loader</name></type> <name>loader</name> =<init> <expr><call><name>getLoader</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ServiceLoader</name></type> <name>sl</name> =<init> <expr>new <call><name>ServiceLoader</name><argument_list>(<argument><expr><name>loader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>sl</name>.<name>load</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>provider</name> = <call><name><name>sl</name>.<name>provider</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>provider</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Initializes the ClassLoader using the same path for libraries, resources, classes and sources
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>init</name><parameter_list>()</parameter_list><block>{
        <if>if<condition>( <expr><name>provider</name> == <name>null</name></expr> )</condition><then><block>{
            <decl_stmt><decl><type><name>Loader</name></type> <name>loader</name> =<init> <expr><call><name>getLoader</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>loader</name>.<name>init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>provider</name> = <name>null</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

     <comment type="javadoc">/**
     * Initializes the ClassLoader that searches in the directory path
     * passed as a parameter. The constructor automatically finds all JAR and ZIP
     * files in the path and subdirectories. The JAR and ZIP files
     * @param libs Libraries Path
     * @param classes Classes Path
     * @param resources Resources Path
     * @param sources Sources Path
      * @return The service provider
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ServiceProvider</name></type> <name>getProvider</name><parameter_list>(<param><decl><type><name>String</name></type> <name>libs</name></decl></param>, <param><decl><type><name>String</name></type> <name>classes</name></decl></param>,
            <param><decl><type><name>String</name></type> <name>resources</name></decl></param>, <param><decl><type><name>String</name></type> <name>sources</name></decl></param>)</parameter_list> <block>{
        <if>if<condition>( <expr><name>provider</name> == <name>null</name></expr> )</condition><then><block>{
            <decl_stmt><decl><type><name>Loader</name></type> <name>loader</name> =<init> <expr><call><name>getLoader</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>loader</name>.<name>set</name></name><argument_list>(<argument><expr><name>libs</name></expr></argument>, <argument><expr><name>classes</name></expr></argument>, <argument><expr><name>resources</name></expr></argument>, <argument><expr><name>sources</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>ServiceLoader</name></type> <name>sl</name> =<init> <expr>new <call><name>ServiceLoader</name><argument_list>(<argument><expr><name>loader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>sl</name>.<name>load</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>provider</name> = <call><name><name>sl</name>.<name>provider</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>provider</name></expr>;</return>
    }</block></function>

     <comment type="javadoc">/**
     * Initializes the ClassLoader that searches in the directory path
     * passed as a parameter. The constructor automatically finds all JAR and ZIP
     * files in the path and subdirectories. 
     * @param path Libraries, Classes, Resources and Sources Path
      * @return The service provider
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ServiceProvider</name></type> <name>getProvider</name><parameter_list>(<param><decl><type><name>String</name></type> <name>path</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>getProvider</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class></unit>
