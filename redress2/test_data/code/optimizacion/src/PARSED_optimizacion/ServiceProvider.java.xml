<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\reflect\service\ServiceProvider.java"><package>package <name><name>unalcol</name>.<name>reflect</name>.<name>service</name></name>;</package>

<comment type="javadoc">/**
 * &lt;p&gt;The Service Hierarchy infra-structure. Provides services for
 * objects and classes&lt;/p&gt;
 *
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 */</comment>
<class><specifier>public</specifier> class <name>ServiceProvider</name> <block>{
    <decl_stmt><decl><type><specifier>protected</specifier> <name>ServiceNode</name></type> <name>root</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ServiceProvider</name><parameter_list>()</parameter_list><block>{
        <expr_stmt><expr><name><name>this</name>.<name>root</name></name> = new <call><name>ServiceNode</name><argument_list>( <argument><expr><name><name>Service</name>.<name><name/></name></name>class</expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Registers a service in the service hierarchy infra-structure
     * @param service Service to be registered
     * @return &lt;i&gt;true&lt;/i&gt; if the service was registered, &lt;i&gt;false&lt;/i&gt; otherwise
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>register</name><parameter_list>( <param><decl><type><name>Service</name></type> <name>service</name></decl></param> )</parameter_list><block>{
        <if>if<condition>( <expr><name>service</name> != <name>null</name></expr> )</condition><then><block>{
            <decl_stmt><decl><type><name>ServiceNode</name></type> <name>sn</name> =<init> <expr><call><name><name>root</name>.<name>locate</name></name><argument_list>(<argument><expr><call><name><name>service</name>.<name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if<condition>( <expr><name>sn</name> == <name>null</name></expr> )</condition><then><block>{
                <expr_stmt><expr><name>sn</name> = <call><name>add</name><argument_list>( <argument><expr><call><name><name>service</name>.<name>getClass</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <return>return <expr><call><name><name>sn</name>.<name>add</name></name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <return>return <expr>false</expr>;</return>
    }</block></function>

    <function><type><specifier>protected</specifier> <name>ServiceNode</name></type> <name>add</name><parameter_list>( <param><decl><type><name>Class</name></type> <name>cl</name></decl></param> )</parameter_list><block>{
        <if>if<condition>( <expr><name>cl</name> != <name>null</name> &amp;&amp; <name><name>Service</name>.<name><name/></name></name>class.<call><name>isAssignableFrom</name><argument_list>(<argument><expr><name>cl</name></expr></argument>)</argument_list></call></expr> )</condition><then><block>{
            <decl_stmt><decl><type><name>ServiceNode</name></type> <name>sn</name> =<init> <expr><call><name><name>root</name>.<name>locate</name></name><argument_list>(<argument><expr><name>cl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if<condition>( <expr><name>sn</name> == <name>null</name></expr> )</condition><then><block>{
                <decl_stmt><decl><type><name>ServiceNode</name></type> <name>pSn</name></decl>;</decl_stmt>
                <expr_stmt><expr><name>sn</name> = new <call><name>ServiceNode</name><argument_list>(<argument><expr><name>cl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if<condition>( <expr><call><name><name>cl</name>.<name>getSuperclass</name></name><argument_list>()</argument_list></call> != <name>null</name></expr> )</condition><then><block>{
                    <expr_stmt><expr><name>pSn</name> = <call><name>add</name><argument_list>( <argument><expr><call><name><name>cl</name>.<name>getSuperclass</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <if>if<condition>( <expr><name>pSn</name> != <name>null</name></expr> )</condition><then><block>{
                        <expr_stmt><expr><call><name><name>pSn</name>.<name>add</name></name><argument_list>(<argument><expr><name>sn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then></if>
                <decl_stmt><decl><type><name>Class</name><index>[]</index></type> <name>interfaces</name> =<init> <expr><call><name><name>cl</name>.<name>getInterfaces</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for( <init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name><name>interfaces</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> )<block>{
                    <if>if<condition>( <expr><name><name>interfaces</name><index>[<expr><name>i</name></expr>]</index></name> != <name>null</name></expr> )</condition><then><block>{
                        <expr_stmt><expr><name>pSn</name> = <call><name>add</name><argument_list>( <argument><expr><name><name>interfaces</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                        <if>if<condition>( <expr><name>pSn</name> != <name>null</name></expr> )</condition><then><block>{
                            <expr_stmt><expr><call><name><name>pSn</name>.<name>add</name></name><argument_list>(<argument><expr><name>sn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                    }</block></then></if>
                }</block></for>
            }</block></then></if>
            <return>return <expr><name>sn</name></expr>;</return>
        }</block></then></if>
        <return>return <expr><name>null</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Registeres a service class in the service hierarchy onfra-structure
     * @param cl Service class to be registered
     * @return &lt;i&gt;true&lt;/i&gt; if the class of service was registered, &lt;i&gt;false&lt;/i&gt; otherwise
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>register</name><parameter_list>( <param><decl><type><name>Class</name></type> <name>cl</name></decl></param> )</parameter_list><block>{
        <decl_stmt><decl><type><name>ServiceNode</name></type> <name>sn</name> =<init> <expr><call><name>add</name><argument_list>(<argument><expr><name>cl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>flag</name> =<init> <expr>(<name>sn</name> != <name>null</name>)</expr></init></decl>;</decl_stmt>
        <if>if<condition>( <expr><name>flag</name> &amp;&amp; <call><name><name>sn</name>.<name>instances</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then><block>{
            <expr_stmt><expr><call><name><name>sn</name>.<name>setDefaultService</name></name><argument_list>(<argument><expr><call><name><name>sn</name>.<name>instances</name>.<name>get</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>.<call><name>owner</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>sn</name>.<name>instances</name>.<name>get</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>flag</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set of services of type &lt;i&gt;service&lt;/&gt;, available for a given object &lt;i&gt;owner&lt;/i&gt;
     * @param service Type of service that will be returned
     * @param owner Object that owns or can use the services to be returned
     * @return Set of services of type &lt;i&gt;service&lt;/&gt;, available for a given object &lt;i&gt;owner&lt;/i&gt;
     */</comment>
    <function><type><specifier>public</specifier> <name>Service</name><index>[]</index></type> <name>available_services</name><parameter_list>( <param><decl><type><name>Class</name></type> <name>service</name></decl></param>, <param><decl><type><name>Object</name></type> <name>owner</name></decl></param> )</parameter_list><block>{
        <decl_stmt><decl><type><name>ServiceNode</name></type>  <name>sn</name> =<init> <expr><call><name><name>root</name>.<name>locate</name></name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if<condition>( <expr><name>sn</name> != <name>null</name></expr> )</condition><then><block>{
            <return>return <expr><call><name><name>sn</name>.<name>available_services</name></name><argument_list>(<argument><expr><name>owner</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <return>return <expr>new <name><name>Service</name><index>[<expr>0</expr>]</index></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set of services of type &lt;i&gt;service&lt;/&gt;, available for a given object &lt;i&gt;owner&lt;/i&gt;
     * @param service Type of service that will be returned
     * @return Set of services of type &lt;i&gt;service&lt;/&gt;, available for a given object &lt;i&gt;owner&lt;/i&gt;
     */</comment>
    <function><type><specifier>public</specifier> <name>Class</name><index>[]</index></type> <name>available_service_classes</name><parameter_list>( <param><decl><type><name>Class</name></type> <name>service</name></decl></param> )</parameter_list><block>{
        <decl_stmt><decl><type><name>ServiceNode</name></type>  <name>sn</name> =<init> <expr><call><name><name>root</name>.<name>locate</name></name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if<condition>( <expr><name>sn</name> != <name>null</name></expr> )</condition><then><block>{
            <return>return <expr><call><name><name>sn</name>.<name>serviceClases</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <return>return <expr>new <name><name>Class</name><index>[<expr>0</expr>]</index></name></expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     * Set of services of type &lt;i&gt;service&lt;/&gt; owned by a given object &lt;i&gt;owner&lt;/i&gt;
     * @param service Type of service that will be returned
     * @param owner Object that owns the services to be returned
     * @return Set of services of type &lt;i&gt;service&lt;/&gt; owned by the given object &lt;i&gt;owner&lt;/i&gt;
     */</comment>
    <function><type><specifier>public</specifier> <name>Service</name><index>[]</index></type> <name>owned_services</name><parameter_list>( <param><decl><type><name>Class</name></type> <name>service</name></decl></param>, <param><decl><type><name>Object</name></type> <name>owner</name></decl></param> )</parameter_list><block>{
        <decl_stmt><decl><type><name>ServiceNode</name></type>  <name>sn</name> =<init> <expr><call><name><name>root</name>.<name>locate</name></name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if<condition>( <expr><name>sn</name> != <name>null</name></expr> )</condition><then><block>{
            <return>return <expr><call><name><name>sn</name>.<name>owned_services</name></name><argument_list>(<argument><expr><name>owner</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <return>return <expr>new <name><name>Service</name><index>[<expr>0</expr>]</index></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Gets the default service for the given service class and owner object.
     * The default service is the one used by the &lt;i&gt;owner&lt;/i&gt; object when the
     * &lt;i&gt;service&lt;/i&gt; is required by the &lt;i&gt;owner&lt;/i&gt; object
     * @param service Service type used by the owner
     * @param owner Object that owns the service
     * @return The service that is defined as default service by the given owner object
     */</comment>
    <function><type><specifier>public</specifier> <name>Service</name></type> <name>default_service</name><parameter_list>( <param><decl><type><name>Class</name></type> <name>service</name></decl></param>, <param><decl><type><name>Object</name></type> <name>owner</name></decl></param> )</parameter_list><block>{
        <decl_stmt><decl><type><name>ServiceNode</name></type>  <name>sn</name> =<init> <expr><call><name><name>root</name>.<name>locate</name></name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if<condition>( <expr><name>sn</name> != <name>null</name></expr> )</condition><then><block>{
            <return>return <expr><call><name><name>sn</name>.<name>defaultService</name></name><argument_list>(<argument><expr><name>owner</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <return>return <expr><name>null</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the default service for the given service class and owner object.
     * The &lt;i&gt;def_service&lt;/i&gt; is used by the &lt;i&gt;owner&lt;/i&gt; object when the 
     * &lt;i&gt;service&lt;/i&gt; is required by the &lt;i&gt;owner&lt;/i&gt; object
     * @param service Class of service the owner object will define as default
     * @param owner Object that owns the service
     * @param def_service Default service used by the owner object when the service is required
     * @return Previously defined default service
     */</comment>
    <function><type><specifier>public</specifier> <name>Service</name></type> <name>setDefault_service</name><parameter_list>( <param><decl><type><name>Class</name></type> <name>service</name></decl></param>, <param><decl><type><name>Object</name></type> <name>owner</name></decl></param>, <param><decl><type><name>Service</name></type> <name>def_service</name></decl></param> )</parameter_list><block>{
        <decl_stmt><decl><type><name>ServiceNode</name></type>  <name>sn</name> =<init> <expr><call><name><name>root</name>.<name>locate</name></name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if<condition>( <expr><name>sn</name> != <name>null</name></expr> )</condition><then><block>{
            <return>return <expr><call><name><name>sn</name>.<name>setDefaultService</name></name><argument_list>(<argument><expr><name>owner</name></expr></argument>, <argument><expr><name>def_service</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <return>return <expr><name>null</name></expr>;</return>
    }</block></function>
    
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>remove_owned_service</name><parameter_list>( <param><decl><type><name>Class</name></type> <name>service_class</name></decl></param>, <param><decl><type><name>Object</name></type> <name>owner</name></decl></param>, 
                                         <param><decl><type><name>Service</name></type> <name>service</name></decl></param> )</parameter_list><block>{
        <decl_stmt><decl><type><name>ServiceNode</name></type>  <name>sn</name> =<init> <expr><call><name><name>root</name>.<name>locate</name></name><argument_list>(<argument><expr><name>service_class</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if<condition>( <expr><name>sn</name> != <name>null</name></expr> )</condition><then><block>{
            <return>return <expr><call><name><name>sn</name>.<name>remove_owned_service</name></name><argument_list>(<argument><expr><name>owner</name></expr></argument>, <argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>        
        <return>return <expr>false</expr>;</return>
    }</block></function>
    
}</block></class></unit>
