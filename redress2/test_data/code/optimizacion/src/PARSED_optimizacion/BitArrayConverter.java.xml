<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\types\collection\bitarray\BitArrayConverter.java"><package>package <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>bitarray</name></name>;</package>

<import>import <name><name>unalcol</name>.<name>types</name>.<name>integer</name>.<name>IntUtil</name></name>;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Title: BitArrayConverter&lt;/p&gt;
 * &lt;p&gt;Description: Utility class for converting BitArrays to/from IntArrays.&lt;/p&gt;
 * &lt;p&gt;Copyright: Copyright (c) 2006&lt;/p&gt;
 * &lt;p&gt;Company: Kunsamu&lt;/p&gt;
 * @author Jonatan Gomez
 * @version 1.0
 *
 */</comment>
<class><specifier>public</specifier> class <name>BitArrayConverter</name> <block>{
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>useGrayCode</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

   <comment type="javadoc">/**
    * Returns an array of int values
    * @param a Original set of bits
    * @param intSize size of the array
    * @param useGray treatment type to use
    * @return array of int values
    */</comment>
   <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name><index>[]</index></type> <name>getIntArray</name><parameter_list>(<param><decl><type><name>BitArray</name></type> <name>a</name></decl></param>, <param><decl><type><name>int</name></type> <name>intSize</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>useGray</name></decl></param>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name> =<init> <expr><call><name><name>a</name>.<name>size</name></name><argument_list>()</argument_list></call> / <name>intSize</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name><index>[]</index></type> <name>intVal</name> =<init> <expr>new <name><name>int</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>intSize</name> == <name><name>IntUtil</name>.<name>INTEGER_SIZE</name></name></expr>)</condition><then> <block>{
      <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <if>if <condition>(<expr><name>useGray</name></expr>)</condition><then> <block>{ <expr_stmt><expr><name><name>intVal</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name><name>IntUtil</name>.<name>grayToBinary</name></name><argument_list>(<argument><expr><call><name><name>a</name>.<name>getData</name></name><argument_list>()</argument_list></call><index>[<expr><name>i</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{ <expr_stmt><expr><name><name>intVal</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name><name>a</name>.<name>getData</name></name><argument_list>()</argument_list></call><index>[<expr><name>i</name></expr>]</index></expr>;</expr_stmt> }</block></else></if>
      }</block></for>
    }</block></then> <else>else <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>start</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
      <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <expr_stmt><expr><name><name>intVal</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name>getNumber</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>intSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>start</name> += <name>intSize</name></expr>;</expr_stmt>
      }</block></for>
    }</block></else></if>
    <return>return <expr><name>intVal</name></expr>;</return>
  }</block></function>

  <comment type="javadoc">/**
   * Convert an array of BitArray into an byte[]
   * @param a Original set of bits
   * @return array of Bit
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>byte</name><index>[]</index></type> <name>getByteArray</name><parameter_list>(<param><decl><type><name>BitArray</name></type> <name>a</name></decl></param>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>byteSize</name> =<init> <expr>8</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>maxByte</name> =<init> <expr>255</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>pack</name> =<init> <expr><name><name>IntUtil</name>.<name>INTEGER_SIZE</name></name> / <name>byteSize</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nInt</name> =<init> <expr>(<call><name><name>a</name>.<name>size</name></name><argument_list>()</argument_list></call> + <name><name>IntUtil</name>.<name>INTEGER_SIZE</name></name> - 1) / <name><name>IntUtil</name>.<name>INTEGER_SIZE</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name> =<init> <expr><name>pack</name> * <name>nInt</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>byteArray</name> =<init> <expr>new <name><name>byte</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>k</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
    <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>nInt</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>d</name> =<init> <expr><call><name><name>a</name>.<name>getInt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for (<init><decl><type><name>int</name></type> <name>j</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>j</name> &lt; <name>pack</name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
        <expr_stmt><expr><name><name>byteArray</name><index>[<expr><name>k</name></expr>]</index></name> = <call>(<name>byte</name>) <argument_list>(<argument><expr><name>d</name> &amp; <name>maxByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>d</name> &gt;&gt;&gt;= <name>byteSize</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>k</name>++</expr>;</expr_stmt>
      }</block></for>
    }</block></for>
    <return>return <expr><name>byteArray</name></expr>;</return>
  }</block></function>

  <comment type="javadoc">/**
   * Returns an array of int values
   * @param a Original set of bits
   * @return array of int values
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name><index>[]</index></type> <name>getIntArray</name><parameter_list>(<param><decl><type><name>BitArray</name></type> <name>a</name></decl></param>)</parameter_list> <block>{
    <return>return <expr><call><name>getIntArray</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>IntUtil</name>.<name>INTEGER_SIZE</name></name></expr></argument>, <argument><expr><name>useGrayCode</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <comment type="javadoc">/**
   * it assigns an array inside an it BitArray
   * @param a Original set of bits
   * @param intVal array of int
   * @param intSize size of the array
   * @param useGray treatment type to use
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setIntArray</name><parameter_list>(<param><decl><type><name>BitArray</name></type> <name>a</name></decl></param>, <param><decl><type><name><name>int</name><index>[]</index></name></type> <name>intVal</name></decl></param>, <param><decl><type><name>int</name></type> <name>intSize</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>useGray</name></decl></param>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name> =<init> <expr><name><name>intVal</name>.<name>length</name></name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>intSize</name> == <name><name>IntUtil</name>.<name>INTEGER_SIZE</name></name></expr>)</condition><then> <block>{
      <if>if <condition>(<expr><call><name><name>a</name>.<name>getData</name></name><argument_list>()</argument_list></call>.<name>length</name> &lt; <name>n</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>a</name>.<name>setData</name></name><argument_list>(<argument><expr>new <name><name>int</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <if>if <condition>(<expr><name>useGray</name></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>a</name>.<name>getData</name></name><argument_list>()</argument_list></call><index>[<expr><name>i</name></expr>]</index> = <call><name><name>IntUtil</name>.<name>binaryToGray</name></name><argument_list>(<argument><expr><name><name>intVal</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>a</name>.<name>getData</name></name><argument_list>()</argument_list></call><index>[<expr><name>i</name></expr>]</index> = <name><name>intVal</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></else></if>
      }</block></for>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><name>n</name> = (<name>n</name> * <name>intSize</name>) / <name><name>IntUtil</name>.<name>INTEGER_SIZE</name></name> + 1</expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>a</name>.<name>setData</name></name><argument_list>(<argument><expr>new <name><name>int</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>start</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
      <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <expr_stmt><expr><call><name>setNumber</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>intSize</name></expr></argument>, <argument><expr><name><name>intVal</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>start</name> += <name>intSize</name></expr>;</expr_stmt>
      }</block></for>
    }</block></else></if>
  }</block></function>


  <comment type="javadoc">/**
     * Return the integer encoded by the "length" bits starting at the position start
     * @param a Original set of bits
     * @param start Start position of the subset of bits
     * @param length Number of bits to be extracted
     * @return Integer encoded by the "length" bits starting at the position start
     */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getNumber</name><parameter_list>(<param><decl><type><name>BitArray</name></type> <name>a</name></decl></param>, <param><decl><type><name>int</name></type> <name>start</name></decl></param>, <param><decl><type><name>int</name></type> <name>length</name></decl></param>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>BitArray</name></type> <name>b</name> =<init> <expr><call><name><name>a</name>.<name>subBitArray</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>start</name> + <name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr>(<call><name><name>b</name>.<name>getInt</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call> &gt;&gt;&gt; (<name><name>IntUtil</name>.<name>INTEGER_SIZE</name></name> - <name>length</name>))</expr>;</return>
  }</block></function>

  <comment type="javadoc">/**
   * Assigns the value number in the defined range
   * @param a Object BitArray
   * @param start Initial range
   * @param length Final range
   * @param number Value to replace
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setNumber</name><parameter_list>(<param><decl><type><name>BitArray</name></type> <name>a</name></decl></param>, <param><decl><type><name>int</name></type> <name>start</name></decl></param>, <param><decl><type><name>int</name></type> <name>length</name></decl></param>, <param><decl><type><name>int</name></type> <name>number</name></decl></param>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name> =<init> <expr><name>start</name> + <name>length</name> - 1</expr></init></decl>;</decl_stmt>
    <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>length</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
      <expr_stmt><expr><call><name><name>a</name>.<name>set</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr>((<name>number</name> &amp; 1) == 1)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>number</name> = <name>number</name> &gt;&gt;&gt; 1</expr>;</expr_stmt>
      <expr_stmt><expr><name>n</name>--</expr>;</expr_stmt>
    }</block></for>
  }</block></function>

}</block></class>
</unit>
