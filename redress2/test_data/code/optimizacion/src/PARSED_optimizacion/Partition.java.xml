<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\random\util\Partition.java"><package>package <name><name>unalcol</name>.<name>random</name>.<name>util</name></name>;</package>

<comment type="javadoc">/**
 * &lt;p&gt;Random partition of a set&lt;/p&gt;
 *
 * &lt;p&gt;Copyright: Copyright (c) 2009&lt;/p&gt;
 * 
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 *
 */</comment>

<class><specifier>public</specifier> class <name>Partition</name> <block>{
    <comment type="javadoc">/**
     * Number of elements in the set being partitioned
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>n</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * &lt;P&gt;Starting positions of each group.&lt;/P&gt;
     * &lt;P&gt;start[k] indicates the initial index of group k&lt;/P&gt;
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name><index>[]</index></type> <name>start</name> =<init> <expr>new <name><name>int</name><index>[]</index></name> <block>{<expr>0</expr>, <expr>0</expr>}</block></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Random distribution of index
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name><index>[]</index></type> <name>index</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructor: Default constructor. Useful for inheritance
     */</comment>
    <constructor><specifier>protected</specifier> <name>Partition</name><parameter_list>()</parameter_list> <block>{}</block></constructor>
    
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name><index>[]</index></type> <name>create</name><parameter_list>(<param><decl><type><name>int</name></type> <name>n</name></decl></param>, <param><decl><type><name>int</name></type> <name>m</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>shuffling</name></decl></param>)</parameter_list><block>{
        <decl_stmt><decl><type><name>int</name><index>[]</index></type> <name>index</name> =<init> <expr>new <name><name>int</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name><name>index</name><index>[<expr><name>i</name></expr>]</index></name> = <name>i</name></expr>;</expr_stmt>
        }</block></for>        
        <if>if <condition>(<expr><name>shuffling</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name><name>Shuffle</name><argument_list>&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>shuffle</name> =<init> <expr>new <call><name>Shuffle</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>shuffle</name>.<name>apply</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if<condition>( <expr><name>n</name>&lt;<name>m</name></expr> )</condition><then><block>{
            <decl_stmt><decl><type><name>int</name><index>[]</index></type> <name>index2</name> =<init> <expr>new <name><name>int</name><index>[<expr><name>m</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <for>for( <init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name>m</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> )<block>{
                <expr_stmt><expr><name><name>index2</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>index</name><index>[<expr><name>i</name>%<name>n</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><name>index</name> = <name>index2</name></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>index</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Creates a partition on &lt;i&gt;n&lt;/i&gt; natural numbers [0,n)
     * @param n Size of the set being partitioned
     * @param m Number of groups defining the partition
     * @param shuffling If the set of integers should be shuffled before partitioning it or not
     */</comment>
    <constructor><specifier>public</specifier> <name>Partition</name><parameter_list>(<param><decl><type><name>int</name></type> <name>n</name></decl></param>, <param><decl><type><name>int</name></type> <name>m</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>shuffling</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>( <argument><expr><call><name>create</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><name>m</name></expr></argument>,<argument><expr><name>shuffling</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructor: Creates a partition of a randomized set in m random groups
     * @param index1 Randomized Set. The data set already permuted
     * @param m Number of groups
     */</comment>
    <constructor><specifier>public</specifier> <name>Partition</name><parameter_list>(<param><decl><type><name><name>int</name><index>[]</index></name></type> <name>idx</name></decl></param>, <param><decl><type><name>int</name></type> <name>m</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>index</name> = <name>idx</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>n</name> = <name><name>index</name>.<name>length</name></name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>n</name>&lt;<name>m</name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>idx</name> = new <name><name>int</name><index>[<expr><name>m</name></expr>]</index></name></expr>;</expr_stmt>
            <for>for( <init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name>m</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> )<block>{
                <expr_stmt><expr><name><name>idx</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>index</name><index>[<expr><name>i</name>%<name>n</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><name>index</name> = <name>idx</name></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>start</name> = new <name><name>int</name><index>[<expr><name>m</name> + 1</expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>start</name><index>[<expr>0</expr>]</index></name> = 0</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>start</name><index>[<expr><name>m</name></expr>]</index></name> = <name>n</name></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>k</name> =<init> <expr>1</expr></init></decl>;</init> <condition><expr><name>k</name> &lt; <name>m</name></expr>;</condition> <incr><expr><name>k</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name><name>start</name><index>[<expr><name>k</name></expr>]</index></name> = <name>n</name> * <name>k</name> / <name>m</name></expr>;</expr_stmt>
        }</block></for>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructor: Creates a partition of a randomized set and the size of groups
     * @param index1 Randomized Set. The data set already permuted
     * @param groupsSize Size of groups
     */</comment>
    <constructor><specifier>public</specifier> <name>Partition</name><parameter_list>(<param><decl><type><name><name>int</name><index>[]</index></name></type> <name>index1</name></decl></param>, <param><decl><type><name><name>int</name><index>[]</index></name></type> <name>groupsSize</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>index</name> = <name>index1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>n</name> = <name><name>index</name>.<name>length</name></name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>m</name> =<init> <expr><name><name>groupsSize</name>.<name>length</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>start</name> = new <name><name>int</name><index>[<expr><name>m</name> + 1</expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>start</name><index>[<expr>0</expr>]</index></name> = 0</expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>m</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name><name>start</name><index>[<expr><name>i</name> + 1</expr>]</index></name> = <name><name>start</name><index>[<expr><name>i</name></expr>]</index></name> + <name><name>groupsSize</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><name>n</name> = <name><name>start</name><index>[<expr><name>m</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the elements in the set that does not belongs to the given group
     * @param k The group to be skipped
     * @return The set without the elements in the pos group (Enumeration)
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name><index>[]</index></type> <name>skipGroup</name><parameter_list>(<param><decl><type><name>int</name></type> <name>k</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>length</name> =<init> <expr><name>n</name> - <call><name>groupSize</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name><index>[]</index></type> <name>an</name> =<init> <expr>new <name><name>int</name><index>[<expr><name>length</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>an</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>start</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name><name>start</name><index>[<expr><name>k</name>+1</expr>]</index></name></expr></argument>, <argument><expr><name>an</name></expr></argument>, <argument><expr><name><name>start</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name>n</name>-<name><name>start</name><index>[<expr><name>k</name>+1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>an</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the elements in the set that belongs to the pos group according to the random partition
     * @param k the group to be returned
     * @return The elements in the pos group (Enumeration)
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name><index>[]</index></type> <name>getGroup</name><parameter_list>(<param><decl><type><name>int</name></type> <name>k</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>length</name> =<init> <expr><call><name>groupSize</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name><index>[]</index></type> <name>an</name> =<init> <expr>new <name><name>int</name><index>[<expr><name>length</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name><name>start</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name>an</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>an</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the size of a group in the partion
     * @param k The group
     * @return Size of the group in the partition
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>groupSize</name><parameter_list>(<param><decl><type><name>int</name></type> <name>k</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name><name>start</name><index>[<expr><name>k</name> + 1</expr>]</index></name> - <name><name>start</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Return the number of groups in the partition
     * @return Number of groups in the partition
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>size</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>start</name>.<name>length</name></name> - 1</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Return the random distribution of index
     * @return Random distribution of index
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name><index>[]</index></type> <name>get</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>index</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
