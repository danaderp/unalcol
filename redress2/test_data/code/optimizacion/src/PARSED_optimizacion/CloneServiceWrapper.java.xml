<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\clone\CloneServiceWrapper.java"><package>package <name><name>unalcol</name>.<name>clone</name></name>;</package>

<import>import <name><name>unalcol</name>.<name>reflect</name>.<name>service</name></name>.*;</import>
<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name>.<name>Method</name></name>;</import>
<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name>.<name>Array</name></name>;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Cloning service wrapper for the clone method. Used for classes that
 * already define a clone method&lt;/p&gt;
 *
 * &lt;p&gt;Copyright: Copyright (c) 2010&lt;/p&gt;
 *
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 */</comment>
<class><specifier>public</specifier> class <name>CloneServiceWrapper</name> <super><extends>extends <name>ServiceWrapper</name></extends> <implements>implements <name>CloneService</name></implements></super> <block>{
    <comment type="javadoc">/**
     * Creates a clone wrapped method for objects
     */</comment>
    <constructor><specifier>public</specifier> <name>CloneServiceWrapper</name><parameter_list>()</parameter_list><block>{        
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr>"clone"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clonePrimitiveArray</name><parameter_list>( <param><decl><type><name>Object</name></type> <name>obj</name></decl></param> )</parameter_list><block>{
        <if>if<condition>( <expr><name>obj</name> <name>instanceof</name> <name><name>int</name><index>[]</index></name></expr> )</condition><then><block>{
            <return>return <expr>((<name><name>int</name><index>[]</index></name>)<name>obj</name>).<call><name>clone</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <if>if<condition>( <expr><name>obj</name> <name>instanceof</name> <name><name>double</name><index>[]</index></name></expr> )</condition><then><block>{
            <return>return <expr>((<name><name>double</name><index>[]</index></name>)<name>obj</name>).<call><name>clone</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <if>if<condition>( <expr><name>obj</name> <name>instanceof</name> <name><name>char</name><index>[]</index></name></expr> )</condition><then><block>{
            <return>return <expr>((<name><name>char</name><index>[]</index></name>)<name>obj</name>).<call><name>clone</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <if>if<condition>( <expr><name>obj</name> <name>instanceof</name> <name><name>byte</name><index>[]</index></name></expr> )</condition><then><block>{
            <return>return <expr>((<name><name>byte</name><index>[]</index></name>)<name>obj</name>).<call><name>clone</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <if>if<condition>( <expr><name>obj</name> <name>instanceof</name> <name><name>long</name><index>[]</index></name></expr> )</condition><then><block>{
            <return>return <expr>((<name><name>long</name><index>[]</index></name>)<name>obj</name>).<call><name>clone</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <if>if<condition>( <expr><name>obj</name> <name>instanceof</name> <name><name>short</name><index>[]</index></name></expr> )</condition><then><block>{
            <return>return <expr>((<name><name>short</name><index>[]</index></name>)<name>obj</name>).<call><name>clone</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <if>if<condition>( <expr><name>obj</name> <name>instanceof</name> <name><name>float</name><index>[]</index></name></expr> )</condition><then><block>{
            <return>return <expr>((<name><name>float</name><index>[]</index></name>)<name>obj</name>).<call><name>clone</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <return>return <expr>((<name><name>boolean</name><index>[]</index></name>)<name>obj</name>).<call><name>clone</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
    
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>cloneArray</name><parameter_list>( <param><decl><type><name>Object</name></type> <name>obj</name></decl></param> )</parameter_list><block>{
        <decl_stmt><decl><type><name>Class</name></type> <name>cl</name> =<init> <expr><call><name><name>obj</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getComponentType</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if<condition>( <expr><call><name><name>cl</name>.<name>isPrimitive</name></name><argument_list>()</argument_list></call></expr> )</condition><then><block>{
            <return>return <expr><call><name>clonePrimitiveArray</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>n</name> =<init> <expr><call><name><name>Array</name>.<name>getLength</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Object</name></type> <name>clone</name> =<init> <expr><call><name><name>Array</name>.<name>newInstance</name></name><argument_list>(<argument><expr><name>cl</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for( <init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> )<block>{
            <expr_stmt><expr><call><name><name>Array</name>.<name>set</name></name><argument_list>(<argument><expr><name>clone</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><call><name><name>Clone</name>.<name>get</name></name><argument_list>(<argument><expr><call><name><name>Array</name>.<name>get</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>clone</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Creates a clone of the given object if a clone method is provided by the object
     * @param obj Object from which the CloneService will be retrieved
     * @return A Clone of the object  if a clone method is provided by the object
     * &lt;i&gt;null&lt;/i&gt; otherwise
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list><block>{
        <if>if<condition>( <expr><name>obj</name> <name>instanceof</name> <name>Double</name></expr> )</condition><then><block>{
            <return>return <expr>(<name>Double</name>)<name>obj</name></expr>;</return>
        }</block></then></if>
        
        <if>if<condition>( <expr><name>obj</name> <name>instanceof</name> <name>Integer</name></expr> )</condition><then><block>{
            <return>return <expr>(<name>Integer</name>)<name>obj</name></expr>;</return>
        }</block></then></if>
        
        <if>if<condition>( <expr><call><name><name>obj</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>isArray</name><argument_list>()</argument_list></call></expr> )</condition><then><block>{
            <return>return <expr><call><name>cloneArray</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <try>try<block>{
           <decl_stmt><decl><type><name>Method</name></type> <name>m</name> =<init> <expr><call><name><name>obj</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getMethod</name><argument_list>(<argument><expr><name>method_name</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
           <return>return <expr><call><name><name>m</name>.<name>invoke</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block><catch>catch( <param><decl><type><name>Exception</name></type> <name>e</name></decl></param> )<block>{            
            <expr_stmt><expr><call><name><name>e</name>.<name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
           <return>return <expr><name>null</name></expr>;</return>
        }</block></catch></try>
    }</block></function>
    
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>( <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></param> )</parameter_list><block>{
        <decl_stmt><decl><type><name>CloneServiceWrapper</name></type> <name>w</name> =<init> <expr>new <call><name>CloneServiceWrapper</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>w</name>.<name>clone</name></name><argument_list>(<argument><expr>1.0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class></unit>
