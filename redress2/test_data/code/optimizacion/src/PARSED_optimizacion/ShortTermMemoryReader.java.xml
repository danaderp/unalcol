<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\io\ShortTermMemoryReader.java"><package>package <name><name>unalcol</name>.<name>io</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name></name>.*;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Title: ShortTermMemoryReader &lt;/p&gt;
 *
 * &lt;p&gt;Description: A Reader that is able to maintain the latest read characters (according to its memory size)&lt;/p&gt;
 *
 * &lt;p&gt;Copyright: Copyright (c) 2009&lt;/p&gt;
 *
 * &lt;p&gt;Company: Kunsamu&lt;/p&gt;
 *
 * @author Jonatan Gomez-Perdomo
 * @version 1.0
 */</comment>
<class><specifier>public</specifier> class <name>ShortTermMemoryReader</name> <super><extends>extends <name>Reader</name></extends></super> <block>{
    <comment type="javadoc">/**
     * Default number of characters that is able to maintain the reader (last read characters)
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>MEMORY_SIZE</name> =<init> <expr>100000</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Last read characters
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name><index>[]</index></type> <name>memory</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * Number of characters that is able to maintain the reader (last read characters)
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>n</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>start</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>end</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>pos</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Row of the last read characters
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name><index>[]</index></type> <name>row</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * Column of the last read characters
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name><index>[]</index></type> <name>column</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * Linefeed character
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>LINEFEED</name> =<init> <expr>(<name>int</name>) '\n'</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * Carriage return character
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>CARRIAGERETURN</name> =<init> <expr>(<name>int</name>) '\r'</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Underline Reader
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Reader</name></type> <name>reader</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Initializes the inner state of the UnalcolReader
     * @param n Maximum number of characters stored by the Reader
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>init</name><parameter_list>(<param><decl><type><name>int</name></type> <name>n</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>n</name></name> = <name>n</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>memory</name> = new <name><name>int</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>row</name> = new <name><name>int</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>column</name> = new <name><name>int</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>RowColumnReaderException</name></type> <name>getException</name><parameter_list>( <param><decl><type><name>String</name></type> <name>message</name></decl></param> )</parameter_list><block>{
        <return>return <expr>new <call><name>RowColumnReaderException</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>column</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Creates a short term memory reader that maintains at most the last &lt;i&gt;MEMORY_SIZE&lt;/&gt; read symbols
     * @param MEMORY_SIZE Memory size (maintains at most the last &lt;i&gt;MEMORY_SIZE&lt;/&gt; read symbols)
     * @param reader The underline reader
     */</comment>
    <constructor><specifier>public</specifier> <name>ShortTermMemoryReader</name><parameter_list>(<param><decl><type><name>int</name></type> <name>MEMORY_SIZE</name></decl></param>, <param><decl><type><name>Reader</name></type> <name>reader</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>init</name><argument_list>(<argument><expr><name>MEMORY_SIZE</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>reader</name></name> = <name>reader</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a short term memory reader that maintains at most the last &lt;i&gt;MEMORY_SIZE&lt;/&gt; read symbols
     * @param MEMORY_SIZE Memory size (maintains at most the last &lt;i&gt;MEMORY_SIZE&lt;/&gt; read symbols)
     * @param reader The underline InputStream
     */</comment>
    <constructor><specifier>public</specifier> <name>ShortTermMemoryReader</name><parameter_list>(<param><decl><type><name>int</name></type> <name>MEMORY_SIZE</name></decl></param>, <param><decl><type><name>InputStream</name></type> <name>reader</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>init</name><argument_list>(<argument><expr><name>MEMORY_SIZE</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>reader</name></name> = new <call><name>InputStreamReader</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a short term memory reader that maintains at most the last &lt;i&gt;MEMORY_SIZE&lt;/&gt; (default) read symbols
     * @param reader The underline Reader
     */</comment>
    <constructor><specifier>public</specifier> <name>ShortTermMemoryReader</name><parameter_list>(<param><decl><type><name>Reader</name></type> <name>reader</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>MEMORY_SIZE</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a short term memory reader that maintains at most the last &lt;i&gt;MEMORY_SIZE&lt;/&gt; (default) read symbols
     * @param reader The underline InputStream
     */</comment>
    <constructor><specifier>public</specifier> <name>ShortTermMemoryReader</name><parameter_list>(<param><decl><type><name>InputStream</name></type> <name>reader</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>MEMORY_SIZE</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a short term memory reader using a String as InputStream
     * @param reader The underline InputStream
     */</comment>
    <constructor><specifier>public</specifier> <name>ShortTermMemoryReader</name><parameter_list>(<param><decl><type><name>String</name></type> <name>reader</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><call><name><name>reader</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>new <call><name>StringReader</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Obtains a new symbol from the underline reader
     * @return symbol
     * @throws IOException
     */</comment>
    <function><type><specifier>protected</specifier> <name>int</name></type> <name>get</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name><name>reader</name>.<name>read</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Determines the maximum number of symbols that can "virtually" returned to the reader. (Using the memory)
     * @return Maximum number of symbols that can "virtually" returned to the reader. (Using the memory)
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>maxBack</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>pos</name> &gt;= <name>start</name></expr>)</condition><then><return>return <expr><name>pos</name> - <name>start</name></expr>;</return></then></if>
        <return>return <expr><name>n</name> + <name>pos</name> - <name>start</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the last k read character to the stream, if possible
     * @param k Number of characters to be returned to the stream
     * @return true if it was possible to return the last k read character, false otherwise
     * @throws IOException
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>back</name><parameter_list>(<param><decl><type><name>int</name></type> <name>k</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>flag</name> =<init> <expr>(<name>k</name> &lt;= <call><name>maxBack</name><argument_list>()</argument_list></call>)</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>flag</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>pos</name> -= <name>k</name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>pos</name> &lt; 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>pos</name> += <name>n</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <return>return <expr><name>flag</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the last read character to the stream, if possible
     * @return true if it was possible to return the last read character, false otherwise
     * @throws IOException
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>back</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>flag</name> =<init> <expr>(<name>pos</name> != <name>start</name>)</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>flag</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>pos</name>--</expr>;</expr_stmt>
            <expr_stmt><expr><name>pos</name> = (<name>pos</name> &lt; 0) ? <name>n</name> - 1 : <name>pos</name></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>flag</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Reads a character
     * @return The character that has been read
     * @throws IOException
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>int</name></type> <name>read</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <try>try<block>{
            <decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>pos</name> == <name>end</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>c</name> = <call><name>get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>c</name> != -1</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>end</name> = (<name>end</name> + 1 &lt; <name>n</name>) ? <name>end</name> + 1 : 0</expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>c</name> == <name>CARRIAGERETURN</name> ||
                        (<name>c</name> == <name>LINEFEED</name> &amp;&amp; <name><name>memory</name><index>[<expr><name>pos</name></expr>]</index></name> != <name>CARRIAGERETURN</name>)</expr>)</condition><then> <block>{
                        <expr_stmt><expr><name><name>row</name><index>[<expr><name>end</name></expr>]</index></name> = <name><name>row</name><index>[<expr><name>pos</name></expr>]</index></name> + 1</expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>column</name><index>[<expr><name>end</name></expr>]</index></name> = 0</expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <expr_stmt><expr><name><name>row</name><index>[<expr><name>end</name></expr>]</index></name> = <name><name>row</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>c</name> != <name>LINEFEED</name></expr>)</condition><then> <block>{
                            <expr_stmt><expr><name><name>column</name><index>[<expr><name>end</name></expr>]</index></name> = <name><name>column</name><index>[<expr><name>pos</name></expr>]</index></name> + 1</expr>;</expr_stmt>
                        }</block></then></if>
                    }</block></else></if>
                    <expr_stmt><expr><name>pos</name> = <name>end</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>memory</name><index>[<expr><name>pos</name></expr>]</index></name> = <name>c</name></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>end</name> == <name>start</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>start</name> = (<name>start</name> + 1 &lt; <name>n</name>) ? <name>start</name> + 1 : 0</expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then></if>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>pos</name> = (<name>pos</name> + 1 &lt; <name>n</name>) ? <name>pos</name> + 1 : 0</expr>;</expr_stmt>
                <expr_stmt><expr><name>c</name> = <name><name>memory</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></else></if>
            <return>return <expr><name>c</name></expr>;</return>
        }</block><catch>catch( <param><decl><type><name>IOException</name></type> <name>e</name></decl></param> )<block>{
            <throw>throw <expr><call><name>getException</name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>


    <comment type="javadoc">/**
     * Read characters into a portion of an array. This method will block until
     * some input is available, an I/O error occurs, or the end of the stream is reached.
     * @param cbuf Destination buffer
     * @param off Offset at which to start storing characters
     * @param len Maximum number of characters to read
     * @return The number of characters read, or -1 if the end of the stream has been reached
     * @throws IOException - If an I/O error occurs
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>int</name></type> <name>read</name><parameter_list>(<param><decl><type><name><name>char</name><index>[]</index></name></type> <name>cbuf</name></decl></param>, <param><decl><type><name>int</name></type> <name>off</name></decl></param>, <param><decl><type><name>int</name></type> <name>len</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <try>try<block>{
            <decl_stmt><decl><type><name>int</name></type> <name>k</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>off</name> &gt;= 0 &amp;&amp; <name>off</name> &lt; <name><name>cbuf</name>.<name>length</name></name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>c</name> =<init> <expr><call><name>read</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><name>c</name> != -1 &amp;&amp; <name>k</name> &lt; <name>len</name> &amp;&amp; <name>off</name> &lt; <name><name>cbuf</name>.<name>length</name></name></expr>)</condition> <block>{
                    <expr_stmt><expr><name><name>cbuf</name><index>[<expr><name>off</name></expr>]</index></name> = (<name>char</name>) <name>c</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>k</name>++</expr>;</expr_stmt>
                    <expr_stmt><expr><name>off</name>++</expr>;</expr_stmt>
                }</block></while>
            }</block></then></if>
            <return>return <expr><name>k</name></expr>;</return>
        }</block><catch>catch( <param><decl><type><name>IOException</name></type> <name>e</name></decl></param> )<block>{
            <throw>throw <expr><call><name>getException</name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * Closes the underline reader
     * @throws IOException
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <try>try<block>{
            <expr_stmt><expr><call><name><name>reader</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block><catch>catch( <param><decl><type><name>IOException</name></type> <name>e</name></decl></param> )<block>{
            <throw>throw <expr><call><name>getException</name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * Marks the actual position as a mark for reseting the reader. The readAheadLimit is
     * not used since it is determined dinamically. if the number of characters read,
     * after calling the mark method, is greather than the size of the buffer
     * then the mark is moved to such maximum number of characters. In this way at least the last n characters
     * are always maintained by the reader.

     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>mark</name><parameter_list>(<param><decl><type><name>int</name></type> <name>readAheadLimit</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>mark</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Marks the actual position as a mark for reseting the reader
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>mark</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>start</name> = <name>pos</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns if the reader supports marks.
     * @return true
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>boolean</name></type> <name>markSupported</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>true</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Resets the reader to the previous mark. Marks are dinamically adjusted in such a way that
     * if the number of characters read, after calling the mark method, is greather than the size of the buffer
     * then the mark is moved to such maximum number of characters. In this way at least the last n characters
     * are always maintained by the reader.
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>reset</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>back</name><argument_list>(<argument><expr><call><name>maxBack</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Skips n characters
     * @param n Characters to be skipped
     * @return Number of characters actually skipped
     * @throws IOException
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>long</name></type> <name>skip</name><parameter_list>(<param><decl><type><name>long</name></type> <name>n</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <try>try<block>{
            <decl_stmt><decl><type><name>long</name></type> <name>k</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>k</name> &lt; <name>n</name> &amp;&amp; <call><name>read</name><argument_list>()</argument_list></call> != -1</expr>)</condition> <block>{
                <expr_stmt><expr><name>k</name>++</expr>;</expr_stmt>
            }</block></while>
            <return>return <expr><name>k</name></expr>;</return>
        }</block><catch>catch( <param><decl><type><name>IOException</name></type> <name>e</name></decl></param> )<block>{
            <throw>throw <expr><call><name>getException</name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>

    }</block></function>

    <comment type="javadoc">/**
     * Gets the actual reading row
     * @return Reading row
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getRow</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>row</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Gets the actual reading column
     * @return Reading column
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getColumn</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>column</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
