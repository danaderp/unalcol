<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\process\ProcessInputStream.java"><package>package <name><name>unalcol</name>.<name>process</name></name>;</package>
<import>import <name><name>java</name>.<name>io</name></name>.*;</import>

<comment type="javadoc">/**
 * &lt;p&gt;A Class for reading the output streams used by an External Process (command).&lt;/p&gt;
 *
 *
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 */</comment>
<class><specifier>public</specifier> class <name>ProcessInputStream</name> <super><implements>implements <name>Runnable</name></implements></super><block>{
    <comment type="javadoc">/**
     * OutputStream used by the External Process (command) that is going to be read
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>InputStream</name></type> <name>is</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Thread used for reading the OutputStream while the External Process is running
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Thread</name></type> <name>thread</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * External Process being executed
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>ExternalProcess</name></type> <name>process</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * OutputStream associated to the OutputStream used by the External Process
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>PrintStream</name></type> <name>out</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates an object for reading the OutputStreams used by an External Process (command). 
     * @param is OutputStream used by the External Process (command) that is going to be read
     * @param process External Process being executed 
     */</comment>
    <constructor><specifier>public</specifier> <name>ProcessInputStream</name><parameter_list>( <param><decl><type><name>InputStream</name></type> <name>is</name></decl></param>, <param><decl><type><name>ExternalProcess</name></type> <name>process</name></decl></param> )</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>is</name></name> = <name>is</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>process</name></name> = <name>process</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates an object for reading the OutputStreams used by an External Process (command).
     * @param is OutputStream used by the External Process (command) that is going to be read
     * @param process External Process being executed
     * @param out OutputStream associated to the OutputStream used by the External Process
     */</comment>
    <constructor><specifier>public</specifier> <name>ProcessInputStream</name><parameter_list>( <param><decl><type><name>InputStream</name></type> <name>is</name></decl></param>, <param><decl><type><name>ExternalProcess</name></type> <name>process</name></decl></param>,
            <param><decl><type><name>PrintStream</name></type> <name>out</name></decl></param> )</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>is</name></name> = <name>is</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>process</name></name> = <name>process</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>out</name></name> = <name>out</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Starts the OutputStream processing
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>start</name> <parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>thread</name> = new <call><name>Thread</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>thread</name>.<name>start</name></name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Process the OutputStream used by the External Process
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name> <parameter_list>()</parameter_list> <block>{
        <try>try <block>{
            <if>if<condition>( <expr><name>out</name> != <name>null</name></expr> )</condition><then><block>{
                <while>while<condition>(<expr><call><name><name>is</name>.<name>available</name></name><argument_list>()</argument_list></call> &gt; 0 || <name><name>process</name>.<name>is_running</name></name></expr> )</condition> <block>{
                    <if>if<condition>( <expr><call><name><name>is</name>.<name>available</name></name><argument_list>()</argument_list></call> &gt; 0</expr> )</condition><then><block>{
                        <expr_stmt><expr><call><name><name>out</name>.<name>print</name></name><argument_list>(<argument><expr>(<name>char</name>)<call><name><name>is</name>.<name>read</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></while>
            }</block></then><else>else<block>{
                <while>while<condition>(<expr><call><name><name>is</name>.<name>available</name></name><argument_list>()</argument_list></call> &gt; 0 || <name><name>process</name>.<name>is_running</name></name></expr> )</condition> <block>{
                    <if>if<condition>( <expr><call><name><name>is</name>.<name>available</name></name><argument_list>()</argument_list></call> &gt; 0</expr> )</condition><then><block>{
                        <expr_stmt><expr><call><name><name>is</name>.<name>read</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></while>
            }</block></else></if>
            <expr_stmt><expr><call><name><name>is</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>ex</name></decl></param>) <block>{
            <expr_stmt><expr><call><name><name>ex</name>.<name>printStackTrace</name></name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>
}</block></class>
</unit>
