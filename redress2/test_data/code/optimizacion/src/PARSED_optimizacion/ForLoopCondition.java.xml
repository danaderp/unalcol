<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\algorithm\iterative\ForLoopCondition.java"><package>package <name><name>unalcol</name>.<name>algorithm</name>.<name>iterative</name></name>;</package>

<import>import <name><name>unalcol</name>.<name>math</name>.<name>logic</name>.<name>Predicate</name></name>;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Represents the condition of a for loop&lt;/p&gt;
 * &lt;p&gt;Copyright: Copyright (c) 2010&lt;/p&gt;
 * 
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 */</comment>

<class><specifier>public</specifier> class <name><name>ForLoopCondition</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name> <super><extends>extends <name><name>Predicate</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></extends> <implements>implements <name>Cloneable</name></implements></super> <block>{

    <comment type="javadoc">/**
     * Iterator variable iter = start
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>iter</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The start value
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>start</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * End value for the iteration process  iter &lt; end
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>end</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * Increment applied to the iterator in each iteration   iter += inc;
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>inc</name> =<init> <expr>1</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructor: Creates an iterate condition with start, end, inc values
     * @param start Start value for the iteration process
     * @param end End value for the iteration process
     * @param inc Increment applied to the iterator in each iteration
     */</comment>
    <constructor><specifier>public</specifier> <name>ForLoopCondition</name><parameter_list>(<param><decl><type><name>int</name></type> <name>start</name></decl></param>, <param><decl><type><name>int</name></type> <name>end</name></decl></param>, <param><decl><type><name>int</name></type> <name>inc</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>start</name></name> = <name>start</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>end</name></name> = <name>end</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>inc</name></name> = <name>inc</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>iter</name></name> = <name>start</name> - <name>inc</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructor: Creates an iterate condition with start, and end values. The inc value is fixed in one
     * @param start Start value for the iteration process
     * @param end End value for the iteration process
     */</comment>
    <constructor><specifier>public</specifier> <name>ForLoopCondition</name><parameter_list>(<param><decl><type><name>int</name></type> <name>start</name></decl></param>, <param><decl><type><name>int</name></type> <name>end</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>start</name></name> = <name>start</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>iter</name></name> = <name>start</name> - <name>inc</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>end</name></name> = <name>end</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructor: Creates an iterate condition with start, and end values.
     * The inc value is fixed in one, and the start value is fixed in zero
     * @param end End value for the iteration process
     */</comment>
    <constructor><specifier>public</specifier> <name>ForLoopCondition</name><parameter_list>(<param><decl><type><name>int</name></type> <name>end</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>end</name></name> = <name>end</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a clone of the predicate
     * @return A copy of the predicate
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>new <call><name>ForLoopCondition</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>inc</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the values of the predicate
     * @param start Start value for the iteration process
     * @param end End value for the iteration process
     * @param inc Increment applied to the iterator in each iteration
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>set</name><parameter_list>(<param><decl><type><name>int</name></type> <name>start</name></decl></param>, <param><decl><type><name>int</name></type> <name>end</name></decl></param>, <param><decl><type><name>int</name></type> <name>inc</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>start</name></name> = <name>start</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>end</name></name> = <name>end</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>inc</name></name> = <name>inc</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>iter</name></name> = <name>start</name> - <name>inc</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Evaluates the iteration condition and after that, it increments the iterator
     * @param object Predicates argument
     * @return true if the condition is satisfied by the iterator (iter &lt; end), false in other case
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>evaluate</name><parameter_list>(<param><decl><type><name>T</name></type> <name>object</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>iter</name> += <name>inc</name></expr>;</expr_stmt>
        <return>return <expr>(<name>iter</name> &lt; <name>end</name>)</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the initial value of the for-loop
     * @return the initial value of the for-loop
     */</comment>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getStart</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>start</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the increment value of the for-loop
     * @return the increment value of the for-loop
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getInc</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>inc</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the final value of the for-loop (SUP LIMIT)
     * @return the initial value of the for-loop (SUP LIMIT)
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getEnd</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>end</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Initializes the internal state of the predicate
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>init</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>iter</name> = <name>start</name> - <name>inc</name></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
