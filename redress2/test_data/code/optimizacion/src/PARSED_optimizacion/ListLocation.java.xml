<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\types\collection\list\ListLocation.java"><package>package <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>list</name></name>;</package>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>Location</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>NoSuchElementException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Title: ListLocation&lt;/p&gt;
 *
 * &lt;p&gt;Description: A class for locating objects in a list&lt;/p&gt;
 *
 * &lt;p&gt;Copyright: Copyright (c) 2009&lt;/p&gt;
 *
 * &lt;p&gt;Company: Kunsamu&lt;/p&gt;
 *
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 */</comment>
<class>class <name><name>ListLocation</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name> <super><implements>implements <name><name>Location</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></implements></super><block>{

    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>Node</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>node</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ListLocation</name><parameter_list>( <param><decl><type><name><name>Node</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>node</name></decl></param> )</parameter_list><block>{
        <expr_stmt><expr><name><name>this</name>.<name>node</name></name> = <name>node</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>iterator</name><parameter_list>()</parameter_list><block>{
        <return>return <expr>new <call><name><name>ListIterator</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>T</name></type> <name>get</name><parameter_list>()</parameter_list><throws>throws <argument><expr><name>NoSuchElementException</name></expr></argument></throws><block>{
        <if>if<condition>( <expr><name>node</name> == <name>null</name></expr> )</condition><then> <throw>throw <expr>new <call><name>NoSuchElementException</name><argument_list>()</argument_list></call></expr>;</throw></then></if>
        <return>return <expr><name><name>node</name>.<name>data</name></name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
