<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\random\real\GaussianGenerator.java"><package>package <name><name>unalcol</name>.<name>random</name>.<name>real</name></name>;</package>

<import>import <name><name>unalcol</name>.<name>random</name>.<name>raw</name>.<name>RawGenerator</name></name>;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Gaussian random number generator.&lt;/p&gt;
 * &lt;p&gt;Copyright: Copyright (c) 2009&lt;/p&gt;
 * 
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 */</comment>

<class><specifier>public</specifier> class <name>GaussianGenerator</name> <super><extends>extends <name>StandardGaussianGenerator</name></extends></super> <block>{
  <comment type="javadoc">/**
   * mean
   */</comment>
  <decl_stmt><decl><type><name>double</name></type> <name>miu</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
  <comment type="javadoc">/**
   * standard deviation
   */</comment>
  <decl_stmt><decl><type><name>double</name></type> <name>sigma</name> =<init> <expr>1.0</expr></init></decl>;</decl_stmt>

  <comment type="javadoc">/**
   * Constructor: Creates a Gaussian Number Generator G~(miu,sigma)
   * @param miu1 Mean
   * @param sigma1 standard deviation
   */</comment>
  <constructor><specifier>public</specifier> <name>GaussianGenerator</name><parameter_list>( <param><decl><type><name>double</name></type> <name>miu1</name></decl></param>, <param><decl><type><name>double</name></type> <name>sigma1</name></decl></param> )</parameter_list><block>{
      <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>miu</name> = <name>miu1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>sigma</name> = <name>sigma1</name></expr>;</expr_stmt>
  }</block></constructor>

  <comment type="javadoc">/**
   * Constructor: Creates a Gaussian Number Generator G~(mu,sigma)
   * @param miu1 Mean
   * @param sigma1 standard deviation
   */</comment>
  <constructor><specifier>public</specifier> <name>GaussianGenerator</name><parameter_list>( <param><decl><type><name>double</name></type> <name>miu1</name></decl></param>, <param><decl><type><name>double</name></type> <name>sigma1</name></decl></param>, <param><decl><type><name>RawGenerator</name></type> <name>g</name></decl></param> )</parameter_list><block>{
      <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>miu</name> = <name>miu1</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>sigma</name> = <name>sigma1</name></expr>;</expr_stmt>
  }</block></constructor>

  <comment type="javadoc">/**
   * Returns a random double number
   * @return A random double number
   */</comment>
  <function><type><specifier>public</specifier> <name>double</name></type> <name>next</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr>(<name>sigma</name>*<call><name><name>super</name>.<name>next</name></name><argument_list>()</argument_list></call> + <name>miu</name>)</expr>;</return>
  }</block></function>

  <function><type><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <name>DoubleGenerator</name></type> <name>new_instance</name><parameter_list>()</parameter_list><block>{
      <return>return <expr>new <call><name>GaussianGenerator</name><argument_list>(<argument><expr><name>miu</name></expr></argument>, <argument><expr><name>sigma</name></expr></argument>, <argument><expr><call><name><name>g</name>.<name>new_instance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>    
  
}</block></class>
</unit>
