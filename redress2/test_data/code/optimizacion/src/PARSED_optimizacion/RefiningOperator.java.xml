<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\optimization\operators\RefiningOperator.java"><package>package <name><name>unalcol</name>.<name>optimization</name>.<name>operators</name></name>;</package>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>vector</name></name>.*;</import>
<comment type="javadoc">/**
 * &lt;p&gt;Title: Refining Operator&lt;/p&gt;
 *
 * &lt;p&gt;Description: Genetic operator that modifies the individuals generated by other
 * genetic operator using a set of ArityOne genetic operators (mutation or local search)&lt;/p&gt;
 *
 * &lt;p&gt;Copyright: Copyright (c) 2010&lt;/p&gt;
 *
 * @author Jonatan Gomez
 * @version 1.0
 */</comment>
<class><specifier>public</specifier> class <name><name>RefiningOperator</name><argument_list>&lt;<argument><name>G</name></argument>&gt;</argument_list></name> <super><extends>extends <name><name>Operator</name><argument_list>&lt;<argument><name>G</name></argument>&gt;</argument_list></name></extends></super><block>{
        <decl_stmt><decl><type><specifier>protected</specifier> <name><name>Operator</name><argument_list>&lt;<argument><name>G</name></argument>&gt;</argument_list></name></type> <name>refined</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>protected</specifier> <name><name>ArityOne</name><argument_list>&lt;<argument><name>G</name></argument>&gt;</argument_list></name><index>[]</index></type> <name>refining</name></decl>;</decl_stmt>
        <comment type="javadoc">/**
         * Constructor: Creates a refining genetic operator with the given operators
         * @param refined Genetic operator to be refined
         * @param refining Genetic operator refining the individuals produced by the refined operator
         */</comment>
        <constructor><specifier>public</specifier> <name>RefiningOperator</name><parameter_list>( <param><decl><type><name><name>Operator</name><argument_list>&lt;<argument><name>G</name></argument>&gt;</argument_list></name></type> <name>refined</name></decl></param>, <param><decl><type><name><name>ArityOne</name><argument_list>&lt;<argument><name>G</name></argument>&gt;</argument_list></name></type> <name>refining</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>refined</name></name> = <name>refined</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>refining</name></name> = new <name><name>ArityOne</name><index>[]</index></name><block>{<expr><name>refining</name></expr>}</block></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="javadoc">/**
         * Constructor: Creates a refining genetic operator with the given operators
         * @param refined Genetic operator to be refined
         * @param refining Genetic operators refining the individuals produced by the refined operator
         */</comment>
        <constructor><specifier>public</specifier> <name>RefiningOperator</name><parameter_list>( <param><decl><type><name><name>Operator</name><argument_list>&lt;<argument><name>G</name></argument>&gt;</argument_list></name></type> <name>refined</name></decl></param>, <param><decl><type><name><name><name>ArityOne</name><argument_list>&lt;<argument><name>G</name></argument>&gt;</argument_list></name><index>[]</index></name></type> <name>refining</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>refined</name></name> = <name>refined</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>refining</name></name> = <name>refining</name></expr>;</expr_stmt>
        }</block></constructor>

      <comment type="javadoc">/**
       * Apply the genetic operator to the individuals in the population of parents
       * an refine the offspring using the refining operators
       * @param parents Collection of parents used by the genetic operator
       * @return A collection of individuals generated by the refined genetic operator
       */</comment>
        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>G</name></argument>&gt;</argument_list></name></type> <name>generates</name><parameter_list>( <param><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>G</name></argument>&gt;</argument_list></name></type> <name>parents</name></decl></param> )</parameter_list><block>{
            <decl_stmt><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>G</name></argument>&gt;</argument_list></name></type> <name>ind</name> =<init> <expr><call><name><name>refined</name>.<name>generates</name></name><argument_list>( <argument><expr><name>parents</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for( <init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name><name>refining</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> )<block>{
                <decl_stmt><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>G</name></argument>&gt;</argument_list></name></type> <name>newInd</name> =<init> <expr>new <call><name>Vector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for (<init><decl><type><name>int</name></type> <name>j</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>j</name> &lt; <call><name><name>ind</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
                        <decl_stmt><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>G</name></argument>&gt;</argument_list></name></type> <name>subInd</name> =<init> <expr><name><name>refining</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>generates</name><argument_list>( <argument><expr><call><name><name>ind</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>int</name></type> <name>size</name> =<init> <expr><call><name><name>subInd</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <for>for (<init><decl><type><name>int</name></type> <name>h</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>h</name> &lt; <name>size</name></expr>;</condition> <incr><expr><name>h</name>++</expr></incr>) <block>{
                            <expr_stmt><expr><call><name><name>newInd</name>.<name>add</name></name><argument_list>( <argument><expr><call><name><name>subInd</name>.<name>get</name></name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                        }</block></for>
                }</block></for>
                <expr_stmt><expr><call><name><name>ind</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>ind</name> = <name>newInd</name></expr>;</expr_stmt>
            }</block></for>
            <return>return <expr><name>ind</name></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>getArity</name><parameter_list>()</parameter_list><block>{ <return>return <expr><call><name><name>refined</name>.<name>getArity</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>

        <function><type><specifier>public</specifier> <name>Object</name></type> <name>owner</name><parameter_list>()</parameter_list><block>{
            <return>return <expr><call><name><name>refined</name>.<name>owner</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>
}</block></class></unit>
