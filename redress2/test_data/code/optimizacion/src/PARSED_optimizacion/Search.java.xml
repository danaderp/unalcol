<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\sort\Search.java"><package>package <name><name>unalcol</name>.<name>sort</name></name>;</package>

<comment type="javadoc">/**
 * &lt;p&gt;Searching algorithm for sorted arrays of objects&lt;/p&gt;
 * 
 * &lt;p&gt;Copyright: Copyright (c) 2010&lt;/p&gt;
 * 
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 */</comment>
<class><specifier>public</specifier> class <name><name>Search</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name> <block>{

    <comment type="javadoc">/**
     * Searches for the position of the given element. The vector should be sorted
     * @param sorted Array of elements (should be sorted)
     * @param x Element to be located
     * @param order Order used for locating the object
     * @return The position of the given object, -1 if the given object is not in the array
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>find</name><parameter_list>(<param><decl><type><name><name>T</name><index>[]</index></name></type> <name>sorted</name></decl></param>, <param><decl><type><name>T</name></type> <name>x</name></decl></param>, <param><decl><type><name><name>Order</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>order</name></decl></param>)</parameter_list> <block>{
       <return>return <expr><call><name>find</name><argument_list>( <argument><expr><name>sorted</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>sorted</name>.<name>length</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>order</name></expr></argument> )</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Searches for the position of the given element. The vector should be sorted
     * @param sorted Array of elements (should be sorted)
     * @param x Element to be located
     * @param order Order used for locating the object
     * @return The position of the given object, -1 if the given object is not in the array
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>find</name><parameter_list>(<param><decl><type><name><name>T</name><index>[]</index></name></type> <name>sorted</name></decl></param>, <param><decl><type><name>int</name></type> <name>start</name></decl></param>, <param><decl><type><name>int</name></type> <name>end</name></decl></param>, <param><decl><type><name>T</name></type> <name>x</name></decl></param>, <param><decl><type><name><name>Order</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>order</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>pos</name> =<init> <expr><call><name>findRight</name><argument_list>(<argument><expr><name>sorted</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>order</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>pos</name> &gt; <name>start</name> &amp;&amp; <call><name><name>order</name>.<name>compare</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>sorted</name><index>[<expr><name>pos</name> - 1</expr>]</index></name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>pos</name>--</expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>pos</name> = -1</expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><name>pos</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Determines if the sorted array contains the given element (according to the associated order)
     * @param sorted Array of elements (should be sorted)
     * @param x Element to be located
     * @param order Order used for locating the object
     * @return &lt;i&gt;true&lt;/i&gt; if the element belongs to the sorted array, &lt;i&gt;false&lt;/i&gt; otherwise
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>contains</name><parameter_list>(<param><decl><type><name><name>T</name><index>[]</index></name></type> <name>sorted</name></decl></param>, <param><decl><type><name>int</name></type> <name>start</name></decl></param>, <param><decl><type><name>int</name></type> <name>end</name></decl></param>, <param><decl><type><name>T</name></type> <name>x</name></decl></param>, <param><decl><type><name><name>Order</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>order</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>(<call><name>find</name><argument_list>(<argument><expr><name>sorted</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>order</name></expr></argument>)</argument_list></call> != -1)</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Determines if the sorted array contains the given element (according to the associated order)
     * @param sorted Array of elements (should be sorted)
     * @param x Element to be located
     * @param order Order used for locating the object
     * @return &lt;i&gt;true&lt;/i&gt; if the element belongs to the sorted array, &lt;i&gt;false&lt;/i&gt; otherwise
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>contains</name><parameter_list>(<param><decl><type><name><name>T</name><index>[]</index></name></type> <name>sorted</name></decl></param>, <param><decl><type><name>T</name></type> <name>x</name></decl></param>, <param><decl><type><name><name>Order</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>order</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>(<call><name>find</name><argument_list>(<argument><expr><name>sorted</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>order</name></expr></argument>)</argument_list></call> != -1)</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Searches for the position of the first element in the array that is bigger
     * than the element given. The array should be sorted
     * @param sorted Vector of elements (should be sorted)
     * @param x Element to be located
     * @param order Order used for locating the object
     * @return Position of the object that is bigger than the given element
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>findRight</name><parameter_list>(<param><decl><type><name><name>T</name><index>[]</index></name></type> <name>sorted</name></decl></param>, <param><decl><type><name>T</name></type> <name>x</name></decl></param>, <param><decl><type><name><name>Order</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>order</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>findRight</name><argument_list>( <argument><expr><name>sorted</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>sorted</name>.<name>length</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>order</name></expr></argument> )</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Searches for the position of the first element in the array that is bigger
     * than the element given. The array should be sorted
     * @param sorted Vector of elements (should be sorted)
     * @param x Element to be located
     * @param order Order used for locating the object
     * @return Position of the object that is bigger than the given element
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>findRight</name><parameter_list>(<param><decl><type><name><name>T</name><index>[]</index></name></type> <name>sorted</name></decl></param>, <param><decl><type><name>int</name></type> <name>start</name></decl></param>, <param><decl><type><name>int</name></type> <name>end</name></decl></param>, <param><decl><type><name>T</name></type> <name>x</name></decl></param>, <param><decl><type><name><name>Order</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>order</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>end</name> &gt; <name>start</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>a</name> =<init> <expr><name>start</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>b</name> =<init> <expr><name>end</name> - 1</expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>order</name>.<name>compare</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>sorted</name><index>[<expr><name>a</name></expr>]</index></name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
                <return>return <expr><name>start</name></expr>;</return>
            }</block></then></if>
            <if>if <condition>(<expr><call><name><name>order</name>.<name>compare</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>sorted</name><index>[<expr><name>b</name></expr>]</index></name></expr></argument>)</argument_list></call> &gt;= 0</expr>)</condition><then> <block>{
                <return>return <expr><name>end</name></expr>;</return>
            }</block></then></if>

            <while>while <condition>(<expr><name>a</name> + 1 &lt; <name>b</name></expr>)</condition> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>m</name> =<init> <expr>(<name>a</name> + <name>b</name>) / 2</expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>order</name>.<name>compare</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>sorted</name><index>[<expr><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>b</name> = <name>m</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><name>a</name> = <name>m</name></expr>;</expr_stmt>
                }</block></else></if>
            }</block></while>
            <return>return <expr><name>b</name></expr>;</return>
        }</block></then> <else>else <block>{
            <return>return <expr><name>start</name></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Searches for the position of the last element in the array that is smaller
     * than the element given. The array should be sorted
     * @param sorted Vector of elements (should be sorted)
     * @param x Element to be located
     * @param order Order used for locating the element
     * @return Position of the object that is smaller than the given element
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>findLeft</name><parameter_list>(<param><decl><type><name><name>T</name><index>[]</index></name></type> <name>sorted</name></decl></param>, <param><decl><type><name>T</name></type> <name>x</name></decl></param>, <param><decl><type><name><name>Order</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>order</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>findLeft</name><argument_list>( <argument><expr><name>sorted</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>sorted</name>.<name>length</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>order</name></expr></argument> )</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Searches for the position of the last element in the array that is smaller
     * than the element given. The array should be sorted
     * @param sorted Vector of elements (should be sorted)
     * @param x Element to be located
     * @param order Order used for locating the element
     * @return Position of the object that is smaller than the given element
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>findLeft</name><parameter_list>(<param><decl><type><name><name>T</name><index>[]</index></name></type> <name>sorted</name></decl></param>, <param><decl><type><name>int</name></type> <name>start</name></decl></param>, <param><decl><type><name>int</name></type> <name>end</name></decl></param>, <param><decl><type><name>T</name></type> <name>x</name></decl></param>, <param><decl><type><name><name>Order</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>order</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>end</name> &gt; <name>start</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>a</name> =<init> <expr><name>start</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>b</name> =<init> <expr><name>end</name> - 1</expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>order</name>.<name>compare</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>sorted</name><index>[<expr><name>a</name></expr>]</index></name></expr></argument>)</argument_list></call> &lt;= 0</expr>)</condition><then> <block>{
                <return>return <expr><name>start</name>-1</expr>;</return>
            }</block></then></if>
            <if>if <condition>(<expr><call><name><name>order</name>.<name>compare</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>sorted</name><index>[<expr><name>b</name></expr>]</index></name></expr></argument>)</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
                <return>return <expr><name>b</name></expr>;</return>
            }</block></then></if>

            <while>while <condition>(<expr><name>a</name> + 1 &lt; <name>b</name></expr>)</condition> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>m</name> =<init> <expr>(<name>a</name> + <name>b</name>) / 2</expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>order</name>.<name>compare</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>sorted</name><index>[<expr><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call> &lt;= 0</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>b</name> = <name>m</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><name>a</name> = <name>m</name></expr>;</expr_stmt>
                }</block></else></if>
            }</block></while>
            <return>return <expr><name>a</name></expr>;</return>
        }</block></then> <else>else <block>{
            <return>return <expr><name>start</name></expr>;</return>
        }</block></else></if>
    }</block></function>
}</block></class>
</unit>
