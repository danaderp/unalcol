<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\random\real\SymmetricGenerator.java"><comment type="block">/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */</comment>
<package>package <name><name>unalcol</name>.<name>random</name>.<name>real</name></name>;</package>

<import>import <name><name>unalcol</name>.<name>random</name>.<name>Random</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>random</name>.<name>util</name>.<name>BooleanGenerator</name></name>;</import>

<comment type="javadoc">/**
 *
 * @author jgomez
 */</comment>
<class><specifier>public</specifier> class <name>SymmetricGenerator</name> <super><extends>extends <name>DoubleGenerator</name></extends></super> <block>{
    <decl_stmt><decl><type><specifier>protected</specifier> <name>DoubleGenerator</name></type> <name>g</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>BooleanGenerator</name></type> <name>b</name> =<init> <expr>new <call><name>BooleanGenerator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <constructor><specifier>public</specifier> <name>SymmetricGenerator</name><parameter_list>(<param><decl><type><name>DoubleGenerator</name></type> <name>_g</name></decl></param>)</parameter_list><block>{
        <expr_stmt><expr><name>g</name> = <name>_g</name></expr>;</expr_stmt>
    }</block></constructor>
    <comment type="javadoc">/**
     * Returns a random double number
     * @return A random double number
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>double</name></type> <name>next</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>b</name>.<name>next</name></name><argument_list>()</argument_list></call>?<call><name><name>g</name>.<name>next</name></name><argument_list>()</argument_list></call>:-<call><name><name>g</name>.<name>next</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>     
    
    <constructor><specifier>public</specifier> <name>SymmetricGenerator</name><parameter_list>( <param><decl><type><name>DoubleGenerator</name></type> <name>_g</name></decl></param>, <param><decl><type><name>BooleanGenerator</name></type> <name>_b</name></decl></param> )</parameter_list><block>{
        <expr_stmt><expr><name>g</name> = <name>_g</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name> = <name>_b</name></expr>;</expr_stmt>
    }</block></constructor>
    
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>DoubleGenerator</name></type> <name>new_instance</name><parameter_list>()</parameter_list><block>{
        <return>return <expr>new <call><name>SymmetricGenerator</name><argument_list>(<argument><expr><call><name><name>g</name>.<name>new_instance</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>b</name>.<name>new_instance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>        
}</block></class>
</unit>
