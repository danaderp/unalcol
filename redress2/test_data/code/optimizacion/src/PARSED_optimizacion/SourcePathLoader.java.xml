<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\reflect\loader\tool\SourcePathLoader.java"><package>package <name><name>unalcol</name>.<name>reflect</name>.<name>loader</name>.<name>tool</name></name>;</package>
<import>import <name><name>unalcol</name>.<name>reflect</name>.<name>compiler</name>.<name>Compiler</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name></name>.*;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Keep Track of java/class files maintained in the given Paths.
 * Compiles java source code when necessary (if updated or class file does not exist).&lt;/p&gt;
 *
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 */</comment>
<class><specifier>public</specifier> class <name>SourcePathLoader</name> <super><extends>extends <name>PathLoader</name></extends></super><block>{
    <comment type="javadoc">/**
     * Sources path
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>source_path</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Set of loaded jar files (Jar files)
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>MultiJarLoader</name></type> <name>libraries</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Java Compiler (used for compiling the Java Source code
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Compiler</name></type> <name>compiler</name> =<init> <expr>new <call><name>Compiler</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a Source/Class Files manager on the given path (same source and class path)
     * @param source_path Source/class Path
     * @param libraries Set of loaded libraries (Jar files)
     */</comment>
    <constructor><specifier>public</specifier> <name>SourcePathLoader</name><parameter_list>(<param><decl><type><name>String</name></type> <name>source_path</name></decl></param>, <param><decl><type><name>MultiJarLoader</name></type> <name>libraries</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>( <argument><expr><name>source_path</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>source_path</name></name> = <name>source_path</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>libraries</name></name> = <name>libraries</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a Source/Class Files manager on the given paths
     * @param source_path Source Path
     * @param class_path Class Path
     * @param libraries Set of loaded libraries (Jar files)
     */</comment>
    <constructor><specifier>public</specifier> <name>SourcePathLoader</name><parameter_list>(<param><decl><type><name>String</name></type> <name>source_path</name></decl></param>, <param><decl><type><name>String</name></type> <name>class_path</name></decl></param>,
            <param><decl><type><name>MultiJarLoader</name></type> <name>libraries</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>( <argument><expr><name>class_path</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>source_path</name></name> = <name>source_path</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>libraries</name></name> = <name>libraries</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/** Loads the bytes from file
     * @param classname Name of the resource
     * @return Class bytes from the disk if possible, null otherwise.
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>byte</name><index>[]</index></type> <name>loadBytes</name><parameter_list>(<param><decl><type><name>String</name></type> <name>classname</name></decl></param>)</parameter_list><block>{
        <decl_stmt><decl><type><name>String</name></type> <name>filename</name> =<init> <expr><call><name><name>classname</name>.<name>replace</name></name><argument_list>(<argument><expr>'.'</expr></argument>, <argument><expr><call><name><name>javaEnv</name>.<name>fileSeparator</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>javaFilename</name> =<init> <expr><name>filename</name> + ".java"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>classFilename</name> =<init> <expr><name>filename</name> + ".class"</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>File</name></type> <name>javaFile</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name>source_path</name></expr></argument>, <argument><expr><name>javaFilename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>classFile</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name>class_path</name></expr></argument>, <argument><expr><name>classFilename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Checking if source code file is newer than class file</comment>
        <if>if <condition>(<expr><call><name><name>javaFile</name>.<name>exists</name></name><argument_list>()</argument_list></call> &amp;&amp;
            (!<call><name><name>classFile</name>.<name>exists</name></name><argument_list>()</argument_list></call> ||
             <call><name><name>javaFile</name>.<name>lastModified</name></name><argument_list>()</argument_list></call> &gt; <call><name><name>classFile</name>.<name>lastModified</name></name><argument_list>()</argument_list></call>)</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>classFile</name>.<name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>( <expr>!<call><name>compile</name><argument_list>(<argument><expr><call><name><name>javaFile</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>libraries</name></expr></argument>)</argument_list></call></expr> )</condition><then><block>{
                <return>return <expr><name>null</name></expr>;</return>
            }</block></then></if>
           <return>return <expr><call><name><name>super</name>.<name>loadBytes</name></name><argument_list>(<argument><expr><name>classname</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <return>return <expr><name>null</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/** Spawns a process to compile the java source code file specified in the
     * 'javaFile' parameter using the given set of Libraries (Jar files).
     * @param javaFile Java file to be compiled
     * @param libraries Set of loaded libraries (Jar files)
     * @return &lt;i&gt;true&lt;/i&gt; if the compilation worked, &lt;i&gt;false&lt;/i&gt; otherwise.
     */</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>compile</name><parameter_list>(<param><decl><type><name>String</name></type> <name>javaFile</name></decl></param>, <param><decl><type><name>MultiJarLoader</name></type> <name>libraries</name></decl></param>)</parameter_list><block>{
        <expr_stmt><expr><call><name><name>compiler</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>compiler</name>.<name>setOutputPath</name></name><argument_list>(<argument><expr><name>class_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>compiler</name>.<name>addSourcePath</name></name><argument_list>(<argument><expr><name>source_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>compiler</name>.<name>setLibraries</name></name><argument_list>(<argument><expr><name>libraries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>compiler</name>.<name>run</name></name><argument_list>(<argument><expr><name>javaFile</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Gets the source path
     * @return Source path
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>sourcePath</name><parameter_list>()</parameter_list><block>{
        <return>return <expr><name>source_path</name></expr>;</return>
    }</block></function>
}</block></class></unit>
