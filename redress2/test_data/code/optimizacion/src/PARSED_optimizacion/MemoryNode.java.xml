<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\types\collection\tree\bplus\memory\MemoryNode.java"><comment type="block">/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */</comment>
<package>package <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>tree</name>.<name>bplus</name>.<name>memory</name></name>;</package>

<import>import <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>tree</name>.<name>bplus</name>.<name>BPlusNode</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>tree</name>.<name>bplus</name>.<name>BPlusInnerNode</name></name>;</import>

<comment type="javadoc">/**
 *
 * @author jgomez
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name><name>MemoryNode</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name> <super><implements>implements <name><name>BPlusNode</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></implements></super> <block>{
    <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>BPlusNode</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>left</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>BPlusNode</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>right</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>BPlusInnerNode</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>parent</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>    
    
    <comment type="line">// Size    </comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>int</name></type> <name>n</name><parameter_list>()</parameter_list><block>{ <return>return <expr><name>n</name></expr>;</return> }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>setn</name><parameter_list>( <param><decl><type><name>int</name></type> <name>n</name></decl></param> )</parameter_list><block>{
        <expr_stmt><expr><name><name>this</name>.<name>n</name></name> = <name>n</name></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="line">//Siblings</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name><name>BPlusNode</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>left</name><parameter_list>()</parameter_list><block>{
        <return>return <expr><name>left</name></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>setLeft</name><parameter_list>( <param><decl><type><name><name>BPlusNode</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>node</name></decl></param> )</parameter_list><block>{
        <expr_stmt><expr><name>left</name> = <name>node</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name><name>BPlusNode</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>right</name><parameter_list>()</parameter_list><block>{
        <return>return <expr><name>right</name></expr>;</return>
    }</block></function>
    
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>setRight</name><parameter_list>( <param><decl><type><name><name>BPlusNode</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>node</name></decl></param> )</parameter_list><block>{
        <expr_stmt><expr><name>right</name> = <name>node</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">//Parent</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name><name>BPlusInnerNode</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>parent</name><parameter_list>()</parameter_list><block>{
        <return>return <expr><name>parent</name></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>setParent</name><parameter_list>( <param><decl><type><name><name>BPlusInnerNode</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>node</name></decl></param> )</parameter_list><block>{
        <expr_stmt><expr><name>parent</name> = <name>node</name></expr>;</expr_stmt>
    }</block></function>        
}</block></class>
</unit>
