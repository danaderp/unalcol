<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\types\real\array\DoubleArraySimpleReadService.java"><comment type="block">/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */</comment>

<package>package <name><name>unalcol</name>.<name>types</name>.<name>real</name>.<name>array</name></name>;</package>
<import>import <name><name>unalcol</name>.<name>io</name></name>.*;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>integer</name></name>.*;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>real</name></name>.*;</import>
<import>import <name><name>java</name>.<name>io</name></name>.*;</import>
<import>import <name><name>unalcol</name>.<name>reflect</name>.<name>service</name>.<name>ServiceProvider</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>reflect</name>.<name>util</name>.<name>ReflectUtil</name></name>;</import>

<comment type="javadoc">/**
 *
 * @author jgomez
 */</comment>
<class><specifier>public</specifier> class <name>DoubleArraySimpleReadService</name> <super><implements>implements <name><name>ReadService</name><argument_list>&lt;<argument><name><name>double</name><index>[]</index></name></argument>&gt;</argument_list></name></implements></super><block>{
    <comment type="javadoc">/**
     * Character used for separating the values in the array
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>char</name></type> <name>separator</name> =<init> <expr>' '</expr></init></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>READ_DIMENSION</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>USE_ARGUMENT_DIMENSION</name> =<init> <expr>-2</expr></init></decl>;</decl_stmt>    
    <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>dim</name> =<init> <expr><name>READ_DIMENSION</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>protected</specifier> <name>IntegerReadService</name></type> <name>integer</name> =<init> <expr>new <call><name>IntegerReadService</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>DoubleReadService</name></type> <name>real</name> =<init> <expr>new <call><name>DoubleReadService</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates an integer array persistent method that uses an space for separatng the array values
     */</comment>
    <constructor><specifier>public</specifier> <name>DoubleArraySimpleReadService</name><parameter_list>()</parameter_list> <block>{}</block></constructor>

    <comment type="javadoc">/**
     * Creates a double array persistent method that uses the give charater for separating the array values
     * @param separator Character used for separating the array values
     */</comment>
    <constructor><specifier>public</specifier> <name>DoubleArraySimpleReadService</name><parameter_list>(<param><decl><type><name>char</name></type> <name>separator</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>separator</name></name> = <name>separator</name></expr>;</expr_stmt>
    }</block></constructor>
    
    <constructor><specifier>public</specifier> <name>DoubleArraySimpleReadService</name><parameter_list>(<param><decl><type><name>int</name></type> <name>dim</name></decl></param>)</parameter_list><block>{
        <expr_stmt><expr><name><name>this</name>.<name>dim</name></name> = <name>dim</name></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>DoubleArraySimpleReadService</name><parameter_list>(<param><decl><type><name>int</name></type> <name>dim</name></decl></param>, <param><decl><type><name>char</name></type> <name>separator</name></decl></param>)</parameter_list><block>{
        <expr_stmt><expr><name><name>this</name>.<name>dim</name></name> = <name>dim</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>separator</name></name> = <name>separator</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the Class that owns the PlugIn
     * @return Class The PlugIns owner class
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>owner</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>double</name><index>[]</index></name>.class</expr>;</return>
    }</block></function>
    
    <function><type><specifier>public</specifier> <name>double</name><index>[]</index></type> <name>read</name><parameter_list>( <param><decl><type><name><name>double</name><index>[]</index></name></type> <name>x</name></decl></param>, <param><decl><type><name>ShortTermMemoryReader</name></type> <name>reader</name></decl></param> )</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>d</name> =<init> <expr><name>dim</name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>d</name>==<name>USE_ARGUMENT_DIMENSION</name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>d</name> = <name><name>x</name>.<name>length</name></name></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><call><name>read</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <function><type><specifier>public</specifier> <name>double</name><index>[]</index></type> <name>read</name><parameter_list>( <param><decl><type><name>ShortTermMemoryReader</name></type> <name>reader</name></decl></param>, <param><decl><type><name>int</name></type> <name>n</name></decl></param> )</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws><block>{
        <if>if<condition>( <expr><name>n</name>==<name>READ_DIMENSION</name></expr>)</condition><then><block>{
           <expr_stmt><expr><name>n</name> = (<name>Integer</name>)<call><name><name>integer</name>.<name>read</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><call><name><name>Persistency</name>.<name>readSeparator</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name>separator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>d</name> =<init> <expr>new <name><name>double</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for( <init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> )<block>{
            <expr_stmt><expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name> = (<name>Double</name>)<call><name><name>real</name>.<name>read</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Persistency</name>.<name>readSeparator</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name>separator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>d</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></param> )</parameter_list><block>{
        <comment type="line">// Reflection</comment>
        <decl_stmt><decl><type><name>ServiceProvider</name></type> <name>provider</name> =<init> <expr><call><name><name>ReflectUtil</name>.<name>getProvider</name></name><argument_list>(<argument><expr>"services/"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<comment type="line">//        StringReader r = new StringReader("  3,  -1234.4555e-123, 345.6789, 23.456");</comment>
<comment type="line">//        DoubleArraySimpleReadService service = new DoubleArraySimpleReadService(',');</comment>
        <decl_stmt><decl><type><name>StringReader</name></type> <name>r</name> =<init> <expr>new <call><name>StringReader</name><argument_list>(<argument><expr>"  3  -1234.4555e-123 345.6789 23.456"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ShortTermMemoryReader</name></type> <name>reader</name> =<init> <expr>new <call><name>ShortTermMemoryReader</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>x</name> =<init> <expr>new <name><name>double</name><index>[<expr>0</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <try>try<block>{
           <expr_stmt><expr><name>x</name> = (<name><name>double</name><index>[]</index></name>)<call><name><name>Persistency</name>.<name>read</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>Persistency</name>.<name>toString</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block><catch>catch(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param> )<block>{
            <expr_stmt><expr><call><name><name>e</name>.<name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

}</block></class>
</unit>
