<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\types\integer\IntegerReadService.java"><comment type="block">/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */</comment>

<package>package <name><name>unalcol</name>.<name>types</name>.<name>integer</name></name>;</package>
<import>import <name><name>unalcol</name>.<name>io</name></name>.*;</import>

<import>import <name><name>java</name>.<name>io</name></name>.*;</import>

<comment type="javadoc">/**
 *
 * @author jgomez
 */</comment>
<class><specifier>public</specifier> class <name>IntegerReadService</name> <super><implements>implements <name><name>ReadService</name><argument_list>&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></implements></super><block>{

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>Object</name></type> <name>owner</name><parameter_list>()</parameter_list><block>{
        <return>return <expr><name><name>Integer</name>.<name><name/></name></name>class</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>back</name><parameter_list>( <param><decl><type><name>char</name></type> <name>c</name></decl></param>, <param><decl><type><name>ShortTermMemoryReader</name></type> <name>reader</name></decl></param> )</parameter_list><block>{
        <if>if<condition>( <expr><name>c</name> != (<name>char</name>)-1</expr> )</condition><then><block>{
            <expr_stmt><expr><call><name><name>reader</name>.<name>back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>readDigitStar</name><parameter_list>( <param><decl><type><name>ShortTermMemoryReader</name></type> <name>reader</name></decl></param>,
                                  <param><decl><type><name>StringBuilder</name></type> <name>sb</name></decl></param> )</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws><block>{
        <decl_stmt><decl><type><name>char</name></type> <name>c</name> =<init> <expr>(<name>char</name>)<call><name><name>reader</name>.<name>read</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while<condition>( <expr><call><name><name>Character</name>.<name>isDigit</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block>{
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>c</name> = (<name>char</name>)<call><name><name>reader</name>.<name>read</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <expr_stmt><expr><call><name>back</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>removeSpaces</name><parameter_list>( <param><decl><type><name>ShortTermMemoryReader</name></type> <name>reader</name></decl></param> )</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws><block>{
        <decl_stmt><decl><type><name>char</name></type> <name>c</name> =<init> <expr>(<name>char</name>)<call><name><name>reader</name>.<name>read</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while<condition>( <expr><call><name><name>Character</name>.<name>isSpaceChar</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block>{
            <expr_stmt><expr><name>c</name> = (<name>char</name>)<call><name><name>reader</name>.<name>read</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <expr_stmt><expr><call><name>back</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>Integer</name></type> <name>read</name><parameter_list>(<param><decl><type><name>Integer</name></type> <name>i</name></decl></param>, <param><decl><type><name>ShortTermMemoryReader</name></type> <name>reader</name></decl></param>)</parameter_list> <throws>throws
            <argument><expr><name>RowColumnReaderException</name></expr></argument></throws><block>{
        <return>return <expr><call><name>read</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>Integer</name></type> <name>read</name><parameter_list>(<param><decl><type><name>ShortTermMemoryReader</name></type> <name>reader</name></decl></param>)</parameter_list> <throws>throws
            <argument><expr><name>RowColumnReaderException</name></expr></argument></throws><block>{
        <try>try<block>{
            <expr_stmt><expr><call><name>removeSpaces</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>char</name></type> <name>c</name> =<init> <expr>(<name>char</name>)<call><name><name>reader</name>.<name>read</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if<condition>( <expr><call><name><name>Character</name>.<name>isDigit</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> || <name>c</name>=='-' || <name>c</name>=='+'</expr> )</condition><then><block>{
                <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> =<init> <expr>new <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>readDigitStar</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><call><name><name>Integer</name>.<name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>sb</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>
            <throw>throw <expr>new <call><name>Exception</name><argument_list>(<argument><expr>"Unexpected symbol " + <name>c</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block><catch>catch( <param><decl><type><name>Exception</name></type> <name>e</name></decl></param> )<block>{
            <throw>throw <expr><call><name><name>reader</name>.<name>getException</name></name><argument_list>(<argument><expr>"Integer Parser Error "+<call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>

    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></param> )</parameter_list><block>{
        <decl_stmt><decl><type><name>StringReader</name></type> <name>r</name> =<init> <expr>new <call><name>StringReader</name><argument_list>(<argument><expr>"    --1234,"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ShortTermMemoryReader</name></type> <name>reader</name> =<init> <expr>new <call><name>ShortTermMemoryReader</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>IntegerReadService</name></type> <name>service</name> =<init> <expr>new <call><name>IntegerReadService</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try<block>{
           <decl_stmt><decl><type><name>Integer</name></type> <name>i</name> =<init> <expr><call><name><name>service</name>.<name>read</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
           <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block><catch>catch(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param> )<block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>( <argument><expr>((<name>RowColumnReaderException</name>)<name>e</name>).<call><name>getColumn</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>e</name>.<name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>
}</block></class>
</unit>
