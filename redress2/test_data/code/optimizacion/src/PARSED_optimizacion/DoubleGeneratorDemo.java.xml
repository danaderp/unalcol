<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\random\demo\DoubleGeneratorDemo.java"><comment type="block">/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */</comment>
<package>package <name><name>unalcol</name>.<name>random</name>.<name>demo</name></name>;</package>

<import>import <name><name>unalcol</name>.<name>random</name>.<name>real</name>.<name>GaussianGenerator</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>random</name>.<name>real</name>.<name>PowerLawGenerator</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>random</name>.<name>real</name>.<name>SimplestGeneralizedPowerLawGenerator</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>random</name>.<name>real</name>.<name>SymmetricGenerator</name></name>;</import>

<comment type="javadoc">/**
 *
 * @author jgomez
 */</comment>
<class><specifier>public</specifier> class <name>DoubleGeneratorDemo</name> <block>{
    
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>gaussian</name><parameter_list>(<param><decl><type><name>int</name></type> <name>n</name></decl></param>)</parameter_list><block>{
      <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>( <argument><expr>"Gaussian"</expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>GaussianGenerator</name></type> <name>g</name> =<init> <expr>new <call><name>GaussianGenerator</name><argument_list>(<argument><expr>0.0</expr></argument>, <argument><expr>1.0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for( <init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> )<block>{
          <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>( <argument><expr><call><name><name>g</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      }</block></for>
  }</block></function>  
  
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>power_law</name><parameter_list>(<param><decl><type><name>int</name></type> <name>n</name></decl></param>)</parameter_list><block>{
      <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>( <argument><expr>"Power Law"</expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>SimplestGeneralizedPowerLawGenerator</name></type> <name>g</name> =<init> <expr>new <call><name>SimplestGeneralizedPowerLawGenerator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>x</name> =<init> <expr><call><name><name>g</name>.<name>generate</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for( <init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> )<block>{
          <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>( <argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      }</block></for>
  }</block></function>
    
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>symmetric_power_law</name><parameter_list>(<param><decl><type><name>int</name></type> <name>n</name></decl></param>)</parameter_list><block>{
      <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>( <argument><expr>"Symmetric Power Law"</expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>SymmetricGenerator</name></type> <name>g</name> =<init> <expr>new <call><name>SymmetricGenerator</name><argument_list>( <argument><expr>new <call><name>SimplestGeneralizedPowerLawGenerator</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>x</name> =<init> <expr><call><name><name>g</name>.<name>generate</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for( <init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> )<block>{
          <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>( <argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      }</block></for>
  }</block></function>
      
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>( <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></param> )</parameter_list><block>{
      <decl_stmt><decl><type><name>int</name></type> <name>n</name> =<init> <expr>10</expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>gaussian</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>power_law</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>symmetric_power_law</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>    
}</block></class>
</unit>
