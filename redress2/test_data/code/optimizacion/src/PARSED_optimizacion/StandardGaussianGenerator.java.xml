<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\random\real\StandardGaussianGenerator.java"><package>package <name><name>unalcol</name>.<name>random</name>.<name>real</name></name>;</package>

<import>import <name><name>unalcol</name>.<name>random</name>.<name>raw</name>.<name>RawGenerator</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>random</name>.<name>rngpack</name>.<name>RanMT</name></name>;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Gaussian random number generator.&lt;/p&gt;
 *
 * &lt;p&gt;Copyright: Copyright (c) 2009&lt;/p&gt;
 * 
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 */</comment>

<class><specifier>public</specifier> class <name>StandardGaussianGenerator</name> <super><extends>extends <name>DoubleGenerator</name></extends></super><block>{
    
    <decl_stmt><decl><type><specifier>protected</specifier> <name>RawGenerator</name></type> <name>g</name></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * Creates a standard Gaussian number generator
     */</comment>
    <constructor><specifier>public</specifier> <name>StandardGaussianGenerator</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>g</name> = new <call><name>RanMT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a standard Gaussian number generator
     */</comment>
    <constructor><specifier>public</specifier> <name>StandardGaussianGenerator</name><parameter_list>( <param><decl><type><name>RawGenerator</name></type> <name>_g</name></decl></param> )</parameter_list> <block>{
        <expr_stmt><expr><name>g</name> = <name>_g</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns a random double number following the standard Gaussian distribution
     * @param x Inverse value (cumulative probability)
     * @return A random double number
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>double</name></type> <name>next</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>x</name>,<name>y</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>r</name></decl>;</decl_stmt>
        <do>do <block>{
            <expr_stmt><expr><name>x</name> = 2.0 * <call><name><name>g</name>.<name>next</name></name><argument_list>()</argument_list></call> - 1.0</expr>;</expr_stmt>
            <expr_stmt><expr><name>y</name> = 2.0 * <call><name><name>g</name>.<name>next</name></name><argument_list>()</argument_list></call> - 1.0</expr>;</expr_stmt>
            <expr_stmt><expr><name>r</name> = <name>x</name> * <name>x</name> + <name>y</name> * <name>y</name></expr>;</expr_stmt>
        }</block> while <condition>(<expr><name>r</name> &gt;= 1.0</expr>)</condition>;</do>

        <decl_stmt><decl><type><name>double</name></type> <name>z</name> =<init> <expr><call><name><name>Math</name>.<name>sqrt</name></name><argument_list>( <argument><expr>-2.0 * <call><name><name>Math</name>.<name>log</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> / <name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>(<name>y</name> * <name>z</name>)</expr>;</return>
    }</block></function>
    
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>DoubleGenerator</name></type> <name>new_instance</name><parameter_list>()</parameter_list><block>{
        <return>return <expr>new <call><name>StandardGaussianGenerator</name><argument_list>(<argument><expr><call><name><name>g</name>.<name>new_instance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>    
}</block></class>
</unit>
