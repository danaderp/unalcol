<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\reflect\util\JavaOS.java"><package>package <name><name>unalcol</name>.<name>reflect</name>.<name>util</name></name>;</package>
<import>import <name><name>java</name>.<name>io</name></name>.*;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Collection of values which are determined according to the Operative System
 * where the Java Machine is running&lt;/p&gt;
 *
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 */</comment>
<class><specifier>public</specifier> class <name>JavaOS</name> <block>{
    <comment type="javadoc">/**
     * Character used for directories hierarchy
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <name>char</name></type> <name>FILE_SEPARATOR</name> =<init> <expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"file.separator"</expr></argument>)</argument_list></call>.<call><name>charAt</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Character used for defining class paths for the java compiler and java virtual machine.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <name>char</name></type> <name>PATH_SEPARATOR</name> =<init> <expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"path.separator"</expr></argument>)</argument_list></call>.<call><name>charAt</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Character used for enclosing class paths, class sources, etc for the java compiler and java virtual machine.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <name>char</name></type> <name>CLOSING_CHARACTER</name> =<init> 
            <expr>(<call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"os.name"</expr></argument>)</argument_list></call>.<call><name>indexOf</name><argument_list>(<argument><expr>"Windows"</expr></argument>)</argument_list></call> != -1)?'"':' '</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates an string with the appropriated operating system file separator
     * @param path String standar java path name
     * @return Path with the appropriated file separator character (according to the operating system)
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>systemPath</name><parameter_list>(<param><decl><type><name>String</name></type> <name>path</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>path</name>.<name>replace</name></name><argument_list>(<argument><expr>'/'</expr></argument>, <argument><expr><name>FILE_SEPARATOR</name></expr></argument>)</argument_list></call>.<call><name>replace</name><argument_list>(<argument><expr>'\\'</expr></argument>, <argument><expr><name>FILE_SEPARATOR</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Creates the absolute version of a path (including last / symbol)
     * @param path String to be converted to absolute path
     * @return String with the absolute path
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>absolutePath</name><parameter_list>( <param><decl><type><name>String</name></type> <name>path</name></decl></param> )</parameter_list><block>{
        <return>return <expr>(new <call><name>File</name><argument_list>(<argument><expr><call><name>systemPath</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<call><name>getAbsolutePath</name><argument_list>()</argument_list></call>) + "/"</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Character used for directories hierarchy
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>char</name></type> <name>fileSeparator</name><parameter_list>()</parameter_list><block>{
        <return>return <expr><name>FILE_SEPARATOR</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Character used for defining class paths for the java compiler and java virtual machine.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>char</name></type> <name>pathSeparator</name><parameter_list>()</parameter_list><block>{
        <return>return <expr><name>PATH_SEPARATOR</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Character used for enclosing class paths, class sources, etc for the java compiler and java virtual machine.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>char</name></type> <name>closingCharacter</name><parameter_list>()</parameter_list><block>{
        <return>return <expr><name>CLOSING_CHARACTER</name></expr>;</return>
    }</block></function>
    
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>applicationPath</name><parameter_list>( <param><decl><type><name>Class</name></type> <name>cl</name></decl></param> )</parameter_list><block>{
        <decl_stmt><decl><type><name>String</name></type> <name>applicationDir</name> =<init> <expr><call><name><name>cl</name>.<name>getResource</name></name><argument_list>(<argument><expr><call><name><name>cl</name>.<name>getSimpleName</name></name><argument_list>()</argument_list></call>+".class"</expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>applicationDir</name> = <call><name><name>applicationDir</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>applicationDir</name>.<name>lastIndexOf</name></name><argument_list>(<argument><expr>"/unalcol"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>( <expr><call><name><name>applicationDir</name>.<name>endsWith</name></name><argument_list>(<argument><expr>".jar!"</expr></argument>)</argument_list></call></expr>)</condition><then><block>{
            <expr_stmt><expr><name>applicationDir</name> = <call><name><name>applicationDir</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>applicationDir</name>.<name>lastIndexOf</name></name><argument_list>(<argument><expr>"/"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if<condition>( <expr><call><name><name>applicationDir</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"file:"</expr></argument>)</argument_list></call></expr>)</condition><then><block>{
            <expr_stmt><expr><name>applicationDir</name> = <call><name><name>applicationDir</name>.<name>substring</name></name><argument_list>(<argument><expr>5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>applicationDir</name></expr>;</return>
    }</block></function>
}</block></class></unit>
