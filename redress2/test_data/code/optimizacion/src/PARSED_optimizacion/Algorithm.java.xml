<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\algorithm\Algorithm.java"><package>package <name><name>unalcol</name>.<name>algorithm</name></name>;</package>

<comment type="javadoc">/**
 * &lt;p&gt;Abstract version of an algorithm, can be used in a Thread&lt;/p&gt;
 * &lt;p&gt;A subclass that implements the Algorithm class can receive the
 * algorithm parameters as arguments of the constructor.&lt;/p&gt;
 *
 * &lt;p&gt;Copyright: Copyright (c) 2010&lt;/p&gt;
 *
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 */</comment>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name><name>Algorithm</name><argument_list>&lt;<argument><name>I</name></argument>, <argument><name>O</name></argument>&gt;</argument_list></name> <super><extends>extends <name><name>ThreadFunction</name><argument_list>&lt;<argument><name>I</name></argument>,<argument><name>O</name></argument>&gt;</argument_list></name></extends> <implements>implements <name>Runnable</name></implements></super> <block>{
    <comment type="javadoc">/**
     * If the algorithm has finished or not
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>done</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="line">// Running as thread</comment>

    <comment type="javadoc">/**
     * Algorithm input
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>I</name></type> <name>input</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Algorithm output
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>O</name></type> <name>output</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Initializes the internal state of the algorithm.
     * @param input Input of the algorithm
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>init</name><parameter_list>(<param><decl><type><name>I</name></type> <name>input</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>input</name></name> = <name>input</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Gets the input of algorithm
     * @return The input of algorithm
     */</comment>
    <function><type><specifier>public</specifier> <name>I</name></type> <name>input</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>input</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Gets the result generated by the algorithm
     * @return Answer produced by the algorithm
     */</comment>
    <function><type><specifier>public</specifier> <name>O</name></type> <name>output</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>output</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Executes the algorithm on the given input
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>continueFlag</name></name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><name>output</name> = <call><name><name>this</name>.<name>apply</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Adds the output of the algorithm to the tracers
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addToTrace</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>addToTrace</name><argument_list>( <argument><expr><call><name>output</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class></unit>
