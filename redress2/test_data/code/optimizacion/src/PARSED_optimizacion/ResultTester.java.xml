<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\optimization\testbed\real\lsgo_benchmark\ResultTester.java"><package>package <name><name>unalcol</name>.<name>optimization</name>.<name>testbed</name>.<name>real</name>.<name>lsgo_benchmark</name></name>;</package>
<comment type="block">/*
 * Copyright (c) 2009 Thomas Weise for NICAL
 * http://www.it-weise.de/
 * tweise@gmx.de
 *
 * GNU LESSER GENERAL PUBLIC LICENSE (Version 2.1, February 1999)
 */</comment>

<import>import <name><name>java</name>.<name>io</name>.<name>BufferedReader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStreamReader</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>

<comment type="javadoc">/**
 * The tester for comparing the benchmark functions' results
 * 
 * @author Thomas Weise
 */</comment>
<class><specifier>public</specifier> class <name>ResultTester</name> <block>{

  <comment type="javadoc">/** the test functions */</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Function</name><index>[]</index></type> <name>TESTS</name> =<init> <expr>new <name><name>Function</name><index>[]</index></name> <block>{<comment type="line">//</comment> 
  <comment type="line">// new F1(),</comment>
  <comment type="line">// new F2(),</comment>
  <comment type="line">// new F3(),</comment>
<comment type="line">//   new F4(),</comment>
  <comment type="line">// new F5(),</comment>
  <comment type="line">// new F6(),</comment>
  <comment type="line">// new F7(),</comment>
<comment type="line">//   new F8(),</comment>
  <comment type="line">// new F9(),</comment>
  <comment type="line">// new F10(),</comment>
  <comment type="line">// new F11(),</comment>
  <comment type="line">// new F12(),</comment>
<comment type="line">//   new F13(),</comment>
  <comment type="line">// new F14(),</comment>
  <comment type="line">// new F15(),</comment>
  <comment type="line">// new F16(),</comment>
  <comment type="line">// new F17(),</comment>
  <comment type="line">// new F18(),</comment>
  <comment type="line">// new F19(),</comment>
  <expr>new <call><name>F20</name><argument_list>()</argument_list></call></expr>,<comment type="line">//</comment>
  }</block></expr></init></decl>;</decl_stmt>

  <comment type="javadoc">/**
   * The test function used to check whether the routines here have been
   * implemented correctly.
   * 
   * @param params
   *          the parameters
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>void</name></type> <name>main</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>params</name></decl></param>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>double</name><index>[]</index><index>[]</index></type> <name>d</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name>, <name>j</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>d</name> = <call><name>loadData</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>TESTS</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
      <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><name><name>TESTS</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>getShortName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <name><name>d</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>print</name></name><argument_list>(<argument><expr>'\t'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>print</name></name><argument_list>(<argument><expr><name><name>TESTS</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>compute</name><argument_list>(<argument><expr><name><name>d</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></for>
    }</block></for>
  }</block></function>

  <comment type="javadoc">/**
   * load the test data
   * 
   * @return the test data
   */</comment>
  <function><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>double</name><index>[]</index><index>[]</index></type> <name>loadData</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>InputStream</name></type> <name>is</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BufferedReader</name></type> <name>r</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>s</name>, <name>os</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>ss</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ArrayList</name></type><comment type="block">/* &lt;double[]&gt; */</comment><name>ds</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>d</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>ds</name> = <name>null</name></expr>;</expr_stmt>

    <try>try <block>{
      <expr_stmt><expr><name>is</name> = <name><name>ResultTester</name>.<name><name/></name></name>class.<call><name>getResourceAsStream</name><argument_list>(<argument><expr>"f20_opt.txt"</expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//$NON-NLS-1$</comment>
      <if>if <condition>(<expr><name>is</name> == <name>null</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>is</name> = new <call><name>FileInputStream</name><argument_list>(<argument><expr><name><name>ResultTester</name>.<name><name/></name></name>class.<call><name>getPackage</name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call>
            .<call><name>replace</name><argument_list>(<argument><expr>'.'</expr></argument>, <argument><expr><name><name>File</name>.<name>pathSeparatorChar</name></name></expr></argument>)</argument_list></call>
            + <name><name>File</name>.<name>pathSeparatorChar</name></name> + "f20_opt.txt"</expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//$NON-NLS-1$</comment>
      }</block></then></if>
      <try>try <block>{
        <expr_stmt><expr><name>r</name> = new <call><name>BufferedReader</name><argument_list>(<argument><expr>new <call><name>InputStreamReader</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{

          <expr_stmt><expr><name>ds</name> = new <call><name>ArrayList</name><comment type="block">/* &lt;double[]&gt; */</comment><argument_list>(<argument><expr>100</expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <while>while <condition>(<expr>(<name>s</name> = <call><name><name>r</name>.<name>readLine</name></name><argument_list>()</argument_list></call>) != <name>null</name></expr>)</condition> <block>{
            <expr_stmt><expr><name>s</name> = <call><name><name>s</name>.<name>trim</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name><name>s</name>.<name>length</name></name><argument_list>()</argument_list></call> &lt;= 0</expr>)</condition><then> <block>{
              <continue>continue;</continue>
            }</block></then></if>

            <do>do <block>{
              <expr_stmt><expr><name>os</name> = <name>s</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>s</name> = <call><name><name>s</name>.<name>replace</name></name><argument_list>(<argument><expr>'\t'</expr></argument>, <argument><expr>' '</expr></argument>)</argument_list></call>.<call><name>replace</name><argument_list>(<argument><expr>"  "</expr></argument>, <argument><expr>" "</expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//$NON-NLS-1$//$NON-NLS-2$</comment>
            }</block> while <condition>(<expr><name>s</name> != <name>os</name></expr>)</condition>;</do>

            <expr_stmt><expr><name>ss</name> = <call><name><name>s</name>.<name>split</name></name><argument_list>(<argument><expr>" "</expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//$NON-NLS-1$</comment>
            <if>if <condition>(<expr><name><name>ss</name>.<name>length</name></name> != <name><name>Defaults</name>.<name>DEFAULT_DIM</name></name></expr>)</condition><then> <block>{
              <continue>continue;</continue>
            }</block></then></if>

            <expr_stmt><expr><name>d</name> = new <name><name>double</name><index>[<expr><name><name>Defaults</name>.<name>DEFAULT_DIM</name></name></expr>]</index></name></expr>;</expr_stmt>
            <for>for (<init><expr><name>i</name> = (<name><name>d</name>.<name>length</name></name> - 1)</expr>;</init> <condition><expr><name>i</name> &gt;= 0</expr>;</condition> <incr><expr><name>i</name>--</expr></incr>) <block>{
              <expr_stmt><expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name><name>Double</name>.<name>parseDouble</name></name><argument_list>(<argument><expr><name><name>ss</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>trim</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>

            <expr_stmt><expr><call><name><name>ds</name>.<name>add</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></while>

        }</block> <finally>finally <block>{
          <expr_stmt><expr><call><name><name>r</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>is</name> = <name>null</name></expr>;</expr_stmt>
        }</block></finally></try>
      }</block> <finally>finally <block>{
        <if>if <condition>(<expr><name>is</name> != <name>null</name></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>is</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      }</block></finally></try>

      <if>if <condition>(<expr><name>ds</name> != <name>null</name></expr>)</condition><then> <block>{
        <return>return <expr>((<name><name>double</name><index>[]</index><index>[]</index></name>) (<call><name><name>ds</name>.<name>toArray</name></name><argument_list>(<argument><expr>new <name><name>double</name><index>[<expr><call><name><name>ds</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>]</index><index>[]</index></name></expr></argument>)</argument_list></call>))</expr>;</return>
      }</block></then></if>
      <return>return <expr><name>null</name></expr>;</return>
    }</block> <catch>catch (<param><decl><type><name>Throwable</name></type> <name>tt</name></decl></param>) <block>{
      <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>tt</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>

  }</block></function>

}</block></class>
</unit>
