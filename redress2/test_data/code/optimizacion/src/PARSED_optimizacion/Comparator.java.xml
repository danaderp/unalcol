<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\sort\Comparator.java"><package>package <name><name>unalcol</name>.<name>sort</name></name>;</package>

<import>import <name><name>unalcol</name>.<name>reflect</name>.<name>util</name></name>.*;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Order service provider. Wraps all required comparisson methods and service calls&lt;/p&gt;
 *
 * &lt;p&gt;Copyright: Copyright (c) 2010&lt;/p&gt;
 *
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 */</comment>
<class><specifier>public</specifier> class <name>Comparator</name><block>{

    <comment type="javadoc">/**
     * Gets the order used by the given object
     * @param obj Owner of the order to be retrieved
     * @return Currently used order method (by the object)
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Order</name></type> <name>get</name><parameter_list>( <param><decl><type><name>Object</name></type> <name>obj</name></decl></param> )</parameter_list><block>{
        <try>try<block>{
            <return>return <expr>((<name>Order</name>)<call><name><name>ReflectUtil</name>.<name>getProvider</name></name><argument_list>()</argument_list></call>.<call><name>default_service</name><argument_list>(<argument><expr><name><name>Order</name>.<name><name/></name></name>class</expr></argument>,<argument><expr><name>obj</name></expr></argument>)</argument_list></call>)</expr>;</return>
        }</block><catch>catch( <param><decl><type><name>Exception</name></type> <name>e</name></decl></param> )<block>{
        }</block></catch></try>
        <return>return <expr><name>null</name></expr>;</return>        
    }</block></function>
    
    <comment type="javadoc">/**
     * Determines if the object one is less than (in some order) object two
     * @param one The first object to compare
     * @param two The secont object to compare
     * @return (one&lt;two)
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>lessThan</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>one</name></decl></param>, <param><decl><type><name>Object</name></type> <name>two</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Order</name></type> <name>order</name> =<init> <expr><call><name>get</name><argument_list>(<argument><expr><name>one</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>(<call><name><name>order</name>.<name>compare</name></name><argument_list>(<argument><expr><name>one</name></expr></argument>, <argument><expr><name>two</name></expr></argument>)</argument_list></call> &lt; 0)</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Determines if the object one is greater than (in some order) object two
     * @param one The first object to compare
     * @param two The second object to compare
     * @return (one&gt;two)
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>greaterThan</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>one</name></decl></param>, <param><decl><type><name>Object</name></type> <name>two</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Order</name></type> <name>order</name> =<init> <expr><call><name>get</name><argument_list>(<argument><expr><name>one</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>(<call><name><name>order</name>.<name>compare</name></name><argument_list>(<argument><expr><name>one</name></expr></argument>, <argument><expr><name>two</name></expr></argument>)</argument_list></call> &gt; 0)</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Determines if the object one is equal to the object two
     * @param one The first object to compare
     * @param two The second object to compare
     * @return (one==two)
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>equalTo</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>one</name></decl></param>, <param><decl><type><name>Object</name></type> <name>two</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Order</name></type> <name>order</name> =<init> <expr><call><name>get</name><argument_list>(<argument><expr><name>one</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>(<call><name><name>order</name>.<name>compare</name></name><argument_list>(<argument><expr><name>one</name></expr></argument>, <argument><expr><name>two</name></expr></argument>)</argument_list></call> == 0)</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Determines if the object one is equal to the object two
     * @param one The first object to compare
     * @param two The second object to compare
     * @return (one==two)
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>differentTo</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>one</name></decl></param>, <param><decl><type><name>Object</name></type> <name>two</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Order</name></type> <name>order</name> =<init> <expr><call><name>get</name><argument_list>(<argument><expr><name>one</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>(<call><name><name>order</name>.<name>compare</name></name><argument_list>(<argument><expr><name>one</name></expr></argument>, <argument><expr><name>two</name></expr></argument>)</argument_list></call> != 0)</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Determines if the object one is less than or equal to (in some order) object two
     * @param one The first object to compare
     * @param two The secont object to compare
     * @return (one&lt;=two)
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>lessThanEqualTo</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>one</name></decl></param>, <param><decl><type><name>Object</name></type> <name>two</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Order</name></type> <name>order</name> =<init> <expr><call><name>get</name><argument_list>(<argument><expr><name>one</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>(<call><name><name>order</name>.<name>compare</name></name><argument_list>(<argument><expr><name>one</name></expr></argument>, <argument><expr><name>two</name></expr></argument>)</argument_list></call> &lt;= 0)</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Determines if the object one is greater than or equal to (in some order) object two
     * @param one The first object to compare
     * @param two The secont object to compare
     * @return (one&gt;=two)
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>greaterThanEqualTo</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>one</name></decl></param>, <param><decl><type><name>Object</name></type> <name>two</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Order</name></type> <name>order</name> =<init> <expr><call><name>get</name><argument_list>(<argument><expr><name>one</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>(<call><name><name>order</name>.<name>compare</name></name><argument_list>(<argument><expr><name>one</name></expr></argument>, <argument><expr><name>two</name></expr></argument>)</argument_list></call> &gt;= 0)</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Determines if one elements is less, equal or greather than other.
     * A value &lt; 0 indicates that one is less than two, a value = 0 indicates
     * that one is equal to two and a value &gt; 0 indicates that one is greather than two
     * @param one First object to be compared
     * @param two Second object to be compared
     * @return a value &lt; 0 if one &lt; two, 0 if one == two and &gt; 0 if one &gt; two.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>one</name></decl></param>, <param><decl><type><name>Object</name></type> <name>two</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Order</name></type> <name>order</name> =<init> <expr><call><name>get</name><argument_list>(<argument><expr><name>one</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>order</name>.<name>compare</name></name><argument_list>(<argument><expr><name>one</name></expr></argument>, <argument><expr><name>two</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class></unit>
