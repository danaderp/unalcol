<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\sort\algorithm\BubbleSort.java"><package>package <name><name>unalcol</name>.<name>sort</name>.<name>algorithm</name></name>;</package>
<import>import <name><name>unalcol</name>.<name>sort</name></name>.*;</import>

<comment type="javadoc">/**
 * &lt;p&gt;BubbleSort algorithm&lt;/p&gt;
 *
 * &lt;p&gt;Copyright: Copyright (c) 2010&lt;/p&gt;
 * 
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 */</comment>
<class><specifier>public</specifier> class <name><name>BubbleSort</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name> <super><extends>extends <name><name>Sort</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></extends></super> <block>{

  <comment type="javadoc">/**
   * Default constructor
   */</comment>
  <constructor><specifier>public</specifier> <name>BubbleSort</name><parameter_list>()</parameter_list><block>{}</block></constructor>

  <comment type="javadoc">/**
   * Crates a bubble sort algorithm with the given order
   * @param order Order used for sorting the objects
   */</comment>
  <constructor><specifier>public</specifier> <name>BubbleSort</name><parameter_list>( <param><decl><type><name><name>Order</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>order</name></decl></param> )</parameter_list><block>{
      <expr_stmt><expr><call><name>super</name><argument_list>( <argument><expr><name>order</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <comment type="javadoc">/**
   * Creates a bubble sort algorithm using the given order and overwriting array flag
   * @param order Order used for sorting the objects
   * @param overwrite If the array should be overwrited or not
   */</comment>
  <constructor><specifier>public</specifier> <name>BubbleSort</name><parameter_list>( <param><decl><type><name><name>Order</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>order</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>overwrite</name></decl></param> )</parameter_list><block>{
      <expr_stmt><expr><call><name>super</name><argument_list>( <argument><expr><name>order</name></expr></argument>, <argument><expr><name>overwrite</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

    <comment type="javadoc">/**
     * Sorts a portion of the array of objects according to the given order (it does not creates a new array)
     * @param a Array of objects to be sorted
     * @param start Initial position in the array to be sorted
     * @param end Final position in the array to be sorte
     * @return &lt;i&gt;true&lt;/i&gt; If the sorting process was done without fails, &lt;i&gt;false&lt;/i&gt; otherwise
     */</comment>
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>apply</name><parameter_list>(<param><decl><type><name><name>T</name><index>[]</index></name></type> <name>a</name></decl></param>, <param><decl><type><name>int</name></type> <name>start</name></decl></param>, <param><decl><type><name>int</name></type> <name>end</name></decl></param>)</parameter_list> <block>{
      <if>if<condition>( <expr><call><name>getOrder</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> != <name>null</name></expr> )</condition><then><block>{
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>end</name> - 1 &amp;&amp; <name>continueFlag</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
          <for>for (<init><decl><type><name>int</name></type> <name>j</name> =<init> <expr><name>i</name> + 1</expr></init></decl>;</init> <condition><expr><name>j</name> &lt; <name>end</name> &amp;&amp; <name>continueFlag</name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
            <if>if <condition>(<expr><call><name><name>order</name>.<name>compare</name></name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call>&lt;0</expr>)</condition><then> <block>{
              <decl_stmt><decl><type><name>T</name></type> <name>x</name> =<init> <expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
              <expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name> = <name>x</name></expr>;</expr_stmt>
            }</block></then></if>
          }</block></for>
        }</block></for>
        <return>return <expr>true</expr>;</return>
      }</block></then></if>
      <return>return <expr>false</expr>;</return>
  }</block></function>
}</block></class></unit>
