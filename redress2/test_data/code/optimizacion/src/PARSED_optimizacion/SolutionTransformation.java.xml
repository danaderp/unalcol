<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\optimization\solution\SolutionTransformation.java"><comment type="block">/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */</comment>
<package>package <name><name>unalcol</name>.<name>optimization</name>.<name>solution</name></name>;</package>

<import>import <name><name>unalcol</name>.<name>optimization</name>.<name>OptimizationFunction</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>optimization</name>.<name>generation</name>.<name>PopulationGeneration</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>optimization</name>.<name>replacement</name>.<name>Replacement</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>reflect</name>.<name>service</name>.<name>Service</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>vector</name>.<name>Vector</name></name>;</import>

<comment type="javadoc">/**
 *
 * @author jgomez
 */</comment>
<class><specifier>public</specifier> class <name><name>SolutionTransformation</name> <argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name> <super><implements>implements <name>Service</name></implements></super><block>{
  <comment type="javadoc">/**
   * Init the internal state of transformation
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>init</name><parameter_list>()</parameter_list><block>{}</block></function>

    <comment type="javadoc">/**
     * Replacement strategy
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>SolutionReplacement</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>replacement</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Offspring generation strategy
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>SolutionVariation</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>strategy</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructor
     * @param strategy Replacement strategy
     * @param replacement Offspring generation strategy (based on genetic operators)
     */</comment>
    <constructor><specifier>public</specifier> <name>SolutionTransformation</name><parameter_list>( <param><decl><type><name><name>SolutionVariation</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>strategy</name></decl></param>,
                                     <param><decl><type><name><name>SolutionReplacement</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>replacement</name></decl></param> )</parameter_list><block>{
        <expr_stmt><expr><name><name>this</name>.<name>strategy</name></name> = <name>strategy</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>replacement</name></name> = <name>replacement</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Transforms the given population to another population according to its rules.
     * @param population The population to be transformed
     * @return Offspring population
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Solution</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>apply</name><parameter_list>( <param><decl><type><name><name>Solution</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>solution</name></decl></param>, <param><decl><type><name><name>OptimizationFunction</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>f</name></decl></param> )</parameter_list><block>{
        <decl_stmt><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name><name>Solution</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>candidates</name> =<init> <expr><call><name><name>strategy</name>.<name>apply</name></name><argument_list>(<argument><expr><name>solution</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Solution</name>.<name>evaluate</name></name><argument_list>(<argument><expr>(<name>Vector</name>)<name>candidates</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>( <expr><call><name><name>f</name>.<name>isNonStationary</name></name><argument_list>()</argument_list></call></expr> )</condition><then><block>{
            <expr_stmt><expr><call><name><name>solution</name>.<name>evaluate</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><call><name><name>replacement</name>.<name>apply</name></name><argument_list>(<argument><expr><name>solution</name></expr></argument>, <argument><expr><name>candidates</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Offspring generation strategy (based on genetic operators)
     * @return Offspring generation strategy (based on genetic operators)
     */</comment>
    <function><type><specifier>public</specifier> <name><name>SolutionVariation</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>generation</name><parameter_list>()</parameter_list><block>{ <return>return <expr><name>strategy</name></expr>;</return> }</block></function>

    <comment type="javadoc">/**
     * Gets the Replacement strategy used by the evolutionary transformation
     * @return Replacement strategy
     */</comment>
    <function><type><specifier>public</specifier> <name><name>SolutionReplacement</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>replacement</name><parameter_list>()</parameter_list><block>{ <return>return <expr><name>replacement</name></expr>;</return> }</block></function>

    <comment type="javadoc">/**
     * Owner
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>Object</name></type> <name>owner</name><parameter_list>()</parameter_list><block>{
        <return>return <expr><name><name>Object</name>.<name><name/></name></name>class</expr>;</return>
    }</block></function>
}</block></class>
</unit>
