<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\random\rngpack\Ranlux.java"><package>package <name><name>unalcol</name>.<name>random</name>.<name>rngpack</name></name>;</package>
<import>import <name><name>java</name>.<name>util</name></name>.*;</import>

<import>import <name><name>unalcol</name>.<name>random</name>.<name>raw</name></name>.*;</import>

<comment type="line">//</comment>
<comment type="line">// RngPack 1.1a by Paul Houle</comment>
<comment type="line">// http://www.honeylocust.com/RngPack/</comment>
<comment type="line">//</comment>
<comment type="javadoc">/**
*
*     &lt;TT&gt;RANLUX&lt;/TT&gt; is an advanced pseudo-random number generator based on the
*     &lt;TT&gt;RCARRY&lt;/TT&gt; algorithm proposed in 1991 by Marsaglia and Zaman.
*     &lt;TT&gt;RCARRY&lt;/TT&gt;
*     used a subtract-and-borrow algorithm with a period on the order of
*     10&lt;SUP&gt;171&lt;/SUP&gt; but still had detectable correlations between
*     numbers.  Martin Luescher proposed the &lt;TT&gt;RANLUX&lt;/TT&gt;
*     algorithm in 1993;  &lt;TT&gt;RANLUX&lt;/TT&gt; generates pseudo-random numbers using
*     &lt;TT&gt;RCARRY&lt;/TT&gt; but throws away numbers to destroy correlations.
*     Thus RANLUX trades execution speed for quality;  by choosing a
*     larger luxury setting one gets better random numbers slower.
*     By the tests availible at the time it was proposed,
*     &lt;TT&gt;RANLUX&lt;/TT&gt; at the default luxury setting appears to be a
*     significant advance quality over previous
*     generators.
*
* &lt;BR&gt;
* &lt;BR&gt;
* &lt;CENTER&gt;
* &lt;TABLE BORDER WIDTH=80%&gt;
* &lt;TR&gt;
* &lt;TD ALIGN=center COLSPAN=3&gt;
* &lt;A NAME="luxury"&gt;&lt;FONT SIZE=+2&gt;LUXURY LEVELS&lt;/FONT&gt;&lt;/A&gt;
* &lt;/TD&gt;
* &lt;/TR&gt;
* &lt;TR&gt;
* &lt;TD&gt;level&lt;/TD&gt;&lt;TD ALIGN=center&gt;p&lt;/TD&gt;&lt;TD&gt;&lt;BR&gt;&lt;/TD&gt;
* &lt;/TR&gt;
* &lt;TR&gt;&lt;TD ALIGN=center&gt;0&lt;/TD&gt; &lt;TD ALIGN="center"&gt;24&lt;/TD&gt;
* &lt;TD&gt;equivalent to the original &lt;TT&gt;RCARRY&lt;/TT&gt; of Marsaglia
* and Zaman, very long period, but fails many tests. &lt;/TD&gt;&lt;/TR&gt;
* &lt;TR&gt;
* &lt;TD ALIGN=center&gt;1&lt;/TD&gt;&lt;TD ALIGN=center&gt;48&lt;/TD&gt;&lt;TD&gt;considerable improvement in quality over level 0,
* now passes the gap test, but still fails spectral test.&lt;/TD&gt;&lt;/TR&gt;
* &lt;TR&gt;
* &lt;TD ALIGN=center&gt;2&lt;/TD&gt;&lt;TD ALIGN=center&gt;97&lt;/TD&gt;&lt;TD&gt; passes all known tests, but theoretically still
* defective.&lt;/TD&gt;&lt;/TR&gt;&lt;TR BGCOLOR="#FFA0A0"&gt;
* &lt;TD ALIGN=center BGCOLOR="#FFA0A0"&gt;3&lt;/TD&gt;&lt;TD ALIGN=center&gt;223&lt;/TD&gt;&lt;TD&gt;
* DEFAULT VALUE.  Any theoretically possible
* correlations have very small chance of being observed.&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;
* &lt;TD ALIGN=center&gt;4&lt;TD ALIGN=center&gt;389&lt;/TD&gt;&lt;TD&gt;highest possible luxury, all 24 bits chaotic.&lt;/TD&gt;&lt;/TR&gt;
*
* &lt;/TABLE&gt;
* &lt;/CENTER&gt;
* &lt;BR&gt;
* &lt;CENTER&gt;&lt;FONT SIZE=+1&gt;
* &lt;B&gt;VALIDATION&lt;/B&gt;&lt;/FONT&gt;
* &lt;/CENTER&gt;
*
* The Java version of &lt;TT&gt;RANLUX&lt;/TT&gt; has been verified against published
* values of numbers 1-5 and 101-105 produced by the reference implementation
* of &lt;TT&gt;RANLUX&lt;/TT&gt; for the following initial conditions:
*
* &lt;UL&gt;
* &lt;LI&gt; Default initialization:  &lt;CODE&gt;Ranlux()&lt;/CODE&gt;
* &lt;LI&gt; Initialization with:     &lt;CODE&gt;Ranlux(0,0)&lt;/CODE&gt;
* &lt;LI&gt; Initialization with:     &lt;CODE&gt;Ranlux(389,1)&lt;/CODE&gt;
* &lt;LI&gt; Initialization with:     &lt;CODE&gt;Ranlux(75,0)&lt;/CODE&gt;
* &lt;/UL&gt;
*  References:
* &lt;UL&gt;
* &lt;LI&gt;
*  M. Luscher, &lt;CITE&gt; Computer Physics Communications&lt;/CITE&gt;  &lt;B&gt;79&lt;/B&gt; (1994) 100
* &lt;LI&gt;
*  F. James, &lt;CITE&gt;Computer Physics Communications&lt;/CITE&gt; &lt;B&gt;79&lt;/B&gt; (1994) 111
* &lt;LI&gt;&lt;A HREF="http://www.mpa-garching.mpg.de/~tomek/htmls/refs/ranlux.about.html"&gt;About &lt;TT&gt;RANLUX&lt;/TT&gt; random number generator:  Excerpts from discussion in the Usenet news groups&lt;/A&gt;
* &lt;LI&gt;&lt;A HREF="http://www.mpa-garching.mpg.de/~tomek/htmls/refs/ranlux.f90_2.html"&gt;Miller's FORTRAN 90 implementation of &lt;TT&gt;RANLUX&lt;/TT&gt; with test code&lt;/A&gt;

* &lt;/UL&gt;
*
*
* &lt;P&gt;
 * This code is a unified (modified) version of the Ranlux
 * &lt;A HREF="/RngPack/src/edu/cornell/lassp/houle/RngPack/Ranlux.java"&gt; source code&lt;/A&gt;
 * from RngPack 1.1a by Paul Houle
 *
 * @author &lt;A HREF="http://www.honeylocust.com/"&gt; Paul Houle &lt;/A&gt;
 * (E-mail: &lt;A HREF="mailto:paul@honeylocust.com"&gt;paul@honeylocust.com&lt;/A&gt;)
 * Modified by &lt;A HREF="http://dis.unal.edu.co/~jgomez"&gt; Jonatan Gomez &lt;/A&gt;
 * (E-mail: &lt;A HREF="mailto:jgomezpe@unal.edu.co"&gt;jgomezpe@unal.edu.co&lt;/A&gt; )
 * @version 1.0
*/</comment>


<class><specifier>public</specifier> class <name>Ranlux</name> <super><extends>extends <name>SeedableGenerator</name></extends></super><block>{

<comment type="javadoc">/**
* Maximum luxury level: &lt;CODE&gt;maxlev=4&lt;/CODE&gt;
*/</comment>
<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>maxlev</name>=<init><expr>4</expr></init></decl>;</decl_stmt>

<comment type="javadoc">/**
* Default luxury level:  &lt;CODE&gt;lxdflt=3&lt;/CODE&gt;
*/</comment>

<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>lxdflt</name>=<init><expr>3</expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>igiga</name> =<init> <expr>1000000000</expr></init>, <name>jsdflt</name> =<init> <expr>314159265</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>twop12</name> =<init> <expr>4096</expr></init>,<name>itwo24</name> =<init> <expr>1 &lt;&lt; 24</expr></init>,<name>icons</name> =<init> <expr>2147483563</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name><name>ndskip</name><index>[]</index></name>=<init><expr><block>{<expr>0</expr>,<expr>24</expr>,<expr>73</expr>,<expr>199</expr>,<expr>365</expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>iseeds</name><index>[]</index></name>,<name><name>isdext</name><index>[]</index></name>,<name><name>next</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>luxlev</name>=<init><expr><name>lxdflt</name></expr></init>,<name>nskip</name>,<name>inseed</name>,<name>jseed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>in24</name> =<init> <expr>0</expr></init>, <name>kount</name> =<init> <expr>0</expr></init>, <name>mkount</name> =<init> <expr>0</expr></init>, <name>i24</name> =<init> <expr>24</expr></init>, <name>j24</name> =<init> <expr>10</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name><name>seeds</name><index>[]</index></name>,<name>carry</name>=<init> <expr>(<name>float</name>) 0.0</expr></init>,<name>twom24</name>,<name>twom12</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>boolean</name></type> <name>diagOn</name>=<init><expr>false</expr></init></decl>;</decl_stmt>


<comment type="javadoc">/**
* Default initialization of &lt;TT&gt;RANLUX&lt;/TT&gt;.  Uses default seed
* &lt;CODE&gt;jsdflt=314159265&lt;/CODE&gt; and luxury level 3.
*/</comment>

<constructor><specifier>public</specifier> <name>Ranlux</name><parameter_list>()</parameter_list> <block>{

    <expr_stmt><expr><call><name>init_arrays</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rluxdef</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></constructor><empty_stmt>;</empty_stmt>

<comment type="javadoc">/**
* Initialize &lt;TT&gt;RANLUX&lt;/TT&gt; with specified &lt;A HREF="#luxury"&gt;luxury level&lt;/A&gt;
* and seed.
*
* @param lux &lt;A HREF="#luxury"&gt;luxury level&lt;/A&gt; from 0-4.
* @param ins seed,  a positive integer.
*
*/</comment>

<constructor><specifier>public</specifier> <name>Ranlux</name><parameter_list>(<param><decl><type><name>int</name></type> <name>lux</name></decl></param>,<param><decl><type><name>int</name></type> <name>ins</name></decl></param>)</parameter_list> <block>{

    <expr_stmt><expr><call><name>init_arrays</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rluxgo</name><argument_list>(<argument><expr><name>lux</name></expr></argument>,<argument><expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></constructor><empty_stmt>;</empty_stmt>

<comment type="javadoc">/**
* Initialize &lt;TT&gt;RANLUX&lt;/TT&gt; with specified &lt;A HREF="#luxury"&gt;luxury level&lt;/A&gt;
* and seed.
*
* @param lux &lt;A HREF="#luxury"&gt;luxury level&lt;/A&gt; from 0-4.
* @param ins seed,  a positive long.
*
*/</comment>

<constructor><specifier>public</specifier> <name>Ranlux</name><parameter_list>(<param><decl><type><name>int</name></type> <name>lux</name></decl></param>,<param><decl><type><name>long</name></type> <name>ins</name></decl></param>)</parameter_list> <block>{

    <expr_stmt><expr><call><name>init_arrays</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rluxgo</name><argument_list>(<argument><expr><name>lux</name></expr></argument>,<argument><expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><call>(<name>int</name>) <argument_list>(<argument><expr><name>ins</name>%<name><name>Integer</name>.<name>MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></constructor><empty_stmt>;</empty_stmt>

<comment type="javadoc">/**
*
* Initialize &lt;TT&gt;RANLUX&lt;/TT&gt; with default &lt;A HREF="#luxury"&gt;luxury level&lt;/A&gt;
* and a specified seed.
*
* @param ins seed,  a positive integer
*/</comment>

<constructor><specifier>public</specifier> <name>Ranlux</name><parameter_list>(<param><decl><type><name>int</name></type> <name>ins</name></decl></param>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>init_arrays</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rluxgo</name><argument_list>(<argument><expr><name>lxdflt</name></expr></argument>,<argument><expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></constructor><empty_stmt>;</empty_stmt>

<comment type="javadoc">/**
*
* Initialize &lt;TT&gt;RANLUX&lt;/TT&gt; with default &lt;A HREF="#luxury"&gt;luxury level&lt;/A&gt;
* and a specified seed.
*
* @param ins seed,  a positive integer
*/</comment>

<constructor><specifier>public</specifier> <name>Ranlux</name><parameter_list>(<param><decl><type><name>long</name></type> <name>ins</name></decl></param>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>init_arrays</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rluxgo</name><argument_list>(<argument><expr><name>lxdflt</name></expr></argument>,<argument><expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><call>(<name>int</name>) <argument_list>(<argument><expr><name>ins</name>%<name><name>Integer</name>.<name>MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></constructor><empty_stmt>;</empty_stmt>

<comment type="javadoc">/**
*
* Initialize &lt;TT&gt;RANLUX&lt;/TT&gt; with specified &lt;A HREF="#luxury"&gt;luxury level&lt;/A&gt;
* and a Date object.  Can be used to conveniently initialize &lt;TT&gt;RANLUX&lt;/TT&gt;
* from the clock,
*
* &lt;PRE&gt;
* RandomElement e = Ranlux(4,new Date());
* &lt;/PRE&gt;
*
* @param lux &lt;A HREF="#luxury"&gt;luxury&lt;/A&gt; level from 0-4.
* @param d date used to generate seed
*
*/</comment>

<constructor><specifier>public</specifier> <name>Ranlux</name><parameter_list>(<param><decl><type><name>int</name></type> <name>lux</name></decl></param>,<param><decl><type><name>Date</name></type> <name>d</name></decl></param>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>init_arrays</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rluxgo</name><argument_list>(<argument><expr><name>lux</name></expr></argument>,<argument><expr><call>(<name>int</name>) <argument_list>(<argument><expr><call><name>initSeed</name><argument_list>( <argument><expr><name>d</name></expr></argument> )</argument_list></call>%<name><name>Integer</name>.<name>MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
}</block></constructor><empty_stmt>;</empty_stmt>

<comment type="javadoc">/**
*
* Initialize &lt;TT&gt;RANLUX&lt;/TT&gt; with default &lt;A HREF="#luxury"&gt;luxury level&lt;/A&gt;
* and a Date object.  Can be used to conveniently initialize &lt;TT&gt;RANLUX&lt;/TT&gt;
* from the clock,
*
* &lt;PRE&gt;
* RandomElement e = Ranlux(new Date());
* &lt;/PRE&gt;
*
* @param d date used to generate seed
*
*/</comment>

<constructor><specifier>public</specifier> <name>Ranlux</name><parameter_list>(<param><decl><type><name>Date</name></type> <name>d</name></decl></param>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>init_arrays</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rluxgo</name><argument_list>(<argument><expr><name>lxdflt</name></expr></argument>,<argument><expr><call>(<name>int</name>) <argument_list>(<argument><expr><call><name>initSeed</name><argument_list>( <argument><expr><name>d</name></expr></argument> )</argument_list></call>%<name><name>Integer</name>.<name>MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
}</block></constructor><empty_stmt>;</empty_stmt>

<comment type="javadoc">/**
* Turns diagnostic messages on and off.  If &lt;TT&gt;setDiag(true)&lt;/TT&gt; is
* called,  &lt;TT&gt;RANLUX&lt;/TT&gt; will print diagnostic information to
* &lt;TT&gt;System.err&lt;/TT&gt;
*
* @param b diagnostic message status
*/</comment>

<function><type><specifier>public</specifier> <name>void</name></type> <name>setDiag</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
    <expr_stmt><expr><name>diagOn</name>=<name>b</name></expr>;</expr_stmt>
}</block></function><empty_stmt>;</empty_stmt>

<comment type="javadoc">/**
*
* The random number generator.
*
* @return a pseudo-random double in the range (0,1)
*/</comment>

<function><type><specifier>public</specifier> <name>double</name></type> <name>next</name><parameter_list>()</parameter_list> <block>{

    <decl_stmt><decl><type><name>int</name></type> <name>i</name>,<name>k</name>,<name>lp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>uni</name>,<name>out</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>uni</name>=<name><name>seeds</name><index>[<expr><name>j24</name></expr>]</index></name>-<name><name>seeds</name><index>[<expr><name>i24</name></expr>]</index></name>-<name>carry</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>uni</name> &lt; (<name>float</name>) 0.0</expr>)</condition><then> <block>{
        <expr_stmt><expr><name>uni</name>=<name>uni</name>+ (<name>float</name>) 1.0</expr>;</expr_stmt>
        <expr_stmt><expr><name>carry</name> = <name>twom24</name></expr>;</expr_stmt>
    }</block></then> <else>else <expr_stmt><expr><name>carry</name> = (<name>float</name>) 0.0</expr>;</expr_stmt></else></if>

    <expr_stmt><expr><name><name>seeds</name><index>[<expr><name>i24</name></expr>]</index></name>=<name>uni</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>i24</name>=<name><name>next</name><index>[<expr><name>i24</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>j24</name>=<name><name>next</name><index>[<expr><name>j24</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>out</name>=<name>uni</name></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>uni</name>&lt;<name>twom12</name></expr>)</condition><then>
        <expr_stmt><expr><name>out</name> += <name>twom24</name>*<name><name>seeds</name><index>[<expr><name>j24</name></expr>]</index></name></expr>;</expr_stmt></then></if>

<comment type="block">/* zero is forbidden in case user wants logarithms */</comment>

    <if>if <condition>(<expr><name>out</name>==0.0</expr>)</condition><then> <expr_stmt><expr><name>out</name> = <name>twom24</name>*<name>twom24</name></expr>;</expr_stmt></then></if>

    <expr_stmt><expr><name>in24</name>++</expr>;</expr_stmt>

    <if>if<condition>(<expr><name>in24</name> == 24</expr>)</condition><then> <block>{
        <expr_stmt><expr><name>in24</name>=0</expr>;</expr_stmt>
        <expr_stmt><expr><name>kount</name> += <name>nskip</name></expr>;</expr_stmt>
        <for>for(<init><expr><name>i</name>=1</expr>;</init><condition><expr><name>i</name>&lt;=<name>nskip</name></expr>;</condition><incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>uni</name>=<name><name>seeds</name><index>[<expr><name>j24</name></expr>]</index></name>-<name><name>seeds</name><index>[<expr><name>i24</name></expr>]</index></name>-<name>carry</name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>uni</name> &lt; (<name>float</name>) 0.0</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>uni</name>=<name>uni</name>+ (<name>float</name>) 1.0</expr>;</expr_stmt>
                <expr_stmt><expr><name>carry</name> = <name>twom24</name></expr>;</expr_stmt>
            }</block></then> <else>else <expr_stmt><expr><name>carry</name> = (<name>float</name>) 0.0</expr>;</expr_stmt></else></if>

            <expr_stmt><expr><name><name>seeds</name><index>[<expr><name>i24</name></expr>]</index></name>=<name>uni</name></expr>;</expr_stmt>

            <expr_stmt><expr><name>i24</name>=<name><name>next</name><index>[<expr><name>i24</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>j24</name>=<name><name>next</name><index>[<expr><name>j24</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></for>
    }</block></then></if>

    <expr_stmt><expr><name>kount</name>++</expr>;</expr_stmt>
    <if>if <condition>(<expr><name>kount</name>&gt;=<name>igiga</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>mkount</name>++</expr>;</expr_stmt>
        <expr_stmt><expr><name>kount</name> -= <name>igiga</name></expr>;</expr_stmt>
    }</block></then></if><empty_stmt>;</empty_stmt>

    <return>return <expr><name>out</name></expr>;</return>
}</block></function><empty_stmt>;</empty_stmt>

<function><type><specifier>private</specifier> <name>void</name></type> <name>init_arrays</name><parameter_list>()</parameter_list> <block>{

<comment type="block">/*
*
* converted from fortran:  fortran arrays start at 1,  java arrays start at
* 0.  Here we take the low road to compatibility...  We declare arrays that
* are one bigger than the fortran code.  This wastes three ints and a double;
* If you're porting this to a Commodore 64 you might need the space.
*
*/</comment>

    <expr_stmt><expr><name>iseeds</name> = new <name><name>int</name><index>[<expr>24+1</expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>isdext</name> = new <name><name>int</name><index>[<expr>25+1</expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>next</name>   = new <name><name>int</name><index>[<expr>24+1</expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>seeds</name>  = new <name><name>float</name><index>[<expr>24+1</expr>]</index></name></expr>;</expr_stmt>
}</block></function><empty_stmt>;</empty_stmt>

<function><type><specifier>private</specifier> <name>void</name></type> <name>rluxdef</name><parameter_list>()</parameter_list>
<block>{

    <decl_stmt><decl><type><name>int</name></type> <name>lp</name>,<name>i</name>,<name>k</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>jseed</name> = <name>jsdflt</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>inseed</name> = <name>jseed</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>diag</name><argument_list>(<argument><expr>"RANLUX DEFAULT INITIALIZATION: "+<name>jseed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>luxlev</name> = <name>lxdflt</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nskip</name> = <name><name>ndskip</name><index>[<expr><name>luxlev</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>lp</name> = <name>nskip</name> + 24</expr>;</expr_stmt>
    <expr_stmt><expr><name>in24</name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name>kount</name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name>mkount</name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><call><name>diag</name><argument_list>(<argument><expr>"RANLUX DEFAULT LUXURY LEVEL =  "+<name>luxlev</name>+"    p = "+<name>lp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>twom24</name> = (<name>float</name>) 1.0</expr>;</expr_stmt>

    <for>for(<init><expr><name>i</name> = 1</expr>;</init><condition><expr><name>i</name> &lt;= 24</expr>;</condition><incr><expr><name>i</name>++</expr></incr>)
    <block>{
        <expr_stmt><expr><name>twom24</name> = <name>twom24</name> * (<name>float</name>) 0.5</expr>;</expr_stmt>
        <expr_stmt><expr><name>k</name> = <name>jseed</name> / 53668</expr>;</expr_stmt>
        <expr_stmt><expr><name>jseed</name> = 40014 * (<name>jseed</name>-<name>k</name>*53668) - <name>k</name> * 12211</expr>;</expr_stmt>
        <if>if <condition>(<expr><name>jseed</name>&lt;0</expr>)</condition><then> <expr_stmt><expr><name>jseed</name> = <name>jseed</name> + <name>icons</name></expr>;</expr_stmt></then></if>
        <expr_stmt><expr><name><name>iseeds</name><index>[<expr><name>i</name></expr>]</index></name> = <name>jseed</name> % <name>itwo24</name></expr>;</expr_stmt>
    }</block></for><empty_stmt>;</empty_stmt>

    <expr_stmt><expr><name>twom12</name> = <name>twom24</name> * (<name>float</name>) 4096.0</expr>;</expr_stmt>

    <for>for(<init><expr><name>i</name> = 1</expr> ;</init> <condition><expr><name>i</name>&lt;=24</expr>;</condition><incr><expr><name>i</name>++</expr></incr>)
    <block>{
        <expr_stmt><expr><name><name>seeds</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>iseeds</name><index>[<expr><name>i</name></expr>]</index></name> * <name>twom24</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>next</name><index>[<expr><name>i</name></expr>]</index></name> = <name>i</name> - 1</expr>;</expr_stmt>
    }</block></for><empty_stmt>;</empty_stmt>

    <expr_stmt><expr><name><name>next</name><index>[<expr>1</expr>]</index></name> = 24</expr>;</expr_stmt>
    <expr_stmt><expr><name>i24</name> = 24</expr>;</expr_stmt>
    <expr_stmt><expr><name>j24</name> = 10</expr>;</expr_stmt>
    <expr_stmt><expr><name>carry</name> = (<name>float</name>) 0.0</expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>seeds</name><index>[<expr>24</expr>]</index></name> == 0.0</expr>)</condition><then> <expr_stmt><expr><name>carry</name> = <name>twom24</name></expr>;</expr_stmt></then></if>

}</block></function><empty_stmt>;</empty_stmt>

<function><type><specifier>private</specifier> <specifier>final</specifier> <name>void</name></type> <name>rluxgo</name><parameter_list>(<param><decl><type><name>int</name></type> <name>lux</name></decl></param>,<param><decl><type><name>int</name></type> <name>ins</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>ilx</name>, <name>i</name>, <name>iouter</name>, <name>isk</name>, <name>k</name>, <name>inner</name>, <name>izip</name>, <name>izip2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>uni</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>lux</name>&lt;00</expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>luxlev</name> = <name>lxdflt</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr><name>lux</name>&lt;=<name>maxlev</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>luxlev</name> = <name>lux</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr><name>lux</name>&lt;24 || <name>lux</name>&gt;2000</expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>luxlev</name> = <name>maxlev</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>diag</name><argument_list>(<argument><expr>"RANLUX ILLEGAL LUXURY RLUXGO: "+<name>lux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else
    <block>{
        <expr_stmt><expr><name>luxlev</name> = <name>lux</name></expr>;</expr_stmt>
	<for>for(<init><expr><name>ilx</name>=0</expr>;</init><condition><expr><name>ilx</name>&lt;=<name>maxlev</name></expr>;</condition><incr><expr><name>ilx</name>++</expr></incr>)
	    <if>if <condition>(<expr><name>lux</name> == <name><name>ndskip</name><index>[<expr><name>ilx</name></expr>]</index></name>+24</expr>)</condition><then>
                <expr_stmt><expr><name>luxlev</name>=<name>ilx</name></expr>;</expr_stmt></then></if></for>

    }</block></else></if></else></if></else></if><empty_stmt>;</empty_stmt>

    <if>if <condition>(<expr><name>luxlev</name> &lt;= <name>maxlev</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>nskip</name> = <name><name>ndskip</name><index>[<expr><name>luxlev</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>diag</name><argument_list>(<argument><expr>"RANLUX LUXURY LEVEL SET BY RLUXGO : "+<name>luxlev</name>+" P= "+(<name>nskip</name>+24)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>nskip</name> = <name>luxlev</name>-24</expr>;</expr_stmt>
	<expr_stmt><expr><call><name>diag</name><argument_list>(<argument><expr>"RANLUX P-VALUE SET BY RLUXGO TO: "+<name>luxlev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if><empty_stmt>;</empty_stmt>

    <expr_stmt><expr><name>in24</name>=0</expr>;</expr_stmt>

    <if>if <condition>(<expr><name>ins</name>&lt;0</expr>)</condition><then>
	<expr_stmt><expr><call><name>diag</name><argument_list>(<argument><expr>"Illegal initialization by RLUXGO, negative input seed"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

    <if>if <condition>(<expr><name>ins</name>&gt;0</expr>)</condition><then> <block>{
	<expr_stmt><expr><name>jseed</name> = <name>ins</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>diag</name><argument_list>(<argument><expr>"RANLUX INITIALIZED BY RLUXGO FROM SEED "+<name>jseed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else
    <block>{

   	<expr_stmt><expr><name>jseed</name>=<name>jsdflt</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>diag</name><argument_list>(<argument><expr>"RANLUX INITIALIZED BY RLUXGO FROM DEFAULT SEED"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if><empty_stmt>;</empty_stmt>

    <expr_stmt><expr><name>inseed</name> = <name>jseed</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>twom24</name> = (<name>float</name>) 1.0</expr>;</expr_stmt>

    <for>for(<init><expr><name>i</name>=1</expr>;</init><condition><expr><name>i</name>&lt;=24</expr>;</condition><incr><expr><name>i</name>++</expr></incr>) <block>{
	<expr_stmt><expr><name>twom24</name> = <name>twom24</name> * (<name>float</name>) 0.5</expr>;</expr_stmt>
	<expr_stmt><expr><name>k</name> = <name>jseed</name> / 53668</expr>;</expr_stmt>
	<expr_stmt><expr><name>jseed</name> = 40014 * (<name>jseed</name>-<name>k</name>*53668) - <name>k</name> * 12211</expr>;</expr_stmt>
	<if>if <condition>(<expr><name>jseed</name> &lt; 0</expr>)</condition><then> <expr_stmt><expr><name>jseed</name> = <name>jseed</name> + <name>icons</name></expr>;</expr_stmt></then></if>
 	<expr_stmt><expr><name><name>iseeds</name><index>[<expr><name>i</name></expr>]</index></name> = <name>jseed</name> % <name>itwo24</name></expr>;</expr_stmt>
    }</block></for><empty_stmt>;</empty_stmt>

    <expr_stmt><expr><name>twom12</name>=<name>twom24</name>*4096</expr>;</expr_stmt>

    <for>for(<init><expr><name>i</name>=1</expr>;</init><condition><expr><name>i</name>&lt;=24</expr>;</condition><incr><expr><name>i</name>++</expr></incr>) <block>{
	<expr_stmt><expr><name><name>seeds</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>iseeds</name><index>[<expr><name>i</name></expr>]</index></name> * <name>twom24</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>next</name><index>[<expr><name>i</name></expr>]</index></name> = <name>i</name> - 1</expr>;</expr_stmt>
    }</block></for><empty_stmt>;</empty_stmt>

    <expr_stmt><expr><name><name>next</name><index>[<expr>1</expr>]</index></name>=24</expr>;</expr_stmt>
    <expr_stmt><expr><name>i24</name>=24</expr>;</expr_stmt>
    <expr_stmt><expr><name>j24</name>=10</expr>;</expr_stmt>
    <expr_stmt><expr><name>carry</name> = (<name>float</name>) 0.0</expr>;</expr_stmt>

    <if>if <condition>(<expr><name><name>seeds</name><index>[<expr>24</expr>]</index></name> == 0.0</expr>)</condition><then> <expr_stmt><expr><name>carry</name> = <name>twom24</name></expr>;</expr_stmt></then></if>

    <expr_stmt><expr><name>kount</name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name>mkount</name> = 0</expr>;</expr_stmt>

}</block></function><empty_stmt>;</empty_stmt>

<function><type><specifier>private</specifier> <name>void</name></type> <name>diag</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s</name></decl></param>)</parameter_list>
<block>{
     <if>if <condition>(<expr><name>diagOn</name></expr>)</condition><then>
     	<expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function><empty_stmt>;</empty_stmt>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>RawGenerator</name></type> <name>new_instance</name><parameter_list>()</parameter_list><block>{
        <return>return <expr>new <call><name>Ranlux</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

}</block></class><empty_stmt>;</empty_stmt>









</unit>
