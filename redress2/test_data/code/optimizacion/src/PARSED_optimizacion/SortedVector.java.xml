<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\types\collection\vector\SortedVector.java"><package>package <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>vector</name></name>;</package>

<import>import <name><name>unalcol</name>.<name>sort</name></name>.*;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Title: SortedVector&lt;/p&gt;
 *
 * &lt;p&gt;Description: Insert operation for sorted vectors&lt;/p&gt;
 *
 * &lt;p&gt;Copyright: Copyright (c) 2009&lt;/p&gt;
 *
 * &lt;p&gt;Company: Kunsamu&lt;/p&gt;
 *
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 */</comment>
<class><specifier>public</specifier> class <name><name>SortedVector</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name> <super><extends>extends <name><name>Vector</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></extends></super><block>{
    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>SortedVectorSearch</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>search</name> =<init> <expr>new <call><name><name>SortedVectorSearch</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>Order</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>order</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>SortedVector</name><parameter_list>( <param><decl><type><name><name>T</name><index>[]</index></name></type> <name>buffer</name></decl></param>, <param><decl><type><name>int</name></type> <name>n</name></decl></param>, <param><decl><type><name><name>Order</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>order</name></decl></param> )</parameter_list><block>{
        <expr_stmt><expr><call><name>super</name><argument_list>( <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>n</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>order</name></name> = <name>order</name></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>SortedVector</name><parameter_list>( <param><decl><type><name><name>T</name><index>[]</index></name></type> <name>buffer</name></decl></param>, <param><decl><type><name><name>Order</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>order</name></decl></param> )</parameter_list><block>{
        <expr_stmt><expr><call><name>super</name><argument_list>( <argument><expr><name>buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>order</name></name> = <name>order</name></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>SortedVector</name><parameter_list>( <param><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>buffer</name></decl></param>, <param><decl><type><name><name>Order</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>order</name></decl></param> )</parameter_list><block>{
        <expr_stmt><expr><call><name>super</name><argument_list>( <argument><expr><name><name>buffer</name>.<name>buffer</name></name></expr></argument>, <argument><expr><call><name><name>buffer</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>order</name></name> = <name>order</name></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>SortedVector</name><parameter_list>( <param><decl><type><name><name>Order</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>order</name></decl></param> )</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>order</name></name> = <name>order</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>findIndex</name><parameter_list>( <param><decl><type><name>T</name></type> <name>data</name></decl></param> )</parameter_list><block>{
        <return>return <expr><call><name><name>search</name>.<name>find</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>,<argument><expr><name>data</name></expr></argument>,<argument><expr><name>order</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>add</name><parameter_list>( <param><decl><type><name>T</name></type> <name>data</name></decl></param> )</parameter_list><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> =<init> <expr><call><name><name>search</name>.<name>findRight</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>order</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if<condition>( <expr><name>index</name> == <call><name><name>this</name>.<name>size</name></name><argument_list>()</argument_list></call></expr> )</condition><then><block>{
              <return>return <expr><call><name><name>super</name>.<name>add</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then><else>else<block>{
            <expr_stmt><expr><call><name>rightShift</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>buffer</name><index>[<expr><name>index</name></expr>]</index></name> = <name>data</name></expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>set</name><parameter_list>( <param><decl><type><name>int</name></type> <name>index</name></decl></param>, <param><decl><type><name>T</name></type> <name>data</name></decl></param> )</parameter_list> <throws>throws <argument><expr><name>IndexOutOfBoundsException</name></expr></argument></throws><block>{
        <if>if<condition>( <expr>(0 &lt;= <name>index</name> &amp;&amp; <name>index</name> &lt; <name>size</name>) &amp;&amp;
            (<name>size</name>==1 ||
             (<name>index</name>==0 &amp;&amp; <call><name><name>order</name>.<name>compare</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call>&lt;=0) ||
             (<name>index</name>==<name>size</name>-1 &amp;&amp; <call><name><name>order</name>.<name>compare</name></name><argument_list>(<argument><expr><name><name>buffer</name><index>[<expr><name>index</name>-1</expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call>&lt;=0) ||
             (<name>size</name>&gt;2 &amp;&amp; <call><name><name>order</name>.<name>compare</name></name><argument_list>(<argument><expr><name><name>buffer</name><index>[<expr><name>index</name>-1</expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call>&lt;=0 &amp;&amp;
              <call><name><name>order</name>.<name>compare</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr><name>index</name>+1</expr>]</index></name></expr></argument>)</argument_list></call>&lt;=0))</expr> )</condition><then><block>{
            <expr_stmt><expr><name><name>this</name>.<name>buffer</name><index>[<expr><name>index</name></expr>]</index></name> = <name>data</name></expr>;</expr_stmt>
            <return>return <expr>true</expr>;</return>
        }</block></then><else>else<block>{
            <throw>throw <expr>new <call><name>ArrayIndexOutOfBoundsException</name><argument_list>( <argument><expr><name>index</name></expr></argument> )</argument_list></call></expr>;</throw>
        }</block></else></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>add</name><parameter_list>( <param><decl><type><name>int</name></type> <name>index</name></decl></param>, <param><decl><type><name>T</name></type> <name>data</name></decl></param> )</parameter_list> <throws>throws <argument><expr><name>IndexOutOfBoundsException</name></expr></argument></throws><block>{
        <if>if<condition>( <expr>(0 &lt;= <name>index</name> &amp;&amp; <name>index</name> &lt;= <name>size</name>) &amp;&amp;
            (<name>size</name>==0 ||
             (<name>index</name>==0 &amp;&amp; <call><name><name>order</name>.<name>compare</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call>&lt;=0) ||
             (<name>index</name>==<name>size</name> &amp;&amp; <call><name><name>order</name>.<name>compare</name></name><argument_list>(<argument><expr><name><name>buffer</name><index>[<expr><name>index</name>-1</expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call>&lt;=0) ||
             (<name>size</name>&gt;1 &amp;&amp; <call><name><name>order</name>.<name>compare</name></name><argument_list>(<argument><expr><name><name>buffer</name><index>[<expr><name>index</name>-1</expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call>&lt;=0 &amp;&amp;
              <call><name><name>order</name>.<name>compare</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>)</argument_list></call>&lt;=0))</expr> )</condition><then><block>{
            <expr_stmt><expr><call><name>rightShift</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>buffer</name><index>[<expr><name>index</name></expr>]</index></name> = <name>data</name></expr>;</expr_stmt>
            <return>return <expr>true</expr>;</return>
        }</block></then><else>else<block>{
            <throw>throw <expr>new <call><name>ArrayIndexOutOfBoundsException</name><argument_list>( <argument><expr><name>index</name></expr></argument> )</argument_list></call></expr>;</throw>
        }</block></else></if>
    }</block></function>

}</block></class>
</unit>
