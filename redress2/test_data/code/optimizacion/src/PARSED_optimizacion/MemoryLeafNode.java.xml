<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\types\collection\tree\bplus\memory\MemoryLeafNode.java"><comment type="block">/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */</comment>

<package>package <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>tree</name>.<name>bplus</name>.<name>memory</name></name>;</package>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>array</name>.<name>ArrayUtil</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>tree</name>.<name>bplus</name></name>.*;</import>

<comment type="javadoc">/**
 *
 * @author jgomez
 */</comment>
<class><specifier>public</specifier> class <name><name>MemoryLeafNode</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name> <super><extends>extends <name><name>MemoryNode</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></extends> <implements>implements <name><name>BPlusLeafNode</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></implements></super><block>{
    <decl_stmt><decl><type><specifier>protected</specifier> <name>T</name><index>[]</index></type> <name>keys</name></decl>;</decl_stmt>
    
    <constructor><specifier>public</specifier> <name>MemoryLeafNode</name><parameter_list>( <param><decl><type><name>int</name></type> <name>SIZE</name></decl></param> )</parameter_list><block>{
        <expr_stmt><expr><name>keys</name> = (<name><name>T</name><index>[]</index></name>)new <name><name>Object</name><index>[<expr><name>SIZE</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>n</name> = 0</expr>;</expr_stmt>
    }</block></constructor>
    
    <constructor><specifier>public</specifier> <name>MemoryLeafNode</name><parameter_list>( <param><decl><type><name><name>T</name><index>[]</index></name></type> <name>_keys</name></decl></param>, <param><decl><type><name>int</name></type> <name>_n</name></decl></param> )</parameter_list><block>{
        <expr_stmt><expr><name>keys</name> = <name>_keys</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>n</name> = <name>_n</name></expr>;</expr_stmt>
    }</block></constructor>
    
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name><name>BPlusNode</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>newInstance</name><parameter_list>(<param><decl><type><name>int</name></type> <name>SIZE</name></decl></param>)</parameter_list><block>{
        <return>return <expr>new <call><name><name>MemoryLeafNode</name><argument_list>&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>SIZE</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name><name>BPlusLeafNode</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>newInstance</name><parameter_list>( <param><decl><type><name><name>T</name><index>[]</index></name></type> <name>keys</name></decl></param>, <param><decl><type><name>int</name></type> <name>n</name></decl></param> )</parameter_list><block>{
       <return>return <expr>new <call><name><name>MemoryLeafNode</name><argument_list>&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="line">// Balance</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>leftShift</name><parameter_list>()</parameter_list><block>{
        <expr_stmt><expr>((<name><name>BPlusLeafNode</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name>)<name>left</name>).<call><name>append</name><argument_list>(<argument><expr><call><name>key</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>remove</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>rightShift</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name><name>BPlusLeafNode</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>lright</name> =<init> <expr>((<name><name>BPlusLeafNode</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name>)<name>right</name>)</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>lright</name>.<name>insert</name></name><argument_list>(<argument><expr>0</expr></argument>,<argument><expr><call><name>key</name><argument_list>(<argument><expr><call><name>n</name><argument_list>()</argument_list></call>-1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>remove</name></name><argument_list>(<argument><expr><call><name>n</name><argument_list>()</argument_list></call>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>merge</name><parameter_list>()</parameter_list><block>{
        <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr>((<name><name>BPlusLeafNode</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name>)<name>right</name>).<call><name>keys</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>keys</name></expr></argument>, <argument><expr><call><name>n</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>right</name>.<name>n</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>right</name> = <call><name><name>right</name>.<name>right</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>split</name><parameter_list>()</parameter_list><block>{
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Leaf Split"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>T</name><index>[]</index></type> <name>rkeys</name> =<init> <expr>(<name><name>T</name><index>[]</index></name>)new <name><name>Object</name><index>[<expr><name><name>keys</name>.<name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><name>n</name>/2</expr></argument>, <argument><expr><name>rkeys</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>n</name>-<name>n</name>/2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>MemoryLeafNode</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>r</name> =<init> <expr>new <call><name><name>MemoryLeafNode</name><argument_list>&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>rkeys</name></expr></argument>,<argument><expr><name>n</name>-<name>n</name>/2</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>r</name>.<name>setRight</name></name><argument_list>( <argument><expr><name>right</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>r</name>.<name>setLeft</name></name><argument_list>( <argument><expr><name>this</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>( <expr><call><name><name>r</name>.<name>right</name></name><argument_list>()</argument_list></call> != <name>null</name></expr> )</condition><then><block>{
            <expr_stmt><expr><call><name><name>r</name>.<name>right</name></name><argument_list>()</argument_list></call>.<call><name>setLeft</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>this</name>.<name>setRight</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>setn</name></name><argument_list>(<argument><expr><name>n</name>/2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>( <argument><expr><call><name><name>r</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="line">//Keys</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>T</name></type> <name>leftKey</name><parameter_list>()</parameter_list><block>{ <return>return <expr><call><name>n</name><argument_list>()</argument_list></call>&gt;0?<name><name>keys</name><index>[<expr>0</expr>]</index></name>:<name>null</name></expr>;</return> }</block></function>
    
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>T</name></type> <name>updateLeftKey</name><parameter_list>()</parameter_list><block>{
        <return>return <expr><call><name>leftKey</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
    
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>T</name><index>[]</index></type> <name>keys</name><parameter_list>()</parameter_list><block>{
        <return>return <expr><name>keys</name></expr>;</return>
    }</block></function>
        
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>T</name></type> <name>key</name><parameter_list>( <param><decl><type><name>int</name></type> <name>index</name></decl></param> )</parameter_list><block>{
        <return>return <expr><name><name>keys</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>boolean</name></type> <name>insert</name><parameter_list>( <param><decl><type><name>int</name></type> <name>pos</name></decl></param>, <param><decl><type><name>T</name></type> <name>key</name></decl></param> )</parameter_list><block>{
        <expr_stmt><expr><call><name><name>ArrayUtil</name>.<name>insert</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>keys</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>n</name>++</expr>;</expr_stmt>
        <return>return <expr>true</expr>;</return>
    }</block></function>
    
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>boolean</name></type> <name>remove</name><parameter_list>( <param><decl><type><name>int</name></type> <name>pos</name></decl></param> )</parameter_list><block>{
        <expr_stmt><expr><call><name><name>ArrayUtil</name>.<name>del</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>keys</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>n</name>--</expr>;</expr_stmt>
        <return>return <expr>true</expr>;</return>
    }</block></function>
    
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>boolean</name></type> <name>append</name><parameter_list>( <param><decl><type><name>T</name></type> <name>key</name></decl></param> )</parameter_list><block>{
        <expr_stmt><expr><name><name>keys</name><index>[<expr><name>n</name></expr>]</index></name> = <name>key</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>n</name>++</expr>;</expr_stmt>
        <return>return <expr>true</expr>;</return>
    }</block></function>
    
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>set</name><parameter_list>( <param><decl><type><name>int</name></type> <name>i</name></decl></param>, <param><decl><type><name>T</name></type> <name>key</name></decl></param> )</parameter_list><block>{
        <expr_stmt><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name> = <name>key</name></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="line">// Size</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>int</name></type> <name>size</name><parameter_list>()</parameter_list><block>{
        <return>return <expr><name><name>keys</name>.<name>length</name></name></expr>;</return>
    }</block></function>
    
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>boolean</name></type> <name>isFull</name><parameter_list>()</parameter_list><block>{
        <return>return <expr><name>n</name>==<call><name>size</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation> 
    <specifier>public</specifier> <name>int</name></type> <name>underFillSize</name><parameter_list>()</parameter_list><block>{
        <return>return <expr><call><name>size</name><argument_list>()</argument_list></call>/3</expr>;</return>
    }</block></function>
    
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>boolean</name></type> <name>underFill</name><parameter_list>()</parameter_list><block>{
        <return>return <expr><name>n</name> &lt;= <call><name>underFillSize</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
