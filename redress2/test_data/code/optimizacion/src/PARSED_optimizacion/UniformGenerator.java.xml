<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\random\real\UniformGenerator.java"><package>package <name><name>unalcol</name>.<name>random</name>.<name>real</name></name>;</package>

<import>import <name><name>unalcol</name>.<name>random</name>.<name>raw</name>.<name>RawGenerator</name></name>;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Simple uniform random number generator.&lt;/p&gt;
 *
 * &lt;p&gt;Copyright: Copyright (c) 2009&lt;/p&gt;
 * 
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 *
 */</comment>

<class><specifier>public</specifier> class <name>UniformGenerator</name> <super><extends>extends <name>InverseDoubleGenerator</name></extends></super> <block>{

    <comment type="javadoc">/**
     * The inferior range of the random number generator interval
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>double</name></type> <name>min</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The length of the range
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>double</name></type> <name>length</name> =<init> <expr>1.0</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructor: Creates a uniform random number generator that generates numbers in the interval [minVal, maxVal)
     * @param minVal Inf limit
     * @param maxVal Sup Limit
     */</comment>
    <constructor><specifier>public</specifier> <name>UniformGenerator</name><parameter_list>(<param><decl><type><name>double</name></type> <name>minVal</name></decl></param>, <param><decl><type><name>double</name></type> <name>maxVal</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>min</name> = <name>minVal</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>length</name> = <name>maxVal</name> - <name>minVal</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructor: Creates a uniform random number generator that generates numbers in the interval [minVal, maxVal)
     * @param minVal Inf limit
     * @param maxVal Sup Limit
     */</comment>
    <constructor><specifier>public</specifier> <name>UniformGenerator</name><parameter_list>(<param><decl><type><name>double</name></type> <name>minVal</name></decl></param>, <param><decl><type><name>double</name></type> <name>maxVal</name></decl></param>, <param><decl><type><name>RawGenerator</name></type> <name>g</name></decl></param> )</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>min</name> = <name>minVal</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>length</name> = <name>maxVal</name> - <name>minVal</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns a random double number
     * @param x Inverse value (cumulative probability)
     * @return A random double number
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>next</name><parameter_list>(<param><decl><type><name>double</name></type> <name>x</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>(<name>min</name> + <name>length</name> * <name>x</name>)</expr>;</return>
    }</block></function>
    
  <function><type><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <name>DoubleGenerator</name></type> <name>new_instance</name><parameter_list>()</parameter_list><block>{
      <return>return <expr>new <call><name>UniformGenerator</name><argument_list>(<argument><expr><name>min</name></expr></argument>, <argument><expr><name>length</name>+<name>min</name></expr></argument>, <argument><expr><call><name><name>g</name>.<name>new_instance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>    
    
}</block></class>
</unit>
