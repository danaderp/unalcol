<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\optimization\operators\real\RotatedEllipticMutation.java"><comment type="block">/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */</comment>
<package>package <name><name>unalcol</name>.<name>optimization</name>.<name>operators</name>.<name>real</name></name>;</package>

<import>import <name><name>unalcol</name>.<name>random</name>.<name>real</name>.<name>DoubleGenerator</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>real</name>.<name>array</name>.<name>DoubleArrayInit</name></name>;</import>

<comment type="javadoc">/**
 *
 * @author jgomez
 */</comment>
<class><specifier>public</specifier> class <name>RotatedEllipticMutation</name>  <super><extends>extends <name>EllipticMutation</name></extends></super><block>{
    <decl_stmt><decl><type><name>double</name><index>[]</index><index>[]</index></type> <name>M</name></decl>;</decl_stmt>
  <comment type="javadoc">/**
   * Creates a Gaussian Mutation with the given standard deviation per component
   * @param _sigma Standard deviation per component
   */</comment>
  <constructor><specifier>public</specifier> <name>RotatedEllipticMutation</name><parameter_list>( <param><decl><type><name><name>double</name><index>[]</index><index>[]</index></name></type> <name>_M</name></decl></param>, <param><decl><type><name><name>double</name><index>[]</index></name></type> <name>_sigma</name></decl></param>, <param><decl><type><name>DoubleGenerator</name></type> <name>_g</name></decl></param> )</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>( <argument><expr><name>_sigma</name></expr></argument>, <argument><expr><name>_g</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>M</name> = <name>_M</name></expr>;</expr_stmt>
  }</block></constructor>

  <comment type="javadoc">/**
   * Creates a Gaussian Mutation with the given standard deviation per component
   * @param _sigma Standard deviation per component
   */</comment>
  <constructor><specifier>public</specifier> <name>RotatedEllipticMutation</name><parameter_list>( <param><decl><type><name><name>double</name><index>[]</index><index>[]</index></name></type> <name>_M</name></decl></param>, <param><decl><type><name>double</name></type> <name>_sigma</name></decl></param>, <param><decl><type><name>DoubleGenerator</name></type> <name>_g</name></decl></param> )</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>( <argument><expr><name><name>_M</name>.<name>length</name></name></expr></argument>, <argument><expr><name>_sigma</name></expr></argument>, <argument><expr><name>_g</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>M</name> = <name>_M</name></expr>;</expr_stmt>
  }</block></constructor>    
  
  <function><type><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <name>double</name><index>[]</index></type> <name>variation</name><parameter_list>()</parameter_list><block>{
      <expr_stmt><expr><call><name><name>super</name>.<name>variation</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>y</name> =<init> <expr><call><name><name>var</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for( <init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name><name>var</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> )<block>{
          <expr_stmt><expr><name><name>var</name><index>[<expr><name>i</name></expr>]</index></name> = 0.0</expr>;</expr_stmt>
          <for>for( <init><decl><type><name>int</name></type> <name>j</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>j</name>&lt;<name><name>sigma</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>)<block>{
             <expr_stmt><expr><name><name>var</name><index>[<expr><name>i</name></expr>]</index></name> += <name><name>M</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> * <name><name>y</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
          }</block></for>           
      }</block></for>
      <return>return <expr><name>var</name></expr>;</return>
  }</block></function>
  
}</block></class>
</unit>
