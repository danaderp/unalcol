<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\optimization\testbed\real\Bohachevsky.java"><package>package <name><name>unalcol</name>.<name>optimization</name>.<name>testbed</name>.<name>real</name></name>;</package>

<import>import <name><name>unalcol</name>.<name>optimization</name></name>.*;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Title:  Bohachevsky&lt;/p&gt;
 * &lt;p&gt;Description: The Bohachevsky function&lt;/p&gt;
 * Copyright: Copyright (c) 2010&lt;/p&gt;
 * &lt;p&gt;Kunsamu&lt;/p&gt;
 * @author Jonatan Gomez
 * @version 1.0
 */</comment>
<class><specifier>public</specifier> class <name>Bohachevsky</name> <super><extends>extends <name><name>OptimizationFunction</name><argument_list>&lt;<argument><name><name>double</name><index>[]</index></name></argument>&gt;</argument_list></name></extends></super> <block>{
  <comment type="javadoc">/**
   * True if it is the first Bohachevsky function , false if it is the second
   */</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>one</name></decl>;</decl_stmt>
<comment type="javadoc">/**
 * Constructor: Creates a Bohachevsky function
 * @param _one True if it is the Bohachevsky I function, false if it is the Bohachevsky II function
 */</comment>
  <constructor><specifier>public</specifier> <name>Bohachevsky</name><parameter_list>( <param><decl><type><name>boolean</name></type> <name>_one</name></decl></param> )</parameter_list><block>{}</block></constructor>

  <comment type="javadoc">/**
   * Evaluates the Bohachevsky I function over two real values
   * @param x1 the first real value argument of the Bohachevsky function
   * @param x2 the second real value argument of the Bohachevsky function
   * @return the Bohachevsky value for the given values
   */</comment>
  <function><type><specifier>public</specifier> <name>double</name></type> <name>evalI</name><parameter_list>( <param><decl><type><name>double</name></type> <name>x1</name></decl></param>, <param><decl><type><name>double</name></type> <name>x2</name></decl></param> )</parameter_list><block>{
    <return>return <expr>( <name>x1</name>*<name>x1</name> - 2*<name>x2</name>*<name>x2</name> - 0.3*<call><name><name>Math</name>.<name>cos</name></name><argument_list>(<argument><expr>3.0*<name><name>Math</name>.<name>PI</name></name>*<name>x1</name></expr></argument>)</argument_list></call>
                   - 0.4*<call><name><name>Math</name>.<name>cos</name></name><argument_list>(<argument><expr>4.0*<name><name>Math</name>.<name>PI</name></name>*<name>x2</name></expr></argument>)</argument_list></call> + 0.7 )</expr>;</return>
  }</block></function>

  <comment type="javadoc">/**
   * Evaluates the Bohachevsky II function over two real values
   * @param x1 the first real value argument of the Bohachevsky function
   * @param x2 the second real value argument of the Bohachevsky function
   * @return the Bohachevsky value for the given values
   */</comment>
  <function><type><specifier>public</specifier> <name>double</name></type> <name>evalII</name><parameter_list>( <param><decl><type><name>double</name></type> <name>x1</name></decl></param>, <param><decl><type><name>double</name></type> <name>x2</name></decl></param> )</parameter_list><block>{
    <return>return <expr>( <name>x1</name>*<name>x1</name> + 2*<name>x2</name>*<name>x2</name> - 0.12*<call><name><name>Math</name>.<name>cos</name></name><argument_list>(<argument><expr>3.0*<name><name>Math</name>.<name>PI</name></name>*<name>x1</name></expr></argument>)</argument_list></call>*<call><name><name>Math</name>.<name>cos</name></name><argument_list>(<argument><expr>4.0*<name><name>Math</name>.<name>PI</name></name>*<name>x2</name></expr></argument>)</argument_list></call> + 0.3 )</expr>;</return>
  }</block></function>


  <comment type="javadoc">/**
   * Evaluate the OptimizationFunction function over the real vector given
   * @param x Real vector to be evaluated
   * @return the OptimizationFunction function over the real vector
   */</comment>
  <function><type><specifier>public</specifier> <name>Double</name></type> <name>apply</name><parameter_list>( <param><decl><type><name><name>double</name><index>[]</index></name></type> <name>x</name></decl></param> )</parameter_list><block>{
    <decl_stmt><decl><type><name>double</name></type> <name>f</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name> =<init> <expr><name><name>x</name>.<name>length</name></name> - 1</expr></init></decl>;</decl_stmt>
    <if>if<condition>( <expr><name>one</name></expr> )</condition><then><block>{
      <for>for( <init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> )<block>{
        <expr_stmt><expr><name>f</name> += <call><name>evalI</name><argument_list>( <argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>x</name><index>[<expr><name>i</name>+1</expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      }</block></for>
    }</block></then><else>else<block>{
      <for>for( <init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> )<block>{
        <expr_stmt><expr><name>f</name> += <call><name>evalII</name><argument_list>( <argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>x</name><index>[<expr><name>i</name>+1</expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      }</block></for>
    }</block></else></if>
    <comment type="line">// minimization</comment>
    <return>return <expr>-<name>f</name></expr>;</return>
  }</block></function>
}</block></class>
</unit>
