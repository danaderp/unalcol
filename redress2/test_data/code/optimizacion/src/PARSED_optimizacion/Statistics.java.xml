<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\types\real\Statistics.java"><package>package <name><name>unalcol</name>.<name>types</name>.<name>real</name></name>;</package>

<comment type="javadoc">/**
 * &lt;p&gt;Statistical information of numeric variables&lt;/p&gt;
 *
 * &lt;p&gt;Copyright: Copyright (c) 2009&lt;/p&gt;
 *
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 */</comment>
<class><specifier>public</specifier> class <name>Statistics</name> <block>{
    <comment type="javadoc">/**
     * Index of the min value of the set
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>minIndex</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * Index of the max value of the set
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>maxIndex</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * Min value of the set
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>double</name></type> <name>min</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * Max value of the set
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>double</name></type> <name>max</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * Average value of the set
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>double</name></type> <name>avg</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * Variance of the set
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>double</name></type> <name>variance</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * Deviation of the set
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>double</name></type> <name>deviation</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates an empty statistical information
     */</comment>
    <constructor><specifier>public</specifier> <name>Statistics</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <comment type="javadoc">/**
     * Computes the statistical information of the given array of doubles
     * @param x Array to be statistically analized
     */</comment>
    <constructor><specifier>public</specifier> <name>Statistics</name><parameter_list>(<param><decl><type><name><name>double</name><index>[]</index></name></type> <name>x</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>n</name> =<init> <expr><name><name>x</name>.<name>length</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>min</name> = <name>max</name> = <name>avg</name> = <name><name>x</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>1</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <if>if <condition>(<expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> &lt; <name>min</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>min</name> = <name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>minIndex</name> = <name>i</name></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <if>if <condition>(<expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> &gt; <name>max</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>max</name> = <name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>maxIndex</name> = <name>i</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></else></if>
            <expr_stmt><expr><name>avg</name> += <name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><name>avg</name> /= <name>n</name></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>variance</name> += (<name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> - <name>avg</name>) * (<name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> - <name>avg</name>)</expr>;</expr_stmt>
        }</block></for>                
        <expr_stmt><expr><name>variance</name> /= (<name>n</name>&gt;1)?(<name>n</name> - 1):1.0</expr>;</expr_stmt>
        <expr_stmt><expr><name>deviation</name> = <call><name><name>Math</name>.<name>sqrt</name></name><argument_list>(<argument><expr><name>variance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Computes the statistical information of the given column of a double matrix
     * @param x Matrix to be statistically analized
     * @param c column to be analized
     */</comment>
    <constructor><specifier>public</specifier> <name>Statistics</name><parameter_list>(<param><decl><type><name><name>double</name><index>[]</index><index>[]</index></name></type> <name>x</name></decl></param>, <param><decl><type><name>int</name></type> <name>c</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>n</name> =<init> <expr><name><name>x</name>.<name>length</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>min</name> = <name>max</name> = <name>avg</name> = <name><name>x</name><index>[<expr>0</expr>]</index><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>1</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <if>if <condition>(<expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name> &lt; <name>min</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>min</name> = <name><name>x</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>minIndex</name> = <name>i</name></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <if>if <condition>(<expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name> &gt; <name>max</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>max</name> = <name><name>x</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>maxIndex</name> = <name>i</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></else></if>
            <expr_stmt><expr><name>avg</name> += <name><name>x</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><name>avg</name> /= <name>n</name></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>variance</name> += (<name><name>x</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name> - <name>avg</name>) * (<name><name>x</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name> - <name>avg</name>)</expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><name>variance</name> /= (<name>n</name>&gt;1)?(<name>n</name> - 1):1.0</expr>;</expr_stmt>
        <expr_stmt><expr><name>deviation</name> = <call><name><name>Math</name>.<name>sqrt</name></name><argument_list>(<argument><expr><name>variance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Computes the statistical information of the given row of a double matrix
     * @param r Row to be analized
     * @param x Matrix to be statistically analized
     */</comment>
    <constructor><specifier>public</specifier> <name>Statistics</name><parameter_list>(<param><decl><type><name>int</name></type> <name>r</name></decl></param>, <param><decl><type><name><name>double</name><index>[]</index><index>[]</index></name></type> <name>x</name></decl></param> )</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>( <argument><expr><name><name>x</name><index>[<expr><name>r</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Obtains the statistical information in an array of doubles format (min, max, average, variance, deviation)
     * @return Statistical information in an array of doubles format
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name><index>[]</index></type> <name>get</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>values</name> =<init> <expr>new <name><name>double</name><index>[<expr>5</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr>0</expr>]</index></name> = <name>min</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr>1</expr>]</index></name> = <name>max</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr>2</expr>]</index></name> = <name>avg</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr>3</expr>]</index></name> = <name>variance</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr>4</expr>]</index></name> = <name>deviation</name></expr>;</expr_stmt>
        <return>return <expr><name>values</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
