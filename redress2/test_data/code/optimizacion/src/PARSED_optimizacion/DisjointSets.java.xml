<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\types\collection\misc\DisjointSets.java"><package>package <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>misc</name></name>;</package>


<comment type="javadoc">/**
 * &lt;p&gt;Title: DisjointSets&lt;/p&gt;
 * &lt;p&gt;Description: This class represents a disjoint sets find-union optimal structure
 * as explained by Cormen et all in Introduction to algorithms. Mac Graw Hill, 1990.&lt;/p&gt;
 * &lt;p&gt;Copyright: Copyright (c) 2002&lt;/p&gt;
 * &lt;p&gt;Company: Universidad Nacional de Colombia - The University of Memphis&lt;/p&gt;
 * @author Jonatan Gomez
 * @version 1.0
 *
 */</comment>
<class><specifier>public</specifier> class <name>DisjointSets</name> <block>{
  <comment type="javadoc">/**
   * The canonical object that represents the set which the element belongs to
   * p_i = x means that object i belongs to the set represented by object x
   */</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <name>int</name><index>[]</index></type> <name>p</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
  <comment type="javadoc">/**
   * The rank of the elements
   */</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <name>int</name><index>[]</index></type> <name>rank</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

  <comment type="javadoc">/**
   * Constructor: Creates a disjoint set structure of n objects. Each element
   * defines a set. p_x = x
   * @param n Number of elements
   */</comment>
  <constructor><specifier>public</specifier> <name>DisjointSets</name><parameter_list>( <param><decl><type><name>int</name></type> <name>n</name></decl></param> )</parameter_list> <block>{
    <expr_stmt><expr><name>p</name> = new <name><name>int</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>rank</name> = new <name><name>int</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <comment type="javadoc">/**
   * Initialize the disjoint find union structure. p_x = x, rank_x = 0
   */</comment>
  <function><type><specifier>public</specifier> <name>void</name></type> <name>init</name><parameter_list>()</parameter_list><block>{
    <for>for( <init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name><name>p</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> )<block>{
      <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> = <name>i</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>rank</name><index>[<expr><name>i</name></expr>]</index></name> = 0</expr>;</expr_stmt>
    }</block></for>
  }</block></function>

  <comment type="javadoc">/**
   * Returns the canonical object that represents the set that the object x belongs to
   * @param x Element used to determine the canonical object
   * @return the canonical object that represents the set that the object x belongs to
   */</comment>
  <function><type><specifier>public</specifier> <name>int</name></type> <name>find</name><parameter_list>( <param><decl><type><name>int</name></type> <name>x</name></decl></param> )</parameter_list><block>{
    <if>if<condition>( <expr><name><name>p</name><index>[<expr><name>x</name></expr>]</index></name> != <name>x</name></expr> )</condition><then><block>{
      <expr_stmt><expr><name><name>p</name><index>[<expr><name>x</name></expr>]</index></name> = <call><name>find</name><argument_list>( <argument><expr><name><name>p</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name><name>p</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</return>
  }</block></function>

  <comment type="javadoc">/**
   * Performs the union of the set that contains element x with the set that contains
   * the element y
   * @param x The object that defines the first set to be joint
   * @param y The object that defines the second set to be joint
   * @return The canonical object of the union set.
   */</comment>
  <function><type><specifier>public</specifier> <name>int</name></type> <name>union</name><parameter_list>( <param><decl><type><name>int</name></type> <name>x</name></decl></param>, <param><decl><type><name>int</name></type> <name>y</name></decl></param> )</parameter_list><block>{
    <return>return <expr><call><name>link</name><argument_list>( <argument><expr><call><name>find</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>find</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</return>
  }</block></function>

  <comment type="javadoc">/**
   * An intermediate function for ddoing the union of two sets
   * @param x The canonical object of the first set to be joint
   * @param y The canonical object of the second set to be joint
   * @return The canonical object of the union set.
   */</comment>
  <function><type><specifier>protected</specifier> <name>int</name></type> <name>link</name><parameter_list>( <param><decl><type><name>int</name></type> <name>x</name></decl></param>, <param><decl><type><name>int</name></type> <name>y</name></decl></param> )</parameter_list><block>{
    <if>if<condition>( <expr><name>x</name> != <name>y</name></expr> )</condition><then><block>{
      <if>if<condition>( <expr><name><name>rank</name><index>[<expr><name>x</name></expr>]</index></name> &gt; <name><name>rank</name><index>[<expr><name>y</name></expr>]</index></name></expr> )</condition><then><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>t</name> =<init> <expr><name>x</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>x</name> = <name>y</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name> = <name>t</name></expr>;</expr_stmt>
      }</block></then><else>else<block>{
        <if>if<condition>( <expr><name><name>rank</name><index>[<expr><name>x</name></expr>]</index></name> == <name><name>rank</name><index>[<expr><name>y</name></expr>]</index></name></expr> )</condition><then><block>{  <expr_stmt><expr><name><name>rank</name><index>[<expr><name>y</name></expr>]</index></name>++</expr>;</expr_stmt>  }</block></then></if>
      }</block></else></if>
      <expr_stmt><expr><name><name>p</name><index>[<expr><name>x</name></expr>]</index></name> = <name>y</name></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>y</name></expr>;</return>
  }</block></function>

  <comment type="javadoc">/**
   * Returns the canonical elements for each element in the full set
   * @return The canonical elements for each element in the full set
   */</comment>
  <function><type><specifier>public</specifier> <name>int</name><index>[]</index></type> <name>get</name><parameter_list>()</parameter_list><block>{
    <for>for( <init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name><name>p</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> )<block>{  <expr_stmt><expr><call><name>find</name><argument_list>( <argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt> }</block></for>
    <return>return <expr><name>p</name></expr>;</return>
  }</block></function>

  <comment type="javadoc">/**
   * Converts the disjoinfind-union structure to a string
   * return A string with the disjoinfind-union structure
   */</comment>
  <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>StringBuffer</name></type> <name>sb</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for( <init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name><name>p</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> )<block>{
      <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>"\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><call><name><name>sb</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>
}</block></class></unit>
