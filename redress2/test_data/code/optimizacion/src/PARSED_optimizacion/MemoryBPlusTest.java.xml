<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\types\collection\tree\bplus\memory\MemoryBPlusTest.java"><comment type="block">/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */</comment>
<package>package <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>tree</name>.<name>bplus</name>.<name>memory</name></name>;</package>

<import>import <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>tree</name>.<name>bplus</name>.<name>ImmutableBPlus</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>integer</name>.<name>IntegerOrder</name></name>;</import>

<comment type="javadoc">/**
 *
 * @author jgomez
 */</comment>
<class><specifier>public</specifier> class <name>MemoryBPlusTest</name> <block>{
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>( <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></param> )</parameter_list><block>{
       <decl_stmt><decl><type><name>Integer</name><index>[]</index></type> <name>v1</name> =<init> <expr>new <name><name>Integer</name><index>[]</index></name><block>{<expr>1</expr>,<expr>2</expr>,<expr>3</expr>,<expr>4</expr>,<expr>5</expr>,<expr>6</expr>}</block></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name><name>MemoryLeafNode</name><argument_list>&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>node1</name> =<init> <expr>new <call><name><name>MemoryLeafNode</name><argument_list>&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>v1</name></expr></argument>,<argument><expr>5</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name>Integer</name><index>[]</index></type> <name>v2</name> =<init> <expr>new <name><name>Integer</name><index>[]</index></name><block>{<expr>11</expr>,<expr>12</expr>,<expr>13</expr>,<expr>14</expr>,<expr>15</expr>,<expr>16</expr>}</block></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name><name>MemoryLeafNode</name><argument_list>&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>node2</name> =<init> <expr>new <call><name><name>MemoryLeafNode</name><argument_list>&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>v2</name></expr></argument>,<argument><expr>5</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <comment type="block">/*node1.right = node2;
       node2.left = node1;
       BPlusIterator&lt;Integer&gt; iter = new BPlusIterator&lt;&gt;(node1);
       while(iter.hasNext()){
           System.out.println(iter.next());
       }*/</comment>
       <decl_stmt><decl><type><name><name>MemoryInnerNode</name><argument_list>&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>root</name> =<init> <expr>new <call><name><name>MemoryInnerNode</name><argument_list>&lt;&gt;</argument_list></name><argument_list>(<argument><expr>7</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <expr_stmt><expr><call><name><name>root</name>.<name>insert</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>node1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>root</name>.<name>insert</name></name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><name>node2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//       root.n=1;</comment>
       <expr_stmt><expr><call><name><name>root</name>.<name>updateLeftKey</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       <decl_stmt><decl><type><name><name>ImmutableBPlus</name><argument_list>&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>bplus</name> =<init> <expr>new <call><name><name>ImmutableBPlus</name><argument_list>&lt;&gt;</argument_list></name><argument_list>(
               <argument><expr>new <call><name>IntegerOrder</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <for>for(<init><decl><type><name>Integer</name></type> <name>x</name>:<range><expr><name>bplus</name></expr></range></decl></init>)<block>{
           <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"$$"+<name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       }</block></for>
       
       <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Contains:"+<call><name><name>bplus</name>.<name>contains</name></name><argument_list>(<argument><expr>-3</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Contains:"+<call><name><name>bplus</name>.<name>contains</name></name><argument_list>(<argument><expr>3</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Contains:"+<call><name><name>bplus</name>.<name>contains</name></name><argument_list>(<argument><expr>5</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Contains:"+<call><name><name>bplus</name>.<name>contains</name></name><argument_list>(<argument><expr>11</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Contains:"+<call><name><name>bplus</name>.<name>contains</name></name><argument_list>(<argument><expr>10</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <expr_stmt><expr><call><name><name>root</name>.<name>remove</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <for>for(<init><decl><type><name>Integer</name></type> <name>x</name>:<range><expr><name>bplus</name></expr></range></decl></init>)<block>{
           <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"##"+<name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       }</block></for>
       <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Contains:"+<call><name><name>bplus</name>.<name>contains</name></name><argument_list>(<argument><expr>3</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Contains:"+<call><name><name>bplus</name>.<name>contains</name></name><argument_list>(<argument><expr>5</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Contains:"+<call><name><name>bplus</name>.<name>contains</name></name><argument_list>(<argument><expr>11</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Contains:"+<call><name><name>bplus</name>.<name>contains</name></name><argument_list>(<argument><expr>10</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       
    }</block></function>
    
}</block></class>
</unit>
