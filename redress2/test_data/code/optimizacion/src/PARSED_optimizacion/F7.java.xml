<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\optimization\testbed\real\lsgo_benchmark\F7.java"><package>package <name><name>unalcol</name>.<name>optimization</name>.<name>testbed</name>.<name>real</name>.<name>lsgo_benchmark</name></name>;</package>
<comment type="block">/*
 * Copyright (c) 2009 Thomas Weise for NICAL
 * http://www.it-weise.de/
 * tweise@gmx.de
 *
 * GNU LESSER GENERAL PUBLIC LICENSE (Version 2.1, February 1999)
 */</comment>

<import>import <name><name>java</name>.<name>io</name>.<name>BufferedWriter</name></name>;</import>

<comment type="javadoc">/**
 * The Single-group Shifted m-dimensional Schwefelï¿½s Problem 1.2: F7.
 * 
 * @author Thomas Weise
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>F7</name> <super><extends>extends <name>ShiftedPermutatedFunction</name></extends></super> <block>{

  <comment type="javadoc">/** the serial version id */</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>1</expr></init></decl>;</decl_stmt>

  <comment type="javadoc">/** the maximum value */</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>double</name></type> <name>MAX</name> =<init> <expr>100d</expr></init></decl>;</decl_stmt>

  <comment type="javadoc">/** the minimum value */</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>double</name></type> <name>MIN</name> =<init> <expr>(-<name>MAX</name>)</expr></init></decl>;</decl_stmt>

  <comment type="javadoc">/** the m-value */</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>m_m</name></decl>;</decl_stmt>

  <comment type="javadoc">/**
   * Create a new Single-group Shifted m-dimensional Schwefelï¿½s Problem 1.2
   * 
   * @param o
   *          the shifted global optimum
   * @param p
   *          the permutation vector
   * @param m
   *          the fraction of nonseparability
   */</comment>
  <constructor><specifier>public</specifier> <name>F7</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>double</name><index>[]</index></name></type> <name>o</name></decl></param>, <param><decl><type><specifier>final</specifier> <name><name>int</name><index>[]</index></name></type> <name>p</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>int</name></type> <name>m</name></decl></param>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>MIN</name></expr></argument>, <argument><expr><name>MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name>.<name>m_m</name></name> = <name>m</name></expr>;</expr_stmt>
  }</block></constructor>

  <comment type="javadoc">/**
   * Create a default instance of F7.
   * 
   * @param r
   *          the randomizer to use
   */</comment>
  <constructor><specifier>public</specifier> <name>F7</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Randomizer</name></type> <name>r</name></decl></param>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><call><name><name>r</name>.<name>createShiftVector</name></name><argument_list>(<argument><expr><name><name>Defaults</name>.<name>DEFAULT_DIM</name></name></expr></argument>, <argument><expr><name>MIN</name></expr></argument>, <argument><expr><name>MAX</name></expr></argument>)</argument_list></call></expr></argument>,<comment type="line">//</comment>
        <argument><expr><call><name><name>r</name>.<name>createPermVector</name></name><argument_list>(<argument><expr><name><name>Defaults</name>.<name>DEFAULT_DIM</name></name></expr></argument>)</argument_list></call></expr></argument>,<comment type="line">//</comment>
        <argument><expr><name><name>Defaults</name>.<name>DEFAULT_M</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//</comment>
  }</block></constructor>

  <comment type="javadoc">/**
   * Create a default instance of F7.
   */</comment>
  <constructor><specifier>public</specifier> <name>F7</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><call><name><name>Defaults</name>.<name>getRandomizer</name></name><argument_list>(<argument><expr><name><name>F7</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <comment type="javadoc">/**
   * Compute the value of the elliptic function. This function takes into
   * consideration only the first {{@link #getDimension()} elements of the
   * candidate vector.
   * 
   * @param x
   *          the candidate solution vector
   * @return the value of the function
   */</comment>
  <comment type="line">// @Override</comment>
  <function><type><specifier>public</specifier> <specifier>final</specifier> <name>double</name></type> <name>compute</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>double</name><index>[]</index></name></type> <name>x</name></decl></param>)</parameter_list> <block>{
    <return>return <expr>(<call><name><name>Kernel</name>.<name>shiftedPermSchwefel12</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>this</name>.<name>m_o</name></name></expr></argument>, <argument><expr><name><name>this</name>.<name>m_p</name></name></expr></argument>, <comment type="line">//</comment>
        <argument><expr>0</expr></argument>, <argument><expr><name><name>this</name>.<name>m_m</name></name></expr></argument>)</argument_list></call> * 1e6) + <comment type="line">//</comment>
        <call><name><name>Kernel</name>.<name>shiftedPermSphere</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>this</name>.<name>m_o</name></name></expr></argument>, <argument><expr><name><name>this</name>.<name>m_p</name></name></expr></argument>, <argument><expr><name><name>this</name>.<name>m_m</name></name></expr></argument>,<comment type="line">//</comment>
            <argument><expr><name><name>this</name>.<name>m_dimension</name></name> - <name><name>this</name>.<name>m_m</name></name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <comment type="javadoc">/**
   * Obtain the full name of the benchmark function (according to
   * &amp;quot;Benchmark Functions for the CECï¿½2010 Special Session and
   * Competition on Large-Scale Global Optimization&amp;quot; Ke Tang, Xiaodong
   * Li, P. N. Suganthan, Zhenyu Yang, and Thomas Weise CEC'2010)
   * 
   * @return the full name of the benchmark function
   */</comment>
  <comment type="line">// @Override</comment>
  <function><type><specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>getFullName</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr>"Single-group Shifted m-dimensional Schwefelï¿½s Problem 1.2"</expr>;</return><comment type="line">//$NON-NLS-1$</comment>
  }</block></function>

  <comment type="javadoc">/**
   * Obtain the short name of the benchmark function (according to
   * &amp;quot;Benchmark Functions for the CECï¿½2010 Special Session and
   * Competition on Large-Scale Global Optimization&amp;quot; Ke Tang, Xiaodong
   * Li, P. N. Suganthan, Zhenyu Yang, and Thomas Weise CEC'2010)
   * 
   * @return the short name of the benchmark function
   */</comment>
  <comment type="line">// @Override</comment>
  <function><type><specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>getShortName</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr>"F7"</expr>;</return> <comment type="line">//$NON-NLS-1$</comment>
  }</block></function>

  <comment type="javadoc">/**
   * Store the function information
   * 
   * @param w
   *          the writer to store
   * @throws Throwable
   *           a possible io exception
   */</comment>
  <comment type="line">// @Override</comment>
  <function><type><specifier>protected</specifier> <name>void</name></type> <name>storeFunctionInfo</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>BufferedWriter</name></type> <name>w</name></decl></param>)</parameter_list>
      <throws>throws <argument><expr><name>Throwable</name></expr></argument></throws> <block>{

    <expr_stmt><expr><call><name><name>super</name>.<name>storeFunctionInfo</name></name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>w</name>.<name>newLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>w</name>.<name>write</name></name><argument_list>(<argument><expr>"m-value  : "</expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//$NON-NLS-1$</comment>
    <expr_stmt><expr><call><name><name>w</name>.<name>write</name></name><argument_list>(<argument><expr><call><name><name>Integer</name>.<name>toString</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>m_m</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>
}</block></class>
</unit>
