<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\optimization\testbed\real\lsgo_benchmark\Function.java"><package>package <name><name>unalcol</name>.<name>optimization</name>.<name>testbed</name>.<name>real</name>.<name>lsgo_benchmark</name></name>;</package>
<comment type="block">/*
 * Copyright (c) 2009 Thomas Weise for NICAL
 * http://www.it-weise.de/
 * tweise@gmx.de
 *
 * GNU LESSER GENERAL PUBLIC LICENSE (Version 2.1, February 1999)
 */</comment>

<import>import <name><name>java</name>.<name>io</name>.<name>BufferedWriter</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileWriter</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>

<comment type="javadoc">/**
 * The base class for benchmark functions. All benchmark functions are for
 * minimization and have the same global optimum: &lt;code&gt;0&lt;/code&gt;. Some
 * benchmark functions may use internal temporary variables and
 * &lt;warning&gt;not be threadsafe&lt;/warning&gt;. Therefore, you should always use
 * each instance of a function for one single {#link java.lang.Thread}
 * only. You may clone or serialize function instances.
 * 
 * @author Thomas Weise
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>Function</name> <super><implements>implements <name>Serializable</name>, <name>Cloneable</name></implements></super> <block>{

  <comment type="javadoc">/** the serial version id */</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>1</expr></init></decl>;</decl_stmt>

  <comment type="javadoc">/** the worst possible objective value */</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>double</name></type> <name>WORST</name> =<init> <expr><name><name>Double</name>.<name>POSITIVE_INFINITY</name></name></expr></init></decl>;</decl_stmt>

  <comment type="javadoc">/** the best possible objective value */</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>double</name></type> <name>BEST</name> =<init> <expr>0d</expr></init></decl>;</decl_stmt>

  <comment type="javadoc">/** the dimension of the function */</comment>
  <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>int</name></type> <name>m_dimension</name></decl>;</decl_stmt>

  <comment type="javadoc">/** the minimum value which the decision variables can take on */</comment>
  <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>double</name></type> <name>m_min</name></decl>;</decl_stmt>

  <comment type="javadoc">/** the maximum value which the decision variables can take on */</comment>
  <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>double</name></type> <name>m_max</name></decl>;</decl_stmt>

  <comment type="javadoc">/**
   * Create the benchmark function
   * 
   * @param dimension
   *          the dimension of the function
   * @param min
   *          the minimum value which the decision variables can take on
   * @param max
   *          the maximum value which the decision variables can take on
   */</comment>
  <constructor><specifier>protected</specifier> <name>Function</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>int</name></type> <name>dimension</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>double</name></type> <name>min</name></decl></param>,
      <param><decl><type><specifier>final</specifier> <name>double</name></type> <name>max</name></decl></param>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name>.<name>m_dimension</name></name> = <name>dimension</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name>.<name>m_min</name></name> = <name>min</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name>.<name>m_max</name></name> = <name>max</name></expr>;</expr_stmt>
  }</block></constructor>

  <comment type="javadoc">/**
   * Obtain the dimension of the function.
   * 
   * @return the dimension of the function
   */</comment>
  <function><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>getDimension</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name><name>this</name>.<name>m_dimension</name></name></expr>;</return>
  }</block></function>

  <comment type="javadoc">/**
   * Obtain the minimum value which the decision variables can take on
   * 
   * @return the minimum value which the decision variables can take on
   */</comment>
  <function><type><specifier>public</specifier> <specifier>final</specifier> <name>double</name></type> <name>getMin</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name><name>this</name>.<name>m_min</name></name></expr>;</return>
  }</block></function>

  <comment type="javadoc">/**
   * Obtain the maximum value which the decision variables can take on
   * 
   * @return the maximum value which the decision variables can take on
   */</comment>
  <function><type><specifier>public</specifier> <specifier>final</specifier> <name>double</name></type> <name>getMax</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name><name>this</name>.<name>m_max</name></name></expr>;</return>
  }</block></function>

  <comment type="javadoc">/**
   * Compute the value of the benchmark function. This function takes into
   * consideration only the first {{@link #getDimension()} elements of the
   * candidate vector.
   * 
   * @param x
   *          the candidate solution vector
   * @return the value of the function
   */</comment>
  <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>double</name></type> <name>compute</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>double</name><index>[]</index></name></type> <name>x</name></decl></param>)</parameter_list>;</function_decl>

  <comment type="javadoc">/**
   * Obtain the full name of the benchmark function (according to
   * &amp;quot;Benchmark Functions for the CECï¿½2010 Special Session and
   * Competition on Large-Scale Global Optimization&amp;quot; Ke Tang, Xiaodong
   * Li, P. N. Suganthan, Zhenyu Yang, and Thomas Weise CEC'2010)
   * 
   * @return the full name of the benchmark function
   */</comment>
  <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>String</name></type> <name>getFullName</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="javadoc">/**
   * Obtain the short name of the benchmark function (according to
   * &amp;quot;Benchmark Functions for the CECï¿½2010 Special Session and
   * Competition on Large-Scale Global Optimization&amp;quot; Ke Tang, Xiaodong
   * Li, P. N. Suganthan, Zhenyu Yang, and Thomas Weise CEC'2010)
   * 
   * @return the short name of the benchmark function
   */</comment>
  <function><type><specifier>public</specifier> <name>String</name></type> <name>getShortName</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>this</name>.<name>getFullName</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <comment type="javadoc">/**
   * Obtain the optimum vector of the benchmark function
   * 
   * @return the optimum vector of the benchmark function
   */</comment>
  <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>double</name><index>[]</index></type> <name>getOptimum</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="javadoc">/**
   * the internal clone routine
   * 
   * @return a clone of this object
   */</comment>
  <function><type><specifier>final</specifier> <name>Function</name></type> <name>internalClone</name><parameter_list>()</parameter_list> <block>{
    <try>try <block>{
      <return>return <expr>(<call>(<name>Function</name>) <argument_list>(<argument><expr><call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>)</expr>;</return>
    }</block> <catch>catch (<param><decl><type><name>Throwable</name></type> <name>t</name></decl></param>) <block>{
      <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</throw> <comment type="line">// will not happen since we implement</comment>
      <comment type="line">// Cloneable</comment>
    }</block></catch></try>
  }</block></function>

  <comment type="javadoc">/**
   * Clone this function
   * 
   * @return a clone of this function
   */</comment>
  <comment type="line">// //@Override</comment>
  <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>this</name></expr>;</return> <comment type="line">// default behavior: return this</comment>
  }</block></function>

  <comment type="javadoc">/**
   * Store the information of this function in the following directory
   * 
   * @param dir
   *          the directory
   */</comment>
  <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>storeInfo</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>dir</name></decl></param>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>File</name></type> <name>f</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BufferedWriter</name></type> <name>w</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Throwable</name></type> <name>s</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>s</name> = <name>null</name></expr>;</expr_stmt>
    <try>try <block>{
      <expr_stmt><expr><name>f</name> = new <call><name>File</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call>.<call><name>getCanonicalFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <try>try <block>{
        <expr_stmt><expr><name>w</name> = new <call><name>BufferedWriter</name><argument_list>(<argument><expr>new <call><name>FileWriter</name><argument_list>(<comment type="line">//</comment>
            <argument><expr>new <call><name>File</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><call><name><name>this</name>.<name>getShortName</name></name><argument_list>()</argument_list></call> + ".txt"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//$NON-NLS-1$</comment>
        <try>try <block>{
          <expr_stmt><expr><call><name><name>this</name>.<name>storeFunctionInfo</name></name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
          <expr_stmt><expr><call><name><name>w</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
      }</block> <catch>catch (<param><decl><type><name>Throwable</name></type> <name>tt</name></decl></param>) <block>{
        <expr_stmt><expr><name>s</name> = <name>tt</name></expr>;</expr_stmt>
      }</block></catch></try>

      <expr_stmt><expr><call><name><name>this</name>.<name>storeUtilityInfo</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block> <catch>catch (<param><decl><type><name>Throwable</name></type> <name>t</name></decl></param>) <block>{
      <if>if <condition>(<expr><name>s</name> == <name>null</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>s</name> = <name>t</name></expr>;</expr_stmt>
      }</block></then></if>
    }</block></catch></try>
    <if>if <condition>(<expr><name>s</name> != <name>null</name></expr>)</condition><then> <block>{
      <if>if <condition>(<expr>(<name>s</name> <name>instanceof</name> <name>RuntimeException</name>)</expr>)</condition><then> <block>{
        <throw>throw <expr>((<name>RuntimeException</name>) <name>s</name>)</expr>;</throw>
      }</block></then></if>
      <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></then></if>
  }</block></function>

  <comment type="javadoc">/**
   * Store the function information
   * 
   * @param w
   *          the writer to store
   * @throws Throwable
   *           a possible io exception
   */</comment>
  <function><type><specifier>protected</specifier> <name>void</name></type> <name>storeFunctionInfo</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>BufferedWriter</name></type> <name>w</name></decl></param>)</parameter_list>
      <throws>throws <argument><expr><name>Throwable</name></expr></argument></throws> <block>{

    <expr_stmt><expr><call><name><name>w</name>.<name>write</name></name><argument_list>(<argument><expr>"Short Name: "</expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//$NON-NLS-1$</comment>
    <expr_stmt><expr><call><name><name>w</name>.<name>write</name></name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getShortName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>w</name>.<name>newLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>w</name>.<name>write</name></name><argument_list>(<argument><expr>"Long Name: "</expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//$NON-NLS-1$</comment>
    <expr_stmt><expr><call><name><name>w</name>.<name>write</name></name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getFullName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>w</name>.<name>newLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>w</name>.<name>write</name></name><argument_list>(<argument><expr>"Dimension: "</expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//$NON-NLS-1$</comment>
    <expr_stmt><expr><call><name><name>w</name>.<name>write</name></name><argument_list>(<argument><expr><call><name><name>Integer</name>.<name>toString</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>m_dimension</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>w</name>.<name>newLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>w</name>.<name>write</name></name><argument_list>(<argument><expr>"x-min    : "</expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//$NON-NLS-1$</comment>
    <expr_stmt><expr><call><name><name>w</name>.<name>write</name></name><argument_list>(<argument><expr><call><name><name>Double</name>.<name>toString</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>m_min</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>w</name>.<name>newLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>w</name>.<name>write</name></name><argument_list>(<argument><expr>"x-max    : "</expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//$NON-NLS-1$</comment>
    <expr_stmt><expr><call><name><name>w</name>.<name>write</name></name><argument_list>(<argument><expr><call><name><name>Double</name>.<name>toString</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>m_min</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <comment type="javadoc">/**
   * Store the utility information
   * 
   * @param f
   *          the directory
   * @throws Throwable
   *           a possible io exception
   */</comment>
  <function><type><name>void</name></type> <name>storeUtilityInfo</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>File</name></type> <name>f</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>Throwable</name></expr></argument></throws> <block>{
    <comment type="line">//</comment>
  }</block></function>

  <comment type="javadoc">/**
   * Obtain the string representation of this function's name
   * 
   * @return the string representation of this function's name
   */</comment>
  <comment type="line">// //@Override</comment>
  <function><type><specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>this</name>.<name>getShortName</name></name><argument_list>()</argument_list></call> + ": " + <call><name><name>this</name>.<name>getFullName</name></name><argument_list>()</argument_list></call></expr>;</return> <comment type="line">//$NON-NLS-1$</comment>
  }</block></function>
}</block></class>
</unit>
