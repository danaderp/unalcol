<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\types\real\matrix\DoubleMatrixUtil.java"><package>package <name><name>unalcol</name>.<name>types</name>.<name>real</name>.<name>matrix</name></name>;</package>

<import>import <name><name>unalcol</name>.<name>types</name>.<name>real</name></name>.*;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Title: DoubleMatrixUtil&lt;/p&gt;
 * &lt;p&gt;Description: A set of constants and methods operating on a matrix of double numbers.&lt;/p&gt;
 * &lt;p&gt;Copyright: Copyright (c) 2009&lt;/p&gt;
 * &lt;p&gt;Company: Kunsamu&lt;/p&gt;
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 */</comment>
<class><specifier>public</specifier> class <name>DoubleMatrixUtil</name> <block>{
    <comment type="javadoc">/**
     * Returns the number of rows of the matrix
     * @param A Matrix to be analized
     * @return The number of rows of the matrix
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>rows</name><parameter_list>(<param><decl><type><name><name>double</name><index>[]</index><index>[]</index></name></type> <name>A</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name><name>A</name>.<name>length</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the number of columns of the matrix
     * @param A Matrix to be analized
     * @return The number of columns of the matrix
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>columns</name><parameter_list>(<param><decl><type><name><name>double</name><index>[]</index><index>[]</index></name></type> <name>A</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name><name>A</name><index>[<expr>0</expr>]</index></name>.<name>length</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the &lt;i&gt;i&lt;/i&gt;-th column of the matrix
     * @param A Matrix from which the column will be obtained
     * @param i The column of the matrix to be returned
     * @return The &lt;i&gt;i&lt;/i&gt;-th column of the matrix
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>double</name><index>[]</index></type> <name>getColumn</name><parameter_list>(<param><decl><type><name><name>double</name><index>[]</index><index>[]</index></name></type> <name>A</name></decl></param>, <param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>getColumn</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>rows</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the &lt;i&gt;i&lt;/i&gt;-th column of the matrix
     * @param A Matrix from which the column will be obtained
     * @param n Number of rows of the matrix
     * @param m Number of columns of the matrix
     * @param i The column of the matrix to be returned
     * @return The &lt;i&gt;i&lt;/i&gt;-th column of the matrix
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>double</name><index>[]</index></type> <name>getColumn</name><parameter_list>(<param><decl><type><name><name>double</name><index>[]</index><index>[]</index></name></type> <name>A</name></decl></param>, <param><decl><type><name>int</name></type> <name>n</name></decl></param>, <param><decl><type><name>int</name></type> <name>m</name></decl></param>, <param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>x</name> =<init> <expr>new <name><name>double</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>j</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>j</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name><name>x</name><index>[<expr><name>j</name></expr>]</index></name> = <name><name>A</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>x</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the &lt;i&gt;i&lt;/i&gt;-th row of the matrix
     * @param A Matrix from which the row will be obtained
     * @param i The row of the matrix to be returned
     * @return The &lt;i&gt;i&lt;/i&gt;-th row of the matrix
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>double</name><index>[]</index></type> <name>getRow</name><parameter_list>(<param><decl><type><name><name>double</name><index>[]</index><index>[]</index></name></type> <name>A</name></decl></param>, <param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>getRow</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>columns</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the &lt;i&gt;i&lt;/i&gt;-th row of the matrix
     * @param A Matrix from which the row will be obtained
     * @param n Number of rows of the matrix
     * @param m Number of columns of the matrix
     * @param i The row of the matrix to be returned
     * @return The &lt;i&gt;i&lt;/i&gt;-th row of the matrix
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>double</name><index>[]</index></type> <name>getRow</name><parameter_list>(<param><decl><type><name><name>double</name><index>[]</index><index>[]</index></name></type> <name>A</name></decl></param>, <param><decl><type><name>int</name></type> <name>n</name></decl></param>, <param><decl><type><name>int</name></type> <name>m</name></decl></param>, <param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>x</name> =<init> <expr>new <name><name>double</name><index>[<expr><name>m</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>j</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>j</name> &lt; <name>m</name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name><name>x</name><index>[<expr><name>j</name></expr>]</index></name> = <name><name>A</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>x</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Transpose the matrix (rows becomes columns, columns become rows)
     * @param A Matrix to be transposed
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>double</name><index>[]</index><index>[]</index></type> <name>transpose</name><parameter_list>(<param><decl><type><name><name>double</name><index>[]</index><index>[]</index></name></type> <name>A</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>transpose</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>rows</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>columns</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Transpose the matrix (rows becomes columns, columns become rows)
     * @param A Matrix to be transposed
     * @param n Number of rows of the matrix
     * @param m Number of columns of the matrix
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>double</name><index>[]</index><index>[]</index></type> <name>transpose</name><parameter_list>(<param><decl><type><name><name>double</name><index>[]</index><index>[]</index></name></type> <name>A</name></decl></param>, <param><decl><type><name>int</name></type> <name>n</name></decl></param>, <param><decl><type><name>int</name></type> <name>m</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name><index>[]</index><index>[]</index></type> <name>At</name> =<init> <expr>new <name><name>double</name><index>[<expr><name>m</name></expr>]</index><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>m</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <for>for (<init><decl><type><name>int</name></type> <name>j</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>j</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
                <expr_stmt><expr><name><name>At</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> = <name><name>A</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></for>
        }</block></for>
        <return>return <expr><name>At</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the sum of the elements in the given row
     * @param A Matrix to be analized
     * @param i The row index to be added
     * @return The sum of the elements in the given row. Return 0 if the index is not valid
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>double</name></type> <name>rowSum</name><parameter_list>(<param><decl><type><name><name>double</name><index>[]</index><index>[]</index></name></type> <name>A</name></decl></param>, <param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>rowSum</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>rows</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>columns</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the sum of the elements in the given row
     * @param A Matrix to be analized
     * @param n Number of rows of the matrix
     * @param m Number of columns of the matrix
     * @param i The row index to be added
     * @return The sum of the elements in the given row. Return 0 if the index is not valid
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>double</name></type> <name>rowSum</name><parameter_list>(<param><decl><type><name><name>double</name><index>[]</index><index>[]</index></name></type> <name>A</name></decl></param>, <param><decl><type><name>int</name></type> <name>n</name></decl></param>, <param><decl><type><name>int</name></type> <name>m</name></decl></param>, <param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>val</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>0 &lt;= <name>i</name> &amp;&amp; <name>i</name> &lt; <name>n</name></expr>)</condition><then> <block>{
            <for>for (<init><decl><type><name>int</name></type> <name>j</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>j</name> &lt; <name>m</name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
                <expr_stmt><expr><name>val</name> += <name><name>A</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></for>
        }</block></then></if>
        <return>return <expr><name>val</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the sum of the elements in the given column
     * @param A Matrix to be analyzed
     * @param i The column index to be added
     * @return The sum of the elements in the given column. Return 0 if the index is not valid
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>double</name></type> <name>columnSum</name><parameter_list>(<param><decl><type><name><name>double</name><index>[]</index><index>[]</index></name></type> <name>A</name></decl></param>, <param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>columnSum</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>rows</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>columns</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the sum of the elements in the given column
     * @param A Matrix to be analyzed
     * @param n Number of rows of the matrix
     * @param m Number of columns of the matrix
     * @param j The column index to be added
     * @return The sum of the elements in the given column. Return 0 if the index is not valid
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>double</name></type> <name>columnSum</name><parameter_list>(<param><decl><type><name><name>double</name><index>[]</index><index>[]</index></name></type> <name>A</name></decl></param>, <param><decl><type><name>int</name></type> <name>n</name></decl></param>, <param><decl><type><name>int</name></type> <name>m</name></decl></param>, <param><decl><type><name>int</name></type> <name>j</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>val</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>0 &lt;= <name>j</name> &amp;&amp; <name>j</name> &lt; <name>m</name></expr>)</condition><then> <block>{
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <expr_stmt><expr><name>val</name> += <name><name>A</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></for>
        }</block></then></if>
        <return>return <expr><name>val</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the sum of the elements in the matrix
     * @param A Matrix to be analized
     * @return The sum of the elements in the matrix
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>double</name></type> <name>sum</name><parameter_list>(<param><decl><type><name><name>double</name><index>[]</index><index>[]</index></name></type> <name>A</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>sum</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>rows</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>columns</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the sum of the elements in the matrix
     * @param A Matrix to be analized
     * @param n Number of rows of the matrix
     * @param m Number of columns of the matrix
     * @return The sum of the elements in the matrix
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>double</name></type> <name>sum</name><parameter_list>(<param><decl><type><name><name>double</name><index>[]</index><index>[]</index></name></type> <name>A</name></decl></param>, <param><decl><type><name>int</name></type> <name>n</name></decl></param>, <param><decl><type><name>int</name></type> <name>m</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>val</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <for>for (<init><decl><type><name>int</name></type> <name>j</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>j</name> &lt; <name>m</name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
                <expr_stmt><expr><name>val</name> += <name><name>A</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></for>
        }</block></for>
        <return>return <expr><name>val</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the sum of the elements in the principal diagonal, i.e.
     * sum( x[i,i] ) for all i=1..n
     * @param A Matrix to be analized
     * @return The sum of the elements in the principal diagonal
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>double</name></type> <name>diagonalSum</name><parameter_list>(<param><decl><type><name><name>double</name><index>[]</index><index>[]</index></name></type> <name>A</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>diagonalSum</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>rows</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>columns</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the sum of the elements in the principal diagonal, i.e.
     * sum( x[i,i] ) for all i=1..n
     * @param A Matrix to be analized
     * @param n Number of rows of the matrix
     * @param m Number of columns of the matrix
     * @return The sum of the elements in the principal diagonal
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>double</name></type> <name>diagonalSum</name><parameter_list>(<param><decl><type><name><name>double</name><index>[]</index><index>[]</index></name></type> <name>A</name></decl></param>, <param><decl><type><name>int</name></type> <name>n</name></decl></param>, <param><decl><type><name>int</name></type> <name>m</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>x</name> =<init> <expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>val</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>x</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>val</name> += <name><name>A</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>val</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Determines if the matrix is squared or not
     * @param A Matrix to be analized
     * @return true if the matrix is squared false otherwise
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isSquare</name><parameter_list>(<param><decl><type><name><name>double</name><index>[]</index><index>[]</index></name></type> <name>A</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>(<call><name>isSquare</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>rows</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>columns</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>)</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Determines if the matrix is squared or not
     * @param A Matrix to be analized
     * @param n Number of rows of the matrix
     * @param m Number of columns of the matrix
     * @return true if the matrix is squared false otherwise
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isSquare</name><parameter_list>(<param><decl><type><name><name>double</name><index>[]</index><index>[]</index></name></type> <name>A</name></decl></param>, <param><decl><type><name>int</name></type> <name>n</name></decl></param>, <param><decl><type><name>int</name></type> <name>m</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>(<name>n</name> == <name>m</name>)</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Determines if the matrix is symmetric
     * @param A Matrix to be analized
     * @return true if the matrix is symmetric, false otherwise
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isSymmetric</name><parameter_list>(<param><decl><type><name><name>double</name><index>[]</index><index>[]</index></name></type> <name>A</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>isSymmetric</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>rows</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>columns</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Determines if the matrix is symmetric
     * @param A Matrix to be analized
     * @param n Number of rows of the matrix
     * @param m Number of columns of the matrix
     * @return true if the matrix is symmetric, false otherwise
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isSymmetric</name><parameter_list>(<param><decl><type><name><name>double</name><index>[]</index><index>[]</index></name></type> <name>A</name></decl></param>, <param><decl><type><name>int</name></type> <name>n</name></decl></param>, <param><decl><type><name>int</name></type> <name>m</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>flag</name> =<init> <expr><call><name>isSquare</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>flag</name></expr>)</condition><then> <block>{
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>flag</name> &amp;&amp; <name>i</name> &lt; <name>n</name> - 1</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <for>for (<init><decl><type><name>int</name></type> <name>j</name> =<init> <expr><name>i</name> + 1</expr></init></decl>;</init> <condition><expr><name>flag</name> &amp;&amp; <name>j</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
                    <expr_stmt><expr><name>flag</name> = <call><name><name>DoubleUtil</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
            }</block></for>
        }</block></then></if>
        <return>return <expr><name>flag</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Determines if the matrix is diagonal
     * @param A Matrix to be analized
     * @return true if the matrix is diagonal, false otherwise
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isDiagonal</name><parameter_list>(<param><decl><type><name><name>double</name><index>[]</index><index>[]</index></name></type> <name>A</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>isDiagonal</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>rows</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>columns</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Determines if the matrix is diagonal
     * @param A Matrix to be analized
     * @param n Number of rows of the matrix
     * @param m Number of columns of the matrix
     * @return true if the matrix is diagonal, false otherwise
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isDiagonal</name><parameter_list>(<param><decl><type><name><name>double</name><index>[]</index><index>[]</index></name></type> <name>A</name></decl></param>, <param><decl><type><name>int</name></type> <name>n</name></decl></param>, <param><decl><type><name>int</name></type> <name>m</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>flag</name> =<init> <expr><call><name>isSquare</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>flag</name></expr>)</condition><then> <block>{
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>flag</name> &amp;&amp; <name>i</name> &lt; <name>n</name> - 1</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <for>for (<init><decl><type><name>int</name></type> <name>j</name> =<init> <expr><name>i</name> + 1</expr></init></decl>;</init> <condition><expr><name>flag</name> &amp;&amp; <name>j</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
                    <expr_stmt><expr><name>flag</name> = (<call><name><name>DoubleUtil</name>.<name>isZero</name></name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> &amp;&amp;
                            <call><name><name>DoubleUtil</name>.<name>isZero</name></name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call>)</expr>;</expr_stmt>
                }</block></for>
            }</block></for>
        }</block></then></if>
        <return>return <expr><name>flag</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Obtains statistical (min, max, avg, standard deviation) information from a matrix by considering each column as
     * an independent variable
     * @param x Matrix to be statistically analyzed
     * @return statistical (min, max, avg, standard deviation) information from a matrix by considering each column as
     * an independent variable
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Statistics</name><index>[]</index></type> <name>statistics</name><parameter_list>(<param><decl><type><name><name>double</name><index>[]</index><index>[]</index></name></type> <name>x</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>include_median</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>m</name> =<init> <expr><name><name>x</name><index>[<expr>0</expr>]</index></name>.<name>length</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Statistics</name><index>[]</index></type> <name>s</name> =<init> <expr>new <name><name>Statistics</name><index>[<expr><name>m</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>j</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>j</name> &lt; <name>m</name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
            <if>if<condition>( <expr><name>include_median</name></expr> )</condition><then><block>{
                <expr_stmt><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name> = new <call><name>StatisticsWithMedian</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then><else>else<block>{
                <expr_stmt><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name> = new <call><name>Statistics</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></for>
        <return>return <expr><name>s</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Obtains statistical (min, max, avg, standard deviation) information from a matrix by considering each column as
     * an independent variable
     * @param x Matrix to be statistically analyzed
     * @return statistical (min, max, avg, standard deviation) information from a matrix by considering each column as
     * an independent variable
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>double</name><index>[]</index><index>[]</index></type> <name>statistics_matrix</name><parameter_list>(<param><decl><type><name><name>double</name><index>[]</index><index>[]</index></name></type> <name>x</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>include_median</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>m</name> =<init> <expr><name><name>x</name><index>[<expr>0</expr>]</index></name>.<name>length</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name><index>[]</index><index>[]</index></type> <name>s</name> =<init> <expr>new <name><name>double</name><index>[<expr><name>m</name></expr>]</index><index>[]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Statistics</name><index>[]</index></type> <name>st</name> =<init> <expr><call><name>statistics</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>include_median</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>j</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>j</name> &lt; <name>m</name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name> = <name><name>st</name><index>[<expr><name>j</name></expr>]</index></name>.<call><name>get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>s</name></expr>;</return>
    }</block></function>

}</block></class>
</unit>
