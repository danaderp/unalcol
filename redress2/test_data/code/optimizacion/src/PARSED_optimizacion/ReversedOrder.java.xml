<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\sort\ReversedOrder.java"><package>package <name><name>unalcol</name>.<name>sort</name></name>;</package>

<comment type="javadoc">/**
 * &lt;p&gt;Reverses a given order&lt;/p&gt;
 * &lt;p&gt;Copyright: Copyright (c) 2010&lt;/p&gt;
 * 
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 *
 */</comment>
<class><specifier>public</specifier> class <name><name>ReversedOrder</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name> <super><implements>implements <name><name>Order</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></implements></super> <block>{
    <comment type="javadoc">/**
     * Order to be reversed
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>Order</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>original_order</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a reversed order for the given order
     * @param _original_order Order to be reversed
     */</comment>
    <constructor><specifier>public</specifier> <name>ReversedOrder</name><parameter_list>(<param><decl><type><name><name>Order</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>_original_order</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>original_order</name> = <name>_original_order</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Determines if object one is less than (in the reversed order) object two
     * @param one The first object to compare
     * @param two The second object to compare
     * @return (one&lt;two) &lt;-&gt; (two&lt;one in the original_order)
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<param><decl><type><name>T</name></type> <name>one</name></decl></param>, <param><decl><type><name>T</name></type> <name>two</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>original_order</name>.<name>compare</name></name><argument_list>(<argument><expr><name>two</name></expr></argument>, <argument><expr><name>one</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>Object</name></type> <name>owner</name><parameter_list>()</parameter_list><block>{ <return>return <expr><call><name><name>original_order</name>.<name>owner</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
}</block></class></unit>
