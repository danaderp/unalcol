<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\random\Random.java"><package>package <name><name>unalcol</name>.<name>random</name></name>;</package>

<import>import <name><name>unalcol</name>.<name>random</name>.<name>raw</name></name>.*;</import>
<import>import <name><name>unalcol</name>.<name>random</name>.<name>rngpack</name>.<name>RanMT</name></name>;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Random number generator utility&lt;/p&gt;
 *
 * &lt;p&gt;Copyright: Copyright (c) 2009&lt;/p&gt;
 *
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 */</comment>
<class><specifier>public</specifier> class <name>Random</name> <block>{
    <comment type="javadoc">/**
     * Underline random generator
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>RawGenerator</name></type> <name>generator</name> =<init> <expr>new <call><name>JavaGenerator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">//RanMT();</comment>

    <comment type="javadoc">/**
     * Gets the raw generator
     * @return RawGenerator
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>RawGenerator</name></type> <name>get</name><parameter_list>()</parameter_list><block>{
    <return>return <expr><name>generator</name></expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     * Sets the raw generator used by any program
     * @param newGenerator New Raw Generator
     * @return RawGenerator Old Raw Generator
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>RawGenerator</name></type> <name>set</name><parameter_list>(<param><decl><type><name>RawGenerator</name></type> <name>newGenerator</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>RawGenerator</name></type> <name>oldGenerator</name> =<init> <expr><name>generator</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>generator</name> = <name>newGenerator</name></expr>;</expr_stmt>
        <return>return <expr><name>oldGenerator</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>RawGenerator</name></type> <name>new_generator</name><parameter_list>()</parameter_list><block>{
        <return>return <expr>new <call><name>RanMT</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Generates a uniform random number in the interval [0.0,1.0)
     * @return A uniform random number in the interval [0.0,1.0)
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>double</name></type> <name>random</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>generator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Generates a boolean value with equal probability
     * @return A boolean value with equal probability
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>nextBoolean</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>(<call><name>random</name><argument_list>()</argument_list></call> &gt;= 0.5)</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Generates a boolean value with the given probability
     * @param falseProbability The probability of generating a &lt;i&gt;false&lt;/i&gt; value (1.0-falseProbability)
     * provides the probability of generating a &lt;i&gt;true&lt;/i&gt; value
     * @return A boolean value with the given probability
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>nextBoolean</name><parameter_list>(<param><decl><type><name>double</name></type> <name>falseProbability</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>(<call><name>random</name><argument_list>()</argument_list></call> &gt;= <name>falseProbability</name>)</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Generates a uniform integer value in the interval [0,max)
     * @param max Sup limit of the integer values generated by the utility
     * @return A uniform integer value in the interval [0,max)
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>nextInt</name><parameter_list>(<param><decl><type><name>int</name></type> <name>max</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>(<call>(<name>int</name>) <argument_list>(<argument><expr><name>max</name> * <call><name>random</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>)</expr>;</return>
    }</block></function>
    
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>( <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></param> )</parameter_list><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>sample</name> =<init> <expr>100</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>size</name> =<init> <expr>32</expr></init></decl>;</decl_stmt>
        <for>for( <init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name>sample</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> )<block>{
            <decl_stmt><decl><type><name>int</name></type> <name>sign</name> =<init> <expr>1</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>n</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
            <for>for( <init><decl><type><name>int</name></type> <name>j</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>j</name>&lt;<name>size</name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr> )<block>{
<comment type="line">//                if( Math.random() &lt; 0.5*(1.0-sign) +(double)(sign*n)/(double)(n+sign) ){</comment>
                <if>if<condition>( <expr><call><name><name>Math</name>.<name>random</name></name><argument_list>()</argument_list></call> &lt; 0.5</expr> )</condition><then><block>{
                    <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>print</name></name><argument_list>(<argument><expr>'1'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>n</name>++</expr>;</expr_stmt>
                    <if>if<condition>( <expr><name>n</name>==0</expr> )</condition><then><block>{ <expr_stmt><expr><name>sign</name> = 1</expr>;</expr_stmt> }</block></then></if>
                }</block></then><else>else<block>{
                    <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>print</name></name><argument_list>(<argument><expr>'0'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>n</name>--</expr>;</expr_stmt>
                    <if>if<condition>( <expr><name>n</name>==-1</expr> )</condition><then><block>{
                        <expr_stmt><expr><name>sign</name> = -1</expr>;</expr_stmt>
                    }</block></then></if>
                }</block></else></if>
            }</block></for>
            <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>
}</block></class>
</unit>
