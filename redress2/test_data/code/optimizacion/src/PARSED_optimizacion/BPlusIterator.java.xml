<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\types\collection\tree\bplus\BPlusIterator.java"><comment type="block">/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */</comment>
<package>package <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>tree</name>.<name>bplus</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>NoSuchElementException</name></name>;</import>

<comment type="javadoc">/**
 *
 * @author jgomez
 */</comment>
<class><specifier>public</specifier> class <name><name>BPlusIterator</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name> <super><implements>implements <name><name>Iterator</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></implements></super><block>{
    <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>pos</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>BPlusLeafNode</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>node</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>BPlusIterator</name><parameter_list>( <param><decl><type><name><name>BPlusLeafNode</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>node</name></decl></param> )</parameter_list><block>{
        <expr_stmt><expr><name><name>this</name>.<name>node</name></name> = <name>node</name></expr>;</expr_stmt>
    }</block></constructor>
    
    <constructor><specifier>public</specifier> <name>BPlusIterator</name><parameter_list>( <param><decl><type><name><name>BPlusLocation</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>loc</name></decl></param> )</parameter_list><block>{
        <expr_stmt><expr><name>node</name> = <name><name>loc</name>.<name>node</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>pos</name> = <name><name>loc</name>.<name>pos</name></name> - 1</expr>;</expr_stmt>
    }</block></constructor>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>boolean</name></type> <name>hasNext</name><parameter_list>()</parameter_list><block>{
        <return>return <expr>(<name>pos</name>+1&lt;<call><name><name>node</name>.<name>n</name></name><argument_list>()</argument_list></call> || <call><name><name>node</name>.<name>right</name></name><argument_list>()</argument_list></call>!=<name>null</name>)</expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>T</name></type> <name>next</name><parameter_list>()</parameter_list>  <throws>throws <argument><expr><name>NoSuchElementException</name></expr></argument></throws><block>{
        <try>try<block>{
            <while>while<condition>(<expr><name>node</name>!=<name>null</name>&amp;&amp;<name>pos</name>+1==<call><name><name>node</name>.<name>n</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{
                <expr_stmt><expr><name>pos</name> = -1</expr>;</expr_stmt>
                <expr_stmt><expr><name>node</name> = (<name><name>BPlusLeafNode</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name>)<call><name><name>node</name>.<name>right</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></while>
            <if>if<condition>(<expr><name>pos</name>+1&lt;<call><name><name>node</name>.<name>n</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
                <expr_stmt><expr><name>pos</name>++</expr>;</expr_stmt>
            }</block></then></if>    
            <return>return <expr><call><name><name>node</name>.<name>key</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block><catch>catch( <param><decl><type><name>Exception</name></type> <name>e</name></decl></param> )<block>{
            <throw>throw <expr>new <call><name>NoSuchElementException</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>remove</name><parameter_list>()</parameter_list> <block>{
    }</block></function>    
    
}</block></class>
</unit>
