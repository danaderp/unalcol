<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\types\integer\array\IntArraySimplePersistent.java"><package>package <name><name>unalcol</name>.<name>types</name>.<name>integer</name>.<name>array</name></name>;</package>

<import>import <name><name>unalcol</name>.<name>io</name></name>.*;</import>
<import>import <name><name>java</name>.<name>io</name></name>.*;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Integer array persistent method that uses a given charater for separating the array values&lt;/p&gt;
 *
 * &lt;p&gt;Copyright: Copyright (c) 2009&lt;/p&gt;
 * 
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 */</comment>

<class><specifier>public</specifier> class <name>IntArraySimplePersistent</name> <super><extends>extends <name>IntArrayPersistent</name></extends></super> <block>{
    <comment type="javadoc">/**
     * Character used for separating the values in the array
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>char</name></type> <name>separator</name> =<init> <expr>' '</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates an integer array persistent method that uses an space for separatng the array values
     */</comment>
    <constructor><specifier>public</specifier> <name>IntArraySimplePersistent</name><parameter_list>()</parameter_list> <block>{}</block></constructor>

    <comment type="javadoc">/**
     * Creates an integer array persistent method that uses the give charater for separating the array values
     * @param separator Character used for separating the array values
     */</comment>
    <constructor><specifier>public</specifier> <name>IntArraySimplePersistent</name><parameter_list>(<param><decl><type><name>char</name></type> <name>separator</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>separator</name></name> = <name>separator</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Writes an array to the given writer (writes the size and the values) using the associated separator char
     * @param obj array to write
     * @param out The writer object
     * @throws IOException IOException
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<param><decl><type><name><name>int</name><index>[]</index></name></type> <name>obj</name></decl></param>, <param><decl><type><name>Writer</name></type> <name>out</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>n</name> =<init> <expr><name><name>obj</name>.<name>length</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr><name>separator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Reads an array from the input stream (the first value is the array's size and the following values are the values in the array)
     * @param reader The reader object
     * @throws IOException IOException
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>read</name><parameter_list>(<param><decl><type><name>ShortTermMemoryReader</name></type> <name>reader</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>StreamTokenizer</name></type> <name>tok</name> =<init> <expr>new <call><name>StreamTokenizer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>tok</name>.<name>nextToken</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>n</name> =<init> <expr>(<name>int</name>) <name><name>tok</name>.<name>nval</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name><index>[]</index></type> <name>a</name> =<init> <expr>new <name><name>int</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>tok</name>.<name>nextToken</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> = (<name>int</name>) <name><name>tok</name>.<name>nval</name></name></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>a</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
