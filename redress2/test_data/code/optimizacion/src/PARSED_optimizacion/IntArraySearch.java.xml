<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\types\integer\array\IntArraySearch.java"><package>package <name><name>unalcol</name>.<name>types</name>.<name>integer</name>.<name>array</name></name>;</package>

<comment type="javadoc">/**
 * &lt;p&gt;Set of methods for searching in a sorted array of ints&lt;/p&gt;
 *
 * &lt;p&gt;Copyright: Copyright (c) 2009&lt;/p&gt;
 * 
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 *
 */</comment>
<class><specifier>public</specifier> class <name>IntArraySearch</name><block>{
    <comment type="javadoc">/**
     * Determines if the sorted array contains the given int
     * @param sorted Array of ints (should be sorted)
     * @param x Element to be located
     * @return &lt;i&gt;true&lt;/i&gt; if the int belongs to the sorted array, &lt;i&gt;false&lt;/i&gt; otherwise
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>contains</name><parameter_list>(<param><decl><type><name><name>int</name><index>[]</index></name></type> <name>sorted</name></decl></param>, <param><decl><type><name>int</name></type> <name>x</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>contains</name><argument_list>(<argument><expr><name>sorted</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>sorted</name>.<name>length</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Determines if the sorted array contains the given int
     * @param sorted Array of ints (should be sorted)
     * @param start Initial position for the searching process
     * @param end Final position (not included) for the searching process
     * @param x Element to be located
     * @return &lt;i&gt;true&lt;/i&gt; if the int belongs to the sorted array, &lt;i&gt;false&lt;/i&gt; otherwise
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>contains</name><parameter_list>(<param><decl><type><name><name>int</name><index>[]</index></name></type> <name>sorted</name></decl></param>, <param><decl><type><name>int</name></type> <name>start</name></decl></param>, <param><decl><type><name>int</name></type> <name>end</name></decl></param>, <param><decl><type><name>int</name></type> <name>x</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>( <call><name>find</name><argument_list>(<argument><expr><name>sorted</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> != -1 )</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Search for the position of the given int. The vector should be sorted
     * @param sorted Array of ints (should be sorted)
     * @param x Element to be located
     * @return The position of the given int, -1 if the given int is not in the array
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>find</name><parameter_list>( <param><decl><type><name><name>int</name><index>[]</index></name></type> <name>sorted</name></decl></param>, <param><decl><type><name>int</name></type> <name>x</name></decl></param> )</parameter_list><block>{
        <return>return <expr><call><name>find</name><argument_list>(<argument><expr><name>sorted</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>sorted</name>.<name>length</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument> )</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Search for the position of the given int. The vector should be sorted
     * @param sorted Array of ints (should be sorted)
     * @param start Initial position for the searching process
     * @param end Final position (not included) for the searching process
     * @param x Element to be located
     * @return The position of the given int, -1 if the given int is not in the array
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>find</name><parameter_list>( <param><decl><type><name><name>int</name><index>[]</index></name></type> <name>sorted</name></decl></param>, <param><decl><type><name>int</name></type> <name>start</name></decl></param>, <param><decl><type><name>int</name></type> <name>end</name></decl></param>, <param><decl><type><name>int</name></type> <name>x</name></decl></param> )</parameter_list><block>{
        <if>if<condition>( <expr><name>end</name> &gt; <name>start</name> &amp;&amp; <name><name>sorted</name><index>[<expr><name>start</name></expr>]</index></name> &lt; <name><name>sorted</name><index>[<expr><name>end</name>-1</expr>]</index></name></expr> )</condition><then><block>{
            <return>return <expr><call><name>findLow2High</name><argument_list>(<argument><expr><name>sorted</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then><else>else<block>{
            <return>return <expr><call><name>findHigh2Low</name><argument_list>(<argument><expr><name>sorted</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Search for the position of the given int. The vector should be sorted (low to high)
     * @param sorted Array of ints (should be sorted)
     * @param x Element to be located
     * @return The position of the given int, -1 if the given int is not in the array
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>findLow2High</name><parameter_list>( <param><decl><type><name><name>int</name><index>[]</index></name></type> <name>sorted</name></decl></param>, <param><decl><type><name>int</name></type> <name>x</name></decl></param> )</parameter_list><block>{
        <return>return <expr><call><name>findLow2High</name><argument_list>( <argument><expr><name>sorted</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>sorted</name>.<name>length</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Search for the position of the given int. The vector should be sorted (low to high)
     * @param sorted Array of ints (should be sorted)
     * @param x Element to be located
     * @param start Initial position for the searching process
     * @param end Final position (not included) for the searching process
     * @return The position of the given int, -1 if the given int is not in the array
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>findLow2High</name><parameter_list>( <param><decl><type><name><name>int</name><index>[]</index></name></type> <name>sorted</name></decl></param>, <param><decl><type><name>int</name></type> <name>start</name></decl></param>, <param><decl><type><name>int</name></type> <name>end</name></decl></param>, <param><decl><type><name>int</name></type> <name>x</name></decl></param> )</parameter_list><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>pos</name> =<init> <expr><call><name>findRightLow2High</name><argument_list>( <argument><expr><name>sorted</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>x</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if<condition>( <expr><name>pos</name> &gt; <name>start</name> &amp;&amp; <name>x</name> == <name><name>sorted</name><index>[<expr><name>pos</name>-1</expr>]</index></name></expr> )</condition><then><block>{
                <expr_stmt><expr><name>pos</name>--</expr>;</expr_stmt>
        }</block></then><else>else<block>{
            <expr_stmt><expr><name>pos</name> = -1</expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><name>pos</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Search for the position of the first element in the array that is bigger
     * than the given element. The array should be sorted (low to high)
     * @param sorted Array of ints (should be sorted)
     * @param x Element to be located
     * @return Position of the first int that is bigger than the given int
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>findRightLow2High</name><parameter_list>(<param><decl><type><name><name>int</name><index>[]</index></name></type> <name>sorted</name></decl></param>, <param><decl><type><name>int</name></type> <name>x</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>findRightLow2High</name><argument_list>(<argument><expr><name>sorted</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>sorted</name>.<name>length</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Search for the position of the first element in the array that is bigger
     * than the given element. The array should be sorted (low to high)
     * @param sorted Array of ints (should be sorted)
     * @param start Initial position for the searching process
     * @param end Final position (not included) for the searching process
     * @param x Element to be located
     * @return Position of the first int that is bigger than the given int
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>findRightLow2High</name><parameter_list>(<param><decl><type><name><name>int</name><index>[]</index></name></type> <name>sorted</name></decl></param>, <param><decl><type><name>int</name></type> <name>start</name></decl></param>, <param><decl><type><name>int</name></type> <name>end</name></decl></param>, <param><decl><type><name>int</name></type> <name>x</name></decl></param>)</parameter_list> <block>{
      <if>if<condition>( <expr><name>end</name> &gt; <name>start</name></expr> )</condition><then><block>{
          <decl_stmt><decl><type><name>int</name></type> <name>a</name> =<init> <expr><name>start</name></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int</name></type> <name>b</name> =<init> <expr><name>end</name> - 1</expr></init></decl>;</decl_stmt>
          <if>if<condition>( <expr><name>x</name> &lt; <name><name>sorted</name><index>[<expr><name>a</name></expr>]</index></name></expr> )</condition><then><block>{ <return>return <expr><name>start</name></expr>;</return> }</block></then></if>
          <if>if<condition>( <expr><name>x</name> &gt;= <name><name>sorted</name><index>[<expr><name>b</name></expr>]</index></name></expr> )</condition><then><block>{ <return>return <expr><name>end</name></expr>;</return> }</block></then></if>

          <while>while <condition>(<expr><name>a</name> + 1 &lt; <name>b</name></expr>)</condition> <block>{
              <decl_stmt><decl><type><name>int</name></type> <name>m</name> =<init> <expr>(<name>a</name> + <name>b</name>) / 2</expr></init></decl>;</decl_stmt>
              <if>if<condition>( <expr><name>x</name> &lt; <name><name>sorted</name><index>[<expr><name>m</name></expr>]</index></name></expr> )</condition><then><block>{ <expr_stmt><expr><name>b</name> = <name>m</name></expr>;</expr_stmt> }</block></then>
              <else>else<block>{ <expr_stmt><expr><name>a</name> = <name>m</name></expr>;</expr_stmt> }</block></else></if>
          }</block></while>
          <return>return <expr><name>b</name></expr>;</return>
      }</block></then><else>else<block>{ <return>return <expr><name>start</name></expr>;</return> }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Search for the position of the given int. The vector should be sorted (high to low)
     * @param sorted Array of ints (should be sorted)
     * @param x Element to be located
     * @return The position of the given int, -1 if the given int is not in the array
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>findHigh2Low</name><parameter_list>( <param><decl><type><name><name>int</name><index>[]</index></name></type> <name>sorted</name></decl></param>, <param><decl><type><name>int</name></type> <name>x</name></decl></param> )</parameter_list><block>{
        <return>return <expr><call><name>findHigh2Low</name><argument_list>( <argument><expr><name>sorted</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>sorted</name>.<name>length</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument> )</argument_list></call></expr>;</return>
    }</block></function>
    <comment type="javadoc">/**
     * Search for the position of the given int. The vector should be sorted (high to low)
     * @param sorted Array of ints (should be sorted)
     * @param start Initial position for the searching process
     * @param end Final position (not included) for the searching process
     * @param x Element to be located
     * @return The position of the given int, -1 if the given int is not in the array
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>findHigh2Low</name><parameter_list>( <param><decl><type><name><name>int</name><index>[]</index></name></type> <name>sorted</name></decl></param>, <param><decl><type><name>int</name></type> <name>start</name></decl></param>, <param><decl><type><name>int</name></type> <name>end</name></decl></param>, <param><decl><type><name>int</name></type> <name>x</name></decl></param> )</parameter_list><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>pos</name> =<init> <expr><call><name>findRightHigh2Low</name><argument_list>( <argument><expr><name>sorted</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>x</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if<condition>( <expr><name>pos</name> &gt; <name>start</name> &amp;&amp; <name>x</name> == <name><name>sorted</name><index>[<expr><name>pos</name>-1</expr>]</index></name></expr> )</condition><then><block>{
                <expr_stmt><expr><name>pos</name>--</expr>;</expr_stmt>
        }</block></then><else>else<block>{
            <expr_stmt><expr><name>pos</name> = -1</expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><name>pos</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Search for the position of the first element in the array that is smaller
     * than the given element. The array should be sorted (high to low)
     * @param sorted Array of ints (should be sorted)
     * @param x Element to be located
     * @return Position of the first int that is smaller than the given int
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>findRightHigh2Low</name><parameter_list>(<param><decl><type><name><name>int</name><index>[]</index></name></type> <name>sorted</name></decl></param>, <param><decl><type><name>int</name></type> <name>x</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>findRightHigh2Low</name><argument_list>(<argument><expr><name>sorted</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>sorted</name>.<name>length</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Search for the position of the first element in the array that is smaller
     * than the given element. The array should be sorted (high to low)
     * @param sorted Array of ints (should be sorted)
     * @param start Initial position for the searching process
     * @param end Final position (not included) for the searching process
     * @param x Element to be located
     * @return Position of the first int that is smaller than the given int
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>findRightHigh2Low</name><parameter_list>(<param><decl><type><name><name>int</name><index>[]</index></name></type> <name>sorted</name></decl></param>, <param><decl><type><name>int</name></type> <name>start</name></decl></param>, <param><decl><type><name>int</name></type> <name>end</name></decl></param>, <param><decl><type><name>int</name></type> <name>x</name></decl></param>)</parameter_list> <block>{
      <if>if<condition>( <expr><name>end</name> &gt; <name>start</name></expr> )</condition><then><block>{
          <decl_stmt><decl><type><name>int</name></type> <name>a</name> =<init> <expr><name>start</name></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int</name></type> <name>b</name> =<init> <expr><name>end</name> - 1</expr></init></decl>;</decl_stmt>
          <if>if<condition>( <expr><name>x</name> &gt; <name><name>sorted</name><index>[<expr><name>a</name></expr>]</index></name></expr> )</condition><then><block>{ <return>return <expr><name>start</name></expr>;</return> }</block></then></if>
          <if>if<condition>( <expr><name>x</name> &lt;= <name><name>sorted</name><index>[<expr><name>b</name></expr>]</index></name></expr> )</condition><then><block>{ <return>return <expr><name>end</name></expr>;</return> }</block></then></if>

          <while>while <condition>(<expr><name>a</name> + 1 &lt; <name>b</name></expr>)</condition> <block>{
              <decl_stmt><decl><type><name>int</name></type> <name>m</name> =<init> <expr>(<name>a</name> + <name>b</name>) / 2</expr></init></decl>;</decl_stmt>
              <if>if<condition>( <expr><name>x</name> &gt; <name><name>sorted</name><index>[<expr><name>m</name></expr>]</index></name></expr> )</condition><then><block>{ <expr_stmt><expr><name>b</name> = <name>m</name></expr>;</expr_stmt> }</block></then>
              <else>else<block>{ <expr_stmt><expr><name>a</name> = <name>m</name></expr>;</expr_stmt> }</block></else></if>
          }</block></while>
          <return>return <expr><name>b</name></expr>;</return>
      }</block></then><else>else<block>{ <return>return <expr><name>start</name></expr>;</return> }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Search for the position of the last element in the array that is smaller
     * than the element given. The array should be sorted (low to high)
     * @param sorted Array of ints (should be sorted)
     * @param x Element to be located
     * @return Position of the object that is smaller than the given element
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>findLeftLow2High</name><parameter_list>(<param><decl><type><name><name>int</name><index>[]</index></name></type> <name>sorted</name></decl></param>, <param><decl><type><name>int</name></type> <name>x</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>findLeftLow2High</name><argument_list>(<argument><expr><name>sorted</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>sorted</name>.<name>length</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Search for the position of the last element in the array that is smaller
     * than the element given. The array should be sorted (low to high)
     * @param sorted Array of ints (should be sorted)
     * @param start Initial position for the searching process
     * @param end Final position (not included) for the searching process
     * @param x Element to be located
     * @return Position of the object that is smaller than the given element
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>findLeftLow2High</name><parameter_list>(<param><decl><type><name><name>int</name><index>[]</index></name></type> <name>sorted</name></decl></param>, <param><decl><type><name>int</name></type> <name>start</name></decl></param>, <param><decl><type><name>int</name></type> <name>end</name></decl></param>, <param><decl><type><name>int</name></type> <name>x</name></decl></param>)</parameter_list> <block>{
      <if>if<condition>( <expr><name>end</name> &gt; <name>start</name></expr> )</condition><then><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>a</name> =<init> <expr><name>start</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>b</name> =<init> <expr><name>end</name> - 1</expr></init></decl>;</decl_stmt>
        <if>if<condition>( <expr><name>x</name> &lt;= <name><name>sorted</name><index>[<expr><name>a</name></expr>]</index></name></expr> )</condition><then><block>{ <return>return <expr><name>start</name>-1</expr>;</return> }</block></then></if>
        <if>if<condition>( <expr><name>x</name> &gt; <name><name>sorted</name><index>[<expr><name>b</name></expr>]</index></name></expr> )</condition><then><block>{ <return>return <expr><name>end</name>-1</expr>;</return> }</block></then></if>

        <while>while <condition>(<expr><name>a</name> + 1 &lt; <name>b</name></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>m</name> =<init> <expr>(<name>a</name> + <name>b</name>) / 2</expr></init></decl>;</decl_stmt>
            <if>if<condition>( <expr><name>x</name> &lt;= <name><name>sorted</name><index>[<expr><name>m</name></expr>]</index></name></expr> )</condition><then><block>{ <expr_stmt><expr><name>b</name> = <name>m</name></expr>;</expr_stmt> }</block></then>
            <else>else<block>{ <expr_stmt><expr><name>a</name> = <name>m</name></expr>;</expr_stmt> }</block></else></if>
        }</block></while>
        <return>return <expr><name>a</name></expr>;</return>
      }</block></then><else>else<block>{ <return>return <expr><name>start</name></expr>;</return> }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Search for the position of the last element in the array that is bigger
     * than the element given. The array should be sorted (high to low)
     * @param sorted Array of ints (should be sorted)
     * @param x Element to be located
     * @return Position of the int that is smaller than the given int
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>findLeftHigh2Low</name><parameter_list>(<param><decl><type><name><name>int</name><index>[]</index></name></type> <name>sorted</name></decl></param>, <param><decl><type><name>int</name></type> <name>x</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>findLeftHigh2Low</name><argument_list>(<argument><expr><name>sorted</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>sorted</name>.<name>length</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Search for the position of the last element in the array that is bigger
     * than the element given. The array should be sorted (high to low)
     * @param sorted Array of ints (should be sorted)
     * @param start Initial position for the searching process
     * @param end Final position (not included) for the searching process
     * @param x Element to be located
     * @return Position of the int that is smaller than the given int
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>findLeftHigh2Low</name><parameter_list>(<param><decl><type><name><name>int</name><index>[]</index></name></type> <name>sorted</name></decl></param>, <param><decl><type><name>int</name></type> <name>start</name></decl></param>, <param><decl><type><name>int</name></type> <name>end</name></decl></param>, <param><decl><type><name>int</name></type> <name>x</name></decl></param>)</parameter_list> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>n</name> =<init> <expr><name><name>sorted</name>.<name>length</name></name></expr></init></decl>;</decl_stmt>
      <if>if<condition>( <expr><name>end</name> &gt; <name>start</name></expr> )</condition><then><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>a</name> =<init> <expr><name>start</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>b</name> =<init> <expr><name>end</name> - 1</expr></init></decl>;</decl_stmt>
        <if>if<condition>( <expr><name>x</name> &gt;= <name><name>sorted</name><index>[<expr><name>a</name></expr>]</index></name></expr> )</condition><then><block>{ <return>return <expr><name>start</name>-1</expr>;</return> }</block></then></if>
        <if>if<condition>( <expr><name>x</name> &lt; <name><name>sorted</name><index>[<expr><name>b</name></expr>]</index></name></expr> )</condition><then><block>{ <return>return <expr><name>end</name>-1</expr>;</return> }</block></then></if>

        <while>while <condition>(<expr><name>a</name> + 1 &lt; <name>b</name></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>m</name> =<init> <expr>(<name>a</name> + <name>b</name>) / 2</expr></init></decl>;</decl_stmt>
            <if>if<condition>( <expr><name>x</name> &gt;= <name><name>sorted</name><index>[<expr><name>m</name></expr>]</index></name></expr> )</condition><then><block>{ <expr_stmt><expr><name>b</name> = <name>m</name></expr>;</expr_stmt> }</block></then>
            <else>else<block>{ <expr_stmt><expr><name>a</name> = <name>m</name></expr>;</expr_stmt> }</block></else></if>
        }</block></while>
        <return>return <expr><name>a</name></expr>;</return>
      }</block></then><else>else<block>{ <return>return <expr><name>start</name></expr>;</return> }</block></else></if>
    }</block></function>
}</block></class></unit>
