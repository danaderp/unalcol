<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\reflect\loader\tool\PathLoader.java"><package>package <name><name>unalcol</name>.<name>reflect</name>.<name>loader</name>.<name>tool</name></name>;</package>
<import>import <name><name>unalcol</name>.<name>reflect</name>.<name>loader</name>.<name>LoaderTool</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>reflect</name>.<name>util</name>.<name>JavaOS</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name></name>.*;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Keeps Track of class files maintained in a given Path&lt;/p&gt;
 *
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 */</comment>
<class><specifier>public</specifier> class <name>PathLoader</name> <super><implements>implements <name>LoaderTool</name></implements></super><block>{
    <comment type="javadoc">/**
     * Class path
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>class_path</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Operative System
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>JavaOS</name></type> <name>javaEnv</name> =<init> <expr>new <call><name>JavaOS</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a tool for loading class files from a given path
     * @param class_path Class path
     */</comment>
    <constructor><specifier>public</specifier> <name>PathLoader</name><parameter_list>( <param><decl><type><name>String</name></type> <name>class_path</name></decl></param> )</parameter_list><block>{
        <expr_stmt><expr><name><name>this</name>.<name>class_path</name></name> = <name>class_path</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/** Loads the bytes from file
     * @param classname Name of the resource
     * @return Class bytes from the disk if possible, null otherwise.
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>byte</name><index>[]</index></type> <name>loadBytes</name><parameter_list>(<param><decl><type><name>String</name></type> <name>classname</name></decl></param>)</parameter_list><block>{
        <decl_stmt><decl><type><name>String</name></type> <name>filename</name> =<init> <expr><call><name><name>classname</name>.<name>replace</name></name><argument_list>(<argument><expr>'.'</expr></argument>, <argument><expr><call><name><name>javaEnv</name>.<name>fileSeparator</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>classFilename</name> =<init> <expr><name>filename</name> + ".class"</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>File</name></type> <name>classFile</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name>class_path</name></expr></argument>, <argument><expr><name>classFilename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>buf</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <if>if <condition>(<expr><call><name><name>classFile</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>InputStream</name></type> <name>is</name> =<init> <expr>new <call><name>FileInputStream</name><argument_list>(<argument><expr><name>classFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>bufsize</name> =<init> <expr>(<name>int</name>) <call><name><name>classFile</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>buf</name> = new <name><name>byte</name><index>[<expr><name>bufsize</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>is</name>.<name>read</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>bufsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>is</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
        }</block></catch></try>

        <return>return <expr><name>buf</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Gets the Class path
     * @return Class path
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>path</name><parameter_list>()</parameter_list><block>{
        <return>return <expr><name>class_path</name></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list><block>{}</block></function>

}</block></class></unit>
