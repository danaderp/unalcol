<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\types\integer\array\IntArray.java"><package>package <name><name>unalcol</name>.<name>types</name>.<name>integer</name>.<name>array</name></name>;</package>
<import>import <name><name>java</name>.<name>util</name></name>.*;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Set of constants and methods operating on an array of the primitive int data type,
 * for example, for inverting an array of ints&lt;/p&gt;
 *
 * &lt;p&gt;Copyright: Copyright (c) 2009&lt;/p&gt;
 * 
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 *
 */</comment>
<class><specifier>public</specifier> class <name>IntArray</name><block>{
    <comment type="javadoc">/**
     * Transforms a Vector into int array
     * @param v vector of integers to be converted
     * @return integer array
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name><index>[]</index></type> <name>get</name><parameter_list>(<param><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>v</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>n</name> =<init> <expr><call><name><name>v</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name><index>[]</index></type> <name>a</name> =<init> <expr>new <name><name>int</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name><name>v</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>a</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Reverses the given array
     * @param a Integer array to be reversed
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>invert</name><parameter_list>(<param><decl><type><name><name>int</name><index>[]</index></name></type> <name>a</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>n</name> =<init> <expr><name><name>a</name>.<name>length</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>j</name> =<init> <expr><name>n</name> - 1</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>j</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>tmp</name> =<init> <expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name> = <name>tmp</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>j</name>--</expr>;</expr_stmt>
        }</block></for>
    }</block></function>
    
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>max</name><parameter_list>(<param><decl><type><name><name>int</name><index>[]</index></name></type> <name>a</name></decl></param>)</parameter_list><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>m</name> =<init> <expr><name><name>a</name><index>[<expr>0</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for( <init><decl><type><name>int</name></type> <name>i</name>=<init><expr>1</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name><name>a</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> )<block>{
            <if>if<condition>( <expr><name>m</name> &lt; <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition><then><block>{
                <expr_stmt><expr><name>m</name> = <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <return>return <expr><name>m</name></expr>;</return>
    }</block></function>
    
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>min</name><parameter_list>(<param><decl><type><name><name>int</name><index>[]</index></name></type> <name>a</name></decl></param>)</parameter_list><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>m</name> =<init> <expr><name><name>a</name><index>[<expr>0</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for( <init><decl><type><name>int</name></type> <name>i</name>=<init><expr>1</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name><name>a</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> )<block>{
            <if>if<condition>( <expr><name>m</name> &gt; <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition><then><block>{
                <expr_stmt><expr><name>m</name> = <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <return>return <expr><name>m</name></expr>;</return>
    }</block></function>    
}</block></class>
</unit>
