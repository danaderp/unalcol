<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\reflect\service\ServiceNode.java"><package>package <name><name>unalcol</name>.<name>reflect</name>.<name>service</name></name>;</package>

<import>import <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>vector</name></name>.*;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Hashtable</name></name>;</import>

<comment type="javadoc">/**
 * &lt;p&gt;A node in the Service Hierarchy infra-structure.&lt;/p&gt;
 *
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 */</comment>
<class><specifier>public</specifier> class <name>ServiceNode</name> <block>{
    <comment type="javadoc">/**
     * The class of services this node maintains
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Class</name></type> <name>service_class</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Instances of the service class maintained by this node
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>Service</name></argument>&gt;</argument_list></name></type> <name>instances</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The collection of services sub-classes (specialized services) that has been
     * defined for the service class maintained by the node
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>ServiceNode</name></argument>&gt;</argument_list></name></type> <name>sub_classes</name> =<init> <expr>new <call><name>Vector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The collection of super classes the class maintained by this node is defining
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>ServiceNode</name></argument>&gt;</argument_list></name></type> <name>super_classes</name> =<init> <expr>new <call><name>Vector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Currently used service for the class this node is maintaining
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>Hashtable</name><argument_list>&lt;<argument><name>Object</name></argument>, <argument><name>Service</name></argument>&gt;</argument_list></name></type> <name>default_service</name> =<init> <expr>new <call><name>Hashtable</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The class of service this node will maintain
     * @param service Service class
     */</comment>
    <constructor><specifier>public</specifier> <name>ServiceNode</name><parameter_list>( <param><decl><type><name>Class</name></type> <name>service</name></decl></param> )</parameter_list><block>{
        <expr_stmt><expr><name><name>this</name>.<name>service_class</name></name> = <name>service</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>instances</name></name> = new <call><name>Vector</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try<block>{
            <decl_stmt><decl><type><name>Service</name></type> <name>instance</name> =<init> <expr>(<name>Service</name>)<call><name><name>service</name>.<name>newInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>instances</name>.<name>add</name></name><argument_list>(<argument><expr><name>instance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block><catch>catch( <param><decl><type><name>Exception</name></type> <name>e</name></decl></param> )<block>{
        }</block></catch></try>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>add</name><parameter_list>( <param><decl><type><name>Service</name></type> <name>s</name></decl></param> )</parameter_list><block>{
        <if>if<condition>( <expr><call><name>defaultService</name><argument_list>(<argument><expr><call><name><name>s</name>.<name>owner</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> == <name>null</name></expr> )</condition><then><block>{
            <expr_stmt><expr><call><name>setDefaultService</name><argument_list>(<argument><expr><call><name><name>s</name>.<name>owner</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><call><name><name>instances</name>.<name>add</name></name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>add</name><parameter_list>( <param><decl><type><name>ServiceNode</name></type> <name>s_node</name></decl></param> )</parameter_list><block>{
        <expr_stmt><expr><call><name><name>s_node</name>.<name>super_classes</name>.<name>add</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>sub_classes</name>.<name>add</name></name><argument_list>( <argument><expr><name>s_node</name></expr></argument> )</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>ServiceNode</name></type> <name>locate</name><parameter_list>( <param><decl><type><name>Class</name></type> <name>service</name></decl></param> )</parameter_list><block>{
        <if>if<condition>( <expr><name><name>this</name>.<name>service_class</name></name> != <name>service</name></expr> )</condition><then><block>{
            <decl_stmt><decl><type><name>int</name></type> <name>k</name>=<init><expr>0</expr></init></decl>;</decl_stmt>
            <while>while<condition>( <expr><name>k</name>&lt;<call><name><name>sub_classes</name>.<name>size</name></name><argument_list>()</argument_list></call> &amp;&amp;
                   !<call><name><name>sub_classes</name>.<name>get</name></name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call>.<call><name><name>service_class</name>.<name>isAssignableFrom</name></name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr> )</condition><block>{
                <expr_stmt><expr><name>k</name>++</expr>;</expr_stmt>
            }</block></while>
            <if>if<condition>( <expr><name>k</name> &lt; <call><name><name>sub_classes</name>.<name>size</name></name><argument_list>()</argument_list></call></expr> )</condition><then><block>{
                <return>return <expr><call><name><name>sub_classes</name>.<name>get</name></name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call>.<call><name>locate</name><argument_list>( <argument><expr><name>service</name></expr></argument> )</argument_list></call></expr>;</return>
            }</block></then><else>else<block>{
                <return>return <expr><name>null</name></expr>;</return>
            }</block></else></if>
        }</block></then><else>else<block>{
            <return>return <expr><name>this</name></expr>;</return>
        }</block></else></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>canUse</name><parameter_list>( <param><decl><type><name>Service</name></type> <name>service</name></decl></param>, <param><decl><type><name>Class</name></type> <name>owner</name></decl></param> )</parameter_list><block>{
        <return>return <expr><name>owner</name> != <name>null</name> &amp;&amp;
               ( <call><name><name>service</name>.<name>owner</name></name><argument_list>()</argument_list></call> == <name>owner</name> ||
                 <call><name>canUse</name><argument_list>( <argument><expr><name>service</name></expr></argument>, <argument><expr><call><name><name>owner</name>.<name>getSuperclass</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call> )</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>canUse</name><parameter_list>( <param><decl><type><name>Service</name></type> <name>service</name></decl></param>, <param><decl><type><name>Object</name></type> <name>owner</name></decl></param> )</parameter_list><block>{
        <return>return <expr><name>owner</name> != <name>null</name> &amp;&amp;
               ( <call><name><name>service</name>.<name>owner</name></name><argument_list>()</argument_list></call> == <name>owner</name> ||
                 <call><name>canUse</name><argument_list>( <argument><expr><name>service</name></expr></argument>, <argument><expr><call><name><name>owner</name>.<name>getClass</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call> )</expr>;</return>
    }</block></function>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>available_services</name><parameter_list>( <param><decl><type><name>Object</name></type> <name>owner</name></decl></param>, <param><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>Service</name></argument>&gt;</argument_list></name></type> <name>collection</name></decl></param> )</parameter_list><block>{
        <for>for( <init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<call><name><name>instances</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> )<block>{
            <if>if<condition>( <expr><call><name>canUse</name><argument_list>( <argument><expr><call><name><name>instances</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>owner</name></expr></argument> )</argument_list></call></expr> )</condition><then><block>{
                <expr_stmt><expr><call><name><name>collection</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>instances</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <for>for( <init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<call><name><name>sub_classes</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> )<block>{
           <expr_stmt><expr><call><name><name>sub_classes</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>.<call><name>available_services</name><argument_list>(<argument><expr><name>owner</name></expr></argument>, <argument><expr><name>collection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><type><specifier>protected</specifier> <name>Service</name><index>[]</index></type> <name>convert</name><parameter_list>( <param><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>Service</name></argument>&gt;</argument_list></name></type> <name>col</name></decl></param> )</parameter_list><block>{
        <decl_stmt><decl><type><name>Service</name><index>[]</index></type> <name>scol</name> =<init> <expr>new <name><name>Service</name><index>[<expr><call><name><name>col</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for( <init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<call><name><name>col</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> )<block>{
            <expr_stmt><expr><name><name>scol</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name><name>col</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name><name>col</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>scol</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>Service</name><index>[]</index></type> <name>available_services</name><parameter_list>( <param><decl><type><name>Object</name></type> <name>owner</name></decl></param> )</parameter_list><block>{
        <decl_stmt><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>Service</name></argument>&gt;</argument_list></name></type> <name>col</name> =<init> <expr>new <call><name>Vector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>available_services</name><argument_list>(<argument><expr><name>owner</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>convert</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>owned_services</name><parameter_list>( <param><decl><type><name>Object</name></type> <name>owner</name></decl></param>, <param><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>Service</name></argument>&gt;</argument_list></name></type> <name>collection</name></decl></param> )</parameter_list><block>{
        <for>for( <init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<call><name><name>instances</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> )<block>{
            <if>if<condition>( <expr><call><name><name>instances</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>.<call><name>owner</name><argument_list>()</argument_list></call> == <name>owner</name></expr> )</condition><then><block>{
                <expr_stmt><expr><call><name><name>collection</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>instances</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <for>for( <init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<call><name><name>sub_classes</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> )<block>{
           <expr_stmt><expr><call><name><name>sub_classes</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>.<call><name>owned_services</name><argument_list>(<argument><expr><name>owner</name></expr></argument>, <argument><expr><name>collection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><type><specifier>public</specifier> <name>Service</name><index>[]</index></type> <name>owned_services</name><parameter_list>( <param><decl><type><name>Object</name></type> <name>owner</name></decl></param> )</parameter_list><block>{
        <decl_stmt><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>Service</name></argument>&gt;</argument_list></name></type> <name>col</name> =<init> <expr>new <call><name>Vector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>owned_services</name><argument_list>(<argument><expr><name>owner</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>convert</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>remove_owned_service</name><parameter_list>( <param><decl><type><name>Object</name></type> <name>owner</name></decl></param>, <param><decl><type><name>Service</name></type> <name>service</name></decl></param> )</parameter_list><block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>flag</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</decl_stmt>
        <while>while<condition>( <expr><name>i</name>&lt;<call><name><name>instances</name>.<name>size</name></name><argument_list>()</argument_list></call></expr> )</condition><block>{
            <if>if<condition>( <expr><call><name><name>instances</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>.<call><name>owner</name><argument_list>()</argument_list></call> == <name>owner</name> &amp;&amp; <call><name><name>instances</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> == <name>service</name></expr> )</condition><then><block>{
                <expr_stmt><expr><call><name><name>instances</name>.<name>remove</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                
                <expr_stmt><expr><name>flag</name> = true</expr>;</expr_stmt>
            }</block></then><else>else<block>{
                <expr_stmt><expr><name>i</name>++</expr>;</expr_stmt>
            }</block></else></if>
        }</block></while>
        <for>for( <init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;<call><name><name>sub_classes</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> )<block>{
           <expr_stmt><expr><name>flag</name> |= <call><name><name>sub_classes</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>.<call><name>remove_owned_service</name><argument_list>(<argument><expr><name>owner</name></expr></argument>, <argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>flag</name></expr>;</return>
    }</block></function>


    <function><type><specifier>public</specifier> <name>Service</name></type> <name>defaultService</name><parameter_list>( <param><decl><type><name>Object</name></type> <name>owner</name></decl></param> )</parameter_list><block>{
        <decl_stmt><decl><type><name>Service</name></type> <name>s</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if<condition>( <expr><name>owner</name> != <name>null</name></expr> )</condition><then><block>{
            <expr_stmt><expr><name>s</name> = <call><name><name>default_service</name>.<name>get</name></name><argument_list>(<argument><expr><name>owner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>( <expr><name>s</name> == <name>null</name></expr> )</condition><then><block>{
                <if>if<condition>( <expr><name><name>Class</name>.<name><name/></name></name>class.<call><name>isInstance</name><argument_list>(<argument><expr><name>owner</name></expr></argument>)</argument_list></call></expr> )</condition><then><block>{
                    <decl_stmt><decl><type><name>Class</name></type> <name>own</name> =<init> <expr>(<name>Class</name>)<name>owner</name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>s</name> = <call><name>defaultService</name><argument_list>(<argument><expr><call><name><name>own</name>.<name>getSuperclass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>Class</name><index>[]</index></type> <name>super_interfaces</name> =<init> <expr><call><name><name>own</name>.<name>getInterfaces</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <while>while<condition>( <expr><name>i</name>&lt;<name><name>super_interfaces</name>.<name>length</name></name> &amp;&amp; <name>s</name> == <name>null</name></expr> )</condition><block>{
                        <expr_stmt><expr><name>s</name> = <call><name>defaultService</name><argument_list>(<argument><expr><name><name>super_interfaces</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>i</name>++</expr>;</expr_stmt>
                    }</block></while>
                }</block></then><else>else<block>{
                    <expr_stmt><expr><name>s</name> = <call><name>defaultService</name><argument_list>(<argument><expr><call><name><name>owner</name>.<name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then></if>
        }</block></then></if>
        <return>return <expr><name>s</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>Service</name></type> <name>setDefaultService</name><parameter_list>( <param><decl><type><name>Object</name></type> <name>owner</name></decl></param>, <param><decl><type><name>Service</name></type> <name>service</name></decl></param> )</parameter_list><block>{
        <decl_stmt><decl><type><name>Service</name></type> <name>old</name> =<init> <expr><call><name><name>default_service</name>.<name>put</name></name><argument_list>(<argument><expr><name>owner</name></expr></argument>, <argument><expr><name>service</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for( <init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<call><name><name>super_classes</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{
            <expr_stmt><expr><call><name><name>super_classes</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>.<call><name>setDefaultService</name><argument_list>(<argument><expr><name>owner</name></expr></argument>, <argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>old</name></expr>;</return>
    }</block></function>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>serviceClasses</name><parameter_list>( <param><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>Class</name></argument>&gt;</argument_list></name></type> <name>classes</name></decl></param> )</parameter_list><block>{
        <expr_stmt><expr><call><name><name>classes</name>.<name>add</name></name><argument_list>(<argument><expr><name>service_class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for( <init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<call><name><name>sub_classes</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> )<block>{
            <expr_stmt><expr><call><name><name>sub_classes</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>.<call><name>serviceClasses</name><argument_list>(<argument><expr><name>classes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><type><specifier>public</specifier> <name>Class</name><index>[]</index></type> <name>serviceClases</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>Class</name></argument>&gt;</argument_list></name></type> <name>classes</name> =<init> <expr>new <call><name>Vector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>serviceClasses</name></name><argument_list>(<argument><expr><name>classes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Class</name><index>[]</index></type> <name>array</name> =<init> <expr>new <name><name>Class</name><index>[<expr><call><name><name>classes</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for( <init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<call><name><name>classes</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{
            <expr_stmt><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name><name>classes</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>array</name></expr>;</return>
    }</block></function>
}</block></class></unit>
