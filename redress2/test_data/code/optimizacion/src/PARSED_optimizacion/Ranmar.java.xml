<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\random\rngpack\Ranmar.java"><package>package <name><name>unalcol</name>.<name>random</name>.<name>rngpack</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name></name>.*;</import>

<import>import <name><name>unalcol</name>.<name>random</name>.<name>raw</name></name>.*;</import>

<comment type="line">//</comment>
<comment type="line">// RngPack 1.1a by Paul Houle</comment>
<comment type="line">// http://www.honeylocust.com/RngPack/</comment>
<comment type="line">//</comment>

<comment type="javadoc">/**
 *
 * &lt;TT&gt;RANMAR&lt;/TT&gt; is a lagged Fibonacci generator proposed by Marsaglia and
 * Zaman and is a good research grade generator.  This version of
 * &lt;TT&gt;RANMAR&lt;/TT&gt; is based on the paper by James,  which is a good
 * reference for the properties of &lt;TT&gt;RANMAR&lt;/TT&gt; and several other
 * generators.
 *
 * &lt;BR&gt;
 * &lt;B&gt;REFERENCES:&lt;/B&gt;
 * &lt;BR&gt;
 * F. James, &lt;CITE&gt;Comp. Phys. Comm.&lt;/CITE&gt; &lt;STRONG&gt;60&lt;/STRONG&gt; (1990) p 329-344
 * &lt;BR&gt;
 * and was originally described in
 * &lt;BR&gt;
 * G. Marsaglia, A. Zaman and W.-W Tsang, &lt;CITE&gt;Stat. Prob. Lett&lt;/CITE&gt; &lt;STRONG&gt;9&lt;/STRONG&gt; (1990) p 35.
 *
 *
 * &lt;P&gt;
 * This code is a unified (modified) version of the Ranlux
 * &lt;A HREF="/RngPack/src/edu/cornell/lassp/houle/RngPack/Ranmar.java"&gt; source code&lt;/A&gt;
 * from RngPack 1.1a by Paul Houle
 *
 * @author &lt;A HREF="http://www.honeylocust.com/"&gt; Paul Houle &lt;/A&gt;
 * (E-mail: &lt;A HREF="mailto:paul@honeylocust.com"&gt;paul@honeylocust.com&lt;/A&gt;)
 * Modified by &lt;A HREF="http://dis.unal.edu.co/~jgomez"&gt; Jonatan Gomez &lt;/A&gt;
 * (E-mail: &lt;A HREF="mailto:jgomezpe@unal.edu.co"&gt;jgomezpe@unal.edu.co&lt;/A&gt; )
 * @version 1.0
 */</comment>


<class><specifier>public</specifier> class <name>Ranmar</name> <super><extends>extends <name>SeedableGenerator</name></extends></super> <block>{

    <decl_stmt><decl><type><name>double</name></type> <name>c</name>, <name>cd</name>, <name>cm</name>, <name><name>u</name><index>[]</index></name>, <name><name>uvec</name><index>[]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i97</name>, <name>j97</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Default seed.  &lt;CODE&gt;DEFSEED=54217137&lt;/CODE&gt;
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>DEFSEED</name> =<init> <expr>54217137</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The 46,009,220nd prime number,
     * he largest prime less than 9*10&lt;SUP&gt;8&lt;/SUP&gt;.  Used as a modulus
     * because this version of &lt;TT&gt;RANMAR&lt;/TT&gt; needs a seed between 0
     * and 9*10&lt;SUP&gt;8&lt;/SUP&gt; and &lt;CODE&gt;BIG_PRIME&lt;/CODE&gt; isn't commensurate
     * with any regular period.
     * &lt;CODE&gt;BIG_PRIME= 899999963&lt;/CODE&gt;
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>BIG_PRIME</name> =<init> <expr>899999963</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     *
     * Initialize Ranmar with a specified integer seed
     *
     * @param ijkl seed integer;  &lt;TT&gt;Ranmar(int ijkl)&lt;/TT&gt; takes uses
     * &lt;TT&gt;ijkl&lt;/TT&gt; modulus &lt;TT&gt;BIG_PRIME&lt;/TT&gt; as a seed for &lt;TT&gt;RANMAR.&lt;/TT&gt;
     *
     */</comment>

    <constructor><specifier>public</specifier> <name>Ranmar</name><parameter_list>(<param><decl><type><name>int</name></type> <name>ijkl</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>ranmarin</name><argument_list>(<argument><expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>ijkl</name> % <name>BIG_PRIME</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor><empty_stmt>;</empty_stmt>

    <comment type="javadoc">/**
     *
     * Initialize Ranmar with a specified long seed
     *
     * @param ijkl seed long;  &lt;TT&gt;Ranmar(long ijkl)&lt;/TT&gt; takes uses
     * &lt;TT&gt;ijkl&lt;/TT&gt; modulus &lt;TT&gt;BIG_PRIME&lt;/TT&gt; as a seed for &lt;TT&gt;RANMAR.&lt;/TT&gt;
     *
     */</comment>

    <constructor><specifier>public</specifier> <name>Ranmar</name><parameter_list>(<param><decl><type><name>long</name></type> <name>ijkl</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>ranmarin</name><argument_list>(<argument><expr>(<name>int</name>) <call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>ijkl</name> % <name>BIG_PRIME</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor><empty_stmt>;</empty_stmt>


    <comment type="javadoc">/**
     *
     * Initialize Ranmar with a default seed taken from Marsaglia and
     * Zaman's paper.  Equivalent to &lt;CODE&gt;Ranmar(54217137).&lt;/CODE&gt;
     *
     */</comment>

    <constructor><specifier>public</specifier> <name>Ranmar</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>ranmarin</name><argument_list>(<argument><expr><name>DEFSEED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor><empty_stmt>;</empty_stmt>

    <comment type="javadoc">/**
     *
     * Seed &lt;TT&gt;RANMAR&lt;/TT&gt; from the clock.
     *
     * &lt;PRE&gt;
     * RandomElement e=new Ranmar(new Date());
     * &lt;/PRE&gt;
     *
     * @param d a Date object to seed Ranmar with,  typically &lt;CODE&gt;new Date()&lt;/CODE&gt;
     *
     */</comment>

    <constructor><specifier>public</specifier> <name>Ranmar</name><parameter_list>(<param><decl><type><name>Date</name></type> <name>d</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ranmarin</name><argument_list>(<argument><expr>(<name>int</name>) <name>seed</name> % <name>BIG_PRIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor><empty_stmt>;</empty_stmt>

    <comment type="javadoc">/**
     *
     * Internal methods:  ranmarin is the initialization code for the
     * generator.
     *
     */</comment>

    <function><type><name>void</name></type> <name>ranmarin</name><parameter_list>(<param><decl><type><name>int</name></type> <name>ijkl</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>int</name></type> <name>ij</name>, <name>kl</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name>, <name>ii</name>, <name>j</name>, <name>jj</name>, <name>k</name>, <name>l</name>, <name>m</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>s</name>, <name>t</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>u</name> = new <name><name>double</name><index>[<expr>97</expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>uvec</name> = new <name><name>double</name><index>[<expr>97</expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt><expr><name>ij</name> = <name>ijkl</name> / 30082</expr>;</expr_stmt>
        <expr_stmt><expr><name>kl</name> = <name>ijkl</name> - 30082 * <name>ij</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>i</name> = ((<name>ij</name> / 177) % 177) + 2</expr>;</expr_stmt>
        <expr_stmt><expr><name>j</name> = (<name>ij</name> % 177) + 2</expr>;</expr_stmt>
        <expr_stmt><expr><name>k</name> = ((<name>kl</name> / 169) % 178) + 1</expr>;</expr_stmt>
        <expr_stmt><expr><name>l</name> = <name>kl</name> % 169</expr>;</expr_stmt>
        <for>for (<init><expr><name>ii</name> = 0</expr>;</init> <condition><expr><name>ii</name> &lt; 97</expr>;</condition> <incr><expr><name>ii</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>s</name> = 0.0</expr>;</expr_stmt>
            <expr_stmt><expr><name>t</name> = 0.5</expr>;</expr_stmt>
            <for>for (<init><expr><name>jj</name> = 0</expr>;</init> <condition><expr><name>jj</name> &lt; 24</expr>;</condition> <incr><expr><name>jj</name>++</expr></incr>) <block>{
                <expr_stmt><expr><name>m</name> = (((<name>i</name> * <name>j</name>) % 179) * <name>k</name>) % 179</expr>;</expr_stmt>
                <expr_stmt><expr><name>i</name> = <name>j</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>j</name> = <name>k</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>k</name> = <name>m</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>l</name> = (53 * <name>l</name> + 1) % 169</expr>;</expr_stmt>
                <if>if <condition>(<expr>((<name>l</name> * <name>m</name>) % 64) &gt;= 32</expr>)</condition><then> <expr_stmt><expr><name>s</name> += <name>t</name></expr>;</expr_stmt></then></if>
                <expr_stmt><expr><name>t</name> *= 0.5</expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><name><name>u</name><index>[<expr><name>ii</name></expr>]</index></name> = <name>s</name></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><name>c</name> = 362436.0 / 16777216.0</expr>;</expr_stmt>
        <expr_stmt><expr><name>cd</name> = 7654321.0 / 16777216.0</expr>;</expr_stmt>
        <expr_stmt><expr><name>cm</name> = 16777213.0 / 16777216.0</expr>;</expr_stmt>
        <expr_stmt><expr><name>i97</name> = 96</expr>;</expr_stmt>
        <expr_stmt><expr><name>j97</name> = 32</expr>;</expr_stmt>

    }</block></function>

    <comment type="javadoc">/**
     * The generator
     * @return a pseudo random number
     */</comment>

    <function><type><specifier>public</specifier> <name>double</name></type> <name>next</name><parameter_list>()</parameter_list> <block>{

        <decl_stmt><decl><type><name>double</name></type> <name>uni</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>uni</name> = <name><name>u</name><index>[<expr><name>i97</name></expr>]</index></name> - <name><name>u</name><index>[<expr><name>j97</name></expr>]</index></name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>uni</name> &lt; 0.0</expr>)</condition><then> <expr_stmt><expr><name>uni</name> += 1.0</expr>;</expr_stmt></then></if>
        <expr_stmt><expr><name><name>u</name><index>[<expr><name>i97</name></expr>]</index></name> = <name>uni</name></expr>;</expr_stmt>
        <if>if <condition>(<expr>--<name>i97</name> &lt; 0</expr>)</condition><then> <expr_stmt><expr><name>i97</name> = 96</expr>;</expr_stmt></then></if>
        <if>if <condition>(<expr>--<name>j97</name> &lt; 0</expr>)</condition><then> <expr_stmt><expr><name>j97</name> = 96</expr>;</expr_stmt></then></if>
        <expr_stmt><expr><name>c</name> -= <name>cd</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>c</name> &lt; 0.0</expr>)</condition><then> <expr_stmt><expr><name>c</name> += <name>cm</name></expr>;</expr_stmt></then></if>
        <expr_stmt><expr><name>uni</name> -= <name>c</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>uni</name> &lt; 0.0</expr>)</condition><then> <expr_stmt><expr><name>uni</name> += 1.0</expr>;</expr_stmt></then></if>
        <return>return <expr>(<name>uni</name>)</expr>;</return>
    }</block></function>
    
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>( <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></param> )</parameter_list><block>{
        <decl_stmt><decl><type><name>long</name></type>  <name>i</name> =<init> <expr>1</expr></init></decl>;</decl_stmt>
        <while>while<condition>( <expr><name>i</name>!=0</expr> )</condition><block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>( <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>i</name> &lt;&lt;= 1</expr>;</expr_stmt>
        }</block></while>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>RawGenerator</name></type> <name>new_instance</name><parameter_list>()</parameter_list><block>{
        <return>return <expr>new <call><name>Ranmar</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
    
}</block></class>
</unit>
