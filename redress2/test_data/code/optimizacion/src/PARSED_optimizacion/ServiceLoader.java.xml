<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\reflect\service\ServiceLoader.java"><package>package <name><name>unalcol</name>.<name>reflect</name>.<name>service</name></name>;</package>
<import>import <name><name>unalcol</name>.<name>reflect</name>.<name>loader</name>.<name>tool</name>.<name>JarLoader</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>reflect</name>.<name>loader</name>.<name>Loader</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>reflect</name>.<name>util</name></name>.*;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>zip</name>.<name>ZipFile</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>zip</name>.<name>ZipEntry</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Loads service from the current Class Loader (looking throught 
 * paths, jars, etc)&lt;/p&gt;
 *
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 */</comment>
<class><specifier>public</specifier> class <name>ServiceLoader</name> <block>{

    <comment type="javadoc">/**
     * Class Loader
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Loader</name></type> <name>loader</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The service hierarchy infra-structure
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>ServiceProvider</name></type> <name>provider</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ServiceLoader</name><parameter_list>( <param><decl><type><name>Loader</name></type> <name>loader</name></decl></param>, <param><decl><type><name>ServiceProvider</name></type> <name>provider</name></decl></param> )</parameter_list><block>{
        <expr_stmt><expr><name><name>this</name>.<name>loader</name></name> = <name>loader</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>provider</name></name> = <name>provider</name></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>ServiceLoader</name><parameter_list>( <param><decl><type><name>Loader</name></type> <name>loader</name></decl></param> )</parameter_list><block>{
        <expr_stmt><expr><name><name>this</name>.<name>loader</name></name> = <name>loader</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>provider</name></name> = new <call><name>ServiceProvider</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returs the ClassLoader used by the PlugInProvider
     * @return ClassLoader used by the PlugInProvider
     */</comment>
    <function><type><specifier>public</specifier> <name>Loader</name></type> <name>loader</name><parameter_list>()</parameter_list><block>{
        <return>return <expr><name>loader</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>ServiceProvider</name></type> <name>provider</name><parameter_list>()</parameter_list><block>{
        <return>return <expr><name>provider</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Loads the plugIns inside source and class paths
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>load</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>paths</name> =<init> <expr><call><name><name>loader</name>.<name>systemClassPath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for( <init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name><name>paths</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> )<block>{
            <expr_stmt><expr><call><name>load</name><argument_list>( <argument><expr><name><name>paths</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>paths</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <if>if<condition>( <expr><call><name><name>loader</name>.<name>usingPlugInPaths</name></name><argument_list>()</argument_list></call></expr> )</condition><then><block>{
            <decl_stmt><decl><type><name>String</name></type> <name>source_path</name> =<init> <expr><call><name><name>loader</name>.<name>sourcePath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>class_path</name> =<init> <expr><call><name><name>loader</name>.<name>classPath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>load</name><argument_list>( <argument><expr><name>source_path</name></expr></argument>, <argument><expr><name>source_path</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<call><name><name>source_path</name>.<name>equals</name></name><argument_list>(<argument><expr><name>class_path</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>load</name><argument_list>( <argument><expr><name>class_path</name></expr></argument>, <argument><expr><name>class_path</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name>loadFromJars</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a plugIn to the associated PlugInProvider if possible
     * @param result Candidate PlugIn to be included by the PlugInProvider
     * @return &lt;i&gt;true&lt;/i&gt; if the given class represents a PlugIn that can be
     * associated to the given PlugInProvider and it was succesfully included in the Provider,
     * &lt;i&gt;false&lt;/i&gt; otherwise
     */</comment>
    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>add</name><parameter_list>(<param><decl><type><name>Class</name></type> <name>result</name></decl></param>)</parameter_list> <block>{
        <try>try <block>{
            <if>if<condition>(<expr><call><name>getClass</name><argument_list>()</argument_list></call> != <name>result</name> &amp;&amp; <call><name><name>provider</name>.<name>register</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr> )</condition><then><block>{
                <return>return <expr>true</expr>;</return>
            }</block></then></if>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
        }</block></catch></try>
        <return>return <expr>false</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Adds the given class to the PlugIn Provider as PlugIn if possible
     * @param className Class representing a PlugIn that should be added to the PlugIn Provider
     * @return &lt;i&gt;true&lt;/i&gt; if the given class represents a PlugIn that can be
     * associated to the given PlugInProvider and it was succesfully included in the Provider,
     * &lt;i&gt;false&lt;/i&gt; otherwise
     */</comment>
    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>add</name><parameter_list>( <param><decl><type><name>String</name></type> <name>className</name></decl></param> )</parameter_list><block>{
        <try>try <block>{
            <decl_stmt><decl><type><name>Class</name></type> <name>result</name> =<init> <expr><call><name><name>loader</name>.<name>loadClass</name></name><argument_list>(<argument><expr><name>className</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>result</name> != <name>null</name></expr>)</condition><then> <block>{
                <return>return <expr><call><name>add</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
        }</block></catch></try>

        <return>return <expr>false</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a jar file to the resources
     * @param f Jar file to be added
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>File</name></type> <name>f</name></decl></param>)</parameter_list> <block>{
        <try>try <block>{
            <decl_stmt><decl><type><name>ZipFile</name></type> <name>jarFile</name> =<init> <expr>new <call><name>ZipFile</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Enumeration</name></type> <name>entries</name> =<init> <expr><call><name><name>jarFile</name>.<name>entries</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>entries</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <decl_stmt><decl><type><name>ZipEntry</name></type> <name>entry</name> =<init> <expr>(<name>ZipEntry</name>) <call><name><name>entries</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>entry</name>.<name>getName</name></name><argument_list>()</argument_list></call>.<call><name>endsWith</name><argument_list>(<argument><expr>".class"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>String</name></type> <name>className</name> =<init> <expr><call><name><name>entry</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>className</name> = <call><name><name>className</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>,
                            <argument><expr><call><name><name>className</name>.<name>length</name></name><argument_list>()</argument_list></call> - 6</expr></argument>)</argument_list></call>.<call><name>replace</name><argument_list>(<argument><expr>'/'</expr></argument>,
                            <argument><expr>'.'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>add</name><argument_list>( <argument><expr><name>className</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></while>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{}</block></catch> <finally>finally <block>{
        }</block></finally></try>
    }</block></function>

    <comment type="javadoc">/**
     * Loads the services defined in the source and class paths
     * @param path (Source/Class) path being analized
     * @param rootPath Root path in the recursive process
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>load</name><parameter_list>(<param><decl><type><name>String</name></type> <name>path</name></decl></param>, <param><decl><type><name>String</name></type> <name>rootPath</name></decl></param>)</parameter_list> <block>{
        <comment type="line">//find all JAR files on the path and subdirectories</comment>
        <decl_stmt><decl><type><name>File</name></type> <name>f</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>list</name> =<init> <expr><call><name><name>f</name>.<name>list</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>list</name> == <name>null</name></expr>)</condition><then>
            <return>return;</return></then></if>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>list</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>f</name> = new <call><name>File</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name><name>f</name>.<name>isFile</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>load</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>rootPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <if>if <condition>(<expr><call><name><name>f</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>load</name><argument_list>(<argument><expr><call><name><name>f</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>rootPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></else></if>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Loads the plugIns represented by the given file
     * @param f File representing a PlugIn
     * @param path Source/class path
     * @param rootPath Root path in the recursive process
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>load</name><parameter_list>( <param><decl><type><name>File</name></type> <name>f</name></decl></param>, <param><decl><type><name>String</name></type> <name>path</name></decl></param>, <param><decl><type><name>String</name></type> <name>rootPath</name></decl></param> )</parameter_list><block>{
        <if>if <condition>(<expr><call><name><name>f</name>.<name>getName</name></name><argument_list>()</argument_list></call>.<call><name>endsWith</name><argument_list>(<argument><expr>".class"</expr></argument>)</argument_list></call> || <call><name><name>f</name>.<name>getName</name></name><argument_list>()</argument_list></call>.<call><name>endsWith</name><argument_list>(<argument><expr>".java"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>classname</name> =<init> <expr><call><name><name>f</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>classname</name> = <call><name><name>classname</name>.<name>substring</name></name><argument_list>(<argument><expr><call><name><name>rootPath</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>classname</name> = <call><name><name>classname</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>,<argument><expr><call><name><name>classname</name>.<name>lastIndexOf</name></name><argument_list>(<argument><expr>'.'</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>classname</name> = <call><name><name>classname</name>.<name>replace</name></name><argument_list>(<argument><expr><call><name><name>JavaOS</name>.<name>fileSeparator</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>'.'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>( <expr><call><name><name>classname</name>.<name>charAt</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call> == '.'</expr> )</condition><then><block>{
                <expr_stmt><expr><name>classname</name> = <call><name><name>classname</name>.<name>substring</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>classname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Loads the jar files from the libraries path
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>loadFromJars</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>JarLoader</name><index>[]</index></type> <name>jarFiles</name> =<init> <expr><call><name><name>loader</name>.<name>jarFiles</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>n</name> =<init> <expr><name><name>jarFiles</name>.<name>length</name></name></expr></init></decl>;</decl_stmt>
        <for>for( <init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> )<block>{
           <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name><name>jarFiles</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>file</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>
}</block></class></unit>
