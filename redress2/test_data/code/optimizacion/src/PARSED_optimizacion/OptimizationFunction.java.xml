<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\optimization\OptimizationFunction.java"><package>package <name><name>unalcol</name>.<name>optimization</name></name>;</package>
<import>import <name><name>unalcol</name>.<name>algorithm</name>.<name>Algorithm</name></name>;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Title: OptimizationFunction&lt;/p&gt;
 *
 * &lt;p&gt;Description: Abstract definition of an optimization function. An optimization function
 * is a map f:T -&gt; R  where T is any set and R is the real numbers set.&lt;/p&gt;
 *
 * &lt;p&gt;Copyright: Copyright (c) 2010&lt;/p&gt;
 *
 * &lt;p&gt;Company: Kunsamu&lt;/p&gt;
 *
 * @author Jonatan Gomez
 * @version 1.0
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name><name>OptimizationFunction</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name> <super><extends>extends <name><name>Algorithm</name><argument_list>&lt;<argument><name>T</name></argument>,<argument><name>Double</name></argument>&gt;</argument_list></name></extends></super><block>{
    <comment type="javadoc">/**
     * Determines if the fitness function is non-stationary, i.e., the value of
     * the function for a given value can change in time. It will help the optimizer
     * to evaluate the fitness function whenever is required
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>nonStationary</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Determines if the fitness function is stationary or not, i.e.,
     * if the value of the function for a given value can change in time (non-stationary) 
     * or not (stationary)
     * @return true if the fitness function is not stationary, false if it is stationary
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isNonStationary</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><name>nonStationary</name></expr>;</return> }</block></function>

    <comment type="javadoc">/**
     * Makes the optimization function to be non stationary, i.e., the value of
     * the function for a given value can change in time.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>makeNonStationary</name><parameter_list>()</parameter_list><block>{
        <expr_stmt><expr><name>nonStationary</name> = true</expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Makes the optimization function to be stationary, i.e., the value of
     * the function for a given value cannot change in time.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>makeStationary</name><parameter_list>()</parameter_list><block>{
        <expr_stmt><expr><name>nonStationary</name> = false</expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/** Updates the fitness function if it is nonstationary
     * @param k Current iteration of the optimizer
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>update</name><parameter_list>( <param><decl><type><name>int</name></type> <name>k</name></decl></param> )</parameter_list><block>{}</block></function>
}</block></class></unit>
