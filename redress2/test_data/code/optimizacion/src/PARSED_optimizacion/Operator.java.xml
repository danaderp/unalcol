<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\optimization\operators\Operator.java"><package>package <name><name>unalcol</name>.<name>optimization</name>.<name>operators</name></name>;</package>
<import>import <name><name>unalcol</name>.<name>reflect</name>.<name>service</name>.<name>Service</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>algorithm</name></name>.*;</import>
<import>import <name><name>unalcol</name>.<name>optimization</name>.<name>generation</name>.<name>RepairProvider</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>vector</name></name>.*;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Title: Operator&lt;/p&gt;
 * &lt;p&gt;Description: An abstract version of a genetic operator. A genetic operator
 * uses a collection (Vector) of genomes for producing a collection (Vector) of genomes &lt;/p&gt;
 * &lt;p&gt;Copyright: Copyright (c) 2010&lt;/p&gt;
 * @author Jonatan Gomez
 * @version 1.0
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name><name>Operator</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name> <super><extends>extends <name><name>ThreadFunction</name><argument_list>&lt;<argument><name><name>Vector</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>,<argument><name><name>Vector</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></extends>
        <implements>implements <name>Service</name></implements></super><block>{
  <comment type="javadoc">/**
   * Return the genetic operator arity (number of genomes required by the genetic
   * operator for producing new genomes
   * @return the genetic operator arity
   */</comment>
  <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>int</name></type> <name>getArity</name><parameter_list>()</parameter_list>;</function_decl>

  <function><type><specifier>public</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>apply</name><parameter_list>(<param><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>pop</name></decl></param>)</parameter_list><block>{
      <expr_stmt><expr><name>pop</name> = <call><name>generates</name><argument_list>(<argument><expr><name>pop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for( <init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<call><name><name>pop</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> )<block>{
        <expr_stmt><expr><call><name><name>pop</name>.<name>set</name></name><argument_list>( <argument><expr><name>i</name></expr></argument>, <argument><expr>(<name>T</name>)<call><name><name>RepairProvider</name>.<name>repair</name></name><argument_list>(<argument><expr><call><name><name>pop</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      }</block></for> 
      <return>return <expr><name>pop</name></expr>;</return>
  }</block></function>
  
  <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>generates</name><parameter_list>(<param><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>pop</name></decl></param>)</parameter_list>;</function_decl>
  
  <function><type><specifier>public</specifier> <name>Class</name></type> <name>base</name><parameter_list>()</parameter_list><block>{ <return>return <expr><name><name>Operator</name>.<name><name/></name></name>class</expr>;</return> }</block></function>

}</block></class></unit>
