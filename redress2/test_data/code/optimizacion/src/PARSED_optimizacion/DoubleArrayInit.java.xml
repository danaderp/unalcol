<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\types\real\array\DoubleArrayInit.java"><package>package <name><name>unalcol</name>.<name>types</name>.<name>real</name>.<name>array</name></name>;</package>

<import>import <name><name>unalcol</name>.<name>random</name></name>.*;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Set of methods for creating an array of doubles&lt;/p&gt;
 *
 * &lt;p&gt;Copyright: Copyright (c) 2009&lt;/p&gt;
 * 
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 *
 */</comment>
<class><specifier>public</specifier> class <name>DoubleArrayInit</name><block>{
    <comment type="javadoc">/**
     * Generates a vector of doubles with two limits array.
     * @param min The inferior limit array
     * @param max The superior limit array
     * @return A vector of doubles
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>double</name><index>[]</index></type> <name>random</name><parameter_list>(<param><decl><type><name><name>double</name><index>[]</index></name></type> <name>min</name></decl></param>, <param><decl><type><name><name>double</name><index>[]</index></name></type> <name>max</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>n</name> =<init> <expr><name><name>min</name>.<name>length</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>x</name> =<init> <expr>new <name><name>double</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>min</name><index>[<expr><name>i</name></expr>]</index></name> + <call><name><name>Random</name>.<name>random</name></name><argument_list>()</argument_list></call> * (<name><name>max</name><index>[<expr><name>i</name></expr>]</index></name> - <name><name>min</name><index>[<expr><name>i</name></expr>]</index></name>)</expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>x</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Generates a vector of doubles with size n.
     * @param n Size of the vector
     * @return A vector of doubles
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>double</name><index>[]</index></type> <name>random</name><parameter_list>(<param><decl><type><name>int</name></type> <name>n</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>Random</name>.<name>get</name></name><argument_list>()</argument_list></call>.<call><name>raw</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Creates a double array of size &lt;i&gt;n&lt;/i&gt; with the same value in each compoment
     * @param n Size of the array to be created
     * @param value Value that will be copied in each position of the array
     * @return double[]
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>double</name><index>[]</index></type> <name>create</name><parameter_list>(<param><decl><type><name>int</name></type> <name>n</name></decl></param>, <param><decl><type><name>double</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>x</name> =<init> <expr>new <name><name>double</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> = <name>value</name></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>x</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
