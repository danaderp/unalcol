<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\types\collection\vector\sparse\SparseVector.java"><comment type="block">/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */</comment>
<package>package <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>vector</name>.<name>sparse</name></name>;</package>

<import>import <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>vector</name>.<name>SortedVector</name></name>;</import>

<comment type="javadoc">/**
 *
 * @author jgomez
 */</comment>
<class><specifier>public</specifier> class <name><name>SparseVector</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name> <super><extends>extends <name><name>ImmutableSparseVector</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></extends></super><block>{
    
    <constructor><specifier>public</specifier> <name>SparseVector</name><parameter_list>()</parameter_list><block>{
        <expr_stmt><expr><call><name>super</name><argument_list>( <argument><expr>new <call><name>SortedVector</name><argument_list>(<argument><expr>new <call><name>SparseElementOrder</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <constructor><specifier>public</specifier> <name>SparseVector</name><parameter_list>( <param><decl><type><name><name>SortedVector</name><argument_list>&lt;<argument><name><name>SparseElement</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>vector</name></decl></param> )</parameter_list><block>{
        <expr_stmt><expr><call><name>super</name><argument_list>( <argument><expr><name>vector</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>set</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>, <param><decl><type><name>T</name></type> <name>data</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>loc</name>.<name>index</name></name> = <name>index</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>index</name> = <call><name><name>vector</name>.<name>findIndex</name></name><argument_list>(<argument><expr><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>( <expr><name>index</name> &gt;= 0</expr> )</condition><then><block>{
            <expr_stmt><expr><call><name><name>vector</name>.<name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then><else>else<block>{
            <expr_stmt><expr><call><name><name>vector</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name><name>SparseElement</name><argument_list>&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>loc</name>.<name>index</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>vector</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>del</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>loc</name>.<name>index</name></name> = <name>index</name></expr>;</expr_stmt>
        <return>return <expr><call><name><name>vector</name>.<name>del</name></name><argument_list>(<argument><expr><name>loc</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>    
}</block></class>
</unit>
