<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\types\collection\vector\sparse\SparseElementOrder.java"><package>package <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>vector</name>.<name>sparse</name></name>;</package>
<import>import <name><name>unalcol</name>.<name>sort</name>.<name>Order</name></name>;</import>
<import>import <name>unalcol</name>.*;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Title: SparseValueOrder&lt;/p&gt;
 * &lt;p&gt;Description: Compares two SparseValue.&lt;/p&gt;
 * &lt;p&gt;Copyright: Copyright (c) 2006&lt;/p&gt;
 * &lt;p&gt;Company: Kunsamu&lt;/p&gt;
 * @author Jonatan Gomez
 * @version 1.0
 */</comment>

<class><specifier>public</specifier> class <name><name>SparseElementOrder</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name> <super><implements>implements <name><name>Order</name><argument_list>&lt;<argument><name><name>SparseElement</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></implements></super> <block>{

    <comment type="javadoc">/**
     * Returns the Class that owns the PlugIn
     * @return Class The PlugIns owner class
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>owner</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>SparseElement</name>.<name><name/></name></name>class</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * The base PlugIn class its is overwritring
     * @return Class PlugIn being overwritten
     */</comment>
    <function><type><specifier>public</specifier> <name>Class</name></type> <name>base</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>Order</name>.<name><name/></name></name>class</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Determines if the object is less than (in some order) the given object
     * @param x Object to Compare
     * @param y Object to Compare
     * @return true if the object is less than the given object x. false in other case
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<param><decl><type><name><name>SparseElement</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>x</name></decl></param>, <param><decl><type><name><name>SparseElement</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>y</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>(<call><name><name>x</name>.<name>index</name></name><argument_list>()</argument_list></call> - <call><name><name>y</name>.<name>index</name></name><argument_list>()</argument_list></call>)</expr>;</return>
    }</block></function>
}</block></class>
</unit>
