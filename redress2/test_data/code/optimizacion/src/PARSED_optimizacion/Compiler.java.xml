<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\reflect\compiler\Compiler.java"><package>package <name><name>unalcol</name>.<name>reflect</name>.<name>compiler</name></name>;</package>

<import>import <name><name>unalcol</name>.<name>reflect</name>.<name>util</name>.<name>JavaOS</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>reflect</name>.<name>loader</name>.<name>tool</name></name>.*;</import>
<import>import <name><name>unalcol</name>.<name>process</name></name>.*;</import>
<import>import <name><name>java</name>.<name>io</name></name>.*;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>vector</name></name>.*;</import>

<comment type="javadoc">/**
 * &lt;p&gt;A Java compiler &lt;/p&gt;
 *
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 */</comment>
<class><specifier>public</specifier> class <name>Compiler</name> <block>{
    <comment type="javadoc">/**
     * Class Paths used for compiling a Java Source File
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>classPath</name> =<init> <expr>new <call><name><name>Vector</name><argument_list>&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * Source Paths used for compiling a Java Source File
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>sourcePath</name> =<init> <expr>new <call><name><name>Vector</name><argument_list>&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * Destination path (compiling classes output directory)
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>destination</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Compilation errors
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>ByteArrayOutputStream</name></type> <name>err</name> =<init> <expr>new <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Compilation output
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>ByteArrayOutputStream</name></type> <name>out</name> =<init> <expr>new <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a Java compiler
     */</comment>
    <constructor><specifier>public</specifier> <name>Compiler</name><parameter_list>()</parameter_list> <block>{}</block></constructor>

    <comment type="javadoc">/**
     * Adds a source path to the sources path collection
     * @param path New source path
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addSourcePath</name><parameter_list>(<param><decl><type><name>String</name></type> <name>path</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>sourcePath</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>JavaOS</name>.<name>systemPath</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a class path to the classes path collection
     * @param path New class path
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addClassPath</name><parameter_list>(<param><decl><type><name>String</name></type> <name>path</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>classPath</name>.<name>add</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Removes a path from a path collection
     * @param paths Collection of paths
     * @param path Path to be removed
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>removePath</name><parameter_list>(<param><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>paths</name></decl></param>, <param><decl><type><name>String</name></type> <name>path</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>path</name> = <call><name><name>JavaOS</name>.<name>systemPath</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr><call><name><name>paths</name>.<name>size</name></name><argument_list>()</argument_list></call> - 1</expr></init></decl>;</init> <condition><expr><name>i</name> &gt;= 0</expr>;</condition> <incr><expr><name>i</name>--</expr></incr>) <block>{
            <if>if <condition>(<expr><call><name><name>paths</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>.<call><name>compareTo</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>paths</name>.<name>remove</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Removes a source path from the source path collection
     * @param path Source path to be removed
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeSourcePath</name><parameter_list>(<param><decl><type><name>String</name></type> <name>path</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>removePath</name><argument_list>(<argument><expr><name>sourcePath</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Removes a class path from the class path collection
     * @param path Class path to be removed
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeClassPath</name><parameter_list>(<param><decl><type><name>String</name></type> <name>path</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>removePath</name><argument_list>(<argument><expr><name>classPath</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the destination path (directory for putting the class files)
     * @param outputPath Destination path
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOutputPath</name><parameter_list>(<param><decl><type><name>String</name></type> <name>outputPath</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>destination</name></name> = <call><name><name>JavaOS</name>.<name>systemPath</name></name><argument_list>(<argument><expr><name>outputPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Creates the appropiated java compiling code for the given paths (source or classes)
     * @param paths Collection of paths (source or classes)
     * @return The appropiated java compiling code for the given paths (source or classes)
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>commandStr</name><parameter_list>(<param><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>paths</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> =<init> <expr>new <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>paths</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>JavaOS</name>.<name>closingCharacter</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>paths</name>.<name>get</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>1</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>paths</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>JavaOS</name>.<name>pathSeparator</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>paths</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>JavaOS</name>.<name>closingCharacter</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><call><name><name>sb</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Spawns a process to compile the java source code file specified in the 'javaFile' parameter.
     * @param javaFile Java file to be compiled
     * @return &lt;i&gt;true&lt;/i&gt; if the compilation succeds, &lt;i&gt;false&lt;/i&gt; otherwise.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>run</name><parameter_list>(<param><decl><type><name>String</name></type> <name>javaFile</name></decl></param>)</parameter_list><block>{
        <expr_stmt><expr><call><name><name>err</name>.<name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>out</name>.<name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        
        <decl_stmt><decl><type><name>int</name></type> <name>nParameters</name> =<init> <expr>2</expr></init></decl>;</decl_stmt>

        <comment type="line">// building the compiling command</comment>
        <expr_stmt><expr><name>nParameters</name> += (<call><name><name>classPath</name>.<name>size</name></name><argument_list>()</argument_list></call>&gt;0)?2:0</expr>;</expr_stmt>
        <expr_stmt><expr><name>nParameters</name> += (<call><name><name>sourcePath</name>.<name>size</name></name><argument_list>()</argument_list></call>&gt;0)?2:0</expr>;</expr_stmt>
        <expr_stmt><expr><name>nParameters</name> += (<name>destination</name>!=<name>null</name>)?2:0</expr>;</expr_stmt>
        
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>command</name> =<init> <expr>new <name><name>String</name><index>[<expr><name>nParameters</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>command</name><index>[<expr>0</expr>]</index></name> = "javac"</expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>pos</name> =<init> <expr>1</expr></init></decl>;</decl_stmt>
        
        <if>if<condition>( <expr><call><name><name>classPath</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 0</expr> )</condition><then><block>{
            <expr_stmt><expr><name><name>command</name><index>[<expr><name>pos</name></expr>]</index></name> = "-classpath"</expr>;</expr_stmt>
            <expr_stmt><expr><name><name>command</name><index>[<expr><name>pos</name>+1</expr>]</index></name> = <call><name>commandStr</name><argument_list>(<argument><expr><name>classPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>pos</name> += 2</expr>;</expr_stmt>
        }</block></then></if>
        
        <if>if<condition>( <expr><call><name><name>sourcePath</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 0</expr> )</condition><then><block>{
            <expr_stmt><expr><name><name>command</name><index>[<expr><name>pos</name></expr>]</index></name> = "-sourcepath"</expr>;</expr_stmt>
            <expr_stmt><expr><name><name>command</name><index>[<expr><name>pos</name>+1</expr>]</index></name> = <call><name>commandStr</name><argument_list>(<argument><expr><name>sourcePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>pos</name> += 2</expr>;</expr_stmt>
        }</block></then></if>
        
        <if>if <condition>(<expr><name>destination</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>command</name><index>[<expr><name>pos</name></expr>]</index></name> = " -d "</expr>;</expr_stmt>
            <expr_stmt><expr><name><name>command</name><index>[<expr><name>pos</name>+1</expr>]</index></name> = <name><name>this</name>.<name>destination</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>pos</name> += 2</expr>;</expr_stmt>
        }</block></then></if>
        
        <expr_stmt><expr><name><name>command</name><index>[<expr><name>pos</name></expr>]</index></name> = <name>javaFile</name></expr>;</expr_stmt>
        
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> =<init> <expr>new <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for( <init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name><name>command</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> )<block>{
                    <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>( <argument><expr><name><name>command</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>" "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        
        <return>return <expr><call><name><name>ExternalProcess</name>.<name>run</name></name><argument_list>(<argument><expr><call><name><name>sb</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>new <call><name>PrintStream</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <call><name>PrintStream</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Resets the destination, class and source paths of the compiler
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list><block>{
        <expr_stmt><expr><call><name><name>classPath</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sourcePath</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>destination</name> = <name>null</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>err</name>.<name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>out</name>.<name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Obtains the error message generated by the last compilation process
     * @return String containing the error message produced by the last compilation process
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>error</name><parameter_list>()</parameter_list><block>{
        <return>return <expr><call><name><name>err</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Obtains the message generated by the last compilation process
     * @return String containing the message produced by the last compilation process
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>out</name><parameter_list>()</parameter_list><block>{
        <return>return <expr><call><name><name>out</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the jars files used by a compiler
     * @param libs Libraries used as class path by the compiler
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLibraries</name><parameter_list>(<param><decl><type><name>MultiJarLoader</name></type> <name>libs</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>classPath</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>JarLoader</name><index>[]</index></type> <name>jarFiles</name> =<init> <expr><call><name><name>libs</name>.<name>jarFiles</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>jarFiles</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name>addClassPath</name><argument_list>(<argument><expr><name><name>jarFiles</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>
}</block></class></unit>
