<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\optimization\testbed\binary\M8_Deceptive.java"><package>package <name><name>unalcol</name>.<name>optimization</name>.<name>testbed</name>.<name>binary</name></name>;</package>

<import>import <name><name>unalcol</name>.<name>optimization</name></name>.*;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>bitarray</name>.<name>BitArray</name></name>;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Title: M8_Deceptive&lt;/p&gt;
 * &lt;p&gt;Description: Extended deceptive binary functions&lt;/p&gt;
 * &lt;p&gt;Copyright: Copyright (c) 2010&lt;/p&gt;
 * &lt;p&gt;Company: Kunsamu&lt;/p&gt;
 * @author Jonatan Gomez
 * @version 1.0
 */</comment>

<class><specifier>public</specifier> class <name>M8_Deceptive</name> <super><extends>extends <name>M7_Deceptive</name></extends></super> <block>{

  <comment type="javadoc">/**
   * Evaluate the max ones OptimizationFunction function over the binary array given
   * @param x Binary Array to be evaluated
   * @return the OptimizationFunction function over the binary array
   */</comment>
  <function><type><specifier>public</specifier> <name>Double</name></type> <name>apply</name><parameter_list>(<param><decl><type><name>BitArray</name></type> <name>x</name></decl></param>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>double</name></type> <name>f</name> =<init> <expr><call><name><name>super</name>.<name>apply</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>f</name> = 5.0*<call><name><name>Math</name>.<name>pow</name></name><argument_list>(<argument><expr><name>f</name>/5.0</expr></argument>,<argument><expr>15.0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>f</name></expr>;</return>
  }</block></function>
}</block></class>
</unit>
