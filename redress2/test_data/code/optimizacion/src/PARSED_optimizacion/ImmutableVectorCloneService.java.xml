<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\clone\util\ImmutableVectorCloneService.java"><package>package <name><name>unalcol</name>.<name>clone</name>.<name>util</name></name>;</package>
<import>import <name><name>unalcol</name>.<name>clone</name>.<name>Clone</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>clone</name>.<name>CloneService</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>vector</name>.<name>ImmutableVector</name></name>;</import>

<comment type="javadoc">/**
 * &lt;p&gt;CloneService of Java Vectors.&lt;/p&gt;
 * &lt;p&gt;Copyright: Copyright (c) 2010&lt;/p&gt;
 *
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 */</comment>
<class><specifier>public</specifier> class <name><name>ImmutableVectorCloneService</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name> <super><implements>implements <name><name>CloneService</name><argument_list>&lt;<argument><name><name>ImmutableVector</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></implements></super><block>{
    <constructor><specifier>public</specifier> <name>ImmutableVectorCloneService</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>Object</name></type> <name>owner</name><parameter_list>()</parameter_list><block>{
        <return>return <expr><name><name>ImmutableVector</name>.<name><name/></name></name>class</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Object</name><index>[]</index></type> <name>toArray</name><parameter_list>(<param><decl><type><name>ImmutableVector</name></type> <name>obj</name></decl></param>)</parameter_list><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>size</name> =<init> <expr><call><name><name>obj</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Object</name><index>[]</index></type> <name>cl</name> =<init> <expr>new <name><name>Object</name><index>[<expr><name>size</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for(<init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name>size</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> )<block>{
            <expr_stmt><expr><name><name>cl</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name><name>Clone</name>.<name>get</name></name><argument_list>(<argument><expr><call><name><name>obj</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>cl</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Clones a Java Vector
     * @param obj The Java Vector to be cloned
     * @return A clone of the Java Vector
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name><name>ImmutableVector</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>clone</name><parameter_list>(<param><decl><type><name><name>ImmutableVector</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>obj</name></decl></param>)</parameter_list><block>{    
        <return>return <expr>new <call><name><name>ImmutableVector</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name><argument_list>( <argument><expr>(<name><name>T</name><index>[]</index></name>)<call><name>toArray</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</return>
    }</block></function>    
}</block></class></unit>
