<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\types\real\array\DoubleArray.java"><package>package <name><name>unalcol</name>.<name>types</name>.<name>real</name>.<name>array</name></name>;</package>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>real</name></name>.*;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Set of constants and methods operating on an array of the primitive double data type&lt;/p&gt;
 *
 * &lt;p&gt;Copyright: Copyright (c) 2009&lt;/p&gt;
 * 
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 *
 */</comment>
<class><specifier>public</specifier> class <name>DoubleArray</name><block>{
    <comment type="javadoc">/**
     * Reverses the given array
     * @param a Double array to be reversed
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>invert</name><parameter_list>(<param><decl><type><name><name>double</name><index>[]</index></name></type> <name>a</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>n</name> =<init> <expr><name><name>a</name>.<name>length</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>j</name> =<init> <expr><name>n</name> - 1</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>j</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>tmp</name> =<init> <expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name> = <name>tmp</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>j</name>--</expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Normalizes the array to the interval [0,1] using the sum of the values in the array as the maximum value
     * (precondition: Values in the array should be non negatives and at least one value should be different of zero
     * @param x Array to be normalized
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>normalize</name><parameter_list>( <param><decl><type><name><name>double</name><index>[]</index></name></type> <name>x</name></decl></param> )</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name> =<init> <expr><name><name>x</name>.<name>length</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>sum</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <for>for( <init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> )<block>{
            <expr_stmt><expr><name>sum</name> +=  <name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></for>
        <if>if<condition>( <expr>!<call><name><name>DoubleUtil</name>.<name>isZero</name></name><argument_list>(<argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr> )</condition><then><block>{
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <expr_stmt><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> /= <name>sum</name></expr>;</expr_stmt>
            }</block></for>
        }</block></then></if>
    }</block></function>
    
    

    <comment type="javadoc">/**
     * Obtains statistical information of the given array considering the array values as samples drawn from a population
     * @param x double[] Samples drawn from a population
     * @return Statistics information of the given data samples
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Statistics</name></type> <name>statistics</name><parameter_list>( <param><decl><type><name><name>double</name><index>[]</index></name></type> <name>x</name></decl></param> )</parameter_list><block>{
    <return>return <expr>(new <call><name>Statistics</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call>)</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Obtains statistical information (in array format) of the given array considering the array values as samples drawn from a population
     * @param x double[] Samples drawn from a population
     * @return Statistics information (in array format) of the given data samples
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>double</name><index>[]</index></type> <name>statistics_vector</name><parameter_list>( <param><decl><type><name><name>double</name><index>[]</index></name></type> <name>x</name></decl></param> )</parameter_list><block>{
        <return>return <expr><call><name>statistics</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call>.<call><name>get</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
