<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\random\rngpack\Ranecu.java"><package>package <name><name>unalcol</name>.<name>random</name>.<name>rngpack</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name></name>.*;</import>

<import>import <name><name>unalcol</name>.<name>random</name>.<name>raw</name></name>.*;</import>

<comment type="line">//</comment>
<comment type="line">// RngPack 1.1a by Paul Houle</comment>
<comment type="line">// http://www.honeylocust.com/RngPack/</comment>
<comment type="line">//</comment>

<comment type="javadoc">/**
 *
 * Ranecu is an advanced multiplicative linear congruential random number
 * generator with a period of aproximately 10&lt;SUP&gt;18&lt;/SUP&gt;.
 * Ranecu is a direct translation from Fortran of the &lt;B&gt;RANECU&lt;/B&gt;
 * subroutine
 * published in the paper
 * &lt;BR&gt;
 * F. James, &lt;CITE&gt;Comp. Phys. Comm.&lt;/CITE&gt; &lt;STRONG&gt;60&lt;/STRONG&gt; (1990) p 329-344
 * &lt;BR&gt;
 * The algorithm was originally described in
 * &lt;BR&gt;
 * P. L'Ecuyer, &lt;CITE&gt;Commun. ACM.&lt;/CITE&gt; &lt;STRONG&gt;1988&lt;/STRONG&gt; (1988) p 742
 * &lt;BR&gt;
 *
 * &lt;P&gt;
 * This code is a unified (modified) version of the Ranecu
 * &lt;A HREF="/RngPack/src/edu/cornell/lassp/houle/RngPack/Ranecu.java"&gt; source code&lt;/A&gt;
 * from RngPack 1.1a by Paul Houle
 *
 * @author &lt;A HREF="http://www.honeylocust.com/"&gt; Paul Houle &lt;/A&gt;
 * (E-mail: &lt;A HREF="mailto:paul@honeylocust.com"&gt;paul@honeylocust.com&lt;/A&gt;)
 * Modified by &lt;A HREF="http://dis.unal.edu.co/~jgomez"&gt; Jonatan Gomez &lt;/A&gt;
 * (E-mail: &lt;A HREF="mailto:jgomezpe@unal.edu.co"&gt;jgomezpe@unal.edu.co&lt;/A&gt; )
 * @version 1.0
 */</comment>


<class><specifier>public</specifier> class <name>Ranecu</name> <super><extends>extends <name>SeedableGenerator</name></extends></super> <block>{

    <comment type="javadoc">/**
     * Partial seed information
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>seed1</name> =<init> <expr>12345</expr></init>, <name>seed2</name> =<init> <expr>67890</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a by default Ranecu number generator
     */</comment>
    <constructor><specifier>public</specifier> <name>Ranecu</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a Ranecu seedable generator with the given time dependent seed
     * @param seed The time information used for defining the seed
     */</comment>
    <constructor><specifier>public</specifier> <name>Ranecu</name><parameter_list>(<param><decl><type><name>Date</name></type> <name>seed</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a Ranecu seedable generator with the given seed
     * @param seed The seed
     */</comment>
    <constructor><specifier>public</specifier> <name>Ranecu</name><parameter_list>(<param><decl><type><name>long</name></type> <name>seed</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>Ranecu</name><parameter_list>(<param><decl><type><name>int</name></type> <name>s1</name></decl></param>, <param><decl><type><name>int</name></type> <name>s2</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>s1</name> * (<name>long</name>) <name><name>Integer</name>.<name>MAX_VALUE</name></name> + <name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     *
     * Returns a seed calculated from given seed
     * @param seed The seed
     * @return a long integer seed
     *
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>initSeed</name><parameter_list>(<param><decl><type><name>long</name></type> <name>seed</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>seed</name></name> = <name>seed</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>seed1</name> = (<name>int</name>) <name>seed</name> / <name><name>Integer</name>.<name>MAX_VALUE</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>seed2</name> = (<name>int</name>) <name>seed</name> % <name><name>Integer</name>.<name>MAX_VALUE</name></name></expr>;</expr_stmt>
        <return>return <expr><name>seed</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a random double number
     * @return A random double number
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>next</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>k</name> = <name>seed1</name> / 53668</expr>;</expr_stmt>
        <expr_stmt><expr><name>seed1</name> = 40014 * (<name>seed1</name> - <name>k</name> * 53668) - <name>k</name> * 12211</expr>;</expr_stmt>
        <if>if <condition>(<expr><name>seed1</name> &lt; 0</expr>)</condition><then> <expr_stmt><expr><name>seed1</name> = <name>seed1</name> + 2147483563</expr>;</expr_stmt></then></if>

        <expr_stmt><expr><name>k</name> = <name>seed2</name> / 52774</expr>;</expr_stmt>
        <expr_stmt><expr><name>seed2</name> = 40692 * (<name>seed2</name> - <name>k</name> * 52774) - <name>k</name> * 3791</expr>;</expr_stmt>
        <if>if <condition>(<expr><name>seed2</name> &lt; 0</expr>)</condition><then> <expr_stmt><expr><name>seed2</name> = <name>seed2</name> + 2147483399</expr>;</expr_stmt></then></if>

        <expr_stmt><expr><name>seed</name> = <name>seed1</name> * (<name>long</name>) <name><name>Integer</name>.<name>MAX_VALUE</name></name> + <name>seed2</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>lz</name> =<init> <expr><name>seed1</name> - <name>seed2</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>lz</name> &lt; 1</expr>)</condition><then> <expr_stmt><expr><name>lz</name> = <name>lz</name> + 2147483562</expr>;</expr_stmt></then></if>
        <return>return <expr><name>lz</name> * 4.656613e-10</expr>;</return>
    }</block></function>
    
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>RawGenerator</name></type> <name>new_instance</name><parameter_list>()</parameter_list><block>{
        <return>return <expr>new <call><name>Ranecu</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
    
}</block></class>
</unit>
