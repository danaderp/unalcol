<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\clone\Clone.java"><package>package <name><name>unalcol</name>.<name>clone</name></name>;</package>

<import>import <name><name>unalcol</name>.<name>reflect</name>.<name>util</name></name>.*;</import>

<comment type="javadoc">/**
 * &lt;p&gt;ServiceProvider of cloning methods.&lt;/p&gt;
 * &lt;p&gt;Copyright: Copyright (c) 2010&lt;/p&gt;
 *
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 */</comment>
<class><specifier>public</specifier> class <name>Clone</name><block>{

    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>wrapperLoaded</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Gets the current cloning service for the given object
     * @param obj Object from which the CloneService will be retrieved
     * @return A CloneService if some cloning service has been defined as current
     * cloning service for the given object, &lt;i&gt;null&lt;/i&gt; otherwise
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>CloneService</name></type> <name>getService</name><parameter_list>( <param><decl><type><name>Object</name></type> <name>obj</name></decl></param> )</parameter_list><block>{
        <if>if<condition>( <expr>!<name>wrapperLoaded</name></expr> )</condition><then><block>{
            <expr_stmt><expr><name>wrapperLoaded</name> = <call><name><name>ReflectUtil</name>.<name>getProvider</name></name><argument_list>()</argument_list></call>.<call><name>register</name><argument_list>(<argument><expr><name><name>CloneServiceWrapper</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr>((<name>CloneService</name>)<call><name><name>ReflectUtil</name>.<name>getProvider</name></name><argument_list>()</argument_list></call>.<call><name>default_service</name><argument_list>(<argument><expr><name><name>CloneService</name>.<name><name/></name></name>class</expr></argument>,<argument><expr><name>obj</name></expr></argument>)</argument_list></call>)</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Creates a clone of a given object
     * @param obj Object to be cloned
     * @return A clone of the object, if a cloning service is available for the given object, &lt;i&gt;null&lt;/i&gt; otherwise
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Object</name></type> <name>get</name><parameter_list>( <param><decl><type><name>Object</name></type> <name>obj</name></decl></param> )</parameter_list><block>{
        <decl_stmt><decl><type><name>CloneService</name></type> <name>service</name> =<init> <expr><call><name>getService</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if<condition>( <expr><name>service</name> != <name>null</name></expr> )</condition><then><block>{
            <return>return <expr><call><name><name>service</name>.<name>clone</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <return>return <expr><name>null</name></expr>;</return>
    }</block></function>
}</block></class></unit>
