<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\sort\Sort.java"><package>package <name><name>unalcol</name>.<name>sort</name></name>;</package>

<import>import <name><name>unalcol</name>.<name>algorithm</name>.<name>Algorithm</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>reflect</name>.<name>service</name></name>.*;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Abstract Sorting algorithm for Arrays of objects&lt;/p&gt;
 *
 * &lt;p&gt;Copyright: Copyright (c) 2010&lt;/p&gt;
 * 
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name><name>Sort</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name> <super><extends>extends <name><name>Algorithm</name><argument_list>&lt;<argument><name><name>T</name><index>[]</index></name></argument>, <argument><name><name>T</name><index>[]</index></name></argument>&gt;</argument_list></name></extends> <implements>implements <name>Service</name></implements></super><block>{
    <comment type="javadoc">/**
     * Order used for sorting the objects
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>Order</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>order</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Indicates if the sorting algorithm uses the same array for returning the sorted objects
     * or not. A &lt;i&gt;true&lt;/i&gt; value indicates that the algorithm should returns the sorted objects
     * in the same array, &lt;i&gt;false&lt;/i&gt; if the algorithm should creates a new array.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>overwrite</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>Object</name></type> <name>owner</name><parameter_list>()</parameter_list><block>{
        <return>return <expr><name><name>Object</name>.<name><name/></name></name>class</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Default constructor
     */</comment>
    <constructor><specifier>public</specifier> <name>Sort</name><parameter_list>()</parameter_list><block>{}</block></constructor>

    <comment type="javadoc">/**
     * Crates a sorting algorithm with the given order
     * @param order Order used for sorting the objects
     */</comment>
    <constructor><specifier>public</specifier> <name>Sort</name><parameter_list>(<param><decl><type><name><name>Order</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>order</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>order</name></name> = <name>order</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a sorting algorithm using the given order and overwriting array flag
     * @param order Order used for sorting the objects
     * @param overwrite If the array should be overwritten or not
     */</comment>
    <constructor><specifier>public</specifier> <name>Sort</name><parameter_list>(<param><decl><type><name><name>Order</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>order</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>overwrite</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>overwrite</name></name> = <name>overwrite</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>order</name></name> = <name>order</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Sorts the array of objects according to the given order (it does not creates a new array)
     * @param a Array of objects to be sorted
     * @param order Order used for sorting the objects
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>apply</name><parameter_list>(<param><decl><type><name><name>T</name><index>[]</index></name></type> <name>a</name></decl></param>, <param><decl><type><name><name>Order</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>order</name></decl></param>)</parameter_list><block>{
        <expr_stmt><expr><name><name>this</name>.<name>order</name></name> = <name>order</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>apply</name><argument_list>( <argument><expr><name>a</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>a</name>.<name>length</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sorts the array of objects according to the given order (it does not creates a new array)
     * @param a Array of objects to be sorted
     * @param order Order used for sorting the objects
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>apply</name><parameter_list>(<param><decl><type><name><name>T</name><index>[]</index></name></type> <name>a</name></decl></param>, <param><decl><type><name>int</name></type> <name>start</name></decl></param>, <param><decl><type><name>int</name></type> <name>end</name></decl></param>, <param><decl><type><name><name>Order</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>order</name></decl></param>)</parameter_list><block>{
        <expr_stmt><expr><name><name>this</name>.<name>order</name></name> = <name>order</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>apply</name><argument_list>( <argument><expr><name>a</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sorts a portion of the array of objects according to the given order (it does not creates a new array)
     * @param a Array of objects to be sorted
     * @param start Initial position in the array to be sorted
     * @param end Final position in the array to be sorte
     * @return &lt;i&gt;true&lt;/i&gt; If the sorting process was done without fails, &lt;i&gt;false&lt;/i&gt; otherwise
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>apply</name><parameter_list>(<param><decl><type><name><name>T</name><index>[]</index></name></type> <name>a</name></decl></param>, <param><decl><type><name>int</name></type> <name>start</name></decl></param>, <param><decl><type><name>int</name></type> <name>end</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="javadoc">/**
     * Runs the sorting algorithm on the given array and the stablished order
     * @param input Array to be sorted
     * @return Sorted array
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>T</name><index>[]</index></type> <name>apply</name><parameter_list>(<param><decl><type><name><name>T</name><index>[]</index></name></type> <name>input</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr>!<name>overwrite</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>input</name> = <call><name><name>input</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>apply</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>input</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>input</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Order</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>getOrder</name><parameter_list>( <param><decl><type><name><name>T</name><index>[]</index></name></type> <name>a</name></decl></param> )</parameter_list><block>{
        <if>if<condition>( <expr><name>order</name> == <name>null</name></expr> )</condition><then><block>{
            <decl_stmt><decl><type><name>int</name></type> <name>k</name>=<init><expr>0</expr></init></decl>;</decl_stmt>
            <while>while<condition>( <expr><name>k</name>&lt;<name><name>a</name>.<name>length</name></name> &amp;&amp; <name><name>a</name><index>[<expr><name>k</name></expr>]</index></name> == <name>null</name></expr> )</condition><block>{
                <expr_stmt><expr><name>k</name>++</expr>;</expr_stmt>
            }</block></while>
            <if>if<condition>( <expr><name>k</name>&lt;<name><name>a</name>.<name>length</name></name></expr> )</condition><then><block>{
               <expr_stmt><expr><name>order</name> = (<name><name>Order</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name>)<call><name><name>Comparator</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <return>return <expr><name>order</name></expr>;</return>
    }</block></function>
}</block></class></unit>
