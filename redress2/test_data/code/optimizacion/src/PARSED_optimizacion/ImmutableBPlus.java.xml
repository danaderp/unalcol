<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\types\collection\tree\bplus\ImmutableBPlus.java"><comment type="block">/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */</comment>
<package>package <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>tree</name>.<name>bplus</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>NoSuchElementException</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>sort</name>.<name>Order</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>sort</name>.<name>Search</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>Location</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>SearchCollection</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>types</name>.<name>collection</name>.<name>tree</name>.<name>bplus</name>.<name>memory</name>.<name>MemoryLeafNode</name></name>;</import>

<comment type="javadoc">/**
 *
 * @author jgomez
 */</comment>
<class><specifier>public</specifier> class <name><name>ImmutableBPlus</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name> <super><implements>implements <name><name>SearchCollection</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></implements></super> <block>{
    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>BPlusInnerNode</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>root</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>Order</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>order</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>BPlusNodeOrder</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>node_order</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>Search</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>search</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>Search</name><argument_list>&lt;<argument><name><name>BPlusNode</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>node_search</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ImmutableBPlus</name><parameter_list>( <param><decl><type><name><name>Order</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>order</name></decl></param>, <param><decl><type><name><name>BPlusInnerNode</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>root</name></decl></param> )</parameter_list><block>{
        <expr_stmt><expr><name><name>this</name>.<name>root</name></name> = <name>root</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>order</name></name> = <name>order</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>node_order</name></name> = new <call><name><name>BPlusNodeOrder</name><argument_list>&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>search</name></name> = new <call><name><name>Search</name><argument_list>&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>node_search</name></name> = new <call><name><name>Search</name><argument_list>&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>search</name><parameter_list>( <param><decl><type><name><name>T</name><index>[]</index></name></type> <name>keys</name></decl></param>, <param><decl><type><name>T</name></type> <name>key</name></decl></param>, <param><decl><type><name>int</name></type> <name>n</name></decl></param> )</parameter_list><block>{
        <return>return <expr><call><name><name>search</name>.<name>findRight</name></name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>order</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>BPlusLeafNode</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>search_aux</name> =<init> <expr>new <call><name><name>MemoryLeafNode</name><argument_list>&lt;&gt;</argument_list></name><argument_list>( <argument><expr>(<name><name>T</name><index>[]</index></name>)new <name><name>Object</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>search</name><parameter_list>( <param><decl><type><name><name><name>BPlusNode</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name><index>[]</index></name></type> <name>keys</name></decl></param>, <param><decl><type><name>T</name></type> <name>key</name></decl></param>, <param><decl><type><name>int</name></type> <name>n</name></decl></param> )</parameter_list><block>{
        <expr_stmt><expr><call><name><name>search_aux</name>.<name>set</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>node_search</name>.<name>findRight</name></name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>search_aux</name></expr></argument>, <argument><expr><name>node_order</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>boolean</name></type> <name>isEmpty</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>root</name>.<name>mostLeft</name></name><argument_list>()</argument_list></call>.<call><name>n</name><argument_list>()</argument_list></call>==0</expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>iterator</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>new <call><name><name>BPlusIterator</name><argument_list>&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>root</name>.<name>mostLeft</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>boolean</name></type> <name>contains</name><parameter_list>(<param><decl><type><name>T</name></type> <name>data</name></decl></param>)</parameter_list> <block>{
        <try>try<block>{
        <decl_stmt><decl><type><name><name>BPlusLocation</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>loc</name> =<init> <expr>(<name><name>BPlusLocation</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name>)<call><name>find</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return<expr>( <call><name><name>order</name>.<name>compare</name></name><argument_list>(<argument><expr><call><name><name>loc</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call> == 0 )</expr>;</return>
        }</block><catch>catch( <param><decl><type><name>NoSuchElementException</name></type> <name>e</name></decl></param> )<block>{
            <return>return <expr>false</expr>;</return>
        }</block></catch></try>
    }</block></function>    
    
    <function><type><specifier>protected</specifier> <name><name>Location</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>find</name><parameter_list>( <param><decl><type><name><name>BPlusNode</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>node</name></decl></param>, <param><decl><type><name>T</name></type> <name>data</name></decl></param> )</parameter_list><block>{
        <if>if<condition>( <expr><name>node</name>!=<name>null</name></expr>)</condition><then><block>{
            <if>if<condition>( <expr><name>node</name> <name>instanceof</name> <name>BPlusInnerNode</name></expr>)</condition><then><block>{
                <decl_stmt><decl><type><name><name>BPlusInnerNode</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>inode</name> =<init> <expr>(<name><name>BPlusInnerNode</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name>)<name>node</name></expr></init></decl>;</decl_stmt>
                <if>if<condition>(<expr><call><name><name>inode</name>.<name>n</name></name><argument_list>()</argument_list></call>&gt;1</expr>)</condition><then><block>{
                    <decl_stmt><decl><type><name>int</name></type> <name>k</name> =<init> <expr><call><name>search</name><argument_list>(<argument><expr><call><name><name>inode</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><call><name><name>node</name>.<name>n</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>-1</expr></init></decl>;</decl_stmt>
                    <if>if<condition>( <expr><name>k</name>&lt;0</expr> )</condition><then> <return>return <expr>new <call><name><name>BPlusLocation</name><argument_list>&lt;&gt;</argument_list></name><argument_list>(<argument><expr>-1</expr></argument>,<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
                    <return>return <expr><call><name>find</name><argument_list>(<argument><expr><call><name><name>inode</name>.<name>next</name></name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
                }</block></then><else>else
                    <return>return <expr><call><name>find</name><argument_list>(<argument><expr><call><name><name>inode</name>.<name>next</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
            }</block></then><else>else<block>{
                <decl_stmt><decl><type><name><name>BPlusLeafNode</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>lnode</name> =<init> <expr>(<name><name>BPlusLeafNode</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name>)<name>node</name></expr></init></decl>;</decl_stmt>
                <return>return <expr>new <call><name><name>BPlusLocation</name><argument_list>&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name>search</name><argument_list>(<argument><expr><call><name><name>lnode</name>.<name>keys</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><call><name><name>node</name>.<name>n</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>-1</expr></argument>, <argument><expr><name>lnode</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></else></if>
        }</block></then></if>    
        <return>return <expr>new <call><name><name>BPlusLocation</name><argument_list>&lt;&gt;</argument_list></name><argument_list>(<argument><expr>-1</expr></argument>,<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name><name>Location</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>find</name><parameter_list>(<param><decl><type><name>T</name></type> <name>data</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>find</name><argument_list>(<argument><expr><name>root</name></expr></argument>,<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>iterator</name><parameter_list>(<param><decl><type><name><name>Location</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>locator</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>new <call><name>BPlusIterator</name><argument_list>(<argument><expr>(<name><name>BPlusLocation</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name>)<name>locator</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>   
}</block></class></unit>
