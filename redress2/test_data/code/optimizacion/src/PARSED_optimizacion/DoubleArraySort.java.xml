<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\types\real\array\DoubleArraySort.java"><package>package <name><name>unalcol</name>.<name>types</name>.<name>real</name>.<name>array</name></name>;</package>

<import>import <name><name>unalcol</name>.<name>random</name>.<name>raw</name>.<name>RawGenerator</name></name>;</import>
<import>import <name><name>unalcol</name>.<name>random</name>.<name>rngpack</name>.<name>RanMT</name></name>;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Title: DoubleArraySort&lt;/p&gt;
 * &lt;p&gt;Description: A set of sorting method for arrays of doubles&lt;/p&gt;
 * &lt;p&gt;Copyright: Copyright (c) 2009&lt;/p&gt;
 * &lt;p&gt;Company: Kunsamu&lt;/p&gt;
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 *
 */</comment>
<class><specifier>public</specifier> class <name>DoubleArraySort</name><block>{

    <comment type="javadoc">/**
     * Sorts (low to high) an array of doubles using bubble sort
     * @param a Double array to be sorted
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>bubble</name><parameter_list>(<param><decl><type><name><name>double</name><index>[]</index></name></type> <name>a</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>n</name> =<init> <expr><name><name>a</name>.<name>length</name></name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>n</name> - 1</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <for>for (<init><decl><type><name>int</name></type> <name>j</name> =<init> <expr><name>i</name> + 1</expr></init></decl>;</init> <condition><expr><name>j</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
                <if>if <condition>(<expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name> &lt; <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>double</name></type> <name>x</name> =<init> <expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name> = <name>x</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Sorts (low to high) an array of doubles using merge sort
     * @param a Double array to be sorted
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>merge</name><parameter_list>(<param><decl><type><name><name>double</name><index>[]</index></name></type> <name>a</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>n</name> =<init> <expr><name><name>a</name>.<name>length</name></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>n</name> &gt;= 4</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>nizq</name> =<init> <expr><name>n</name> / 2</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>nder</name> =<init> <expr><name>n</name> - <name>nizq</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>aIzq</name> =<init> <expr>new <name><name>double</name><index>[<expr><name>nizq</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>aDer</name> =<init> <expr>new <name><name>double</name><index>[<expr><name>nder</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>nizq</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <expr_stmt><expr><name><name>aIzq</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></for>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>nder</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <expr_stmt><expr><name><name>aDer</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>a</name><index>[<expr><name>nizq</name> + <name>i</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><call><name>merge</name><argument_list>(<argument><expr><name>aIzq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>merge</name><argument_list>(<argument><expr><name>aDer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>k</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>izq</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>der</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>izq</name> &lt; <name>nizq</name> &amp;&amp; <name>der</name> &lt; <name>nder</name></expr>)</condition> <block>{
                <if>if <condition>(<expr><name><name>aIzq</name><index>[<expr><name>izq</name></expr>]</index></name> &lt; <name><name>aDer</name><index>[<expr><name>der</name></expr>]</index></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>a</name><index>[<expr><name>k</name></expr>]</index></name> = <name><name>aIzq</name><index>[<expr><name>izq</name></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>izq</name>++</expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><name><name>a</name><index>[<expr><name>k</name></expr>]</index></name> = <name><name>aDer</name><index>[<expr><name>der</name></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>der</name>++</expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr><name>k</name>++</expr>;</expr_stmt>
            }</block></while> <while>while <condition>(<expr><name>izq</name> &lt; <name>nizq</name></expr>)</condition> <block>{
                <expr_stmt><expr><name><name>a</name><index>[<expr><name>k</name></expr>]</index></name> = <name><name>aIzq</name><index>[<expr><name>izq</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>izq</name>++</expr>;</expr_stmt>
                <expr_stmt><expr><name>k</name>++</expr>;</expr_stmt>
            }</block></while> <while>while <condition>(<expr><name>der</name> &lt; <name>nder</name></expr>)</condition> <block>{
                <expr_stmt><expr><name><name>a</name><index>[<expr><name>k</name></expr>]</index></name> = <name><name>aDer</name><index>[<expr><name>der</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>der</name>++</expr>;</expr_stmt>
                <expr_stmt><expr><name>k</name>++</expr>;</expr_stmt>
            }</block></while>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>bubble</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>
    
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>( <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></param> )</parameter_list><block>{
      <decl_stmt><decl><type><name>RawGenerator</name></type> <name>g</name> =<init> <expr>new <call><name>RanMT</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>N</name> =<init> <expr>1000</expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>x</name> =<init> <expr><call><name><name>g</name>.<name>raw</name></name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>merge</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for( <init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name>N</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> )<block>{
          <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>( <argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> + "," + (<name>N</name>-<name>i</name>)</expr></argument> )</argument_list></call></expr>;</expr_stmt>
      }</block></for>
  }</block></function>    
    
}</block></class>
</unit>
