<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\Daavid\git\unalcol\redress2\test_data\code\optimizacion\src\unalcol\types\real\matrix\DoubleMatrixInit.java"><package>package <name><name>unalcol</name>.<name>types</name>.<name>real</name>.<name>matrix</name></name>;</package>

<comment type="javadoc">/**
 * &lt;p&gt;Title: DoubleMatrixInit&lt;/p&gt;
 * &lt;p&gt;Description:  A set of methods for creating a matrix of doubles&lt;/p&gt;
 * &lt;p&gt;Copyright: Copyright (c) 2009&lt;/p&gt;
 * &lt;p&gt;Company: Kunsamu&lt;/p&gt;
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 */</comment>
<class><specifier>public</specifier> class <name>DoubleMatrixInit</name><block>{
    <comment type="javadoc">/**
     * Creates the zero matrix of &lt;i&gt;n&lt;/i&gt; rows by &lt;i&gt;m&lt;/i&gt; columns
     * @param n Number of rows
     * @param m Number of columns
     * @return The zero matrix (&lt;i&gt;n&lt;/i&gt; by &lt;i&gt;m&lt;/i&gt;)
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>double</name><index>[]</index><index>[]</index></type> <name>zero</name><parameter_list>(<param><decl><type><name>int</name></type> <name>n</name></decl></param>, <param><decl><type><name>int</name></type> <name>m</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>new <name><name>double</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name></expr>;</return>
        <comment type="block">/*        double[][] data;
                if (n &gt;= 0 &amp;&amp; m &gt;= 0) {
                    data = new double[n][m];
                    for (int i = 0; i &lt; n; i++) {
                        for (int j = 0; j &lt; m; j++) {
                            data[i][j] = 0.0;
                        }
                    }
                } else {
                    data = null;
                }
                return data;
         */</comment>
    }</block></function>

    <comment type="javadoc">/**
     * Creates the zero square matrix (&lt;i&gt;n&lt;/i&gt; by &lt;i&gt;n&lt;/i&gt;)
     * @param n Number of rows and columns (dimension)
     * @return The zero matrix (&lt;i&gt;n&lt;/i&gt; by &lt;i&gt;n&lt;/i&gt;)
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>double</name><index>[]</index><index>[]</index></type> <name>zero</name><parameter_list>(<param><decl><type><name>int</name></type> <name>n</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>zero</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     * Creates the identity matrix (&lt;i&gt;n&lt;/i&gt; by &lt;i&gt;n&lt;/i&gt;)
     * @param n Dimension of the identity matrix
     * @return The identity matrix (&lt;i&gt;n&lt;/i&gt; by &lt;i&gt;n&lt;/i&gt;)
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>double</name><index>[]</index><index>[]</index></type> <name>identity</name><parameter_list>(<param><decl><type><name>int</name></type> <name>n</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name><index>[]</index><index>[]</index></type> <name>id</name> =<init> <expr><call><name>zero</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name><name>id</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> = 1.0</expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>id</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Constructor: Create a new matrix with the same dimensions and components as the given matrix
     * @param A The source matrix
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>double</name><index>[]</index><index>[]</index></type> <name>clone</name><parameter_list>(<param><decl><type><name><name>double</name><index>[]</index><index>[]</index></name></type> <name>A</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name><index>[]</index><index>[]</index></type> <name>data</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>A</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>data</name> = (<name><name>double</name><index>[]</index><index>[]</index></name>) <call><name><name>A</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>data</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Creates a matrix from the given vector. The matrix will have dimension &lt;i&gt;n&lt;/i&gt; b &lt;i&gt;1&lt;/i&gt;
     * where element [i][0] will correspond with element x[i] of the vector
     * @param x Vector used for creating a matrix from it
     * @return The matrix version of the given vector (column vector)
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>double</name><index>[]</index><index>[]</index></type> <name>vector</name><parameter_list>(<param><decl><type><name><name>double</name><index>[]</index></name></type> <name>x</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>n</name> =<init> <expr><name><name>x</name>.<name>length</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>m</name> =<init> <expr>1</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name><index>[]</index><index>[]</index></type> <name>data</name> =<init> <expr>new <name><name>double</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index><index>[<expr>0</expr>]</index></name> = <name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>data</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
