package unalcol.process;
import java.io.*;

/**
 * <p>A Class for Executing External Process (commands).</p>
 *
 * @author Jonatan Gomez Perdomo
 * @version 1.0
 */
public class ExternalProcess implements Runnable{
    /**
     * The external process (including arguments) to be executed
     */
    protected String[] command;
    /**
     * The external process (including arguments) to be executed
     */
    protected String commandLine = null;
    /**
     * Java Process executing the command
     */
    protected Process process;
    /**
     * Flag that indicates if the process is running or not
     */
    protected boolean is_running = false;
    /**
     * External process status, returned by the os
     */
    protected int status;
    /**
     * Stream used for reporting the error messages generated by the external process
     */
    protected PrintStream err = null;
    /**
     * Stream used for reporting the output messages generated by the external process
     */
    protected PrintStream out = null;

    /**
     * Created a External Process representing the command sent as parameter
     * @param command The external process (including arguments) to be executed
     */
    public ExternalProcess( String[] command ){
        this.command = command;
    }

    /**
     * Created a External Process representing the command sent as parameter
     * @param commandLine The external process (including arguments) to be executed
     */
    public ExternalProcess( String commandLine ){
        this.commandLine = commandLine;
    }

    /**
     * Creates a External Process representing the command sent as parameter
     * @param commandLine The external process (including arguments) to be executed
     * @param out Stream used for reporting the output messages generated by the exteernal process
     * @param err Stream used for reporting the error messages generated by the exteernal process
     */
    public ExternalProcess( String commandLine, PrintStream out, PrintStream err ){
        this.commandLine = commandLine;
        this.err = err;
        this.out = out;
    }

    /**
     * Creates a External Process representing the command sent as parameter
     * @param command The external process (including arguments) to be executed
     * @param out Stream used for reporting the output messages generated by the external process
     * @param err Stream used for reporting the error messages generated by the external process
     */
    public ExternalProcess( String[] command, PrintStream out, PrintStream err ){
        this.command = command;
        this.err = err;
        this.out = out;
    }

    /**
     * Executes the external process
     */
    @Override
    public void run(){
        try{
            if( commandLine == null ){
                process = Runtime.getRuntime().exec(command);
            }else{
                process = Runtime.getRuntime().exec(commandLine);
            }
            is_running = true;
            ProcessInputStream input = 
                    new ProcessInputStream(process.getInputStream(), this, out);
            ProcessInputStream error = 
                    new ProcessInputStream(process.getErrorStream(), this, err);
            input.start();
            error.start();
            status = process.waitFor();
            is_running = false;
        }catch( Exception e ){
            if( err != null ){
                PrintStream temp = System.err;
                System.setErr(err);
                e.printStackTrace();
                System.setErr(temp);
            }
            status = Integer.MAX_VALUE;
        }
    }

    /**
     * Gets the process status
     * @return The external process status that is returned by the os
     */
    public int status(){
        return status;
    }

    /**
     * Executes the external process sent as parameter
     * @param command The external process (including arguments) to be executed
     * @return <i>true</i> if the command was executed without errors, <i>false</i> otherwise
     */
    public static boolean run( String[] command ){
        ExternalProcess p = new ExternalProcess(command);
        p.run();
        return (p.status()==0);
    }

    /**
     * Executes the external process sent as parameter
     * @param command The external process (including arguments) to be executed
     * @param out Stream used for reporting the output messages generated by the exteernal process
     * @param err Stream used for reporting the error messages generated by the exteernal process
     * @return <i>true</i> if the command was executed without errors, <i>false</i> otherwise
     */
    public static boolean run( String[] command, PrintStream out, PrintStream err ){
        ExternalProcess p = new ExternalProcess(command, out, err);
        p.run();
        return (p.status()==0);
    }
    
    /**
     * Executes the external process sent as parameter
     * @param command The external process (including arguments) to be executed
     * @param out Stream used for reporting the output messages generated by the exteernal process
     * @param err Stream used for reporting the error messages generated by the exteernal process
     * @return <i>true</i> if the command was executed without errors, <i>false</i> otherwise
     */
    public static boolean run( String command, PrintStream out, PrintStream err ){
        ExternalProcess p = new ExternalProcess(command, out, err);
        p.run();
        return (p.status()==0);
    }
    
}
