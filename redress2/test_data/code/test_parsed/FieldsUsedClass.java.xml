<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Workspaces\General_kepler2\MetricTests\src\rfc\pum\FieldsUsedClass.java"><package>package <name><name>rfc</name>.<name>pum</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<class><specifier>public</specifier> class <name>FieldsUsedClass</name> <block>{

	<decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>field1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>field2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>numArray</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>iArray</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name><name>HashMap</name><argument_list>&lt;<argument><name>Integer</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>field3</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>field4</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FieldsUsedClass</name></type> <name>field5</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>String</name></type> <name>field6</name></decl>;</decl_stmt>

	<function><type><specifier>public</specifier> <name>int</name></type> <name>fieldsReadMethod</name><parameter_list>(<param><decl><type><name>int</name></type> <name>param1</name></decl></param>, <param><decl><type><name>String</name></type> <name>param2</name></decl></param>)</parameter_list> <block>{

		<expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>field1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>methodDummy</name><argument_list>(<argument><expr><name>field2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name><index>[]</index></type> <name>array</name> =<init> <expr>new <name><name>int</name><index>[<expr><name>numArray</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>array</name><index>[<expr><name>iArray</name></expr>]</index></name> = 12</expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><name>field3</name> = new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>Integer</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>field4</name> = new <call><name>String</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>field6</name> = <name>field4</name></expr>;</expr_stmt>

		<return>return <expr>0</expr>;</return>
	}</block></function>

	<function><type><specifier>public</specifier> <name>int</name></type> <name>fieldsReadMethod2</name><parameter_list>(<param><decl><type><name>int</name></type> <name>param1</name></decl></param>, <param><decl><type><name>String</name></type> <name>param2</name></decl></param>)</parameter_list> <block>{

		<decl_stmt><decl><type><name><name>Class</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name>String</name></extends></argument>&gt;</argument_list></name></type> <name>class1</name> =<init> <expr><call><name><name>field2</name>.<name>getClass</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>field5</name>.<name>field1</name></name> = new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr>0</expr>;</return>
	}</block></function>

	<function><type><specifier>public</specifier> <name>void</name></type> <name>fieldsWritten</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><name>field3</name> = new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>Integer</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>field4</name> = new <call><name>String</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>field6</name> = <name>field4</name></expr>;</expr_stmt>
	}</block></function>

	<function><type><specifier>private</specifier> <name>void</name></type> <name>methodDummy</name><parameter_list>(<param><decl><type><name>String</name></type> <name>field22</name></decl></param>)</parameter_list> <block>{
	}</block></function>

}</block></class>
</unit>
