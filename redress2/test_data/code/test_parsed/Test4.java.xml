<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\test_sys\Test4.java"><package>package <name>test</name>;</package>

<class><specifier>public</specifier> class <name><name>Class</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name> <super><extends>extends <name><name>Class2</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></extends> <implements>implements <name>Class3</name>, <name><name>Class4</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></implements></super> <block>{

	<function><type><specifier>public</specifier> <name>Type0</name></type> <name>method1</name> <parameter_list>(<param><decl><type><name>Type1</name></type> <name>param1</name></decl></param>, <param><decl><type><name>Type2</name></type> <name>param2</name></decl></param>)</parameter_list><block>{
		
		<decl_stmt><decl><type><name>Type3</name></type> <name>t</name>=<init><expr>new <call><name>Type3</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>Type4</name></expr> ;</expr_stmt>
		
		<expr_stmt><expr>new <call><name>Type5</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>new <call><name>Type15</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<return>return <expr>0</expr>;</return>
	}</block></function>

	<function><type><specifier>public</specifier> <name><name>Type51</name>.<name><name>Type6</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></name></type> <name>method2</name> <parameter_list>(<param><decl><type><name><name>Type7</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>param1</name></decl></param>, <param><decl><type><name><name>Type8</name>.<name>Type50</name></name></type> <name>param2</name></decl></param>)</parameter_list><block>{
		
		<decl_stmt><decl><type><specifier>final</specifier> <name><name>Type20</name>.<name>Type9</name></name></type> <name>t</name>=<init><expr>new <call><name>Type10</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>Type11</name></expr> ;</expr_stmt>
		
		<expr_stmt><expr>new <call><name><name>Type21</name>.<name>Type92</name>.<name><name>Type12</name><argument_list>&lt;<argument><name>Type100</name></argument>&gt;</argument_list></name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
		<return>return <expr>0</expr>;</return>
	}</block></function>
}</block></class>

<class><specifier>public</specifier> class <name>class111</name> <super><extends>extends <name>pack</name>.<name>class222</name></extends> <implements>implements <name>pack2</name>.<name>class333</name></implements></super><block>{
}</block></class>



<class><specifier>public</specifier> class <name>class44</name> <super><extends>extends <name>pack</name>.<name>class55</name></extends> <implements>implements <name>pack2</name>.<name>class66</name>, <name>pack3</name>.<name>class77</name></implements></super><block>{
}</block></class>
</unit>
