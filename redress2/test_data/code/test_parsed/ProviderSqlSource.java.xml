<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\mybatis-3-mybatis-3.2.6\src\main\java\org\apache\ibatis\builder\annotation\ProviderSqlSource.java"><comment type="block">/*
 *    Copyright 2009-2012 the original author or authors.
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>ibatis</name>.<name>builder</name>.<name>annotation</name></name>;</package>

<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name>.<name>Method</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashMap</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>ibatis</name>.<name>builder</name>.<name>BuilderException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>ibatis</name>.<name>builder</name>.<name>SqlSourceBuilder</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>ibatis</name>.<name>mapping</name>.<name>BoundSql</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>ibatis</name>.<name>mapping</name>.<name>SqlSource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>ibatis</name>.<name>session</name>.<name>Configuration</name></name>;</import>

<comment type="javadoc">/**
 * @author Clinton Begin
 */</comment>
<class><specifier>public</specifier> class <name>ProviderSqlSource</name> <super><implements>implements <name>SqlSource</name></implements></super> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <name>SqlSourceBuilder</name></type> <name>sqlSourceParser</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>providerType</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>Method</name></type> <name>providerMethod</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>providerTakesParameterObject</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>ProviderSqlSource</name><parameter_list>(<param><decl><type><name>Configuration</name></type> <name>config</name></decl></param>, <param><decl><type><name>Object</name></type> <name>provider</name></decl></param>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>String</name></type> <name>providerMethodName</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <try>try <block>{
      <expr_stmt><expr><name><name>this</name>.<name>sqlSourceParser</name></name> = new <call><name>SqlSourceBuilder</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name>.<name>providerType</name></name> = (<name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name>) <call><name><name>provider</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getMethod</name><argument_list>(<argument><expr>"type"</expr></argument>)</argument_list></call>.<call><name>invoke</name><argument_list>(<argument><expr><name>provider</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>providerMethodName</name> = (<name>String</name>) <call><name><name>provider</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getMethod</name><argument_list>(<argument><expr>"method"</expr></argument>)</argument_list></call>.<call><name>invoke</name><argument_list>(<argument><expr><name>provider</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <for>for (<init><decl><type><name>Method</name></type> <name>m</name> :<range> <expr><call><name><name>this</name>.<name>providerType</name>.<name>getMethods</name></name><argument_list>()</argument_list></call></expr></range></decl></init>) <block>{
        <if>if <condition>(<expr><call><name><name>providerMethodName</name>.<name>equals</name></name><argument_list>(<argument><expr><call><name><name>m</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <if>if <condition>(<expr><call><name><name>m</name>.<name>getParameterTypes</name></name><argument_list>()</argument_list></call>.<name>length</name> &lt; 2
              &amp;&amp; <call><name><name>m</name>.<name>getReturnType</name></name><argument_list>()</argument_list></call> == <name><name>String</name>.<name><name/></name></name>class</expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>providerMethod</name></name> = <name>m</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>providerTakesParameterObject</name></name> = <call><name><name>m</name>.<name>getParameterTypes</name></name><argument_list>()</argument_list></call>.<name>length</name> == 1</expr>;</expr_stmt>
          }</block></then></if>
        }</block></then></if>
      }</block></for>
    }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
      <throw>throw <expr>new <call><name>BuilderException</name><argument_list>(<argument><expr>"Error creating SqlSource for SqlProvider.  Cause: " + <name>e</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>
    <if>if <condition>(<expr><name><name>this</name>.<name>providerMethod</name></name> == <name>null</name></expr>)</condition><then> <block>{
      <throw>throw <expr>new <call><name>BuilderException</name><argument_list>(<argument><expr>"Error creating SqlSource for SqlProvider. Method '"
          + <name>providerMethodName</name> + "' not found in SqlProvider '" + <call><name><name>this</name>.<name>providerType</name>.<name>getName</name></name><argument_list>()</argument_list></call> + "'."</expr></argument>)</argument_list></call></expr>;</throw>
    }</block></then></if>
  }</block></constructor>

  <function><type><specifier>public</specifier> <name>BoundSql</name></type> <name>getBoundSql</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>parameterObject</name></decl></param>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>SqlSource</name></type> <name>sqlSource</name> =<init> <expr><call><name>createSqlSource</name><argument_list>(<argument><expr><name>parameterObject</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name><name>sqlSource</name>.<name>getBoundSql</name></name><argument_list>(<argument><expr><name>parameterObject</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><type><specifier>private</specifier> <name>SqlSource</name></type> <name>createSqlSource</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>parameterObject</name></decl></param>)</parameter_list> <block>{
    <try>try <block>{
      <decl_stmt><decl><type><name>String</name></type> <name>sql</name></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>providerTakesParameterObject</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>sql</name> = (<name>String</name>) <call><name><name>providerMethod</name>.<name>invoke</name></name><argument_list>(<argument><expr><call><name><name>providerType</name>.<name>newInstance</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>parameterObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><name>sql</name> = (<name>String</name>) <call><name><name>providerMethod</name>.<name>invoke</name></name><argument_list>(<argument><expr><call><name><name>providerType</name>.<name>newInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
      <decl_stmt><decl><type><name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>parameterType</name> =<init> <expr><name>parameterObject</name> == <name>null</name> ? <name><name>Object</name>.<name><name/></name></name>class : <call><name><name>parameterObject</name>.<name>getClass</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><call><name><name>sqlSourceParser</name>.<name>parse</name></name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><name>parameterType</name></expr></argument>, <argument><expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
      <throw>throw <expr>new <call><name>BuilderException</name><argument_list>(<argument><expr>"Error invoking SqlProvider method ("
          + <call><name><name>providerType</name>.<name>getName</name></name><argument_list>()</argument_list></call> + "." + <call><name><name>providerMethod</name>.<name>getName</name></name><argument_list>()</argument_list></call>
          + ").  Cause: " + <name>e</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>
  }</block></function>

}</block></class>
</unit>
