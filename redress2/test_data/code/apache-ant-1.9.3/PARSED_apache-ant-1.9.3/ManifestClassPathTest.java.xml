<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\taskdefs\ManifestClassPathTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>


<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildFileTest</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>condition</name>.<name>Os</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>regexp</name>.<name>RegexpMatcherFactory</name></name>;</import>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>

<comment type="javadoc">/**
 * Tests &amp;lt;bm:manifestclasspath&amp;gt;.
 */</comment>
<class><specifier>public</specifier> class <name>ManifestClassPathTest</name>
             <super><extends>extends <name>BuildFileTest</name></extends></super> <block>{

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr>"src/etc/testcases/taskdefs/manifestclasspath.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testBadDirectory</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildExceptionContaining</name><argument_list>(<argument><expr>"test-bad-directory"</expr></argument>, <argument><expr>"bad-jar-dir"</expr></argument>,
                                       <argument><expr>"Jar's directory not found:"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertPropertyUnset</name><argument_list>(<argument><expr>"jar.classpath"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testBadNoProperty</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildExceptionContaining</name><argument_list>(<argument><expr>"test-bad-no-property"</expr></argument>, <argument><expr>"no-property"</expr></argument>,
                                       <argument><expr>"Missing 'property' attribute!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertPropertyUnset</name><argument_list>(<argument><expr>"jar.classpath"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testBadPropertyExists</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildExceptionContaining</name><argument_list>(<argument><expr>"test-bad-property-exists"</expr></argument>,
            <argument><expr>"property-exits"</expr></argument>, <argument><expr>"Property 'jar.classpath' already set!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertPropertyEquals</name><argument_list>(<argument><expr>"jar.classpath"</expr></argument>, <argument><expr>"exists"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testBadNoJarfile</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildExceptionContaining</name><argument_list>(<argument><expr>"test-bad-no-jarfile"</expr></argument>, <argument><expr>"no-jarfile"</expr></argument>,
                                       <argument><expr>"Missing 'jarfile' attribute!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertPropertyUnset</name><argument_list>(<argument><expr>"jar.classpath"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testBadNoClassPath</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildExceptionContaining</name><argument_list>(<argument><expr>"test-bad-no-classpath"</expr></argument>, <argument><expr>"no-classpath"</expr></argument>,
                                       <argument><expr>"Missing nested &lt;classpath&gt;!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertPropertyUnset</name><argument_list>(<argument><expr>"jar.classpath"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testParentLevel1</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"test-parent-level1"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertPropertyEquals</name><argument_list>(<argument><expr>"jar.classpath"</expr></argument>, <argument><expr>"dsp-core/ " +
                                              "dsp-pres/ " +
                                              "dsp-void/ " +
                                              "../generated/dsp-core/ " +
                                              "../generated/dsp-pres/ " +
                                              "../generated/dsp-void/ " +
                                              "../resources/dsp-core/ " +
                                              "../resources/dsp-pres/ " +
                                              "../resources/dsp-void/"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testParentLevel2</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"test-parent-level2"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertPropertyEquals</name><argument_list>(<argument><expr>"jar.classpath"</expr></argument>, <argument><expr>"../dsp-core/ " +
                                              "../dsp-pres/ " +
                                              "../dsp-void/ " +
                                              "../../generated/dsp-core/ " +
                                              "../../generated/dsp-pres/ " +
                                              "../../generated/dsp-void/ " +
                                              "../../resources/dsp-core/ " +
                                              "../../resources/dsp-pres/ " +
                                              "../../resources/dsp-void/"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testParentLevel2TooDeep</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildExceptionContaining</name><argument_list>(<argument><expr>"test-parent-level2-too-deep"</expr></argument>, <argument><expr>"nopath"</expr></argument>,
                                       <argument><expr>"No suitable relative path from "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertPropertyUnset</name><argument_list>(<argument><expr>"jar.classpath"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testPseudoTahoeRefid</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr>!<call><name><name>RegexpMatcherFactory</name>.<name>regexpMatcherPresent</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Test 'testPseudoTahoeRefid' skipped because no regexp matcher is present."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"test-pseudo-tahoe-refid"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertPropertyEquals</name><argument_list>(<argument><expr>"jar.classpath"</expr></argument>, <argument><expr>"classes/dsp-core/ " +
                                              "classes/dsp-pres/ " +
                                              "classes/dsp-void/ " +
                                              "generated/dsp-core/ " +
                                              "resources/dsp-core/ " +
                                              "resources/dsp-pres/"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testPseudoTahoeNested</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr>!<call><name><name>RegexpMatcherFactory</name>.<name>regexpMatcherPresent</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Test 'testPseudoTahoeNested' skipped because no regexp matcher is present."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"test-pseudo-tahoe-nested"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertPropertyEquals</name><argument_list>(<argument><expr>"jar.classpath"</expr></argument>, <argument><expr>"classes/dsp-core/ " +
                                              "classes/dsp-pres/ " +
                                              "classes/dsp-void/ " +
                                              "generated/dsp-core/ " +
                                              "resources/dsp-core/ " +
                                              "resources/dsp-pres/"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testParentLevel2WithJars</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"test-parent-level2-with-jars"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertPropertyEquals</name><argument_list>(<argument><expr>"jar.classpath"</expr></argument>, <argument><expr>"../../lib/acme-core.jar " +
                                              "../../lib/acme-pres.jar " +
                                              "../dsp-core/ " +
                                              "../dsp-pres/ " +
                                              "../dsp-void/ " +
                                              "../../generated/dsp-core/ " +
                                              "../../generated/dsp-pres/ " +
                                              "../../generated/dsp-void/ " +
                                              "../../resources/dsp-core/ " +
                                              "../../resources/dsp-pres/ " +
                                              "../../resources/dsp-void/"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testInternationalGerman</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"international-german"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>expectLogContaining</name><argument_list>(<argument><expr>"run-two-jars"</expr></argument>, <argument><expr>"beta alpha"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testInternationalHebrew</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr>!<call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr>"windows"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"international-hebrew"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>expectLogContaining</name><argument_list>(<argument><expr>"run-two-jars"</expr></argument>, <argument><expr>"beta alpha"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Test with hebrew path not attempted under Windows"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testSameWindowsDrive</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr>!<call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr>"windows"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Test with drive letters only run on windows"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testSameDrive"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertPropertyEquals</name><argument_list>(<argument><expr>"cp"</expr></argument>, <argument><expr>"../a/b/x.jar"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testDifferentWindowsDrive</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr>!<call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr>"windows"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Test with drive letters only run on windows"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <comment type="line">// the lines below try to find a drive name different than the one containing the temp dir</comment>
            <comment type="line">// if the temp dir is C will try to use D</comment>
            <comment type="line">// if the temp dir is on D or other will try to use C</comment>
            <decl_stmt><decl><type><name>File</name></type> <name>tmpdir</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"java.io.tmpdir"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>driveLetter</name> =<init> <expr>"C"</expr></init></decl>;</decl_stmt>
            <try>try <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>tmpCanonicalPath</name> =<init> <expr><call><name><name>tmpdir</name>.<name>getCanonicalPath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>driveLetter</name> = <call><name><name>tmpCanonicalPath</name>.<name>substring</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call>.<call><name>toUpperCase</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ioe</name></decl></param>) <block>{
                <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"exception happened getting canonical path of java.io.tmpdir : " + <call><name><name>ioe</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
            <decl_stmt><decl><type><name>String</name></type> <name>altDriveLetter</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <try>try <block>{
                <if>if <condition>(<expr>"C".<call><name>equals</name><argument_list>(<argument><expr><name>driveLetter</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>altDriveLetter</name> = "D"</expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><name>altDriveLetter</name> = "C"</expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr>new <call><name><name>java</name>.<name>io</name>.<name>File</name></name><argument_list>(<argument><expr><name>altDriveLetter</name> + ":/foo.txt"</expr></argument>)</argument_list></call>.<call><name>getCanonicalPath</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name><name>java</name>.<name>io</name>.<name>IOException</name></name></type> <name>e</name></decl></param>) <block>{
                <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"drive " + <name>altDriveLetter</name> + ": doesn't exist or is not ready,"
                                   + " skipping test"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            }</block></catch></try>
            <expr_stmt><expr><call><name><name>project</name>.<name>setProperty</name></name><argument_list>(<argument><expr>"altDriveLetter"</expr></argument>, <argument><expr><name>altDriveLetter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>expectBuildExceptionContaining</name><argument_list>(<argument><expr>"testDifferentDrive"</expr></argument>,
                                           <argument><expr>"different drive"</expr></argument>,
                                           <argument><expr>"No suitable relative path from "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertPropertyUnset</name><argument_list>(<argument><expr>"cp"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>
}</block></class> <comment type="line">// END class ManifestClassPathTest</comment>

</unit>
