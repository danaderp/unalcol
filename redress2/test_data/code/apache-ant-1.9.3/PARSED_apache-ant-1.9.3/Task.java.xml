<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\Task.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>dispatch</name>.<name>DispatchUtils</name></name>;</import>

<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>

<comment type="javadoc">/**
 * Base class for all tasks.
 *
 * Use Project.createTask to create a new task instance rather than
 * using this class directly for construction.
 *
 * @see Project#createTask
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>Task</name> <super><extends>extends <name>ProjectComponent</name></extends></super> <block>{
    <comment type="line">// CheckStyle:VisibilityModifier OFF - bc</comment>
    <comment type="javadoc">/**
     * Target this task belongs to, if any.
     * @deprecated since 1.6.x.
     *             You should not be accessing this variable directly.
     *             Please use the {@link #getOwningTarget()} method.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Target</name></type> <name>target</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Name of this task to be used for logging purposes.
     * This defaults to the same as the type, but may be
     * overridden by the user. For instance, the name "java"
     * isn't terribly descriptive for a task used within
     * another task - the outer task code can probably
     * provide a better one.
     * @deprecated since 1.6.x.
     *             You should not be accessing this variable directly.
     *             Please use the {@link #getTaskName()} method.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>taskName</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Type of this task.
     *
     * @deprecated since 1.6.x.
     *             You should not be accessing this variable directly.
     *             Please use the {@link #getTaskType()} method.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>taskType</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Wrapper for this object, used to configure it at runtime.
     *
     * @deprecated since 1.6.x.
     *             You should not be accessing this variable directly.
     *             Please use the {@link #getWrapper()} method.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>RuntimeConfigurable</name></type> <name>wrapper</name></decl>;</decl_stmt>

    <comment type="line">// CheckStyle:VisibilityModifier ON</comment>

    <comment type="javadoc">/**
     * Whether or not this task is invalid. A task becomes invalid
     * if a conflicting class is specified as the implementation for
     * its type.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>invalid</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Sole constructor. */</comment>
    <constructor><specifier>public</specifier> <name>Task</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <comment type="javadoc">/**
     * Sets the target container of this task.
     *
     * @param target Target in whose scope this task belongs.
     *               May be &lt;code&gt;null&lt;/code&gt;, indicating a top-level task.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOwningTarget</name><parameter_list>(<param><decl><type><name>Target</name></type> <name>target</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>target</name></name> = <name>target</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the container target of this task.
     *
     * @return The target containing this task, or &lt;code&gt;null&lt;/code&gt; if
     *         this task is a top-level task.
     */</comment>
    <function><type><specifier>public</specifier> <name>Target</name></type> <name>getOwningTarget</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>target</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the name to use in logging messages.
     *
     * @param name The name to use in logging messages.
     *             Should not be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTaskName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>taskName</name></name> = <name>name</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the name to use in logging messages.
     *
     * @return the name to use in logging messages.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getTaskName</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>taskName</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the name with which the task has been invoked.
     *
     * @param type The name the task has been invoked as.
     *             Should not be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTaskType</name><parameter_list>(<param><decl><type><name>String</name></type> <name>type</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>taskType</name></name> = <name>type</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Called by the project to let the task initialize properly.
     * The default implementation is a no-op.
     *
     * @exception BuildException if something goes wrong with the build
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>init</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
    }</block></function>

    <comment type="javadoc">/**
     * Called by the project to let the task do its work. This method may be
     * called more than once, if the task is invoked more than once.
     * For example,
     * if target1 and target2 both depend on target3, then running
     * "ant target1 target2" will run all tasks in target3 twice.
     *
     * @exception BuildException if something goes wrong with the build.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
    }</block></function>

    <comment type="javadoc">/**
     * Returns the wrapper used for runtime configuration.
     *
     * @return the wrapper used for runtime configuration. This
     *         method will generate a new wrapper (and cache it)
     *         if one isn't set already.
     */</comment>
    <function><type><specifier>public</specifier> <name>RuntimeConfigurable</name></type> <name>getRuntimeConfigurableWrapper</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>wrapper</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>wrapper</name> = new <call><name>RuntimeConfigurable</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>getTaskName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>wrapper</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the wrapper to be used for runtime configuration.
     *
     * This method should be used only by the ProjectHelper and Ant internals.
     * It is public to allow helper plugins to operate on tasks, normal tasks
     * should never use it.
     *
     * @param wrapper The wrapper to be used for runtime configuration.
     *                May be &lt;code&gt;null&lt;/code&gt;, in which case the next call
     *                to getRuntimeConfigurableWrapper will generate a new
     *                wrapper.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRuntimeConfigurableWrapper</name><parameter_list>(<param><decl><type><name>RuntimeConfigurable</name></type> <name>wrapper</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>wrapper</name></name> = <name>wrapper</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// TODO: (Jon Skeet) The comment "if it hasn't been done already" may</comment>
    <comment type="line">// not be strictly true. wrapper.maybeConfigure() won't configure the same</comment>
    <comment type="line">// attributes/text more than once, but it may well add the children again,</comment>
    <comment type="line">// unless I've missed something.</comment>
    <comment type="javadoc">/**
     * Configures this task - if it hasn't been done already.
     * If the task has been invalidated, it is replaced with an
     * UnknownElement task which uses the new definition in the project.
     *
     * @exception BuildException if the task cannot be configured.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>maybeConfigure</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr>!<name>invalid</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>wrapper</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>wrapper</name>.<name>maybeConfigure</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>getReplacement</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Force the task to be reconfigured from its RuntimeConfigurable.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>reconfigure</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>wrapper</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>wrapper</name>.<name>reconfigure</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Handles output by logging it with the INFO priority.
     *
     * @param output The output to log. Should not be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>handleOutput</name><parameter_list>(<param><decl><type><name>String</name></type> <name>output</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Handles output by logging it with the INFO priority.
     *
     * @param output The output to log. Should not be &lt;code&gt;null&lt;/code&gt;.
     *
     * @since Ant 1.5.2
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>handleFlush</name><parameter_list>(<param><decl><type><name>String</name></type> <name>output</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>handleOutput</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Handle an input request by this task.
     *
     * @param buffer the buffer into which data is to be read.
     * @param offset the offset into the buffer at which data is stored.
     * @param length the amount of data to read.
     *
     * @return the number of bytes read.
     *
     * @exception IOException if the data cannot be read.
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>protected</specifier> <name>int</name></type> <name>handleInput</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buffer</name></decl></param>, <param><decl><type><name>int</name></type> <name>offset</name></decl></param>, <param><decl><type><name>int</name></type> <name>length</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>defaultInput</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Handles an error output by logging it with the WARN priority.
     *
     * @param output The error output to log. Should not be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>handleErrorOutput</name><parameter_list>(<param><decl><type><name>String</name></type> <name>output</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Handles an error line by logging it with the WARN priority.
     *
     * @param output The error output to log. Should not be &lt;code&gt;null&lt;/code&gt;.
     *
     * @since Ant 1.5.2
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>handleErrorFlush</name><parameter_list>(<param><decl><type><name>String</name></type> <name>output</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>handleErrorOutput</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Logs a message with the default (INFO) priority.
     *
     * @param msg The message to be logged. Should not be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>log</name><parameter_list>(<param><decl><type><name>String</name></type> <name>msg</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Logs a message with the given priority. This delegates
     * the actual logging to the project.
     *
     * @param msg The message to be logged. Should not be &lt;code&gt;null&lt;/code&gt;.
     * @param msgLevel The message priority at which this message is to
     *                 be logged.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>log</name><parameter_list>(<param><decl><type><name>String</name></type> <name>msg</name></decl></param>, <param><decl><type><name>int</name></type> <name>msgLevel</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>getProject</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>log</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>super</name>.<name>log</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Logs a message with the given priority. This delegates
     * the actual logging to the project.
     *
     * @param t The exception to be logged. Should not be &lt;code&gt;null&lt;/code&gt;.
     * @param msgLevel The message priority at which this message is to
     *                 be logged.
     * @since 1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>log</name><parameter_list>(<param><decl><type><name>Throwable</name></type> <name>t</name></decl></param>, <param><decl><type><name>int</name></type> <name>msgLevel</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>t</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><call><name><name>t</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>msgLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Logs a message with the given priority. This delegates
     * the actual logging to the project.
     *
     * @param msg The message to be logged. Should not be &lt;code&gt;null&lt;/code&gt;.
     * @param t The exception to be logged. May be &lt;code&gt;null&lt;/code&gt;.
     * @param msgLevel The message priority at which this message is to
     *                 be logged.
     * @since 1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>log</name><parameter_list>(<param><decl><type><name>String</name></type> <name>msg</name></decl></param>, <param><decl><type><name>Throwable</name></type> <name>t</name></decl></param>, <param><decl><type><name>int</name></type> <name>msgLevel</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>getProject</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>log</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>msgLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>super</name>.<name>log</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Performs this task if it's still valid, or gets a replacement
     * version and performs that otherwise.
     *
     * Performing a task consists of firing a task started event,
     * configuring the task, executing it, and then firing task finished
     * event. If a runtime exception is thrown, the task finished event
     * is still fired, but with the exception as the cause.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>perform</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr>!<name>invalid</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>fireTaskStarted</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Throwable</name></type> <name>reason</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <try>try <block>{
                <expr_stmt><expr><call><name>maybeConfigure</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>DispatchUtils</name>.<name>execute</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>ex</name></decl></param>) <block>{
                <if>if <condition>(<expr><call><name><name>ex</name>.<name>getLocation</name></name><argument_list>()</argument_list></call> == <name><name>Location</name>.<name>UNKNOWN_LOCATION</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>ex</name>.<name>setLocation</name></name><argument_list>(<argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name>reason</name> = <name>ex</name></expr>;</expr_stmt>
                <throw>throw <expr><name>ex</name></expr>;</throw>
            }</block></catch> <catch>catch (<param><decl><type><name>Exception</name></type> <name>ex</name></decl></param>) <block>{
                <expr_stmt><expr><name>reason</name> = <name>ex</name></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>BuildException</name></type> <name>be</name> =<init> <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>be</name>.<name>setLocation</name></name><argument_list>(<argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <throw>throw <expr><name>be</name></expr>;</throw>
            }</block></catch> <catch>catch (<param><decl><type><name>Error</name></type> <name>ex</name></decl></param>) <block>{
                <expr_stmt><expr><name>reason</name> = <name>ex</name></expr>;</expr_stmt>
                <throw>throw <expr><name>ex</name></expr>;</throw>
            }</block></catch> <finally>finally <block>{
                <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>fireTaskFinished</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></finally></try>
        }</block></then> <else>else <block>{
            <decl_stmt><decl><type><name>UnknownElement</name></type> <name>ue</name> =<init> <expr><call><name>getReplacement</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Task</name></type> <name>task</name> =<init> <expr><call><name><name>ue</name>.<name>getTask</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>task</name>.<name>perform</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Marks this task as invalid. Any further use of this task
     * will go through a replacement with the updated definition.
     */</comment>
    <function><type><specifier>final</specifier> <name>void</name></type> <name>markInvalid</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>invalid</name> = true</expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Has this task been marked invalid?
     *
     * @return true if this task is no longer valid. A new task should be
     * configured in this case.
     *
     * @since Ant 1.5
     */</comment>
    <function><type><specifier>protected</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>isInvalid</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>invalid</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Replacement element used if this task is invalidated.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>UnknownElement</name></type> <name>replacement</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates an UnknownElement that can be used to replace this task.
     * Once this has been created once, it is cached and returned by
     * future calls.
     *
     * @return the UnknownElement instance for the new definition of this task.
     */</comment>
    <function><type><specifier>private</specifier> <name>UnknownElement</name></type> <name>getReplacement</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>replacement</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>replacement</name> = new <call><name>UnknownElement</name><argument_list>(<argument><expr><name>taskType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>replacement</name>.<name>setProject</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>replacement</name>.<name>setTaskType</name></name><argument_list>(<argument><expr><name>taskType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>replacement</name>.<name>setTaskName</name></name><argument_list>(<argument><expr><name>taskName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>replacement</name>.<name>setLocation</name></name><argument_list>(<argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>replacement</name>.<name>setOwningTarget</name></name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>replacement</name>.<name>setRuntimeConfigurableWrapper</name></name><argument_list>(<argument><expr><name>wrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>wrapper</name>.<name>setProxy</name></name><argument_list>(<argument><expr><name>replacement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>replaceChildren</name><argument_list>(<argument><expr><name>wrapper</name></expr></argument>, <argument><expr><name>replacement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>target</name>.<name>replaceChild</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>replacement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>replacement</name>.<name>maybeConfigure</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>replacement</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Recursively adds an UnknownElement instance for each child
     * element of replacement.
     *
     * @since Ant 1.5.1
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>replaceChildren</name><parameter_list>(<param><decl><type><name>RuntimeConfigurable</name></type> <name>wrapper</name></decl></param>,
                                 <param><decl><type><name>UnknownElement</name></type> <name>parentElement</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>Enumeration</name><argument_list>&lt;<argument><name>RuntimeConfigurable</name></argument>&gt;</argument_list></name></type> <name>e</name> =<init> <expr><call><name><name>wrapper</name>.<name>getChildren</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>RuntimeConfigurable</name></type> <name>childWrapper</name> =<init> <expr><call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>UnknownElement</name></type> <name>childElement</name> =<init>
                <expr>new <call><name>UnknownElement</name><argument_list>(<argument><expr><call><name><name>childWrapper</name>.<name>getElementTag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>parentElement</name>.<name>addChild</name></name><argument_list>(<argument><expr><name>childElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>childElement</name>.<name>setProject</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>childElement</name>.<name>setRuntimeConfigurableWrapper</name></name><argument_list>(<argument><expr><name>childWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>childWrapper</name>.<name>setProxy</name></name><argument_list>(<argument><expr><name>childElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>replaceChildren</name><argument_list>(<argument><expr><name>childWrapper</name></expr></argument>, <argument><expr><name>childElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
    }</block></function>

    <comment type="javadoc">/**
     * Return the type of task.
     *
     * @return the type of task.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getTaskType</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>taskType</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Return the runtime configurable structure for this task.
     *
     * @return the runtime structure for this task.
     */</comment>
    <function><type><specifier>protected</specifier> <name>RuntimeConfigurable</name></type> <name>getWrapper</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>wrapper</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Bind a task to another; use this when configuring a newly created
     * task to do work on behalf of another.
     * Project, OwningTarget, TaskName, Location and Description are all copied
     *
     * Important: this method does not call {@link Task#init()}.
     * If you are creating a task to delegate work to, call {@link Task#init()}
     * to initialize it.
     *
     * @param owner owning target
     * @since Ant1.7
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>bindToOwner</name><parameter_list>(<param><decl><type><name>Task</name></type> <name>owner</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setProject</name><argument_list>(<argument><expr><call><name><name>owner</name>.<name>getProject</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setOwningTarget</name><argument_list>(<argument><expr><call><name><name>owner</name>.<name>getOwningTarget</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setTaskName</name><argument_list>(<argument><expr><call><name><name>owner</name>.<name>getTaskName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setDescription</name><argument_list>(<argument><expr><call><name><name>owner</name>.<name>getDescription</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setLocation</name><argument_list>(<argument><expr><call><name><name>owner</name>.<name>getLocation</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setTaskType</name><argument_list>(<argument><expr><call><name><name>owner</name>.<name>getTaskType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
