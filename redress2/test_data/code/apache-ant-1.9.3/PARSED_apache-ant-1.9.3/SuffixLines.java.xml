<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\filters\SuffixLines.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>filters</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Reader</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Parameter</name></name>;</import>

<comment type="javadoc">/**
 * Attaches a suffix to every line.
 *
 * Example:
 * &lt;pre&gt;&amp;lt;suffixlines suffix=&amp;quot;Foo&amp;quot;/&amp;gt;&lt;/pre&gt;
 *
 * Or:
 *
 * &lt;pre&gt;&amp;lt;filterreader classname=&amp;quot;org.apache.tools.ant.filters.SuffixLines&amp;quot;&amp;gt;
 *  &amp;lt;param name=&amp;quot;suffix&amp;quot; value=&amp;quot;Foo&amp;quot;/&amp;gt;
 * &amp;lt;/filterreader&amp;gt;&lt;/pre&gt;
 *
 * @since Ant 1.8.0
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>SuffixLines</name>
    <super><extends>extends <name>BaseParamFilterReader</name></extends>
    <implements>implements <name>ChainableReader</name></implements></super> <block>{
    <comment type="javadoc">/** Parameter name for the prefix. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SUFFIX_KEY</name> =<init> <expr>"suffix"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The suffix to be used. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>suffix</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Data that must be read from, if not null. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>queuedData</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructor for "dummy" instances.
     *
     * @see BaseFilterReader#BaseFilterReader()
     */</comment>
    <constructor><specifier>public</specifier> <name>SuffixLines</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a new filtered reader.
     *
     * @param in A Reader object providing the underlying stream.
     *           Must not be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <constructor><specifier>public</specifier> <name>SuffixLines</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Reader</name></type> <name>in</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the next character in the filtered stream. One line is read
     * from the original input, and the suffix added. The resulting
     * line is then used until it ends, at which point the next original line
     * is read, etc.
     *
     * @return the next character in the resulting stream, or -1
     * if the end of the resulting stream has been reached
     *
     * @exception IOException if the underlying stream throws an IOException
     * during reading
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>read</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr>!<call><name>getInitialized</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>initialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setInitialized</name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name>int</name></type> <name>ch</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>queuedData</name> != <name>null</name> &amp;&amp; <call><name><name>queuedData</name>.<name>length</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>queuedData</name> = <name>null</name></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>queuedData</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>ch</name> = <call><name><name>queuedData</name>.<name>charAt</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>queuedData</name> = <call><name><name>queuedData</name>.<name>substring</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name><name>queuedData</name>.<name>length</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>queuedData</name> = <name>null</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>queuedData</name> = <call><name>readLine</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>queuedData</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>ch</name> = -1</expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <if>if <condition>(<expr><name>suffix</name> != <name>null</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>String</name></type> <name>lf</name> =<init> <expr>""</expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><call><name><name>queuedData</name>.<name>endsWith</name></name><argument_list>(<argument><expr>"\r\n"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>lf</name> = "\r\n"</expr>;</expr_stmt>
                    }</block></then> <else>else <if>if <condition>(<expr><call><name><name>queuedData</name>.<name>endsWith</name></name><argument_list>(<argument><expr>"\n"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>lf</name> = "\n"</expr>;</expr_stmt>
                    }</block></then></if></else></if>
                    <expr_stmt><expr><name>queuedData</name> =
                        <call><name><name>queuedData</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>,
                                             <argument><expr><call><name><name>queuedData</name>.<name>length</name></name><argument_list>()</argument_list></call> - <call><name><name>lf</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                        + <name>suffix</name> + <name>lf</name></expr>;</expr_stmt>
                }</block></then></if>
                <return>return <expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</return>
            }</block></else></if>
        }</block></else></if>
        <return>return <expr><name>ch</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the suffix to add at the end of each input line.
     *
     * @param suffix The suffix to add at the end of each input line.
     *               May be &lt;code&gt;null&lt;/code&gt;, in which case no suffix
     *               is added.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSuffix</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>suffix</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>suffix</name></name> = <name>suffix</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the suffix which will be added at the end of each input line.
     *
     * @return the suffix which will be added at the end of each input line
     */</comment>
    <function><type><specifier>private</specifier> <name>String</name></type> <name>getSuffix</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>suffix</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Creates a new SuffixLines filter using the passed in
     * Reader for instantiation.
     *
     * @param rdr A Reader object providing the underlying stream.
     *            Must not be &lt;code&gt;null&lt;/code&gt;.
     *
     * @return a new filter based on this configuration, but filtering
     *         the specified reader
     */</comment>
    <function><type><specifier>public</specifier> <name>Reader</name></type> <name>chain</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Reader</name></type> <name>rdr</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>SuffixLines</name></type> <name>newFilter</name> =<init> <expr>new <call><name>SuffixLines</name><argument_list>(<argument><expr><name>rdr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>newFilter</name>.<name>setSuffix</name></name><argument_list>(<argument><expr><call><name>getSuffix</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>newFilter</name>.<name>setInitialized</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>newFilter</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Initializes the suffix if it is available from the parameters.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>initialize</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Parameter</name><index>[]</index></type> <name>params</name> =<init> <expr><call><name>getParameters</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>params</name> != <name>null</name></expr>)</condition><then> <block>{
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>params</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <if>if <condition>(<expr><call><name><name>SUFFIX_KEY</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>params</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>suffix</name> = <name><name>params</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>getValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                }</block></then></if>
            }</block></for>
        }</block></then></if>
    }</block></function>
}</block></class>
</unit>
