<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\Jikes.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>BufferedWriter</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileWriter</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Locale</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>

<comment type="javadoc">/**
 * Encapsulates a Jikes compiler, by directly executing an external
 * process.
 *
 * &lt;p&gt;&lt;strong&gt;As of Ant 1.2, this class is considered to be dead code
 * by the Ant developers and is unmaintained.  Don't use
 * it.&lt;/strong&gt;&lt;/p&gt;
 *
 * @deprecated since 1.2.
 *             Merged into the class Javac.
 */</comment>
<class><specifier>public</specifier> class <name>Jikes</name> <block>{
    <comment type="line">// There have been reports that 300 files could be compiled</comment>
    <comment type="line">// on a command line so 250 is a conservative approach</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MAX_FILES_ON_COMMAND_LINE</name> =<init> <expr>250</expr></init></decl>;</decl_stmt>
    <comment type="line">// CheckStyle:VisibilityModifier OFF - bc</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>JikesOutputParser</name></type> <name>jop</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>command</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Project</name></type> <name>project</name></decl>;</decl_stmt>
    <comment type="line">// CheckStyle:VisibilityModifier ON</comment>

    <comment type="javadoc">/**
     * Constructs a new Jikes object.
     * @param jop      Parser to send jike's output to
     * @param command  name of jikes executable
     * @param project  the current project
     */</comment>
    <constructor><specifier>protected</specifier> <name>Jikes</name><parameter_list>(<param><decl><type><name>JikesOutputParser</name></type> <name>jop</name></decl></param>, <param><decl><type><name>String</name></type> <name>command</name></decl></param>, <param><decl><type><name>Project</name></type> <name>project</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"As of Ant 1.2 released in October 2000, "
            + "the Jikes class"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"is considered to be dead code by the Ant "
            + "developers and is unmaintained."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"Don\'t use it!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name>.<name>jop</name></name> = <name>jop</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>command</name></name> = <name>command</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>project</name></name> = <name>project</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Do the compile with the specified arguments.
     * @param args - arguments to pass to process on command line
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>compile</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>commandArray</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>tmpFile</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

        <try>try <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>myos</name> =<init> <expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"os.name"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// Windows has a 32k limit on total arg size, so</comment>
            <comment type="line">// create a temporary file to store all the arguments</comment>

            <if>if <condition>(<expr><call><name><name>myos</name>.<name>toLowerCase</name></name><argument_list>(<argument><expr><name><name>Locale</name>.<name>ENGLISH</name></name></expr></argument>)</argument_list></call>.<call><name>indexOf</name><argument_list>(<argument><expr>"windows"</expr></argument>)</argument_list></call> &gt;= 0
                &amp;&amp; <name><name>args</name>.<name>length</name></name> &gt; <name>MAX_FILES_ON_COMMAND_LINE</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>BufferedWriter</name></type> <name>out</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <try>try <block>{
                    <expr_stmt><expr><name>tmpFile</name> = <call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call>.<call><name>createTempFile</name><argument_list>(<argument><expr>"jikes"</expr></argument>,
                            <argument><expr>"tmp"</expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>out</name> = new <call><name>BufferedWriter</name><argument_list>(<argument><expr>new <call><name>FileWriter</name><argument_list>(<argument><expr><name>tmpFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>args</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                        <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>out</name>.<name>newLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></for>
                    <expr_stmt><expr><call><name><name>out</name>.<name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>commandArray</name> = new <name><name>String</name><index>[]</index></name> <block>{<expr><name>command</name></expr>,
                                               <expr>"@" + <call><name><name>tmpFile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr>}</block></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Error creating temporary file"</expr></argument>,
                                             <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></catch> <finally>finally <block>{
                    <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></finally></try>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>commandArray</name> = new <name><name>String</name><index>[<expr><name><name>args</name>.<name>length</name></name> + 1</expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>commandArray</name><index>[<expr>0</expr>]</index></name> = <name>command</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>commandArray</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name><name>args</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

            <comment type="line">// We assume, that everything jikes writes goes to</comment>
            <comment type="line">// standard output, not to standard error. The option</comment>
            <comment type="line">// -Xstdout that is given to Jikes in Javac.doJikesCompile()</comment>
            <comment type="line">// should guarantee this. At least I hope so. :)</comment>
            <try>try <block>{
                <decl_stmt><decl><type><name>Execute</name></type> <name>exe</name> =<init> <expr>new <call><name>Execute</name><argument_list>(<argument><expr><name>jop</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>exe</name>.<name>setAntRun</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>exe</name>.<name>setWorkingDirectory</name></name><argument_list>(<argument><expr><call><name><name>project</name>.<name>getBaseDir</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>exe</name>.<name>setCommandline</name></name><argument_list>(<argument><expr><name>commandArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>exe</name>.<name>execute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Error running Jikes compiler"</expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block> <finally>finally <block>{
            <if>if <condition>(<expr><name>tmpFile</name> != <name>null</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr>!<call><name><name>tmpFile</name>.<name>delete</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>tmpFile</name>.<name>deleteOnExit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></finally></try>
    }</block></function>
}</block></class>
</unit>
