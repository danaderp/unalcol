<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\email\EmailAddress.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>email</name></name>;</package>

<comment type="javadoc">/**
 * Holds an email address.
 *
 * @since Ant 1.5
 */</comment>
<class><specifier>public</specifier> class <name>EmailAddress</name> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>address</name></decl>;</decl_stmt>


    <comment type="javadoc">/** Creates an empty email address  */</comment>
    <constructor><specifier>public</specifier> <name>EmailAddress</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>


    <comment type="javadoc">/**
     * Creates a new email address based on the given string
     *
     * @param email the email address (with or without &lt;&gt;)
     * Acceptable forms include:
     *    address
     *    &lt;address&gt;
     *    name &lt;address&gt;
     *    &lt;address&gt; name
     *    (name) address
     *    address (name)
     */</comment>
    <comment type="line">// Make a limited attempt to extract a sanitized name and email address</comment>
    <comment type="line">// Algorithm based on the one found in Ant's MailMessage.java</comment>
    <constructor><specifier>public</specifier> <name>EmailAddress</name><parameter_list>(<param><decl><type><name>String</name></type> <name>email</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>minLen</name> =<init> <expr>9</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>len</name> =<init> <expr><call><name><name>email</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// shortcut for "&lt;address&gt;"</comment>
        <if>if <condition>(<expr><name>len</name> &gt; <name>minLen</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr>(<call><name><name>email</name>.<name>charAt</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call> == '&lt;' || <call><name><name>email</name>.<name>charAt</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call> == '&lt;')
            &amp;&amp; (<call><name><name>email</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>len</name> - 1</expr></argument>)</argument_list></call> == '&gt;' || <call><name><name>email</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>len</name> - 2</expr></argument>)</argument_list></call> == '&gt;')</expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>this</name>.<name>address</name></name> = <call><name>trim</name><argument_list>(<argument><expr><name>email</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            }</block></then></if>
        }</block></then></if>

        <decl_stmt><decl><type><name>int</name></type> <name>paramDepth</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>start</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>end</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>nStart</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>nEnd</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>char</name></type> <name>c</name> =<init> <expr><call><name><name>email</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>c</name> == '('</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>paramDepth</name>++</expr>;</expr_stmt>
                <if>if <condition>(<expr><name>start</name> == 0</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>end</name> = <name>i</name></expr>;</expr_stmt>  <comment type="line">// support "address (name)"</comment>
                    <expr_stmt><expr><name>nStart</name> = <name>i</name> + 1</expr>;</expr_stmt>
                }</block></then></if>
            }</block></then> <else>else <if>if <condition>(<expr><name>c</name> == ')'</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>paramDepth</name>--</expr>;</expr_stmt>
                <if>if <condition>(<expr><name>end</name> == 0</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>start</name> = <name>i</name> + 1</expr>;</expr_stmt>  <comment type="line">// support "(name) address"</comment>
                    <expr_stmt><expr><name>nEnd</name> = <name>i</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then> <else>else <if>if <condition>(<expr><name>paramDepth</name> == 0 &amp;&amp; <name>c</name> == '&lt;'</expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>start</name> == 0</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>nEnd</name> = <name>i</name></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name>start</name> = <name>i</name> + 1</expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><name>paramDepth</name> == 0 &amp;&amp; <name>c</name> == '&gt;'</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>end</name> = <name>i</name></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>end</name> != <name>len</name> - 1</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>nStart</name> = <name>i</name> + 1</expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if></else></if></else></if></else></if>
        }</block></for>

        <comment type="line">// DEBUG: System.out.println( email );</comment>
        <if>if <condition>(<expr><name>end</name> == 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>end</name> = <name>len</name></expr>;</expr_stmt>
        }</block></then></if>
        <comment type="line">// DEBUG: System.out.println( "address: " + start + " " + end );</comment>
        <if>if <condition>(<expr><name>nEnd</name> == 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>nEnd</name> = <name>len</name></expr>;</expr_stmt>
        }</block></then></if>
        <comment type="line">// DEBUG: System.out.println( "name: " + nStart + " " + nEnd );</comment>

        <expr_stmt><expr><name><name>this</name>.<name>address</name></name> = <call><name>trim</name><argument_list>(<argument><expr><call><name><name>email</name>.<name>substring</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>name</name></name> = <call><name>trim</name><argument_list>(<argument><expr><call><name><name>email</name>.<name>substring</name></name><argument_list>(<argument><expr><name>nStart</name></expr></argument>, <argument><expr><name>nEnd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// if the two substrings are longer than the original, then name</comment>
        <comment type="line">// contains address - so reset the name to null</comment>
        <if>if <condition>(<expr><call><name><name>this</name>.<name>name</name>.<name>length</name></name><argument_list>()</argument_list></call> + <call><name><name>this</name>.<name>address</name>.<name>length</name></name><argument_list>()</argument_list></call> &gt; <name>len</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>name</name></name> = <name>null</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></constructor>

    <comment type="javadoc">/**
     *  A specialised trim() that trims whitespace,
     *  '(', ')', '"', '&lt;', '&gt;' from the start and end of strings
     */</comment>
    <function><type><specifier>private</specifier> <name>String</name></type> <name>trim</name><parameter_list>(<param><decl><type><name>String</name></type> <name>t</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>trimAngleBrackets</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>start</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>end</name> =<init> <expr><call><name><name>t</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>trim</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <do>do <block>{
            <expr_stmt><expr><name>trim</name> = false</expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name><name>t</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>end</name> - 1</expr></argument>)</argument_list></call> == ')'
                || (<call><name><name>t</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>end</name> - 1</expr></argument>)</argument_list></call> == '&gt;' &amp;&amp; <name>trimAngleBrackets</name>)
                || (<call><name><name>t</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>end</name> - 1</expr></argument>)</argument_list></call> == '"' &amp;&amp; <call><name><name>t</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>end</name> - 2</expr></argument>)</argument_list></call> != '\\')
                || <call><name><name>t</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>end</name> - 1</expr></argument>)</argument_list></call> &lt;= '\u0020'</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>trim</name> = true</expr>;</expr_stmt>
                <expr_stmt><expr><name>end</name>--</expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><call><name><name>t</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call> == '('
                || (<call><name><name>t</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call> == '&lt;' &amp;&amp; <name>trimAngleBrackets</name>)
                || <call><name><name>t</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call> == '"'
                || <call><name><name>t</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call> &lt;= '\u0020'</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>trim</name> = true</expr>;</expr_stmt>
                <expr_stmt><expr><name>start</name>++</expr>;</expr_stmt>
            }</block></then></if>
        }</block> while <condition>(<expr><name>trim</name></expr>)</condition>;</do>
        <return>return <expr><call><name><name>t</name>.<name>substring</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     * Sets the personal / display name of the address
     *
     * @param name the display name
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>name</name></name> = <name>name</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Sets the email address
     *
     * @param address the actual email address (without &lt;&gt;)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAddress</name><parameter_list>(<param><decl><type><name>String</name></type> <name>address</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>address</name></name> = <name>address</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Constructs a string "name &amp;lt;address&amp;gt;" or "address"
     *
     * @return a string representation of the address
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>name</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>address</name></expr>;</return>
        }</block></then> <else>else <block>{
            <return>return <expr><name>name</name> + " &lt;" + <name>address</name> + "&gt;"</expr>;</return>
        }</block></else></if>
    }</block></function>


    <comment type="javadoc">/**
     * Returns the address
     *
     * @return the address part
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getAddress</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>address</name></expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     * Returns the display name
     *
     * @return the display name part
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>name</name></expr>;</return>
    }</block></function>
}</block></class>

</unit>
