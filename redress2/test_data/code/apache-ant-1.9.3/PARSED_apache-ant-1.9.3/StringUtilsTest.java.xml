<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\util\StringUtilsTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>

<import>import <name><name>junit</name>.<name>framework</name>.<name>TestCase</name></name>;</import>

<comment type="javadoc">/**
 * Test for StringUtils
 */</comment>
<class><specifier>public</specifier> class <name>StringUtilsTest</name> <super><extends>extends <name>TestCase</name></extends></super> <block>{
    <constructor><specifier>public</specifier> <name>StringUtilsTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testSplit</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>data</name> =<init> <expr>"a,b,,"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Vector</name></type> <name>res</name> =<init> <expr><call><name><name>StringUtils</name>.<name>split</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr>','</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>4</expr></argument>, <argument><expr><call><name><name>res</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"a"</expr></argument>, <argument><expr><call><name><name>res</name>.<name>elementAt</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"b"</expr></argument>, <argument><expr><call><name><name>res</name>.<name>elementAt</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><call><name><name>res</name>.<name>elementAt</name></name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><call><name><name>res</name>.<name>elementAt</name></name><argument_list>(<argument><expr>3</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testSplitLines</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>data</name> =<init> <expr>"a\r\nb\nc\nd\ne"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Vector</name></type> <name>res</name> =<init> <expr><call><name><name>StringUtils</name>.<name>lineSplit</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>5</expr></argument>, <argument><expr><call><name><name>res</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"a\r"</expr></argument>, <argument><expr><call><name><name>res</name>.<name>elementAt</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"b"</expr></argument>, <argument><expr><call><name><name>res</name>.<name>elementAt</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"c"</expr></argument>, <argument><expr><call><name><name>res</name>.<name>elementAt</name></name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"d"</expr></argument>, <argument><expr><call><name><name>res</name>.<name>elementAt</name></name><argument_list>(<argument><expr>3</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"e"</expr></argument>, <argument><expr><call><name><name>res</name>.<name>elementAt</name></name><argument_list>(<argument><expr>4</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testReplace</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>data</name> =<init> <expr>"abcabcabca"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>res</name> =<init> <expr><call><name><name>StringUtils</name>.<name>replace</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr>"a"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"bcbcbc"</expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testEndsWithBothEmpty</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>( <argument><expr><call><name><name>StringUtils</name>.<name>endsWith</name></name><argument_list>( <argument><expr>new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testEndsWithEmptyString</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>( <argument><expr><call><name><name>StringUtils</name>.<name>endsWith</name></name><argument_list>( <argument><expr>new <call><name>StringBuffer</name><argument_list>(<argument><expr>"12234545"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testEndsWithShorterString</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>( <argument><expr><call><name><name>StringUtils</name>.<name>endsWith</name></name><argument_list>( <argument><expr>new <call><name>StringBuffer</name><argument_list>(<argument><expr>"12345678"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"78"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testEndsWithSameString</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>( <argument><expr><call><name><name>StringUtils</name>.<name>endsWith</name></name><argument_list>( <argument><expr>new <call><name>StringBuffer</name><argument_list>(<argument><expr>"123"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"123"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testEndsWithLongerString</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>( <argument><expr><call><name><name>StringUtils</name>.<name>endsWith</name></name><argument_list>( <argument><expr>new <call><name>StringBuffer</name><argument_list>(<argument><expr>"12"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"1245"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testEndsWithNoMatch</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>( <argument><expr><call><name><name>StringUtils</name>.<name>endsWith</name></name><argument_list>( <argument><expr>new <call><name>StringBuffer</name><argument_list>(<argument><expr>"12345678"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"789"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testEndsWithEmptyBuffer</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>( <argument><expr><call><name><name>StringUtils</name>.<name>endsWith</name></name><argument_list>( <argument><expr>new <call><name>StringBuffer</name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"12345667"</expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testEndsWithJDKPerf</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>buf</name> =<init> <expr><call><name>getFilledBuffer</name><argument_list>(<argument><expr>1024*300</expr></argument>, <argument><expr>'a'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; 1000</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>buf</name>.<name>toString</name></name><argument_list>()</argument_list></call>.<call><name>endsWith</name><argument_list>(<argument><expr>"aa"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testEndsWithPerf</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>buf</name> =<init> <expr><call><name>getFilledBuffer</name><argument_list>(<argument><expr>1024*300</expr></argument>, <argument><expr>'a'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; 1000</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>StringUtils</name>.<name>endsWith</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>"aa"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><type><specifier>private</specifier> <name>StringBuffer</name></type> <name>getFilledBuffer</name><parameter_list>(<param><decl><type><name>int</name></type> <name>size</name></decl></param>, <param><decl><type><name>char</name></type> <name>ch</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>buf</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>size</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{ <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></for><empty_stmt>;</empty_stmt>
        <return>return <expr><name>buf</name></expr>;</return>
    }</block></function>
    
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testParseHumanSizes</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
    	<decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>KILOBYTE</name> =<init> <expr>1024</expr></init></decl>;</decl_stmt>
    	<decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>MEGABYTE</name> =<init> <expr><name>KILOBYTE</name> * 1024</expr></init></decl>;</decl_stmt>
    	<decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>GIGABYTE</name> =<init> <expr><name>MEGABYTE</name> * 1024</expr></init></decl>;</decl_stmt>
    	<decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>TERABYTE</name> =<init> <expr><name>GIGABYTE</name> * 1024</expr></init></decl>;</decl_stmt>
    	<decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>PETABYTE</name> =<init> <expr><name>TERABYTE</name> * 1024</expr></init></decl>;</decl_stmt>
    	<expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>StringUtils</name>.<name>parseHumanSizes</name></name><argument_list>(<argument><expr>"1K"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>KILOBYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	<expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>StringUtils</name>.<name>parseHumanSizes</name></name><argument_list>(<argument><expr>"1M"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MEGABYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	<expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>StringUtils</name>.<name>parseHumanSizes</name></name><argument_list>(<argument><expr>"1G"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>GIGABYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	<expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>StringUtils</name>.<name>parseHumanSizes</name></name><argument_list>(<argument><expr>"1T"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TERABYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	<expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>StringUtils</name>.<name>parseHumanSizes</name></name><argument_list>(<argument><expr>"1P"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PETABYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	<expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>StringUtils</name>.<name>parseHumanSizes</name></name><argument_list>(<argument><expr>"1"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>1L</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testRemoveSuffix</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>prefix</name> =<init> <expr>"Prefix"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> =<init> <expr>"Name"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>suffix</name> =<init> <expr>"Suffix"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>input</name> =<init> <expr><name>prefix</name> + <name>name</name> + <name>suffix</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(
            <argument><expr>"Does not remove the suffix right."</expr></argument>,    
            <argument><expr><name>prefix</name> + <name>name</name></expr></argument>, 
            <argument><expr><call><name><name>StringUtils</name>.<name>removeSuffix</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(
            <argument><expr>"Should leave the string unattended."</expr></argument>,    
            <argument><expr><name>prefix</name> + <name>name</name> + <name>suffix</name></expr></argument>, 
            <argument><expr><call><name><name>StringUtils</name>.<name>removeSuffix</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr>"bla"</expr></argument>)</argument_list></call></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testRemovePrefix</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>prefix</name> =<init> <expr>"Prefix"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> =<init> <expr>"Name"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>suffix</name> =<init> <expr>"Suffix"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>input</name> =<init> <expr><name>prefix</name> + <name>name</name> + <name>suffix</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(
            <argument><expr>"Does not remove the prefix right."</expr></argument>,    
            <argument><expr><name>name</name> + <name>suffix</name></expr></argument>, 
            <argument><expr><call><name><name>StringUtils</name>.<name>removePrefix</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(
            <argument><expr>"Should leave the string unattended."</expr></argument>,    
            <argument><expr><name>prefix</name> + <name>name</name> + <name>suffix</name></expr></argument>, 
            <argument><expr><call><name><name>StringUtils</name>.<name>removePrefix</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr>"bla"</expr></argument>)</argument_list></call></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
    }</block></function>    
}</block></class>
</unit>
