<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\native2ascii\SunNative2Ascii.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>native2ascii</name></name>;</package>

<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name>.<name>Method</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>ProjectComponent</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>Native2Ascii</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Commandline</name></name>;</import>

<comment type="javadoc">/**
 * Adapter to sun.tools.native2ascii.Main.
 *
 * @since Ant 1.6.3
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>SunNative2Ascii</name> <super><extends>extends <name>DefaultNative2Ascii</name></extends></super> <block>{

    <comment type="javadoc">/**
     * Identifies this adapter.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>IMPLEMENTATION_NAME</name> =<init> <expr>"sun"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** {@inheritDoc} */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setup</name><parameter_list>(<param><decl><type><name>Commandline</name></type> <name>cmd</name></decl></param>, <param><decl><type><name>Native2Ascii</name></type> <name>args</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><call><name><name>args</name>.<name>getReverse</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-reverse"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>super</name>.<name>setup</name></name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/** {@inheritDoc} */</comment>
    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>run</name><parameter_list>(<param><decl><type><name>Commandline</name></type> <name>cmd</name></decl></param>, <param><decl><type><name>ProjectComponent</name></type> <name>log</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <try>try <block>{
            <decl_stmt><decl><type><name>Class</name></type> <name>n2aMain</name> =<init> <expr><call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr>"sun.tools.native2ascii.Main"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Class</name><index>[]</index></type> <name>param</name> =<init> <expr>new <name><name>Class</name><index>[]</index></name> <block>{<expr><name><name>String</name><index>[]</index></name>.class</expr>}</block></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Method</name></type> <name>convert</name> =<init> <expr><call><name><name>n2aMain</name>.<name>getMethod</name></name><argument_list>(<argument><expr>"convert"</expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>convert</name> == <name>null</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Could not find convert() method in "
                                         + "sun.tools.native2ascii.Main"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <decl_stmt><decl><type><name>Object</name></type> <name>o</name> =<init> <expr><call><name><name>n2aMain</name>.<name>newInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr>((<name>Boolean</name>) <call><name><name>convert</name>.<name>invoke</name></name><argument_list>(<argument><expr><name>o</name></expr></argument>,
                                             <argument><expr>new <name><name>Object</name><index>[]</index></name> <block>{<expr><call><name><name>cmd</name>.<name>getArguments</name></name><argument_list>()</argument_list></call></expr>}</block></expr></argument>)</argument_list></call>
                    ).<call><name>booleanValue</name><argument_list>()</argument_list></call></expr>;</return>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>ex</name></decl></param>) <block>{
            <comment type="line">//rethrow</comment>
            <throw>throw <expr><name>ex</name></expr>;</throw>
        }</block></catch> <catch>catch (<param><decl><type><name>Exception</name></type> <name>ex</name></decl></param>) <block>{
            <comment type="line">//wrap</comment>
           <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Error starting Sun's native2ascii: "</expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>
}</block></class>
</unit>
