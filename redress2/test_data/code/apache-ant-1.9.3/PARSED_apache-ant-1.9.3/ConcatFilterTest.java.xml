<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\filters\ConcatFilterTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>filters</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildFileTest</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>StringUtils</name></name>;</import>

<comment type="javadoc">/**
 * JUnit Testcases for ConcatReader
 */</comment>
<class><specifier>public</specifier> class <name>ConcatFilterTest</name> <super><extends>extends <name>BuildFileTest</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>FileUtils</name></type> <name>FILE_UTILS</name> =<init> <expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>lSep</name> =<init> <expr><name><name>StringUtils</name>.<name>LINE_SEP</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FILE_PREPEND_WITH</name> =<init>
          <expr>"this-should-be-the-first-line" + <name>lSep</name>
        + "Line  1" + <name>lSep</name>
        + "Line  2" + <name>lSep</name>
        + "Line  3" + <name>lSep</name>
        + "Line  4" + <name>lSep</name></expr></init></decl>
    ;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FILE_PREPEND</name> =<init>
          <expr>"Line  1" + <name>lSep</name>
        + "Line  2" + <name>lSep</name>
        + "Line  3" + <name>lSep</name>
        + "Line  4" + <name>lSep</name>
        + "Line  5" + <name>lSep</name></expr></init></decl>
    ;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FILE_APPEND_WITH</name> =<init>
          <expr>"Line 57" + <name>lSep</name>
        + "Line 58" + <name>lSep</name>
        + "Line 59" + <name>lSep</name>
        + "Line 60" + <name>lSep</name>
        + "this-should-be-the-last-line" + <name>lSep</name></expr></init></decl>
    ;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FILE_APPEND</name> =<init>
          <expr>"Line 56" + <name>lSep</name>
        + "Line 57" + <name>lSep</name>
        + "Line 58" + <name>lSep</name>
        + "Line 59" + <name>lSep</name>
        + "Line 60" + <name>lSep</name></expr></init></decl>
    ;</decl_stmt>


    <constructor><specifier>public</specifier> <name>ConcatFilterTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr>"src/etc/testcases/filters/concat.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"cleanup"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFilterReaderNoArgs</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testFilterReaderNoArgs"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>expected</name> =<init> <expr><call><name><name>FILE_UTILS</name>.<name>resolveFile</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr>"input/concatfilter.test"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>result</name> =<init> <expr><call><name><name>FILE_UTILS</name>.<name>resolveFile</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"result/concat.FilterReaderNoArgs.test"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"testFilterReaderNoArgs: Result not like expected"</expr></argument>, <argument><expr><call><name><name>FILE_UTILS</name>.<name>contentEquals</name></name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFilterReaderBefore</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>doTest</name><argument_list>(<argument><expr>"testFilterReaderPrepend"</expr></argument>, <argument><expr><name>FILE_PREPEND_WITH</name></expr></argument>, <argument><expr><name>FILE_APPEND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFilterReaderAfter</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>doTest</name><argument_list>(<argument><expr>"testFilterReaderAppend"</expr></argument>, <argument><expr><name>FILE_PREPEND</name></expr></argument>, <argument><expr><name>FILE_APPEND_WITH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFilterReaderBeforeAfter</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>doTest</name><argument_list>(<argument><expr>"testFilterReaderPrependAppend"</expr></argument>, <argument><expr><name>FILE_PREPEND_WITH</name></expr></argument>, <argument><expr><name>FILE_APPEND_WITH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testConcatFilter</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>doTest</name><argument_list>(<argument><expr>"testConcatFilter"</expr></argument>, <argument><expr><name>FILE_PREPEND</name></expr></argument>, <argument><expr><name>FILE_APPEND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testConcatFilterBefore</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>doTest</name><argument_list>(<argument><expr>"testConcatFilterPrepend"</expr></argument>, <argument><expr><name>FILE_PREPEND_WITH</name></expr></argument>, <argument><expr><name>FILE_APPEND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testConcatFilterAfter</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>doTest</name><argument_list>(<argument><expr>"testConcatFilterAppend"</expr></argument>, <argument><expr><name>FILE_PREPEND</name></expr></argument>, <argument><expr><name>FILE_APPEND_WITH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testConcatFilterBeforeAfter</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>doTest</name><argument_list>(<argument><expr>"testConcatFilterPrependAppend"</expr></argument>, <argument><expr><name>FILE_PREPEND_WITH</name></expr></argument>, <argument><expr><name>FILE_APPEND_WITH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Executes a target and checks the beginning and the ending of a file.
     * The filename depends on the target name: target name &lt;i&gt;testHelloWorld&lt;/i&gt;
     * will search for a file &lt;i&gt;result/concat.HelloWorld.test&lt;/i&gt;.
     * @param target The target to invoke
     * @param expectedStart The string which should be at the beginning of the file
     * @param expectedEnd The string which should be at the end of the file
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>doTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>target</name></decl></param>, <param><decl><type><name>String</name></type> <name>expectedStart</name></decl></param>, <param><decl><type><name>String</name></type> <name>expectedEnd</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>resultContent</name> =<init> <expr><call><name>read</name><argument_list>(<argument><expr>"result/concat." + <call><name><name>target</name>.<name>substring</name></name><argument_list>(<argument><expr>4</expr></argument>)</argument_list></call> + ".test"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"First 5 lines differs."</expr></argument>, <argument><expr><call><name><name>resultContent</name>.<name>startsWith</name></name><argument_list>(<argument><expr><name>expectedStart</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Last 5 lines differs."</expr></argument>, <argument><expr><call><name><name>resultContent</name>.<name>endsWith</name></name><argument_list>(<argument><expr><name>expectedEnd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Wrapper for FileUtils.readFully().
     * Additionally it resolves the filename according the the projects basedir
     * and closes the used reader.
     * @param filename The name of the file to read
     * @return the content of the file or &lt;i&gt;null&lt;/i&gt; if something goes wrong
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>read</name><parameter_list>(<param><decl><type><name>String</name></type> <name>filename</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>content</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <decl_stmt><decl><type><name>File</name></type> <name>file</name> =<init> <expr><call><name><name>FILE_UTILS</name>.<name>resolveFile</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>java</name>.<name>io</name>.<name>FileReader</name></name></type> <name>rdr</name> =<init> <expr>new <call><name><name>java</name>.<name>io</name>.<name>FileReader</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>content</name> = <call><name><name>FileUtils</name>.<name>readFully</name></name><argument_list>(<argument><expr><name>rdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>rdr</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>rdr</name> = <name>null</name></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name><name>e</name>.<name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <return>return <expr><name>content</name></expr>;</return>
    }</block></function>

}</block></class>
</unit>
