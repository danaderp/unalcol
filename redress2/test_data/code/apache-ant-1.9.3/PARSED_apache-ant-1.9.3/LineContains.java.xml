<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\filters\LineContains.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>filters</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Reader</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Parameter</name></name>;</import>

<comment type="javadoc">/**
 * Filter which includes only those lines that contain all the user-specified
 * strings.
 *
 * Example:
 *
 * &lt;pre&gt;&amp;lt;linecontains&amp;gt;
 *   &amp;lt;contains value=&amp;quot;foo&amp;quot;&amp;gt;
 *   &amp;lt;contains value=&amp;quot;bar&amp;quot;&amp;gt;
 * &amp;lt;/linecontains&amp;gt;&lt;/pre&gt;
 *
 * Or:
 *
 * &lt;pre&gt;&amp;lt;filterreader classname=&amp;quot;org.apache.tools.ant.filters.LineContains&amp;quot;&amp;gt;
 *    &amp;lt;param type=&amp;quot;contains&amp;quot; value=&amp;quot;foo&amp;quot;/&amp;gt;
 *    &amp;lt;param type=&amp;quot;contains&amp;quot; value=&amp;quot;bar&amp;quot;/&amp;gt;
 * &amp;lt;/filterreader&amp;gt;&lt;/pre&gt;
 *
 * This will include only those lines that contain &lt;code&gt;foo&lt;/code&gt; and
 * &lt;code&gt;bar&lt;/code&gt;.
 *
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>LineContains</name>
    <super><extends>extends <name>BaseParamFilterReader</name></extends>
    <implements>implements <name>ChainableReader</name></implements></super> <block>{
    <comment type="javadoc">/** Parameter name for the words to filter on. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>CONTAINS_KEY</name> =<init> <expr>"contains"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Parameter name for the words to filter on. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>NEGATE_KEY</name> =<init> <expr>"negate"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Vector that holds the strings that input lines must contain. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>contains</name> =<init> <expr>new <call><name><name>Vector</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Remaining line to be read from this filter, or &lt;code&gt;null&lt;/code&gt; if
     * the next call to &lt;code&gt;read()&lt;/code&gt; should read the original stream
     * to find the next matching line.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>line</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>negate</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructor for "dummy" instances.
     *
     * @see BaseFilterReader#BaseFilterReader()
     */</comment>
    <constructor><specifier>public</specifier> <name>LineContains</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a new filtered reader.
     *
     * @param in A Reader object providing the underlying stream.
     *           Must not be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <constructor><specifier>public</specifier> <name>LineContains</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Reader</name></type> <name>in</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the next character in the filtered stream, only including
     * lines from the original stream which contain all of the specified words.
     *
     * @return the next character in the resulting stream, or -1
     * if the end of the resulting stream has been reached
     *
     * @exception IOException if the underlying stream throws an IOException
     * during reading
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>read</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr>!<call><name>getInitialized</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>initialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setInitialized</name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name>int</name></type> <name>ch</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>line</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>ch</name> = <call><name><name>line</name>.<name>charAt</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name><name>line</name>.<name>length</name></name><argument_list>()</argument_list></call> == 1</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>line</name> = <name>null</name></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>line</name> = <call><name><name>line</name>.<name>substring</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then> <else>else <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>containsSize</name> =<init> <expr><call><name><name>contains</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <for>for (<init><expr><name>line</name> = <call><name>readLine</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>line</name> != <name>null</name></expr>;</condition> <incr><expr><name>line</name> = <call><name>readLine</name><argument_list>()</argument_list></call></expr></incr>) <block>{
                <decl_stmt><decl><type><name>boolean</name></type> <name>matches</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
                <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>matches</name> &amp;&amp; <name>i</name> &lt; <name>containsSize</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                    <decl_stmt><decl><type><name>String</name></type> <name>containsStr</name> =<init> <expr>(<name>String</name>) <call><name><name>contains</name>.<name>elementAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>matches</name> = <call><name><name>line</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>containsStr</name></expr></argument>)</argument_list></call> &gt;= 0</expr>;</expr_stmt>
                }</block></for>
                <if>if <condition>(<expr><name>matches</name> ^ <call><name>isNegated</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <break>break;</break>
                }</block></then></if>
            }</block></for>
            <if>if <condition>(<expr><name>line</name> != <name>null</name></expr>)</condition><then> <block>{
                <return>return <expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</return>
            }</block></then></if>
        }</block></else></if>
        <return>return <expr><name>ch</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a &lt;code&gt;contains&lt;/code&gt; element.
     *
     * @param contains The &lt;code&gt;contains&lt;/code&gt; element to add.
     *                 Must not be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addConfiguredContains</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Contains</name></type> <name>contains</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>contains</name>.<name>addElement</name></name><argument_list>(<argument><expr><call><name><name>contains</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the negation mode.  Default false (no negation).
     * @param b the boolean negation mode to set.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setNegate</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>negate</name> = <name>b</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Find out whether we have been negated.
     * @return boolean negation flag.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isNegated</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>negate</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the vector of words which must be contained within a line read
     * from the original stream in order for it to match this filter.
     *
     * @param contains A vector of words which must be contained within a line
     * in order for it to match in this filter. Must not be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>setContains</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>contains</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>contains</name></name> = <name>contains</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the vector of words which must be contained within a line read
     * from the original stream in order for it to match this filter.
     *
     * @return the vector of words which must be contained within a line read
     * from the original stream in order for it to match this filter. The
     * returned object is "live" - in other words, changes made to the
     * returned object are mirrored in the filter.
     */</comment>
    <function><type><specifier>private</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getContains</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>contains</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Creates a new LineContains using the passed in
     * Reader for instantiation.
     *
     * @param rdr A Reader object providing the underlying stream.
     *            Must not be &lt;code&gt;null&lt;/code&gt;.
     *
     * @return a new filter based on this configuration, but filtering
     *         the specified reader
     */</comment>
    <function><type><specifier>public</specifier> <name>Reader</name></type> <name>chain</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Reader</name></type> <name>rdr</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>LineContains</name></type> <name>newFilter</name> =<init> <expr>new <call><name>LineContains</name><argument_list>(<argument><expr><name>rdr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>newFilter</name>.<name>setContains</name></name><argument_list>(<argument><expr><call><name>getContains</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>newFilter</name>.<name>setNegate</name></name><argument_list>(<argument><expr><call><name>isNegated</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>newFilter</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Parses the parameters to add user-defined contains strings.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>initialize</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Parameter</name><index>[]</index></type> <name>params</name> =<init> <expr><call><name>getParameters</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>params</name> != <name>null</name></expr>)</condition><then> <block>{
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>params</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <if>if <condition>(<expr><call><name><name>CONTAINS_KEY</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>params</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>contains</name>.<name>addElement</name></name><argument_list>(<argument><expr><name><name>params</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <if>if <condition>(<expr><call><name><name>NEGATE_KEY</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>params</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>setNegate</name><argument_list>(<argument><expr><call><name><name>Project</name>.<name>toBoolean</name></name><argument_list>(<argument><expr><name><name>params</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if></else></if>
            }</block></for>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Holds a contains element
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Contains</name> <block>{

        <comment type="javadoc">/** User defined contains string */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>value</name></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * Sets the contains string
         *
         * @param contains The contains string to set.
         *                 Must not be &lt;code&gt;null&lt;/code&gt;.
         */</comment>
        <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>setValue</name><parameter_list>(<param><decl><type><name>String</name></type> <name>contains</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name>value</name> = <name>contains</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * Returns the contains string.
         *
         * @return the contains string for this element
         */</comment>
        <function><type><specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>getValue</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>value</name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
