<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\clearcase\CCUpdate.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>clearcase</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>Execute</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Commandline</name></name>;</import>

<comment type="javadoc">/**
 * Performs a ClearCase Update command.
 *
 * &lt;p&gt;
 * The following attributes are interpreted:
 * &lt;table border="1"&gt;
 *   &lt;tr&gt;
 *     &lt;th&gt;Attribute&lt;/th&gt;
 *     &lt;th&gt;Values&lt;/th&gt;
 *     &lt;th&gt;Required&lt;/th&gt;
 *   &lt;/tr&gt;
 *   &lt;tr&gt;
 *      &lt;td&gt;viewpath&lt;/td&gt;
 *      &lt;td&gt;Path to the ClearCase view file or directory that the command will operate on&lt;/td&gt;
 *      &lt;td&gt;No&lt;/td&gt;
 *   &lt;tr&gt;
 *   &lt;tr&gt;
 *      &lt;td&gt;graphical&lt;/td&gt;
 *      &lt;td&gt;Displays a graphical dialog during the update&lt;/td&gt;
 *      &lt;td&gt;No&lt;/td&gt;
 *   &lt;tr&gt;
 *   &lt;tr&gt;
 *      &lt;td&gt;log&lt;/td&gt;
 *      &lt;td&gt;Specifies a log file for ClearCase to write to&lt;/td&gt;
 *      &lt;td&gt;No&lt;/td&gt;
 *   &lt;tr&gt;
 *   &lt;tr&gt;
 *      &lt;td&gt;overwrite&lt;/td&gt;
 *      &lt;td&gt;Specifies whether to overwrite hijacked files or not&lt;/td&gt;
 *      &lt;td&gt;No&lt;/td&gt;
 *   &lt;tr&gt;
 *   &lt;tr&gt;
 *      &lt;td&gt;rename&lt;/td&gt;
 *      &lt;td&gt;Specifies that hijacked files should be renamed with a .keep extension&lt;/td&gt;
 *      &lt;td&gt;No&lt;/td&gt;
 *   &lt;tr&gt;
 *   &lt;tr&gt;
 *      &lt;td&gt;currenttime&lt;/td&gt;
 *      &lt;td&gt;Specifies that modification time should be written as the current
 *          time. Either currenttime or preservetime can be specified.&lt;/td&gt;
 *      &lt;td&gt;No&lt;/td&gt;
 *   &lt;tr&gt;
 *   &lt;tr&gt;
 *      &lt;td&gt;preservetime&lt;/td&gt;
 *      &lt;td&gt;Specifies that modification time should preserved from the VOB
 *          time. Either currenttime or preservetime can be specified.&lt;/td&gt;
 *      &lt;td&gt;No&lt;/td&gt;
 *   &lt;tr&gt;
 *   &lt;tr&gt;
 *      &lt;td&gt;failonerr&lt;/td&gt;
 *      &lt;td&gt;Throw an exception if the command fails. Default is true&lt;/td&gt;
 *      &lt;td&gt;No&lt;/td&gt;
 *   &lt;tr&gt;
 * &lt;/table&gt;
 *
 */</comment>
<class><specifier>public</specifier> class <name>CCUpdate</name> <super><extends>extends <name>ClearCase</name></extends></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>mGraphical</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>mOverwrite</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>mRename</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>mCtime</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>mPtime</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>mLog</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Executes the task.
     * &lt;p&gt;
     * Builds a command line to execute cleartool and then calls Exec's run method
     * to execute the command line.
     * @throws BuildException if the command fails and failonerr is set to true
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>Commandline</name></type> <name>commandLine</name> =<init> <expr>new <call><name>Commandline</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Project</name></type> <name>aProj</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

        <comment type="line">// Default the viewpath to basedir if it is not specified</comment>
        <if>if <condition>(<expr><call><name>getViewPath</name><argument_list>()</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>setViewPath</name><argument_list>(<argument><expr><call><name><name>aProj</name>.<name>getBaseDir</name></name><argument_list>()</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// build the command line from what we got the format is</comment>
        <comment type="line">// cleartool update [options...] [viewpath ...]</comment>
        <comment type="line">// as specified in the CLEARTOOL.EXE help</comment>
        <expr_stmt><expr><call><name><name>commandLine</name>.<name>setExecutable</name></name><argument_list>(<argument><expr><call><name>getClearToolCommand</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>commandLine</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>COMMAND_UPDATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Check the command line options</comment>
        <expr_stmt><expr><call><name>checkOptions</name><argument_list>(<argument><expr><name>commandLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// For debugging</comment>
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>log</name><argument_list>(<argument><expr><call><name><name>commandLine</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr>!<call><name>getFailOnErr</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>log</name><argument_list>(<argument><expr>"Ignoring any errors that occur for: "
                    + <call><name>getViewPathBasename</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>result</name> = <call><name>run</name><argument_list>(<argument><expr><name>commandLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>Execute</name>.<name>isFailure</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>getFailOnErr</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>msg</name> =<init> <expr>"Failed executing: " + <call><name><name>commandLine</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Check the command line options.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>checkOptions</name><parameter_list>(<param><decl><type><name>Commandline</name></type> <name>cmd</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// ClearCase items</comment>
        <if>if <condition>(<expr><call><name>getGraphical</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">// -graphical</comment>
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>FLAG_GRAPHICAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <if>if <condition>(<expr><call><name>getOverwrite</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <comment type="line">// -overwrite</comment>
                <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>FLAG_OVERWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <if>if <condition>(<expr><call><name>getRename</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <comment type="line">// -rename</comment>
                    <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>FLAG_RENAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <comment type="line">// -noverwrite</comment>
                    <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>FLAG_NOVERWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></else></if>

            <if>if <condition>(<expr><call><name>getCurrentTime</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <comment type="line">// -ctime</comment>
                <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>FLAG_CURRENTTIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <if>if <condition>(<expr><call><name>getPreserveTime</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <comment type="line">// -ptime</comment>
                    <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>FLAG_PRESERVETIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></else></if>

            <comment type="line">// -log logname</comment>
            <expr_stmt><expr><call><name>getLogCommand</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <comment type="line">// viewpath</comment>
        <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name>getViewPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * If true, displays a graphical dialog during the update.
     *
     * @param graphical the status to set the flag to
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setGraphical</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>graphical</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>mGraphical</name> = <name>graphical</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get graphical flag status
     *
     * @return boolean containing status of graphical flag
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getGraphical</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>mGraphical</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * If true, overwrite hijacked files.
     *
     * @param ow the status to set the flag to
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOverwrite</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>ow</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>mOverwrite</name> = <name>ow</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get overwrite hijacked files status
     *
     * @return boolean containing status of overwrite flag
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getOverwrite</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>mOverwrite</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * If true, hijacked files are renamed with a .keep extension.
     *
     * @param ren the status to set the flag to
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRename</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>ren</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>mRename</name> = <name>ren</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get rename hijacked files status
     *
     * @return boolean containing status of rename flag
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getRename</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>mRename</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * If true, modification time should be written as the current time.
     * Either currenttime or preservetime can be specified.
     *
     * @param ct the status to set the flag to
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCurrentTime</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>ct</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>mCtime</name> = <name>ct</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get current time status
     *
     * @return boolean containing status of current time flag
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getCurrentTime</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>mCtime</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * If true, modification time should be preserved from the VOB time.
     * Either currenttime or preservetime can be specified.
     *
     * @param pt the status to set the flag to
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPreserveTime</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>pt</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>mPtime</name> = <name>pt</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get preserve time status
     *
     * @return boolean containing status of preserve time flag
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getPreserveTime</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>mPtime</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the log file where cleartool records
     * the status of the command.
     *
     * @param log the path to the log file
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLog</name><parameter_list>(<param><decl><type><name>String</name></type> <name>log</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>mLog</name> = <name>log</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get log file
     *
     * @return String containing the path to the log file
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getLog</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>mLog</name></expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     * Get the 'log' command
     *
     * @param cmd containing the command line string with or without the log flag and path appended
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>getLogCommand</name><parameter_list>(<param><decl><type><name>Commandline</name></type> <name>cmd</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>getLog</name><argument_list>()</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then> <else>else <block>{
            <comment type="block">/* Had to make two separate commands here because if a space is
               inserted between the flag and the value, it is treated as a
               Windows filename with a space and it is enclosed in double
               quotes ("). This breaks clearcase.
            */</comment>
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>FLAG_LOG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name>getLog</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     *  -graphical flag -- display graphical dialog during update operation
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FLAG_GRAPHICAL</name> =<init> <expr>"-graphical"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * -log flag -- file to log status to
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FLAG_LOG</name> =<init> <expr>"-log"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * -overwrite flag -- overwrite hijacked files
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FLAG_OVERWRITE</name> =<init> <expr>"-overwrite"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * -noverwrite flag -- do not overwrite hijacked files
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FLAG_NOVERWRITE</name> =<init> <expr>"-noverwrite"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * -rename flag -- rename hijacked files with .keep extension
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FLAG_RENAME</name> =<init> <expr>"-rename"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * -ctime flag -- modified time is written as the current time
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FLAG_CURRENTTIME</name> =<init> <expr>"-ctime"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * -ptime flag -- modified time is written as the VOB time
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FLAG_PRESERVETIME</name> =<init> <expr>"-ptime"</expr></init></decl>;</decl_stmt>

}</block></class>

</unit>
