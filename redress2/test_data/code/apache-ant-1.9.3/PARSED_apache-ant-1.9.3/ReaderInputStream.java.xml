<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\util\ReaderInputStream.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Reader</name></name>;</import>

<comment type="javadoc">/**
 * Adapts a &lt;code&gt;Reader&lt;/code&gt; as an &lt;code&gt;InputStream&lt;/code&gt;.
 * Adapted from &lt;code&gt;StringInputStream&lt;/code&gt;.
 *
 */</comment>
<class><specifier>public</specifier> class <name>ReaderInputStream</name> <super><extends>extends <name>InputStream</name></extends></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>BYTE_MASK</name> =<init> <expr>0xFF</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Source Reader */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Reader</name></type> <name>in</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>encoding</name> =<init> <expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"file.encoding"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>byte</name><index>[]</index></type> <name>slack</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>begin</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Construct a &lt;code&gt;ReaderInputStream&lt;/code&gt;
     * for the specified &lt;code&gt;Reader&lt;/code&gt;.
     *
     * @param reader   &lt;code&gt;Reader&lt;/code&gt;.  Must not be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <constructor><specifier>public</specifier> <name>ReaderInputStream</name><parameter_list>(<param><decl><type><name>Reader</name></type> <name>reader</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>in</name> = <name>reader</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Construct a &lt;code&gt;ReaderInputStream&lt;/code&gt;
     * for the specified &lt;code&gt;Reader&lt;/code&gt;,
     * with the specified encoding.
     *
     * @param reader     non-null &lt;code&gt;Reader&lt;/code&gt;.
     * @param encoding   non-null &lt;code&gt;String&lt;/code&gt; encoding.
     */</comment>
    <constructor><specifier>public</specifier> <name>ReaderInputStream</name><parameter_list>(<param><decl><type><name>Reader</name></type> <name>reader</name></decl></param>, <param><decl><type><name>String</name></type> <name>encoding</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>encoding</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"encoding must not be null"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name><name>this</name>.<name>encoding</name></name> = <name>encoding</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></constructor>

    <comment type="javadoc">/**
     * Reads from the &lt;code&gt;Reader&lt;/code&gt;, returning the same value.
     *
     * @return the value of the next character in the &lt;code&gt;Reader&lt;/code&gt;.
     *
     * @exception IOException if the original &lt;code&gt;Reader&lt;/code&gt; fails to be read
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>int</name></type> <name>read</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>in</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IOException</name><argument_list>(<argument><expr>"Stream Closed"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <decl_stmt><decl><type><name>byte</name></type> <name>result</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>slack</name> != <name>null</name> &amp;&amp; <name>begin</name> &lt; <name><name>slack</name>.<name>length</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <name><name>slack</name><index>[<expr><name>begin</name></expr>]</index></name></expr>;</expr_stmt>
            <if>if <condition>(<expr>++<name>begin</name> == <name><name>slack</name>.<name>length</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>slack</name> = <name>null</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then> <else>else <block>{
            <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>buf</name> =<init> <expr>new <name><name>byte</name><index>[<expr>1</expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name>read</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> &lt;= 0</expr>)</condition><then> <block>{
                <return>return <expr>-1</expr>;</return>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>result</name> = <name><name>buf</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></else></if>
        <return>return <expr><name>result</name> &amp; <name>BYTE_MASK</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Reads from the &lt;code&gt;Reader&lt;/code&gt; into a byte array
     *
     * @param b  the byte array to read into
     * @param off the offset in the byte array
     * @param len the length in the byte array to fill
     * @return the actual number read into the byte array, -1 at
     *         the end of the stream
     * @exception IOException if an error occurs
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>int</name></type> <name>read</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>b</name></decl></param>, <param><decl><type><name>int</name></type> <name>off</name></decl></param>, <param><decl><type><name>int</name></type> <name>len</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>in</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IOException</name><argument_list>(<argument><expr>"Stream Closed"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>len</name> == 0</expr>)</condition><then> <block>{
            <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <while>while <condition>(<expr><name>slack</name> == <name>null</name></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>char</name><index>[]</index></type> <name>buf</name> =<init> <expr>new <name><name>char</name><index>[<expr><name>len</name></expr>]</index></name></expr></init></decl>;</decl_stmt> <comment type="line">// might read too much</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>n</name> =<init> <expr><call><name><name>in</name>.<name>read</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>n</name> == -1</expr>)</condition><then> <block>{
                <return>return <expr>-1</expr>;</return>
            }</block></then></if>
            <if>if <condition>(<expr><name>n</name> &gt; 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>slack</name> = new <call><name>String</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call>.<call><name>getBytes</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>begin</name> = 0</expr>;</expr_stmt>
            }</block></then></if>
        }</block></while>

        <if>if <condition>(<expr><name>len</name> &gt; <name><name>slack</name>.<name>length</name></name> - <name>begin</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>len</name> = <name><name>slack</name>.<name>length</name></name> - <name>begin</name></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>slack</name></expr></argument>, <argument><expr><name>begin</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>begin</name> += <name>len</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>begin</name> &gt;= <name><name>slack</name>.<name>length</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>slack</name> = <name>null</name></expr>;</expr_stmt>
        }</block></then></if>

        <return>return <expr><name>len</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Marks the read limit of the Reader.
     *
     * @param limit the maximum limit of bytes that can be read before the
     *              mark position becomes invalid
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>mark</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>int</name></type> <name>limit</name></decl></param>)</parameter_list> <block>{
        <try>try <block>{
            <expr_stmt><expr><call><name><name>in</name>.<name>mark</name></name><argument_list>(<argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ioe</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><call><name><name>ioe</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>


    <comment type="javadoc">/**
     * @return   the current number of bytes ready for reading
     * @exception IOException if an error occurs
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>int</name></type> <name>available</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>in</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IOException</name><argument_list>(<argument><expr>"Stream Closed"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>slack</name> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name><name>slack</name>.<name>length</name></name> - <name>begin</name></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>in</name>.<name>ready</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>1</expr>;</return>
        }</block></then></if>
        <return>return <expr>0</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * @return false - mark is not supported
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>markSupported</name> <parameter_list>()</parameter_list> <block>{
        <return>return <expr>false</expr>;</return>   <comment type="line">// would be imprecise</comment>
    }</block></function>

    <comment type="javadoc">/**
     * Resets the Reader.
     *
     * @exception IOException if the Reader fails to be reset
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>reset</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>in</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IOException</name><argument_list>(<argument><expr>"Stream Closed"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name>slack</name> = <name>null</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>in</name>.<name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Closes the Reader.
     *
     * @exception IOException if the original Reader fails to be closed
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>in</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>in</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>slack</name> = <name>null</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>in</name> = <name>null</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>
}</block></class>
</unit>
