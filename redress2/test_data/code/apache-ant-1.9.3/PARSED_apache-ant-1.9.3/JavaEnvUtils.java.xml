<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\util\JavaEnvUtils.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileWriter</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>BufferedWriter</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>condition</name>.<name>Os</name></name>;</import>

<comment type="javadoc">/**
 * A set of helper methods related to locating executables or checking
 * conditions of a given Java installation.
 *
 * @since Ant 1.5
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>JavaEnvUtils</name> <block>{

    <constructor><specifier>private</specifier> <name>JavaEnvUtils</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <comment type="javadoc">/** Are we on a DOS-based system */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>IS_DOS</name> =<init> <expr><call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr>"dos"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** Are we on Novell NetWare */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>IS_NETWARE</name> =<init> <expr><call><name><name>Os</name>.<name>isName</name></name><argument_list>(<argument><expr>"netware"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** Are we on AIX */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>IS_AIX</name> =<init> <expr><call><name><name>Os</name>.<name>isName</name></name><argument_list>(<argument><expr>"aix"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** shortcut for System.getProperty("java.home") */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>JAVA_HOME</name> =<init> <expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"java.home"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** FileUtils instance for path normalization */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>FileUtils</name></type> <name>FILE_UTILS</name> =<init> <expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Version of currently running VM. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>javaVersion</name></decl>;</decl_stmt>

    <comment type="javadoc">/** floating version of the JVM */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>javaVersionNumber</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Version constant for Java 1.0 */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>JAVA_1_0</name> =<init> <expr>"1.0"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** Number Version constant for Java 1.0 */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>VERSION_1_0</name> =<init> <expr>10</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Version constant for Java 1.1 */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>JAVA_1_1</name> =<init> <expr>"1.1"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** Number Version constant for Java 1.1 */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>VERSION_1_1</name> =<init> <expr>11</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Version constant for Java 1.2 */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>JAVA_1_2</name> =<init> <expr>"1.2"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** Number Version constant for Java 1.2 */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>VERSION_1_2</name> =<init> <expr>12</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Version constant for Java 1.3 */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>JAVA_1_3</name> =<init> <expr>"1.3"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** Number Version constant for Java 1.3 */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>VERSION_1_3</name> =<init> <expr>13</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Version constant for Java 1.4 */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>JAVA_1_4</name> =<init> <expr>"1.4"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** Number Version constant for Java 1.4 */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>VERSION_1_4</name> =<init> <expr>14</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Version constant for Java 1.5 */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>JAVA_1_5</name> =<init> <expr>"1.5"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** Number Version constant for Java 1.5 */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>VERSION_1_5</name> =<init> <expr>15</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Version constant for Java 1.6 */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>JAVA_1_6</name> =<init> <expr>"1.6"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** Number Version constant for Java 1.6 */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>VERSION_1_6</name> =<init> <expr>16</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Version constant for Java 1.7 */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>JAVA_1_7</name> =<init> <expr>"1.7"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** Number Version constant for Java 1.7 */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>VERSION_1_7</name> =<init> <expr>17</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Version constant for Java 1.8 */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>JAVA_1_8</name> =<init> <expr>"1.8"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** Number Version constant for Java 1.8 */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>VERSION_1_8</name> =<init> <expr>18</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Whether this is the Kaffe VM */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>kaffeDetected</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Wheter this is a GNU Classpath based VM */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>classpathDetected</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Whether this is the GNU VM (gcj/gij) */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>gijDetected</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Whether this is Apache Harmony */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>harmonyDetected</name></decl>;</decl_stmt>

    <comment type="javadoc">/** array of packages in the runtime */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>jrePackages</name></decl>;</decl_stmt>


    static <block>{

        <comment type="line">// Determine the Java version by looking at available classes</comment>
        <comment type="line">// java.net.Proxy was introduced in JDK 1.5</comment>
        <comment type="line">// java.lang.CharSequence was introduced in JDK 1.4</comment>
        <comment type="line">// java.lang.StrictMath was introduced in JDK 1.3</comment>
        <comment type="line">// java.lang.ThreadLocal was introduced in JDK 1.2</comment>
        <comment type="line">// java.lang.Void was introduced in JDK 1.1</comment>
        <comment type="line">// Count up version until a NoClassDefFoundError ends the try</comment>

        <try>try <block>{
            <expr_stmt><expr><name>javaVersion</name> = <name>JAVA_1_0</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>javaVersionNumber</name> = <name>VERSION_1_0</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr>"java.lang.Void"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>javaVersion</name> = <name>JAVA_1_1</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>javaVersionNumber</name>++</expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr>"java.lang.ThreadLocal"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>javaVersion</name> = <name>JAVA_1_2</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>javaVersionNumber</name>++</expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr>"java.lang.StrictMath"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>javaVersion</name> = <name>JAVA_1_3</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>javaVersionNumber</name>++</expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr>"java.lang.CharSequence"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>javaVersion</name> = <name>JAVA_1_4</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>javaVersionNumber</name>++</expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr>"java.net.Proxy"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>javaVersion</name> = <name>JAVA_1_5</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>javaVersionNumber</name>++</expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr>"java.net.CookieStore"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>javaVersion</name> = <name>JAVA_1_6</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>javaVersionNumber</name>++</expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr>"java.nio.file.FileSystem"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>javaVersion</name> = <name>JAVA_1_7</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>javaVersionNumber</name>++</expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr>"java.lang.reflect.Executable"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>javaVersion</name> = <name>JAVA_1_8</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>javaVersionNumber</name>++</expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>Throwable</name></type> <name>t</name></decl></param>) <block>{
            <comment type="line">// swallow as we've hit the max class version that</comment>
            <comment type="line">// we have</comment>
        }</block></catch></try>
        <expr_stmt><expr><name>kaffeDetected</name> = false</expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr>"kaffe.util.NotImplemented"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>kaffeDetected</name> = true</expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>Throwable</name></type> <name>t</name></decl></param>) <block>{
            <comment type="line">// swallow as this simply doesn't seem to be Kaffe</comment>
        }</block></catch></try>
        <expr_stmt><expr><name>classpathDetected</name> = false</expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr>"gnu.classpath.Configuration"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>classpathDetected</name> = true</expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>Throwable</name></type> <name>t</name></decl></param>) <block>{
            <comment type="line">// swallow as this simply doesn't seem to be GNU classpath based.</comment>
        }</block></catch></try>
        <expr_stmt><expr><name>gijDetected</name> = false</expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr>"gnu.gcj.Core"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>gijDetected</name> = true</expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>Throwable</name></type> <name>t</name></decl></param>) <block>{
            <comment type="line">// swallow as this simply doesn't seem to be gcj/gij</comment>
        }</block></catch></try>
        <expr_stmt><expr><name>harmonyDetected</name> = false</expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr>"org.apache.harmony.luni.util.Base64"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>harmonyDetected</name> = true</expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>Throwable</name></type> <name>t</name></decl></param>) <block>{
            <comment type="line">// swallow as this simply doesn't seem to be Apache Harmony</comment>
        }</block></catch></try>
    }</block>

    <comment type="javadoc">/**
     * Returns the version of Java this class is running under.
     * @return the version of Java as a String, e.g. "1.6"
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getJavaVersion</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>javaVersion</name></expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     * Returns the version of Java this class is running under.
     * This number can be used for comparisons; it will always be
     * @return the version of Java as a number 10x the major/minor,
     * e.g Java1.5 has a value of 15
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getJavaVersionNumber</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>javaVersionNumber</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Compares the current Java version to the passed in String -
     * assumes the argument is one of the constants defined in this
     * class.
     * Note that Ant now requires JDK 1.4+ so {@link #JAVA_1_0} through
     * {@link #JAVA_1_3} need no longer be tested for.
     * @param version the version to check against the current version.
     * @return true if the version of Java is the same as the given version.
     * @since Ant 1.5
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isJavaVersion</name><parameter_list>(<param><decl><type><name>String</name></type> <name>version</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>javaVersion</name>.<name>equals</name></name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Compares the current Java version to the passed in String -
     * assumes the argument is one of the constants defined in this
     * class.
     * Note that Ant now requires JDK 1.4+ so {@link #JAVA_1_0} through
     * {@link #JAVA_1_3} need no longer be tested for.
     * @param version the version to check against the current version.
     * @return true if the version of Java is the same or higher than the
     * given version.
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isAtLeastJavaVersion</name><parameter_list>(<param><decl><type><name>String</name></type> <name>version</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>javaVersion</name>.<name>compareTo</name></name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call> &gt;= 0</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Checks whether the current Java VM is Kaffe.
     * @return true if the current Java VM is Kaffe.
     * @since Ant 1.6.3
     * @see &lt;a href="http://www.kaffe.org/"&gt;http://www.kaffe.org/&lt;/a&gt;
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isKaffe</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>kaffeDetected</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Checks whether the current Java VM is GNU Classpath
     * @since Ant 1.9.1
     * @return true if the version of Java is GNU Classpath
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isClasspathBased</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>classpathDetected</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Checks whether the current Java VM is the GNU interpreter gij
     * or we are running in a gcj precompiled binary.
     * @since Ant 1.8.2
     * @return true if the current Java VM is gcj/gij.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isGij</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>gijDetected</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Checks whether the current VM is Apache Harmony.
     * @since Ant 1.8.2
     * @return true if the current VM is Apache Harmony.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isApacheHarmony</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>harmonyDetected</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Finds an executable that is part of a JRE installation based on
     * the java.home system property.
     *
     * &lt;p&gt;&lt;code&gt;java&lt;/code&gt;, &lt;code&gt;keytool&lt;/code&gt;,
     * &lt;code&gt;policytool&lt;/code&gt;, &lt;code&gt;orbd&lt;/code&gt;, &lt;code&gt;rmid&lt;/code&gt;,
     * &lt;code&gt;rmiregistry&lt;/code&gt;, &lt;code&gt;servertool&lt;/code&gt; and
     * &lt;code&gt;tnameserv&lt;/code&gt; are JRE executables on Sun based
     * JRE's.&lt;/p&gt;
     *
     * &lt;p&gt;You typically find them in &lt;code&gt;JAVA_HOME/jre/bin&lt;/code&gt; if
     * &lt;code&gt;JAVA_HOME&lt;/code&gt; points to your JDK installation.  JDK
     * &amp;lt; 1.2 has them in the same directory as the JDK
     * executables.&lt;/p&gt;
     * @param command the java executable to find.
     * @return the path to the command.
     * @since Ant 1.5
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getJreExecutable</name><parameter_list>(<param><decl><type><name>String</name></type> <name>command</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>IS_NETWARE</name></expr>)</condition><then> <block>{
            <comment type="line">// Extrapolating from:</comment>
            <comment type="line">// "NetWare may have a "java" in that directory, but 99% of</comment>
            <comment type="line">// the time, you don't want to execute it" -- Jeff Tulley</comment>
            <comment type="line">// &lt;JTULLEY@novell.com&gt;</comment>
            <return>return <expr><name>command</name></expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>File</name></type> <name>jExecutable</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>IS_AIX</name></expr>)</condition><then> <block>{
            <comment type="line">// On IBM's JDK 1.2 the directory layout is different, 1.3 follows</comment>
            <comment type="line">// Sun's layout.</comment>
            <expr_stmt><expr><name>jExecutable</name> = <call><name>findInDir</name><argument_list>(<argument><expr><name>JAVA_HOME</name> + "/sh"</expr></argument>, <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>jExecutable</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>jExecutable</name> = <call><name>findInDir</name><argument_list>(<argument><expr><name>JAVA_HOME</name> + "/bin"</expr></argument>, <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>jExecutable</name> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>jExecutable</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
            <comment type="line">// Unfortunately on Windows java.home doesn't always refer</comment>
            <comment type="line">// to the correct location, so we need to fall back to</comment>
            <comment type="line">// assuming java is somewhere on the PATH.</comment>
            <return>return <expr><call><name>addExtension</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Finds an executable that is part of a JDK installation based on
     * the java.home system property.
     *
     * &lt;p&gt;You typically find them in &lt;code&gt;JAVA_HOME/bin&lt;/code&gt; if
     * &lt;code&gt;JAVA_HOME&lt;/code&gt; points to your JDK installation.&lt;/p&gt;
     * @param command the java executable to find.
     * @return the path to the command.
     * @since Ant 1.5
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getJdkExecutable</name><parameter_list>(<param><decl><type><name>String</name></type> <name>command</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>IS_NETWARE</name></expr>)</condition><then> <block>{
            <comment type="line">// Extrapolating from:</comment>
            <comment type="line">// "NetWare may have a "java" in that directory, but 99% of</comment>
            <comment type="line">// the time, you don't want to execute it" -- Jeff Tulley</comment>
            <comment type="line">// &lt;JTULLEY@novell.com&gt;</comment>
            <return>return <expr><name>command</name></expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>File</name></type> <name>jExecutable</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>IS_AIX</name></expr>)</condition><then> <block>{
            <comment type="line">// On IBM's JDK 1.2 the directory layout is different, 1.3 follows</comment>
            <comment type="line">// Sun's layout.</comment>
            <expr_stmt><expr><name>jExecutable</name> = <call><name>findInDir</name><argument_list>(<argument><expr><name>JAVA_HOME</name> + "/../sh"</expr></argument>, <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>jExecutable</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>jExecutable</name> = <call><name>findInDir</name><argument_list>(<argument><expr><name>JAVA_HOME</name> + "/../bin"</expr></argument>, <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>jExecutable</name> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>jExecutable</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
            <comment type="line">// fall back to JRE bin directory, also catches JDK 1.0 and 1.1</comment>
            <comment type="line">// where java.home points to the root of the JDK and Mac OS X where</comment>
            <comment type="line">// the whole directory layout is different from Sun's</comment>
            <return>return <expr><call><name>getJreExecutable</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a system specific extension to the name of an executable.
     *
     * @since Ant 1.5
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>addExtension</name><parameter_list>(<param><decl><type><name>String</name></type> <name>command</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// This is the most common extension case - exe for windows and OS/2,</comment>
        <comment type="line">// nothing for *nix.</comment>
        <return>return <expr><name>command</name> + (<name>IS_DOS</name> ? ".exe" : "")</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Look for an executable in a given directory.
     *
     * @return null if the executable cannot be found.
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>File</name></type> <name>findInDir</name><parameter_list>(<param><decl><type><name>String</name></type> <name>dirName</name></decl></param>, <param><decl><type><name>String</name></type> <name>commandName</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>dir</name> =<init> <expr><call><name><name>FILE_UTILS</name>.<name>normalize</name></name><argument_list>(<argument><expr><name>dirName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>executable</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>dir</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>executable</name> = new <call><name>File</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><call><name>addExtension</name><argument_list>(<argument><expr><name>commandName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<call><name><name>executable</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>executable</name> = <name>null</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <return>return <expr><name>executable</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * demand creation of the package list.
     * When you add a new package, add a new test below.
     */</comment>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>buildJrePackages</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>jrePackages</name> = new <call><name><name>Vector</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <switch>switch<condition>(<expr><name>javaVersionNumber</name></expr>)</condition> <block>{
            <case>case <expr><name>VERSION_1_8</name></expr>:
            </case><case>case <expr><name>VERSION_1_7</name></expr>:
            </case><case>case <expr><name>VERSION_1_6</name></expr>:
            </case><case>case <expr><name>VERSION_1_5</name></expr>:
                <comment type="line">//In Java1.5, the apache stuff moved.</comment>
                <expr_stmt><expr><call><name><name>jrePackages</name>.<name>addElement</name></name><argument_list>(<argument><expr>"com.sun.org.apache"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">//fall through.</comment>
            </case><case>case <expr><name>VERSION_1_4</name></expr>:
                <if>if <condition>(<expr><name>javaVersionNumber</name> == <name>VERSION_1_4</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>jrePackages</name>.<name>addElement</name></name><argument_list>(<argument><expr>"org.apache.crimson"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>jrePackages</name>.<name>addElement</name></name><argument_list>(<argument><expr>"org.apache.xalan"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>jrePackages</name>.<name>addElement</name></name><argument_list>(<argument><expr>"org.apache.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>jrePackages</name>.<name>addElement</name></name><argument_list>(<argument><expr>"org.apache.xpath"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><call><name><name>jrePackages</name>.<name>addElement</name></name><argument_list>(<argument><expr>"org.ietf.jgss"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>jrePackages</name>.<name>addElement</name></name><argument_list>(<argument><expr>"org.w3c.dom"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>jrePackages</name>.<name>addElement</name></name><argument_list>(<argument><expr>"org.xml.sax"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// fall through</comment>
            </case><case>case <expr><name>VERSION_1_3</name></expr>:
                <expr_stmt><expr><call><name><name>jrePackages</name>.<name>addElement</name></name><argument_list>(<argument><expr>"org.omg"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>jrePackages</name>.<name>addElement</name></name><argument_list>(<argument><expr>"com.sun.corba"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>jrePackages</name>.<name>addElement</name></name><argument_list>(<argument><expr>"com.sun.jndi"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>jrePackages</name>.<name>addElement</name></name><argument_list>(<argument><expr>"com.sun.media"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>jrePackages</name>.<name>addElement</name></name><argument_list>(<argument><expr>"com.sun.naming"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>jrePackages</name>.<name>addElement</name></name><argument_list>(<argument><expr>"com.sun.org.omg"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>jrePackages</name>.<name>addElement</name></name><argument_list>(<argument><expr>"com.sun.rmi"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>jrePackages</name>.<name>addElement</name></name><argument_list>(<argument><expr>"sunw.io"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>jrePackages</name>.<name>addElement</name></name><argument_list>(<argument><expr>"sunw.util"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// fall through</comment>
            </case><case>case <expr><name>VERSION_1_2</name></expr>:
                <expr_stmt><expr><call><name><name>jrePackages</name>.<name>addElement</name></name><argument_list>(<argument><expr>"com.sun.java"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>jrePackages</name>.<name>addElement</name></name><argument_list>(<argument><expr>"com.sun.image"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// are there any here that we forgot?</comment>
                <comment type="line">// fall through</comment>
            </case><case>case <expr><name>VERSION_1_1</name></expr>:
            </case><default>default:
                <comment type="line">//things like sun.reflection, sun.misc, sun.net</comment>
                <expr_stmt><expr><call><name><name>jrePackages</name>.<name>addElement</name></name><argument_list>(<argument><expr>"sun"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>jrePackages</name>.<name>addElement</name></name><argument_list>(<argument><expr>"java"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>jrePackages</name>.<name>addElement</name></name><argument_list>(<argument><expr>"javax"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </default>}</block></switch>
    }</block></function>

    <comment type="javadoc">/**
     * Testing helper method; kept here for unification of changes.
     * @return a list of test classes depending on the java version.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Vector</name></type> <name>getJrePackageTestCases</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Vector</name></type> <name>tests</name> =<init> <expr>new <call><name>Vector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>tests</name>.<name>addElement</name></name><argument_list>(<argument><expr>"java.lang.Object"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <switch>switch<condition>(<expr><name>javaVersionNumber</name></expr>)</condition> <block>{
            <case>case <expr><name>VERSION_1_8</name></expr>:
            </case><case>case <expr><name>VERSION_1_7</name></expr>:
            </case><case>case <expr><name>VERSION_1_6</name></expr>:
            </case><case>case <expr><name>VERSION_1_5</name></expr>:
                <expr_stmt><expr><call><name><name>tests</name>.<name>addElement</name></name><argument_list>(
                    <argument><expr>"com.sun.org.apache.xerces.internal.jaxp.datatype.DatatypeFactoryImpl "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// Fall tru</comment>
            </case><case>case <expr><name>VERSION_1_4</name></expr>:
                <expr_stmt><expr><call><name><name>tests</name>.<name>addElement</name></name><argument_list>(<argument><expr>"sun.audio.AudioPlayer"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>javaVersionNumber</name> == <name>VERSION_1_4</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>tests</name>.<name>addElement</name></name><argument_list>(<argument><expr>"org.apache.crimson.parser.ContentModel"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>tests</name>.<name>addElement</name></name><argument_list>(<argument><expr>"org.apache.xalan.processor.ProcessorImport"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>tests</name>.<name>addElement</name></name><argument_list>(<argument><expr>"org.apache.xml.utils.URI"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>tests</name>.<name>addElement</name></name><argument_list>(<argument><expr>"org.apache.xpath.XPathFactory"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><call><name><name>tests</name>.<name>addElement</name></name><argument_list>(<argument><expr>"org.ietf.jgss.Oid"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>tests</name>.<name>addElement</name></name><argument_list>(<argument><expr>"org.w3c.dom.Attr"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>tests</name>.<name>addElement</name></name><argument_list>(<argument><expr>"org.xml.sax.XMLReader"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// fall through</comment>
            </case><case>case <expr><name>VERSION_1_3</name></expr>:
                <expr_stmt><expr><call><name><name>tests</name>.<name>addElement</name></name><argument_list>(<argument><expr>"org.omg.CORBA.Any"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>tests</name>.<name>addElement</name></name><argument_list>(<argument><expr>"com.sun.corba.se.internal.corba.AnyImpl"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>tests</name>.<name>addElement</name></name><argument_list>(<argument><expr>"com.sun.jndi.ldap.LdapURL"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>tests</name>.<name>addElement</name></name><argument_list>(<argument><expr>"com.sun.media.sound.Printer"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>tests</name>.<name>addElement</name></name><argument_list>(<argument><expr>"com.sun.naming.internal.VersionHelper"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>tests</name>.<name>addElement</name></name><argument_list>(<argument><expr>"com.sun.org.omg.CORBA.Initializer"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>tests</name>.<name>addElement</name></name><argument_list>(<argument><expr>"sunw.io.Serializable"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>tests</name>.<name>addElement</name></name><argument_list>(<argument><expr>"sunw.util.EventListener"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// fall through</comment>
            </case><case>case <expr><name>VERSION_1_2</name></expr>:
                <expr_stmt><expr><call><name><name>tests</name>.<name>addElement</name></name><argument_list>(<argument><expr>"javax.accessibility.Accessible"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>tests</name>.<name>addElement</name></name><argument_list>(<argument><expr>"sun.misc.BASE64Encoder"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>tests</name>.<name>addElement</name></name><argument_list>(<argument><expr>"com.sun.image.codec.jpeg.JPEGCodec"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// fall through</comment>
            </case><case>case <expr><name>VERSION_1_1</name></expr>:
            </case><default>default:
                <comment type="line">//things like sun.reflection, sun.misc, sun.net</comment>
                <expr_stmt><expr><call><name><name>tests</name>.<name>addElement</name></name><argument_list>(<argument><expr>"sun.reflect.SerializationConstructorAccessorImpl"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>tests</name>.<name>addElement</name></name><argument_list>(<argument><expr>"sun.net.www.http.HttpClient"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>tests</name>.<name>addElement</name></name><argument_list>(<argument><expr>"sun.audio.AudioPlayer"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </default>}</block></switch>
        <return>return <expr><name>tests</name></expr>;</return>
    }</block></function>
    <comment type="javadoc">/**
     * get a vector of strings of packages built into
     * that platforms runtime jar(s)
     * @return list of packages.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getJrePackages</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>jrePackages</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>buildJrePackages</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>jrePackages</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     *
     * Writes the command into a temporary DCL script and returns the
     * corresponding File object.
     * It is the job of the caller to delete the file on exit.
     * @param cmd the command.
     * @return the file containing the command.
     * @throws IOException if there is an error writing to the file.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>File</name></type> <name>createVmsJavaOptionFile</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>cmd</name></decl></param>)</parameter_list>
            <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>script</name> =<init> <expr><call><name><name>FILE_UTILS</name>.<name>createTempFile</name></name><argument_list>(<argument><expr>"ANT"</expr></argument>, <argument><expr>".JAVA_OPTS"</expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BufferedWriter</name></type> <name>out</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>out</name> = new <call><name>BufferedWriter</name><argument_list>(<argument><expr>new <call><name>FileWriter</name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>cmd</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr><name><name>cmd</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>out</name>.<name>newLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
        <return>return <expr><name>script</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Return the value of ${java.home}
     * @return the java home value.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getJavaHome</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>JAVA_HOME</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
