<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\email\EmailTask.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>email</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>StringTokenizer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>EnumeratedAttribute</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>FileSet</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Path</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Resource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>FileProvider</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>FileResource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>ClasspathUtils</name></name>;</import>

<comment type="javadoc">/**
 * A task to send SMTP email. This is a refactoring of the SendMail and
 * MimeMail tasks such that both are within a single task.
 *
 * @since Ant 1.5
 * @ant.task name="mail" category="network"
 */</comment>
<class><specifier>public</specifier> class <name>EmailTask</name> <super><extends>extends <name>Task</name></extends></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SMTP_PORT</name> =<init> <expr>25</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Constant to show that the best available mailer should be used.  */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>AUTO</name> =<init> <expr>"auto"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** Constant to allow the Mime mailer to be requested  */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>MIME</name> =<init> <expr>"mime"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** Constant to allow the UU mailer to be requested  */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>UU</name> =<init> <expr>"uu"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** Constant to allow the plaintext mailer to be requested  */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PLAIN</name> =<init> <expr>"plain"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Enumerates the encoding constants.
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Encoding</name> <super><extends>extends <name>EnumeratedAttribute</name></extends></super> <block>{
        <comment type="javadoc">/**
         * finds the valid encoding values
         *
         * @return a list of valid entries
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getValues</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr>new <name><name>String</name><index>[]</index></name> <block>{<expr><name>AUTO</name></expr>, <expr><name>MIME</name></expr>, <expr><name>UU</name></expr>, <expr><name>PLAIN</name></expr>}</block></expr>;</return>
        }</block></function>
    }</block></class>

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>encoding</name> =<init> <expr><name>AUTO</name></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** host running SMTP  */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>host</name> =<init> <expr>"localhost"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Integer</name></type> <name>port</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** subject field  */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>subject</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** any text  */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Message</name></type> <name>message</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** failure flag */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>failOnError</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>includeFileNames</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>messageMimeType</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <comment type="block">/* special headers */</comment>
    <comment type="javadoc">/** sender  */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>EmailAddress</name></type> <name>from</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** replyto */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Vector</name></type> <name>replyToList</name> =<init> <expr>new <call><name>Vector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** TO recipients  */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Vector</name></type> <name>toList</name> =<init> <expr>new <call><name>Vector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** CC (Carbon Copy) recipients  */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Vector</name></type> <name>ccList</name> =<init> <expr>new <call><name>Vector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** BCC (Blind Carbon Copy) recipients  */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Vector</name></type> <name>bccList</name> =<init> <expr>new <call><name>Vector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** generic headers */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Vector</name></type> <name>headers</name> =<init> <expr>new <call><name>Vector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** file list  */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Path</name></type> <name>attachments</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** Character set for MimeMailer*/</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>charset</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** User for SMTP auth */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>user</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** Password for SMTP auth */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>password</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** indicate if the user wishes SSL-TLS */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>ssl</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** indicate if the user wishes support for STARTTLS */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>starttls</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** ignore invalid recipients? */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>ignoreInvalidRecipients</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Set the user for SMTP auth; this requires JavaMail.
     * @param user the String username.
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUser</name><parameter_list>(<param><decl><type><name>String</name></type> <name>user</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>user</name></name> = <name>user</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the password for SMTP auth; this requires JavaMail.
     * @param password the String password.
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPassword</name><parameter_list>(<param><decl><type><name>String</name></type> <name>password</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>password</name></name> = <name>password</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set whether to send data over SSL.
     * @param ssl boolean; if true SSL will be used.
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSSL</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>ssl</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>ssl</name></name> = <name>ssl</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set whether to allow authentication to switch to a TLS
     * connection via STARTTLS.
     * @param b boolean; if true STARTTLS will be supported.
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setEnableStartTLS</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>starttls</name></name> = <name>b</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the preferred encoding method.
     *
     * @param encoding The encoding (one of AUTO, MIME, UU, PLAIN).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setEncoding</name><parameter_list>(<param><decl><type><name>Encoding</name></type> <name>encoding</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>encoding</name></name> = <call><name><name>encoding</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the mail server port.
     *
     * @param port The port to use.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMailport</name><parameter_list>(<param><decl><type><name>int</name></type> <name>port</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>port</name></name> = new <call><name>Integer</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the host.
     *
     * @param host The host to connect to.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMailhost</name><parameter_list>(<param><decl><type><name>String</name></type> <name>host</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>host</name></name> = <name>host</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the subject line of the email.
     *
     * @param subject Subject of this email.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSubject</name><parameter_list>(<param><decl><type><name>String</name></type> <name>subject</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>subject</name></name> = <name>subject</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Shorthand method to set the message.
     *
     * @param message Message body of this email.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMessage</name><parameter_list>(<param><decl><type><name>String</name></type> <name>message</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>message</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Only one message can be sent in an "
                 + "email"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>message</name></name> = new <call><name>Message</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>message</name>.<name>setProject</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Shorthand method to set the message from a file.
     *
     * @param file The file from which to take the message.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMessageFile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>file</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>message</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Only one message can be sent in an "
                 + "email"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>message</name></name> = new <call><name>Message</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>message</name>.<name>setProject</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Shorthand method to set type of the text message, text/plain by default
     * but text/html or text/xml is quite feasible.
     *
     * @param type The new MessageMimeType value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMessageMimeType</name><parameter_list>(<param><decl><type><name>String</name></type> <name>type</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>messageMimeType</name></name> = <name>type</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a message element.
     *
     * @param message The message object.
     * @throws BuildException if a message has already been added.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addMessage</name><parameter_list>(<param><decl><type><name>Message</name></type> <name>message</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>message</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                <argument><expr>"Only one message can be sent in an email"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>message</name></name> = <name>message</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a from address element.
     *
     * @param address The address to send from.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addFrom</name><parameter_list>(<param><decl><type><name>EmailAddress</name></type> <name>address</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>from</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Emails can only be from one address"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>from</name></name> = <name>address</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Shorthand to set the from address element.
     *
     * @param address The address to send mail from.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFrom</name><parameter_list>(<param><decl><type><name>String</name></type> <name>address</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>from</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Emails can only be from one address"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>from</name></name> = new <call><name>EmailAddress</name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a replyto address element.
     *
     * @param address The address to reply to.
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addReplyTo</name><parameter_list>(<param><decl><type><name>EmailAddress</name></type> <name>address</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>replyToList</name>.<name>add</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Shorthand to set the replyto address element.
     *
     * @param address The address to which replies should be directed.
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setReplyTo</name><parameter_list>(<param><decl><type><name>String</name></type> <name>address</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>replyToList</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>EmailAddress</name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a to address element.
     *
     * @param address An email address.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addTo</name><parameter_list>(<param><decl><type><name>EmailAddress</name></type> <name>address</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>toList</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Shorthand to set the "to" address element.
     *
     * @param list Comma-separated list of addresses.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setToList</name><parameter_list>(<param><decl><type><name>String</name></type> <name>list</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>StringTokenizer</name></type> <name>tokens</name> =<init> <expr>new <call><name>StringTokenizer</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr>","</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <while>while <condition>(<expr><call><name><name>tokens</name>.<name>hasMoreTokens</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <expr_stmt><expr><call><name><name>toList</name>.<name>addElement</name></name><argument_list>(<argument><expr>new <call><name>EmailAddress</name><argument_list>(<argument><expr><call><name><name>tokens</name>.<name>nextToken</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
    }</block></function>

    <comment type="javadoc">/**
     * Add a "cc" address element.
     *
     * @param address The email address.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addCc</name><parameter_list>(<param><decl><type><name>EmailAddress</name></type> <name>address</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>ccList</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Shorthand to set the "cc" address element.
     *
     * @param list Comma separated list of addresses.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCcList</name><parameter_list>(<param><decl><type><name>String</name></type> <name>list</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>StringTokenizer</name></type> <name>tokens</name> =<init> <expr>new <call><name>StringTokenizer</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr>","</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <while>while <condition>(<expr><call><name><name>tokens</name>.<name>hasMoreTokens</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <expr_stmt><expr><call><name><name>ccList</name>.<name>addElement</name></name><argument_list>(<argument><expr>new <call><name>EmailAddress</name><argument_list>(<argument><expr><call><name><name>tokens</name>.<name>nextToken</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
    }</block></function>

    <comment type="javadoc">/**
     * Add a "bcc" address element.
     *
     * @param address The email address.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addBcc</name><parameter_list>(<param><decl><type><name>EmailAddress</name></type> <name>address</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>bccList</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Shorthand to set the "bcc" address element.
     *
     * @param list comma separated list of addresses.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBccList</name><parameter_list>(<param><decl><type><name>String</name></type> <name>list</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>StringTokenizer</name></type> <name>tokens</name> =<init> <expr>new <call><name>StringTokenizer</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr>","</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <while>while <condition>(<expr><call><name><name>tokens</name>.<name>hasMoreTokens</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <expr_stmt><expr><call><name><name>bccList</name>.<name>addElement</name></name><argument_list>(<argument><expr>new <call><name>EmailAddress</name><argument_list>(<argument><expr><call><name><name>tokens</name>.<name>nextToken</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
    }</block></function>

    <comment type="javadoc">/**
     * Set whether BuildExceptions should be passed back to the core.
     *
     * @param failOnError The new FailOnError value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFailOnError</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>failOnError</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>failOnError</name></name> = <name>failOnError</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the list of files to be attached.
     *
     * @param filenames Comma-separated list of files.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFiles</name><parameter_list>(<param><decl><type><name>String</name></type> <name>filenames</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>StringTokenizer</name></type> <name>t</name> =<init> <expr>new <call><name>StringTokenizer</name><argument_list>(<argument><expr><name>filenames</name></expr></argument>, <argument><expr>", "</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <while>while <condition>(<expr><call><name><name>t</name>.<name>hasMoreTokens</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <expr_stmt><expr><call><name>createAttachments</name><argument_list>()</argument_list></call>
                .<call><name>add</name><argument_list>(<argument><expr>new <call><name>FileResource</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>resolveFile</name><argument_list>(<argument><expr><call><name><name>t</name>.<name>nextToken</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
    }</block></function>

    <comment type="javadoc">/**
     * Add a set of files (nested fileset attribute).
     *
     * @param fs The fileset.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addFileset</name><parameter_list>(<param><decl><type><name>FileSet</name></type> <name>fs</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>createAttachments</name><argument_list>()</argument_list></call>.<call><name>add</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Creates a Path as container for attachments.  Supports any
     * filesystem resource-collections that way.
     * @return the path to be configured.
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>Path</name></type> <name>createAttachments</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>attachments</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>attachments</name> = new <call><name>Path</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><call><name><name>attachments</name>.<name>createPath</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Create a nested header element.
     * @return a Header instance.
     */</comment>
    <function><type><specifier>public</specifier> <name>Header</name></type> <name>createHeader</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Header</name></type> <name>h</name> =<init> <expr>new <call><name>Header</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>headers</name>.<name>add</name></name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>h</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set whether to include filenames.
     *
     * @param includeFileNames Whether to include filenames in the text of the
     *      message.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setIncludefilenames</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>includeFileNames</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>includeFileNames</name></name> = <name>includeFileNames</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get whether file names should be included.
     *
     * @return Identifies whether file names should be included.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getIncludeFileNames</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>includeFileNames</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Whether invalid recipients should be ignored (but a warning
     * will be logged) instead of making the task fail.
     *
     * &lt;p&gt;Even with this property set to true the task will still fail
     * if the mail couldn't be sent to any recipient at all.&lt;/p&gt;
     *
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setIgnoreInvalidRecipients</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>ignoreInvalidRecipients</name> = <name>b</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Send an email.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Message</name></type> <name>savedMessage</name> =<init> <expr><name>message</name></expr></init></decl>;</decl_stmt>

        <try>try <block>{
            <decl_stmt><decl><type><name>Mailer</name></type> <name>mailer</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

            <comment type="line">// prepare for the auto select mechanism</comment>
            <decl_stmt><decl><type><name>boolean</name></type> <name>autoFound</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
            <comment type="line">// try MIME format</comment>
            <if>if <condition>(<expr><call><name><name>encoding</name>.<name>equals</name></name><argument_list>(<argument><expr><name>MIME</name></expr></argument>)</argument_list></call>
                 || (<call><name><name>encoding</name>.<name>equals</name></name><argument_list>(<argument><expr><name>AUTO</name></expr></argument>)</argument_list></call> &amp;&amp; !<name>autoFound</name>)</expr>)</condition><then> <block>{
                <try>try <block>{
                    <comment type="line">//check to make sure that activation.jar</comment>
                    <comment type="line">//and mail.jar are available - see bug 31969</comment>
                    <expr_stmt><expr><call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr>"javax.activation.DataHandler"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr>"javax.mail.internet.MimeMessage"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><name>mailer</name> = (<name>Mailer</name>) <call><name><name>ClasspathUtils</name>.<name>newInstance</name></name><argument_list>(
                            <argument><expr>"org.apache.tools.ant.taskdefs.email.MimeMailer"</expr></argument>,
                            <argument><expr><name><name>EmailTask</name>.<name><name/></name></name>class.<call><name>getClassLoader</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Mailer</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>autoFound</name> = true</expr>;</expr_stmt>

                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Using MIME mail"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>e</name></decl></param>) <block>{
                    <expr_stmt><expr><call><name>logBuildException</name><argument_list>(<argument><expr>"Failed to initialise MIME mail: "</expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>
            }</block></then></if>
            <comment type="line">// SMTP auth only allowed with MIME mail</comment>
            <if>if <condition>(<expr>!<name>autoFound</name> &amp;&amp; ((<name>user</name> != <name>null</name>) || (<name>password</name> != <name>null</name>))
                &amp;&amp; (<call><name><name>encoding</name>.<name>equals</name></name><argument_list>(<argument><expr><name>UU</name></expr></argument>)</argument_list></call> || <call><name><name>encoding</name>.<name>equals</name></name><argument_list>(<argument><expr><name>PLAIN</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"SMTP auth only possible with MIME mail"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <comment type="line">// SSL only allowed with MIME mail</comment>
            <if>if <condition>(<expr>!<name>autoFound</name>  &amp;&amp; (<name>ssl</name> || <name>starttls</name>)
                &amp;&amp; (<call><name><name>encoding</name>.<name>equals</name></name><argument_list>(<argument><expr><name>UU</name></expr></argument>)</argument_list></call> || <call><name><name>encoding</name>.<name>equals</name></name><argument_list>(<argument><expr><name>PLAIN</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"SSL and STARTTLS only possible with"
                                         + " MIME mail"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <comment type="line">// try UU format</comment>
            <if>if <condition>(<expr><call><name><name>encoding</name>.<name>equals</name></name><argument_list>(<argument><expr><name>UU</name></expr></argument>)</argument_list></call>
                 || (<call><name><name>encoding</name>.<name>equals</name></name><argument_list>(<argument><expr><name>AUTO</name></expr></argument>)</argument_list></call> &amp;&amp; !<name>autoFound</name>)</expr>)</condition><then> <block>{
                <try>try <block>{
                    <expr_stmt><expr><name>mailer</name> = (<name>Mailer</name>) <call><name><name>ClasspathUtils</name>.<name>newInstance</name></name><argument_list>(
                            <argument><expr>"org.apache.tools.ant.taskdefs.email.UUMailer"</expr></argument>,
                            <argument><expr><name><name>EmailTask</name>.<name><name/></name></name>class.<call><name>getClassLoader</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Mailer</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>autoFound</name> = true</expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Using UU mail"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>e</name></decl></param>) <block>{
                    <expr_stmt><expr><call><name>logBuildException</name><argument_list>(<argument><expr>"Failed to initialise UU mail: "</expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>
            }</block></then></if>
            <comment type="line">// try plain format</comment>
            <if>if <condition>(<expr><call><name><name>encoding</name>.<name>equals</name></name><argument_list>(<argument><expr><name>PLAIN</name></expr></argument>)</argument_list></call>
                 || (<call><name><name>encoding</name>.<name>equals</name></name><argument_list>(<argument><expr><name>AUTO</name></expr></argument>)</argument_list></call> &amp;&amp; !<name>autoFound</name>)</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>mailer</name> = new <call><name>PlainMailer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>autoFound</name> = true</expr>;</expr_stmt>
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Using plain mail"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <comment type="line">// a valid mailer must be present by now</comment>
            <if>if <condition>(<expr><name>mailer</name> == <name>null</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Failed to initialise encoding: "
                     + <name>encoding</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <comment type="line">// a valid message is required</comment>
            <if>if <condition>(<expr><name>message</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>message</name> = new <call><name>Message</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>message</name>.<name>setProject</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <comment type="line">// an address to send from is required</comment>
            <if>if <condition>(<expr><name>from</name> == <name>null</name> || <call><name><name>from</name>.<name>getAddress</name></name><argument_list>()</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"A from element is required"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <comment type="line">// at least one address to send to/cc/bcc is required</comment>
            <if>if <condition>(<expr><call><name><name>toList</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call> &amp;&amp; <call><name><name>ccList</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call> &amp;&amp; <call><name><name>bccList</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"At least one of to, cc or bcc must "
                     + "be supplied"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <comment type="line">// set the mimetype if not done already (and required)</comment>
            <if>if <condition>(<expr><name>messageMimeType</name> != <name>null</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><call><name><name>message</name>.<name>isMimeTypeSpecified</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"The mime type can only be "
                         + "specified in one location"</expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if>
                <expr_stmt><expr><call><name><name>message</name>.<name>setMimeType</name></name><argument_list>(<argument><expr><name>messageMimeType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <comment type="line">// set the character set if not done already (and required)</comment>
            <if>if <condition>(<expr><name>charset</name> != <name>null</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><call><name><name>message</name>.<name>getCharset</name></name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"The charset can only be "
                         + "specified in one location"</expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if>
                <expr_stmt><expr><call><name><name>message</name>.<name>setCharset</name></name><argument_list>(<argument><expr><name>charset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <comment type="line">// identify which files should be attached</comment>
            <decl_stmt><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>File</name></argument>&gt;</argument_list></name></type> <name>files</name> =<init> <expr>new <call><name><name>Vector</name><argument_list>&lt;<argument><name>File</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>attachments</name> != <name>null</name></expr>)</condition><then> <block>{
                <for>for (<init><decl><type><name>Resource</name></type> <name>r</name> :<range> <expr><name>attachments</name></expr></range></decl></init>) <block>{
                    <expr_stmt><expr><call><name><name>files</name>.<name>addElement</name></name><argument_list>(<argument><expr><call><name><name>r</name>.<name>as</name></name><argument_list>(<argument><expr><name><name>FileProvider</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call>
                                     .<call><name>getFile</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
            }</block></then></if>
            <comment type="line">// let the user know what's going to happen</comment>
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Sending email: " + <name>subject</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"From " + <name>from</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"ReplyTo " + <name>replyToList</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"To " + <name>toList</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Cc " + <name>ccList</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Bcc " + <name>bccList</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// pass the params to the mailer</comment>
            <expr_stmt><expr><call><name><name>mailer</name>.<name>setHost</name></name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>port</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>mailer</name>.<name>setPort</name></name><argument_list>(<argument><expr><call><name><name>port</name>.<name>intValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>mailer</name>.<name>setPortExplicitlySpecified</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>mailer</name>.<name>setPort</name></name><argument_list>(<argument><expr><name>SMTP_PORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>mailer</name>.<name>setPortExplicitlySpecified</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><call><name><name>mailer</name>.<name>setUser</name></name><argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mailer</name>.<name>setPassword</name></name><argument_list>(<argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mailer</name>.<name>setSSL</name></name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mailer</name>.<name>setEnableStartTLS</name></name><argument_list>(<argument><expr><name>starttls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mailer</name>.<name>setMessage</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mailer</name>.<name>setFrom</name></name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mailer</name>.<name>setReplyToList</name></name><argument_list>(<argument><expr><name>replyToList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mailer</name>.<name>setToList</name></name><argument_list>(<argument><expr><name>toList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mailer</name>.<name>setCcList</name></name><argument_list>(<argument><expr><name>ccList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mailer</name>.<name>setBccList</name></name><argument_list>(<argument><expr><name>bccList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mailer</name>.<name>setFiles</name></name><argument_list>(<argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mailer</name>.<name>setSubject</name></name><argument_list>(<argument><expr><name>subject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mailer</name>.<name>setTask</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mailer</name>.<name>setIncludeFileNames</name></name><argument_list>(<argument><expr><name>includeFileNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mailer</name>.<name>setHeaders</name></name><argument_list>(<argument><expr><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mailer</name>.<name>setIgnoreInvalidRecipients</name></name><argument_list>(<argument><expr><name>ignoreInvalidRecipients</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// send the email</comment>
            <expr_stmt><expr><call><name><name>mailer</name>.<name>send</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// let the user know what happened</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>count</name> =<init> <expr><call><name><name>files</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Sent email with " + <name>count</name> + " attachment"
                 + (<name>count</name> == 1 ? "" : "s")</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>logBuildException</name><argument_list>(<argument><expr>"Failed to send email: "</expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>failOnError</name></expr>)</condition><then> <block>{
                <throw>throw <expr><name>e</name></expr>;</throw>
            }</block></then></if>
        }</block></catch> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
          <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Failed to send email: " + <call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>failOnError</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
          }</block></then></if>
        }</block></catch> <finally>finally <block>{
            <expr_stmt><expr><name>message</name> = <name>savedMessage</name></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>logBuildException</name><parameter_list>(<param><decl><type><name>String</name></type> <name>reason</name></decl></param>, <param><decl><type><name>BuildException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Throwable</name></type> <name>t</name> =<init> <expr><call><name><name>e</name>.<name>getCause</name></name><argument_list>()</argument_list></call> == <name>null</name> ? <name>e</name> : <call><name><name>e</name>.<name>getCause</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>reason</name> + <call><name><name>t</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the character set of mail message.
     * Will be ignored if mimeType contains ....; Charset=... substring or
     * encoding is not a &lt;code&gt;mime&lt;/code&gt;.
     * @param charset the character encoding to use.
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCharset</name><parameter_list>(<param><decl><type><name>String</name></type> <name>charset</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>charset</name></name> = <name>charset</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the character set of mail message.
     *
     * @return Charset of mail message.
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getCharset</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>charset</name></expr>;</return>
    }</block></function>

}</block></class>

</unit>
