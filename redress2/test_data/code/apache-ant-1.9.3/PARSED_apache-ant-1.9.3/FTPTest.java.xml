<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\taskdefs\optional\net\FTPTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>net</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Arrays</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Random</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>net</name>.<name>ftp</name>.<name>FTPClient</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildFileTest</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>DefaultLogger</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>DirectoryScanner</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>condition</name>.<name>Os</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>FileSet</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>RetryHandler</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>Retryable</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>regexp</name>.<name>RegexpMatcher</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>regexp</name>.<name>RegexpMatcherFactory</name></name>;</import>

<class><specifier>public</specifier> class <name>FTPTest</name> <super><extends>extends <name>BuildFileTest</name></extends></super><block>{
    <comment type="line">// keep track of what operating systems are supported here.</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>supportsSymlinks</name> =<init> <expr><call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr>"unix"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>FTPClient</name></type> <name>ftp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>connectionSucceeded</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>loginSuceeded</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>tmpDir</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>remoteTmpDir</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>ftpFileSep</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>myFTP</name></type> <name>myFTPTask</name> =<init> <expr>new <call><name>myFTP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>FTPTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr>"src/etc/testcases/taskdefs/optional/net/ftp.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>executeTarget</name><argument_list>(<argument><expr>"setup"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tmpDir</name> = <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getProperty</name><argument_list>(<argument><expr>"tmp.dir"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ftp</name> = new <call><name>FTPClient</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ftpFileSep</name> = <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getProperty</name><argument_list>(<argument><expr>"ftp.filesep"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>myFTPTask</name>.<name>setSeparator</name></name><argument_list>(<argument><expr><name>ftpFileSep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>myFTPTask</name>.<name>setProject</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>remoteTmpDir</name> = <call><name><name>myFTPTask</name>.<name>resolveFile</name></name><argument_list>(<argument><expr><name>tmpDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>remoteHost</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getProperty</name><argument_list>(<argument><expr>"ftp.host"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>port</name> =<init> <expr><call><name><name>Integer</name>.<name>parseInt</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getProperty</name><argument_list>(<argument><expr>"ftp.port"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>remoteUser</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getProperty</name><argument_list>(<argument><expr>"ftp.user"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>password</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getProperty</name><argument_list>(<argument><expr>"ftp.password"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>ftp</name>.<name>connect</name></name><argument_list>(<argument><expr><name>remoteHost</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>ex</name></decl></param>) <block>{
            <expr_stmt><expr><name>connectionSucceeded</name> = false</expr>;</expr_stmt>
            <expr_stmt><expr><name>loginSuceeded</name> = false</expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"could not connect to host " + <name>remoteHost</name> + " on port " + <name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <if>if <condition>(<expr><name>connectionSucceeded</name></expr>)</condition><then> <block>{
            <try>try <block>{
                <expr_stmt><expr><call><name><name>ftp</name>.<name>login</name></name><argument_list>(<argument><expr><name>remoteUser</name></expr></argument>, <argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ioe</name></decl></param>) <block>{
                <expr_stmt><expr><name>loginSuceeded</name> = false</expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"could not log on to " + <name>remoteHost</name> + " as user " + <name>remoteUser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>()</parameter_list> <block>{
        <try>try <block>{
            <expr_stmt><expr><call><name><name>ftp</name>.<name>disconnect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ioe</name></decl></param>) <block>{
            <comment type="line">// do nothing</comment>
        }</block></catch></try>
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>executeTarget</name><argument_list>(<argument><expr>"cleanup"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>changeRemoteDir</name><parameter_list>(<param><decl><type><name>String</name></type> <name>remoteDir</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>result</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>ftp</name>.<name>cwd</name></name><argument_list>(<argument><expr><name>remoteDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch (<param><decl><type><name>Exception</name></type> <name>ex</name></decl></param>) <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"could not change directory to " + <name>remoteTmpDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>result</name> = false</expr>;</expr_stmt>
        }</block></catch></try>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>test1</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>loginSuceeded</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name>changeRemoteDir</name><argument_list>(<argument><expr><name>remoteTmpDir</name></expr></argument>)</argument_list></call></expr>)</condition><then>  <block>{
                <decl_stmt><decl><type><name><name>FTP</name>.<name>FTPDirectoryScanner</name></name></type> <name>ds</name> =<init> <expr><call><name><name>myFTPTask</name>.<name>newScanner</name></name><argument_list>(<argument><expr><name>ftp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>ds</name>.<name>setBasedir</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"tmp"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ds</name>.<name>setIncludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ds</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>compareFiles</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{}</block></expr></argument> ,<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>test2</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>loginSuceeded</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name>changeRemoteDir</name><argument_list>(<argument><expr><name>remoteTmpDir</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name><name>FTP</name>.<name>FTPDirectoryScanner</name></name></type> <name>ds</name> =<init> <expr><call><name><name>myFTPTask</name>.<name>newScanner</name></name><argument_list>(<argument><expr><name>ftp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>ds</name>.<name>setBasedir</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"tmp"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ds</name>.<name>setIncludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha/"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ds</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>compareFiles</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha/beta/beta.xml"</expr>,
                                               <expr>"alpha/beta/gamma/gamma.xml"</expr>}</block></expr></argument>,
                    <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha"</expr>, <expr>"alpha/beta"</expr>, <expr>"alpha/beta/gamma"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>test3</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>loginSuceeded</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name>changeRemoteDir</name><argument_list>(<argument><expr><name>remoteTmpDir</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name><name>FTP</name>.<name>FTPDirectoryScanner</name></name></type> <name>ds</name> =<init> <expr><call><name><name>myFTPTask</name>.<name>newScanner</name></name><argument_list>(<argument><expr><name>ftp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>ds</name>.<name>setBasedir</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"tmp"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ds</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>compareFiles</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha/beta/beta.xml"</expr>,
                                               <expr>"alpha/beta/gamma/gamma.xml"</expr>}</block></expr></argument>,
                    <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha"</expr>, <expr>"alpha/beta"</expr>,
                                  <expr>"alpha/beta/gamma"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFullPathMatchesCaseSensitive</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>loginSuceeded</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name>changeRemoteDir</name><argument_list>(<argument><expr><name>remoteTmpDir</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name><name>FTP</name>.<name>FTPDirectoryScanner</name></name></type> <name>ds</name> =<init> <expr><call><name><name>myFTPTask</name>.<name>newScanner</name></name><argument_list>(<argument><expr><name>ftp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>ds</name>.<name>setBasedir</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"tmp"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ds</name>.<name>setIncludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha/beta/gamma/GAMMA.XML"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ds</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>compareFiles</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{}</block></expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFullPathMatchesCaseInsensitive</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>loginSuceeded</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name>changeRemoteDir</name><argument_list>(<argument><expr><name>remoteTmpDir</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name><name>FTP</name>.<name>FTPDirectoryScanner</name></name></type> <name>ds</name> =<init> <expr><call><name><name>myFTPTask</name>.<name>newScanner</name></name><argument_list>(<argument><expr><name>ftp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>ds</name>.<name>setCaseSensitive</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ds</name>.<name>setBasedir</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"tmp"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ds</name>.<name>setIncludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha/beta/gamma/GAMMA.XML"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ds</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>compareFiles</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha/beta/gamma/gamma.xml"</expr>}</block></expr></argument>,
                    <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>test2ButCaseInsensitive</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>loginSuceeded</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name>changeRemoteDir</name><argument_list>(<argument><expr><name>remoteTmpDir</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name><name>FTP</name>.<name>FTPDirectoryScanner</name></name></type> <name>ds</name> =<init> <expr><call><name><name>myFTPTask</name>.<name>newScanner</name></name><argument_list>(<argument><expr><name>ftp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>ds</name>.<name>setBasedir</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"tmp"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ds</name>.<name>setIncludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"ALPHA/"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ds</name>.<name>setCaseSensitive</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ds</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>compareFiles</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha/beta/beta.xml"</expr>,
                                               <expr>"alpha/beta/gamma/gamma.xml"</expr>}</block></expr></argument>,
                    <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha"</expr>, <expr>"alpha/beta"</expr>, <expr>"alpha/beta/gamma"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
    }</block></function>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>test2bisButCaseInsensitive</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>loginSuceeded</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name>changeRemoteDir</name><argument_list>(<argument><expr><name>remoteTmpDir</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name><name>FTP</name>.<name>FTPDirectoryScanner</name></name></type> <name>ds</name> =<init> <expr><call><name><name>myFTPTask</name>.<name>newScanner</name></name><argument_list>(<argument><expr><name>ftp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>ds</name>.<name>setBasedir</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"tmp"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ds</name>.<name>setIncludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha/BETA/gamma/"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ds</name>.<name>setCaseSensitive</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ds</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>compareFiles</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha/beta/gamma/gamma.xml"</expr>}</block></expr></argument>,
                    <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha/beta/gamma"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
    }</block></function>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testGetWithSelector</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectLogContaining</name><argument_list>(<argument><expr>"ftp-get-with-selector"</expr></argument>,
            <argument><expr>"selectors are not supported in remote filesets"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>FileSet</name></type> <name>fsDestination</name> =<init> <expr>(<name>FileSet</name>) <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getReference</name><argument_list>(<argument><expr>"fileset-destination-without-selector"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DirectoryScanner</name></type> <name>dsDestination</name> =<init> <expr><call><name><name>fsDestination</name>.<name>getDirectoryScanner</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>dsDestination</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name> <index>[]</index></type> <name>sortedDestinationDirectories</name> =<init> <expr><call><name><name>dsDestination</name>.<name>getIncludedDirectories</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name> <index>[]</index></type> <name>sortedDestinationFiles</name> =<init> <expr><call><name><name>dsDestination</name>.<name>getIncludedFiles</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>counter</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>counter</name> &lt; <name><name>sortedDestinationDirectories</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>counter</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name><name>sortedDestinationDirectories</name><index>[<expr><name>counter</name></expr>]</index></name> =
                <name><name>sortedDestinationDirectories</name><index>[<expr><name>counter</name></expr>]</index></name>.<call><name>replace</name><argument_list>(<argument><expr><name><name>File</name>.<name>separatorChar</name></name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <for>for (<init><decl><type><name>int</name></type> <name>counter</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>counter</name> &lt; <name><name>sortedDestinationFiles</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>counter</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name><name>sortedDestinationFiles</name><index>[<expr><name>counter</name></expr>]</index></name> =
                <name><name>sortedDestinationFiles</name><index>[<expr><name>counter</name></expr>]</index></name>.<call><name>replace</name><argument_list>(<argument><expr><name><name>File</name>.<name>separatorChar</name></name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <decl_stmt><decl><type><name>FileSet</name></type> <name>fsSource</name> =<init>  <expr>(<name>FileSet</name>) <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getReference</name><argument_list>(<argument><expr>"fileset-source-without-selector"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DirectoryScanner</name></type> <name>dsSource</name> =<init> <expr><call><name><name>fsSource</name>.<name>getDirectoryScanner</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>dsSource</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>compareFiles</name><argument_list>(<argument><expr><name>dsSource</name></expr></argument>, <argument><expr><name>sortedDestinationFiles</name></expr></argument>, <argument><expr><name>sortedDestinationDirectories</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testGetFollowSymlinksTrue</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr>!<name>supportsSymlinks</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<name>loginSuceeded</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name>changeRemoteDir</name><argument_list>(<argument><expr><name>remoteTmpDir</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>executeTarget</name><argument_list>(<argument><expr>"ftp-get-directory-symbolic-link"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>FileSet</name></type> <name>fsDestination</name> =<init> <expr>(<name>FileSet</name>) <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getReference</name><argument_list>(<argument><expr>"fileset-destination-without-selector"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DirectoryScanner</name></type> <name>dsDestination</name> =<init> <expr><call><name><name>fsDestination</name>.<name>getDirectoryScanner</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>dsDestination</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>compareFiles</name><argument_list>(<argument><expr><name>dsDestination</name></expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha/beta/gamma/gamma.xml"</expr>}</block></expr></argument>,
            <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha"</expr>, <expr>"alpha/beta"</expr>, <expr>"alpha/beta/gamma"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testGetFollowSymlinksFalse</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr>!<name>supportsSymlinks</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<name>loginSuceeded</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name>changeRemoteDir</name><argument_list>(<argument><expr><name>remoteTmpDir</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>executeTarget</name><argument_list>(<argument><expr>"ftp-get-directory-no-symbolic-link"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>FileSet</name></type> <name>fsDestination</name> =<init> <expr>(<name>FileSet</name>) <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getReference</name><argument_list>(<argument><expr>"fileset-destination-without-selector"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DirectoryScanner</name></type> <name>dsDestination</name> =<init> <expr><call><name><name>fsDestination</name>.<name>getDirectoryScanner</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>dsDestination</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>compareFiles</name><argument_list>(<argument><expr><name>dsDestination</name></expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{}</block></expr></argument>,
            <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testAllowSymlinks</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr>!<name>supportsSymlinks</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<name>loginSuceeded</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name>changeRemoteDir</name><argument_list>(<argument><expr><name>remoteTmpDir</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>executeTarget</name><argument_list>(<argument><expr>"symlink-setup"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>FTP</name>.<name>FTPDirectoryScanner</name></name></type> <name>ds</name> =<init> <expr><call><name><name>myFTPTask</name>.<name>newScanner</name></name><argument_list>(<argument><expr><name>ftp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setBasedir</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"tmp"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setIncludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha/beta/gamma/"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setFollowSymlinks</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>compareFiles</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha/beta/gamma/gamma.xml"</expr>}</block></expr></argument>,
                     <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha/beta/gamma"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testProhibitSymlinks</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr>!<name>supportsSymlinks</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<name>loginSuceeded</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name>changeRemoteDir</name><argument_list>(<argument><expr><name>remoteTmpDir</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>executeTarget</name><argument_list>(<argument><expr>"symlink-setup"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>FTP</name>.<name>FTPDirectoryScanner</name></name></type> <name>ds</name> =<init> <expr><call><name><name>myFTPTask</name>.<name>newScanner</name></name><argument_list>(<argument><expr><name>ftp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setBasedir</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"tmp"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setIncludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha/beta/gamma/"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setFollowSymlinks</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>compareFiles</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{}</block></expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFileSymlink</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr>!<name>supportsSymlinks</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<name>loginSuceeded</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name>changeRemoteDir</name><argument_list>(<argument><expr><name>remoteTmpDir</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>executeTarget</name><argument_list>(<argument><expr>"symlink-file-setup"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>FTP</name>.<name>FTPDirectoryScanner</name></name></type> <name>ds</name> =<init> <expr><call><name><name>myFTPTask</name>.<name>newScanner</name></name><argument_list>(<argument><expr><name>ftp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setBasedir</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"tmp"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setIncludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha/beta/gamma/"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setFollowSymlinks</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>compareFiles</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha/beta/gamma/gamma.xml"</expr>}</block></expr></argument>,
                     <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha/beta/gamma"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <comment type="line">// father and child pattern test</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testOrderOfIncludePatternsIrrelevant</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr>!<name>loginSuceeded</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name>changeRemoteDir</name><argument_list>(<argument><expr><name>remoteTmpDir</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>String</name> <index>[]</index></type> <name>expectedFiles</name> =<init> <expr><block>{<expr>"alpha/beta/beta.xml"</expr>,
                                   <expr>"alpha/beta/gamma/gamma.xml"</expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name> <index>[]</index></type> <name>expectedDirectories</name> =<init> <expr><block>{<expr>"alpha/beta"</expr>, <expr>"alpha/beta/gamma"</expr> }</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>FTP</name>.<name>FTPDirectoryScanner</name></name></type> <name>ds</name> =<init> <expr><call><name><name>myFTPTask</name>.<name>newScanner</name></name><argument_list>(<argument><expr><name>ftp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setBasedir</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"tmp"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setIncludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha/be?a/**"</expr>, <expr>"alpha/beta/gamma/"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>compareFiles</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>expectedFiles</name></expr></argument>, <argument><expr><name>expectedDirectories</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// redo the test, but the 2 include patterns are inverted</comment>
        <expr_stmt><expr><name>ds</name> = <call><name><name>myFTPTask</name>.<name>newScanner</name></name><argument_list>(<argument><expr><name>ftp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setBasedir</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"tmp"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setIncludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha/beta/gamma/"</expr>, <expr>"alpha/be?a/**"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>compareFiles</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>expectedFiles</name></expr></argument>, <argument><expr><name>expectedDirectories</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testPatternsDifferInCaseScanningSensitive</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr>!<name>loginSuceeded</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name>changeRemoteDir</name><argument_list>(<argument><expr><name>remoteTmpDir</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name><name>FTP</name>.<name>FTPDirectoryScanner</name></name></type> <name>ds</name> =<init> <expr><call><name><name>myFTPTask</name>.<name>newScanner</name></name><argument_list>(<argument><expr><name>ftp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setBasedir</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"tmp"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setIncludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha/"</expr>, <expr>"ALPHA/"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>compareFiles</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha/beta/beta.xml"</expr>,
                                       <expr>"alpha/beta/gamma/gamma.xml"</expr>}</block></expr></argument>,
                     <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha"</expr>, <expr>"alpha/beta"</expr>, <expr>"alpha/beta/gamma"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testPatternsDifferInCaseScanningInsensitive</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr>!<name>loginSuceeded</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name>changeRemoteDir</name><argument_list>(<argument><expr><name>remoteTmpDir</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name><name>FTP</name>.<name>FTPDirectoryScanner</name></name></type> <name>ds</name> =<init> <expr><call><name><name>myFTPTask</name>.<name>newScanner</name></name><argument_list>(<argument><expr><name>ftp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setBasedir</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"tmp"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setIncludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha/"</expr>, <expr>"ALPHA/"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setCaseSensitive</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>compareFiles</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha/beta/beta.xml"</expr>,
                                       <expr>"alpha/beta/gamma/gamma.xml"</expr>}</block></expr></argument>,
                     <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha"</expr>, <expr>"alpha/beta"</expr>, <expr>"alpha/beta/gamma"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFullpathDiffersInCaseScanningSensitive</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr>!<name>loginSuceeded</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name>changeRemoteDir</name><argument_list>(<argument><expr><name>remoteTmpDir</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name><name>FTP</name>.<name>FTPDirectoryScanner</name></name></type> <name>ds</name> =<init> <expr><call><name><name>myFTPTask</name>.<name>newScanner</name></name><argument_list>(<argument><expr><name>ftp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setBasedir</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"tmp"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setIncludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{
            <expr>"alpha/beta/gamma/gamma.xml"</expr>,
            <expr>"alpha/beta/gamma/GAMMA.XML"</expr>
        }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>compareFiles</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha/beta/gamma/gamma.xml"</expr>}</block></expr></argument>,
                     <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFullpathDiffersInCaseScanningInsensitive</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr>!<name>loginSuceeded</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name>changeRemoteDir</name><argument_list>(<argument><expr><name>remoteTmpDir</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name><name>FTP</name>.<name>FTPDirectoryScanner</name></name></type> <name>ds</name> =<init> <expr><call><name><name>myFTPTask</name>.<name>newScanner</name></name><argument_list>(<argument><expr><name>ftp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setBasedir</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"tmp"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setIncludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{
            <expr>"alpha/beta/gamma/gamma.xml"</expr>,
            <expr>"alpha/beta/gamma/GAMMA.XML"</expr>
        }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setCaseSensitive</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>compareFiles</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha/beta/gamma/gamma.xml"</expr>}</block></expr></argument>,
                     <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testParentDiffersInCaseScanningSensitive</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr>!<name>loginSuceeded</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name>changeRemoteDir</name><argument_list>(<argument><expr><name>remoteTmpDir</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name><name>FTP</name>.<name>FTPDirectoryScanner</name></name></type> <name>ds</name> =<init> <expr><call><name><name>myFTPTask</name>.<name>newScanner</name></name><argument_list>(<argument><expr><name>ftp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setBasedir</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"tmp"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setIncludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha/"</expr>, <expr>"ALPHA/beta/"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>compareFiles</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha/beta/beta.xml"</expr>,
                                       <expr>"alpha/beta/gamma/gamma.xml"</expr>}</block></expr></argument>,
                     <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha"</expr>, <expr>"alpha/beta"</expr>, <expr>"alpha/beta/gamma"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testParentDiffersInCaseScanningInsensitive</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr>!<name>loginSuceeded</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name>changeRemoteDir</name><argument_list>(<argument><expr><name>remoteTmpDir</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name><name>FTP</name>.<name>FTPDirectoryScanner</name></name></type> <name>ds</name> =<init> <expr><call><name><name>myFTPTask</name>.<name>newScanner</name></name><argument_list>(<argument><expr><name>ftp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setBasedir</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"tmp"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setIncludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha/"</expr>, <expr>"ALPHA/beta/"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setCaseSensitive</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>compareFiles</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha/beta/beta.xml"</expr>,
                                       <expr>"alpha/beta/gamma/gamma.xml"</expr>}</block></expr></argument>,
                     <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha"</expr>, <expr>"alpha/beta"</expr>, <expr>"alpha/beta/gamma"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testExcludeOneFile</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr>!<name>loginSuceeded</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name>changeRemoteDir</name><argument_list>(<argument><expr><name>remoteTmpDir</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name><name>FTP</name>.<name>FTPDirectoryScanner</name></name></type> <name>ds</name> =<init> <expr><call><name><name>myFTPTask</name>.<name>newScanner</name></name><argument_list>(<argument><expr><name>ftp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setBasedir</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"tmp"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setIncludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{
            <expr>"**/*.xml"</expr>
        }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setExcludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{
            <expr>"alpha/beta/b*xml"</expr>
        }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>compareFiles</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha/beta/gamma/gamma.xml"</expr>}</block></expr></argument>,
                     <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testExcludeHasPrecedence</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr>!<name>loginSuceeded</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name>changeRemoteDir</name><argument_list>(<argument><expr><name>remoteTmpDir</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name><name>FTP</name>.<name>FTPDirectoryScanner</name></name></type> <name>ds</name> =<init> <expr><call><name><name>myFTPTask</name>.<name>newScanner</name></name><argument_list>(<argument><expr><name>ftp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setBasedir</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"tmp"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setIncludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{
            <expr>"alpha/**"</expr>
        }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setExcludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{
            <expr>"alpha/**"</expr>
        }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>compareFiles</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{}</block></expr></argument>,
                     <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testAlternateIncludeExclude</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr>!<name>loginSuceeded</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name>changeRemoteDir</name><argument_list>(<argument><expr><name>remoteTmpDir</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name><name>FTP</name>.<name>FTPDirectoryScanner</name></name></type> <name>ds</name> =<init> <expr><call><name><name>myFTPTask</name>.<name>newScanner</name></name><argument_list>(<argument><expr><name>ftp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setBasedir</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"tmp"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setIncludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{
            <expr>"alpha/**"</expr>,
            <expr>"alpha/beta/gamma/**"</expr>
        }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setExcludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{
            <expr>"alpha/beta/**"</expr>
        }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>compareFiles</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{}</block></expr></argument>,
                     <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testAlternateExcludeInclude</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr>!<name>loginSuceeded</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name>changeRemoteDir</name><argument_list>(<argument><expr><name>remoteTmpDir</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name><name>FTP</name>.<name>FTPDirectoryScanner</name></name></type> <name>ds</name> =<init> <expr><call><name><name>myFTPTask</name>.<name>newScanner</name></name><argument_list>(<argument><expr><name>ftp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setBasedir</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"tmp"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setExcludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{
            <expr>"alpha/**"</expr>,
            <expr>"alpha/beta/gamma/**"</expr>
        }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setIncludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{
            <expr>"alpha/beta/**"</expr>
        }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>compareFiles</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{}</block></expr></argument>,
                     <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>
    <comment type="javadoc">/**
     * Test inspired by Bug#1415.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testChildrenOfExcludedDirectory</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr>!<name>loginSuceeded</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name>changeRemoteDir</name><argument_list>(<argument><expr><name>remoteTmpDir</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>executeTarget</name><argument_list>(<argument><expr>"children-of-excluded-dir-setup"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>FTP</name>.<name>FTPDirectoryScanner</name></name></type> <name>ds</name> =<init> <expr><call><name><name>myFTPTask</name>.<name>newScanner</name></name><argument_list>(<argument><expr><name>ftp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setBasedir</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"tmp"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setExcludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha/**"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>compareFiles</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"delta/delta.xml"</expr>}</block></expr></argument>,
                    <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"delta"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>ds</name> = <call><name><name>myFTPTask</name>.<name>newScanner</name></name><argument_list>(<argument><expr><name>ftp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name>changeRemoteDir</name><argument_list>(<argument><expr><name>remoteTmpDir</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setBasedir</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"tmp"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setExcludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>compareFiles</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha/beta/beta.xml"</expr>,
                                       <expr>"alpha/beta/gamma/gamma.xml"</expr>,
                                        <expr>"delta/delta.xml"</expr>}</block></expr></argument>,
                     <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"alpha/beta"</expr>, <expr>"alpha/beta/gamma"</expr>, <expr>"delta"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>
    
    <comment type="javadoc">/**
     * This class enables the use of the log messages as a way of testing 
     * the number of files actually transferred.
     * It uses the ant regular expression mechanism to get a regex parser
     * to parse the log output.
     */</comment>
    <class><specifier>private</specifier> class <name>CountLogListener</name> <super><extends>extends <name>DefaultLogger</name></extends></super> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>Vector</name></type> <name>lastMatchGroups</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>RegexpMatcher</name></type> <name>matcher</name> =<init> <expr>new <call><name>RegexpMatcherFactory</name><argument_list>()</argument_list></call>.<call><name>newRegexpMatcher</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * The only constructor for a CountLogListener
         * @param pattern a regular expression pattern.  It should have 
         * one parenthesized group and that group should contain the
         * number desired.
         */</comment>
        <constructor><specifier>public</specifier> <name>CountLogListener</name><parameter_list>(<param><decl><type><name>String</name></type> <name>pattern</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>matcher</name>.<name>setPattern</name></name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>
        
        
        <comment type="block">/* 
         * @param event the build event that is being logged.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>messageLogged</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>message</name> =<init> <expr><call><name><name>event</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>this</name>.<name>matcher</name>.<name>matches</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>lastMatchGroups</name> = <call><name><name>this</name>.<name>matcher</name>.<name>getGroups</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>super</name>.<name>messageLogged</name></name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        
        <comment type="javadoc">/**
         * returns the desired number that results from parsing the log
         * message
         * @return the number of files indicated in the desired message or -1
         * if a matching log message was never found.
         */</comment>
        <function><type><specifier>public</specifier> <name>int</name></type> <name>getCount</name><parameter_list>()</parameter_list> <block>{
            <if>if <condition>(<expr><name><name>this</name>.<name>lastMatchGroups</name></name> == <name>null</name></expr>)</condition><then> <block>{
                <return>return <expr>-1</expr>;</return>
            }</block></then></if>
            <return>return <expr><call><name><name>Integer</name>.<name>parseInt</name></name><argument_list>(<argument><expr>(<name>String</name>) <call><name><name>this</name>.<name>lastMatchGroups</name>.<name>get</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
    
    <comment type="javadoc">/**
     * This class enables the use of the log to count the number
     * of times a message has been emitted.
     */</comment>
    <class><specifier>private</specifier> class <name>LogCounter</name> <super><extends>extends <name>DefaultLogger</name></extends></super> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>Map</name></type> <name>searchMap</name> =<init> <expr>new <call><name>HashMap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>matchCount</name></decl>;</decl_stmt>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>addLogMessageToSearch</name><parameter_list>(<param><decl><type><name>String</name></type> <name>message</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>searchMap</name>.<name>put</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        
        <comment type="block">/* 
         * @param event the build event that is being logged.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>messageLogged</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>message</name> =<init> <expr><call><name><name>event</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Integer</name></type> <name>mcnt</name> =<init> <expr>(<name>Integer</name>) <call><name><name>searchMap</name>.<name>get</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>null</name> != <name>mcnt</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>searchMap</name>.<name>put</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><call><name><name>mcnt</name>.<name>intValue</name></name><argument_list>()</argument_list></call> + 1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>super</name>.<name>messageLogged</name></name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        
        <comment type="javadoc">/**
         * @return the number of times that the looked for message was sent 
         * to the log
         */</comment>
        <function><type><specifier>public</specifier> <name>int</name></type> <name>getMatchCount</name><parameter_list>(<param><decl><type><name>String</name></type> <name>message</name></decl></param>)</parameter_list> <block>{
            <decl_stmt><decl><type><name>Integer</name></type> <name>mcnt</name> =<init> <expr>(<name>Integer</name>) <call><name><name>searchMap</name>.<name>get</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>null</name> != <name>mcnt</name></expr>)</condition><then> <block>{
                <return>return <expr><call><name><name>mcnt</name>.<name>intValue</name></name><argument_list>()</argument_list></call></expr>;</return>
            }</block></then></if>
            <return>return <expr>0</expr>;</return>
        }</block></function>
    }</block></class>
    <comment type="javadoc">/**
     * Tests the combination of the newer parameter and the 
     * serverTimezoneConfig  parameter in the PUT action.  The default 
     * configuration is an ftp server on localhost which formats 
     * timestamps as GMT.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testTimezonePut</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>CountLogListener</name></type> <name>log</name> =<init> <expr>new <call><name>CountLogListener</name><argument_list>(<argument><expr>"(\\d+) files? sent"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>executeTarget</name><argument_list>(<argument><expr>"timed.test.setup"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>addBuildListener</name><argument_list>(<argument><expr><name>log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>executeTarget</name><argument_list>(<argument><expr>"timed.test.put.older"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><call><name><name>log</name>.<name>getCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Tests the combination of the newer parameter and the 
     * serverTimezoneConfig  parameter in the GET action.  The default 
     * configuration is an ftp server on localhost which formats 
     * timestamps as GMT.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testTimezoneGet</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>CountLogListener</name></type> <name>log</name> =<init> <expr>new <call><name>CountLogListener</name><argument_list>(<argument><expr>"(\\d+) files? retrieved"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>executeTarget</name><argument_list>(<argument><expr>"timed.test.setup"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>addBuildListener</name><argument_list>(<argument><expr><name>log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>executeTarget</name><argument_list>(<argument><expr>"timed.test.get.older"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>3</expr></argument>, <argument><expr><call><name><name>log</name>.<name>getCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
   
    
    <comment type="javadoc">/**
     * Tests that the presence of one of the server config params forces
     * the system type to Unix if not specified.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testConfiguration1</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name><index>[]</index></type> <name>expectedCounts</name> =<init> <expr><block>{
                <expr>1</expr>,<expr>1</expr>,<expr>0</expr>,<expr>1</expr>,<expr>0</expr>,<expr>0</expr>,<expr>0</expr>
        }</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>performConfigTest</name><argument_list>(<argument><expr>"configuration.1"</expr></argument>, <argument><expr><name>expectedCounts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
    }</block></function>

    <comment type="javadoc">/**
     * Tests the systemTypeKey attribute.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testConfiguration2</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name><index>[]</index></type> <name>expectedCounts</name> =<init> <expr><block>{
                <expr>1</expr>,<expr>0</expr>,<expr>0</expr>,<expr>1</expr>,<expr>1</expr>,<expr>0</expr>,<expr>0</expr>
        }</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>performConfigTest</name><argument_list>(<argument><expr>"configuration.2"</expr></argument>, <argument><expr><name>expectedCounts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
    }</block></function>

    <comment type="javadoc">/**
     * Tests the systemTypeKey attribute with UNIX specified.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testConfiguration3</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name><index>[]</index></type> <name>expectedCounts</name> =<init> <expr><block>{
                <expr>1</expr>,<expr>0</expr>,<expr>1</expr>,<expr>0</expr>,<expr>0</expr>,<expr>1</expr>,<expr>0</expr>
        }</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>performConfigTest</name><argument_list>(<argument><expr>"configuration.3"</expr></argument>, <argument><expr><name>expectedCounts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
    }</block></function>
    
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testConfigurationLang</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name><index>[]</index></type> <name>expectedCounts</name> =<init> <expr><block>{
                <expr>1</expr>,<expr>1</expr>,<expr>0</expr>,<expr>0</expr>,<expr>0</expr>,<expr>0</expr>,<expr>1</expr>
        }</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>performConfigTest</name><argument_list>(<argument><expr>"configuration.lang.good"</expr></argument>, <argument><expr><name>expectedCounts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <try>try <block>{
            <expr_stmt><expr><call><name>performConfigTest</name><argument_list>(<argument><expr>"configuration.lang.bad"</expr></argument>, <argument><expr><name>expectedCounts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"BuildException Expected"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>bx</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>bx</name> <name>instanceof</name> <name>BuildException</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
        }</block></catch></try>
    }</block></function>
    <comment type="javadoc">/**
     * Tests the systemTypeKey attribute.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testConfigurationNone</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name><index>[]</index></type> <name>expectedCounts</name> =<init> <expr><block>{
                <expr>0</expr>,<expr>0</expr>,<expr>0</expr>,<expr>0</expr>,<expr>0</expr>,<expr>0</expr>,<expr>0</expr>
        }</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>performConfigTest</name><argument_list>(<argument><expr>"configuration.none"</expr></argument>, <argument><expr><name>expectedCounts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
    }</block></function>
    
    <function><type><specifier>private</specifier> <name>void</name></type> <name>performConfigTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>target</name></decl></param>, <param><decl><type><name><name>int</name><index>[]</index></name></type> <name>expectedCounts</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>messages</name> =<init> <expr>new <name><name>String</name><index>[]</index></name><block>{
                <expr>"custom configuration"</expr>,
                <expr>"custom config: system key = default (UNIX)"</expr>,
                <expr>"custom config: system key = UNIX"</expr>,
                <expr>"custom config: server time zone ID = " + <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getProperty</name><argument_list>(<argument><expr>"ftp.server.timezone"</expr></argument>)</argument_list></call></expr>,
                <expr>"custom config: system key = WINDOWS"</expr>,
                <expr>"custom config: default date format = yyyy/MM/dd HH:mm"</expr>,
                <expr>"custom config: server language code = de"</expr> 

        }</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LogCounter</name></type> <name>counter</name> =<init> <expr>new <call><name>LogCounter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>messages</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>counter</name>.<name>addLogMessageToSearch</name></name><argument_list>(<argument><expr><name><name>messages</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
            
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>addBuildListener</name><argument_list>(<argument><expr><name>counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>executeTarget</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>messages</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"target "+<name>target</name>+":message "+ <name>i</name></expr></argument>, <argument><expr><name><name>expectedCounts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name><name>counter</name>.<name>getMatchCount</name></name><argument_list>(<argument><expr><name><name>messages</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        
    }</block></function>

    
    <comment type="javadoc">/**
     *  this test is inspired by a user reporting that deletions of directories with the ftp task do not work
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFTPDelete</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>executeTarget</name><argument_list>(<argument><expr>"ftp-delete"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>compareFiles</name><parameter_list>(<param><decl><type><name>DirectoryScanner</name></type> <name>ds</name></decl></param>, <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>expectedFiles</name></decl></param>,
                              <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>expectedDirectories</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name><name>includedFiles</name><index>[]</index></name> =<init> <expr><call><name><name>ds</name>.<name>getIncludedFiles</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name><name>includedDirectories</name><index>[]</index></name> =<init> <expr><call><name><name>ds</name>.<name>getIncludedDirectories</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"file present: "</expr></argument>, <argument><expr><name><name>expectedFiles</name>.<name>length</name></name></expr></argument>,
                     <argument><expr><name><name>includedFiles</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"directories present: "</expr></argument>, <argument><expr><name><name>expectedDirectories</name>.<name>length</name></name></expr></argument>,
                     <argument><expr><name><name>includedDirectories</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for (<init><decl><type><name>int</name></type> <name>counter</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>counter</name> &lt; <name><name>includedFiles</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>counter</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name><name>includedFiles</name><index>[<expr><name>counter</name></expr>]</index></name> = <name><name>includedFiles</name><index>[<expr><name>counter</name></expr>]</index></name>.<call><name>replace</name><argument_list>(<argument><expr><name><name>File</name>.<name>separatorChar</name></name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name><name>Arrays</name>.<name>sort</name></name><argument_list>(<argument><expr><name>includedFiles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>counter</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>counter</name> &lt; <name><name>includedDirectories</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>counter</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name><name>includedDirectories</name><index>[<expr><name>counter</name></expr>]</index></name> = <name><name>includedDirectories</name><index>[<expr><name>counter</name></expr>]</index></name>
                            .<call><name>replace</name><argument_list>(<argument><expr><name><name>File</name>.<name>separatorChar</name></name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name><name>Arrays</name>.<name>sort</name></name><argument_list>(<argument><expr><name>includedDirectories</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>counter</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>counter</name> &lt; <name><name>includedFiles</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>counter</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>expectedFiles</name><index>[<expr><name>counter</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>includedFiles</name><index>[<expr><name>counter</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <for>for (<init><decl><type><name>int</name></type> <name>counter</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>counter</name> &lt; <name><name>includedDirectories</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>counter</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>expectedDirectories</name><index>[<expr><name>counter</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>includedDirectories</name><index>[<expr><name>counter</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>counter</name>++</expr>;</expr_stmt>
        }</block></for>
    }</block></function>
    <class><specifier>private</specifier> <specifier>static</specifier> class <name>myFTP</name> <super><extends>extends <name>FTP</name></extends></super> <block>{
        <function><type><specifier>public</specifier> <name><name>FTP</name>.<name>FTPDirectoryScanner</name></name></type> <name>newScanner</name><parameter_list>(<param><decl><type><name>FTPClient</name></type> <name>client</name></decl></param>)</parameter_list> <block>{
            <return>return <expr>new <call><name><name>FTP</name>.<name>FTPDirectoryScanner</name></name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
        <comment type="line">// provide public visibility</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>resolveFile</name><parameter_list>(<param><decl><type><name>String</name></type> <name>file</name></decl></param>)</parameter_list> <block>{
            <return>return <expr><call><name><name>super</name>.<name>resolveFile</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>


    <class><specifier>public</specifier> <specifier>abstract</specifier> <specifier>static</specifier> class <name>myRetryableFTP</name> <super><extends>extends <name>FTP</name></extends></super> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>numberOfFailuresToSimulate</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>simulatedFailuresLeft</name></decl>;</decl_stmt>
        
        <constructor><specifier>protected</specifier> <name>myRetryableFTP</name><parameter_list>(<param><decl><type><name>int</name></type> <name>numberOfFailuresToSimulate</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>numberOfFailuresToSimulate</name></name> = <name>numberOfFailuresToSimulate</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>simulatedFailuresLeft</name></name> = <name>numberOfFailuresToSimulate</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>protected</specifier> <name>void</name></type> <name>getFile</name><parameter_list>(<param><decl><type><name>FTPClient</name></type> <name>ftp</name></decl></param>, <param><decl><type><name>String</name></type> <name>dir</name></decl></param>, <param><decl><type><name>String</name></type> <name>filename</name></decl></param>)</parameter_list>
                <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>BuildException</name></expr></argument></throws> 
        <block>{
            <if>if <condition>(<expr><name><name>this</name>.<name>simulatedFailuresLeft</name></name> &gt; 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>this</name>.<name>simulatedFailuresLeft</name></name>--</expr>;</expr_stmt>
                <throw>throw <expr>new <call><name>IOException</name><argument_list>(<argument><expr>"Simulated failure for testing"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
           <expr_stmt><expr><call><name><name>super</name>.<name>getFile</name></name><argument_list>(<argument><expr><name>ftp</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        <function><type><specifier>protected</specifier> <name>void</name></type> <name>executeRetryable</name><parameter_list>(<param><decl><type><name>RetryHandler</name></type> <name>h</name></decl></param>, <param><decl><type><name>Retryable</name></type> <name>r</name></decl></param>,
                <param><decl><type><name>String</name></type> <name>filename</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> 
        <block>{
            <expr_stmt><expr><name><name>this</name>.<name>simulatedFailuresLeft</name></name> = <name><name>this</name>.<name>numberOfFailuresToSimulate</name></name></expr>;</expr_stmt>    
            <expr_stmt><expr><call><name><name>super</name>.<name>executeRetryable</name></name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>oneFailureFTP</name> <super><extends>extends <name>myRetryableFTP</name></extends></super> <block>{
        <constructor><specifier>public</specifier> <name>oneFailureFTP</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>
    }</block></class>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>twoFailureFTP</name> <super><extends>extends <name>myRetryableFTP</name></extends></super> <block>{
        <constructor><specifier>public</specifier> <name>twoFailureFTP</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>
    }</block></class>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>threeFailureFTP</name> <super><extends>extends <name>myRetryableFTP</name></extends></super> <block>{
        <constructor><specifier>public</specifier> <name>threeFailureFTP</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>
    }</block></class>
    
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>randomFailureFTP</name> <super><extends>extends <name>myRetryableFTP</name></extends></super> <block>{
        <constructor><specifier>public</specifier> <name>randomFailureFTP</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr>new <call><name>Random</name><argument_list>()</argument_list></call>.<call><name>nextInt</name><argument_list>(<argument><expr><name><name>Short</name>.<name>MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>
    }</block></class>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testGetWithSelectorRetryable1</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>addTaskDefinition</name><argument_list>(<argument><expr>"ftp"</expr></argument>, <argument><expr><name><name>oneFailureFTP</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>executeTarget</name><argument_list>(<argument><expr>"ftp-get-with-selector-retryable"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>bx</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Two retries expected, failed after one."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testGetWithSelectorRetryable2</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>addTaskDefinition</name><argument_list>(<argument><expr>"ftp"</expr></argument>, <argument><expr><name><name>twoFailureFTP</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>executeTarget</name><argument_list>(<argument><expr>"ftp-get-with-selector-retryable"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>bx</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Two retries expected, failed after two."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>
    
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testGetWithSelectorRetryable3</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>addTaskDefinition</name><argument_list>(<argument><expr>"ftp"</expr></argument>, <argument><expr><name><name>threeFailureFTP</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>executeTarget</name><argument_list>(<argument><expr>"ftp-get-with-selector-retryable"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Two retries expected, continued after two."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>bx</name></decl></param>) <block>{
        }</block></catch></try>
    }</block></function>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testGetWithSelectorRetryableRandom</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>addTaskDefinition</name><argument_list>(<argument><expr>"ftp"</expr></argument>, <argument><expr><name><name>randomFailureFTP</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>setProperty</name><argument_list>(<argument><expr>"ftp.retries"</expr></argument>, <argument><expr>"forever"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>executeTarget</name><argument_list>(<argument><expr>"ftp-get-with-selector-retryable"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>bx</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Retry forever specified, but failed."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>
    
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testInitialCommand</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>performCommandTest</name><argument_list>(<argument><expr>"test-initial-command"</expr></argument>, <argument><expr>new <name><name>int</name><index>[]</index></name> <block>{ <expr>1</expr>,<expr>0</expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testSiteAction</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>performCommandTest</name><argument_list>(<argument><expr>"test-site-action"</expr></argument>, <argument><expr>new <name><name>int</name><index>[]</index></name> <block>{ <expr>1</expr>,<expr>0</expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <function><type><specifier>private</specifier> <name>void</name></type> <name>performCommandTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>target</name></decl></param>, <param><decl><type><name><name>int</name><index>[]</index></name></type> <name>expectedCounts</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>messages</name> =<init> <expr>new <name><name>String</name><index>[]</index></name><block>{
                <expr>"Doing Site Command: umask 222"</expr>,
                <expr>"Failed to issue Site Command: umask 222"</expr>,

        }</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LogCounter</name></type> <name>counter</name> =<init> <expr>new <call><name>LogCounter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>messages</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>counter</name>.<name>addLogMessageToSearch</name></name><argument_list>(<argument><expr><name><name>messages</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
            
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>addBuildListener</name><argument_list>(<argument><expr><name>counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>executeTarget</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>messages</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"target "+<name>target</name>+":message "+ <name>i</name></expr></argument>, <argument><expr><name><name>expectedCounts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name><name>counter</name>.<name>getMatchCount</name></name><argument_list>(<argument><expr><name><name>messages</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

    }</block></function>
    
}</block></class>
</unit>
