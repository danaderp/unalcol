<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\jlink\JlinkTask.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>jlink</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>MatchingTask</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Path</name></name>;</import>

<comment type="javadoc">/**
 * This class defines objects that can link together various jar and
 * zip files.
 *
 * &lt;p&gt;It is basically a wrapper for the jlink code written originally
 * by &lt;a href="mailto:beard@netscape.com"&gt;Patrick Beard&lt;/a&gt;.  The
 * classes org.apache.tools.ant.taskdefs.optional.jlink.Jlink and
 * org.apache.tools.ant.taskdefs.optional.jlink.ClassNameReader
 * support this class.&lt;/p&gt;
 *
 * &lt;p&gt;For example:
 * &lt;code&gt;
 * &lt;pre&gt;
 * &amp;lt;jlink compress=&amp;quot;false&amp;quot; outfile=&amp;quot;out.jar&amp;quot;/&amp;gt;
 *   &amp;lt;mergefiles&amp;gt;
 *     &amp;lt;pathelement path=&amp;quot;${build.dir}/mergefoo.jar&amp;quot;/&amp;gt;
 *     &amp;lt;pathelement path=&amp;quot;${build.dir}/mergebar.jar&amp;quot;/&amp;gt;
 *   &amp;lt;/mergefiles&amp;gt;
 *   &amp;lt;addfiles&amp;gt;
 *     &amp;lt;pathelement path=&amp;quot;${build.dir}/mac.jar&amp;quot;/&amp;gt;
 *     &amp;lt;pathelement path=&amp;quot;${build.dir}/pc.zip&amp;quot;/&amp;gt;
 *   &amp;lt;/addfiles&amp;gt;
 * &amp;lt;/jlink&amp;gt;
 * &lt;/pre&gt;
 * &lt;/code&gt;
 *
 * @ant.task ignore="true"
 */</comment>
<class><specifier>public</specifier> class <name>JlinkTask</name> <super><extends>extends <name>MatchingTask</name></extends></super> <block>{

    <comment type="javadoc">/**
     * The output file for this run of jlink. Usually a jar or zip file.
     * @param outfile the output file
     */</comment>
    <function><type><specifier>public</specifier>  <name>void</name></type> <name>setOutfile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>outfile</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>outfile</name></name> = <name>outfile</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Establishes the object that contains the files to
     * be merged into the output.
     * @return a path to be configured
     */</comment>
    <function><type><specifier>public</specifier>  <name>Path</name></type> <name>createMergefiles</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>mergefiles</name></name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>mergefiles</name></name> = new <call><name>Path</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><call><name><name>this</name>.<name>mergefiles</name>.<name>createPath</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the files to be merged into the output.
     * @param mergefiles a path
     */</comment>
    <function><type><specifier>public</specifier>  <name>void</name></type> <name>setMergefiles</name><parameter_list>(<param><decl><type><name>Path</name></type> <name>mergefiles</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>mergefiles</name></name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>mergefiles</name></name> = <name>mergefiles</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>mergefiles</name>.<name>append</name></name><argument_list>(<argument><expr><name>mergefiles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Establishes the object that contains the files to
     * be added to the output.
     * @return a path to be configured
     */</comment>
    <function><type><specifier>public</specifier>  <name>Path</name></type> <name>createAddfiles</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>addfiles</name></name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>addfiles</name></name> = new <call><name>Path</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><call><name><name>this</name>.<name>addfiles</name>.<name>createPath</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the files to be added into the output.
     * @param addfiles a path
     */</comment>
    <function><type><specifier>public</specifier>  <name>void</name></type> <name>setAddfiles</name><parameter_list>(<param><decl><type><name>Path</name></type> <name>addfiles</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>addfiles</name></name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>addfiles</name></name> = <name>addfiles</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>addfiles</name>.<name>append</name></name><argument_list>(<argument><expr><name>addfiles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Defines whether or not the output should be compacted.
     * @param compress a &lt;code&gt;boolean&lt;/code&gt; value
     */</comment>
    <function><type><specifier>public</specifier>  <name>void</name></type> <name>setCompress</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>compress</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>compress</name></name> = <name>compress</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Does the adding and merging.
     * @throws BuildException on error
     */</comment>
    <function><type><specifier>public</specifier>  <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <comment type="line">//Be sure everything has been set.</comment>
        <if>if <condition>(<expr><name>outfile</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"outfile attribute is required! "
                + "Please set."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name>haveAddFiles</name><argument_list>()</argument_list></call> &amp;&amp; !<call><name>haveMergeFiles</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"addfiles or mergefiles required! "
                + "Please set."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"linking:     " + <call><name><name>outfile</name>.<name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"compression: " + <name>compress</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>jlink</name></type> <name>linker</name> =<init> <expr>new <call><name>jlink</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>linker</name>.<name>setOutfile</name></name><argument_list>(<argument><expr><call><name><name>outfile</name>.<name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>linker</name>.<name>setCompression</name></name><argument_list>(<argument><expr><name>compress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>haveMergeFiles</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"merge files: " + <call><name><name>mergefiles</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>linker</name>.<name>addMergeFiles</name></name><argument_list>(<argument><expr><call><name><name>mergefiles</name>.<name>list</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>haveAddFiles</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"add files: " + <call><name><name>addfiles</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>linker</name>.<name>addAddFiles</name></name><argument_list>(<argument><expr><call><name><name>addfiles</name>.<name>list</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <try>try  <block>{
            <expr_stmt><expr><call><name><name>linker</name>.<name>link</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>ex</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>ex</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>haveAddFiles</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>haveEntries</name><argument_list>(<argument><expr><name>addfiles</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>haveMergeFiles</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>haveEntries</name><argument_list>(<argument><expr><name>mergefiles</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>haveEntries</name><parameter_list>(<param><decl><type><name>Path</name></type> <name>p</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>p</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>p</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <return>return <expr>false</expr>;</return>
    }</block></function>

    <decl_stmt><decl><type><specifier>private</specifier>  <name>File</name></type> <name>outfile</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier>  <name>Path</name></type> <name>mergefiles</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier>  <name>Path</name></type> <name>addfiles</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier>  <name>boolean</name></type> <name>compress</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

}</block></class>


</unit>
