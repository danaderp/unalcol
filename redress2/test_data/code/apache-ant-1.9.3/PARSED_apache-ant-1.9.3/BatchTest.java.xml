<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\junit\BatchTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>junit</name></name>;</package>


<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>FileSet</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Resource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>ResourceCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>Resources</name></name>;</import>

<comment type="javadoc">/**
 * &lt;p&gt; Create then run &lt;code&gt;JUnitTest&lt;/code&gt;'s based on the list of files
 *     given by the fileset attribute.
 *
 * &lt;p&gt; Every &lt;code&gt;.java&lt;/code&gt; or &lt;code&gt;.class&lt;/code&gt; file in the fileset is
 * assumed to be a testcase.
 * A &lt;code&gt;JUnitTest&lt;/code&gt; is created for each of these named classes with
 * basic setup inherited from the parent &lt;code&gt;BatchTest&lt;/code&gt;.
 *
 * @see JUnitTest
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>BatchTest</name> <super><extends>extends <name>BaseTest</name></extends></super> <block>{

    <comment type="javadoc">/** the reference to the project */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Project</name></type> <name>project</name></decl>;</decl_stmt>

    <comment type="javadoc">/** the list of filesets containing the testcase filename rules */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Resources</name></type> <name>resources</name> =<init> <expr>new <call><name>Resources</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * create a new batchtest instance
     * @param project     the project it depends on.
     */</comment>
    <constructor><specifier>public</specifier> <name>BatchTest</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>project</name></name> = <name>project</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>resources</name>.<name>setCache</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Add a new fileset instance to this batchtest. Whatever the fileset is,
     * only filename that are &lt;tt&gt;.java&lt;/tt&gt; or &lt;tt&gt;.class&lt;/tt&gt; will be
     * considered as 'candidates'.
     * @param     fs the new fileset containing the rules to get the testcases.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addFileSet</name><parameter_list>(<param><decl><type><name>FileSet</name></type> <name>fs</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// this one is here because the changes to support ResourceCollections</comment>
        <comment type="line">// have broken Magic's JUnitTestTask.</comment>
        <comment type="line">//</comment>
        <comment type="line">// The task adds a FileSet to a BatchTest instance using the</comment>
        <comment type="line">// Java API and without telling the FileSet about its project</comment>
        <comment type="line">// instance.  The original code would pass in project on the</comment>
        <comment type="line">// call to getDirectoryScanner - which is now hidden deep into</comment>
        <comment type="line">// Resources.iterator() and not reachable.</comment>
        <if>if <condition>(<expr><call><name><name>fs</name>.<name>getProject</name></name><argument_list>()</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>fs</name>.<name>setProject</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>


    <comment type="javadoc">/**
     * Add a new ResourceCollection instance to this
     * batchtest. Whatever the collection is, only names that are
     * &lt;tt&gt;.java&lt;/tt&gt; or &lt;tt&gt;.class&lt;/tt&gt; will be considered as
     * 'candidates'.
     * @param rc the new ResourceCollection containing the rules to
     * get the testcases.
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>ResourceCollection</name></type> <name>rc</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>resources</name>.<name>add</name></name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Return all &lt;tt&gt;JUnitTest&lt;/tt&gt; instances obtain by applying the fileset rules.
     * @return  an enumeration of all elements of this batchtest that are
     * a &lt;tt&gt;JUnitTest&lt;/tt&gt; instance.
     */</comment>
    <function><type><specifier>public</specifier> <name>Enumeration</name></type> <name>elements</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>JUnitTest</name><index>[]</index></type> <name>tests</name> =<init> <expr><call><name>createAllJUnitTest</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>Enumerations</name>.<name>fromArray</name></name><argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Convenient method to merge the &lt;tt&gt;JUnitTest&lt;/tt&gt;s of this batchtest
     * to a &lt;tt&gt;Vector&lt;/tt&gt;.
     * @param v the vector to which should be added all individual tests of this
     * batch test.
     */</comment>
    <function><type><name>void</name></type> <name>addTestsTo</name><parameter_list>(<param><decl><type><name>Vector</name></type> <name>v</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>JUnitTest</name><index>[]</index></type> <name>tests</name> =<init> <expr><call><name>createAllJUnitTest</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>v</name>.<name>ensureCapacity</name></name><argument_list>(<argument><expr><call><name><name>v</name>.<name>size</name></name><argument_list>()</argument_list></call> + <name><name>tests</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>tests</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>v</name>.<name>addElement</name></name><argument_list>(<argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Create all &lt;tt&gt;JUnitTest&lt;/tt&gt;s based on the filesets. Each instance
     * is configured to match this instance properties.
     * @return the array of all &lt;tt&gt;JUnitTest&lt;/tt&gt;s that belongs to this batch.
     */</comment>
    <function><type><specifier>private</specifier> <name>JUnitTest</name><index>[]</index></type> <name>createAllJUnitTest</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>filenames</name> =<init> <expr><call><name>getFilenames</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>JUnitTest</name><index>[]</index></type> <name>tests</name> =<init> <expr>new <name><name>JUnitTest</name><index>[<expr><name><name>filenames</name>.<name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>tests</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>classname</name> =<init> <expr><call><name>javaToClass</name><argument_list>(<argument><expr><name><name>filenames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name>createJUnitTest</name><argument_list>(<argument><expr><name>classname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>tests</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Iterate over all filesets and return the filename of all files
     * that end with &lt;tt&gt;.java&lt;/tt&gt; or &lt;tt&gt;.class&lt;/tt&gt;. This is to avoid
     * wrapping a &lt;tt&gt;JUnitTest&lt;/tt&gt; over an xml file for example. A Testcase
     * is obviously a java file (compiled or not).
     * @return an array of filenames without their extension. As they should
     * normally be taken from their root, filenames should match their fully
     * qualified class name (If it is not the case it will fail when running the test).
     * For the class &lt;tt&gt;org/apache/Whatever.class&lt;/tt&gt; it will return &lt;tt&gt;org/apache/Whatever&lt;/tt&gt;.
     */</comment>
    <function><type><specifier>private</specifier> <name>String</name><index>[]</index></type> <name>getFilenames</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Vector</name></type> <name>v</name> =<init> <expr>new <call><name>Vector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>Resource</name></type> <name>r</name> :<range> <expr><name>resources</name></expr></range></decl></init>) <block>{
            <if>if <condition>(<expr><call><name><name>r</name>.<name>isExists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>pathname</name> =<init> <expr><call><name><name>r</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>pathname</name>.<name>endsWith</name></name><argument_list>(<argument><expr>".java"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>v</name>.<name>addElement</name></name><argument_list>(<argument><expr><call><name><name>pathname</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>pathname</name>.<name>length</name></name><argument_list>()</argument_list></call> - ".java".<call><name>length</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <if>if <condition>(<expr><call><name><name>pathname</name>.<name>endsWith</name></name><argument_list>(<argument><expr>".class"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>v</name>.<name>addElement</name></name><argument_list>(<argument><expr><call><name><name>pathname</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>pathname</name>.<name>length</name></name><argument_list>()</argument_list></call> - ".class".<call><name>length</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if></else></if>
            }</block></then></if>
        }</block></for>

        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>files</name> =<init> <expr>new <name><name>String</name><index>[<expr><call><name><name>v</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>v</name>.<name>copyInto</name></name><argument_list>(<argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>files</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Convenient method to convert a pathname without extension to a
     * fully qualified classname. For example &lt;tt&gt;org/apache/Whatever&lt;/tt&gt; will
     * be converted to &lt;tt&gt;org.apache.Whatever&lt;/tt&gt;
     * @param filename the filename to "convert" to a classname.
     * @return the classname matching the filename.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>javaToClass</name><parameter_list>(<param><decl><type><name>String</name></type> <name>filename</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>filename</name>.<name>replace</name></name><argument_list>(<argument><expr><name><name>File</name>.<name>separatorChar</name></name></expr></argument>, <argument><expr>'.'</expr></argument>)</argument_list></call>.<call><name>replace</name><argument_list>(<argument><expr>'/'</expr></argument>, <argument><expr>'.'</expr></argument>)</argument_list></call>
            .<call><name>replace</name><argument_list>(<argument><expr>'\\'</expr></argument>, <argument><expr>'.'</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Create a &lt;tt&gt;JUnitTest&lt;/tt&gt; that has the same property as this
     * &lt;tt&gt;BatchTest&lt;/tt&gt; instance.
     * @param classname the name of the class that should be run as a
     * &lt;tt&gt;JUnitTest&lt;/tt&gt;. It must be a fully qualified name.
     * @return the &lt;tt&gt;JUnitTest&lt;/tt&gt; over the given classname.
     */</comment>
    <function><type><specifier>private</specifier> <name>JUnitTest</name></type> <name>createJUnitTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>classname</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>JUnitTest</name></type> <name>test</name> =<init> <expr>new <call><name>JUnitTest</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>test</name>.<name>setName</name></name><argument_list>(<argument><expr><name>classname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>test</name>.<name>setHaltonerror</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>haltOnError</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>test</name>.<name>setHaltonfailure</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>haltOnFail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>test</name>.<name>setFiltertrace</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>filtertrace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>test</name>.<name>setFork</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>fork</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>test</name>.<name>setIf</name></name><argument_list>(<argument><expr><call><name>getIfCondition</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>test</name>.<name>setUnless</name></name><argument_list>(<argument><expr><call><name>getUnlessCondition</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>test</name>.<name>setTodir</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>destDir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>test</name>.<name>setFailureProperty</name></name><argument_list>(<argument><expr><name>failureProperty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>test</name>.<name>setErrorProperty</name></name><argument_list>(<argument><expr><name>errorProperty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>test</name>.<name>setSkipNonTests</name></name><argument_list>(<argument><expr><call><name>isSkipNonTests</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Enumeration</name></type> <name>list</name> =<init> <expr><call><name><name>this</name>.<name>formatters</name>.<name>elements</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>list</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <expr_stmt><expr><call><name><name>test</name>.<name>addFormatter</name></name><argument_list>(<argument><expr>(<name>FormatterElement</name>) <call><name><name>list</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <return>return <expr><name>test</name></expr>;</return>
    }</block></function>

}</block></class>
</unit>
