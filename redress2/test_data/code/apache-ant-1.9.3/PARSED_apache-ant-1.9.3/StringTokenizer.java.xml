<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\util\StringTokenizer.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Reader</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>ProjectComponent</name></name>;</import>

<comment type="javadoc">/**
 * Class to tokenize the input as areas separated
 * by white space, or by a specified list of
 * delim characters. Behaves like java.util.StringTokenizer.
 * If the stream starts with delim characters, the first
 * token will be an empty string (unless the treat delims
 * as tokens flag is set).
 * @since Ant 1.7
 */</comment>
<class><specifier>public</specifier> class <name>StringTokenizer</name> <super><extends>extends <name>ProjectComponent</name></extends> <implements>implements <name>Tokenizer</name></implements></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>NOT_A_CHAR</name> =<init> <expr>-2</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>intraString</name> =<init> <expr>""</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type>    <name>pushed</name> =<init> <expr><name>NOT_A_CHAR</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>char</name><index>[]</index></type> <name>delims</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>delimsAreTokens</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>suppressDelims</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>includeDelims</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * attribute delims - the delimiter characters
     * @param delims a string containing the delimiter characters
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDelims</name><parameter_list>(<param><decl><type><name>String</name></type> <name>delims</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>delims</name></name> = <call><name><name>StringUtils</name>.<name>resolveBackSlash</name></name><argument_list>(<argument><expr><name>delims</name></expr></argument>)</argument_list></call>.<call><name>toCharArray</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * attribute delimsaretokens - treat delimiters as
     * separate tokens.
     * @param delimsAreTokens true if delimiters are to be separate
     */</comment>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDelimsAreTokens</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>delimsAreTokens</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>delimsAreTokens</name></name> = <name>delimsAreTokens</name></expr>;</expr_stmt>
    }</block></function>
    <comment type="javadoc">/**
     * attribute suppressdelims - suppress delimiters.
     * default - false
     * @param suppressDelims if true do not report delimiters
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSuppressDelims</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>suppressDelims</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>suppressDelims</name></name> = <name>suppressDelims</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * attribute includedelims - treat delimiters as part
     * of the token.
     * default - false
     * @param includeDelims if true add delimiters to the token
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setIncludeDelims</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>includeDelims</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>includeDelims</name></name> = <name>includeDelims</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * find and return the next token
     *
     * @param in the input stream
     * @return the token
     * @exception IOException if an error occurs reading
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getToken</name><parameter_list>(<param><decl><type><name>Reader</name></type> <name>in</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>ch</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>pushed</name> != <name>NOT_A_CHAR</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>ch</name> = <name>pushed</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>pushed</name> = <name>NOT_A_CHAR</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>ch</name> = <call><name><name>in</name>.<name>read</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <if>if <condition>(<expr><name>ch</name> == -1</expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>boolean</name></type> <name>inToken</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>intraString</name> = ""</expr>;</expr_stmt>
        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>word</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>padding</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>ch</name> != -1</expr>)</condition> <block>{
            <decl_stmt><decl><type><name>char</name></type> <name>c</name> =<init> <expr>(<name>char</name>) <name>ch</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>isDelim</name> =<init> <expr><call><name>isDelim</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>inToken</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>isDelim</name></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><name>delimsAreTokens</name></expr>)</condition><then> <block>{
                        <if>if <condition>(<expr><call><name><name>word</name>.<name>length</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
                            <expr_stmt><expr><call><name><name>word</name>.<name>append</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then> <else>else <block>{
                            <expr_stmt><expr><name>pushed</name> = <name>ch</name></expr>;</expr_stmt>
                        }</block></else></if>
                        <break>break;</break>
                    }</block></then></if>
                    <expr_stmt><expr><call><name><name>padding</name>.<name>append</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>inToken</name> = false</expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name><name>word</name>.<name>append</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then> <else>else <block>{
                <if>if <condition>(<expr><name>isDelim</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>padding</name>.<name>append</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><name>pushed</name> = <name>ch</name></expr>;</expr_stmt>
                    <break>break;</break>
                }</block></else></if>
            }</block></else></if>
            <expr_stmt><expr><name>ch</name> = <call><name><name>in</name>.<name>read</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <expr_stmt><expr><name>intraString</name> = <call><name><name>padding</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>includeDelims</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>word</name>.<name>append</name></name><argument_list>(<argument><expr><name>intraString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><call><name><name>word</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * @return the intratoken string
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getPostToken</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>suppressDelims</name> || <name>includeDelims</name> ? "" : <name>intraString</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>isDelim</name><parameter_list>(<param><decl><type><name>char</name></type> <name>ch</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>delims</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>Character</name>.<name>isWhitespace</name></name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>delims</name>.<name>length</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
            <if>if <condition>(<expr><name><name>delims</name><index>[<expr><name>i</name></expr>]</index></name> == <name>ch</name></expr>)</condition><then> <block>{
                <return>return <expr>true</expr>;</return>
            }</block></then></if>
        }</block></for>
        <return>return <expr>false</expr>;</return>
    }</block></function>
}</block></class>
</unit>
