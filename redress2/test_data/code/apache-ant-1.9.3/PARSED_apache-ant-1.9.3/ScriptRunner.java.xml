<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\util\optional\ScriptRunner.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>optional</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>bsf</name>.<name>BSFException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>bsf</name>.<name>BSFManager</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>bsf</name>.<name>BSFEngine</name></name>;</import>

<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Hashtable</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>ReflectUtil</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>ScriptRunnerBase</name></name>;</import>

<comment type="javadoc">/**
 * This class is used to run BSF scripts
 *
 */</comment>
<class><specifier>public</specifier> class <name>ScriptRunner</name> <super><extends>extends <name>ScriptRunnerBase</name></extends></super> <block>{
    <comment type="line">// Register Groovy ourselves, since BSF did not</comment>
    <comment type="line">// natively support it in versions previous to 1.2.4.</comment>
    static <block>{
        <expr_stmt><expr><call><name><name>BSFManager</name>.<name>registerScriptingEngine</name></name><argument_list>(
            <argument><expr>"groovy"</expr></argument>,
            <argument><expr>"org.codehaus.groovy.bsf.GroovyEngine"</expr></argument>,
            <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"groovy"</expr>, <expr>"gy"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>

    <decl_stmt><decl><type><specifier>private</specifier> <name>BSFEngine</name></type>  <name>engine</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>BSFManager</name></type> <name>manager</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Get the name of the manager prefix.
     * @return "bsf"
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getManagerName</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>"bsf"</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Check if bsf supports the language.
     * @return true if bsf can create an engine for this language.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>supportsLanguage</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Hashtable</name></type> <name>table</name> =<init> <expr>(<name>Hashtable</name>) <call><name><name>ReflectUtil</name>.<name>getField</name></name><argument_list>(
            <argument><expr>new <call><name>BSFManager</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"registeredEngines"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>engineClassName</name> =<init> <expr>(<name>String</name>) <call><name><name>table</name>.<name>get</name></name><argument_list>(<argument><expr><call><name>getLanguage</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>engineClassName</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>log</name><argument_list>(
                <argument><expr>"This is no BSF engine class for language '"
                + <call><name>getLanguage</name><argument_list>()</argument_list></call> + "'"</expr></argument>,
                <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <try>try <block>{
            <expr_stmt><expr><call><name>getScriptClassLoader</name><argument_list>()</argument_list></call>.<call><name>loadClass</name><argument_list>(<argument><expr><name>engineClassName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>true</expr>;</return>
        }</block> <catch>catch (<param><decl><type><name>Throwable</name></type> <name>ex</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>log</name><argument_list>(
                <argument><expr>"unable to create BSF engine class for language '"
                + <call><name>getLanguage</name><argument_list>()</argument_list></call> + "'"</expr></argument>,
                <argument><expr><name>ex</name></expr></argument>,
                <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>false</expr>;</return>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * Do the work.
     *
     * @param execName the name that will be passed to BSF for this script execution.
     * @exception BuildException if something goes wrong executing the script.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>executeScript</name><parameter_list>(<param><decl><type><name>String</name></type> <name>execName</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>checkLanguage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ClassLoader</name></type> <name>origLoader</name> =<init> <expr><call><name>replaceContextLoader</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <decl_stmt><decl><type><name>BSFManager</name></type> <name>m</name> =<init> <expr><call><name>createManager</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>declareBeans</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// execute the script</comment>
            <if>if <condition>(<expr><name>engine</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>m</name>.<name>exec</name></name><argument_list>(<argument><expr><call><name>getLanguage</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>execName</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>getScript</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>engine</name>.<name>exec</name></name><argument_list>(<argument><expr><name>execName</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>getScript</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block> <catch>catch (<param><decl><type><name>BSFException</name></type> <name>be</name></decl></param>) <block>{
            <throw>throw <expr><call><name>getBuildException</name><argument_list>(<argument><expr><name>be</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <finally>finally <block>{
            <expr_stmt><expr><call><name>restoreContextLoader</name><argument_list>(<argument><expr><name>origLoader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <comment type="javadoc">/**
     * Evaluate the script.
     *
     * @param execName the name that will be passed to BSF for this script execution.
     * @return the result of the evaluation
     * @exception BuildException if something goes wrong executing the script.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>evaluateScript</name><parameter_list>(<param><decl><type><name>String</name></type> <name>execName</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>checkLanguage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ClassLoader</name></type> <name>origLoader</name> =<init> <expr><call><name>replaceContextLoader</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <decl_stmt><decl><type><name>BSFManager</name></type> <name>m</name> =<init> <expr><call><name>createManager</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>declareBeans</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// execute the script</comment>
            <if>if <condition>(<expr><name>engine</name> == <name>null</name></expr>)</condition><then> <block>{
                <return>return <expr><call><name><name>m</name>.<name>eval</name></name><argument_list>(<argument><expr><call><name>getLanguage</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>execName</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>getScript</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>
            <return>return <expr><call><name><name>engine</name>.<name>eval</name></name><argument_list>(<argument><expr><name>execName</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>getScript</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block> <catch>catch (<param><decl><type><name>BSFException</name></type> <name>be</name></decl></param>) <block>{
            <throw>throw <expr><call><name>getBuildException</name><argument_list>(<argument><expr><name>be</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <finally>finally <block>{
            <expr_stmt><expr><call><name>restoreContextLoader</name><argument_list>(<argument><expr><name>origLoader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <comment type="javadoc">/**
     * Get/create a BuildException from a BSFException.
     * @param be BSFException to convert.
     * @return BuildException the converted exception.
     */</comment>
    <function><type><specifier>private</specifier> <name>BuildException</name></type> <name>getBuildException</name><parameter_list>(<param><decl><type><name>BSFException</name></type> <name>be</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Throwable</name></type> <name>t</name> =<init> <expr><name>be</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Throwable</name></type> <name>te</name> =<init> <expr><call><name><name>be</name>.<name>getTargetException</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>te</name> <name>instanceof</name> <name>BuildException</name></expr>)</condition><then> <block>{
            <return>return <expr>(<name>BuildException</name>) <name>te</name></expr>;</return>
        }</block></then></if>
        <return>return <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>te</name> == <name>null</name> ? <name>t</name> : <name>te</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>declareBeans</name><parameter_list>(<param><decl><type><name>BSFManager</name></type> <name>m</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BSFException</name></expr></argument></throws> <block>{
        <for>for (<init><decl><type><name>Iterator</name></type> <name>i</name> =<init> <expr><call><name>getBeans</name><argument_list>()</argument_list></call>.<call><name>keySet</name><argument_list>()</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>i</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>key</name> =<init> <expr>(<name>String</name>) <call><name><name>i</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Object</name></type> <name>value</name> =<init> <expr><call><name>getBeans</name><argument_list>()</argument_list></call>.<call><name>get</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>value</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>m</name>.<name>declareBean</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><call><name><name>value</name>.<name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <comment type="line">// BSF uses a hashtable to store values</comment>
                <comment type="line">// so cannot declareBean with a null value</comment>
                <comment type="line">// So need to remove any bean of this name as</comment>
                <comment type="line">// that bean should not be visible</comment>
                <expr_stmt><expr><call><name><name>m</name>.<name>undeclareBean</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></for>
    }</block></function>

    <function><type><specifier>private</specifier> <name>BSFManager</name></type> <name>createManager</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BSFException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>manager</name> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>manager</name></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>BSFManager</name></type> <name>m</name> =<init> <expr>new <call><name>BSFManager</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>m</name>.<name>setClassLoader</name></name><argument_list>(<argument><expr><call><name>getScriptClassLoader</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>getKeepEngine</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>BSFEngine</name></type> <name>e</name> =<init> <expr><call><name><name>manager</name>.<name>loadScriptingEngine</name></name><argument_list>(<argument><expr><call><name>getLanguage</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>manager</name></name> = <name>m</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>engine</name></name>  = <name>e</name></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>m</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
