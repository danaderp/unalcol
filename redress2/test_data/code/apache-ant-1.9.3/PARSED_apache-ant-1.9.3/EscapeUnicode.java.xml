<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\filters\EscapeUnicode.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>filters</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Reader</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>UnicodeUtil</name></name>;</import>

<comment type="javadoc">/**
 * This method converts non-latin characters to unicode escapes.
 * Useful to load properties containing non latin
 * Example:
 *
 * &lt;pre&gt;&amp;lt;escapeunicode&amp;gt;&lt;/pre&gt;
 *
 * Or:
 *
 * &lt;pre&gt;&amp;lt;filterreader
        classname=&amp;quot;org.apache.tools.ant.filters.EscapeUnicode&amp;quot;/&amp;gt;
 *  &lt;/pre&gt;
 *
 * @since Ant 1.6
 */</comment>
<class><specifier>public</specifier> class <name>EscapeUnicode</name>
    <super><extends>extends <name>BaseParamFilterReader</name></extends>
    <implements>implements <name>ChainableReader</name></implements></super> <block>{
    <comment type="line">//this field will hold unnnn right after reading a non latin character</comment>
    <comment type="line">//afterwards it will be truncated of one char every call to read</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>StringBuffer</name></type> <name>unicodeBuf</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructor for "dummy" instances.
     *
     * @see BaseFilterReader#BaseFilterReader()
     */</comment>
    <constructor><specifier>public</specifier> <name>EscapeUnicode</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>unicodeBuf</name> = new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a new filtered reader.
     *
     * @param in A Reader object providing the underlying stream.
     *           Must not be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <constructor><specifier>public</specifier> <name>EscapeUnicode</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Reader</name></type> <name>in</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>unicodeBuf</name> = new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the next character in the filtered stream, converting non latin
     * characters to unicode escapes.
     *
     * @return the next character in the resulting stream, or -1
     * if the end of the resulting stream has been reached
     *
     * @exception IOException if the underlying stream throws
     * an IOException during reading
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>read</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr>!<call><name>getInitialized</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>initialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setInitialized</name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name>int</name></type> <name>ch</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>unicodeBuf</name>.<name>length</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>ch</name> = <call><name><name>in</name>.<name>read</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>ch</name> != -1</expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>char</name></type> <name>achar</name> =<init> <expr>(<name>char</name>) <name>ch</name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>achar</name> &gt;= '\u0080'</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>unicodeBuf</name> = <call><name><name>UnicodeUtil</name>.<name>EscapeUnicode</name></name><argument_list>(<argument><expr><name>achar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>ch</name> = '\\'</expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>ch</name> = (<name>int</name>) <call><name><name>unicodeBuf</name>.<name>charAt</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>unicodeBuf</name>.<name>deleteCharAt</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><name>ch</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Creates a new EscapeUnicode using the passed in
     * Reader for instantiation.
     *
     * @param rdr A Reader object providing the underlying stream.
     *            Must not be &lt;code&gt;null&lt;/code&gt;.
     *
     * @return a new filter based on this configuration, but filtering
     *         the specified reader
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>Reader</name></type> <name>chain</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Reader</name></type> <name>rdr</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>EscapeUnicode</name></type> <name>newFilter</name> =<init> <expr>new <call><name>EscapeUnicode</name><argument_list>(<argument><expr><name>rdr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>newFilter</name>.<name>setInitialized</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>newFilter</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Parses the parameters (currently unused)
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>initialize</name><parameter_list>()</parameter_list> <block>{
    }</block></function>
}</block></class>

</unit>
