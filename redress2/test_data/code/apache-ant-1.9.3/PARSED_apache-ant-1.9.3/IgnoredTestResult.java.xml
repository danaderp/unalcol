<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\junit\IgnoredTestResult.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>junit</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>junit</name>.<name>framework</name>.<name>Test</name></name>;</import>
<import>import <name><name>junit</name>.<name>framework</name>.<name>TestListener</name></name>;</import>
<import>import <name><name>junit</name>.<name>framework</name>.<name>TestResult</name></name>;</import>

<comment type="javadoc">/**
 * Records ignored and skipped tests reported as part of the execution of
 * JUnit 4 tests.
 *
 */</comment>
<class><specifier>public</specifier> class <name>IgnoredTestResult</name> <super><extends>extends <name>TestResult</name></extends></super> <block>{


    <decl_stmt><decl><type><specifier>private</specifier> <name><name>List</name><argument_list>&lt;<argument><name>IgnoredTestListener</name></argument>&gt;</argument_list></name></type> <name>listeners</name> =<init> <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>IgnoredTestListener</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>List</name><argument_list>&lt;<argument><name>TestIgnored</name></argument>&gt;</argument_list></name></type> <name>ignored</name> =<init> <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>TestIgnored</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>List</name><argument_list>&lt;<argument><name>TestIgnored</name></argument>&gt;</argument_list></name></type> <name>skipped</name> =<init> <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>TestIgnored</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>IgnoredTestResult</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>addListener</name><parameter_list>(<param><decl><type><name>TestListener</name></type> <name>listener</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>listener</name> <name>instanceof</name> <name>IgnoredTestListener</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>listeners</name>.<name>add</name></name><argument_list>(<argument><expr>(<name>IgnoredTestListener</name>)<name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>super</name>.<name>addListener</name></name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>synchronized</specifier>  <name>void</name></type> <name>removeListener</name><parameter_list>(<param><decl><type><name>TestListener</name></type> <name>listener</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>listener</name> <name>instanceof</name> <name>IgnoredTestListener</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>listeners</name>.<name>remove</name></name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>super</name>.<name>removeListener</name></name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Record a test as having been ignored, normally by the @Ignore annotation.
     * @param test the test that was ignored.
     * @throws Exception is the listener thrown an exception on handling the notification.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>testIgnored</name><parameter_list>(<param><decl><type><name>Test</name></type> <name>test</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>ignored</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>TestIgnored</name><argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>IgnoredTestListener</name></type> <name>listener</name> :<range> <expr><name>listeners</name></expr></range></decl></init>) <block>{
            <expr_stmt><expr><call><name><name>listener</name>.<name>testIgnored</name></name><argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Report how many tests were ignored.
     * @return the number of tests reported as ignored during the current execution.
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>ignoredCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>ignored</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Records a test as having an assumption failure so JUnit will no longer be executing it.
     * Under normal circumstances this would be counted as a skipped test.
     * @param test the test to record
     * @param cause the details of the test and assumption failure.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testAssumptionFailure</name><parameter_list>(<param><decl><type><name>Test</name></type> <name>test</name></decl></param>, <param><decl><type><name>Throwable</name></type> <name>cause</name></decl></param>)</parameter_list> <block>{
    	<expr_stmt><expr><call><name><name>skipped</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>TestIgnored</name><argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>IgnoredTestListener</name></type> <name>listener</name> :<range> <expr><name>listeners</name></expr></range></decl></init>) <block>{
            <expr_stmt><expr><call><name><name>listener</name>.<name>testAssumptionFailure</name></name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>cause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Report how many tests has assumption failures.
     * @return the number of tests that reported assumption failures during the current execution.
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>skippedCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>skipped</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
