<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\LogOutputStream.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>ProjectComponent</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>LineOrientedOutputStream</name></name>;</import>

<comment type="javadoc">/**
 * Logs each line written to this stream to the log system of ant.
 *
 * Tries to be smart about line separators.&lt;br&gt;
 *
 * @since Ant 1.2
 */</comment>
<class><specifier>public</specifier> class <name>LogOutputStream</name> <super><extends>extends <name>LineOrientedOutputStream</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>ProjectComponent</name></type> <name>pc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>level</name> =<init> <expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Create a new LogOutputStream for the specified ProjectComponent.
     *
     * @param pc the project component for whom to log
     * @since Ant 1.7.1
     */</comment>
    <constructor><specifier>public</specifier> <name>LogOutputStream</name><parameter_list>(<param><decl><type><name>ProjectComponent</name></type> <name>pc</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>pc</name></name> = <name>pc</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a new instance of this class.
     *
     * @param task the task for whom to log
     * @param level loglevel used to log data written to this stream.
     */</comment>
    <constructor><specifier>public</specifier> <name>LogOutputStream</name><parameter_list>(<param><decl><type><name>Task</name></type> <name>task</name></decl></param>, <param><decl><type><name>int</name></type> <name>level</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>(<name>ProjectComponent</name>) <name>task</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a new instance of this class.
     *
     * @param pc the project component for whom to log
     * @param level loglevel used to log data written to this stream.
     * @since Ant 1.6.3
     */</comment>
    <constructor><specifier>public</specifier> <name>LogOutputStream</name><parameter_list>(<param><decl><type><name>ProjectComponent</name></type> <name>pc</name></decl></param>, <param><decl><type><name>int</name></type> <name>level</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>level</name></name> = <name>level</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Converts the buffer to a string and sends it to &lt;code&gt;processLine&lt;/code&gt;
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>processBuffer</name><parameter_list>()</parameter_list> <block>{
        <try>try <block>{
            <expr_stmt><expr><call><name><name>super</name>.<name>processBuffer</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
            <comment type="line">// impossible since *our* processLine doesn't throw an IOException</comment>
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr>"Impossible IOException caught: " + <name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * Logs a line to the log system of ant.
     *
     * @param line the line to log.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>processLine</name><parameter_list>(<param><decl><type><name>String</name></type> <name>line</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>processLine</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Logs a line to the log system of ant.
     *
     * @param line the line to log.
     * @param level the logging level to use.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>processLine</name><parameter_list>(<param><decl><type><name>String</name></type> <name>line</name></decl></param>, <param><decl><type><name>int</name></type> <name>level</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>pc</name>.<name>log</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the level.
     * @return the log level.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getMessageLevel</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>level</name></expr>;</return>
    }</block></function>

}</block></class>
</unit>
