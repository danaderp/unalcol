<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\util\DOMUtils.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name></name>;</package>

<import>import <name><name>org</name>.<name>w3c</name>.<name>dom</name>.<name>CDATASection</name></name>;</import>
<import>import <name><name>org</name>.<name>w3c</name>.<name>dom</name>.<name>Document</name></name>;</import>
<import>import <name><name>org</name>.<name>w3c</name>.<name>dom</name>.<name>Element</name></name>;</import>
<import>import <name><name>org</name>.<name>w3c</name>.<name>dom</name>.<name>Text</name></name>;</import>

<comment type="line">// CheckStyle:HideUtilityClassConstructorCheck OFF - bc</comment>

<comment type="javadoc">/**
 * Some utility methods for common tasks when building DOM trees in memory.
 *
 * &lt;p&gt;In this documentation &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; means an {@link
 * org.w3c.dom.Element Element} instance with name &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;
 *
 * @since Ant 1.6.3
 */</comment>
<class><specifier>public</specifier> class <name>DOMUtils</name> <block>{

    <comment type="javadoc">/**
     * Get a new Document instance,
     * @return the document.
     * @since Ant 1.6.3
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Document</name></type> <name>newDocument</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>JAXPUtils</name>.<name>getDocumentBuilder</name></name><argument_list>()</argument_list></call>.<call><name>newDocument</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Creates a named Element and appends it to the given element,
     * returns it.
     *
     * &lt;p&gt;This means
     * &lt;pre&gt;createChildElement(&amp;lt;a&amp;gt;, "b")&lt;/pre&gt;
     * creates
     * &lt;pre&gt;
     * &amp;lt;a&amp;gt;
     *   &amp;lt;b/&amp;gt;
     * &amp;lt;/a&amp;gt;
     * &lt;/pre&gt;
     * and returns &lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt;.&lt;/p&gt;
     *
     * @param parent element that will receive the new element as child.
     * @param name name of the new element.
     * @return the new element.
     *
     * @since Ant 1.6.3
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Element</name></type> <name>createChildElement</name><parameter_list>(<param><decl><type><name>Element</name></type> <name>parent</name></decl></param>, <param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Document</name></type> <name>doc</name> =<init> <expr><call><name><name>parent</name>.<name>getOwnerDocument</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Element</name></type> <name>e</name> =<init> <expr><call><name><name>doc</name>.<name>createElement</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>parent</name>.<name>appendChild</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>e</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Adds nested text.
     *
     * &lt;p&gt;This means
     * &lt;pre&gt;appendText(&amp;lt;a&amp;gt;, "b")&lt;/pre&gt;
     * creates
     * &lt;pre&gt;
     * &amp;lt;a&amp;gt;b&amp;lt;/a&amp;gt;
     * &lt;/pre&gt;
     * &lt;/p&gt;
     *
     * @param parent element that will receive the new element as child.
     * @param content text content.
     *
     * @since Ant 1.6.3
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>appendText</name><parameter_list>(<param><decl><type><name>Element</name></type> <name>parent</name></decl></param>, <param><decl><type><name>String</name></type> <name>content</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Document</name></type> <name>doc</name> =<init> <expr><call><name><name>parent</name>.<name>getOwnerDocument</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Text</name></type> <name>t</name> =<init> <expr><call><name><name>doc</name>.<name>createTextNode</name></name><argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>parent</name>.<name>appendChild</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a nested CDATA section.
     *
     * &lt;p&gt;This means
     * &lt;pre&gt;appendCDATA(&amp;lt;a&amp;gt;, "b")&lt;/pre&gt;
     * creates
     * &lt;pre&gt;
     * &amp;lt;a&amp;gt;&amp;lt;[!CDATA[b]]&amp;gt;&amp;lt;/a&amp;gt;
     * &lt;/pre&gt;
     * &lt;/p&gt;
     *
     * @param parent element that will receive the new element as child.
     * @param content text content.
     *
     * @since Ant 1.6.3
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>appendCDATA</name><parameter_list>(<param><decl><type><name>Element</name></type> <name>parent</name></decl></param>, <param><decl><type><name>String</name></type> <name>content</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Document</name></type> <name>doc</name> =<init> <expr><call><name><name>parent</name>.<name>getOwnerDocument</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CDATASection</name></type> <name>c</name> =<init> <expr><call><name><name>doc</name>.<name>createCDATASection</name></name><argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>parent</name>.<name>appendChild</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Adds nested text in a new child element.
     *
     * &lt;p&gt;This means
     * &lt;pre&gt;appendTextElement(&amp;lt;a&amp;gt;, "b", "c")&lt;/pre&gt;
     * creates
     * &lt;pre&gt;
     * &amp;lt;a&amp;gt;
     *   &amp;lt;b&amp;gt;c&amp;lt;/b&amp;gt;
     * &amp;lt;/a&amp;gt;
     * &lt;/pre&gt;
     * &lt;/p&gt;
     *
     * @param parent element that will receive the new element as child.
     * @param name of the child element.
     * @param content text content.
     *
     * @since Ant 1.6.3
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>appendTextElement</name><parameter_list>(<param><decl><type><name>Element</name></type> <name>parent</name></decl></param>, <param><decl><type><name>String</name></type> <name>name</name></decl></param>,
                                         <param><decl><type><name>String</name></type> <name>content</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Element</name></type> <name>e</name> =<init> <expr><call><name>createChildElement</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>appendText</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a nested CDATA section in a new child element.
     *
     * &lt;p&gt;This means
     * &lt;pre&gt;appendCDATAElement(&amp;lt;a&amp;gt;, "b", "c")&lt;/pre&gt;
     * creates
     * &lt;pre&gt;
     * &amp;lt;a&amp;gt;
     *   &amp;lt;b&amp;gt;&amp;lt;![CDATA[c]]&gt;&amp;lt;/b&amp;gt;
     * &amp;lt;/a&amp;gt;
     * &lt;/pre&gt;
     * &lt;/pre&gt;
     * &lt;/p&gt;
     *
     * @param parent element that will receive the new element as child.
     * @param name of the child element.
     * @param content text content.
     *
     * @since Ant 1.6.3
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>appendCDATAElement</name><parameter_list>(<param><decl><type><name>Element</name></type> <name>parent</name></decl></param>, <param><decl><type><name>String</name></type> <name>name</name></decl></param>,
                                          <param><decl><type><name>String</name></type> <name>content</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Element</name></type> <name>e</name> =<init> <expr><call><name>createChildElement</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>appendCDATA</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
