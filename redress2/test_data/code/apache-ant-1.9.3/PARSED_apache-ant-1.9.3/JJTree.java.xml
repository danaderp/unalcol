<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\javacc\JJTree.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>javacc</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Hashtable</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>Execute</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>LogStreamHandler</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Commandline</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>CommandlineJava</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Path</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>JavaEnvUtils</name></name>;</import>

<comment type="javadoc">/**
 * Runs the JJTree compiler compiler.
 *
 */</comment>
<class><specifier>public</specifier> class <name>JJTree</name> <super><extends>extends <name>Task</name></extends></super> <block>{

    <comment type="line">// keys to optional attributes</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>OUTPUT_FILE</name>       =<init> <expr>"OUTPUT_FILE"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>BUILD_NODE_FILES</name>  =<init> <expr>"BUILD_NODE_FILES"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>MULTI</name>             =<init> <expr>"MULTI"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>NODE_DEFAULT_VOID</name> =<init> <expr>"NODE_DEFAULT_VOID"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>NODE_FACTORY</name>      =<init> <expr>"NODE_FACTORY"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>NODE_SCOPE_HOOK</name>   =<init> <expr>"NODE_SCOPE_HOOK"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>NODE_USES_PARSER</name>  =<init> <expr>"NODE_USES_PARSER"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>STATIC</name>            =<init> <expr>"STATIC"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>VISITOR</name>           =<init> <expr>"VISITOR"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>NODE_PACKAGE</name>      =<init> <expr>"NODE_PACKAGE"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>VISITOR_EXCEPTION</name> =<init> <expr>"VISITOR_EXCEPTION"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>NODE_PREFIX</name>       =<init> <expr>"NODE_PREFIX"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Hashtable</name></type> <name>optionalAttrs</name> =<init> <expr>new <call><name>Hashtable</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>outputFile</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEFAULT_SUFFIX</name> =<init> <expr>".jj"</expr></init></decl>;</decl_stmt>

    <comment type="line">// required attributes</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>outputDirectory</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>targetFile</name>      =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>javaccHome</name>      =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>CommandlineJava</name></type> <name>cmdl</name> =<init> <expr>new <call><name>CommandlineJava</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>maxMemory</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Sets the BUILD_NODE_FILES grammar option.
     * @param buildNodeFiles a &lt;code&gt;boolean&lt;/code&gt; value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBuildnodefiles</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>buildNodeFiles</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>optionalAttrs</name>.<name>put</name></name><argument_list>(<argument><expr><name>BUILD_NODE_FILES</name></expr></argument>, <argument><expr><name>buildNodeFiles</name> ? <name><name>Boolean</name>.<name>TRUE</name></name> : <name><name>Boolean</name>.<name>FALSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the MULTI grammar option.
     * @param multi a &lt;code&gt;boolean&lt;/code&gt; value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMulti</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>multi</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>optionalAttrs</name>.<name>put</name></name><argument_list>(<argument><expr><name>MULTI</name></expr></argument>, <argument><expr><name>multi</name> ? <name><name>Boolean</name>.<name>TRUE</name></name> : <name><name>Boolean</name>.<name>FALSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the NODE_DEFAULT_VOID grammar option.
     * @param nodeDefaultVoid a &lt;code&gt;boolean&lt;/code&gt; value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setNodedefaultvoid</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>nodeDefaultVoid</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>optionalAttrs</name>.<name>put</name></name><argument_list>(<argument><expr><name>NODE_DEFAULT_VOID</name></expr></argument>, <argument><expr><name>nodeDefaultVoid</name> ? <name><name>Boolean</name>.<name>TRUE</name></name> : <name><name>Boolean</name>.<name>FALSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the NODE_FACTORY grammar option.
     * @param nodeFactory a &lt;code&gt;boolean&lt;/code&gt; value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setNodefactory</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>nodeFactory</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>optionalAttrs</name>.<name>put</name></name><argument_list>(<argument><expr><name>NODE_FACTORY</name></expr></argument>, <argument><expr><name>nodeFactory</name> ? <name><name>Boolean</name>.<name>TRUE</name></name> : <name><name>Boolean</name>.<name>FALSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the NODE_SCOPE_HOOK grammar option.
     * @param nodeScopeHook a &lt;code&gt;boolean&lt;/code&gt; value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setNodescopehook</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>nodeScopeHook</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>optionalAttrs</name>.<name>put</name></name><argument_list>(<argument><expr><name>NODE_SCOPE_HOOK</name></expr></argument>, <argument><expr><name>nodeScopeHook</name> ? <name><name>Boolean</name>.<name>TRUE</name></name> : <name><name>Boolean</name>.<name>FALSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the NODE_USES_PARSER grammar option.
     * @param nodeUsesParser a &lt;code&gt;boolean&lt;/code&gt; value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setNodeusesparser</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>nodeUsesParser</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>optionalAttrs</name>.<name>put</name></name><argument_list>(<argument><expr><name>NODE_USES_PARSER</name></expr></argument>, <argument><expr><name>nodeUsesParser</name> ? <name><name>Boolean</name>.<name>TRUE</name></name> : <name><name>Boolean</name>.<name>FALSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the STATIC grammar option.
     * @param staticParser a &lt;code&gt;boolean&lt;/code&gt; value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setStatic</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>staticParser</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>optionalAttrs</name>.<name>put</name></name><argument_list>(<argument><expr><name>STATIC</name></expr></argument>, <argument><expr><name>staticParser</name> ? <name><name>Boolean</name>.<name>TRUE</name></name> : <name><name>Boolean</name>.<name>FALSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the VISITOR grammar option.
     * @param visitor a &lt;code&gt;boolean&lt;/code&gt; value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setVisitor</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>visitor</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>optionalAttrs</name>.<name>put</name></name><argument_list>(<argument><expr><name>VISITOR</name></expr></argument>, <argument><expr><name>visitor</name> ? <name><name>Boolean</name>.<name>TRUE</name></name> : <name><name>Boolean</name>.<name>FALSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the NODE_PACKAGE grammar option.
     * @param nodePackage the option to use.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setNodepackage</name><parameter_list>(<param><decl><type><name>String</name></type> <name>nodePackage</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>optionalAttrs</name>.<name>put</name></name><argument_list>(<argument><expr><name>NODE_PACKAGE</name></expr></argument>, <argument><expr><name>nodePackage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the VISITOR_EXCEPTION grammar option.
     * @param visitorException the option to use.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setVisitorException</name><parameter_list>(<param><decl><type><name>String</name></type> <name>visitorException</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>optionalAttrs</name>.<name>put</name></name><argument_list>(<argument><expr><name>VISITOR_EXCEPTION</name></expr></argument>, <argument><expr><name>visitorException</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the NODE_PREFIX grammar option.
     * @param nodePrefix the option to use.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setNodeprefix</name><parameter_list>(<param><decl><type><name>String</name></type> <name>nodePrefix</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>optionalAttrs</name>.<name>put</name></name><argument_list>(<argument><expr><name>NODE_PREFIX</name></expr></argument>, <argument><expr><name>nodePrefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The directory to write the generated JavaCC grammar and node files to.
     * If not set, the files are written to the directory
     * containing the grammar file.
     * @param outputDirectory the output directory.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOutputdirectory</name><parameter_list>(<param><decl><type><name>File</name></type> <name>outputDirectory</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>outputDirectory</name></name> = <name>outputDirectory</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The outputfile to write the generated JavaCC grammar file to.
     * If not set, the file is written with the same name as
     * the JJTree grammar file with a suffix .jj.
     * @param outputFile the output file name.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOutputfile</name><parameter_list>(<param><decl><type><name>String</name></type> <name>outputFile</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>outputFile</name></name> = <name>outputFile</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The jjtree grammar file to process.
     * @param targetFile the grammar file.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTarget</name><parameter_list>(<param><decl><type><name>File</name></type> <name>targetFile</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>targetFile</name></name> = <name>targetFile</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The directory containing the JavaCC distribution.
     * @param javaccHome the directory containing JavaCC.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setJavacchome</name><parameter_list>(<param><decl><type><name>File</name></type> <name>javaccHome</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>javaccHome</name></name> = <name>javaccHome</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Corresponds -Xmx.
     *
     * @param max max memory parameter.
     * @since Ant 1.8.3
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMaxmemory</name><parameter_list>(<param><decl><type><name>String</name></type> <name>max</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>maxMemory</name> = <name>max</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Constructor
     */</comment>
    <constructor><specifier>public</specifier> <name>JJTree</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>cmdl</name>.<name>setVm</name></name><argument_list>(<argument><expr><call><name><name>JavaEnvUtils</name>.<name>getJreExecutable</name></name><argument_list>(<argument><expr>"java"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Run the task.
     * @throws BuildException on error.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{

        <comment type="line">// load command line with optional attributes</comment>
        <decl_stmt><decl><type><name>Enumeration</name></type> <name>iter</name> =<init> <expr><call><name><name>optionalAttrs</name>.<name>keys</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>iter</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>name</name>  =<init> <expr>(<name>String</name>) <call><name><name>iter</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Object</name></type> <name>value</name> =<init> <expr><call><name><name>optionalAttrs</name>.<name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>cmdl</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-" + <name>name</name> + ":" + <call><name><name>value</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>

        <if>if <condition>(<expr><name>targetFile</name> == <name>null</name> || !<call><name><name>targetFile</name>.<name>isFile</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Invalid target: " + <name>targetFile</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <decl_stmt><decl><type><name>File</name></type> <name>javaFile</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

        <comment type="line">// use the directory containing the target as the output directory</comment>
        <if>if <condition>(<expr><name>outputDirectory</name> == <name>null</name></expr>)</condition><then> <block>{
            <comment type="line">// convert backslashes to slashes, otherwise jjtree will</comment>
            <comment type="line">// put this as comments and this seems to confuse javacc</comment>
            <expr_stmt><expr><call><name><name>cmdl</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-OUTPUT_DIRECTORY:"
                                           + <call><name>getDefaultOutputDirectory</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>javaFile</name> = new <call><name>File</name><argument_list>(<argument><expr><call><name>createOutputFileName</name><argument_list>(<argument><expr><name>targetFile</name></expr></argument>, <argument><expr><name>outputFile</name></expr></argument>,
                                                     <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <if>if <condition>(<expr>!<call><name><name>outputDirectory</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"'outputdirectory' " + <name>outputDirectory</name>
                                         + " is not a directory."</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <comment type="line">// convert backslashes to slashes, otherwise jjtree will</comment>
            <comment type="line">// put this as comments and this seems to confuse javacc</comment>
            <expr_stmt><expr><call><name><name>cmdl</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-OUTPUT_DIRECTORY:"
                                           + <call><name><name>outputDirectory</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call>
                                             .<call><name>replace</name><argument_list>(<argument><expr>'\\'</expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>javaFile</name> = new <call><name>File</name><argument_list>(<argument><expr><call><name>createOutputFileName</name><argument_list>(<argument><expr><name>targetFile</name></expr></argument>, <argument><expr><name>outputFile</name></expr></argument>,
                                                     <argument><expr><call><name><name>outputDirectory</name>
                                                     .<name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <if>if <condition>(<expr><call><name><name>javaFile</name>.<name>exists</name></name><argument_list>()</argument_list></call>
            &amp;&amp; <call><name><name>targetFile</name>.<name>lastModified</name></name><argument_list>()</argument_list></call> &lt; <call><name><name>javaFile</name>.<name>lastModified</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Target is already built - skipping (" + <name>targetFile</name> + ")"</expr></argument>,
                <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>

        <if>if <condition>(<expr><name>outputFile</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>cmdl</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-" + <name>OUTPUT_FILE</name> + ":"
                                           + <call><name><name>outputFile</name>.<name>replace</name></name><argument_list>(<argument><expr>'\\'</expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>cmdl</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name><name>targetFile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Path</name></type> <name>classpath</name> =<init> <expr><call><name><name>cmdl</name>.<name>createClasspath</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>File</name></type> <name>javaccJar</name> =<init> <expr><call><name><name>JavaCC</name>.<name>getArchiveFile</name></name><argument_list>(<argument><expr><name>javaccHome</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>classpath</name>.<name>createPathElement</name></name><argument_list>()</argument_list></call>.<call><name>setPath</name><argument_list>(<argument><expr><call><name><name>javaccJar</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>classpath</name>.<name>addJavaRuntime</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>cmdl</name>.<name>setClassname</name></name><argument_list>(<argument><expr><call><name><name>JavaCC</name>.<name>getMainClass</name></name><argument_list>(<argument><expr><name>classpath</name></expr></argument>,
                                              <argument><expr><name><name>JavaCC</name>.<name>TASKDEF_TYPE_JJTREE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>cmdl</name>.<name>setMaxmemory</name></name><argument_list>(<argument><expr><name>maxMemory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Commandline</name>.<name>Argument</name></name></type> <name>arg</name> =<init> <expr><call><name><name>cmdl</name>.<name>createVmArgument</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>arg</name>.<name>setValue</name></name><argument_list>(<argument><expr>"-Dinstall.root=" + <call><name><name>javaccHome</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Execute</name></type> <name>process</name> =<init>
            <expr>new <call><name>Execute</name><argument_list>(<argument><expr>new <call><name>LogStreamHandler</name><argument_list>(<argument><expr><name>this</name></expr></argument>,
                                             <argument><expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></argument>,
                                             <argument><expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><call><name><name>cmdl</name>.<name>describeCommand</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>process</name>.<name>setCommandline</name></name><argument_list>(<argument><expr><call><name><name>cmdl</name>.<name>getCommandline</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <try>try <block>{
            <if>if <condition>(<expr><call><name><name>process</name>.<name>execute</name></name><argument_list>()</argument_list></call> != 0</expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"JJTree failed."</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Failed to launch JJTree"</expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>createOutputFileName</name><parameter_list>(<param><decl><type><name>File</name></type> <name>destFile</name></decl></param>, <param><decl><type><name>String</name></type> <name>optionalOutputFile</name></decl></param>,
                                        <param><decl><type><name>String</name></type> <name>outputDir</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>optionalOutputFile</name> = <call><name>validateOutputFile</name><argument_list>(<argument><expr><name>optionalOutputFile</name></expr></argument>,
                                                <argument><expr><name>outputDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>jjtreeFile</name> =<init> <expr><call><name><name>destFile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call>.<call><name>replace</name><argument_list>(<argument><expr>'\\'</expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr>(<name>optionalOutputFile</name> == <name>null</name>) || <call><name><name>optionalOutputFile</name>.<name>equals</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>filePos</name> =<init> <expr><call><name><name>jjtreeFile</name>.<name>lastIndexOf</name></name><argument_list>(<argument><expr>"/"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>filePos</name> &gt;= 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>jjtreeFile</name> = <call><name><name>jjtreeFile</name>.<name>substring</name></name><argument_list>(<argument><expr><name>filePos</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <decl_stmt><decl><type><name>int</name></type> <name>suffixPos</name> =<init> <expr><call><name><name>jjtreeFile</name>.<name>lastIndexOf</name></name><argument_list>(<argument><expr>'.'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>suffixPos</name> == -1</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>optionalOutputFile</name> = <name>jjtreeFile</name> + <name>DEFAULT_SUFFIX</name></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>currentSuffix</name> =<init> <expr><call><name><name>jjtreeFile</name>.<name>substring</name></name><argument_list>(<argument><expr><name>suffixPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name><name>currentSuffix</name>.<name>equals</name></name><argument_list>(<argument><expr><name>DEFAULT_SUFFIX</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>optionalOutputFile</name> = <name>jjtreeFile</name> + <name>DEFAULT_SUFFIX</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><name>optionalOutputFile</name> = <call><name><name>jjtreeFile</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>suffixPos</name></expr></argument>)</argument_list></call>
                        + <name>DEFAULT_SUFFIX</name></expr>;</expr_stmt>
                }</block></else></if>
            }</block></else></if>
        }</block></then></if>

        <if>if <condition>(<expr>(<name>outputDir</name> == <name>null</name>) || <call><name><name>outputDir</name>.<name>equals</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>outputDir</name> = <call><name>getDefaultOutputDirectory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <return>return <expr>(<name>outputDir</name> + "/" + <name>optionalOutputFile</name>).<call><name>replace</name><argument_list>(<argument><expr>'\\'</expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * When running JJTree from an Ant taskdesk the -OUTPUT_DIRECTORY must
     * always be set. But when -OUTPUT_DIRECTORY is set, -OUTPUT_FILE is
     * handled as if relative of this -OUTPUT_DIRECTORY. Thus when the
     * -OUTPUT_FILE is absolute or contains a drive letter we have a problem.
     *
     * @param destFile
     * @param outputDir
     * @return
     * @throws BuildException
     */</comment>
    <function><type><specifier>private</specifier> <name>String</name></type> <name>validateOutputFile</name><parameter_list>(<param><decl><type><name>String</name></type> <name>destFile</name></decl></param>,
                                      <param><decl><type><name>String</name></type> <name>outputDir</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>destFile</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>

        <if>if <condition>(<expr>(<name>outputDir</name> == <name>null</name>)
            &amp;&amp; (<call><name><name>destFile</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"/"</expr></argument>)</argument_list></call> || <call><name><name>destFile</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"\\"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>relativeOutputFile</name> =<init> <expr><call><name>makeOutputFileRelative</name><argument_list>(<argument><expr><name>destFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>setOutputfile</name><argument_list>(<argument><expr><name>relativeOutputFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return>return <expr><name>relativeOutputFile</name></expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>String</name></type> <name>root</name> =<init> <expr><call><name>getRoot</name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><name>destFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr>(<call><name><name>root</name>.<name>length</name></name><argument_list>()</argument_list></call> &gt; 1)
            &amp;&amp; <call><name><name>destFile</name>.<name>startsWith</name></name><argument_list>(<argument><expr><call><name><name>root</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>root</name>.<name>length</name></name><argument_list>()</argument_list></call> - 1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Drive letter in 'outputfile' not "
                                     + "supported: " + <name>destFile</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <return>return <expr><name>destFile</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>makeOutputFileRelative</name><parameter_list>(<param><decl><type><name>String</name></type> <name>destFile</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>relativePath</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>defaultOutputDirectory</name> =<init> <expr><call><name>getDefaultOutputDirectory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>nextPos</name> =<init> <expr><call><name><name>defaultOutputDirectory</name>.<name>indexOf</name></name><argument_list>(<argument><expr>'/'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>startPos</name> =<init> <expr><name>nextPos</name> + 1</expr></init></decl>;</decl_stmt>

        <while>while <condition>(<expr><name>startPos</name> &gt; -1 &amp;&amp; <name>startPos</name> &lt; <call><name><name>defaultOutputDirectory</name>.<name>length</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <expr_stmt><expr><call><name><name>relativePath</name>.<name>append</name></name><argument_list>(<argument><expr>"/.."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>nextPos</name> = <call><name><name>defaultOutputDirectory</name>.<name>indexOf</name></name><argument_list>(<argument><expr>'/'</expr></argument>, <argument><expr><name>startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><name>nextPos</name> == -1</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>startPos</name> = <name>nextPos</name></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>startPos</name> = <name>nextPos</name> + 1</expr>;</expr_stmt>
            }</block></else></if>
        }</block></while>

        <expr_stmt><expr><call><name><name>relativePath</name>.<name>append</name></name><argument_list>(<argument><expr><name>destFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><call><name><name>relativePath</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>getDefaultOutputDirectory</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call>.<call><name>getAbsolutePath</name><argument_list>()</argument_list></call>.<call><name>replace</name><argument_list>(<argument><expr>'\\'</expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Determine root directory for a given file.
     *
     * @param file
     * @return file's root directory
     */</comment>
    <function><type><specifier>private</specifier> <name>File</name></type> <name>getRoot</name><parameter_list>(<param><decl><type><name>File</name></type> <name>file</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>root</name> =<init> <expr><call><name><name>file</name>.<name>getAbsoluteFile</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <while>while <condition>(<expr><call><name><name>root</name>.<name>getParent</name></name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition> <block>{
            <expr_stmt><expr><name>root</name> = <call><name><name>root</name>.<name>getParentFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></while>

        <return>return <expr><name>root</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
