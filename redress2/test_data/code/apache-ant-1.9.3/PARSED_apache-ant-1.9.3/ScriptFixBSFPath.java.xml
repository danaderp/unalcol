<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\util\ScriptFixBSFPath.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>AntClassLoader</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashMap</name></name>;</import>


<comment type="javadoc">/**
 * A class to modify a classloader to
 * support BSF language support.
 */</comment>
<class><specifier>public</specifier> class <name>ScriptFixBSFPath</name> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>UTIL_OPTIONAL_PACKAGE</name>
        =<init> <expr>"org.apache.tools.ant.util.optional"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>BSF_PACKAGE</name> =<init> <expr>"org.apache.bsf"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>BSF_MANAGER</name> =<init> <expr><name>BSF_PACKAGE</name> + ".BSFManager"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>BSF_SCRIPT_RUNNER</name>
        =<init> <expr><name>UTIL_OPTIONAL_PACKAGE</name> + ".ScriptRunner"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The following are languages that have
     * scripting engines embedded in bsf.jar.
     * The array is converted to a map of
     * languagename-&gt;classname.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name><index>[]</index></type> <name>BSF_LANGUAGES</name> =<init>
        <expr>new <name><name>String</name><index>[]</index></name> <block>{
            <expr>"js"</expr>,         <expr>"org.mozilla.javascript.Scriptable"</expr>,
            <expr>"javascript"</expr>, <expr>"org.mozilla.javascript.Scriptable"</expr>,
            <expr>"jacl"</expr>,       <expr>"tcl.lang.Interp"</expr>,
            <expr>"netrexx"</expr>,    <expr>"netrexx.lang.Rexx"</expr>,
            <expr>"nrx"</expr>,        <expr>"netrexx.lang.Rexx"</expr>,
            <expr>"jython"</expr>,     <expr>"org.python.core.Py"</expr>,
            <expr>"py"</expr>,         <expr>"org.python.core.Py"</expr>,
            <expr>"xslt"</expr>,       <expr>"org.apache.xpath.objects.XObject"</expr>}</block></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** A map of languages for which the engine in located in bsf */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Map</name></type> <name>BSF_LANGUAGE_MAP</name> =<init> <expr>new <call><name>HashMap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    static <block>{
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>BSF_LANGUAGES</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name> = <name>i</name> + 2</expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>BSF_LANGUAGE_MAP</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>BSF_LANGUAGES</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>BSF_LANGUAGES</name><index>[<expr><name>i</name> + 1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block>

    <function><type><specifier>private</specifier> <name>File</name></type> <name>getClassSource</name><parameter_list>(<param><decl><type><name>ClassLoader</name></type> <name>loader</name></decl></param>, <param><decl><type><name>String</name></type> <name>className</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>LoaderUtils</name>.<name>getResourceSource</name></name><argument_list>(
            <argument><expr><name>loader</name></expr></argument>,
            <argument><expr><call><name><name>LoaderUtils</name>.<name>classNameToResource</name></name><argument_list>(<argument><expr><name>className</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>File</name></type> <name>getClassSource</name><parameter_list>(<param><decl><type><name>String</name></type> <name>className</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>getClassSource</name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call>.<call><name>getClassLoader</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>className</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Check if need to mess about with the classloader.
     * The class loader will need to be modified for two
     * reasons:
     * &lt;ol&gt;
     *  &lt;li&gt;language is at a higher level than bsf for engines in bsf,
     *      move bsf.
     *  &lt;/li&gt;
     *  &lt;li&gt;bsf is at a higher level than oata.util.optional.ScriptRunner
     *  &lt;/li&gt;
     * &lt;/ol&gt;
     *
     * Assume a simple model for the loader:
     *  thisloader&lt;-customloader
     *  or
     *  thisloader
     *
     * @param loader the classloader to fix.
     * @param language the language to use.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>fixClassLoader</name><parameter_list>(<param><decl><type><name>ClassLoader</name></type> <name>loader</name></decl></param>, <param><decl><type><name>String</name></type> <name>language</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>loader</name> == <call><name>getClass</name><argument_list>()</argument_list></call>.<call><name>getClassLoader</name><argument_list>()</argument_list></call>
            || !(<name>loader</name> <name>instanceof</name> <name>AntClassLoader</name>)</expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>ClassLoader</name></type> <name>myLoader</name> =<init> <expr><call><name>getClass</name><argument_list>()</argument_list></call>.<call><name>getClassLoader</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>AntClassLoader</name></type> <name>fixLoader</name> =<init> <expr>(<name>AntClassLoader</name>) <name>loader</name></expr></init></decl>;</decl_stmt>

        <comment type="line">// Check for location of bsf in this classloader</comment>
        <decl_stmt><decl><type><name>File</name></type> <name>bsfSource</name> =<init> <expr><call><name>getClassSource</name><argument_list>(<argument><expr><name>BSF_MANAGER</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// If bsf is not in the classloader for this, need to move</comment>
        <comment type="line">// runner.</comment>
        <decl_stmt><decl><type><name>boolean</name></type> <name>needMoveRunner</name> =<init> <expr>(<name>bsfSource</name> == <name>null</name>)</expr></init></decl>;</decl_stmt>

        <comment type="line">// Check for location of language</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>languageClassName</name> =<init> <expr>(<name>String</name>) <call><name><name>BSF_LANGUAGE_MAP</name>.<name>get</name></name><argument_list>(<argument><expr><name>language</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Check if need to need to move bsf</comment>
        <decl_stmt><decl><type><name>boolean</name></type> <name>needMoveBsf</name> =<init>
            <expr><name>bsfSource</name> != <name>null</name>
            &amp;&amp; <name>languageClassName</name> != <name>null</name>
            &amp;&amp; !<call><name><name>LoaderUtils</name>.<name>classExists</name></name><argument_list>(<argument><expr><name>myLoader</name></expr></argument>, <argument><expr><name>languageClassName</name></expr></argument>)</argument_list></call>
            &amp;&amp; <call><name><name>LoaderUtils</name>.<name>classExists</name></name><argument_list>(<argument><expr><name>loader</name></expr></argument>, <argument><expr><name>languageClassName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Update need to move runner</comment>
        <expr_stmt><expr><name>needMoveRunner</name> = <name>needMoveRunner</name> || <name>needMoveBsf</name></expr>;</expr_stmt>

        <comment type="line">// Check if bsf in place</comment>
        <if>if <condition>(<expr><name>bsfSource</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>bsfSource</name> = <call><name>getClassSource</name><argument_list>(<argument><expr><name>loader</name></expr></argument>, <argument><expr><name>BSF_MANAGER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>bsfSource</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                <argument><expr>"Unable to find BSF classes for scripting"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr><name>needMoveBsf</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>fixLoader</name>.<name>addPathComponent</name></name><argument_list>(<argument><expr><name>bsfSource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>fixLoader</name>.<name>addLoaderPackageRoot</name></name><argument_list>(<argument><expr><name>BSF_PACKAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>needMoveRunner</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>fixLoader</name>.<name>addPathComponent</name></name><argument_list>(
                <argument><expr><call><name><name>LoaderUtils</name>.<name>getResourceSource</name></name><argument_list>(
                    <argument><expr><name>fixLoader</name></expr></argument>,
                    <argument><expr><call><name><name>LoaderUtils</name>.<name>classNameToResource</name></name><argument_list>(<argument><expr><name>BSF_SCRIPT_RUNNER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>fixLoader</name>.<name>addLoaderPackageRoot</name></name><argument_list>(<argument><expr><name>UTIL_OPTIONAL_PACKAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>
}</block></class>
</unit>
