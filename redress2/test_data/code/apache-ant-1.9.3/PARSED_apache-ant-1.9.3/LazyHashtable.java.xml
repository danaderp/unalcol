<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\util\LazyHashtable.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>Hashtable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>

<comment type="javadoc">/** Hashtable implementation that allows delayed construction
 * of expensive objects
 *
 * All operations that need access to the full list of objects
 * will call initAll() first. Get and put are cheap.
 *
 * @since Ant 1.6
 */</comment>
<class><specifier>public</specifier> class <name>LazyHashtable</name> <super><extends>extends <name>Hashtable</name></extends></super> <block>{
    <comment type="line">// CheckStyle:VisibilityModifier OFF - bc</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>initAllDone</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <comment type="line">// CheckStyle:VisibilityModifier OFF - bc</comment>

    <comment type="javadoc">/** No arg constructor. */</comment>
    <constructor><specifier>public</specifier> <name>LazyHashtable</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/** Used to be part of init. It must be done once - but
     * we delay it until we do need _all_ tasks. Otherwise we
     * just get the tasks that we need, and avoid costly init.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>initAll</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>initAllDone</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <expr_stmt><expr><name>initAllDone</name> = true</expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Get a enumeration over the elements.
     * @return an enumeration.
     */</comment>
    <function><type><specifier>public</specifier> <name>Enumeration</name></type> <name>elements</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>initAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>super</name>.<name>elements</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Check if the table is empty.
     * @return true if it is.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isEmpty</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>initAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>super</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the size of the table.
     * @return the size.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>size</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>initAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>super</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Check if the table contains a particular value.
     * @param value the value to look for.
     * @return true if the table contains the value.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>contains</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>initAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>super</name>.<name>contains</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Check if the table contains a particular key.
     * @param value the key to look for.
     * @return true if the table contains key.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>containsKey</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>initAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>super</name>.<name>containsKey</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Delegates to {@link #contains contains}.
     * @param value the value to look for.
     * @return true if the table contains the value.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>containsValue</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get an enumeration over the keys.
     * @return an enumeration.
     */</comment>
    <function><type><specifier>public</specifier> <name>Enumeration</name></type> <name>keys</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>initAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>super</name>.<name>keys</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="line">// TODO Unfortunately JDK1.2 adds entrySet(), keySet(), values() -</comment>
    <comment type="line">// implementing this requires a small hack, we can add it later.</comment>
}</block></class>
</unit>
