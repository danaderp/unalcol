<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\HostInfo.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>net</name>.<name>Inet4Address</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>Inet6Address</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>InetAddress</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>NetworkInterface</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Arrays</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>LinkedList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>

<comment type="javadoc">/**
 * Sets properties to the host provided, or localhost if no information is
 * provided. The default properties are NAME, FQDN, ADDR4, ADDR6;
 *
 * @since Ant 1.8
 * @ant.task category="utility"
 */</comment>


<class><specifier>public</specifier> class <name>HostInfo</name> <super><extends>extends <name>Task</name></extends></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEF_REM_ADDR6</name> =<init> <expr>"::"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEF_REM_ADDR4</name> =<init> <expr>"0.0.0.0"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEF_LOCAL_ADDR6</name> =<init> <expr>"::1"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEF_LOCAL_ADDR4</name> =<init> <expr>"127.0.0.1"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEF_LOCAL_NAME</name> =<init> <expr>"localhost"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEF_DOMAIN</name> =<init> <expr>"localdomain"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DOMAIN</name> =<init> <expr>"DOMAIN"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>NAME</name> =<init> <expr>"NAME"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ADDR4</name> =<init> <expr>"ADDR4"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ADDR6</name> =<init> <expr>"ADDR6"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>prefix</name> =<init> <expr>""</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>host</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>InetAddress</name></type> <name>nameAddr</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>InetAddress</name></type> <name>best6</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>InetAddress</name></type> <name>best4</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>List</name><argument_list>&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name></type> <name>inetAddrs</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Set a prefix for the properties. If the prefix does not end with a "."
     * one is automatically added.
     *
     * @param aPrefix
     *            the prefix to use.
     * @since Ant 1.8
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPrefix</name><parameter_list>(<param><decl><type><name>String</name></type> <name>aPrefix</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>prefix</name> = <name>aPrefix</name></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name><name>prefix</name>.<name>endsWith</name></name><argument_list>(<argument><expr>"."</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>prefix</name> += "."</expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Set the host to be retrieved.
     *
     * @param aHost
     *            the name or the address of the host, data for the local host
     *            will be retrieved if omitted.
     * @since Ant 1.8
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setHost</name><parameter_list>(<param><decl><type><name>String</name></type> <name>aHost</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>host</name> = <name>aHost</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * set the properties.
     *
     * @throws BuildException
     *             on error.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>host</name> == <name>null</name> || "".<call><name>equals</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>executeLocal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>executeRemote</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>executeLocal</name><parameter_list>()</parameter_list> <block>{
        <try>try <block>{
            <expr_stmt><expr><name>inetAddrs</name> = new <call><name><name>LinkedList</name><argument_list>&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>Enumeration</name><argument_list>&lt;<argument><name>NetworkInterface</name></argument>&gt;</argument_list></name></type> <name>interfaces</name> =<init> <expr><call><name><name>NetworkInterface</name>.<name>getNetworkInterfaces</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>interfaces</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <decl_stmt><decl><type><name>NetworkInterface</name></type> <name>currentif</name> =<init> <expr><call><name><name>interfaces</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>Enumeration</name><argument_list>&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name></type> <name>addrs</name> =<init> <expr><call><name><name>currentif</name>.<name>getInetAddresses</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><call><name><name>addrs</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition>
                <block>{
                    <expr_stmt><expr><call><name><name>inetAddrs</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>addrs</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></while>
            }</block></while>
            <expr_stmt><expr><call><name>selectAddresses</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><name>nameAddr</name> != <name>null</name> &amp;&amp; <call><name>hasHostName</name><argument_list>(<argument><expr><name>nameAddr</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>setDomainAndName</name><argument_list>(<argument><expr><call><name><name>nameAddr</name>.<name>getCanonicalHostName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>setProperty</name><argument_list>(<argument><expr><name>DOMAIN</name></expr></argument>, <argument><expr><name>DEF_DOMAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>setProperty</name><argument_list>(<argument><expr><name>NAME</name></expr></argument>, <argument><expr><name>DEF_LOCAL_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <if>if <condition>(<expr><name>best4</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>setProperty</name><argument_list>(<argument><expr><name>ADDR4</name></expr></argument>, <argument><expr><call><name><name>best4</name>.<name>getHostAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>setProperty</name><argument_list>(<argument><expr><name>ADDR4</name></expr></argument>, <argument><expr><name>DEF_LOCAL_ADDR4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <if>if <condition>(<expr><name>best6</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>setProperty</name><argument_list>(<argument><expr><name>ADDR6</name></expr></argument>, <argument><expr><call><name><name>best6</name>.<name>getHostAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>setProperty</name><argument_list>(<argument><expr><name>ADDR6</name></expr></argument>, <argument><expr><name>DEF_LOCAL_ADDR6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Error retrieving local host information"</expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setProperty</name><argument_list>(<argument><expr><name>DOMAIN</name></expr></argument>, <argument><expr><name>DEF_DOMAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setProperty</name><argument_list>(<argument><expr><name>NAME</name></expr></argument>, <argument><expr><name>DEF_LOCAL_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setProperty</name><argument_list>(<argument><expr><name>ADDR4</name></expr></argument>, <argument><expr><name>DEF_LOCAL_ADDR4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setProperty</name><argument_list>(<argument><expr><name>ADDR6</name></expr></argument>, <argument><expr><name>DEF_LOCAL_ADDR6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>hasHostName</name><parameter_list>(<param><decl><type><name>InetAddress</name></type> <name>addr</name></decl></param>)</parameter_list>
    <block>{
        <return>return <expr>!<call><name><name>addr</name>.<name>getHostAddress</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><call><name><name>addr</name>.<name>getCanonicalHostName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>selectAddresses</name><parameter_list>()</parameter_list> <block>{
        <for>for (<init><decl><type><name>InetAddress</name></type> <name>current</name> :<range> <expr><name>inetAddrs</name></expr></range></decl></init>) <block>{
            <if>if <condition>(<expr>!<call><name><name>current</name>.<name>isMulticastAddress</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>current</name> <name>instanceof</name> <name>Inet4Address</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>best4</name> = <call><name>selectBestAddress</name><argument_list>(<argument><expr><name>best4</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <if>if <condition>(<expr><name>current</name> <name>instanceof</name> <name>Inet6Address</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>best6</name> = <call><name>selectBestAddress</name><argument_list>(<argument><expr><name>best6</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if></else></if>
            }</block></then></if>
        }</block></for>

        <expr_stmt><expr><name>nameAddr</name> = <call><name>selectBestAddress</name><argument_list>(<argument><expr><name>best4</name></expr></argument>, <argument><expr><name>best6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>InetAddress</name></type> <name>selectBestAddress</name><parameter_list>(<param><decl><type><name>InetAddress</name></type> <name>bestSoFar</name></decl></param>,
            <param><decl><type><name>InetAddress</name></type> <name>current</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>InetAddress</name></type> <name>best</name> =<init> <expr><name>bestSoFar</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>best</name> == <name>null</name></expr>)</condition><then> <block>{
            <comment type="line">// none selected so far, so this one is better.</comment>
            <expr_stmt><expr><name>best</name> = <name>current</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <if>if <condition>(<expr><name>current</name> == <name>null</name> || <call><name><name>current</name>.<name>isLoopbackAddress</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <comment type="line">// definitely not better than the previously selected address.</comment>
            }</block></then> <else>else <if>if <condition>(<expr><call><name><name>current</name>.<name>isLinkLocalAddress</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <comment type="line">// link local considered better than loopback</comment>
                <if>if <condition>(<expr><call><name><name>best</name>.<name>isLoopbackAddress</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>best</name> = <name>current</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then> <else>else <if>if <condition>(<expr><call><name><name>current</name>.<name>isSiteLocalAddress</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <comment type="line">// site local considered better than link local (and loopback)</comment>
                <comment type="line">// address with hostname resolved considered better than</comment>
                <comment type="line">// address without hostname</comment>
                <if>if <condition>(<expr><call><name><name>best</name>.<name>isLoopbackAddress</name></name><argument_list>()</argument_list></call>
                        || <call><name><name>best</name>.<name>isLinkLocalAddress</name></name><argument_list>()</argument_list></call>
                        || (<call><name><name>best</name>.<name>isSiteLocalAddress</name></name><argument_list>()</argument_list></call> &amp;&amp; !<call><name>hasHostName</name><argument_list>(<argument><expr><name>best</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>best</name> = <name>current</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then> <else>else <block>{
                <comment type="line">// current is a "Global address", considered better than</comment>
                <comment type="line">// site local (and better than link local, loopback)</comment>
                <comment type="line">// address with hostname resolved considered better than</comment>
                <comment type="line">// address without hostname</comment>
                <if>if <condition>(<expr><call><name><name>best</name>.<name>isLoopbackAddress</name></name><argument_list>()</argument_list></call>
                        || <call><name><name>best</name>.<name>isLinkLocalAddress</name></name><argument_list>()</argument_list></call>
                        || <call><name><name>best</name>.<name>isSiteLocalAddress</name></name><argument_list>()</argument_list></call>
                        || !<call><name>hasHostName</name><argument_list>(<argument><expr><name>best</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>best</name> = <name>current</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></else></if></else></if></else></if>
        }</block></else></if>
        <return>return <expr><name>best</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>executeRemote</name><parameter_list>()</parameter_list> <block>{
        <try>try <block>{
            <expr_stmt><expr><name>inetAddrs</name> = <call><name><name>Arrays</name>.<name>asList</name></name><argument_list>(<argument><expr><call><name><name>InetAddress</name>.<name>getAllByName</name></name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>selectAddresses</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><name>nameAddr</name> != <name>null</name> &amp;&amp; <call><name>hasHostName</name><argument_list>(<argument><expr><name>nameAddr</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>setDomainAndName</name><argument_list>(<argument><expr><call><name><name>nameAddr</name>.<name>getCanonicalHostName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>setDomainAndName</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <if>if <condition>(<expr><name>best4</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>setProperty</name><argument_list>(<argument><expr><name>ADDR4</name></expr></argument>, <argument><expr><call><name><name>best4</name>.<name>getHostAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>setProperty</name><argument_list>(<argument><expr><name>ADDR4</name></expr></argument>, <argument><expr><name>DEF_REM_ADDR4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <if>if <condition>(<expr><name>best6</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>setProperty</name><argument_list>(<argument><expr><name>ADDR6</name></expr></argument>, <argument><expr><call><name><name>best6</name>.<name>getHostAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>setProperty</name><argument_list>(<argument><expr><name>ADDR6</name></expr></argument>, <argument><expr><name>DEF_REM_ADDR6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Error retrieving remote host information for host:" + <name>host</name>
                    + "."</expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setDomainAndName</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setProperty</name><argument_list>(<argument><expr><name>ADDR4</name></expr></argument>, <argument><expr><name>DEF_REM_ADDR4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setProperty</name><argument_list>(<argument><expr><name>ADDR6</name></expr></argument>, <argument><expr><name>DEF_REM_ADDR6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>setDomainAndName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>fqdn</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>idx</name> =<init> <expr><call><name><name>fqdn</name>.<name>indexOf</name></name><argument_list>(<argument><expr>'.'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>idx</name> &gt; 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>setProperty</name><argument_list>(<argument><expr><name>NAME</name></expr></argument>, <argument><expr><call><name><name>fqdn</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setProperty</name><argument_list>(<argument><expr><name>DOMAIN</name></expr></argument>, <argument><expr><call><name><name>fqdn</name>.<name>substring</name></name><argument_list>(<argument><expr><name>idx</name>+1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>setProperty</name><argument_list>(<argument><expr><name>NAME</name></expr></argument>, <argument><expr><name>fqdn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setProperty</name><argument_list>(<argument><expr><name>DOMAIN</name></expr></argument>, <argument><expr><name>DEF_DOMAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>setProperty</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>, <param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>setNewProperty</name><argument_list>(<argument><expr><name>prefix</name> + <name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
