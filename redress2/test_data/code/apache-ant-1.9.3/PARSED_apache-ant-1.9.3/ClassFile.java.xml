<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\depend\ClassFile.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>depend</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>DataInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>depend</name>.<name>constantpool</name>.<name>ClassCPInfo</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>depend</name>.<name>constantpool</name>.<name>ConstantPool</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>depend</name>.<name>constantpool</name>.<name>ConstantPoolEntry</name></name>;</import>

<comment type="javadoc">/**
 * A ClassFile object stores information about a Java class. The class may
 * be read from a DataInputStream.and written to a DataOutputStream. These
 * are usually streams from a Java class file or a class file component of a
 * Jar file.
 *
 */</comment>
<class><specifier>public</specifier> class <name>ClassFile</name> <block>{

    <comment type="javadoc">/** The Magic Value that marks the start of a Java class file  */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>CLASS_MAGIC</name> =<init> <expr>0xCAFEBABE</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** This class' constant pool.  */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ConstantPool</name></type> <name>constantPool</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The class name for this class.  */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>className</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Read the class from a data stream. This method takes an InputStream
     * as input and parses the class from the stream. &lt;p&gt;
     *
     *
     *
     * @param stream an InputStream from which the class will be read
     * @exception IOException if there is a problem reading from the given
     *      stream.
     * @exception ClassFormatError if the class cannot be parsed correctly
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>read</name><parameter_list>(<param><decl><type><name>InputStream</name></type> <name>stream</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ClassFormatError</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>DataInputStream</name></type> <name>classStream</name> =<init> <expr>new <call><name>DataInputStream</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name><name>classStream</name>.<name>readInt</name></name><argument_list>()</argument_list></call> != <name>CLASS_MAGIC</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>ClassFormatError</name><argument_list>(<argument><expr>"No Magic Code Found "
                + "- probably not a Java class file."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <comment type="line">// right we have a good looking class file.</comment>
        <comment type="block">/* int minorVersion = */</comment> <expr_stmt><expr><call><name><name>classStream</name>.<name>readUnsignedShort</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* int majorVersion = */</comment> <expr_stmt><expr><call><name><name>classStream</name>.<name>readUnsignedShort</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// read the constant pool in and resolve it</comment>
        <expr_stmt><expr><name>constantPool</name> = new <call><name>ConstantPool</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>constantPool</name>.<name>read</name></name><argument_list>(<argument><expr><name>classStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>constantPool</name>.<name>resolve</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* int accessFlags = */</comment> <expr_stmt><expr><call><name><name>classStream</name>.<name>readUnsignedShort</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>thisClassIndex</name> =<init> <expr><call><name><name>classStream</name>.<name>readUnsignedShort</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="block">/* int superClassIndex = */</comment> <expr_stmt><expr><call><name><name>classStream</name>.<name>readUnsignedShort</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ClassCPInfo</name></type> <name>classInfo</name>
            =<init> <expr>(<name>ClassCPInfo</name>) <call><name><name>constantPool</name>.<name>getEntry</name></name><argument_list>(<argument><expr><name>thisClassIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>className</name>  = <call><name><name>classInfo</name>.<name>getClassName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Get the classes which this class references.
     *
     * @return a vector of class names which this class references
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getClassRefs</name><parameter_list>()</parameter_list> <block>{

        <decl_stmt><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>classRefs</name> =<init> <expr>new <call><name><name>Vector</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>size</name> =<init> <expr><call><name><name>constantPool</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>size</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
            <decl_stmt><decl><type><name>ConstantPoolEntry</name></type> <name>entry</name> =<init> <expr><call><name><name>constantPool</name>.<name>getEntry</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>entry</name> != <name>null</name>
                &amp;&amp; <call><name><name>entry</name>.<name>getTag</name></name><argument_list>()</argument_list></call> == <name><name>ConstantPoolEntry</name>.<name>CONSTANT_CLASS</name></name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>ClassCPInfo</name></type> <name>classEntry</name> =<init> <expr>(<name>ClassCPInfo</name>) <name>entry</name></expr></init></decl>;</decl_stmt>

                <if>if <condition>(<expr>!<call><name><name>classEntry</name>.<name>getClassName</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><name>className</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>classRefs</name>.<name>add</name></name><argument_list>(
                        <argument><expr><call><name><name>ClassFileUtils</name>.<name>convertSlashName</name></name><argument_list>(<argument><expr><call><name><name>classEntry</name>.<name>getClassName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></for>

        <return>return <expr><name>classRefs</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the class' fully qualified name in dot format.
     *
     * @return the class name in dot format (eg. java.lang.Object)
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getFullClassName</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>ClassFileUtils</name>.<name>convertSlashName</name></name><argument_list>(<argument><expr><name>className</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>

</unit>
