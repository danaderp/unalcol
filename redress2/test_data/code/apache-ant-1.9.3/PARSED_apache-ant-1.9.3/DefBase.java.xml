<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\DefBase.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>AntClassLoader</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Path</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Reference</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>ClasspathUtils</name></name>;</import>

<comment type="javadoc">/**
 * Base class for Definitions handling uri and class loading.
 * (This was part of Definer)
 *
 * @since Ant 1.6
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>DefBase</name> <super><extends>extends <name>AntlibDefinition</name></extends></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>ClassLoader</name></type> <name>createdLoader</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>ClasspathUtils</name>.<name>Delegate</name></name></type> <name>cpDelegate</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Check if classpath attributes have been set.
     * (to be called before getCpDelegate() is used.
     * @return true if cpDelegate has been created.
     */</comment>
    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>hasCpDelegate</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>cpDelegate</name> != <name>null</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * @param reverseLoader if true a delegated loader will take precedence over
     *                      the parent
     * @deprecated since 1.6.x.
     *             stop using this attribute
     * @ant.attribute ignore="true"
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setReverseLoader</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>reverseLoader</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>getDelegate</name><argument_list>()</argument_list></call>.<call><name>setReverseLoader</name><argument_list>(<argument><expr><name>reverseLoader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"The reverseloader attribute is DEPRECATED. It will be removed"</expr></argument>,
            <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * @return the classpath for this definition
     */</comment>
    <function><type><specifier>public</specifier> <name>Path</name></type> <name>getClasspath</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getDelegate</name><argument_list>()</argument_list></call>.<call><name>getClasspath</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * @return the reverse loader attribute of the classpath delegate.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isReverseLoader</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getDelegate</name><argument_list>()</argument_list></call>.<call><name>isReverseLoader</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the loader id of the class path Delegate.
     * @return the loader id
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getLoaderId</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getDelegate</name><argument_list>()</argument_list></call>.<call><name>getClassLoadId</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the class path id of the class path delegate.
     * @return the class path id
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getClasspathId</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getDelegate</name><argument_list>()</argument_list></call>.<call><name>getClassLoadId</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the classpath to be used when searching for component being defined.
     *
     * @param classpath an Ant Path object containing the classpath.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setClasspath</name><parameter_list>(<param><decl><type><name>Path</name></type> <name>classpath</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>getDelegate</name><argument_list>()</argument_list></call>.<call><name>setClasspath</name><argument_list>(<argument><expr><name>classpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Create the classpath to be used when searching for component being
     * defined.
     * @return the classpath of the this definition
     */</comment>
    <function><type><specifier>public</specifier> <name>Path</name></type> <name>createClasspath</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getDelegate</name><argument_list>()</argument_list></call>.<call><name>createClasspath</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set a reference to a classpath to use when loading the files.
     * To actually share the same loader, set loaderref as well
     * @param r the reference to the classpath
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setClasspathRef</name><parameter_list>(<param><decl><type><name>Reference</name></type> <name>r</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>getDelegate</name><argument_list>()</argument_list></call>.<call><name>setClasspathref</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Use the reference to locate the loader. If the loader is not
     * found, the specified classpath will be used and registered
     * with the specified name.
     *
     * This allows multiple taskdef/typedef to use the same class loader,
     * so they can be used together, eliminating the need to
     * put them in the CLASSPATH.
     *
     * @param r the reference to locate the loader.
     * @since Ant 1.5
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLoaderRef</name><parameter_list>(<param><decl><type><name>Reference</name></type> <name>r</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>getDelegate</name><argument_list>()</argument_list></call>.<call><name>setLoaderRef</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * create a classloader for this definition
     * @return the classloader from the cpDelegate
     */</comment>
    <function><type><specifier>protected</specifier> <name>ClassLoader</name></type> <name>createLoader</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>getAntlibClassLoader</name><argument_list>()</argument_list></call> != <name>null</name> &amp;&amp; <name>cpDelegate</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name>getAntlibClassLoader</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>createdLoader</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>createdLoader</name> = <call><name>getDelegate</name><argument_list>()</argument_list></call>.<call><name>getClassLoader</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// need to load Task via system classloader or the new</comment>
            <comment type="line">// task we want to define will never be a Task but always</comment>
            <comment type="line">// be wrapped into a TaskAdapter.</comment>
            <expr_stmt><expr>((<name>AntClassLoader</name>) <name>createdLoader</name>)
                .<call><name>addSystemPackageRoot</name><argument_list>(<argument><expr>"org.apache.tools.ant"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>createdLoader</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * @see org.apache.tools.ant.Task#init()
     * @throws BuildException on error.
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>init</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>super</name>.<name>init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name><name>ClasspathUtils</name>.<name>Delegate</name></name></type> <name>getDelegate</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>cpDelegate</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>cpDelegate</name> = <call><name><name>ClasspathUtils</name>.<name>getDelegate</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>cpDelegate</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
