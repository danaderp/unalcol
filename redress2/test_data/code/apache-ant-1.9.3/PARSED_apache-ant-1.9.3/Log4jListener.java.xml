<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\listener\Log4jListener.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>listener</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>log4j</name>.<name>Logger</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>log4j</name>.<name>helpers</name>.<name>NullEnumeration</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildListener</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Target</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>


<comment type="javadoc">/**
 *  Listener which sends events to Log4j logging system
 *
 */</comment>
<class><specifier>public</specifier> class <name>Log4jListener</name> <super><implements>implements <name>BuildListener</name></implements></super> <block>{

    <comment type="javadoc">/** Indicates if the listener was initialized. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>initialized</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * log category we log into
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>LOG_ANT</name> =<init> <expr>"org.apache.tools.ant"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Construct the listener and make sure there is a valid appender.
     */</comment>
    <constructor><specifier>public</specifier> <name>Log4jListener</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Logger</name></type> <name>log</name> =<init> <expr><call><name><name>Logger</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name>LOG_ANT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Logger</name></type> <name>rootLog</name> =<init> <expr><call><name><name>Logger</name>.<name>getRootLogger</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>initialized</name> = !(<call><name><name>rootLog</name>.<name>getAllAppenders</name></name><argument_list>()</argument_list></call> <name>instanceof</name> <name>NullEnumeration</name>)</expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>initialized</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>log</name>.<name>error</name></name><argument_list>(<argument><expr>"No log4j.properties in build area"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></constructor>

    <comment type="javadoc">/**
     * @see BuildListener#buildStarted
     */</comment>
    <comment type="javadoc">/** {@inheritDoc}. */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>buildStarted</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>initialized</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Logger</name></type> <name>log</name> =<init> <expr><call><name><name>Logger</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>Project</name>.<name><name/></name></name>class.<call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>log</name>.<name>info</name></name><argument_list>(<argument><expr>"Build started."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * @see BuildListener#buildFinished
     */</comment>
    <comment type="javadoc">/** {@inheritDoc}. */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>buildFinished</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>initialized</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Logger</name></type> <name>log</name> =<init> <expr><call><name><name>Logger</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>Project</name>.<name><name/></name></name>class.<call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>event</name>.<name>getException</name></name><argument_list>()</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>log</name>.<name>info</name></name><argument_list>(<argument><expr>"Build finished."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>log</name>.<name>error</name></name><argument_list>(<argument><expr>"Build finished with error."</expr></argument>, <argument><expr><call><name><name>event</name>.<name>getException</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * @see BuildListener#targetStarted
     */</comment>
    <comment type="javadoc">/** {@inheritDoc}. */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>targetStarted</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>initialized</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Logger</name></type> <name>log</name> =<init> <expr><call><name><name>Logger</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>Target</name>.<name><name/></name></name>class.<call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>log</name>.<name>info</name></name><argument_list>(<argument><expr>"Target \"" + <call><name><name>event</name>.<name>getTarget</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call> + "\" started."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * @see BuildListener#targetFinished
     */</comment>
    <comment type="javadoc">/** {@inheritDoc}. */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>targetFinished</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>initialized</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>targetName</name> =<init> <expr><call><name><name>event</name>.<name>getTarget</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Logger</name></type> <name>cat</name> =<init> <expr><call><name><name>Logger</name>.<name>getLogger</name></name><argument_list>(<argument><expr><name><name>Target</name>.<name><name/></name></name>class.<call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>event</name>.<name>getException</name></name><argument_list>()</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>cat</name>.<name>info</name></name><argument_list>(<argument><expr>"Target \"" + <name>targetName</name> + "\" finished."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>cat</name>.<name>error</name></name><argument_list>(<argument><expr>"Target \"" + <name>targetName</name>
                    + "\" finished with error."</expr></argument>, <argument><expr><call><name><name>event</name>.<name>getException</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * @see BuildListener#taskStarted
     */</comment>
    <comment type="javadoc">/** {@inheritDoc}. */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>taskStarted</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>initialized</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Task</name></type> <name>task</name> =<init> <expr><call><name><name>event</name>.<name>getTask</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Logger</name></type> <name>log</name> =<init> <expr><call><name><name>Logger</name>.<name>getLogger</name></name><argument_list>(<argument><expr><call><name><name>task</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>log</name>.<name>info</name></name><argument_list>(<argument><expr>"Task \"" + <call><name><name>task</name>.<name>getTaskName</name></name><argument_list>()</argument_list></call> + "\" started."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * @see BuildListener#taskFinished
     */</comment>
    <comment type="javadoc">/** {@inheritDoc}. */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>taskFinished</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>initialized</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Task</name></type> <name>task</name> =<init> <expr><call><name><name>event</name>.<name>getTask</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Logger</name></type> <name>log</name> =<init> <expr><call><name><name>Logger</name>.<name>getLogger</name></name><argument_list>(<argument><expr><call><name><name>task</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>event</name>.<name>getException</name></name><argument_list>()</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>log</name>.<name>info</name></name><argument_list>(<argument><expr>"Task \"" + <call><name><name>task</name>.<name>getTaskName</name></name><argument_list>()</argument_list></call> + "\" finished."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>log</name>.<name>error</name></name><argument_list>(<argument><expr>"Task \"" + <call><name><name>task</name>.<name>getTaskName</name></name><argument_list>()</argument_list></call>
                    + "\" finished with error."</expr></argument>, <argument><expr><call><name><name>event</name>.<name>getException</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * @see BuildListener#messageLogged
     */</comment>
    <comment type="javadoc">/** {@inheritDoc}. */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>messageLogged</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>initialized</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Object</name></type> <name>categoryObject</name> =<init> <expr><call><name><name>event</name>.<name>getTask</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>categoryObject</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>categoryObject</name> = <call><name><name>event</name>.<name>getTarget</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>categoryObject</name> == <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>categoryObject</name> = <call><name><name>event</name>.<name>getProject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>

            <decl_stmt><decl><type><name>Logger</name></type> <name>log</name>
                =<init> <expr><call><name><name>Logger</name>.<name>getLogger</name></name><argument_list>(<argument><expr><call><name><name>categoryObject</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <switch>switch <condition>(<expr><call><name><name>event</name>.<name>getPriority</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <case>case <expr><name><name>Project</name>.<name>MSG_ERR</name></name></expr>:
                    <expr_stmt><expr><call><name><name>log</name>.<name>error</name></name><argument_list>(<argument><expr><call><name><name>event</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr>:
                    <expr_stmt><expr><call><name><name>log</name>.<name>warn</name></name><argument_list>(<argument><expr><call><name><name>event</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr>:
                    <expr_stmt><expr><call><name><name>log</name>.<name>info</name></name><argument_list>(<argument><expr><call><name><name>event</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr>:
                    <expr_stmt><expr><call><name><name>log</name>.<name>debug</name></name><argument_list>(<argument><expr><call><name><name>event</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr>:
                    <expr_stmt><expr><call><name><name>log</name>.<name>debug</name></name><argument_list>(<argument><expr><call><name><name>event</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </case><default>default:
                    <expr_stmt><expr><call><name><name>log</name>.<name>error</name></name><argument_list>(<argument><expr><call><name><name>event</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
            </default>}</block></switch>
        }</block></then></if>
    }</block></function>
}</block></class>
</unit>
