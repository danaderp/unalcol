<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\ExecutorTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>

<comment type="javadoc">/**
 * Executor tests
 */</comment>
<class><specifier>public</specifier> class <name>ExecutorTest</name> <super><extends>extends <name>BuildFileTest</name></extends> <implements>implements <name>BuildListener</name></implements></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SINGLE_CHECK</name>
        =<init> <expr>"org.apache.tools.ant.helper.SingleCheckExecutor"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>IGNORE_DEPS</name>
        =<init> <expr>"org.apache.tools.ant.helper.IgnoreDependenciesExecutor"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Vector</name></type> <name>TARGET_NAMES</name></decl>;</decl_stmt>
    static <block>{
        <expr_stmt><expr><name>TARGET_NAMES</name> = new <call><name>Vector</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>TARGET_NAMES</name>.<name>add</name></name><argument_list>(<argument><expr>"a"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>TARGET_NAMES</name>.<name>add</name></name><argument_list>(<argument><expr>"b"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>

    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>targetCount</name></decl>;</decl_stmt>

    <comment type="block">/* BuildListener stuff */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>targetStarted</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>targetCount</name>++</expr>;</expr_stmt>
    }</block></function>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>buildStarted</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{}</block></function>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>buildFinished</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{}</block></function>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>targetFinished</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{}</block></function>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>taskStarted</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{}</block></function>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>taskFinished</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{}</block></function>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>messageLogged</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{}</block></function>

    <constructor><specifier>public</specifier> <name>ExecutorTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr>"src/etc/testcases/core/executor.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>targetCount</name> = 0</expr>;</expr_stmt>
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>addBuildListener</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>Project</name></type> <name>getProject</name><parameter_list>(<param><decl><type><name>String</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>getProject</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>Project</name></type> <name>getProject</name><parameter_list>(<param><decl><type><name>String</name></type> <name>e</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>f</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>getProject</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>Project</name></type> <name>getProject</name><parameter_list>(<param><decl><type><name>String</name></type> <name>e</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>f</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>k</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Project</name></type> <name>p</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>setNewProperty</name></name><argument_list>(<argument><expr>"ant.executor.class"</expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>setKeepGoingMode</name></name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>f</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>p</name>.<name>setNewProperty</name></name><argument_list>(<argument><expr>"failfoo"</expr></argument>, <argument><expr>"foo"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>p</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testDefaultExecutor</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>executeTargets</name><argument_list>(<argument><expr><name>TARGET_NAMES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>4</expr></argument>, <argument><expr><name>targetCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testSingleCheckExecutor</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>getProject</name><argument_list>(<argument><expr><name>SINGLE_CHECK</name></expr></argument>)</argument_list></call>.<call><name>executeTargets</name><argument_list>(<argument><expr><name>TARGET_NAMES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>3</expr></argument>, <argument><expr><name>targetCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testIgnoreDependenciesExecutor</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>getProject</name><argument_list>(<argument><expr><name>IGNORE_DEPS</name></expr></argument>)</argument_list></call>.<call><name>executeTargets</name><argument_list>(<argument><expr><name>TARGET_NAMES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr><name>targetCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testDefaultFailure</name><parameter_list>()</parameter_list> <block>{
        <try>try <block>{
            <expr_stmt><expr><call><name>getProject</name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call>.<call><name>executeTargets</name><argument_list>(<argument><expr><name>TARGET_NAMES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"should fail"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr>"failfoo"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><name>targetCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testSingleCheckFailure</name><parameter_list>()</parameter_list> <block>{
        <try>try <block>{
            <expr_stmt><expr><call><name>getProject</name><argument_list>(<argument><expr><name>SINGLE_CHECK</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call>.<call><name>executeTargets</name><argument_list>(<argument><expr><name>TARGET_NAMES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"should fail"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr>"failfoo"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><name>targetCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testIgnoreDependenciesFailure</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">//no foo failure; foo is never executed as dependencies are ignored!</comment>
        <expr_stmt><expr><call><name>getProject</name><argument_list>(<argument><expr><name>IGNORE_DEPS</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call>.<call><name>executeTargets</name><argument_list>(<argument><expr><name>TARGET_NAMES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testKeepGoingDefault</name><parameter_list>()</parameter_list> <block>{
        <try>try <block>{
            <expr_stmt><expr><call><name>getProject</name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call>.<call><name>executeTargets</name><argument_list>(<argument><expr><name>TARGET_NAMES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"should fail"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr>"failfoo"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr><name>targetCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testKeepGoingSingleCheck</name><parameter_list>()</parameter_list> <block>{
        <try>try <block>{
            <expr_stmt><expr><call><name>getProject</name><argument_list>(<argument><expr><name>SINGLE_CHECK</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call>.<call><name>executeTargets</name><argument_list>(<argument><expr><name>TARGET_NAMES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"should fail"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr>"failfoo"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><name>targetCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testKeepGoingIgnoreDependencies</name><parameter_list>()</parameter_list> <block>{
        <try>try <block>{
            <comment type="line">//explicitly add foo for failure</comment>
            <decl_stmt><decl><type><name>Vector</name></type> <name>targetNames</name> =<init> <expr>new <call><name>Vector</name><argument_list>(<argument><expr><name>TARGET_NAMES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>targetNames</name>.<name>add</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>"foo"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>getProject</name><argument_list>(<argument><expr><name>IGNORE_DEPS</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call>.<call><name>executeTargets</name><argument_list>(<argument><expr><name>targetNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"should fail"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr>"failfoo"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>3</expr></argument>, <argument><expr><name>targetCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

}</block></class>

</unit>
