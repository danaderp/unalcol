<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\dispatch\DispatchUtils.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>dispatch</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>UnknownElement</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>

<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name>.<name>InvocationTargetException</name></name>;</import>
<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name>.<name>Method</name></name>;</import>

<comment type="javadoc">/**
 * Determines and Executes the action method for the task.
 */</comment>
<comment type="line">// CheckStyle:HideUtilityClassConstructorCheck OFF - (bc)</comment>
<class><specifier>public</specifier> class <name>DispatchUtils</name> <block>{
    <comment type="javadoc">/**
     * Determines and Executes the action method for the task.
     * @param task the task to execute.
     * @throws BuildException on error.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>void</name></type> <name>execute</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>task</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>methodName</name> =<init> <expr>"execute"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Dispatchable</name></type> <name>dispatchable</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <if>if <condition>(<expr><name>task</name> <name>instanceof</name> <name>Dispatchable</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>dispatchable</name> = (<name>Dispatchable</name>) <name>task</name></expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><name>task</name> <name>instanceof</name> <name>UnknownElement</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>UnknownElement</name></type> <name>ue</name> =<init> <expr>(<name>UnknownElement</name>) <name>task</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Object</name></type> <name>realThing</name> =<init> <expr><call><name><name>ue</name>.<name>getRealThing</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>realThing</name> != <name>null</name>
                    &amp;&amp; <name>realThing</name> <name>instanceof</name> <name>Dispatchable</name>
                    &amp;&amp; <name>realThing</name> <name>instanceof</name> <name>Task</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>dispatchable</name> = (<name>Dispatchable</name>) <name>realThing</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if></else></if>
            <if>if <condition>(<expr><name>dispatchable</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>mName</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <try>try <block>{
                    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>name</name> =<init> <expr><call><name><name>dispatchable</name>.<name>getActionParameterName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>name</name> != <name>null</name> &amp;&amp; <call><name><name>name</name>.<name>trim</name></name><argument_list>()</argument_list></call>.<call><name>length</name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>mName</name> = "get" + <call><name><name>name</name>.<name>trim</name></name><argument_list>()</argument_list></call>.<call><name>substring</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call>.<call><name>toUpperCase</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><call><name><name>name</name>.<name>length</name></name><argument_list>()</argument_list></call> &gt; 1</expr>)</condition><then> <block>{
                            <expr_stmt><expr><name>mName</name> += <call><name><name>name</name>.<name>substring</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Class</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name>Dispatchable</name></extends></argument>&gt;</argument_list></name></type> <name>c</name> =<init> <expr><call><name><name>dispatchable</name>.<name>getClass</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><specifier>final</specifier> <name>Method</name></type> <name>actionM</name> =<init> <expr><call><name><name>c</name>.<name>getMethod</name></name><argument_list>(<argument><expr><name>mName</name></expr></argument>, <argument><expr>new <name><name>Class</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if>if <condition>(<expr><name>actionM</name> != <name>null</name></expr>)</condition><then> <block>{
                            <decl_stmt><decl><type><specifier>final</specifier> <name>Object</name></type> <name>o</name> =<init> <expr><call><name><name>actionM</name>.<name>invoke</name></name><argument_list>(<argument><expr><name>dispatchable</name></expr></argument>, <argument><expr>(<name><name>Object</name><index>[]</index></name>) <name>null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <if>if <condition>(<expr><name>o</name> != <name>null</name></expr>)</condition><then> <block>{
                                <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>s</name> =<init> <expr><call><name><name>o</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                                <if>if <condition>(<expr><name>s</name> != <name>null</name> &amp;&amp; <call><name><name>s</name>.<name>trim</name></name><argument_list>()</argument_list></call>.<call><name>length</name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
                                    <expr_stmt><expr><name>methodName</name> = <call><name><name>s</name>.<name>trim</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                                    <decl_stmt><decl><type><name>Method</name></type> <name>executeM</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                                    <expr_stmt><expr><name>executeM</name> = <call><name><name>dispatchable</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getMethod</name><argument_list>(
                                        <argument><expr><name>methodName</name></expr></argument>, <argument><expr>new <name><name>Class</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    <if>if <condition>(<expr><name>executeM</name> == <name>null</name></expr>)</condition><then> <block>{
                                        <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                                            <argument><expr>"No public " + <name>methodName</name> + "() in "
                                            + <call><name><name>dispatchable</name>.<name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                                    }</block></then></if>
                                    <expr_stmt><expr><call><name><name>executeM</name>.<name>invoke</name></name><argument_list>(<argument><expr><name>dispatchable</name></expr></argument>, <argument><expr>(<name><name>Object</name><index>[]</index></name>) <name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    <if>if <condition>(<expr><name>task</name> <name>instanceof</name> <name>UnknownElement</name></expr>)</condition><then> <block>{
                                        <expr_stmt><expr>((<name>UnknownElement</name>) <name>task</name>).<call><name>setRealThing</name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    }</block></then></if>
                                }</block></then> <else>else <block>{
                                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                                        <argument><expr>"Dispatchable Task attribute '" + <call><name><name>name</name>.<name>trim</name></name><argument_list>()</argument_list></call>
                                        + "' not set or value is empty."</expr></argument>)</argument_list></call></expr>;</throw>
                                }</block></else></if>
                            }</block></then> <else>else <block>{
                                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                                        <argument><expr>"Dispatchable Task attribute '" + <call><name><name>name</name>.<name>trim</name></name><argument_list>()</argument_list></call>
                                        + "' not set or value is empty."</expr></argument>)</argument_list></call></expr>;</throw>
                            }</block></else></if>
                        }</block></then></if>
                    }</block></then> <else>else <block>{
                        <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                            <argument><expr>"Action Parameter Name must not be empty for Dispatchable Task."</expr></argument>)</argument_list></call></expr>;</throw>
                    }</block></else></if>
                }</block> <catch>catch (<param><decl><type><name>NoSuchMethodException</name></type> <name>nsme</name></decl></param>) <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"No public " + <name>mName</name> + "() in " + <call><name><name>task</name>.<name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></catch></try>
            }</block></then> <else>else <block>{
                <decl_stmt><decl><type><name>Method</name></type> <name>executeM</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>executeM</name> = <call><name><name>task</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getMethod</name><argument_list>(<argument><expr><name>methodName</name></expr></argument>, <argument><expr>new <name><name>Class</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>executeM</name> == <name>null</name></expr>)</condition><then> <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"No public " + <name>methodName</name> + "() in "
                        + <call><name><name>task</name>.<name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if>
                <expr_stmt><expr><call><name><name>executeM</name>.<name>invoke</name></name><argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr>(<name><name>Object</name><index>[]</index></name>) <name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>task</name> <name>instanceof</name> <name>UnknownElement</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr>((<name>UnknownElement</name>) <name>task</name>).<call><name>setRealThing</name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></else></if>
        }</block> <catch>catch (<param><decl><type><name>InvocationTargetException</name></type> <name>ie</name></decl></param>) <block>{
            <decl_stmt><decl><type><name>Throwable</name></type> <name>t</name> =<init> <expr><call><name><name>ie</name>.<name>getTargetException</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>t</name> <name>instanceof</name> <name>BuildException</name></expr>)</condition><then> <block>{
                <throw>throw <expr>((<name>BuildException</name>) <name>t</name>)</expr>;</throw>
            }</block></then> <else>else <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></else></if>
        }</block></catch> <catch>catch (<param><decl><type><name>NoSuchMethodException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <catch>catch (<param><decl><type><name>IllegalAccessException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>
}</block></class>
</unit>
