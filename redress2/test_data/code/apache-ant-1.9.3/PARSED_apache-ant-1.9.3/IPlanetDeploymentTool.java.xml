<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\ejb\IPlanetDeploymentTool.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>ejb</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Hashtable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>javax</name>.<name>xml</name>.<name>parsers</name>.<name>SAXParser</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>xml</name>.<name>sax</name>.<name>SAXException</name></name>;</import>

<comment type="javadoc">/**
 * This class is used to generate iPlanet Application Server (iAS) 6.0 stubs and
 * skeletons and build an EJB Jar file.  It is designed to be used with the Ant
 * &lt;code&gt;ejbjar&lt;/code&gt; task.  If only stubs and skeletons need to be generated
 * (in other words, if no JAR file needs to be created), refer to the
 * &lt;code&gt;iplanet-ejbc&lt;/code&gt; task and the &lt;code&gt;IPlanetEjbcTask&lt;/code&gt; class.
 * &lt;p&gt;
 * The following attributes may be specified by the user:
 *   &lt;ul&gt;
 *     &lt;li&gt;&lt;i&gt;destdir&lt;/i&gt; -- The base directory into which the generated JAR
 *                           files will be written.  Each JAR file is written
 *                           in directories which correspond to their location
 *                           within the "descriptordir" namespace.  This is a
 *                           required attribute.
 *     &lt;li&gt;&lt;i&gt;classpath&lt;/i&gt; -- The classpath used when generating EJB stubs and
 *                             skeletons.  This is an optional attribute (if
 *                             omitted, the classpath specified in the "ejbjar"
 *                             parent task will be used).  If specified, the
 *                             classpath elements will be prepended to the
 *                             classpath specified in the parent "ejbjar" task.
 *                             Note that nested "classpath" elements may also be
 *                             used.
 *     &lt;li&gt;&lt;i&gt;keepgenerated&lt;/i&gt; -- Indicates whether or not the Java source
 *                                 files which are generated by ejbc will be
 *                                 saved or automatically deleted.  If "yes",
 *                                 the source files will be retained.  This is
 *                                 an optional attribute (if omitted, it
 *                                 defaults to "no").
 *     &lt;li&gt;&lt;i&gt;debug&lt;/i&gt; -- Indicates whether or not the ejbc utility should
 *                         log additional debugging statements to the standard
 *                         output.  If "yes", the additional debugging statements
 *                         will be generated (if omitted, it defaults to "no").
 *     &lt;li&gt;&lt;i&gt;iashome&lt;/i&gt; -- May be used to specify the "home" directory for
 *                           this iPlanet Application server installation.  This
 *                           is used to find the ejbc utility if it isn't
 *                           included in the user's system path.  This is an
 *                           optional attribute (if specified, it should refer
 *                           to the &lt;code&gt;[install-location]/iplanet/ias6/ias
 *                           &lt;/code&gt; directory).  If omitted, the ejbc utility
 *                           must be on the user's system path.
 *     &lt;li&gt;&lt;i&gt;suffix&lt;/i&gt; -- String value appended to the JAR filename when
 *                          creating each JAR.  This attribute is not required
 *                          (if omitted, it defaults to ".jar").
 *   &lt;/ul&gt;
 * &lt;p&gt;
 * For each EJB descriptor found in the "ejbjar" parent task, this deployment
 * tool will locate the three classes that comprise the EJB.  If these class
 * files cannot be located in the specified &lt;code&gt;srcdir&lt;/code&gt; directory, the
 * task will fail.  The task will also attempt to locate the EJB stubs and
 * skeletons in this directory.  If found, the timestamps on the stubs and
 * skeletons will be checked to ensure they are up to date.  Only if these files
 * cannot be found or if they are out of date will ejbc be called.
 *
 * @see    IPlanetEjbc
 */</comment>
<class><specifier>public</specifier> class <name>IPlanetDeploymentTool</name> <super><extends>extends <name>GenericDeploymentTool</name></extends></super> <block>{

    <comment type="block">/* Attributes set by the Ant build file */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type>    <name>iashome</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type>  <name>jarSuffix</name>     =<init> <expr>".jar"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>keepgenerated</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>debug</name>         =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="block">/*
     * Filenames of the standard EJB descriptor (which is passed to this class
     * from the parent "ejbjar" task) and the iAS-specific EJB descriptor
     * (whose name is determined by this class).  Both filenames are relative
     * to the directory specified by the "srcdir" attribute in the ejbjar task.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type>  <name>descriptorName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type>  <name>iasDescriptorName</name></decl>;</decl_stmt>

    <comment type="block">/*
     * The displayName variable stores the value of the "display-name" element
     * from the standard EJB descriptor.  As a future enhancement to this task,
     * we may determine the name of the EJB JAR file using this display-name,
     * but this has not be implemented yet.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type>  <name>displayName</name></decl>;</decl_stmt>

    <comment type="block">/*
     * Regardless of the name of the iAS-specific EJB descriptor file, it will
     * written in the completed JAR file as "ias-ejb-jar.xml".  This is the
     * naming convention implemented by iAS.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>IAS_DD</name> =<init> <expr>"ias-ejb-jar.xml"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Setter method used to store the "home" directory of the user's iAS
     * installation.  The directory specified should typically be
     * &lt;code&gt;[install-location]/iplanet/ias6/ias&lt;/code&gt;.
     *
     * @param iashome The home directory for the user's iAS installation.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setIashome</name><parameter_list>(<param><decl><type><name>File</name></type> <name>iashome</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>iashome</name></name> = <name>iashome</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Setter method used to specify whether the Java source files generated by
     * the ejbc utility should be saved or automatically deleted.
     *
     * @param keepgenerated boolean which, if &lt;code&gt;true&lt;/code&gt;, indicates that
     *                      Java source files generated by ejbc for the stubs
     *                      and skeletons should be kept.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setKeepgenerated</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>keepgenerated</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>keepgenerated</name></name> = <name>keepgenerated</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets whether or not debugging output will be generated when ejbc is
     * executed.
     *
     * @param debug A boolean indicating if debugging output should be generated
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDebug</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>debug</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>debug</name></name> = <name>debug</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Setter method used to specify the filename suffix (for example, ".jar")
     * for the JAR files to be created.
     *
     * @param jarSuffix The string to use as the JAR filename suffix.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSuffix</name><parameter_list>(<param><decl><type><name>String</name></type> <name>jarSuffix</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>jarSuffix</name></name> = <name>jarSuffix</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Since iAS doesn't generate a "generic" JAR as part of its processing,
     * this attribute is ignored and a warning message is displayed to the user.
     *
     * @param inString the string to use as the suffix.  This parameter is
     *                 ignored.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setGenericJarSuffix</name><parameter_list>(<param><decl><type><name>String</name></type> <name>inString</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Since a generic JAR file is not created during processing, the "
                + "iPlanet Deployment Tool does not support the "
                + "\"genericjarsuffix\" attribute.  It will be ignored."</expr></argument>,
            <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/** {@inheritDoc}. */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>processDescriptor</name><parameter_list>(<param><decl><type><name>String</name></type> <name>descriptorName</name></decl></param>, <param><decl><type><name>SAXParser</name></type> <name>saxParser</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>descriptorName</name></name> = <name>descriptorName</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>iasDescriptorName</name></name> = <name>null</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"iPlanet Deployment Tool processing: " + <name>descriptorName</name> + " (and "
                + <call><name>getIasDescriptorName</name><argument_list>()</argument_list></call> + ")"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>super</name>.<name>processDescriptor</name></name><argument_list>(<argument><expr><name>descriptorName</name></expr></argument>, <argument><expr><name>saxParser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Verifies that the user selections are valid.
     *
     * @param descriptorFileName String representing the file name of an EJB
     *                           descriptor to be processed
     * @param saxParser          SAXParser which may be used to parse the XML
     *                           descriptor
     * @throws BuildException If the user selections are invalid.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>checkConfiguration</name><parameter_list>(<param><decl><type><name>String</name></type> <name>descriptorFileName</name></decl></param>,
                                    <param><decl><type><name>SAXParser</name></type> <name>saxParser</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{

        <decl_stmt><decl><type><name>int</name></type> <name>startOfName</name> =<init> <expr><call><name><name>descriptorFileName</name>.<name>lastIndexOf</name></name><argument_list>(<argument><expr><name><name>File</name>.<name>separatorChar</name></name></expr></argument>)</argument_list></call> + 1</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>stdXml</name> =<init> <expr><call><name><name>descriptorFileName</name>.<name>substring</name></name><argument_list>(<argument><expr><name>startOfName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>stdXml</name>.<name>equals</name></name><argument_list>(<argument><expr><name>EJB_DD</name></expr></argument>)</argument_list></call> &amp;&amp; (<call><name>getConfig</name><argument_list>()</argument_list></call>.<name>baseJarName</name> == <name>null</name>)</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>msg</name> =<init> <expr>"No name specified for the completed JAR file.  The EJB"
                            + " descriptor should be prepended with the JAR "
                            + "name or it should be specified using the "
                            + "attribute \"basejarname\" in the \"ejbjar\" task."</expr></init></decl>;</decl_stmt>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <decl_stmt><decl><type><name>File</name></type> <name>iasDescriptor</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getConfig</name><argument_list>()</argument_list></call>.<name>descriptorDir</name></expr></argument>,
                                        <argument><expr><call><name>getIasDescriptorName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>(!<call><name><name>iasDescriptor</name>.<name>exists</name></name><argument_list>()</argument_list></call>) || (!<call><name><name>iasDescriptor</name>.<name>isFile</name></name><argument_list>()</argument_list></call>)</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>msg</name> =<init> <expr>"The iAS-specific EJB descriptor ("
                            + <name>iasDescriptor</name> + ") was not found."</expr></init></decl>;</decl_stmt>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr>(<name>iashome</name> != <name>null</name>) &amp;&amp; (!<call><name><name>iashome</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call>)</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>msg</name> =<init> <expr>"If \"iashome\" is specified, it must be a valid "
                            + "directory (it was set to " + <name>iashome</name> + ")."</expr></init></decl>;</decl_stmt>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * This method returns a list of EJB files found when the specified EJB
     * descriptor is parsed and processed.
     *
     * @param descriptorFileName String representing the file name of an EJB
     *                           descriptor to be processed
     * @param saxParser          SAXParser which may be used to parse the XML
     *                           descriptor
     * @return                   Hashtable of EJB class (and other) files to be
     *                           added to the completed JAR file
     * @throws IOException       An IOException from the parser, possibly from
     *                           the byte stream or character stream
     * @throws SAXException      Any SAX exception, possibly wrapping another
     *                           exception
     */</comment>
    <function><type><specifier>protected</specifier> <name>Hashtable</name></type> <name>parseEjbFiles</name><parameter_list>(<param><decl><type><name>String</name></type> <name>descriptorFileName</name></decl></param>,
                         <param><decl><type><name>SAXParser</name></type> <name>saxParser</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>SAXException</name></expr></argument></throws> <block>{

        <decl_stmt><decl><type><name>Hashtable</name></type> <name>files</name></decl>;</decl_stmt>

        <comment type="block">/* Build and populate an instance of the ejbc utility */</comment>
        <decl_stmt><decl><type><name>IPlanetEjbc</name></type> <name>ejbc</name> =<init> <expr>new <call><name>IPlanetEjbc</name><argument_list>(
                                    <argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getConfig</name><argument_list>()</argument_list></call>.<name>descriptorDir</name></expr></argument>,
                                                <argument><expr><name>descriptorFileName</name></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getConfig</name><argument_list>()</argument_list></call>.<name>descriptorDir</name></expr></argument>,
                                                <argument><expr><call><name>getIasDescriptorName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><call><name>getConfig</name><argument_list>()</argument_list></call>.<name>srcDir</name></expr></argument>,
                                    <argument><expr><call><name>getCombinedClasspath</name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>,
                                    <argument><expr><name>saxParser</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ejbc</name>.<name>setRetainSource</name></name><argument_list>(<argument><expr><name>keepgenerated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ejbc</name>.<name>setDebugOutput</name></name><argument_list>(<argument><expr><name>debug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>iashome</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>ejbc</name>.<name>setIasHomeDir</name></name><argument_list>(<argument><expr><name>iashome</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>getConfig</name><argument_list>()</argument_list></call>.<name>dtdLocations</name> != <name>null</name></expr>)</condition><then> <block>{
            <for>for (<init><decl><type><name>Iterator</name></type> <name>i</name> =<init> <expr><call><name>getConfig</name><argument_list>()</argument_list></call>.<call><name><name>dtdLocations</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init>
                 <condition><expr><call><name><name>i</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr/>) <block>{
                <decl_stmt><decl><type><name><name>EjbJar</name>.<name>DTDLocation</name></name></type> <name>dtdLocation</name> =<init>
                    <expr>(<name><name>EjbJar</name>.<name>DTDLocation</name></name>) <call><name><name>i</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>ejbc</name>.<name>registerDTD</name></name><argument_list>(<argument><expr><call><name><name>dtdLocation</name>.<name>getPublicId</name></name><argument_list>()</argument_list></call></expr></argument>,
                                 <argument><expr><call><name><name>dtdLocation</name>.<name>getLocation</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></then></if>

        <comment type="block">/* Execute the ejbc utility -- stubs/skeletons are rebuilt, if needed */</comment>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>ejbc</name>.<name>execute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name><name>IPlanetEjbc</name>.<name>EjbcException</name></name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"An error has occurred while trying to "
                        + "execute the iAS ejbc utility"</expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>

        <expr_stmt><expr><name>displayName</name>    = <call><name><name>ejbc</name>.<name>getDisplayName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>files</name>          = <call><name><name>ejbc</name>.<name>getEjbFiles</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Add CMP descriptors to the list of EJB files */</comment>
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>cmpDescriptors</name> =<init> <expr><call><name><name>ejbc</name>.<name>getCmpDescriptors</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>cmpDescriptors</name>.<name>length</name></name> &gt; 0</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>File</name></type> <name>baseDir</name> =<init> <expr><call><name>getConfig</name><argument_list>()</argument_list></call>.<name>descriptorDir</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>endOfPath</name> =<init> <expr><call><name><name>descriptorFileName</name>.<name>lastIndexOf</name></name><argument_list>(<argument><expr><name><name>File</name>.<name>separator</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>relativePath</name> =<init> <expr><call><name><name>descriptorFileName</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>endOfPath</name> + 1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>cmpDescriptors</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>endOfCmp</name> =<init> <expr><name><name>cmpDescriptors</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>lastIndexOf</name><argument_list>(<argument><expr>'/'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>cmpDescriptor</name> =<init> <expr><name><name>cmpDescriptors</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>substring</name><argument_list>(<argument><expr><name>endOfCmp</name> + 1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name>File</name></type>   <name>cmpFile</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name>baseDir</name></expr></argument>, <argument><expr><name>relativePath</name> + <name>cmpDescriptor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr>!<call><name><name>cmpFile</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"The CMP descriptor file ("
                            + <name>cmpFile</name> + ") could not be found."</expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if>
                <expr_stmt><expr><call><name><name>files</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>cmpDescriptors</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>cmpFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></then></if>

        <return>return <expr><name>files</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Add the iAS-specific EJB descriptor to the list of files which will be
     * written to the JAR file.
     *
     * @param ejbFiles Hashtable of EJB class (and other) files to be added to
     *                 the completed JAR file.
     * @param ddPrefix not used
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>addVendorFiles</name><parameter_list>(<param><decl><type><name>Hashtable</name></type> <name>ejbFiles</name></decl></param>, <param><decl><type><name>String</name></type> <name>ddPrefix</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>ejbFiles</name>.<name>put</name></name><argument_list>(<argument><expr><name>META_DIR</name> + <name>IAS_DD</name></expr></argument>, <argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getConfig</name><argument_list>()</argument_list></call>.<name>descriptorDir</name></expr></argument>,
                     <argument><expr><call><name>getIasDescriptorName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the name of the Jar that will be written. The modification date
     * of this jar will be checked against the dependent bean classes.
     *
     * @param baseName String name of the EJB JAR file to be written (without
     *                 a filename extension).
     *
     * @return File representing the JAR file which will be written.
     */</comment>
    <function><type><name>File</name></type> <name>getVendorOutputJarFile</name><parameter_list>(<param><decl><type><name>String</name></type> <name>baseName</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>jarFile</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getDestDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>baseName</name> + <name>jarSuffix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"JAR file name: " + <call><name><name>jarFile</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>jarFile</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * The iAS ejbc utility doesn't require the Public ID of the descriptor's
     * DTD for it to process correctly--this method always returns &lt;code&gt;null
     * &lt;/code&gt;.
     *
     * @return &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>getPublicId</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>null</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Determines the name of the iAS-specific EJB descriptor using the
     * specified standard EJB descriptor name.  In general, the standard
     * descriptor will be named "[basename]-ejb-jar.xml", and this method will
     * return "[basename]-ias-ejb-jar.xml".
     *
     * @return The name of the iAS-specific EJB descriptor file.
     */</comment>
    <function><type><specifier>private</specifier> <name>String</name></type> <name>getIasDescriptorName</name><parameter_list>()</parameter_list> <block>{

        <comment type="block">/* Only calculate the descriptor name once */</comment>
        <if>if <condition>(<expr><name>iasDescriptorName</name> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>iasDescriptorName</name></expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>String</name></type> <name>path</name> =<init> <expr>""</expr></init></decl>;</decl_stmt>   <comment type="line">// Directory path of the EJB descriptor</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>basename</name></decl>;</decl_stmt>    <comment type="line">// Filename appearing before name terminator</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>remainder</name></decl>;</decl_stmt>   <comment type="line">// Filename appearing after the name terminator</comment>

        <comment type="block">/* Find the end of the standard descriptor's relative path */</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>startOfFileName</name> =<init> <expr><call><name><name>descriptorName</name>.<name>lastIndexOf</name></name><argument_list>(<argument><expr><name><name>File</name>.<name>separatorChar</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>startOfFileName</name> != -1</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>path</name> = <call><name><name>descriptorName</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>startOfFileName</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="block">/* Check to see if the standard name is used (there's no basename) */</comment>
        <if>if <condition>(<expr><call><name><name>descriptorName</name>.<name>substring</name></name><argument_list>(<argument><expr><name>startOfFileName</name> + 1</expr></argument>)</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><name>EJB_DD</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>basename</name> = ""</expr>;</expr_stmt>
            <expr_stmt><expr><name>remainder</name> = <name>EJB_DD</name></expr>;</expr_stmt>

        }</block></then> <else>else <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>endOfBaseName</name> =<init> <expr><call><name><name>descriptorName</name>.<name>indexOf</name></name><argument_list>(
                                                <argument><expr><call><name>getConfig</name><argument_list>()</argument_list></call>.<name>baseNameTerminator</name></expr></argument>,
                                                <argument><expr><name>startOfFileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="block">/*
             * Check for the odd case where the terminator and/or filename
             * extension aren't found.  These will ensure "ias-" appears at the
             * end of the name and before the '.' (if present).
             */</comment>
            <if>if <condition>(<expr><name>endOfBaseName</name> &lt; 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>endOfBaseName</name> = <call><name><name>descriptorName</name>.<name>lastIndexOf</name></name><argument_list>(<argument><expr>'.'</expr></argument>)</argument_list></call> - 1</expr>;</expr_stmt>
                <if>if <condition>(<expr><name>endOfBaseName</name> &lt; 0</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>endOfBaseName</name> = <call><name><name>descriptorName</name>.<name>length</name></name><argument_list>()</argument_list></call> - 1</expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>

            <expr_stmt><expr><name>basename</name> = <call><name><name>descriptorName</name>.<name>substring</name></name><argument_list>(<argument><expr><name>startOfFileName</name> + 1</expr></argument>,
                                                <argument><expr><name>endOfBaseName</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>remainder</name> = <call><name><name>descriptorName</name>.<name>substring</name></name><argument_list>(<argument><expr><name>endOfBaseName</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <expr_stmt><expr><name>iasDescriptorName</name> = <name>path</name> + <name>basename</name> + "ias-" + <name>remainder</name></expr>;</expr_stmt>
        <return>return <expr><name>iasDescriptorName</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
