<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\taskdefs\ZipTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>zip</name>.<name>ZipEntry</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>zip</name>.<name>ZipException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>zip</name>.<name>ZipFile</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildFileTest</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>zip</name>.<name>UnixStat</name></name>;</import>

<comment type="javadoc">/**
 */</comment>
<class><specifier>public</specifier> class <name>ZipTest</name> <super><extends>extends <name>BuildFileTest</name></extends></super> <block>{
    <comment type="line">//instance variable to allow cleanup</comment>
    <decl_stmt><decl><type><name>ZipFile</name></type> <name>zfPrefixAddsDir</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <constructor><specifier>public</specifier> <name>ZipTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr>"src/etc/testcases/taskdefs/zip.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>test1</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildException</name><argument_list>(<argument><expr>"test1"</expr></argument>, <argument><expr>"required argument not specified"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>test2</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildException</name><argument_list>(<argument><expr>"test2"</expr></argument>, <argument><expr>"required argument not specified"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>test3</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildException</name><argument_list>(<argument><expr>"test3"</expr></argument>, <argument><expr>"zip cannot include itself"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">//    public void test4() {</comment>
    <comment type="line">//        expectBuildException("test4", "zip cannot include itself");</comment>
    <comment type="line">//    }</comment>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>()</parameter_list> <block>{
        <try>try <block>{
            <if>if <condition>( <expr><name>zfPrefixAddsDir</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>zfPrefixAddsDir</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
            <comment type="line">//ignored</comment>
        }</block></catch></try>
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"cleanup"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>test5</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"test5"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>test6</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"test6"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>test7</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"test7"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>test8</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"test8"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testZipgroupfileset</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testZipgroupfileset"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ZipFile</name></type> <name>zipFile</name> =<init> <expr>new <call><name>ZipFile</name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProjectDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"zipgroupfileset.zip"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>zipFile</name>.<name>getEntry</name></name><argument_list>(<argument><expr>"ant.xml"</expr></argument>)</argument_list></call> != <name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>zipFile</name>.<name>getEntry</name></name><argument_list>(<argument><expr>"optional/jspc.xml"</expr></argument>)</argument_list></call> != <name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>zipFile</name>.<name>getEntry</name></name><argument_list>(<argument><expr>"zip/zipgroupfileset3.zip"</expr></argument>)</argument_list></call> != <name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>zipFile</name>.<name>getEntry</name></name><argument_list>(<argument><expr>"test6.mf"</expr></argument>)</argument_list></call> == <name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>zipFile</name>.<name>getEntry</name></name><argument_list>(<argument><expr>"test7.mf"</expr></argument>)</argument_list></call> == <name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>zipFile</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testUpdateNotNecessary</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testUpdateNotNecessary"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>-1</expr></argument>, <argument><expr><call><name>getLog</name><argument_list>()</argument_list></call>.<call><name>indexOf</name><argument_list>(<argument><expr>"Updating"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testUpdateIsNecessary</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectLogContaining</name><argument_list>(<argument><expr>"testUpdateIsNecessary"</expr></argument>, <argument><expr>"Updating"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// Bugzilla Report 18403</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testPrefixAddsDir</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testPrefixAddsDir"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>archive</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>resolveFile</name><argument_list>(<argument><expr>"test3.zip"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>zfPrefixAddsDir</name> = new <call><name>ZipFile</name><argument_list>(<argument><expr><name>archive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ZipEntry</name></type> <name>ze</name> =<init> <expr><call><name><name>zfPrefixAddsDir</name>.<name>getEntry</name></name><argument_list>(<argument><expr>"test/"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr>"test/ has been added"</expr></argument>, <argument><expr><name>ze</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <comment type="line">// Bugzilla Report 19449</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFilesOnlyDoesntCauseRecreate</name><parameter_list>()</parameter_list>
        <throws>throws <argument><expr><name>InterruptedException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testFilesOnlyDoesntCauseRecreateSetup"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>l</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>resolveFile</name><argument_list>(<argument><expr>"test3.zip"</expr></argument>)</argument_list></call>.<call><name>lastModified</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Thread</name>.<name>sleep</name></name><argument_list>(<argument><expr>3000</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testFilesOnlyDoesntCauseRecreate"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>resolveFile</name><argument_list>(<argument><expr>"test3.zip"</expr></argument>)</argument_list></call>.<call><name>lastModified</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// Bugzilla Report 22865</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testEmptySkip</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testEmptySkip"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <comment type="line">// Bugzilla Report 30365</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testZipEmptyDir</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"zipEmptyDir"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <comment type="line">// Bugzilla Report 40258</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testZipEmptyDirFilesOnly</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"zipEmptyDirFilesOnly"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testZipEmptyCreate</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectLogContaining</name><argument_list>(<argument><expr>"zipEmptyCreate"</expr></argument>, <argument><expr>"Note: creating empty"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <comment type="line">// Bugzilla Report 25513</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testCompressionLevel</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testCompressionLevel"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// Bugzilla Report 33412</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testDefaultExcludesAndUpdate</name><parameter_list>()</parameter_list> 
        <throws>throws <argument><expr><name>ZipException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testDefaultExcludesAndUpdate"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ZipFile</name></type> <name>f</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>f</name> = new <call><name>ZipFile</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>resolveFile</name><argument_list>(<argument><expr>"test3.zip"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr>"ziptest~ should be included"</expr></argument>,
                          <argument><expr><call><name><name>f</name>.<name>getEntry</name></name><argument_list>(<argument><expr>"ziptest~"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
            <if>if <condition>(<expr><name>f</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>f</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></finally></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFileResource</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testFileResource"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNonFileResource</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testNonFileResource"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testTarFileSet</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testTarFileSet"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>zip</name>.<name>ZipFile</name></name></type> <name>zf</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>zf</name> = new <call><name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>zip</name>.<name>ZipFile</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>
                                                  .<call><name>resolveFile</name><argument_list>(<argument><expr>"test3.zip"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>zip</name>.<name>ZipEntry</name></name></type> <name>ze</name> =<init> <expr><call><name><name>zf</name>.<name>getEntry</name></name><argument_list>(<argument><expr>"asf-logo.gif"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>UnixStat</name>.<name>FILE_FLAG</name></name> | 0446</expr></argument>, <argument><expr><call><name><name>ze</name>.<name>getUnixMode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
            <if>if <condition>(<expr><name>zf</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>zf</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></finally></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testRewriteZeroPermissions</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"rewriteZeroPermissions"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>zip</name>.<name>ZipFile</name></name></type> <name>zf</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>zf</name> = new <call><name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>zip</name>.<name>ZipFile</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>
                                                  .<call><name>resolveFile</name><argument_list>(<argument><expr>"test3.zip"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>zip</name>.<name>ZipEntry</name></name></type> <name>ze</name> =<init> <expr><call><name><name>zf</name>.<name>getEntry</name></name><argument_list>(<argument><expr>"testdir/test.txt"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>UnixStat</name>.<name>FILE_FLAG</name></name> | 0644</expr></argument>, <argument><expr><call><name><name>ze</name>.<name>getUnixMode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
            <if>if <condition>(<expr><name>zf</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>zf</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></finally></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testAcceptZeroPermissions</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"acceptZeroPermissions"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>zip</name>.<name>ZipFile</name></name></type> <name>zf</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>zf</name> = new <call><name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>zip</name>.<name>ZipFile</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>
                                                  .<call><name>resolveFile</name><argument_list>(<argument><expr>"test3.zip"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>zip</name>.<name>ZipEntry</name></name></type> <name>ze</name> =<init> <expr><call><name><name>zf</name>.<name>getEntry</name></name><argument_list>(<argument><expr>"testdir/test.txt"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>0000</expr></argument>, <argument><expr><call><name><name>ze</name>.<name>getUnixMode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
            <if>if <condition>(<expr><name>zf</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>zf</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></finally></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testForBugzilla34764</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testForBugzilla34764"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>zip</name>.<name>ZipFile</name></name></type> <name>zf</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>zf</name> = new <call><name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>zip</name>.<name>ZipFile</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>
                                                  .<call><name>resolveFile</name><argument_list>(<argument><expr>"test3.zip"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>zip</name>.<name>ZipEntry</name></name></type> <name>ze</name> =<init> <expr><call><name><name>zf</name>.<name>getEntry</name></name><argument_list>(<argument><expr>"file1"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>UnixStat</name>.<name>FILE_FLAG</name></name> | 0644</expr></argument>, <argument><expr><call><name><name>ze</name>.<name>getUnixMode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
            <if>if <condition>(<expr><name>zf</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>zf</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></finally></try>
    }</block></function>

}</block></class>
</unit>
