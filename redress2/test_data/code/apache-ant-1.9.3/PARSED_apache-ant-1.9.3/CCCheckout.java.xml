<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\clearcase\CCCheckout.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>clearcase</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>Execute</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Commandline</name></name>;</import>


<comment type="javadoc">/**
 * Performs ClearCase checkout.
 *
 * &lt;p&gt;
 * The following attributes are interpreted:
 * &lt;table border="1"&gt;
 *   &lt;tr&gt;
 *     &lt;th&gt;Attribute&lt;/th&gt;
 *     &lt;th&gt;Values&lt;/th&gt;
 *     &lt;th&gt;Required&lt;/th&gt;
 *   &lt;/tr&gt;
 *   &lt;tr&gt;
 *      &lt;td&gt;viewpath&lt;/td&gt;
 *      &lt;td&gt;Path to the ClearCase view file or directory that the command will operate on&lt;/td&gt;
 *      &lt;td&gt;No&lt;/td&gt;
 *   &lt;tr&gt;
 *   &lt;tr&gt;
 *      &lt;td&gt;reserved&lt;/td&gt;
 *      &lt;td&gt;Specifies whether to check out the file as reserved or not&lt;/td&gt;
 *      &lt;td&gt;Yes&lt;/td&gt;
 *   &lt;tr&gt;
 *   &lt;tr&gt;
 *      &lt;td&gt;out&lt;/td&gt;
 *      &lt;td&gt;Creates a writable file under a different filename&lt;/td&gt;
 *      &lt;td&gt;No&lt;/td&gt;
 *   &lt;tr&gt;
 *   &lt;tr&gt;
 *      &lt;td&gt;nodata&lt;/td&gt;
 *      &lt;td&gt;Checks out the file but does not create an editable file containing its data&lt;/td&gt;
 *      &lt;td&gt;No&lt;/td&gt;
 *   &lt;tr&gt;
 *   &lt;tr&gt;
 *      &lt;td&gt;branch&lt;/td&gt;
 *      &lt;td&gt;Specify a branch to check out the file to&lt;/td&gt;
 *      &lt;td&gt;No&lt;/td&gt;
 *   &lt;tr&gt;
 *   &lt;tr&gt;
 *      &lt;td&gt;version&lt;/td&gt;
 *      &lt;td&gt;Allows checkout of a version other than main latest&lt;/td&gt;
 *      &lt;td&gt;No&lt;/td&gt;
 *   &lt;tr&gt;
 *   &lt;tr&gt;
 *      &lt;td&gt;nowarn&lt;/td&gt;
 *      &lt;td&gt;Suppress warning messages&lt;/td&gt;
 *      &lt;td&gt;No&lt;/td&gt;
 *   &lt;tr&gt;
 *   &lt;tr&gt;
 *      &lt;td&gt;comment&lt;/td&gt;
 *      &lt;td&gt;Specify a comment. Only one of comment or cfile may be used.&lt;/td&gt;
 *      &lt;td&gt;No&lt;/td&gt;
 *   &lt;tr&gt;
 *   &lt;tr&gt;
 *      &lt;td&gt;commentfile&lt;/td&gt;
 *      &lt;td&gt;Specify a file containing a comment. Only one of comment or cfile may be used.&lt;/td&gt;
 *      &lt;td&gt;No&lt;/td&gt;
 *   &lt;tr&gt;
 *   &lt;tr&gt;
 *      &lt;td&gt;notco&lt;/td&gt;
 *      &lt;td&gt;Fail if it's already checked out to the current view. Set to false to ignore it.&lt;/td&gt;
 *      &lt;td&gt;No&lt;/td&gt;
 *   &lt;tr&gt;
 *   &lt;tr&gt;
 *      &lt;td&gt;failonerr&lt;/td&gt;
 *      &lt;td&gt;Throw an exception if the command fails. Default is true&lt;/td&gt;
 *      &lt;td&gt;No&lt;/td&gt;
 *   &lt;tr&gt;
 * &lt;/table&gt;
 *
 */</comment>
<class><specifier>public</specifier> class <name>CCCheckout</name> <super><extends>extends <name>ClearCase</name></extends></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>mReserved</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>mOut</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>mNdata</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>mBranch</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>mVersion</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>mNwarn</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>mComment</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>mCfile</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>mNotco</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Executes the task.
     * &lt;p&gt;
     * Builds a command line to execute cleartool and then calls Exec's run method
     * to execute the command line.
     * @throws BuildException if the command fails and failonerr is set to true
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>Commandline</name></type> <name>commandLine</name> =<init> <expr>new <call><name>Commandline</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Project</name></type> <name>aProj</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

        <comment type="line">// Default the viewpath to basedir if it is not specified</comment>
        <if>if <condition>(<expr><call><name>getViewPath</name><argument_list>()</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>setViewPath</name><argument_list>(<argument><expr><call><name><name>aProj</name>.<name>getBaseDir</name></name><argument_list>()</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// build the command line from what we got the format is</comment>
        <comment type="line">// cleartool checkout [options...] [viewpath ...]</comment>
        <comment type="line">// as specified in the CLEARTOOL.EXE help</comment>
        <expr_stmt><expr><call><name><name>commandLine</name>.<name>setExecutable</name></name><argument_list>(<argument><expr><call><name>getClearToolCommand</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>commandLine</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>COMMAND_CHECKOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>checkOptions</name><argument_list>(<argument><expr><name>commandLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/*
         * If configured to not care about whether the element is
         * already checked out to the current view.
         * Then check to see if it is checked out.
         */</comment>
        <if>if <condition>(<expr>!<call><name>getNotco</name><argument_list>()</argument_list></call> &amp;&amp; <call><name>lsCheckout</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>log</name><argument_list>(<argument><expr>"Already checked out in this view: "
                    + <call><name>getViewPathBasename</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name>getFailOnErr</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>log</name><argument_list>(<argument><expr>"Ignoring any errors that occur for: "
                    + <call><name>getViewPathBasename</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>result</name> = <call><name>run</name><argument_list>(<argument><expr><name>commandLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>Execute</name>.<name>isFailure</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>getFailOnErr</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>msg</name> =<init> <expr>"Failed executing: " + <call><name><name>commandLine</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Check to see if the element is checked out in the current view.
     */</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>lsCheckout</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Commandline</name></type> <name>cmdl</name> =<init> <expr>new <call><name>Commandline</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>result</name></decl>;</decl_stmt>

        <comment type="line">// build the command line from what we got the format is</comment>
        <comment type="line">// cleartool lsco [options...] [viewpath ...]</comment>
        <comment type="line">// as specified in the CLEARTOOL.EXE help</comment>
        <expr_stmt><expr><call><name><name>cmdl</name>.<name>setExecutable</name></name><argument_list>(<argument><expr><call><name>getClearToolCommand</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cmdl</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>COMMAND_LSCO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cmdl</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-cview"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cmdl</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-short"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cmdl</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-d"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// viewpath</comment>
        <expr_stmt><expr><call><name><name>cmdl</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name>getViewPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>result</name> = <call><name>runS</name><argument_list>(<argument><expr><name>cmdl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// System.out.println( "lsCheckout: " + result );</comment>

        <return>return <expr>(<name>result</name> != <name>null</name> &amp;&amp; <call><name><name>result</name>.<name>length</name></name><argument_list>()</argument_list></call> &gt; 0) ? true : false</expr>;</return>
    }</block></function>
    <comment type="javadoc">/**
     * Check the command line options.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>checkOptions</name><parameter_list>(<param><decl><type><name>Commandline</name></type> <name>cmd</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// ClearCase items</comment>
        <if>if <condition>(<expr><call><name>getReserved</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">// -reserved</comment>
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>FLAG_RESERVED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <comment type="line">// -unreserved</comment>
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>FLAG_UNRESERVED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <if>if <condition>(<expr><call><name>getOut</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <comment type="line">// -out</comment>
            <expr_stmt><expr><call><name>getOutCommand</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <if>if <condition>(<expr><call><name>getNoData</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <comment type="line">// -ndata</comment>
                <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>FLAG_NODATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

        }</block></else></if>

        <if>if <condition>(<expr><call><name>getBranch</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <comment type="line">// -branch</comment>
            <expr_stmt><expr><call><name>getBranchCommand</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <if>if <condition>(<expr><call><name>getVersion</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <comment type="line">// -version</comment>
                <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>FLAG_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

        }</block></else></if>

        <if>if <condition>(<expr><call><name>getNoWarn</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">// -nwarn</comment>
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>FLAG_NOWARN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><call><name>getComment</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <comment type="line">// -c</comment>
            <expr_stmt><expr><call><name>getCommentCommand</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <if>if <condition>(<expr><call><name>getCommentFile</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                <comment type="line">// -cfile</comment>
                <expr_stmt><expr><call><name>getCommentFileCommand</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>FLAG_NOCOMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></else></if>

        <comment type="line">// viewpath</comment>
        <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name>getViewPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Print out info about the notco option</comment>
        <comment type="line">// System.out.println( "Notco: " + (getNotco() ? "yes" : "no") );</comment>
    }</block></function>

    <comment type="javadoc">/**
     * If true, checks out the file as reserved.
     *
     * @param reserved the status to set the flag to
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setReserved</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>reserved</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>mReserved</name> = <name>reserved</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get reserved flag status
     *
     * @return boolean containing status of reserved flag
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getReserved</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>mReserved</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * If true, checkout fails if the element is already checked out to the current view.
     *
     * @param notco the status to set the flag to
     * @since ant 1.6.1
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setNotco</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>notco</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>mNotco</name> = <name>notco</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get notco flag status
     *
     * @return boolean containing status of notco flag
     * @since ant 1.6.1
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getNotco</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>mNotco</name></expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     * Creates a writable file under a different filename.
     *
     * @param outf the path to the out file
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOut</name><parameter_list>(<param><decl><type><name>String</name></type> <name>outf</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>mOut</name> = <name>outf</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get out file
     *
     * @return String containing the path to the out file
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getOut</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>mOut</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * If true, checks out the file but does not create an
     * editable file containing its data.
     *
     * @param ndata the status to set the flag to
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setNoData</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>ndata</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>mNdata</name> = <name>ndata</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get nodata flag status
     *
     * @return boolean containing status of ndata flag
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getNoData</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>mNdata</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Specify a branch to check out the file to.
     *
     * @param branch the name of the branch
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBranch</name><parameter_list>(<param><decl><type><name>String</name></type> <name>branch</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>mBranch</name> = <name>branch</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get branch name
     *
     * @return String containing the name of the branch
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getBranch</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>mBranch</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * If true, allows checkout of a version other than main latest.
     *
     * @param version the status to set the flag to
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setVersion</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>version</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>mVersion</name> = <name>version</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get version flag status
     *
     * @return boolean containing status of version flag
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getVersion</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>mVersion</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * If true, warning messages are suppressed.
     *
     * @param nwarn the status to set the flag to
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setNoWarn</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>nwarn</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>mNwarn</name> = <name>nwarn</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get nowarn flag status
     *
     * @return boolean containing status of nwarn flag
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getNoWarn</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>mNwarn</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the comment string.
     *
     * @param comment the comment string
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setComment</name><parameter_list>(<param><decl><type><name>String</name></type> <name>comment</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>mComment</name> = <name>comment</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get comment string
     *
     * @return String containing the comment
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getComment</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>mComment</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Specifies a file containing a comment.
     *
     * @param cfile the path to the comment file
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCommentFile</name><parameter_list>(<param><decl><type><name>String</name></type> <name>cfile</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>mCfile</name> = <name>cfile</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get comment file
     *
     * @return String containing the path to the comment file
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getCommentFile</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>mCfile</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the 'out' command
     *
     * @param cmd containing the command line string with or
     *                    without the out flag and path appended
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>getOutCommand</name><parameter_list>(<param><decl><type><name>Commandline</name></type> <name>cmd</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>getOut</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <comment type="block">/* Had to make two separate commands here because if a space is
               inserted between the flag and the value, it is treated as a
               Windows filename with a space and it is enclosed in double
               quotes ("). This breaks clearcase.
            */</comment>
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>FLAG_OUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name>getOut</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Get the 'branch' command
     *
     * @param cmd containing the command line string with or
                          without the branch flag and name appended
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>getBranchCommand</name><parameter_list>(<param><decl><type><name>Commandline</name></type> <name>cmd</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>getBranch</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <comment type="block">/* Had to make two separate commands here because if a space is
               inserted between the flag and the value, it is treated as a
               Windows filename with a space and it is enclosed in double
               quotes ("). This breaks clearcase.
            */</comment>
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>FLAG_BRANCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name>getBranch</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>


    <comment type="javadoc">/**
     * Get the 'comment' command
     *
     * @param cmd containing the command line string with or
     *                    without the comment flag and string appended
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>getCommentCommand</name><parameter_list>(<param><decl><type><name>Commandline</name></type> <name>cmd</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>getComment</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <comment type="block">/* Had to make two separate commands here because if a space is
               inserted between the flag and the value, it is treated as a
               Windows filename with a space and it is enclosed in double
               quotes ("). This breaks clearcase.
            */</comment>
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>FLAG_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name>getComment</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Get the 'cfile' command
     *
     * @param cmd containing the command line string with or
     *                    without the cfile flag and file appended
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>getCommentFileCommand</name><parameter_list>(<param><decl><type><name>Commandline</name></type> <name>cmd</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>getCommentFile</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <comment type="block">/* Had to make two separate commands here because if a space is
               inserted between the flag and the value, it is treated as a
               Windows filename with a space and it is enclosed in double
               quotes ("). This breaks clearcase.
            */</comment>
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>FLAG_COMMENTFILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name>getCommentFile</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

        <comment type="javadoc">/**
     *  -reserved flag -- check out the file as reserved
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FLAG_RESERVED</name> =<init> <expr>"-reserved"</expr></init></decl>;</decl_stmt>
        <comment type="javadoc">/**
     *  -reserved flag -- check out the file as unreserved
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FLAG_UNRESERVED</name> =<init> <expr>"-unreserved"</expr></init></decl>;</decl_stmt>
        <comment type="javadoc">/**
     * -out flag -- create a writable file under a different filename
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FLAG_OUT</name> =<init> <expr>"-out"</expr></init></decl>;</decl_stmt>
        <comment type="javadoc">/**
     * -ndata flag -- checks out the file but does not create an editable file containing its data
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FLAG_NODATA</name> =<init> <expr>"-ndata"</expr></init></decl>;</decl_stmt>
        <comment type="javadoc">/**
     * -branch flag -- checks out the file on a specified branch
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FLAG_BRANCH</name> =<init> <expr>"-branch"</expr></init></decl>;</decl_stmt>
        <comment type="javadoc">/**
     * -version flag -- allows checkout of a version that is not main latest
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FLAG_VERSION</name> =<init> <expr>"-version"</expr></init></decl>;</decl_stmt>
        <comment type="javadoc">/**
     * -nwarn flag -- suppresses warning messages
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FLAG_NOWARN</name> =<init> <expr>"-nwarn"</expr></init></decl>;</decl_stmt>
        <comment type="javadoc">/**
     * -c flag -- comment to attach to the file
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FLAG_COMMENT</name> =<init> <expr>"-c"</expr></init></decl>;</decl_stmt>
        <comment type="javadoc">/**
     * -cfile flag -- file containing a comment to attach to the file
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FLAG_COMMENTFILE</name> =<init> <expr>"-cfile"</expr></init></decl>;</decl_stmt>
        <comment type="javadoc">/**
     * -nc flag -- no comment is specified
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FLAG_NOCOMMENT</name> =<init> <expr>"-nc"</expr></init></decl>;</decl_stmt>

}</block></class>

</unit>
