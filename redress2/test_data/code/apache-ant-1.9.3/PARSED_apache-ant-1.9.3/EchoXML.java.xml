<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\EchoXML.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>OutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileOutputStream</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>EnumeratedAttribute</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>XMLFragment</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>DOMElementWriter</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>

<import>import <name><name>org</name>.<name>w3c</name>.<name>dom</name>.<name>Node</name></name>;</import>
<import>import <name><name>org</name>.<name>w3c</name>.<name>dom</name>.<name>Element</name></name>;</import>

<comment type="javadoc">/**
 * Echo XML.
 *
 * Known limitations:
 * &lt;ol&gt;
 * &lt;li&gt;Processing Instructions get ignored&lt;/li&gt;
 * &lt;li&gt;Encoding is always UTF-8&lt;/li&gt;
 * &lt;/ol&gt;
 *
 * @since Ant 1.7
 */</comment>
<class><specifier>public</specifier> class <name>EchoXML</name> <super><extends>extends <name>XMLFragment</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>file</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>append</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>NamespacePolicy</name></type> <name>namespacePolicy</name> =<init> <expr><name><name>NamespacePolicy</name>.<name>DEFAULT</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ERROR_NO_XML</name> =<init> <expr>"No nested XML specified"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Set the output file.
     * @param f the output file.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>f</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>file</name> = <name>f</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the namespace policy for the xml file
     * @param n namespace policy: "ignore," "elementsOnly," or "all"
     * @see
     * org.apache.tools.ant.util.DOMElementWriter.XmlNamespacePolicy
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setNamespacePolicy</name><parameter_list>(<param><decl><type><name>NamespacePolicy</name></type> <name>n</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>namespacePolicy</name> = <name>n</name></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Set whether to append the output file.
     * @param b boolean append flag.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAppend</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>append</name> = <name>b</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Execute the task.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>DOMElementWriter</name></type> <name>writer</name> =<init>
            <expr>new <call><name>DOMElementWriter</name><argument_list>(<argument><expr>!<name>append</name></expr></argument>, <argument><expr><call><name><name>namespacePolicy</name>.<name>getPolicy</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>OutputStream</name></type> <name>os</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <if>if <condition>(<expr><name>file</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>os</name> = new <call><name>FileOutputStream</name><argument_list>(<argument><expr><call><name><name>file</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>append</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>os</name> = new <call><name>LogOutputStream</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <decl_stmt><decl><type><name>Node</name></type> <name>n</name> =<init> <expr><call><name>getFragment</name><argument_list>()</argument_list></call>.<call><name>getFirstChild</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>n</name> == <name>null</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>ERROR_NO_XML</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>writer</name>.<name>write</name></name><argument_list>(<argument><expr>(<name>Element</name>) <name>n</name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr><name>e</name></expr>;</throw>
        }</block></catch> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>NamespacePolicy</name> <super><extends>extends <name>EnumeratedAttribute</name></extends></super> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>IGNORE</name> =<init> <expr>"ignore"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ELEMENTS</name> =<init> <expr>"elementsOnly"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ALL</name> =<init> <expr>"all"</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>NamespacePolicy</name></type> <name>DEFAULT</name>
            =<init> <expr>new <call><name>NamespacePolicy</name><argument_list>(<argument><expr><name>IGNORE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>NamespacePolicy</name><parameter_list>()</parameter_list> <block>{}</block></constructor>

        <constructor><specifier>public</specifier> <name>NamespacePolicy</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>setValue</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>
        <comment type="javadoc">/** {@inheritDoc}. */</comment>
        <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getValues</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr>new <name><name>String</name><index>[]</index></name> <block>{<expr><name>IGNORE</name></expr>, <expr><name>ELEMENTS</name></expr>, <expr><name>ALL</name></expr>}</block></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name><name>DOMElementWriter</name>.<name>XmlNamespacePolicy</name></name></type> <name>getPolicy</name><parameter_list>()</parameter_list> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>s</name> =<init> <expr><call><name>getValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>IGNORE</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><name><name>DOMElementWriter</name>.<name>XmlNamespacePolicy</name>.<name>IGNORE</name></name></expr>;</return>
            }</block></then> <else>else <if>if <condition>(<expr><call><name><name>ELEMENTS</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return
                    <expr><name><name>DOMElementWriter</name>.<name>XmlNamespacePolicy</name>.<name>ONLY_QUALIFY_ELEMENTS</name></name></expr>;</return>
            }</block></then> <else>else <if>if <condition>(<expr><call><name><name>ALL</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><name><name>DOMElementWriter</name>.<name>XmlNamespacePolicy</name>.<name>QUALIFY_ALL</name></name></expr>;</return>
            }</block></then> <else>else <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Invalid namespace policy: " + <name>s</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></else></if></else></if></else></if>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
