<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\types\resources\LazyResourceCollectionWrapper.java"><package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>NoSuchElementException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Resource</name></name>;</import>

<comment type="javadoc">/**
 * Resource collection which load underlying resource collection only on demand
 * with support for caching
 */</comment>
<class><specifier>public</specifier> class <name>LazyResourceCollectionWrapper</name> <super><extends>extends
        <name>AbstractResourceCollectionWrapper</name></extends></super> <block>{

    <comment type="javadoc">/** List of cached resources */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list>&lt;<argument><name>Resource</name></argument>&gt;</argument_list></name></type> <name>cachedResources</name> =<init> <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>Resource</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>FilteringIterator</name></type> <name>filteringIterator</name></decl>;</decl_stmt>

    <function><type><specifier>protected</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name>Resource</name></argument>&gt;</argument_list></name></type> <name>createIterator</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>Iterator</name><argument_list>&lt;<argument><name>Resource</name></argument>&gt;</argument_list></name></type> <name>iterator</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>isCache</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>filteringIterator</name> == <name>null</name></expr>)</condition><then> <block>{
                <comment type="line">// no worry of thread safety here, see function's contract</comment>
                <expr_stmt><expr><name>filteringIterator</name> = new <call><name>FilteringIterator</name><argument_list>(
                        <argument><expr><call><name>getResourceCollection</name><argument_list>()</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>iterator</name> = new <call><name>CachedIterator</name><argument_list>(<argument><expr><name>filteringIterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>iterator</name> = new <call><name>FilteringIterator</name><argument_list>(<argument><expr><call><name>getResourceCollection</name><argument_list>()</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><name>iterator</name></expr>;</return>
    }</block></function>

    <function><type><specifier>protected</specifier> <name>int</name></type> <name>getSize</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// to compute the size, just iterate: the iterator will take care of</comment>
        <comment type="line">// caching</comment>
        <decl_stmt><decl><type><name><name>Iterator</name><argument_list>&lt;<argument><name>Resource</name></argument>&gt;</argument_list></name></type> <name>it</name> =<init> <expr><call><name>createIterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>size</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>it</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <expr_stmt><expr><call><name><name>it</name>.<name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>size</name>++</expr>;</expr_stmt>
        }</block></while>
        <return>return <expr><name>size</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Specify if the resource should be filtered or not. This function should
     * be overrided in order to define the filtering algorithm
     * 
     * @param r resource considered for filtration
     * @return whether the resource should be filtered or not
     */</comment>
    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>filterResource</name><parameter_list>(<param><decl><type><name>Resource</name></type> <name>r</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>false</expr>;</return>
    }</block></function>

    <class><specifier>private</specifier> class <name>FilteringIterator</name> <super><implements>implements <name><name>Iterator</name><argument_list>&lt;<argument><name>Resource</name></argument>&gt;</argument_list></name></implements></super> <block>{

        <decl_stmt><decl><type><name>Resource</name></type> <name>next</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>boolean</name></type> <name>ended</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name>Resource</name></argument>&gt;</argument_list></name></type> <name>it</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>FilteringIterator</name><parameter_list>(<param><decl><type><name><name>Iterator</name><argument_list>&lt;<argument><name>Resource</name></argument>&gt;</argument_list></name></type> <name>it</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>it</name></name> = <name>it</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasNext</name><parameter_list>()</parameter_list> <block>{
            <if>if <condition>(<expr><name>ended</name></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>
            }</block></then></if>
            <while>while <condition>(<expr><name>next</name> == <name>null</name></expr>)</condition> <block>{
                <if>if <condition>(<expr>!<call><name><name>it</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>ended</name> = true</expr>;</expr_stmt>
                    <return>return <expr>false</expr>;</return>
                }</block></then></if>
                <expr_stmt><expr><name>next</name> = <call><name><name>it</name>.<name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><call><name>filterResource</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>next</name> = <name>null</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></while>
            <return>return <expr>true</expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>Resource</name></type> <name>next</name><parameter_list>()</parameter_list> <block>{
            <if>if <condition>(<expr>!<call><name>hasNext</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
            }</block></then></if>
            <decl_stmt><decl><type><name>Resource</name></type> <name>r</name> =<init> <expr><name>next</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>next</name> = <name>null</name></expr>;</expr_stmt>
            <return>return <expr><name>r</name></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>remove</name><parameter_list>()</parameter_list> <block>{
            <throw>throw <expr>new <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></function>
    }</block></class>

    <comment type="javadoc">/**
     * Iterator that will put in the shared cache array list the selected
     * resources
     */</comment>
    <class><specifier>private</specifier> class <name>CachedIterator</name> <super><implements>implements <name><name>Iterator</name><argument_list>&lt;<argument><name>Resource</name></argument>&gt;</argument_list></name></implements></super> <block>{

        <decl_stmt><decl><type><name>int</name></type> <name>cusrsor</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name>Resource</name></argument>&gt;</argument_list></name></type> <name>it</name></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * Default constructor
         * 
         * @param it
         *            the iterator which will provide the resources to put in
         *            cache
         */</comment>
        <constructor><specifier>public</specifier> <name>CachedIterator</name><parameter_list>(<param><decl><type><name><name>Iterator</name><argument_list>&lt;<argument><name>Resource</name></argument>&gt;</argument_list></name></type> <name>it</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>it</name></name> = <name>it</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasNext</name><parameter_list>()</parameter_list> <block>{
            <synchronized>synchronized (<expr><name>cachedResources</name></expr>) <block>{
                <comment type="line">// have we already cached the next entry ?</comment>
                <if>if <condition>(<expr><call><name><name>cachedResources</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; <name>cusrsor</name></expr>)</condition><then> <block>{
                    <return>return <expr>true</expr>;</return>
                }</block></then></if>
                <comment type="line">// does the wrapped iterator any more resource ?</comment>
                <if>if <condition>(<expr>!<call><name><name>it</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <return>return <expr>false</expr>;</return>
                }</block></then></if>
                <comment type="line">// put in cache the next resource</comment>
                <decl_stmt><decl><type><name>Resource</name></type> <name>r</name> =<init> <expr><call><name><name>it</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>cachedResources</name>.<name>add</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></synchronized>
            <return>return <expr>true</expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>Resource</name></type> <name>next</name><parameter_list>()</parameter_list> <block>{
            <comment type="line">// first check that we have some to deliver</comment>
            <if>if <condition>(<expr>!<call><name>hasNext</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>NoSuchElementException</name><argument_list>()</argument_list></call></expr>;</throw>
            }</block></then></if>
            <synchronized>synchronized (<expr><name>cachedResources</name></expr>) <block>{
                <comment type="line">// return the cached entry as hasNext should have put one for</comment>
                <comment type="line">// this iterator</comment>
                <return>return <expr><call><name><name>cachedResources</name>.<name>get</name></name><argument_list>(<argument><expr><name>cusrsor</name>++</expr></argument>)</argument_list></call></expr>;</return>
            }</block></synchronized>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>remove</name><parameter_list>()</parameter_list> <block>{
            <throw>throw <expr>new <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
