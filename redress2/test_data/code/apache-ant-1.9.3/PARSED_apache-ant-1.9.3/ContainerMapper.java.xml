<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\util\ContainerMapper.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collections</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Mapper</name></name>;</import>

<comment type="javadoc">/**
 * A &lt;code&gt;FileNameMapper&lt;/code&gt; that contains
 * other &lt;code&gt;FileNameMapper&lt;/code&gt;s.
 * @see FileNameMapper
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>ContainerMapper</name> <super><implements>implements <name>FileNameMapper</name></implements></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>List</name></type> <name>mappers</name> =<init> <expr>new <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Add a &lt;code&gt;Mapper&lt;/code&gt;.
     * @param mapper the &lt;code&gt;Mapper&lt;/code&gt; to add.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addConfiguredMapper</name><parameter_list>(<param><decl><type><name>Mapper</name></type> <name>mapper</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><call><name><name>mapper</name>.<name>getImplementation</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * An add configured version of the add method.
     * This class used to contain an add method and an
     * addConfiguredMapper method. Dur to ordering,
     * the add method was always called first. This
     * addConfigured method has been added to allow
     * chaining to work correctly.
     * @param fileNameMapper a &lt;code&gt;FileNameMapper&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addConfigured</name><parameter_list>(<param><decl><type><name>FileNameMapper</name></type> <name>fileNameMapper</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>fileNameMapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a &lt;code&gt;FileNameMapper&lt;/code&gt;.
     * @param fileNameMapper a &lt;code&gt;FileNameMapper&lt;/code&gt;.
     * @throws IllegalArgumentException if attempting to add this
     *         &lt;code&gt;ContainerMapper&lt;/code&gt; to itself, or if the specified
     *         &lt;code&gt;FileNameMapper&lt;/code&gt; is itself a &lt;code&gt;ContainerMapper&lt;/code&gt;
     *         that contains this &lt;code&gt;ContainerMapper&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>FileNameMapper</name></type> <name>fileNameMapper</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>this</name> == <name>fileNameMapper</name>
            || (<name>fileNameMapper</name> <name>instanceof</name> <name>ContainerMapper</name>
            &amp;&amp; ((<name>ContainerMapper</name>) <name>fileNameMapper</name>).<call><name>contains</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(
                <argument><expr>"Circular mapper containment condition detected"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>mappers</name>.<name>add</name></name><argument_list>(<argument><expr><name>fileNameMapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Return &lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;ContainerMapper&lt;/code&gt; or any of
     * its sub-elements contains the specified &lt;code&gt;FileNameMapper&lt;/code&gt;.
     * @param fileNameMapper   the &lt;code&gt;FileNameMapper&lt;/code&gt; to search for.
     * @return &lt;code&gt;boolean&lt;/code&gt;.
     */</comment>
    <function><type><specifier>protected</specifier> <specifier>synchronized</specifier> <name>boolean</name></type> <name>contains</name><parameter_list>(<param><decl><type><name>FileNameMapper</name></type> <name>fileNameMapper</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>foundit</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>Iterator</name></type> <name>iter</name> =<init> <expr><call><name><name>mappers</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>iter</name>.<name>hasNext</name></name><argument_list>()</argument_list></call> &amp;&amp; !<name>foundit</name></expr>;</condition><incr/>) <block>{
            <decl_stmt><decl><type><name>FileNameMapper</name></type> <name>next</name> =<init> <expr><call>(<name>FileNameMapper</name>) <argument_list>(<argument><expr><call><name><name>iter</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>foundit</name> = (<name>next</name> == <name>fileNameMapper</name>
                || (<name>next</name> <name>instanceof</name> <name>ContainerMapper</name>
                &amp;&amp; ((<name>ContainerMapper</name>) <name>next</name>).<call><name>contains</name><argument_list>(<argument><expr><name>fileNameMapper</name></expr></argument>)</argument_list></call>))</expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>foundit</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the &lt;code&gt;List&lt;/code&gt; of &lt;code&gt;FileNameMapper&lt;/code&gt;s.
     * @return &lt;code&gt;List&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>List</name></type> <name>getMappers</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>Collections</name>.<name>unmodifiableList</name></name><argument_list>(<argument><expr><name>mappers</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Empty implementation.
     * @param ignore ignored.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFrom</name><parameter_list>(<param><decl><type><name>String</name></type> <name>ignore</name></decl></param>)</parameter_list> <block>{
        <comment type="line">//Empty</comment>
    }</block></function>

    <comment type="javadoc">/**
     * Empty implementation.
     * @param ignore ignored.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTo</name><parameter_list>(<param><decl><type><name>String</name></type> <name>ignore</name></decl></param>)</parameter_list> <block>{
        <comment type="line">//Empty</comment>
    }</block></function>

}</block></class>

</unit>
