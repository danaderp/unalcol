<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\helper\SingleCheckExecutor.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>helper</name></name>;</package>


<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Executor</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>


<comment type="javadoc">/**
 * "Single-check" Target executor implementation.
 * Differs from {@link DefaultExecutor} in that the dependencies for all
 * targets are computed together, so that shared dependencies are run just once.
 * @since Ant 1.6.3
 */</comment>
<class><specifier>public</specifier> class <name>SingleCheckExecutor</name> <super><implements>implements <name>Executor</name></implements></super> <block>{

    <comment type="javadoc">/** {@inheritDoc}. */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>executeTargets</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>, <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>targetNames</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
            <expr_stmt><expr><call><name><name>project</name>.<name>executeSortedTargets</name></name><argument_list>(
                <argument><expr><call><name><name>project</name>.<name>topoSort</name></name><argument_list>(<argument><expr><name>targetNames</name></expr></argument>, <argument><expr><call><name><name>project</name>.<name>getTargets</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/** {@inheritDoc}. */</comment>
    <function><type><specifier>public</specifier> <name>Executor</name></type> <name>getSubProjectExecutor</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>this</name></expr>;</return>
    }</block></function>

}</block></class>
</unit>
