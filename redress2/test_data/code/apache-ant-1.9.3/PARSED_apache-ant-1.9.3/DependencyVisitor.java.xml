<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\util\depend\bcel\DependencyVisitor.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>depend</name>.<name>bcel</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Hashtable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>StringTokenizer</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>bcel</name>.<name>classfile</name>.<name>ConstantClass</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>bcel</name>.<name>classfile</name>.<name>ConstantPool</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>bcel</name>.<name>classfile</name>.<name>EmptyVisitor</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>bcel</name>.<name>classfile</name>.<name>Field</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>bcel</name>.<name>classfile</name>.<name>JavaClass</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>bcel</name>.<name>classfile</name>.<name>Method</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>bcel</name>.<name>classfile</name>.<name>ConstantNameAndType</name></name>;</import>

<comment type="javadoc">/**
 * A BCEL visitor implementation to collect class dependency information
 *
 */</comment>
<class><specifier>public</specifier> class <name>DependencyVisitor</name> <super><extends>extends <name>EmptyVisitor</name></extends></super> <block>{
    <comment type="javadoc">/** The collected dependencies */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>dependencies</name> =<init> <expr>new <call><name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * The current class's constant pool - used to determine class names
     * from class references.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ConstantPool</name></type> <name>constantPool</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Get the dependencies collected by this visitor
     *
     * @return a Enumeration of classnames, being the classes upon which the
     *      visited classes depend.
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Enumeration</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getDependencies</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>dependencies</name>.<name>keys</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/** Clear the current set of collected dependencies. */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>clearDependencies</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>dependencies</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Visit the constant pool of a class
     *
     * @param constantPool the constant pool of the class being visited.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>visitConstantPool</name><parameter_list>(<param><decl><type><name>ConstantPool</name></type> <name>constantPool</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>constantPool</name></name> = <name>constantPool</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Visit a class reference
     *
     * @param constantClass the constantClass entry for the class reference
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>visitConstantClass</name><parameter_list>(<param><decl><type><name>ConstantClass</name></type> <name>constantClass</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>classname</name>
             =<init> <expr><call><name><name>constantClass</name>.<name>getConstantValue</name></name><argument_list>(<argument><expr><name>constantPool</name></expr></argument>)</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>addSlashClass</name><argument_list>(<argument><expr><name>classname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Visit a name and type ref
     *
     * Look for class references in this
     *
     * @param obj the name and type reference being visited.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>visitConstantNameAndType</name><parameter_list>(<param><decl><type><name>ConstantNameAndType</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> =<init> <expr><call><name><name>obj</name>.<name>getName</name></name><argument_list>(<argument><expr><name>constantPool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>obj</name>.<name>getSignature</name></name><argument_list>(<argument><expr><name>constantPool</name></expr></argument>)</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr>"Ljava/lang/Class;"</expr></argument>)</argument_list></call>
                &amp;&amp; <call><name><name>name</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"class$"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>classname</name>
                =<init> <expr><call><name><name>name</name>.<name>substring</name></name><argument_list>(<argument><expr>"class$".<call><name>length</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>replace</name><argument_list>(<argument><expr>'$'</expr></argument>, <argument><expr>'.'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// does the class have a package structure</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>index</name> =<init> <expr><call><name><name>classname</name>.<name>lastIndexOf</name></name><argument_list>(<argument><expr>"."</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>index</name> &gt; 0</expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>char</name></type> <name>start</name></decl>;</decl_stmt>
                <comment type="line">// check if the package structure is more than 1 level deep</comment>
                <decl_stmt><decl><type><name>int</name></type> <name>index2</name> =<init> <expr><call><name><name>classname</name>.<name>lastIndexOf</name></name><argument_list>(<argument><expr>"."</expr></argument>, <argument><expr><name>index</name> - 1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>index2</name> != -1</expr>)</condition><then> <block>{
                    <comment type="line">// class name has more than 1 package level 'com.company.Class'</comment>
                    <expr_stmt><expr><name>start</name> = <call><name><name>classname</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>index2</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <comment type="line">// class name has only 1 package level 'package.Class'</comment>
                    <expr_stmt><expr><name>start</name> = <call><name><name>classname</name>.<name>charAt</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <comment type="line">// Check to see if it's an inner class 'com.company.Class$Inner'</comment>
                <comment type="line">// CheckStyle:MagicNumber OFF</comment>
                <if>if <condition>(<expr>(<name>start</name> &gt; 0x40) &amp;&amp; (<name>start</name> &lt; 0x5B)</expr>)</condition><then> <block>{
                    <comment type="line">// first letter of the previous segment of the class name 'Class'</comment>
                    <comment type="line">// is upper case ascii. so according to the spec it's an inner class</comment>
                    <expr_stmt><expr><name>classname</name> = <call><name><name>classname</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call> + "$"
                        + <call><name><name>classname</name>.<name>substring</name></name><argument_list>(<argument><expr><name>index</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>addClass</name><argument_list>(<argument><expr><name>classname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <comment type="line">// Add the class in dotted notation 'com.company.Class'</comment>
                    <expr_stmt><expr><call><name>addClass</name><argument_list>(<argument><expr><name>classname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <comment type="line">// CheckStyle:MagicNumber ON</comment>
            }</block></then> <else>else <block>{
                <comment type="line">// Add a class with no package 'Class'</comment>
                <expr_stmt><expr><call><name>addClass</name><argument_list>(<argument><expr><name>classname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Visit a field of the class.
     *
     * @param field the field being visited
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>visitField</name><parameter_list>(<param><decl><type><name>Field</name></type> <name>field</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>addClasses</name><argument_list>(<argument><expr><call><name><name>field</name>.<name>getSignature</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Visit a Java class
     *
     * @param javaClass the class being visited.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>visitJavaClass</name><parameter_list>(<param><decl><type><name>JavaClass</name></type> <name>javaClass</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>addClass</name><argument_list>(<argument><expr><call><name><name>javaClass</name>.<name>getClassName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Visit a method of the current class
     *
     * @param method the method being visited.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>visitMethod</name><parameter_list>(<param><decl><type><name>Method</name></type> <name>method</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>signature</name> =<init> <expr><call><name><name>method</name>.<name>getSignature</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>pos</name> =<init> <expr><call><name><name>signature</name>.<name>indexOf</name></name><argument_list>(<argument><expr>")"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>addClasses</name><argument_list>(<argument><expr><call><name><name>signature</name>.<name>substring</name></name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addClasses</name><argument_list>(<argument><expr><call><name><name>signature</name>.<name>substring</name></name><argument_list>(<argument><expr><name>pos</name> + 1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a classname to the list of dependency classes
     *
     * @param classname the class to be added to the list of dependencies.
     */</comment>
    <function><type><name>void</name></type> <name>addClass</name><parameter_list>(<param><decl><type><name>String</name></type> <name>classname</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>dependencies</name>.<name>put</name></name><argument_list>(<argument><expr><name>classname</name></expr></argument>, <argument><expr><name>classname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add all the classes from a descriptor string.
     *
     * @param string the descriptor string, being descriptors separated by
     *      ';' characters.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>addClasses</name><parameter_list>(<param><decl><type><name>String</name></type> <name>string</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>StringTokenizer</name></type> <name>tokens</name> =<init> <expr>new <call><name>StringTokenizer</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr>";"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>tokens</name>.<name>hasMoreTokens</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>descriptor</name> =<init> <expr><call><name><name>tokens</name>.<name>nextToken</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>pos</name> =<init> <expr><call><name><name>descriptor</name>.<name>indexOf</name></name><argument_list>(<argument><expr>'L'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>pos</name> != -1</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>addSlashClass</name><argument_list>(<argument><expr><call><name><name>descriptor</name>.<name>substring</name></name><argument_list>(<argument><expr><name>pos</name> + 1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></while>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a class name in slash format
     * (for example org/apache/tools/ant/Main).
     *
     * @param classname the class name in slash format
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>addSlashClass</name><parameter_list>(<param><decl><type><name>String</name></type> <name>classname</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>addClass</name><argument_list>(<argument><expr><call><name><name>classname</name>.<name>replace</name></name><argument_list>(<argument><expr>'/'</expr></argument>, <argument><expr>'.'</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>

</unit>
