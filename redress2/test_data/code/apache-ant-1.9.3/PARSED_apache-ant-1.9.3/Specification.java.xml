<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\extension\Specification.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>extension</name></name>;</package>

<import>import <name><name>java</name>.<name>text</name>.<name>ParseException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Arrays</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>jar</name>.<name>Attributes</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>jar</name>.<name>Manifest</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>DeweyDecimal</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>StringUtils</name></name>;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Utility class that represents either an available "Optional Package"
 * (formerly known as "Standard Extension") as described in the manifest
 * of a JAR file, or the requirement for such an optional package.&lt;/p&gt;
 *
 * &lt;p&gt;For more information about optional packages, see the document
 * &lt;em&gt;Optional Package Versioning&lt;/em&gt; in the documentation bundle for your
 * Java2 Standard Edition package, in file
 * &lt;code&gt;guide/extensions/versioning.html&lt;/code&gt;.&lt;/p&gt;
 *
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>Specification</name> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>MISSING</name> =<init> <expr>"Missing "</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Manifest Attribute Name object for SPECIFICATION_TITLE.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Attributes</name>.<name>Name</name></name></type> <name>SPECIFICATION_TITLE</name>
        =<init> <expr><name><name>Attributes</name>.<name>Name</name>.<name>SPECIFICATION_TITLE</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Manifest Attribute Name object for SPECIFICATION_VERSION.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Attributes</name>.<name>Name</name></name></type> <name>SPECIFICATION_VERSION</name>
        =<init> <expr><name><name>Attributes</name>.<name>Name</name>.<name>SPECIFICATION_VERSION</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Manifest Attribute Name object for SPECIFICATION_VENDOR.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Attributes</name>.<name>Name</name></name></type> <name>SPECIFICATION_VENDOR</name>
        =<init> <expr><name><name>Attributes</name>.<name>Name</name>.<name>SPECIFICATION_VENDOR</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Manifest Attribute Name object for IMPLEMENTATION_TITLE.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Attributes</name>.<name>Name</name></name></type> <name>IMPLEMENTATION_TITLE</name>
        =<init> <expr><name><name>Attributes</name>.<name>Name</name>.<name>IMPLEMENTATION_TITLE</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Manifest Attribute Name object for IMPLEMENTATION_VERSION.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Attributes</name>.<name>Name</name></name></type> <name>IMPLEMENTATION_VERSION</name>
        =<init> <expr><name><name>Attributes</name>.<name>Name</name>.<name>IMPLEMENTATION_VERSION</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Manifest Attribute Name object for IMPLEMENTATION_VENDOR.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Attributes</name>.<name>Name</name></name></type> <name>IMPLEMENTATION_VENDOR</name>
        =<init> <expr><name><name>Attributes</name>.<name>Name</name>.<name>IMPLEMENTATION_VENDOR</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Enum indicating that extension is compatible with other Package
     * Specification.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Compatibility</name></type> <name>COMPATIBLE</name> =<init>
        <expr>new <call><name>Compatibility</name><argument_list>(<argument><expr>"COMPATIBLE"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Enum indicating that extension requires an upgrade
     * of specification to be compatible with other Package Specification.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Compatibility</name></type> <name>REQUIRE_SPECIFICATION_UPGRADE</name> =<init>
        <expr>new <call><name>Compatibility</name><argument_list>(<argument><expr>"REQUIRE_SPECIFICATION_UPGRADE"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Enum indicating that extension requires a vendor
     * switch to be compatible with other Package Specification.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Compatibility</name></type> <name>REQUIRE_VENDOR_SWITCH</name> =<init>
        <expr>new <call><name>Compatibility</name><argument_list>(<argument><expr>"REQUIRE_VENDOR_SWITCH"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Enum indicating that extension requires an upgrade
     * of implementation to be compatible with other Package Specification.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Compatibility</name></type> <name>REQUIRE_IMPLEMENTATION_CHANGE</name> =<init>
        <expr>new <call><name>Compatibility</name><argument_list>(<argument><expr>"REQUIRE_IMPLEMENTATION_CHANGE"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * This enum indicates that an extension is incompatible with
     * other Package Specification in ways other than other enums
     * indicate. For example, the other Package Specification
     * may have a different ID.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Compatibility</name></type> <name>INCOMPATIBLE</name> =<init>
        <expr>new <call><name>Compatibility</name><argument_list>(<argument><expr>"INCOMPATIBLE"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The name of the Package Specification.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>specificationTitle</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The version number (dotted decimal notation) of the specification
     * to which this optional package conforms.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>DeweyDecimal</name></type> <name>specificationVersion</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The name of the company or organization that originated the
     * specification to which this specification conforms.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>specificationVendor</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The title of implementation.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>implementationTitle</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The name of the company or organization that produced this
     * implementation of this specification.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>implementationVendor</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The version string for implementation. The version string is
     * opaque.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>implementationVersion</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The sections of jar that the specification applies to.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name><index>[]</index></type> <name>sections</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Return an array of &lt;code&gt;Package Specification&lt;/code&gt; objects.
     * If there are no such optional packages, a zero-length array is returned.
     *
     * @param manifest Manifest to be parsed
     * @return the Package Specifications extensions in specified manifest
     * @throws ParseException if the attributes of the specifications cannot
     * be parsed according to their expected formats.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Specification</name><index>[]</index></type> <name>getSpecifications</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Manifest</name></type> <name>manifest</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>ParseException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>null</name> == <name>manifest</name></expr>)</condition><then> <block>{
            <return>return <expr>new <name><name>Specification</name><index>[ <expr>0</expr> ]</index></name></expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>ArrayList</name></type> <name>results</name> =<init> <expr>new <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Map</name></type> <name>entries</name> =<init> <expr><call><name><name>manifest</name>.<name>getEntries</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Iterator</name></type> <name>keys</name> =<init> <expr><call><name><name>entries</name>.<name>keySet</name></name><argument_list>()</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>keys</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>key</name> =<init> <expr>(<name>String</name>) <call><name><name>keys</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>Attributes</name></type> <name>attributes</name> =<init> <expr>(<name>Attributes</name>) <call><name><name>entries</name>.<name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>Specification</name></type> <name>specification</name>
                =<init> <expr><call><name>getSpecification</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>attributes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>null</name> != <name>specification</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>results</name>.<name>add</name></name><argument_list>(<argument><expr><name>specification</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></while>

        <decl_stmt><decl><type><specifier>final</specifier> <name>ArrayList</name></type> <name>trimmedResults</name> =<init> <expr><call><name>removeDuplicates</name><argument_list>(<argument><expr><name>results</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>(<name><name>Specification</name><index>[]</index></name>) <call><name><name>trimmedResults</name>.<name>toArray</name></name><argument_list>(<argument><expr>new <name><name>Specification</name><index>[<expr><call><name><name>trimmedResults</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * The constructor to create Package Specification object.
     * Note that every component is allowed to be specified
     * but only the specificationTitle is mandatory.
     *
     * @param specificationTitle the name of specification.
     * @param specificationVersion the specification Version.
     * @param specificationVendor the specification Vendor.
     * @param implementationTitle the title of implementation.
     * @param implementationVersion the implementation Version.
     * @param implementationVendor the implementation Vendor.
     */</comment>
    <constructor><specifier>public</specifier> <name>Specification</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>specificationTitle</name></decl></param>,
                          <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>specificationVersion</name></decl></param>,
                          <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>specificationVendor</name></decl></param>,
                          <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>implementationTitle</name></decl></param>,
                          <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>implementationVersion</name></decl></param>,
                          <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>implementationVendor</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>specificationTitle</name></expr></argument>, <argument><expr><name>specificationVersion</name></expr></argument>, <argument><expr><name>specificationVendor</name></expr></argument>,
              <argument><expr><name>implementationTitle</name></expr></argument>, <argument><expr><name>implementationVersion</name></expr></argument>, <argument><expr><name>implementationVendor</name></expr></argument>,
              <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * The constructor to create Package Specification object.
     * Note that every component is allowed to be specified
     * but only the specificationTitle is mandatory.
     *
     * @param specificationTitle the name of specification.
     * @param specificationVersion the specification Version.
     * @param specificationVendor the specification Vendor.
     * @param implementationTitle the title of implementation.
     * @param implementationVersion the implementation Version.
     * @param implementationVendor the implementation Vendor.
     * @param sections the sections/packages that Specification applies to.
     */</comment>
    <constructor><specifier>public</specifier> <name>Specification</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>specificationTitle</name></decl></param>,
                          <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>specificationVersion</name></decl></param>,
                          <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>specificationVendor</name></decl></param>,
                          <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>implementationTitle</name></decl></param>,
                          <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>implementationVersion</name></decl></param>,
                          <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>implementationVendor</name></decl></param>,
                          <param><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>sections</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>specificationTitle</name></name> = <name>specificationTitle</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>specificationVendor</name></name> = <name>specificationVendor</name></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>null</name> != <name>specificationVersion</name></expr>)</condition><then> <block>{
            <try>try <block>{
                <expr_stmt><expr><name><name>this</name>.<name>specificationVersion</name></name>
                    = new <call><name>DeweyDecimal</name><argument_list>(<argument><expr><name>specificationVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><specifier>final</specifier> <name>NumberFormatException</name></type> <name>nfe</name></decl></param>) <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>error</name> =<init> <expr>"Bad specification version format '"
                    + <name>specificationVersion</name> + "' in '" + <name>specificationTitle</name>
                    + "'. (Reason: " + <name>nfe</name> + ")"</expr></init></decl>;</decl_stmt>
                <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></then></if>

        <expr_stmt><expr><name><name>this</name>.<name>implementationTitle</name></name> = <name>implementationTitle</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>implementationVendor</name></name> = <name>implementationVendor</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>implementationVersion</name></name> = <name>implementationVersion</name></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>null</name> == <name><name>this</name>.<name>specificationTitle</name></name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>NullPointerException</name><argument_list>(<argument><expr>"specificationTitle"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>copy</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>null</name> != <name>sections</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>copy</name> = new <name><name>String</name><index>[ <expr><name><name>sections</name>.<name>length</name></name></expr> ]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>sections</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>copy</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>sections</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>sections</name></name> = <name>copy</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Get the title of the specification.
     *
     * @return the title of specification
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getSpecificationTitle</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>specificationTitle</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the vendor of the specification.
     *
     * @return the vendor of the specification.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getSpecificationVendor</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>specificationVendor</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the title of the specification.
     *
     * @return the title of the specification.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getImplementationTitle</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>implementationTitle</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the version of the specification.
     *
     * @return the version of the specification.
     */</comment>
    <function><type><specifier>public</specifier> <name>DeweyDecimal</name></type> <name>getSpecificationVersion</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>specificationVersion</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the vendor of the extensions implementation.
     *
     * @return the vendor of the extensions implementation.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getImplementationVendor</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>implementationVendor</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the version of the implementation.
     *
     * @return the version of the implementation.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getImplementationVersion</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>implementationVersion</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Return an array containing sections to which specification applies
     * or null if relevant to no sections.
     *
     * @return an array containing sections to which specification applies
     *         or null if relevant to no sections.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getSections</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>null</name> == <name>sections</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name><index>[]</index></type> <name>newSections</name> =<init> <expr>new <name><name>String</name><index>[ <expr><name><name>sections</name>.<name>length</name></name></expr> ]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>sections</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>newSections</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>sections</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>newSections</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Return a Compatibility enum indicating the relationship of this
     * &lt;code&gt;Package Specification&lt;/code&gt; with the specified
     * &lt;code&gt;Extension&lt;/code&gt;.
     *
     * @param other the other specification
     * @return the enum indicating the compatibility (or lack thereof)
     *         of specified Package Specification
     */</comment>
    <function><type><specifier>public</specifier> <name>Compatibility</name></type> <name>getCompatibilityWith</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Specification</name></type> <name>other</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// Specification Name must match</comment>
        <if>if <condition>(<expr>!<call><name><name>specificationTitle</name>.<name>equals</name></name><argument_list>(<argument><expr><call><name><name>other</name>.<name>getSpecificationTitle</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name>INCOMPATIBLE</name></expr>;</return>
        }</block></then></if>

        <comment type="line">// Available specification version must be &gt;= required</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>DeweyDecimal</name></type> <name>otherSpecificationVersion</name>
            =<init> <expr><call><name><name>other</name>.<name>getSpecificationVersion</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>null</name> != <name>specificationVersion</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>null</name> == <name>otherSpecificationVersion</name>
                || !<call><name>isCompatible</name><argument_list>(<argument><expr><name>specificationVersion</name></expr></argument>, <argument><expr><name>otherSpecificationVersion</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><name>REQUIRE_SPECIFICATION_UPGRADE</name></expr>;</return>
            }</block></then></if>
        }</block></then></if>

        <comment type="line">// Implementation Vendor ID must match</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>otherImplementationVendor</name>
            =<init> <expr><call><name><name>other</name>.<name>getImplementationVendor</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>null</name> != <name>implementationVendor</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>null</name> == <name>otherImplementationVendor</name>
                || !<call><name><name>implementationVendor</name>.<name>equals</name></name><argument_list>(<argument><expr><name>otherImplementationVendor</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><name>REQUIRE_VENDOR_SWITCH</name></expr>;</return>
            }</block></then></if>
        }</block></then></if>

        <comment type="line">// Implementation version must be &gt;= required</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>otherImplementationVersion</name>
            =<init> <expr><call><name><name>other</name>.<name>getImplementationVersion</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>null</name> != <name>implementationVersion</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>null</name> == <name>otherImplementationVersion</name>
                || !<call><name><name>implementationVersion</name>.<name>equals</name></name><argument_list>(<argument><expr><name>otherImplementationVersion</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><name>REQUIRE_IMPLEMENTATION_CHANGE</name></expr>;</return>
            }</block></then></if>
        }</block></then></if>

        <comment type="line">// This available optional package satisfies the requirements</comment>
        <return>return <expr><name>COMPATIBLE</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Return &lt;code&gt;true&lt;/code&gt; if the specified &lt;code&gt;package&lt;/code&gt;
     * is satisfied by this &lt;code&gt;Specification&lt;/code&gt;. Otherwise, return
     * &lt;code&gt;false&lt;/code&gt;.
     *
     * @param other the specification
     * @return true if the specification is compatible with this specification
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isCompatibleWith</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Specification</name></type> <name>other</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>(<name>COMPATIBLE</name> == <call><name>getCompatibilityWith</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call>)</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Return a String representation of this object.
     *
     * @return string representation of object.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>brace</name> =<init> <expr>": "</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuffer</name></type> <name>sb</name>
            =<init> <expr>new <call><name>StringBuffer</name><argument_list>(<argument><expr><call><name><name>SPECIFICATION_TITLE</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>brace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>specificationTitle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name><name>StringUtils</name>.<name>LINE_SEP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>null</name> != <name>specificationVersion</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>SPECIFICATION_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>brace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>specificationVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name><name>StringUtils</name>.<name>LINE_SEP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>null</name> != <name>specificationVendor</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>SPECIFICATION_VENDOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>brace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>specificationVendor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name><name>StringUtils</name>.<name>LINE_SEP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>null</name> != <name>implementationTitle</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>IMPLEMENTATION_TITLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>brace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>implementationTitle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name><name>StringUtils</name>.<name>LINE_SEP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>null</name> != <name>implementationVersion</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>IMPLEMENTATION_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>brace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>implementationVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name><name>StringUtils</name>.<name>LINE_SEP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>null</name> != <name>implementationVendor</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>IMPLEMENTATION_VENDOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>brace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>implementationVendor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name><name>StringUtils</name>.<name>LINE_SEP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <return>return <expr><call><name><name>sb</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Return &lt;code&gt;true&lt;/code&gt; if the first version number is greater than
     * or equal to the second; otherwise return &lt;code&gt;false&lt;/code&gt;.
     *
     * @param first First version number (dotted decimal)
     * @param second Second version number (dotted decimal)
     */</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>isCompatible</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>DeweyDecimal</name></type> <name>first</name></decl></param>,
                                 <param><decl><type><specifier>final</specifier> <name>DeweyDecimal</name></type> <name>second</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>first</name>.<name>isGreaterThanOrEqual</name></name><argument_list>(<argument><expr><name>second</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Combine all specifications objects that are identical except
     * for the sections.
     *
     * &lt;p&gt;Note this is very inefficent and should probably be fixed
     * in the future.&lt;/p&gt;
     *
     * @param list the array of results to trim
     * @return an array list with all duplicates removed
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>ArrayList</name></type> <name>removeDuplicates</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>ArrayList</name></type> <name>list</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>ArrayList</name></type> <name>results</name> =<init> <expr>new <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>ArrayList</name></type> <name>sections</name> =<init> <expr>new <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>list</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>Specification</name></type> <name>specification</name> =<init> <expr>(<name>Specification</name>) <call><name><name>list</name>.<name>remove</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>list</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>Specification</name></type> <name>other</name> =<init> <expr>(<name>Specification</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name>isEqual</name><argument_list>(<argument><expr><name>specification</name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name><index>[]</index></type> <name>otherSections</name> =<init> <expr><call><name><name>other</name>.<name>getSections</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>null</name> != <name>otherSections</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>sections</name>.<name>addAll</name></name><argument_list>(<argument><expr><call><name><name>Arrays</name>.<name>asList</name></name><argument_list>(<argument><expr><name>otherSections</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <expr_stmt><expr><call><name><name>iterator</name>.<name>remove</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></while>

            <decl_stmt><decl><type><specifier>final</specifier> <name>Specification</name></type> <name>merged</name> =<init>
                <expr><call><name>mergeInSections</name><argument_list>(<argument><expr><name>specification</name></expr></argument>, <argument><expr><name>sections</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>results</name>.<name>add</name></name><argument_list>(<argument><expr><name>merged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">//Reset list of sections</comment>
            <expr_stmt><expr><call><name><name>sections</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></while>

        <return>return <expr><name>results</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Test if two specifications are equal except for their sections.
     *
     * @param specification one specificaiton
     * @param other the ohter specification
     * @return true if two specifications are equal except for their
     *         sections, else false
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isEqual</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Specification</name></type> <name>specification</name></decl></param>,
                                    <param><decl><type><specifier>final</specifier> <name>Specification</name></type> <name>other</name></decl></param>)</parameter_list> <block>{
        <return>return
            <expr><call><name><name>specification</name>.<name>getSpecificationTitle</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><call><name><name>other</name>.<name>getSpecificationTitle</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
            &amp;&amp; <call><name><name>specification</name>.<name>getSpecificationVersion</name></name><argument_list>()</argument_list></call>.<call><name>isEqual</name><argument_list>(<argument><expr><call><name><name>other</name>.<name>getSpecificationVersion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
            &amp;&amp; <call><name><name>specification</name>.<name>getSpecificationVendor</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><call><name><name>other</name>.<name>getSpecificationVendor</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
            &amp;&amp; <call><name><name>specification</name>.<name>getImplementationTitle</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><call><name><name>other</name>.<name>getImplementationTitle</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
            &amp;&amp; <call><name><name>specification</name>.<name>getImplementationVersion</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><call><name><name>other</name>.<name>getImplementationVersion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
            &amp;&amp; <call><name><name>specification</name>.<name>getImplementationVendor</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><call><name><name>other</name>.<name>getImplementationVendor</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Merge the specified sections into specified section and return result.
     * If no sections to be added then just return original specification.
     *
     * @param specification the specification
     * @param sectionsToAdd the list of sections to merge
     * @return the merged specification
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>Specification</name></type> <name>mergeInSections</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Specification</name></type> <name>specification</name></decl></param>,
                                              <param><decl><type><specifier>final</specifier> <name>ArrayList</name></type> <name>sectionsToAdd</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr>0 == <call><name><name>sectionsToAdd</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name>specification</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>sectionsToAdd</name>.<name>addAll</name></name><argument_list>(<argument><expr><call><name><name>Arrays</name>.<name>asList</name></name><argument_list>(<argument><expr><call><name><name>specification</name>.<name>getSections</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name><index>[]</index></type> <name>sections</name> =<init>
            <expr>(<name><name>String</name><index>[]</index></name>) <call><name><name>sectionsToAdd</name>.<name>toArray</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[<expr><call><name><name>sectionsToAdd</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr>new <call><name>Specification</name><argument_list>(<argument><expr><call><name><name>specification</name>.<name>getSpecificationTitle</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>specification</name>.<name>getSpecificationVersion</name></name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>specification</name>.<name>getSpecificationVendor</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>specification</name>.<name>getImplementationTitle</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>specification</name>.<name>getImplementationVersion</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>specification</name>.<name>getImplementationVendor</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><name>sections</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Trim the supplied string if the string is non-null
     *
     * @param value the string to trim or null
     * @return the trimmed string or null
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>getTrimmedString</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name>value</name> == <name>null</name> ? <name>null</name> : <call><name><name>value</name>.<name>trim</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Extract an Package Specification from Attributes.
     *
     * @param attributes Attributes to searched
     * @return the new Specification object, or null
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>Specification</name></type> <name>getSpecification</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>section</name></decl></param>,
                                                   <param><decl><type><specifier>final</specifier> <name>Attributes</name></type> <name>attributes</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>ParseException</name></expr></argument></throws> <block>{
        <comment type="line">//WARNING: We trim the values of all the attributes because</comment>
        <comment type="line">//Some extension declarations are badly defined (ie have spaces</comment>
        <comment type="line">//after version or vendor)</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>name</name>
            =<init> <expr><call><name>getTrimmedString</name><argument_list>(<argument><expr><call><name><name>attributes</name>.<name>getValue</name></name><argument_list>(<argument><expr><name>SPECIFICATION_TITLE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>null</name> == <name>name</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>specVendor</name>
            =<init> <expr><call><name>getTrimmedString</name><argument_list>(<argument><expr><call><name><name>attributes</name>.<name>getValue</name></name><argument_list>(<argument><expr><name>SPECIFICATION_VENDOR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>null</name> == <name>specVendor</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>ParseException</name><argument_list>(<argument><expr><name>MISSING</name> + <name>SPECIFICATION_VENDOR</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>specVersion</name>
            =<init> <expr><call><name>getTrimmedString</name><argument_list>(<argument><expr><call><name><name>attributes</name>.<name>getValue</name></name><argument_list>(<argument><expr><name>SPECIFICATION_VERSION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>null</name> == <name>specVersion</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>ParseException</name><argument_list>(<argument><expr><name>MISSING</name> + <name>SPECIFICATION_VERSION</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>impTitle</name>
            =<init> <expr><call><name>getTrimmedString</name><argument_list>(<argument><expr><call><name><name>attributes</name>.<name>getValue</name></name><argument_list>(<argument><expr><name>IMPLEMENTATION_TITLE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>null</name> == <name>impTitle</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>ParseException</name><argument_list>(<argument><expr><name>MISSING</name> + <name>IMPLEMENTATION_TITLE</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>impVersion</name>
            =<init> <expr><call><name>getTrimmedString</name><argument_list>(<argument><expr><call><name><name>attributes</name>.<name>getValue</name></name><argument_list>(<argument><expr><name>IMPLEMENTATION_VERSION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>null</name> == <name>impVersion</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>ParseException</name><argument_list>(<argument><expr><name>MISSING</name> + <name>IMPLEMENTATION_VERSION</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>impVendor</name>
            =<init> <expr><call><name>getTrimmedString</name><argument_list>(<argument><expr><call><name><name>attributes</name>.<name>getValue</name></name><argument_list>(<argument><expr><name>IMPLEMENTATION_VENDOR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>null</name> == <name>impVendor</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>ParseException</name><argument_list>(<argument><expr><name>MISSING</name> + <name>IMPLEMENTATION_VENDOR</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <return>return <expr>new <call><name>Specification</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>specVersion</name></expr></argument>, <argument><expr><name>specVendor</name></expr></argument>,
                                  <argument><expr><name>impTitle</name></expr></argument>, <argument><expr><name>impVersion</name></expr></argument>, <argument><expr><name>impVendor</name></expr></argument>,
                                  <argument><expr>new <name><name>String</name><index>[]</index></name><block>{<expr><name>section</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
