<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\rmic\RmicAdapterFactory.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>rmic</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Path</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>ClasspathUtils</name></name>;</import>

<comment type="javadoc">/**
 * Creates the necessary rmic adapter, given basic criteria.
 *
 * @since 1.4
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>RmicAdapterFactory</name> <block>{
    <comment type="javadoc">/** The error message to be used when the compiler cannot be found. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ERROR_UNKNOWN_COMPILER</name> =<init> <expr>"Class not found: "</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The error message to be used when the class is not an rmic adapter. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ERROR_NOT_RMIC_ADAPTER</name> =<init> <expr>"Class of unexpected Type: "</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** If the compiler has this name use a default compiler. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEFAULT_COMPILER</name> =<init> <expr>"default"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** This is a singleton -- can't create instances!! */</comment>
    <constructor><specifier>private</specifier> <name>RmicAdapterFactory</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <comment type="javadoc">/**
     * Based on the parameter passed in, this method creates the necessary
     * factory desired.
     *
     * &lt;p&gt;The current mapping for rmic names are as follows:&lt;/p&gt;
     * &lt;ul&gt;&lt;li&gt;sun = SUN's rmic
     * &lt;li&gt;kaffe = Kaffe's rmic
     * &lt;li&gt;&lt;i&gt;a fully qualified classname&lt;/i&gt; = the name of a rmic
     * adapter
     * &lt;li&gt;weblogic = weblogic compiler
     * &lt;li&gt;forking = Sun's RMIC by forking a new JVM
     * &lt;/ul&gt;
     *
     * @param rmicType either the name of the desired rmic, or the
     * full classname of the rmic's adapter.
     * @param task a task to log through.
     * @return the compiler adapter
     * @throws BuildException if the rmic type could not be resolved into
     * a rmic adapter.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>RmicAdapter</name></type> <name>getRmic</name><parameter_list>(<param><decl><type><name>String</name></type> <name>rmicType</name></decl></param>, <param><decl><type><name>Task</name></type> <name>task</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name>getRmic</name><argument_list>(<argument><expr><name>rmicType</name></expr></argument>, <argument><expr><name>task</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Based on the parameter passed in, this method creates the necessary
     * factory desired.
     *
     * &lt;p&gt;The current mapping for rmic names are as follows:&lt;/p&gt;
     * &lt;ul&gt;&lt;li&gt;sun = SUN's rmic
     * &lt;li&gt;kaffe = Kaffe's rmic
     * &lt;li&gt;&lt;i&gt;a fully qualified classname&lt;/i&gt; = the name of a rmic
     * adapter
     * &lt;li&gt;weblogic = weblogic compiler
     * &lt;li&gt;forking = Sun's RMIC by forking a new JVM
     * &lt;/ul&gt;
     *
     * @param rmicType either the name of the desired rmic, or the
     * full classname of the rmic's adapter.
     * @param task a task to log through.
     * @param classpath the classpath to use when looking up an
     * adapter class
     * @return the compiler adapter
     * @throws BuildException if the rmic type could not be resolved into
     * a rmic adapter.
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>RmicAdapter</name></type> <name>getRmic</name><parameter_list>(<param><decl><type><name>String</name></type> <name>rmicType</name></decl></param>, <param><decl><type><name>Task</name></type> <name>task</name></decl></param>,
                                      <param><decl><type><name>Path</name></type> <name>classpath</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <comment type="line">//handle default specially by choosing the sun or kaffe compiler</comment>
        <if>if <condition>(<expr><call><name><name>DEFAULT_COMPILER</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>rmicType</name></expr></argument>)</argument_list></call> || <call><name><name>rmicType</name>.<name>length</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>rmicType</name> = <call><name><name>KaffeRmic</name>.<name>isAvailable</name></name><argument_list>()</argument_list></call>
                ? <name><name>KaffeRmic</name>.<name>COMPILER_NAME</name></name>
                : <name><name>SunRmic</name>.<name>COMPILER_NAME</name></name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>SunRmic</name>.<name>COMPILER_NAME</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>rmicType</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>new <call><name>SunRmic</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>KaffeRmic</name>.<name>COMPILER_NAME</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>rmicType</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>new <call><name>KaffeRmic</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>WLRmic</name>.<name>COMPILER_NAME</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>rmicType</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>new <call><name>WLRmic</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>ForkingSunRmic</name>.<name>COMPILER_NAME</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>rmicType</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>new <call><name>ForkingSunRmic</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>XNewRmic</name>.<name>COMPILER_NAME</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>rmicType</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>new <call><name>XNewRmic</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if></else></if></else></if></else></if></else></if>
        <comment type="line">//no match?</comment>
        <return>return <expr><call><name>resolveClassName</name><argument_list>(<argument><expr><name>rmicType</name></expr></argument>,
                                <comment type="line">// Memory leak in line below</comment>
                                <argument><expr><call><name><name>task</name>.<name>getProject</name></name><argument_list>()</argument_list></call>.<call><name>createClassLoader</name><argument_list>(<argument><expr><name>classpath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Tries to resolve the given classname into a rmic adapter.
     * Throws a fit if it can't.
     *
     * @param className The fully qualified classname to be created.
     * @param loader the classloader to use
     * @throws BuildException This is the fit that is thrown if className
     * isn't an instance of RmicAdapter.
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>RmicAdapter</name></type> <name>resolveClassName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>className</name></decl></param>,
                                                <param><decl><type><name>ClassLoader</name></type> <name>loader</name></decl></param>)</parameter_list>
            <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <return>return <expr>(<name>RmicAdapter</name>) <call><name><name>ClasspathUtils</name>.<name>newInstance</name></name><argument_list>(<argument><expr><name>className</name></expr></argument>,
                <argument><expr><name>loader</name> != <name>null</name> ? <name>loader</name> :
                <name><name>RmicAdapterFactory</name>.<name><name/></name></name>class.<call><name>getClassLoader</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>RmicAdapter</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
