<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\junit\TestListenerWrapper.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>junit</name></name>;</package>

<import>import <name><name>junit</name>.<name>framework</name>.<name>AssertionFailedError</name></name>;</import>
<import>import <name><name>junit</name>.<name>framework</name>.<name>Test</name></name>;</import>
<import>import <name><name>junit</name>.<name>framework</name>.<name>TestListener</name></name>;</import>


<class><specifier>public</specifier> class <name>TestListenerWrapper</name> <super><implements>implements <name>TestListener</name>, <name>IgnoredTestListener</name></implements></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>TestListener</name></type> <name>wrapped</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>TestListenerWrapper</name><parameter_list>(<param><decl><type><name>TestListener</name></type> <name>listener</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>wrapped</name> = <name>listener</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addError</name><parameter_list>(<param><decl><type><name>Test</name></type> <name>test</name></decl></param>, <param><decl><type><name>Throwable</name></type> <name>throwable</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>wrapped</name>.<name>addError</name></name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>throwable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addFailure</name><parameter_list>(<param><decl><type><name>Test</name></type> <name>test</name></decl></param>, <param><decl><type><name>AssertionFailedError</name></type> <name>assertionFailedError</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>wrapped</name>.<name>addFailure</name></name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>assertionFailedError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>endTest</name><parameter_list>(<param><decl><type><name>Test</name></type> <name>test</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>wrapped</name>.<name>endTest</name></name><argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>startTest</name><parameter_list>(<param><decl><type><name>Test</name></type> <name>test</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>wrapped</name>.<name>startTest</name></name><argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testIgnored</name><parameter_list>(<param><decl><type><name>Test</name></type> <name>test</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>wrapped</name> <name>instanceof</name> <name>IgnoredTestListener</name></expr>)</condition><then> <block>{
            <expr_stmt><expr>((<name>IgnoredTestListener</name>)<name>wrapped</name>).<call><name>testIgnored</name><argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testAssumptionFailure</name><parameter_list>(<param><decl><type><name>Test</name></type> <name>test</name></decl></param>, <param><decl><type><name>Throwable</name></type> <name>throwable</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>wrapped</name> <name>instanceof</name> <name>IgnoredTestListener</name></expr>)</condition><then> <block>{
            <expr_stmt><expr>((<name>IgnoredTestListener</name>)<name>wrapped</name>).<call><name>testAssumptionFailure</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>throwable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

}</block></class>
</unit>
