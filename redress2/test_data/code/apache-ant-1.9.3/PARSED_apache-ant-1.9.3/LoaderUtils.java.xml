<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\util\LoaderUtils.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>launch</name>.<name>Locator</name></name>;</import>

<comment type="line">// CheckStyle:HideUtilityClassConstructorCheck OFF - bc</comment>

<comment type="javadoc">/**
 * ClassLoader utility methods
 *
 */</comment>
<class><specifier>public</specifier> class <name>LoaderUtils</name> <block>{

    <comment type="javadoc">/** Utilities used for file operations */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>FileUtils</name></type> <name>FILE_UTILS</name> =<init> <expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Set the context classloader
     *
     * @param loader the ClassLoader to be used as the context class loader
     *      on the current thread.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setContextClassLoader</name><parameter_list>(<param><decl><type><name>ClassLoader</name></type> <name>loader</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Thread</name></type> <name>currentThread</name> =<init> <expr><call><name><name>Thread</name>.<name>currentThread</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>currentThread</name>.<name>setContextClassLoader</name></name><argument_list>(<argument><expr><name>loader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * JDK1.1 compatible access to set the context class loader.
     *
     * @return the ClassLoader instance being used as the context
     *      classloader on the current thread. Returns null on JDK 1.1
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ClassLoader</name></type> <name>getContextClassLoader</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Thread</name></type> <name>currentThread</name> =<init> <expr><call><name><name>Thread</name>.<name>currentThread</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>currentThread</name>.<name>getContextClassLoader</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Indicates if the context class loader methods are available
     *
     * @return true if the get and set methods dealing with the context
     *      classloader are available.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isContextLoaderAvailable</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>true</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Normalize a source location
     *
     * @param source the source location to be normalized.
     *
     * @return the normalized source location.
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>File</name></type> <name>normalizeSource</name><parameter_list>(<param><decl><type><name>File</name></type> <name>source</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>source</name> != <name>null</name></expr>)</condition><then> <block>{
            <try>try <block>{
                <expr_stmt><expr><name>source</name> = <call><name><name>FILE_UTILS</name>.<name>normalize</name></name><argument_list>(<argument><expr><call><name><name>source</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>e</name></decl></param>) <block>{
                <comment type="line">// relative path</comment>
            }</block></catch></try>
        }</block></then></if>

        <return>return <expr><name>source</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Find the directory or jar file the class has been loaded from.
     *
     * @param c the class whose location is required.
     * @return the file or jar with the class or null if we cannot
     *         determine the location.
     *
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>File</name></type> <name>getClassSource</name><parameter_list>(<param><decl><type><name>Class</name></type> <name>c</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>normalizeSource</name><argument_list>(<argument><expr><call><name><name>Locator</name>.<name>getClassSource</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Find the directory or a give resource has been loaded from.
     *
     * @param c the classloader to be consulted for the source
     * @param resource the resource whose location is required.
     *
     * @return the file with the resource source or null if
     *         we cannot determine the location.
     *
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>File</name></type> <name>getResourceSource</name><parameter_list>(<param><decl><type><name>ClassLoader</name></type> <name>c</name></decl></param>, <param><decl><type><name>String</name></type> <name>resource</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>c</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>c</name> = <name><name>LoaderUtils</name>.<name><name/></name></name>class.<call><name>getClassLoader</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><call><name>normalizeSource</name><argument_list>(<argument><expr><call><name><name>Locator</name>.<name>getResourceSource</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Return the resource name of a class name.
     * @param className the name of the class to convert.
     * @return the corresponding resource name.
     * @since Ant 1.7.0.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>classNameToResource</name><parameter_list>(<param><decl><type><name>String</name></type> <name>className</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>className</name>.<name>replace</name></name><argument_list>(<argument><expr>'.'</expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call> + ".class"</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Check if a classloader has a classname resource.
     * @param loader the classloader to look it.
     * @param className the name of the class to look for.
     * @return true if the classexists, false otherwise
     * @since Ant 1.7.0.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>classExists</name><parameter_list>(<param><decl><type><name>ClassLoader</name></type> <name>loader</name></decl></param>, <param><decl><type><name>String</name></type> <name>className</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>loader</name>.<name>getResource</name></name><argument_list>(<argument><expr><call><name>classNameToResource</name><argument_list>(<argument><expr><name>className</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> != <name>null</name></expr>;</return>
    }</block></function>
}</block></class>

</unit>
