<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\ssh\ScpToMessageBySftp.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>ssh</name></name>;</package>

<import>import <name><name>com</name>.<name>jcraft</name>.<name>jsch</name>.<name>Session</name></name>;</import>
<import>import <name><name>com</name>.<name>jcraft</name>.<name>jsch</name>.<name>ChannelSftp</name></name>;</import>
<import>import <name><name>com</name>.<name>jcraft</name>.<name>jsch</name>.<name>JSchException</name></name>;</import>
<import>import <name><name>com</name>.<name>jcraft</name>.<name>jsch</name>.<name>SftpException</name></name>;</import>
<import>import <name><name>com</name>.<name>jcraft</name>.<name>jsch</name>.<name>SftpProgressMonitor</name></name>;</import>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>

<comment type="javadoc">/**
 * Utility class to carry out an upload by sftp.
 */</comment>
<class><specifier>public</specifier> class <name>ScpToMessageBySftp</name> <super><extends>extends <name>ScpToMessage</name></extends></super><comment type="block">/*AbstractSshMessage*/</comment> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>HUNDRED_KILOBYTES</name> =<init> <expr>102400</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>localFile</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>remotePath</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>List</name></type> <name>directoryList</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructor for a local file to remote.
     * @param verbose if true do verbose logging
     * @param session the scp session to use
     * @param aLocalFile the local file
     * @param aRemotePath the remote path
     * @since Ant 1.7
     */</comment>
    <constructor><specifier>public</specifier> <name>ScpToMessageBySftp</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>verbose</name></decl></param>,
                              <param><decl><type><name>Session</name></type> <name>session</name></decl></param>,
                              <param><decl><type><name>File</name></type> <name>aLocalFile</name></decl></param>,
                              <param><decl><type><name>String</name></type> <name>aRemotePath</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>verbose</name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><name>aRemotePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name>.<name>localFile</name></name> = <name>aLocalFile</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructor for a local directories to remote.
     * @param verbose if true do verbose logging
     * @param session the scp session to use
     * @param aDirectoryList a list of directories
     * @param aRemotePath the remote path
     * @since Ant 1.7
     */</comment>
    <constructor><specifier>public</specifier> <name>ScpToMessageBySftp</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>verbose</name></decl></param>,
                              <param><decl><type><name>Session</name></type> <name>session</name></decl></param>,
                              <param><decl><type><name>List</name></type> <name>aDirectoryList</name></decl></param>,
                              <param><decl><type><name>String</name></type> <name>aRemotePath</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>verbose</name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><name>aRemotePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name>.<name>directoryList</name></name> = <name>aDirectoryList</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructor for ScpToMessage.
     * @param verbose if true do verbose logging
     * @param session the scp session to use
     * @param aRemotePath the remote path
     * @since Ant 1.6.2
     */</comment>
    <constructor><specifier>private</specifier> <name>ScpToMessageBySftp</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>verbose</name></decl></param>,
                               <param><decl><type><name>Session</name></type> <name>session</name></decl></param>,
                               <param><decl><type><name>String</name></type> <name>aRemotePath</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>verbose</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>remotePath</name></name> = <name>aRemotePath</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructor for ScpToMessage.
     * @param session the scp session to use
     * @param aLocalFile the local file
     * @param aRemotePath the remote path
     */</comment>
    <constructor><specifier>public</specifier> <name>ScpToMessageBySftp</name><parameter_list>(<param><decl><type><name>Session</name></type> <name>session</name></decl></param>,
                              <param><decl><type><name>File</name></type> <name>aLocalFile</name></decl></param>,
                              <param><decl><type><name>String</name></type> <name>aRemotePath</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>false</expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><name>aLocalFile</name></expr></argument>, <argument><expr><name>aRemotePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructor for ScpToMessage.
     * @param session the scp session to use
     * @param aDirectoryList a list of directories
     * @param aRemotePath the remote path
     */</comment>
    <constructor><specifier>public</specifier> <name>ScpToMessageBySftp</name><parameter_list>(<param><decl><type><name>Session</name></type> <name>session</name></decl></param>,
                              <param><decl><type><name>List</name></type> <name>aDirectoryList</name></decl></param>,
                              <param><decl><type><name>String</name></type> <name>aRemotePath</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>false</expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><name>aDirectoryList</name></expr></argument>, <argument><expr><name>aRemotePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Carry out the transfer.
     * @throws IOException on i/o errors
     * @throws JSchException on errors detected by scp
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>JSchException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>directoryList</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>doMultipleTransfer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>localFile</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>doSingleTransfer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"done.\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>doSingleTransfer</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>JSchException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>ChannelSftp</name></type> <name>channel</name> =<init> <expr><call><name>openSftpChannel</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>channel</name>.<name>connect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <try>try <block>{
                <expr_stmt><expr><call><name>sendFileToRemote</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>localFile</name></expr></argument>, <argument><expr><name>remotePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>SftpException</name></type> <name>e</name></decl></param>) <block>{
                <decl_stmt><decl><type><name>JSchException</name></type> <name>schException</name> =<init> <expr>new <call><name>JSchException</name><argument_list>(<argument><expr>"Could not send '" + <name>localFile</name>
                        + "' to '" + <name>remotePath</name> + "' - "
                        + <call><name><name>e</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>schException</name>.<name>initCause</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <throw>throw <expr><name>schException</name></expr>;</throw>
            }</block></catch></try>
        }</block> <finally>finally <block>{
            <if>if <condition>(<expr><name>channel</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>channel</name>.<name>disconnect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></finally></try>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>doMultipleTransfer</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>JSchException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>ChannelSftp</name></type> <name>channel</name> =<init> <expr><call><name>openSftpChannel</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>channel</name>.<name>connect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <try>try <block>{
                <try>try <block>{
                    <expr_stmt><expr><call><name><name>channel</name>.<name>stat</name></name><argument_list>(<argument><expr><name>remotePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>SftpException</name></type> <name>e</name></decl></param>) <block>{
                    <if>if <condition>(<expr><name><name>e</name>.<name>id</name></name> == <name><name>ChannelSftp</name>.<name>SSH_FX_NO_SUCH_FILE</name></name></expr>)</condition><then> <block>{
                        <comment type="line">// dir does not exist.</comment>
                        <expr_stmt><expr><call><name><name>channel</name>.<name>mkdir</name></name><argument_list>(<argument><expr><name>remotePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <throw>throw <expr>new <call><name>JSchException</name><argument_list>(<argument><expr>"failed to access remote dir '"
                                                + <name>remotePath</name> + "'"</expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
                    }</block></else></if>
                }</block></catch></try>
                <expr_stmt><expr><call><name><name>channel</name>.<name>cd</name></name><argument_list>(<argument><expr><name>remotePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>SftpException</name></type> <name>e</name></decl></param>) <block>{
                <throw>throw <expr>new <call><name>JSchException</name><argument_list>(<argument><expr>"Could not CD to '" + <name>remotePath</name>
                                        + "' - " + <call><name><name>e</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
            <decl_stmt><decl><type><name>Directory</name></type> <name>current</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <try>try <block>{
                <for>for (<init><decl><type><name>Iterator</name></type> <name>i</name> =<init> <expr><call><name><name>directoryList</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>i</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
                    <expr_stmt><expr><name>current</name> = (<name>Directory</name>) <call><name><name>i</name>.<name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><call><name>getVerbose</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Sending directory " + <name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <expr_stmt><expr><call><name>sendDirectory</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
            }</block> <catch>catch (<param><decl><type><name>SftpException</name></type> <name>e</name></decl></param>) <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>msg</name> =<init> <expr>"Error sending directory"</expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>current</name> != <name>null</name> &amp;&amp; <call><name><name>current</name>.<name>getDirectory</name></name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>msg</name> += " '" + <call><name><name>current</name>.<name>getDirectory</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call> + "'"</expr>;</expr_stmt>
                }</block></then></if>
                <throw>throw <expr>new <call><name>JSchException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block> <finally>finally <block>{
            <if>if <condition>(<expr><name>channel</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>channel</name>.<name>disconnect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></finally></try>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>sendDirectory</name><parameter_list>(<param><decl><type><name>ChannelSftp</name></type> <name>channel</name></decl></param>,
                               <param><decl><type><name>Directory</name></type> <name>current</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>SftpException</name></expr></argument></throws> <block>{
        <for>for (<init><decl><type><name>Iterator</name></type> <name>fileIt</name> =<init> <expr><call><name><name>current</name>.<name>filesIterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>fileIt</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
            <expr_stmt><expr><call><name>sendFileToRemote</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr>(<name>File</name>) <call><name><name>fileIt</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <for>for (<init><decl><type><name>Iterator</name></type> <name>dirIt</name> =<init> <expr><call><name><name>current</name>.<name>directoryIterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>dirIt</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
            <decl_stmt><decl><type><name>Directory</name></type> <name>dir</name> =<init> <expr>(<name>Directory</name>) <call><name><name>dirIt</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>sendDirectoryToRemote</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>sendDirectoryToRemote</name><parameter_list>(<param><decl><type><name>ChannelSftp</name></type> <name>channel</name></decl></param>,
                                       <param><decl><type><name>Directory</name></type> <name>directory</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>SftpException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>dir</name> =<init> <expr><call><name><name>directory</name>.<name>getDirectory</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>channel</name>.<name>stat</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>SftpException</name></type> <name>e</name></decl></param>) <block>{
            <comment type="line">// dir does not exist.</comment>
            <if>if <condition>(<expr><name><name>e</name>.<name>id</name></name> == <name><name>ChannelSftp</name>.<name>SSH_FX_NO_SUCH_FILE</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>channel</name>.<name>mkdir</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></catch></try>
        <expr_stmt><expr><call><name><name>channel</name>.<name>cd</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sendDirectory</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>channel</name>.<name>cd</name></name><argument_list>(<argument><expr>".."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>sendFileToRemote</name><parameter_list>(<param><decl><type><name>ChannelSftp</name></type> <name>channel</name></decl></param>,
                                  <param><decl><type><name>File</name></type> <name>localFile</name></decl></param>,
                                  <param><decl><type><name>String</name></type> <name>remotePath</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>SftpException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>long</name></type> <name>filesize</name> =<init> <expr><call><name><name>localFile</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>remotePath</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>remotePath</name> = <call><name><name>localFile</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name>long</name></type> <name>startTime</name> =<init> <expr><call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>totalLength</name> =<init> <expr><name>filesize</name></expr></init></decl>;</decl_stmt>

        <comment type="line">// only track progress for files larger than 100kb in verbose mode</comment>
        <decl_stmt><decl><type><name>boolean</name></type> <name>trackProgress</name> =<init> <expr><call><name>getVerbose</name><argument_list>()</argument_list></call> &amp;&amp; <name>filesize</name> &gt; <name>HUNDRED_KILOBYTES</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>SftpProgressMonitor</name></type> <name>monitor</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>trackProgress</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>monitor</name> = <call><name>getProgressMonitor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <try>try <block>{
            <if>if <condition>(<expr><call><name><name>this</name>.<name>getVerbose</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Sending: " + <call><name><name>localFile</name>.<name>getName</name></name><argument_list>()</argument_list></call> + " : " + <name>filesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>channel</name>.<name>put</name></name><argument_list>(<argument><expr><call><name><name>localFile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>remotePath</name></expr></argument>, <argument><expr><name>monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
            <if>if <condition>(<expr><call><name><name>this</name>.<name>getVerbose</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>long</name></type> <name>endTime</name> =<init> <expr><call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>logStats</name><argument_list>(<argument><expr><name>startTime</name></expr></argument>, <argument><expr><name>endTime</name></expr></argument>, <argument><expr>(<name>int</name>) <name>totalLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></finally></try>
    }</block></function>

    <comment type="javadoc">/**
     * Get the local file.
     * @return the local file.
     */</comment>
    <function><type><specifier>public</specifier> <name>File</name></type> <name>getLocalFile</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>localFile</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the remote path.
     * @return the remote path.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getRemotePath</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>remotePath</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
