<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\ANTLR.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>BufferedReader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ByteArrayOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileReader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>AntClassLoader</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>Execute</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>LogOutputStream</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>PumpStreamHandler</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>condition</name>.<name>Os</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Commandline</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>CommandlineJava</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Path</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>JavaEnvUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>LoaderUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>TeeOutputStream</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>

<comment type="javadoc">/**
 *  Invokes the ANTLR Translator generator on a grammar file.
 *
 */</comment>
<class><specifier>public</specifier> class <name>ANTLR</name> <super><extends>extends <name>Task</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>CommandlineJava</name></type> <name>commandline</name> =<init> <expr>new <call><name>CommandlineJava</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** the file to process */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>targetFile</name></decl>;</decl_stmt>

    <comment type="javadoc">/** where to output the result */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>outputDirectory</name></decl>;</decl_stmt>

    <comment type="javadoc">/** an optional super grammar file */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>superGrammar</name></decl>;</decl_stmt>

    <comment type="javadoc">/** optional flag to enable html output */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>html</name></decl>;</decl_stmt>

    <comment type="javadoc">/** optional flag to print out a diagnostic file */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>diagnostic</name></decl>;</decl_stmt>

    <comment type="javadoc">/** optional flag to add trace methods */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>trace</name></decl>;</decl_stmt>

    <comment type="javadoc">/** optional flag to add trace methods to the parser only */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>traceParser</name></decl>;</decl_stmt>

    <comment type="javadoc">/** optional flag to add trace methods to the lexer only */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>traceLexer</name></decl>;</decl_stmt>

    <comment type="javadoc">/** optional flag to add trace methods to the tree walker only */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>traceTreeWalker</name></decl>;</decl_stmt>

    <comment type="javadoc">/** working directory */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>workingdir</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** captures ANTLR's output */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ByteArrayOutputStream</name></type> <name>bos</name> =<init> <expr>new <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The debug attribute */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>debug</name></decl>;</decl_stmt>


    <comment type="javadoc">/** Instance of a utility class to use for file operations. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>FileUtils</name></type> <name>FILE_UTILS</name> =<init> <expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Constructor for ANTLR task. */</comment>
    <constructor><specifier>public</specifier> <name>ANTLR</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>commandline</name>.<name>setVm</name></name><argument_list>(<argument><expr><call><name><name>JavaEnvUtils</name>.<name>getJreExecutable</name></name><argument_list>(<argument><expr>"java"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>commandline</name>.<name>setClassname</name></name><argument_list>(<argument><expr>"antlr.Tool"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * The grammar file to process.
     * @param target the gramer file
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTarget</name><parameter_list>(<param><decl><type><name>File</name></type> <name>target</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Setting target to: " + <call><name><name>target</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>targetFile</name></name> = <name>target</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The directory to write the generated files to.
     * @param outputDirectory the output directory
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOutputdirectory</name><parameter_list>(<param><decl><type><name>File</name></type> <name>outputDirectory</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Setting output directory to: " + <call><name><name>outputDirectory</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>outputDirectory</name></name> = <name>outputDirectory</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets an optional super grammar file.
     * Use setGlib(File superGrammar) instead.
     * @param superGrammar the super grammar filename
     * @deprecated  since ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setGlib</name><parameter_list>(<param><decl><type><name>String</name></type> <name>superGrammar</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>sg</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr>"dos"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>sg</name> = <call><name><name>superGrammar</name>.<name>replace</name></name><argument_list>(<argument><expr>'\\'</expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>sg</name> = <name>superGrammar</name></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><call><name>setGlib</name><argument_list>(<argument><expr><call><name><name>FILE_UTILS</name>.<name>resolveFile</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>sg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <comment type="javadoc">/**
     * Sets an optional super grammar file
     * @param superGrammar the super grammar file
     * @since ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setGlib</name><parameter_list>(<param><decl><type><name>File</name></type> <name>superGrammar</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>superGrammar</name></name> = <name>superGrammar</name></expr>;</expr_stmt>
    }</block></function>
    <comment type="javadoc">/**
     * Sets a flag to enable ParseView debugging
     * @param enable a &lt;code&gt;boolean&lt;/code&gt; value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDebug</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>enable</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>debug</name></name> = <name>enable</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * If true, emit html
     * @param enable a &lt;code&gt;boolean&lt;/code&gt; value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setHtml</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>enable</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>html</name> = <name>enable</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets a flag to emit diagnostic text
     * @param enable a &lt;code&gt;boolean&lt;/code&gt; value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDiagnostic</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>enable</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>diagnostic</name> = <name>enable</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * If true, enables all tracing.
     * @param enable a &lt;code&gt;boolean&lt;/code&gt; value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTrace</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>enable</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>trace</name> = <name>enable</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * If true, enables parser tracing.
     * @param enable a &lt;code&gt;boolean&lt;/code&gt; value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTraceParser</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>enable</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>traceParser</name> = <name>enable</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * If true, enables lexer tracing.
     * @param enable a &lt;code&gt;boolean&lt;/code&gt; value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTraceLexer</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>enable</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>traceLexer</name> = <name>enable</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets a flag to allow the user to enable tree walker tracing
     * @param enable a &lt;code&gt;boolean&lt;/code&gt; value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTraceTreeWalker</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>enable</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>traceTreeWalker</name> = <name>enable</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// we are forced to fork ANTLR since there is a call</comment>
    <comment type="line">// to System.exit() and there is nothing we can do</comment>
    <comment type="line">// right now to avoid this. :-( (SBa)</comment>
    <comment type="line">// I'm not removing this method to keep backward compatibility</comment>
    <comment type="javadoc">/**
     * @ant.attribute ignore="true"
     * @param s a &lt;code&gt;boolean&lt;/code&gt; value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFork</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
        <comment type="line">//this.fork = s;</comment>
    }</block></function>

    <comment type="javadoc">/**
     * The working directory of the process
     * @param d the working directory
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDir</name><parameter_list>(<param><decl><type><name>File</name></type> <name>d</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>workingdir</name></name> = <name>d</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a classpath to be set
     * because a directory might be given for Antlr debug.
     * @return a path to be configured
     */</comment>
    <function><type><specifier>public</specifier> <name>Path</name></type> <name>createClasspath</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>commandline</name>.<name>createClasspath</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>createPath</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a new JVM argument.
     * @return  create a new JVM argument so that any argument can be passed to the JVM.
     * @see #setFork(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Commandline</name>.<name>Argument</name></name></type> <name>createJvmarg</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>commandline</name>.<name>createVmArgument</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Adds the jars or directories containing Antlr
     * this should make the forked JVM work without having to
     * specify it directly.
     * @throws BuildException on error
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>init</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>addClasspathEntry</name><argument_list>(<argument><expr>"/antlr/ANTLRGrammarParseBehavior.class"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Search for the given resource and add the directory or archive
     * that contains it to the classpath.
     *
     * &lt;p&gt;Doesn't work for archives in JDK 1.1 as the URL returned by
     * getResource doesn't contain the name of the archive.&lt;/p&gt;
     * @param resource the resource name to search for
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>addClasspathEntry</name><parameter_list>(<param><decl><type><name>String</name></type> <name>resource</name></decl></param>)</parameter_list> <block>{
        <comment type="block">/*
         * pre Ant 1.6 this method used to call getClass().getResource
         * while Ant 1.6 will call ClassLoader.getResource().
         *
         * The difference is that Class.getResource expects a leading
         * slash for "absolute" resources and will strip it before
         * delegating to ClassLoader.getResource - so we now have to
         * emulate Class's behavior.
         */</comment>
        <if>if <condition>(<expr><call><name><name>resource</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"/"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>resource</name> = <call><name><name>resource</name>.<name>substring</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>resource</name> = "org/apache/tools/ant/taskdefs/optional/"
                + <name>resource</name></expr>;</expr_stmt>
        }</block></else></if>

        <decl_stmt><decl><type><name>File</name></type> <name>f</name> =<init> <expr><call><name><name>LoaderUtils</name>.<name>getResourceSource</name></name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call>.<call><name>getClassLoader</name><argument_list>()</argument_list></call></expr></argument>,
                                               <argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>f</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Found " + <call><name><name>f</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>createClasspath</name><argument_list>()</argument_list></call>.<call><name>setLocation</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Couldn\'t find " + <name>resource</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Execute the task.
     * @throws BuildException on error
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>validateAttributes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//TODO: use ANTLR to parse the grammar file to do this.</comment>
        <decl_stmt><decl><type><name>File</name></type> <name>generatedFile</name> =<init> <expr><call><name>getGeneratedFile</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>targetIsOutOfDate</name> =<init>
            <expr><call><name><name>targetFile</name>.<name>lastModified</name></name><argument_list>()</argument_list></call> &gt; <call><name><name>generatedFile</name>.<name>lastModified</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>superGrammarIsOutOfDate</name>  =<init> <expr><name>superGrammar</name> != <name>null</name>
                &amp;&amp; (<call><name><name>superGrammar</name>.<name>lastModified</name></name><argument_list>()</argument_list></call> &gt; <call><name><name>generatedFile</name>.<name>lastModified</name></name><argument_list>()</argument_list></call>)</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>targetIsOutOfDate</name> || <name>superGrammarIsOutOfDate</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>targetIsOutOfDate</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Compiling " + <name>targetFile</name> + " as it is newer than "
                    + <name>generatedFile</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Compiling " + <name>targetFile</name> + " as " + <name>superGrammar</name>
                    + " is newer than " + <name>generatedFile</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><call><name>populateAttributes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>commandline</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name><name>targetFile</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><call><name><name>commandline</name>.<name>describeCommand</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>err</name> =<init> <expr><call><name>run</name><argument_list>(<argument><expr><call><name><name>commandline</name>.<name>getCommandline</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>err</name> != 0</expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"ANTLR returned: " + <name>err</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then> <else>else <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>output</name> =<init> <expr><call><name><name>bos</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>output</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"error:"</expr></argument>)</argument_list></call> &gt; -1</expr>)</condition><then> <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"ANTLR signaled an error: "
                                             + <name>output</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if>
            }</block></else></if>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Skipped grammar file. Generated file " + <name>generatedFile</name>
                + " is newer."</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * A refactored method for populating all the command line arguments based
     * on the user-specified attributes.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>populateAttributes</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>commandline</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-o"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>commandline</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name><name>outputDirectory</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>superGrammar</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>commandline</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-glib"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>commandline</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name><name>superGrammar</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>html</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>commandline</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-html"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>diagnostic</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>commandline</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-diagnostic"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>trace</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>commandline</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-trace"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>traceParser</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>commandline</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-traceParser"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>traceLexer</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>commandline</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-traceLexer"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>traceTreeWalker</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name>is272</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>commandline</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-traceTreeParser"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>commandline</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-traceTreeWalker"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if>
        <if>if <condition>(<expr><name>debug</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>commandline</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-debug"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>validateAttributes</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>targetFile</name> == <name>null</name> || !<call><name><name>targetFile</name>.<name>isFile</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Invalid target: " + <name>targetFile</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <comment type="line">// if no output directory is specified, used the target's directory</comment>
        <if>if <condition>(<expr><name>outputDirectory</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>setOutputdirectory</name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>targetFile</name>.<name>getParent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>outputDirectory</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Invalid output directory: " + <name>outputDirectory</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>private</specifier> <name>File</name></type> <name>getGeneratedFile</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>generatedFileName</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <decl_stmt><decl><type><name>BufferedReader</name></type> <name>in</name> =<init> <expr>new <call><name>BufferedReader</name><argument_list>(<argument><expr>new <call><name>FileReader</name><argument_list>(<argument><expr><name>targetFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>line</name></decl>;</decl_stmt>
            <while>while <condition>(<expr>(<name>line</name> = <call><name><name>in</name>.<name>readLine</name></name><argument_list>()</argument_list></call>) != <name>null</name></expr>)</condition> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>extendsIndex</name> =<init> <expr><call><name><name>line</name>.<name>indexOf</name></name><argument_list>(<argument><expr>" extends "</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>line</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"class "</expr></argument>)</argument_list></call> &amp;&amp; <name>extendsIndex</name> &gt; -1</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>generatedFileName</name> = <call><name><name>line</name>.<name>substring</name></name><argument_list>(
                        <argument><expr>"class ".<call><name>length</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>extendsIndex</name></expr></argument>)</argument_list></call>.<call><name>trim</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                }</block></then></if>
            }</block></while>
            <expr_stmt><expr><call><name><name>in</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Unable to determine generated class"</expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
        <if>if <condition>(<expr><name>generatedFileName</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Unable to determine generated class"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr>new <call><name>File</name><argument_list>(<argument><expr><name>outputDirectory</name></expr></argument>, <argument><expr><name>generatedFileName</name>
                        + (<name>html</name> ? ".html" : ".java")</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/** execute in a forked VM */</comment>
    <function><type><specifier>private</specifier> <name>int</name></type> <name>run</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>command</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>PumpStreamHandler</name></type> <name>psh</name> =<init>
            <expr>new <call><name>PumpStreamHandler</name><argument_list>(<argument><expr>new <call><name>LogOutputStream</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                  <argument><expr>new <call><name>TeeOutputStream</name><argument_list>(
                                                      <argument><expr>new <call><name>LogOutputStream</name><argument_list>(<argument><expr><name>this</name></expr></argument>,
                                                                          <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                                      <argument><expr><name>bos</name></expr></argument>)</argument_list></call></expr></argument>
                                  )</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Execute</name></type> <name>exe</name> =<init> <expr>new <call><name>Execute</name><argument_list>(<argument><expr><name>psh</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>exe</name>.<name>setAntRun</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>workingdir</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>exe</name>.<name>setWorkingDirectory</name></name><argument_list>(<argument><expr><name>workingdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>exe</name>.<name>setCommandline</name></name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <return>return <expr><call><name><name>exe</name>.<name>execute</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>bos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <comment type="javadoc">/**
     * Whether the antlr version is 2.7.2 (or higher).
     *
     * @return true if the version of Antlr present is 2.7.2 or later.
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>is272</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>AntClassLoader</name></type> <name>l</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>l</name> = <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>createClassLoader</name><argument_list>(<argument><expr><call><name><name>commandline</name>.<name>getClasspath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>l</name>.<name>loadClass</name></name><argument_list>(<argument><expr>"antlr.Version"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>true</expr>;</return>
        }</block> <catch>catch (<param><decl><type><name>ClassNotFoundException</name></type> <name>e</name></decl></param>) <block>{
            <return>return <expr>false</expr>;</return>
        }</block></catch> <finally>finally <block>{
            <if>if <condition>(<expr><name>l</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>l</name>.<name>cleanup</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></finally></try>
    }</block></function>
}</block></class>
</unit>
