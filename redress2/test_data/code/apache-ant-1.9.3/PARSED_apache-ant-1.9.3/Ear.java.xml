<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\Ear.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>ZipFileSet</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>zip</name>.<name>ZipOutputStream</name></name>;</import>

<comment type="javadoc">/**
 * Creates a EAR archive. Based on WAR task
 *
 * @since Ant 1.4
 *
 * @ant.task category="packaging"
 */</comment>
<class><specifier>public</specifier> class <name>Ear</name> <super><extends>extends <name>Jar</name></extends></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>FileUtils</name></type> <name>FILE_UTILS</name> =<init> <expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>deploymentDescriptor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>descriptorAdded</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>XML_DESCRIPTOR_PATH</name> =<init> <expr>"META-INF/application.xml"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Create an Ear task.
     */</comment>
    <constructor><specifier>public</specifier> <name>Ear</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>archiveType</name> = "ear"</expr>;</expr_stmt>
        <expr_stmt><expr><name>emptyBehavior</name> = "create"</expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Set the destination file.
     * @param earFile the destination file
     * @deprecated since 1.5.x.
     *             Use setDestFile(destfile) instead.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setEarfile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>earFile</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setDestFile</name><argument_list>(<argument><expr><name>earFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * File to incorporate as application.xml.
     * @param descr the descriptor file
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAppxml</name><parameter_list>(<param><decl><type><name>File</name></type> <name>descr</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>deploymentDescriptor</name> = <name>descr</name></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name><name>deploymentDescriptor</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Deployment descriptor: "
                                     + <name>deploymentDescriptor</name>
                                     + " does not exist."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <comment type="line">// Create a ZipFileSet for this file, and pass it up.</comment>
        <decl_stmt><decl><type><name>ZipFileSet</name></type> <name>fs</name> =<init> <expr>new <call><name>ZipFileSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>fs</name>.<name>setFile</name></name><argument_list>(<argument><expr><name>deploymentDescriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>fs</name>.<name>setFullpath</name></name><argument_list>(<argument><expr><name>XML_DESCRIPTOR_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name>.<name>addFileset</name></name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Adds zipfileset.
     *
     * @param fs zipfileset to add
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addArchives</name><parameter_list>(<param><decl><type><name>ZipFileSet</name></type> <name>fs</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// We just set the prefix for this fileset, and pass it up.</comment>
        <comment type="line">// Do we need to do this? LH</comment>
        <expr_stmt><expr><call><name><name>fs</name>.<name>setPrefix</name></name><argument_list>(<argument><expr>"/"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name>.<name>addFileset</name></name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Initialize the output stream.
     * @param zOut the zip output stream.
     * @throws IOException on I/O errors
     * @throws BuildException on other errors
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>initZipOutputStream</name><parameter_list>(<param><decl><type><name>ZipOutputStream</name></type> <name>zOut</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <comment type="line">// If no webxml file is specified, it's an error.</comment>
        <if>if <condition>(<expr><name>deploymentDescriptor</name> == <name>null</name> &amp;&amp; !<call><name>isInUpdateMode</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"appxml attribute is required"</expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>super</name>.<name>initZipOutputStream</name></name><argument_list>(<argument><expr><name>zOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Overridden from Zip class to deal with application.xml
     * @param file the file to add to the archive
     * @param zOut the stream to write to
     * @param vPath the name this entry shall have in the archive
     * @param mode the Unix permissions to set.
     * @throws IOException on error
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>zipFile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>file</name></decl></param>, <param><decl><type><name>ZipOutputStream</name></type> <name>zOut</name></decl></param>, <param><decl><type><name>String</name></type> <name>vPath</name></decl></param>,
                           <param><decl><type><name>int</name></type> <name>mode</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <comment type="line">// If the file being added is META-INF/application.xml, we</comment>
        <comment type="line">// warn if it's not the one specified in the "appxml"</comment>
        <comment type="line">// attribute - or if it's being added twice, meaning the same</comment>
        <comment type="line">// file is specified by the "appxml" attribute and in a</comment>
        <comment type="line">// &lt;fileset&gt; element.</comment>
        <if>if <condition>(<expr><call><name><name>XML_DESCRIPTOR_PATH</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>vPath</name></expr></argument>)</argument_list></call></expr>)</condition><then>  <block>{
            <if>if <condition>(<expr><name>deploymentDescriptor</name> == <name>null</name>
                || !<call><name><name>FILE_UTILS</name>.<name>fileNameEquals</name></name><argument_list>(<argument><expr><name>deploymentDescriptor</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call>
                || <name>descriptorAdded</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>logWhenWriting</name><argument_list>(<argument><expr>"Warning: selected " + <name>archiveType</name>
                               + " files include a " + <name>XML_DESCRIPTOR_PATH</name>
                               + " which will"
                               + " be ignored (please use appxml attribute to "
                               + <name>archiveType</name> + " task)"</expr></argument>,
                               <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>super</name>.<name>zipFile</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>zOut</name></expr></argument>, <argument><expr><name>vPath</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>descriptorAdded</name> = true</expr>;</expr_stmt>
            }</block></else></if>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>super</name>.<name>zipFile</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>zOut</name></expr></argument>, <argument><expr><name>vPath</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Make sure we don't think we already have a application.xml next
     * time this task gets executed.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>cleanUp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>descriptorAdded</name> = false</expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name>.<name>cleanUp</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
