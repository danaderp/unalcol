<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\util\SplitClassLoader.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>AntClassLoader</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Path</name></name>;</import>

<comment type="javadoc">/**
 * Specialized classloader for tasks that need finer grained control
 * over which classes are to be loaded via Ant's classloader and which
 * should not even if they are available.
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>SplitClassLoader</name> <super><extends>extends <name>AntClassLoader</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name><index>[]</index></type> <name>splitClasses</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * @param splitClasses classes contained herin will not be loaded
     * via Ant's classloader
     */</comment>
    <constructor><specifier>public</specifier> <name>SplitClassLoader</name><parameter_list>(<param><decl><type><name>ClassLoader</name></type> <name>parent</name></decl></param>, <param><decl><type><name>Path</name></type> <name>path</name></decl></param>, <param><decl><type><name>Project</name></type> <name>project</name></decl></param>,
                            <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>splitClasses</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>project</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>splitClasses</name></name> = <name>splitClasses</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="line">// forceLoadClass is not convenient here since it would not</comment>
    <comment type="line">// properly deal with inner classes of these classes.</comment>
    <function><type><specifier>protected</specifier> <specifier>synchronized</specifier> <name>Class</name></type> <name>loadClass</name><parameter_list>(<param><decl><type><name>String</name></type> <name>classname</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>resolve</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>Class</name></type> <name>theClass</name> =<init> <expr><call><name>findLoadedClass</name><argument_list>(<argument><expr><name>classname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>theClass</name> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>theClass</name></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>isSplit</name><argument_list>(<argument><expr><name>classname</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>theClass</name> = <call><name>findClass</name><argument_list>(<argument><expr><name>classname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>resolve</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>resolveClass</name><argument_list>(<argument><expr><name>theClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <return>return <expr><name>theClass</name></expr>;</return>
        }</block></then> <else>else <block>{
            <return>return <expr><call><name><name>super</name>.<name>loadClass</name></name><argument_list>(<argument><expr><name>classname</name></expr></argument>, <argument><expr><name>resolve</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>isSplit</name><parameter_list>(<param><decl><type><name>String</name></type> <name>classname</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>simplename</name> =<init> <expr><call><name><name>classname</name>.<name>substring</name></name><argument_list>(<argument><expr><call><name><name>classname</name>.<name>lastIndexOf</name></name><argument_list>(<argument><expr>'.'</expr></argument>)</argument_list></call> + 1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>splitClasses</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <if>if <condition>(<expr><call><name><name>simplename</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>splitClasses</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call>
                || <call><name><name>simplename</name>.<name>startsWith</name></name><argument_list>(<argument><expr><name><name>splitClasses</name><index>[<expr><name>i</name></expr>]</index></name> + '$'</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>true</expr>;</return>
            }</block></then></if>
        }</block></for>
        <return>return <expr>false</expr>;</return>
    }</block></function>

}</block></class>
</unit>
