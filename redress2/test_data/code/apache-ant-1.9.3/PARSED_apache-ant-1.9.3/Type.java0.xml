<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\types\resources\selectors\Type.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>selectors</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Resource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>EnumeratedAttribute</name></name>;</import>

<comment type="javadoc">/**
 * Type file/dir ResourceSelector.
 * @since Ant 1.7
 */</comment>
<class><specifier>public</specifier> class <name>Type</name> <super><implements>implements <name>ResourceSelector</name></implements></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FILE_ATTR</name> =<init> <expr>"file"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DIR_ATTR</name> =<init> <expr>"dir"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ANY_ATTR</name> =<init> <expr>"any"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Static file type selector. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Type</name></type> <name>FILE</name> =<init> <expr>new <call><name>Type</name><argument_list>(<argument><expr>new <call><name>FileDir</name><argument_list>(<argument><expr><name>FILE_ATTR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Static dir type selector. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Type</name></type> <name>DIR</name> =<init> <expr>new <call><name>Type</name><argument_list>(<argument><expr>new <call><name>FileDir</name><argument_list>(<argument><expr><name>DIR_ATTR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Static any type selector. Since Ant 1.8. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Type</name></type> <name>ANY</name> =<init> <expr>new <call><name>Type</name><argument_list>(<argument><expr>new <call><name>FileDir</name><argument_list>(<argument><expr><name>ANY_ATTR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Implements the type attribute.
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>FileDir</name> <super><extends>extends <name>EnumeratedAttribute</name></extends></super> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name><index>[]</index></type> <name>VALUES</name> =<init> <expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr><name>FILE_ATTR</name></expr>, <expr><name>DIR_ATTR</name></expr>, <expr><name>ANY_ATTR</name></expr> }</block></expr></init></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * Default constructor.
         */</comment>
        <constructor><specifier>public</specifier> <name>FileDir</name><parameter_list>()</parameter_list> <block>{
        }</block></constructor>

        <comment type="javadoc">/**
         * Convenience constructor.
         * @param value the String EnumeratedAttribute value.
         */</comment>
        <constructor><specifier>public</specifier> <name>FileDir</name><parameter_list>(<param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>setValue</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="javadoc">/**
         * Return the possible values.
         * @return a String array.
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getValues</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>VALUES</name></expr>;</return>
        }</block></function>
    }</block></class>

    <decl_stmt><decl><type><specifier>private</specifier> <name>FileDir</name></type> <name>type</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Default constructor.
     */</comment>
    <constructor><specifier>public</specifier> <name>Type</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <comment type="javadoc">/**
     * Convenience constructor.
     * @param fd the FileDir type.
     */</comment>
    <constructor><specifier>public</specifier> <name>Type</name><parameter_list>(<param><decl><type><name>FileDir</name></type> <name>fd</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setType</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Set type; file|dir.
     * @param fd a FileDir object.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setType</name><parameter_list>(<param><decl><type><name>FileDir</name></type> <name>fd</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>type</name> = <name>fd</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Return true if this Resource is selected.
     * @param r the Resource to check.
     * @return whether the Resource was selected.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSelected</name><parameter_list>(<param><decl><type><name>Resource</name></type> <name>r</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>type</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"The type attribute is required."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> =<init> <expr><call><name><name>type</name>.<name>getIndex</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>i</name> == 2 || (<call><name><name>r</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call> ? <name>i</name> == 1 : <name>i</name> == 0)</expr>;</return>
    }</block></function>

}</block></class>
</unit>
