<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\War.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>ZipFileSet</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>zip</name>.<name>ZipOutputStream</name></name>;</import>


<comment type="javadoc">/**
 * An extension of &amp;lt;jar&amp;gt; to create a WAR archive.
 * Contains special treatment for files that should end up in the
 * &lt;code&gt;WEB-INF/lib&lt;/code&gt;, &lt;code&gt;WEB-INF/classes&lt;/code&gt; or
 * &lt;code&gt;WEB-INF&lt;/code&gt; directories of the Web Application Archive.&lt;/p&gt;
 * &lt;p&gt;(The War task is a shortcut for specifying the particular layout of a WAR file.
 * The same thing can be accomplished by using the &lt;i&gt;prefix&lt;/i&gt; and &lt;i&gt;fullpath&lt;/i&gt;
 * attributes of zipfilesets in a Zip or Jar task.)&lt;/p&gt;
 * &lt;p&gt;The extended zipfileset element from the zip task
 * (with attributes &lt;i&gt;prefix&lt;/i&gt;, &lt;i&gt;fullpath&lt;/i&gt;, and &lt;i&gt;src&lt;/i&gt;)
 * is available in the War task.&lt;/p&gt;
 *
 * @since Ant 1.2
 *
 * @ant.task category="packaging"
 * @see Jar
 */</comment>
<class><specifier>public</specifier> class <name>War</name> <super><extends>extends <name>Jar</name></extends></super> <block>{

    <comment type="javadoc">/**
     * our web.xml deployment descriptor
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>deploymentDescriptor</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * flag set if the descriptor is added
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>needxmlfile</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>addedWebXmlFile</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>FileUtils</name></type> <name>FILE_UTILS</name> =<init> <expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** path to web.xml file */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>XML_DESCRIPTOR_PATH</name> =<init> <expr>"WEB-INF/web.xml"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Constructor for the War Task. */</comment>
    <constructor><specifier>public</specifier> <name>War</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>archiveType</name> = "war"</expr>;</expr_stmt>
        <expr_stmt><expr><name>emptyBehavior</name> = "create"</expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * &lt;i&gt;Deprecated&lt;i&gt; name of the file to create
     * -use &lt;tt&gt;destfile&lt;/tt&gt; instead.
     * @param warFile the destination file
     * @deprecated since 1.5.x.
     *             Use setDestFile(File) instead
     * @ant.attribute ignore="true"
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setWarfile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>warFile</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setDestFile</name><argument_list>(<argument><expr><name>warFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * set the deployment descriptor to use (WEB-INF/web.xml);
     * required unless &lt;tt&gt;update=true&lt;/tt&gt;
     * @param descr the deployment descriptor file
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setWebxml</name><parameter_list>(<param><decl><type><name>File</name></type> <name>descr</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>deploymentDescriptor</name> = <name>descr</name></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name><name>deploymentDescriptor</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Deployment descriptor: "
                                     + <name>deploymentDescriptor</name>
                                     + " does not exist."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <comment type="line">// Create a ZipFileSet for this file, and pass it up.</comment>
        <decl_stmt><decl><type><name>ZipFileSet</name></type> <name>fs</name> =<init> <expr>new <call><name>ZipFileSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>fs</name>.<name>setFile</name></name><argument_list>(<argument><expr><name>deploymentDescriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>fs</name>.<name>setFullpath</name></name><argument_list>(<argument><expr><name>XML_DESCRIPTOR_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name>.<name>addFileset</name></name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Set the policy on the web.xml file, that is, whether or not it is needed
     * @param needxmlfile whether a web.xml file is needed. Default: true
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setNeedxmlfile</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>needxmlfile</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>needxmlfile</name></name> = <name>needxmlfile</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * add files under WEB-INF/lib/
     * @param fs the zip file set to add
     */</comment>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addLib</name><parameter_list>(<param><decl><type><name>ZipFileSet</name></type> <name>fs</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// We just set the prefix for this fileset, and pass it up.</comment>
        <expr_stmt><expr><call><name><name>fs</name>.<name>setPrefix</name></name><argument_list>(<argument><expr>"WEB-INF/lib/"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name>.<name>addFileset</name></name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * add files under WEB-INF/classes
     * @param fs the zip file set to add
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addClasses</name><parameter_list>(<param><decl><type><name>ZipFileSet</name></type> <name>fs</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// We just set the prefix for this fileset, and pass it up.</comment>
        <expr_stmt><expr><call><name><name>fs</name>.<name>setPrefix</name></name><argument_list>(<argument><expr>"WEB-INF/classes/"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name>.<name>addFileset</name></name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * files to add under WEB-INF;
     * @param fs the zip file set to add
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addWebinf</name><parameter_list>(<param><decl><type><name>ZipFileSet</name></type> <name>fs</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// We just set the prefix for this fileset, and pass it up.</comment>
        <expr_stmt><expr><call><name><name>fs</name>.<name>setPrefix</name></name><argument_list>(<argument><expr>"WEB-INF/"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name>.<name>addFileset</name></name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * override of  parent; validates configuration
     * before initializing the output stream.
     * @param zOut the zip output stream
     * @throws IOException on output error
     * @throws BuildException if invalid configuration
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>initZipOutputStream</name><parameter_list>(<param><decl><type><name>ZipOutputStream</name></type> <name>zOut</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>super</name>.<name>initZipOutputStream</name></name><argument_list>(<argument><expr><name>zOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Overridden from Zip class to deal with web.xml
     *
     * Here are cases that can arise
     * -not a web.xml file : add
     * -first web.xml : add, remember we added it
     * -same web.xml again: skip
     * -alternate web.xml : warn and skip
     *
     * @param file the file to add to the archive
     * @param zOut the stream to write to
     * @param vPath the name this entry shall have in the archive
     * @param mode the Unix permissions to set.
     * @throws IOException on output error
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>zipFile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>file</name></decl></param>, <param><decl><type><name>ZipOutputStream</name></type> <name>zOut</name></decl></param>, <param><decl><type><name>String</name></type> <name>vPath</name></decl></param>,
                           <param><decl><type><name>int</name></type> <name>mode</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <comment type="line">// If the file being added is WEB-INF/web.xml, we warn if it's</comment>
        <comment type="line">// not the one specified in the "webxml" attribute - or if</comment>
        <comment type="line">// it's being added twice, meaning the same file is specified</comment>
        <comment type="line">// by the "webxml" attribute and in a &lt;fileset&gt; element.</comment>
        <comment type="line">//by default, we add the file.</comment>
        <decl_stmt><decl><type><name>boolean</name></type> <name>addFile</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>XML_DESCRIPTOR_PATH</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>vPath</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">//a web.xml file was found. See if it is a duplicate or not</comment>
            <if>if <condition>(<expr><name>addedWebXmlFile</name> != <name>null</name></expr>)</condition><then> <block>{
                <comment type="line">//a second web.xml file, so skip it</comment>
                <expr_stmt><expr><name>addFile</name> = false</expr>;</expr_stmt>
                <comment type="line">//check to see if we warn or not</comment>
                <if>if <condition>(<expr>!<call><name><name>FILE_UTILS</name>.<name>fileNameEquals</name></name><argument_list>(<argument><expr><name>addedWebXmlFile</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>logWhenWriting</name><argument_list>(<argument><expr>"Warning: selected " + <name>archiveType</name>
                                   + " files include a second "
                                   + <name>XML_DESCRIPTOR_PATH</name>
                                   + " which will be ignored.\n"
                                   + "The duplicate entry is at " + <name>file</name> + '\n'
                                   + "The file that will be used is "
                                   + <name>addedWebXmlFile</name></expr></argument>,
                                   <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then> <else>else <block>{
                <comment type="line">//no added file, yet</comment>
                <expr_stmt><expr><name>addedWebXmlFile</name> = <name>file</name></expr>;</expr_stmt>
                <comment type="line">//there is no web.xml file, so add it</comment>
                <expr_stmt><expr><name>addFile</name> = true</expr>;</expr_stmt>
                <comment type="line">//and remember that we did</comment>
                <expr_stmt><expr><name>deploymentDescriptor</name> = <name>file</name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if>
        <if>if <condition>(<expr><name>addFile</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>super</name>.<name>zipFile</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>zOut</name></expr></argument>, <argument><expr><name>vPath</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>


    <comment type="javadoc">/**
     * Make sure we don't think we already have a web.xml next time this task
     * gets executed.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>cleanUp</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>addedWebXmlFile</name> == <name>null</name>
            &amp;&amp; <name>deploymentDescriptor</name> == <name>null</name>
            &amp;&amp; <name>needxmlfile</name>
            &amp;&amp; !<call><name>isInUpdateMode</name><argument_list>()</argument_list></call>
            &amp;&amp; <call><name>hasUpdatedFile</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"No WEB-INF/web.xml file was added.\n"
                    + "If this is your intent, set needxmlfile='false' "</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name>addedWebXmlFile</name> = <name>null</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name>.<name>cleanUp</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
