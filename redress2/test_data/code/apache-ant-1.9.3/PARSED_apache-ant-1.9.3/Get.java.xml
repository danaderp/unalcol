<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\Get.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileNotFoundException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>OutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>PrintStream</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>HttpURLConnection</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>URL</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>URLConnection</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Date</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>MagicNames</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Main</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Mapper</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Resource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>ResourceCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>Resources</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>URLProvider</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>URLResource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileNameMapper</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>

<comment type="javadoc">/**
 * Gets a particular file from a URL source.
 * Options include verbose reporting, timestamp based fetches and controlling
 * actions on failures. NB: access through a firewall only works if the whole
 * Java runtime is correctly configured.
 *
 * @since Ant 1.1
 *
 * @ant.task category="network"
 */</comment>
<class><specifier>public</specifier> class <name>Get</name> <super><extends>extends <name>Task</name></extends></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>NUMBER_RETRIES</name> =<init> <expr>3</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DOTS_PER_LINE</name> =<init> <expr>50</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>BIG_BUFFER_SIZE</name> =<init> <expr>100 * 1024</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>FileUtils</name></type> <name>FILE_UTILS</name> =<init> <expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>REDIRECT_LIMIT</name> =<init> <expr>25</expr></init></decl>;</decl_stmt>
    <comment type="line">// HttpURLConnection doesn't have a constant for this in Java5 and</comment>
    <comment type="line">// what it calls HTTP_MOVED_TEMP would better be FOUND</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>HTTP_MOVED_TEMP</name> =<init> <expr>307</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>HTTP</name> =<init> <expr>"http"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>HTTPS</name> =<init> <expr>"https"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEFAULT_AGENT_PREFIX</name> =<init> <expr>"Apache Ant"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Resources</name></type> <name>sources</name> =<init> <expr>new <call><name>Resources</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>destination</name></decl>;</decl_stmt> <comment type="line">// required</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>verbose</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>useTimestamp</name> =<init> <expr>false</expr></init></decl>;</decl_stmt> <comment type="line">//off by default</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>ignoreErrors</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>uname</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>pword</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>maxTime</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>numberRetries</name> =<init> <expr><name>NUMBER_RETRIES</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>skipExisting</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>httpUseCaches</name> =<init> <expr>true</expr></init></decl>;</decl_stmt> <comment type="line">// on by default</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Mapper</name></type> <name>mapperElement</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>userAgent</name> =<init> 
        <expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr><name><name>MagicNames</name>.<name>HTTP_AGENT_PROPERTY</name></name></expr></argument>,
                           <argument><expr><name>DEFAULT_AGENT_PREFIX</name> + "/"
                           + <call><name><name>Main</name>.<name>getShortAntVersion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Does the work.
     *
     * @exception BuildException Thrown in unrecoverable error.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>checkAttributes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <for>for (<init><decl><type><name>Resource</name></type> <name>r</name> :<range> <expr><name>sources</name></expr></range></decl></init>) <block>{
            <decl_stmt><decl><type><name>URLProvider</name></type> <name>up</name> =<init> <expr><call><name><name>r</name>.<name>as</name></name><argument_list>(<argument><expr><name><name>URLProvider</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>URL</name></type> <name>source</name> =<init> <expr><call><name><name>up</name>.<name>getURL</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>File</name></type> <name>dest</name> =<init> <expr><name>destination</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>destination</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>mapperElement</name> == <name>null</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>String</name></type> <name>path</name> =<init> <expr><call><name><name>source</name>.<name>getPath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><call><name><name>path</name>.<name>endsWith</name></name><argument_list>(<argument><expr>"/"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>path</name> = <call><name><name>path</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>path</name>.<name>length</name></name><argument_list>()</argument_list></call> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <decl_stmt><decl><type><name>int</name></type> <name>slash</name> =<init> <expr><call><name><name>path</name>.<name>lastIndexOf</name></name><argument_list>(<argument><expr>"/"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>slash</name> &gt; -1</expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>path</name> = <call><name><name>path</name>.<name>substring</name></name><argument_list>(<argument><expr><name>slash</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <expr_stmt><expr><name>dest</name> = new <call><name>File</name><argument_list>(<argument><expr><name>destination</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <decl_stmt><decl><type><name>FileNameMapper</name></type> <name>mapper</name> =<init> <expr><call><name><name>mapperElement</name>.<name>getImplementation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>d</name> =<init> <expr><call><name><name>mapper</name>.<name>mapFileName</name></name><argument_list>(<argument><expr><call><name><name>source</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>d</name> == <name>null</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"skipping " + <name>r</name> + " - mapper can't handle it"</expr></argument>,
                            <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <continue>continue;</continue>
                    }</block></then> <else>else <if>if <condition>(<expr><name><name>d</name>.<name>length</name></name> == 0</expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"skipping " + <name>r</name> + " - mapper returns no file name"</expr></argument>,
                            <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <continue>continue;</continue>
                    }</block></then> <else>else <if>if <condition>(<expr><name><name>d</name>.<name>length</name></name> &gt; 1</expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"skipping " + <name>r</name> + " - mapper returns multiple file"
                            + " names"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <continue>continue;</continue>
                    }</block></then></if></else></if></else></if>
                    <expr_stmt><expr><name>dest</name> = new <call><name>File</name><argument_list>(<argument><expr><name>destination</name></expr></argument>, <argument><expr><name><name>d</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then></if>

        <comment type="line">//set up logging</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>logLevel</name> =<init> <expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DownloadProgress</name></type> <name>progress</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>verbose</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>progress</name> = new <call><name>VerboseProgress</name><argument_list>(<argument><expr><name><name>System</name>.<name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">//execute the get</comment>
        <try>try <block>{
            <expr_stmt><expr><call><name>doGet</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>logLevel</name></expr></argument>, <argument><expr><name>progress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ioe</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Error getting " + <name>source</name> + " to " + <name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>ignoreErrors</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>ioe</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
        }</block></catch></try>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * make a get request, with the supplied progress and logging info.
     * All the other config parameters are set at the task level,
     * source, dest, ignoreErrors, etc.
     * @param logLevel level to log at, see {@link Project#log(String, int)}
     * @param progress progress callback; null for no-callbacks
     * @return true for a successful download, false otherwise.
     * The return value is only relevant when {@link #ignoreErrors} is true, as
     * when false all failures raise BuildExceptions.
     * @throws IOException for network trouble
     * @throws BuildException for argument errors, or other trouble when ignoreErrors
     * is false.
     * @deprecated only gets the first configured resource
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>doGet</name><parameter_list>(<param><decl><type><name>int</name></type> <name>logLevel</name></decl></param>, <param><decl><type><name>DownloadProgress</name></type> <name>progress</name></decl></param>)</parameter_list>
            <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>checkAttributes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>Resource</name></type> <name>r</name> :<range> <expr><name>sources</name></expr></range></decl></init>) <block>{
            <decl_stmt><decl><type><name>URLProvider</name></type> <name>up</name> =<init> <expr><call><name><name>r</name>.<name>as</name></name><argument_list>(<argument><expr><name><name>URLProvider</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>URL</name></type> <name>source</name> =<init> <expr><call><name><name>up</name>.<name>getURL</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name>doGet</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>destination</name></expr></argument>, <argument><expr><name>logLevel</name></expr></argument>, <argument><expr><name>progress</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></for>
        <comment type="block">/*NOTREACHED*/</comment>
        <return>return <expr>false</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * make a get request, with the supplied progress and logging info.
     *
     * All the other config parameters like ignoreErrors are set at
     * the task level.
     * @param source the URL to get
     * @param dest the target file
     * @param logLevel level to log at, see {@link Project#log(String, int)}
     * @param progress progress callback; null for no-callbacks
     * @return true for a successful download, false otherwise.
     * The return value is only relevant when {@link #ignoreErrors} is true, as
     * when false all failures raise BuildExceptions.
     * @throws IOException for network trouble
     * @throws BuildException for argument errors, or other trouble when ignoreErrors
     * is false.
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>doGet</name><parameter_list>(<param><decl><type><name>URL</name></type> <name>source</name></decl></param>, <param><decl><type><name>File</name></type> <name>dest</name></decl></param>, <param><decl><type><name>int</name></type> <name>logLevel</name></decl></param>,
                         <param><decl><type><name>DownloadProgress</name></type> <name>progress</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{

        <if>if <condition>(<expr><call><name><name>dest</name>.<name>exists</name></name><argument_list>()</argument_list></call> &amp;&amp; <name>skipExisting</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Destination already exists (skipping): "
                + <call><name><name>dest</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>logLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>true</expr>;</return>
        }</block></then></if>

        <comment type="line">//dont do any progress, unless asked</comment>
        <if>if <condition>(<expr><name>progress</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>progress</name> = new <call><name>NullProgress</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Getting: " + <name>source</name></expr></argument>, <argument><expr><name>logLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"To: " + <call><name><name>dest</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>logLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//set the timestamp to the file date.</comment>
        <decl_stmt><decl><type><name>long</name></type> <name>timestamp</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>boolean</name></type> <name>hasTimestamp</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>useTimestamp</name> &amp;&amp; <call><name><name>dest</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>timestamp</name> = <call><name><name>dest</name>.<name>lastModified</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>verbose</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>Date</name></type> <name>t</name> =<init> <expr>new <call><name>Date</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"local file date : " + <call><name><name>t</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>logLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>hasTimestamp</name> = true</expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name>GetThread</name></type> <name>getThread</name> =<init> <expr>new <call><name>GetThread</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>,
                                            <argument><expr><name>hasTimestamp</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>progress</name></expr></argument>,
                                            <argument><expr><name>logLevel</name></expr></argument>, <argument><expr><name>userAgent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>getThread</name>.<name>setDaemon</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>registerThreadTask</name><argument_list>(<argument><expr><name>getThread</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>getThread</name>.<name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>getThread</name>.<name>join</name></name><argument_list>(<argument><expr><name>maxTime</name> * 1000</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>InterruptedException</name></type> <name>ie</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"interrupted waiting for GET to finish"</expr></argument>,
                <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <if>if <condition>(<expr><call><name><name>getThread</name>.<name>isAlive</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>msg</name> =<init> <expr>"The GET operation took longer than " + <name>maxTime</name>
                + " seconds, stopping it."</expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>ignoreErrors</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>getThread</name>.<name>closeStreams</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>ignoreErrors</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <return>return <expr>false</expr>;</return>
        }</block></then></if>

        <return>return <expr><call><name><name>getThread</name>.<name>wasSuccessful</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Check the attributes.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>checkAttributes</name><parameter_list>()</parameter_list> <block>{

        <if>if <condition>(<expr><name>userAgent</name> == <name>null</name> || <call><name><name>userAgent</name>.<name>trim</name></name><argument_list>()</argument_list></call>.<call><name>length</name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"userAgent may not be null or empty"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr><call><name><name>sources</name>.<name>size</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"at least one source is required"</expr></argument>,
                                     <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <for>for (<init><decl><type><name>Resource</name></type> <name>r</name> :<range> <expr><name>sources</name></expr></range></decl></init>) <block>{
            <decl_stmt><decl><type><name>URLProvider</name></type> <name>up</name> =<init> <expr><call><name><name>r</name>.<name>as</name></name><argument_list>(<argument><expr><name><name>URLProvider</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>up</name> == <name>null</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Only URLProvider resources are"
                                         + " supported"</expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
        }</block></for>

        <if>if <condition>(<expr><name>destination</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"dest attribute is required"</expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr><call><name><name>destination</name>.<name>exists</name></name><argument_list>()</argument_list></call> &amp;&amp; <call><name><name>sources</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 1
            &amp;&amp; !<call><name><name>destination</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"The specified destination is not a"
                                     + " directory"</expr></argument>,
                                     <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr><call><name><name>destination</name>.<name>exists</name></name><argument_list>()</argument_list></call> &amp;&amp; !<call><name><name>destination</name>.<name>canWrite</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Can't write to "
                                     + <call><name><name>destination</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>,
                                     <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr><call><name><name>sources</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 1 &amp;&amp; !<call><name><name>destination</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>destination</name>.<name>mkdirs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Set an URL to get.
     *
     * @param u URL for the file.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSrc</name><parameter_list>(<param><decl><type><name>URL</name></type> <name>u</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr>new <call><name>URLResource</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Adds URLs to get.
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>ResourceCollection</name></type> <name>rc</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>sources</name>.<name>add</name></name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Where to copy the source file.
     *
     * @param dest Path to file.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDest</name><parameter_list>(<param><decl><type><name>File</name></type> <name>dest</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>destination</name></name> = <name>dest</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * If true, show verbose progress information.
     *
     * @param v if "true" then be verbose
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setVerbose</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>v</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>verbose</name> = <name>v</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * If true, log errors but do not treat as fatal.
     *
     * @param v if "true" then don't report download errors up to ant
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setIgnoreErrors</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>v</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>ignoreErrors</name> = <name>v</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * If true, conditionally download a file based on the timestamp
     * of the local copy.
     *
     * &lt;p&gt;In this situation, the if-modified-since header is set so
     * that the file is only fetched if it is newer than the local
     * file (or there is no local file) This flag is only valid on
     * HTTP connections, it is ignored in other cases.  When the flag
     * is set, the local copy of the downloaded file will also have
     * its timestamp set to the remote file time.&lt;/p&gt;
     *
     * &lt;p&gt;Note that remote files of date 1/1/1970 (GMT) are treated as
     * 'no timestamp', and web servers often serve files with a
     * timestamp in the future by replacing their timestamp with that
     * of the current time. Also, inter-computer clock differences can
     * cause no end of grief.&lt;/p&gt;
     * @param v "true" to enable file time fetching
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUseTimestamp</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>v</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>useTimestamp</name> = <name>v</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Username for basic auth.
     *
     * @param u username for authentication
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUsername</name><parameter_list>(<param><decl><type><name>String</name></type> <name>u</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>uname</name></name> = <name>u</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * password for the basic authentication.
     *
     * @param p password for authentication
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPassword</name><parameter_list>(<param><decl><type><name>String</name></type> <name>p</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>pword</name></name> = <name>p</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The time in seconds the download is allowed to take before
     * being terminated.
     *
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMaxTime</name><parameter_list>(<param><decl><type><name>long</name></type> <name>maxTime</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>maxTime</name></name> = <name>maxTime</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The number of retries to attempt upon error, defaults to 3.
     *
     * @param r retry count
     *
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRetries</name><parameter_list>(<param><decl><type><name>int</name></type> <name>r</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>numberRetries</name></name> = <name>r</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Skip files that already exist locally.
     *
     * @param s "true" to skip existing destination files
     *
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSkipExisting</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>skipExisting</name></name> = <name>s</name></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * HTTP connections only - set the user-agent to be used
     * when communicating with remote server. if null, then
     * the value is considered unset and the behaviour falls
     * back to the default of the http API.
     *
     * @since Ant 1.9.3
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUserAgent</name><parameter_list>(<param><decl><type><name>String</name></type> <name>userAgent</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>userAgent</name></name> = <name>userAgent</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * HTTP connections only - control caching on the
     * HttpUrlConnection: httpConnection.setUseCaches(); if false, do
     * not allow caching on the HttpUrlConnection.
     *
     * &lt;p&gt;Defaults to true (allow caching, which is also the
     * HttpUrlConnection default value.&lt;/p&gt;
     *
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setHttpUseCaches</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>httpUseCache</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>httpUseCaches</name></name> = <name>httpUseCache</name></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Define the mapper to map source to destination files.
     * @return a mapper to be configured.
     * @exception BuildException if more than one mapper is defined.
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>Mapper</name></type> <name>createMapper</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>mapperElement</name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Cannot define more than one mapper"</expr></argument>,
                                     <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name>mapperElement</name> = new <call><name>Mapper</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>mapperElement</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Add a nested filenamemapper.
     * @param fileNameMapper the mapper to add.
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>FileNameMapper</name></type> <name>fileNameMapper</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>createMapper</name><argument_list>()</argument_list></call>.<call><name>add</name><argument_list>(<argument><expr><name>fileNameMapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Provide this for Backward Compatibility.
     */</comment>
    <class><specifier>protected</specifier> <specifier>static</specifier> class <name>Base64Converter</name>
        <super><extends>extends <name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>Base64Converter</name></extends></super> <block>{
    }</block></class>

    <comment type="javadoc">/**
     * Interface implemented for reporting
     * progress of downloading.
     */</comment>
    <class type="interface"><specifier>public</specifier> interface <name>DownloadProgress</name> <block>{
        <comment type="javadoc">/**
         * begin a download
         */</comment>
        <function_decl><type><name>void</name></type> <name>beginDownload</name><parameter_list>()</parameter_list>;</function_decl>

        <comment type="javadoc">/**
         * tick handler
         *
         */</comment>
        <function_decl><type><name>void</name></type> <name>onTick</name><parameter_list>()</parameter_list>;</function_decl>

        <comment type="javadoc">/**
         * end a download
         */</comment>
        <function_decl><type><name>void</name></type> <name>endDownload</name><parameter_list>()</parameter_list>;</function_decl>
    }</block></class>

    <comment type="javadoc">/**
     * do nothing with progress info
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>NullProgress</name> <super><implements>implements <name>DownloadProgress</name></implements></super> <block>{

        <comment type="javadoc">/**
         * begin a download
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>beginDownload</name><parameter_list>()</parameter_list> <block>{

        }</block></function>

        <comment type="javadoc">/**
         * tick handler
         *
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>onTick</name><parameter_list>()</parameter_list> <block>{
        }</block></function>

        <comment type="javadoc">/**
         * end a download
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>endDownload</name><parameter_list>()</parameter_list> <block>{

        }</block></function>
    }</block></class>

    <comment type="javadoc">/**
     * verbose progress system prints to some output stream
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>VerboseProgress</name> <super><implements>implements <name>DownloadProgress</name></implements></super>  <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>dots</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <comment type="line">// CheckStyle:VisibilityModifier OFF - bc</comment>
        <decl_stmt><decl><type><name>PrintStream</name></type> <name>out</name></decl>;</decl_stmt>
        <comment type="line">// CheckStyle:VisibilityModifier ON</comment>

        <comment type="javadoc">/**
         * Construct a verbose progress reporter.
         * @param out the output stream.
         */</comment>
        <constructor><specifier>public</specifier> <name>VerboseProgress</name><parameter_list>(<param><decl><type><name>PrintStream</name></type> <name>out</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>out</name></name> = <name>out</name></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="javadoc">/**
         * begin a download
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>beginDownload</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><name>dots</name> = 0</expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * tick handler
         *
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>onTick</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>out</name>.<name>print</name></name><argument_list>(<argument><expr>"."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>dots</name>++ &gt; <name>DOTS_PER_LINE</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>out</name>.<name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>dots</name> = 0</expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <comment type="javadoc">/**
         * end a download
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>endDownload</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>out</name>.<name>println</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name>.<name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>

    <class><specifier>private</specifier> class <name>GetThread</name> <super><extends>extends <name>Thread</name></extends></super> <block>{

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>URL</name></type> <name>source</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>File</name></type> <name>dest</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>hasTimestamp</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>long</name></type> <name>timestamp</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>DownloadProgress</name></type> <name>progress</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>logLevel</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>success</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>IOException</name></type> <name>ioexception</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>BuildException</name></type> <name>exception</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>InputStream</name></type> <name>is</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>OutputStream</name></type> <name>os</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>URLConnection</name></type> <name>connection</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>redirections</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>userAgent</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        
        <constructor><name>GetThread</name><parameter_list>(<param><decl><type><name>URL</name></type> <name>source</name></decl></param>, <param><decl><type><name>File</name></type> <name>dest</name></decl></param>,
                  <param><decl><type><name>boolean</name></type> <name>h</name></decl></param>, <param><decl><type><name>long</name></type> <name>t</name></decl></param>, <param><decl><type><name>DownloadProgress</name></type> <name>p</name></decl></param>, <param><decl><type><name>int</name></type> <name>l</name></decl></param>, <param><decl><type><name>String</name></type> <name>userAgent</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>source</name></name> = <name>source</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>dest</name></name> = <name>dest</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>hasTimestamp</name> = <name>h</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>timestamp</name> = <name>t</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>progress</name> = <name>p</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>logLevel</name> = <name>l</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>userAgent</name></name> = <name>userAgent</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
            <try>try <block>{
                <expr_stmt><expr><name>success</name> = <call><name>get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ioex</name></decl></param>) <block>{
                <expr_stmt><expr><name>ioexception</name> = <name>ioex</name></expr>;</expr_stmt>
            }</block></catch> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>bex</name></decl></param>) <block>{
                <expr_stmt><expr><name>exception</name> = <name>bex</name></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></function>

        <function><type><specifier>private</specifier> <name>boolean</name></type> <name>get</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>BuildException</name></expr></argument></throws> <block>{

            <expr_stmt><expr><name>connection</name> = <call><name>openConnection</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><name>connection</name> == <name>null</name></expr>)</condition><then>
            <block>{
                <return>return <expr>false</expr>;</return>
            }</block></then></if>

            <decl_stmt><decl><type><name>boolean</name></type> <name>downloadSucceeded</name> =<init> <expr><call><name>downloadFile</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">//if (and only if) the use file time option is set, then</comment>
            <comment type="line">//the saved file now has its timestamp set to that of the</comment>
            <comment type="line">//downloaded file</comment>
            <if>if <condition>(<expr><name>downloadSucceeded</name> &amp;&amp; <name>useTimestamp</name></expr>)</condition><then>  <block>{
                <expr_stmt><expr><call><name>updateTimeStamp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <return>return <expr><name>downloadSucceeded</name></expr>;</return>
        }</block></function>


        <function><type><specifier>private</specifier> <name>boolean</name></type> <name>redirectionAllowed</name><parameter_list>(<param><decl><type><name>URL</name></type> <name>aSource</name></decl></param>, <param><decl><type><name>URL</name></type> <name>aDest</name></decl></param>)</parameter_list> <block>{
            <if>if <condition>(<expr>!(<call><name><name>aSource</name>.<name>getProtocol</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><call><name><name>aDest</name>.<name>getProtocol</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> || (<call><name><name>HTTP</name>
                    .<name>equals</name></name><argument_list>(<argument><expr><call><name><name>aSource</name>.<name>getProtocol</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> &amp;&amp; <call><name><name>HTTPS</name>.<name>equals</name></name><argument_list>(<argument><expr><call><name><name>aDest</name>
                    .<name>getProtocol</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>))</expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>message</name> =<init> <expr>"Redirection detected from "
                        + <call><name><name>aSource</name>.<name>getProtocol</name></name><argument_list>()</argument_list></call> + " to " + <call><name><name>aDest</name>.<name>getProtocol</name></name><argument_list>()</argument_list></call>
                        + ". Protocol switch unsafe, not allowed."</expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>ignoreErrors</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>logLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr>false</expr>;</return>
                }</block></then> <else>else <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></else></if>
            }</block></then></if>

            <expr_stmt><expr><name>redirections</name>++</expr>;</expr_stmt>
            <if>if <condition>(<expr><name>redirections</name> &gt; <name>REDIRECT_LIMIT</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>message</name> =<init> <expr>"More than " + <name>REDIRECT_LIMIT</name>
                        + " times redirected, giving up"</expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>ignoreErrors</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>logLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr>false</expr>;</return>
                }</block></then> <else>else <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></else></if>
            }</block></then></if>


            <return>return <expr>true</expr>;</return>
        }</block></function>

        <function><type><specifier>private</specifier> <name>URLConnection</name></type> <name>openConnection</name><parameter_list>(<param><decl><type><name>URL</name></type> <name>aSource</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{

            <comment type="line">// set up the URL connection</comment>
            <decl_stmt><decl><type><name>URLConnection</name></type> <name>connection</name> =<init> <expr><call><name><name>aSource</name>.<name>openConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// modify the headers</comment>
            <comment type="line">// NB: things like user authentication could go in here too.</comment>
            <if>if <condition>(<expr><name>hasTimestamp</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>connection</name>.<name>setIfModifiedSince</name></name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <comment type="line">// Set the user agent</comment>
            <expr_stmt><expr><call><name><name>connection</name>.<name>addRequestProperty</name></name><argument_list>(<argument><expr>"User-Agent"</expr></argument>, <argument><expr><name><name>this</name>.<name>userAgent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <comment type="line">// prepare Java 1.1 style credentials</comment>
            <if>if <condition>(<expr><name>uname</name> != <name>null</name> || <name>pword</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>up</name> =<init> <expr><name>uname</name> + ":" + <name>pword</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>encoding</name></decl>;</decl_stmt>
                <comment type="line">// we do not use the sun impl for portability,</comment>
                <comment type="line">// and always use our own implementation for consistent</comment>
                <comment type="line">// testing</comment>
                <decl_stmt><decl><type><name>Base64Converter</name></type> <name>encoder</name> =<init> <expr>new <call><name>Base64Converter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>encoding</name> = <call><name><name>encoder</name>.<name>encode</name></name><argument_list>(<argument><expr><call><name><name>up</name>.<name>getBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>connection</name>.<name>setRequestProperty</name></name><argument_list>(<argument><expr>"Authorization"</expr></argument>, <argument><expr>"Basic "
                        + <name>encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <if>if <condition>(<expr><name>connection</name> <name>instanceof</name> <name>HttpURLConnection</name></expr>)</condition><then> <block>{
                <expr_stmt><expr>((<name>HttpURLConnection</name>) <name>connection</name>)
                        .<call><name>setInstanceFollowRedirects</name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr>((<name>HttpURLConnection</name>) <name>connection</name>)
                        .<call><name>setUseCaches</name><argument_list>(<argument><expr><name>httpUseCaches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <comment type="line">// connect to the remote site (may take some time)</comment>
            <try>try <block>{
                <expr_stmt><expr><call><name><name>connection</name>.<name>connect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>NullPointerException</name></type> <name>e</name></decl></param>) <block>{
                <comment type="line">//bad URLs can trigger NPEs in some JVMs</comment>
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Failed to parse " + <call><name><name>source</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>

            <comment type="line">// First check on a 301 / 302 (moved) response (HTTP only)</comment>
            <if>if <condition>(<expr><name>connection</name> <name>instanceof</name> <name>HttpURLConnection</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>HttpURLConnection</name></type> <name>httpConnection</name> =<init> <expr>(<name>HttpURLConnection</name>) <name>connection</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>responseCode</name> =<init> <expr><call><name><name>httpConnection</name>.<name>getResponseCode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>responseCode</name> == <name><name>HttpURLConnection</name>.<name>HTTP_MOVED_PERM</name></name> || 
                        <name>responseCode</name> == <name><name>HttpURLConnection</name>.<name>HTTP_MOVED_TEMP</name></name> ||
                        <name>responseCode</name> == <name><name>HttpURLConnection</name>.<name>HTTP_SEE_OTHER</name></name> ||
                        <name>responseCode</name> == <name>HTTP_MOVED_TEMP</name></expr>)</condition><then>
                <block>{
                    <decl_stmt><decl><type><name>String</name></type> <name>newLocation</name> =<init> <expr><call><name><name>httpConnection</name>.<name>getHeaderField</name></name><argument_list>(<argument><expr>"Location"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>message</name> =<init> <expr><name>aSource</name>
                            + (<name>responseCode</name> == <name><name>HttpURLConnection</name>.<name>HTTP_MOVED_PERM</name></name> ? " permanently"
                                    : "") + " moved to " + <name>newLocation</name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>logLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>URL</name></type> <name>newURL</name> =<init> <expr>new <call><name>URL</name><argument_list>(<argument><expr><name>aSource</name></expr></argument>, <argument><expr><name>newLocation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr>!<call><name>redirectionAllowed</name><argument_list>(<argument><expr><name>aSource</name></expr></argument>, <argument><expr><name>newURL</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <block>{
                        <return>return <expr><name>null</name></expr>;</return>
                    }</block></then></if>
                    <return>return <expr><call><name>openConnection</name><argument_list>(<argument><expr><name>newURL</name></expr></argument>)</argument_list></call></expr>;</return>
                }</block></then></if>
                <comment type="line">// next test for a 304 result (HTTP only)</comment>
                <decl_stmt><decl><type><name>long</name></type> <name>lastModified</name> =<init> <expr><call><name><name>httpConnection</name>.<name>getLastModified</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>responseCode</name> == <name><name>HttpURLConnection</name>.<name>HTTP_NOT_MODIFIED</name></name>
                        || (<name>lastModified</name> != 0 &amp;&amp; <name>hasTimestamp</name> &amp;&amp; <name>timestamp</name> &gt;= <name>lastModified</name>)</expr>)</condition><then> <block>{
                    <comment type="line">// not modified so no file download. just return</comment>
                    <comment type="line">// instead and trace out something so the user</comment>
                    <comment type="line">// doesn't think that the download happened when it</comment>
                    <comment type="line">// didn't</comment>
                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Not modified - so not downloaded"</expr></argument>, <argument><expr><name>logLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><name>null</name></expr>;</return>
                }</block></then></if>
                <comment type="line">// test for 401 result (HTTP only)</comment>
                <if>if <condition>(<expr><name>responseCode</name> == <name><name>HttpURLConnection</name>.<name>HTTP_UNAUTHORIZED</name></name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>String</name></type> <name>message</name> =<init> <expr>"HTTP Authorization failure"</expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>ignoreErrors</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>logLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr><name>null</name></expr>;</return>
                    }</block></then> <else>else <block>{
                        <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</throw>
                    }</block></else></if>
                }</block></then></if>
            }</block></then></if>

            <comment type="line">//REVISIT: at this point even non HTTP connections may</comment>
            <comment type="line">//support the if-modified-since behaviour -we just check</comment>
            <comment type="line">//the date of the content and skip the write if it is not</comment>
            <comment type="line">//newer. Some protocols (FTP) don't include dates, of</comment>
            <comment type="line">//course.</comment>
            <return>return <expr><name>connection</name></expr>;</return>
        }</block></function>

        <function><type><specifier>private</specifier> <name>boolean</name></type> <name>downloadFile</name><parameter_list>()</parameter_list>
                <throws>throws <argument><expr><name>FileNotFoundException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>numberRetries</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <comment type="line">// this three attempt trick is to get round quirks in different</comment>
                <comment type="line">// Java implementations. Some of them take a few goes to bind</comment>
                <comment type="line">// property; we ignore the first couple of such failures.</comment>
                <try>try <block>{
                    <expr_stmt><expr><name>is</name> = <call><name><name>connection</name>.<name>getInputStream</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ex</name></decl></param>) <block>{
                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Error opening connection " + <name>ex</name></expr></argument>, <argument><expr><name>logLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>
            }</block></for>
            <if>if <condition>(<expr><name>is</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Can't get " + <name>source</name> + " to " + <name>dest</name></expr></argument>, <argument><expr><name>logLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>ignoreErrors</name></expr>)</condition><then> <block>{
                    <return>return <expr>false</expr>;</return>
                }</block></then></if>
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Can't get " + <name>source</name> + " to " + <name>dest</name></expr></argument>,
                        <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <expr_stmt><expr><name>os</name> = new <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>progress</name>.<name>beginDownload</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>finished</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
            <try>try <block>{
                <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>buffer</name> =<init> <expr>new <name><name>byte</name><index>[<expr><name>BIG_BUFFER_SIZE</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>length</name></decl>;</decl_stmt>
                <while>while <condition>(<expr>!<call><name>isInterrupted</name><argument_list>()</argument_list></call> &amp;&amp; (<name>length</name> = <call><name><name>is</name>.<name>read</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call>) &gt;= 0</expr>)</condition> <block>{
                    <expr_stmt><expr><call><name><name>os</name>.<name>write</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>progress</name>.<name>onTick</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></while>
                <expr_stmt><expr><name>finished</name> = !<call><name>isInterrupted</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block> <finally>finally <block>{
                <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// we have started to (over)write dest, but failed.</comment>
                <comment type="line">// Try to delete the garbage we'd otherwise leave</comment>
                <comment type="line">// behind.</comment>
                <if>if <condition>(<expr>!<name>finished</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>dest</name>.<name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></finally></try>
            <expr_stmt><expr><call><name><name>progress</name>.<name>endDownload</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>true</expr>;</return>
        }</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>updateTimeStamp</name><parameter_list>()</parameter_list> <block>{
            <decl_stmt><decl><type><name>long</name></type> <name>remoteTimestamp</name> =<init> <expr><call><name><name>connection</name>.<name>getLastModified</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>verbose</name></expr>)</condition><then>  <block>{
                <decl_stmt><decl><type><name>Date</name></type> <name>t</name> =<init> <expr>new <call><name>Date</name><argument_list>(<argument><expr><name>remoteTimestamp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"last modified = " + <call><name><name>t</name>.<name>toString</name></name><argument_list>()</argument_list></call>
                    + ((<name>remoteTimestamp</name> == 0)
                       ? " - using current time instead"
                       : "")</expr></argument>, <argument><expr><name>logLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name>remoteTimestamp</name> != 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>FILE_UTILS</name>.<name>setFileLastModified</name></name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>remoteTimestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <comment type="javadoc">/**
         * Has the download completed successfully?
         *
         * &lt;p&gt;Re-throws any exception caught during executaion.&lt;/p&gt;
         */</comment>
        <function><type><name>boolean</name></type> <name>wasSuccessful</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
            <if>if <condition>(<expr><name>ioexception</name> != <name>null</name></expr>)</condition><then> <block>{
                <throw>throw <expr><name>ioexception</name></expr>;</throw>
            }</block></then></if>
            <if>if <condition>(<expr><name>exception</name> != <name>null</name></expr>)</condition><then> <block>{
                <throw>throw <expr><name>exception</name></expr>;</throw>
            }</block></then></if>
            <return>return <expr><name>success</name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Closes streams, interrupts the download, may delete the
         * output file.
         */</comment>
        <function><type><name>void</name></type> <name>closeStreams</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name>interrupt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>success</name> &amp;&amp; <call><name><name>dest</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>dest</name>.<name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
