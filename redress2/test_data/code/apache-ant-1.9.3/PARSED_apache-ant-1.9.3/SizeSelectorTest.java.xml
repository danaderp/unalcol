<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\types\selectors\SizeSelectorTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>Locale</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Parameter</name></name>;</import>

<comment type="javadoc">/**
 * Tests Size Selectors
 *
 */</comment>
<class><specifier>public</specifier> class <name>SizeSelectorTest</name> <super><extends>extends <name>BaseSelectorTest</name></extends></super> <block>{

    <constructor><specifier>public</specifier> <name>SizeSelectorTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Factory method from base class. This is overriden in child
     * classes to return a specific Selector class.
     */</comment>
    <function><type><specifier>public</specifier> <name>BaseSelector</name></type> <name>getInstance</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>new <call><name>SizeSelector</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Test the code that validates the selector.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testValidate</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>SizeSelector</name></type> <name>s</name> =<init> <expr>(<name>SizeSelector</name>)<call><name>getInstance</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>s</name>.<name>isSelected</name></name><argument_list>(<argument><expr><name>basedir</name></expr></argument>,<argument><expr><name><name>filenames</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>files</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"SizeSelector did not check for required fields"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be1</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"The value attribute is required, and must "
                    + "be positive"</expr></argument>, <argument><expr><call><name><name>be1</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <expr_stmt><expr><name>s</name> = (<name>SizeSelector</name>)<call><name>getInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>s</name>.<name>setValue</name></name><argument_list>(<argument><expr>-10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>s</name>.<name>isSelected</name></name><argument_list>(<argument><expr><name>basedir</name></expr></argument>,<argument><expr><name><name>filenames</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>files</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"SizeSelector did not check for value being in the "
                    + "allowable range"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be2</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"The value attribute is required, and must "
                    + "be positive"</expr></argument>, <argument><expr><call><name><name>be2</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <expr_stmt><expr><name>s</name> = (<name>SizeSelector</name>)<call><name>getInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Parameter</name></type> <name>param</name> =<init> <expr>new <call><name>Parameter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>param</name>.<name>setName</name></name><argument_list>(<argument><expr>"garbage in"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>param</name>.<name>setValue</name></name><argument_list>(<argument><expr>"garbage out"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Parameter</name><index>[]</index></type> <name>params</name> =<init> <expr><block>{<expr><name>param</name></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>s</name>.<name>setParameters</name></name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>s</name>.<name>isSelected</name></name><argument_list>(<argument><expr><name>basedir</name></expr></argument>,<argument><expr><name><name>filenames</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>files</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"SizeSelector did not check for valid parameter element"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be3</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Invalid parameter garbage in"</expr></argument>, <argument><expr><call><name><name>be3</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <expr_stmt><expr><name>s</name> = (<name>SizeSelector</name>)<call><name>getInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>param</name> = new <call><name>Parameter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>param</name>.<name>setName</name></name><argument_list>(<argument><expr>"value"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>param</name>.<name>setValue</name></name><argument_list>(<argument><expr>"garbage out"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>params</name><index>[<expr>0</expr>]</index></name> = <name>param</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>s</name>.<name>setParameters</name></name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>s</name>.<name>isSelected</name></name><argument_list>(<argument><expr><name>basedir</name></expr></argument>,<argument><expr><name><name>filenames</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>files</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"SizeSelector accepted bad value as parameter"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be4</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Invalid size setting garbage out"</expr></argument>,
                    <argument><expr><call><name><name>be4</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <expr_stmt><expr><name>s</name> = (<name>SizeSelector</name>)<call><name>getInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Parameter</name></type> <name>param1</name> =<init> <expr>new <call><name>Parameter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Parameter</name></type> <name>param2</name> =<init> <expr>new <call><name>Parameter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>param1</name>.<name>setName</name></name><argument_list>(<argument><expr>"value"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>param1</name>.<name>setValue</name></name><argument_list>(<argument><expr>"5"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>param2</name>.<name>setName</name></name><argument_list>(<argument><expr>"units"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>param2</name>.<name>setValue</name></name><argument_list>(<argument><expr>"garbage out"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>params</name> = new <name><name>Parameter</name><index>[<expr>2</expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>params</name><index>[<expr>0</expr>]</index></name> = <name>param1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>params</name><index>[<expr>1</expr>]</index></name> = <name>param2</name></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>s</name>.<name>setParameters</name></name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>s</name>.<name>isSelected</name></name><argument_list>(<argument><expr><name>basedir</name></expr></argument>,<argument><expr><name><name>filenames</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>files</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"SizeSelector accepted bad units as parameter"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be5</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"garbage out is not a legal value for this attribute"</expr></argument>,
                    <argument><expr><call><name><name>be5</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

    }</block></function>

    <comment type="javadoc">/**
     * Tests to make sure that the selector is selecting files correctly.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testSelectionBehaviour</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>SizeSelector</name></type> <name>s</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>results</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>SizeSelector</name>.<name>ByteUnits</name></name></type> <name>kilo</name> =<init> <expr>new <call><name><name>SizeSelector</name>.<name>ByteUnits</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>kilo</name>.<name>setValue</name></name><argument_list>(<argument><expr>"K"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>SizeSelector</name>.<name>ByteUnits</name></name></type> <name>kibi</name> =<init> <expr>new <call><name><name>SizeSelector</name>.<name>ByteUnits</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>kibi</name>.<name>setValue</name></name><argument_list>(<argument><expr>"Ki"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>SizeSelector</name>.<name>ByteUnits</name></name></type> <name>tibi</name> =<init> <expr>new <call><name><name>SizeSelector</name>.<name>ByteUnits</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>tibi</name>.<name>setValue</name></name><argument_list>(<argument><expr>"Ti"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>SizeSelector</name>.<name>SizeComparisons</name></name></type> <name>less</name> =<init> <expr>new <call><name><name>SizeSelector</name>.<name>SizeComparisons</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>less</name>.<name>setValue</name></name><argument_list>(<argument><expr>"less"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>SizeSelector</name>.<name>SizeComparisons</name></name></type> <name>equal</name> =<init> <expr>new <call><name><name>SizeSelector</name>.<name>SizeComparisons</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>equal</name>.<name>setValue</name></name><argument_list>(<argument><expr>"equal"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>SizeSelector</name>.<name>SizeComparisons</name></name></type> <name>more</name> =<init> <expr>new <call><name><name>SizeSelector</name>.<name>SizeComparisons</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>more</name>.<name>setValue</name></name><argument_list>(<argument><expr>"more"</expr></argument>)</argument_list></call></expr>;</expr_stmt>


        <try>try <block>{
            <expr_stmt><expr><call><name>makeBed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>s</name> = (<name>SizeSelector</name>)<call><name>getInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>s</name>.<name>setValue</name></name><argument_list>(<argument><expr>10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>s</name>.<name>setWhen</name></name><argument_list>(<argument><expr><name>less</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>results</name> = <call><name>selectionString</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"TFFFFFFFFFFT"</expr></argument>, <argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>s</name> = (<name>SizeSelector</name>)<call><name>getInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>s</name>.<name>setValue</name></name><argument_list>(<argument><expr>10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>s</name>.<name>setWhen</name></name><argument_list>(<argument><expr><name>more</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>results</name> = <call><name>selectionString</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"TTTTTTTTTTTT"</expr></argument>, <argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>s</name> = (<name>SizeSelector</name>)<call><name>getInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>s</name>.<name>setValue</name></name><argument_list>(<argument><expr>32</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>s</name>.<name>setWhen</name></name><argument_list>(<argument><expr><name>equal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>results</name> = <call><name>selectionString</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"TFFFTFFFFFFT"</expr></argument>, <argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>s</name> = (<name>SizeSelector</name>)<call><name>getInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>s</name>.<name>setValue</name></name><argument_list>(<argument><expr>7</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>s</name>.<name>setWhen</name></name><argument_list>(<argument><expr><name>more</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>s</name>.<name>setUnits</name></name><argument_list>(<argument><expr><name>kilo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>results</name> = <call><name>selectionString</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"TFTFFTTTTTTT"</expr></argument>, <argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>s</name> = (<name>SizeSelector</name>)<call><name>getInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>s</name>.<name>setValue</name></name><argument_list>(<argument><expr>7</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>s</name>.<name>setWhen</name></name><argument_list>(<argument><expr><name>more</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>s</name>.<name>setUnits</name></name><argument_list>(<argument><expr><name>kibi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>results</name> = <call><name>selectionString</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"TFTFFFTTFTTT"</expr></argument>, <argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>s</name> = (<name>SizeSelector</name>)<call><name>getInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>s</name>.<name>setValue</name></name><argument_list>(<argument><expr>99999</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>s</name>.<name>setWhen</name></name><argument_list>(<argument><expr><name>more</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>s</name>.<name>setUnits</name></name><argument_list>(<argument><expr><name>tibi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>results</name> = <call><name>selectionString</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"TFFFFFFFFFFT"</expr></argument>, <argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>s</name> = (<name>SizeSelector</name>)<call><name>getInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Parameter</name></type> <name>param1</name> =<init> <expr>new <call><name>Parameter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Parameter</name></type> <name>param2</name> =<init> <expr>new <call><name>Parameter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Parameter</name></type> <name>param3</name> =<init> <expr>new <call><name>Parameter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>param1</name>.<name>setName</name></name><argument_list>(<argument><expr>"value"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>param1</name>.<name>setValue</name></name><argument_list>(<argument><expr>"20"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>param2</name>.<name>setName</name></name><argument_list>(<argument><expr>"units"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>param2</name>.<name>setValue</name></name><argument_list>(<argument><expr>"Ki"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>param3</name>.<name>setName</name></name><argument_list>(<argument><expr>"when"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>param3</name>.<name>setValue</name></name><argument_list>(<argument><expr>"more"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Parameter</name><index>[]</index></type> <name>params</name> =<init> <expr><block>{<expr><name>param1</name></expr>,<expr><name>param2</name></expr>,<expr><name>param3</name></expr>}</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>s</name>.<name>setParameters</name></name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>results</name> = <call><name>selectionString</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"TFFFFFFTFFTT"</expr></argument>, <argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <finally>finally <block>{
            <expr_stmt><expr><call><name>cleanupBed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>

    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testParameterParsingLowerCase</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>testCaseInsensitiveParameterParsing</name><argument_list>(<argument><expr>"units"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testParameterParsingUpperCase</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>testCaseInsensitiveParameterParsing</name><argument_list>(<argument><expr>"UNITS"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testParameterParsingLowerCaseTurkish</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Locale</name></type> <name>l</name> =<init> <expr><call><name><name>Locale</name>.<name>getDefault</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>Locale</name>.<name>setDefault</name></name><argument_list>(<argument><expr>new <call><name>Locale</name><argument_list>(<argument><expr>"tr"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>testCaseInsensitiveParameterParsing</name><argument_list>(<argument><expr>"units"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>Locale</name>.<name>setDefault</name></name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testParameterParsingUpperCaseTurkish</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Locale</name></type> <name>l</name> =<init> <expr><call><name><name>Locale</name>.<name>getDefault</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>Locale</name>.<name>setDefault</name></name><argument_list>(<argument><expr>new <call><name>Locale</name><argument_list>(<argument><expr>"tr"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>testCaseInsensitiveParameterParsing</name><argument_list>(<argument><expr>"UNITS"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>Locale</name>.<name>setDefault</name></name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>testCaseInsensitiveParameterParsing</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>SizeSelector</name></type> <name>s</name> =<init> <expr>new <call><name>SizeSelector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Parameter</name></type> <name>p</name> =<init> <expr>new <call><name>Parameter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>setName</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>setValue</name></name><argument_list>(<argument><expr>"foo"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>s</name>.<name>setParameters</name></name><argument_list>(<argument><expr>new <name><name>Parameter</name><index>[]</index></name> <block>{<expr><name>p</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"should have caused an exception"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"foo is not a legal value for this attribute"</expr></argument>,
                         <argument><expr><call><name><name>be</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>
}</block></class>
</unit>
