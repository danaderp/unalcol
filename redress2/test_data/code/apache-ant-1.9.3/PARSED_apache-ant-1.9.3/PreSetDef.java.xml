<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\PreSetDef.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>AntTypeDefinition</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>ComponentHelper</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>ProjectHelper</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>TaskContainer</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>UnknownElement</name></name>;</import>

<comment type="javadoc">/**
 * The preset definition task generates a new definition
 * based on a current definition with some attributes or
 * elements preset.
 * &lt;pre&gt;
 * &amp;lt;presetdef name="my.javac"&amp;gt;
 *   &amp;lt;javac deprecation="${deprecation}" debug="${debug}"/&amp;gt;
 * &amp;lt;/presetdef&amp;gt;
 * &amp;lt;my.javac srcdir="src" destdir="classes"/&amp;gt;
 * &lt;/pre&gt;
 *
 * @since Ant 1.6
 */</comment>
<class><specifier>public</specifier> class <name>PreSetDef</name> <super><extends>extends <name>AntlibDefinition</name></extends> <implements>implements <name>TaskContainer</name></implements></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>UnknownElement</name></type> <name>nestedTask</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type>         <name>name</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Set the name of this definition.
     * @param name the name of the definition.
     */</comment>
     <function><type><specifier>public</specifier> <name>void</name></type> <name>setName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>name</name></name> = <name>name</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a nested task to predefine attributes and elements on.
     * @param nestedTask  Nested task/type to extend.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addTask</name><parameter_list>(<param><decl><type><name>Task</name></type> <name>nestedTask</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>nestedTask</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Only one nested element allowed"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>nestedTask</name> <name>instanceof</name> <name>UnknownElement</name>)</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                <argument><expr>"addTask called with a task that is not an unknown element"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>nestedTask</name></name> = (<name>UnknownElement</name>) <name>nestedTask</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Make a new definition.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>nestedTask</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Missing nested element"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>name</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Name not specified"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name>name</name> = <call><name><name>ProjectHelper</name>.<name>genComponentName</name></name><argument_list>(<argument><expr><call><name>getURI</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ComponentHelper</name></type> <name>helper</name> =<init> <expr><call><name><name>ComponentHelper</name>.<name>getComponentHelper</name></name><argument_list>(
            <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>componentName</name> =<init> <expr><call><name><name>ProjectHelper</name>.<name>genComponentName</name></name><argument_list>(
            <argument><expr><call><name><name>nestedTask</name>.<name>getNamespace</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>nestedTask</name>.<name>getTag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>AntTypeDefinition</name></type> <name>def</name> =<init> <expr><call><name><name>helper</name>.<name>getDefinition</name></name><argument_list>(<argument><expr><name>componentName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>def</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                <argument><expr>"Unable to find typedef " + <name>componentName</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>PreSetDefinition</name></type> <name>newDef</name> =<init> <expr>new <call><name>PreSetDefinition</name><argument_list>(<argument><expr><name>def</name></expr></argument>, <argument><expr><name>nestedTask</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>newDef</name>.<name>setName</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>helper</name>.<name>addDataTypeDefinition</name></name><argument_list>(<argument><expr><name>newDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"defining preset " + <name>name</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * This class contains the unknown element and the object
     * that is predefined.
     * @see AntTypeDefinition
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>PreSetDefinition</name> <super><extends>extends <name>AntTypeDefinition</name></extends></super> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>AntTypeDefinition</name></type> <name>parent</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>UnknownElement</name></type>    <name>element</name></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * Creates a new &lt;code&gt;PresetDefinition&lt;/code&gt; instance.
         *
         * @param parent The parent of this predefinition.
         * @param el     The predefined attributes, nested elements and text.
         */</comment>
        <constructor><specifier>public</specifier> <name>PreSetDefinition</name><parameter_list>(<param><decl><type><name>AntTypeDefinition</name></type> <name>parent</name></decl></param>, <param><decl><type><name>UnknownElement</name></type> <name>el</name></decl></param>)</parameter_list> <block>{
            <if>if <condition>(<expr><name>parent</name> <name>instanceof</name> <name>PreSetDefinition</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>PreSetDefinition</name></type> <name>p</name> =<init> <expr>(<name>PreSetDefinition</name>) <name>parent</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>el</name>.<name>applyPreSet</name></name><argument_list>(<argument><expr><name><name>p</name>.<name>element</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>parent</name> = <name><name>p</name>.<name>parent</name></name></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name><name>this</name>.<name>parent</name></name> = <name>parent</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>element</name></name> = <name>el</name></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="javadoc">/**
         * Override so that it is not allowed.
         *
         * @param clazz a &lt;code&gt;Class&lt;/code&gt; value.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setClass</name><parameter_list>(<param><decl><type><name>Class</name></type> <name>clazz</name></decl></param>)</parameter_list> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Not supported"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></function>

        <comment type="javadoc">/**
         * Override so that it is not allowed.
         *
         * @param className a &lt;code&gt;String&lt;/code&gt; value.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setClassName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>className</name></decl></param>)</parameter_list> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Not supported"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></function>

        <comment type="javadoc">/**
         * Get the classname of the definition.
         * @return the name of the class of this definition.
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getClassName</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><call><name><name>parent</name>.<name>getClassName</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Set the adapter class for this definition.
         * NOT Supported
         * @param adapterClass the adapterClass.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setAdapterClass</name><parameter_list>(<param><decl><type><name>Class</name></type> <name>adapterClass</name></decl></param>)</parameter_list> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Not supported"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></function>

        <comment type="javadoc">/**
         * Set the assignable class for this definition.
         * NOT SUPPORTED
         * @param adaptToClass the assignable class.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setAdaptToClass</name><parameter_list>(<param><decl><type><name>Class</name></type> <name>adaptToClass</name></decl></param>)</parameter_list> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Not supported"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></function>

        <comment type="javadoc">/**
         * Set the classloader to use to create an instance
         * of the definition.
         * NOT SUPPORTED
         * @param classLoader the classLoader.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setClassLoader</name><parameter_list>(<param><decl><type><name>ClassLoader</name></type> <name>classLoader</name></decl></param>)</parameter_list> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Not supported"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></function>

        <comment type="javadoc">/**
         * Get the classloader for this definition.
         * @return the classloader for this definition.
         */</comment>
        <function><type><specifier>public</specifier> <name>ClassLoader</name></type> <name>getClassLoader</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><call><name><name>parent</name>.<name>getClassLoader</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Get the exposed class for this definition.
         * @param project the current project.
         * @return the exposed class.
         */</comment>
        <function><type><specifier>public</specifier> <name>Class</name></type> <name>getExposedClass</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>)</parameter_list> <block>{
            <return>return <expr><call><name><name>parent</name>.<name>getExposedClass</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Get the definition class.
         * @param project the current project.
         * @return the type of the definition.
         */</comment>
        <function><type><specifier>public</specifier> <name>Class</name></type> <name>getTypeClass</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>)</parameter_list> <block>{
            <return>return <expr><call><name><name>parent</name>.<name>getTypeClass</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>


        <comment type="javadoc">/**
         * Check if the attributes are correct.
         * @param project the current project.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>checkClass</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>parent</name>.<name>checkClass</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * Create an instance of the definition. The instance may be wrapped
         * in a proxy class. This is a special version of create for
         * IntrospectionHelper and UnknownElement.
         * @param project the current project.
         * @return the created object.
         */</comment>
        <function><type><specifier>public</specifier> <name>Object</name></type> <name>createObject</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>)</parameter_list> <block>{
            <return>return <expr><call><name><name>parent</name>.<name>create</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Get the preset values.
         * @return the predefined attributes, elements and text as
         *         an UnknownElement.
         */</comment>
        <function><type><specifier>public</specifier> <name>UnknownElement</name></type> <name>getPreSets</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>element</name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Fake create an object, used by IntrospectionHelper and UnknownElement
         * to see that this is a predefined object.
         *
         * @param project the current project.
         * @return this object.
         */</comment>
        <function><type><specifier>public</specifier> <name>Object</name></type> <name>create</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>)</parameter_list> <block>{
            <return>return <expr><name>this</name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Equality method for this definition.
         *
         * @param other another definition.
         * @param project the current project.
         * @return true if the definitions are the same.
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>sameDefinition</name><parameter_list>(<param><decl><type><name>AntTypeDefinition</name></type> <name>other</name></decl></param>, <param><decl><type><name>Project</name></type> <name>project</name></decl></param>)</parameter_list> <block>{
            <return>return <expr>(<name>other</name> != <name>null</name> &amp;&amp; <call><name><name>other</name>.<name>getClass</name></name><argument_list>()</argument_list></call> == <call><name>getClass</name><argument_list>()</argument_list></call> &amp;&amp; <name>parent</name> != <name>null</name>
                &amp;&amp; <call><name><name>parent</name>.<name>sameDefinition</name></name><argument_list>(<argument><expr>((<name>PreSetDefinition</name>) <name>other</name>).<name>parent</name></expr></argument>, <argument><expr><name>project</name></expr></argument>)</argument_list></call>
                &amp;&amp; <call><name><name>element</name>.<name>similar</name></name><argument_list>(<argument><expr>((<name>PreSetDefinition</name>) <name>other</name>).<name>element</name></expr></argument>)</argument_list></call>)</expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Similar method for this definition.
         *
         * @param other another definition.
         * @param project the current project.
         * @return true if the definitions are similar.
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>similarDefinition</name><parameter_list>(
            <param><decl><type><name>AntTypeDefinition</name></type> <name>other</name></decl></param>, <param><decl><type><name>Project</name></type> <name>project</name></decl></param>)</parameter_list> <block>{
            <return>return <expr>(<name>other</name> != <name>null</name> &amp;&amp; <call><name><name>other</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(
                <argument><expr><call><name>getClass</name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> &amp;&amp; <name>parent</name> != <name>null</name>
                &amp;&amp; <call><name><name>parent</name>.<name>similarDefinition</name></name><argument_list>(<argument><expr>((<name>PreSetDefinition</name>) <name>other</name>).<name>parent</name></expr></argument>, <argument><expr><name>project</name></expr></argument>)</argument_list></call>
                &amp;&amp; <call><name><name>element</name>.<name>similar</name></name><argument_list>(<argument><expr>((<name>PreSetDefinition</name>) <name>other</name>).<name>element</name></expr></argument>)</argument_list></call>)</expr>;</return>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
