<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\ProjectHelperRepository.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>BufferedReader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStreamReader</name></name>;</import>
<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name>.<name>Constructor</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>URL</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>helper</name>.<name>ProjectHelper2</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Resource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>LoaderUtils</name></name>;</import>

<comment type="javadoc">/**
 * Repository of {@link ProjectHelper} found in the classpath or via
 * some System properties.
 *
 * &lt;p&gt;See the ProjectHelper documentation in the manual.&lt;/p&gt;
 *
 * @since Ant 1.8.0
 */</comment>
<class><specifier>public</specifier> class <name>ProjectHelperRepository</name> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEBUG_PROJECT_HELPER_REPOSITORY</name> =<init>
        <expr>"ant.project-helper-repo.debug"</expr></init></decl>;</decl_stmt>

    <comment type="line">// The message log level is not accessible here because everything</comment>
    <comment type="line">// is instanciated statically</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>DEBUG</name> =<init>
        <expr>"true".<call><name>equals</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr><name>DEBUG_PROJECT_HELPER_REPOSITORY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>ProjectHelperRepository</name></type> <name>instance</name> =<init>
        <expr>new <call><name>ProjectHelperRepository</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>List</name><argument_list>&lt;<argument><name><name>Constructor</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name>ProjectHelper</name></extends></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>helpers</name> =<init> <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name><name>Constructor</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name>ProjectHelper</name></extends></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Constructor</name><argument_list>&lt;<argument><name>ProjectHelper2</name></argument>&gt;</argument_list></name></type> <name>PROJECTHELPER2_CONSTRUCTOR</name></decl>;</decl_stmt>

    static <block>{
        <try>try <block>{
            <expr_stmt><expr><name>PROJECTHELPER2_CONSTRUCTOR</name> = <name><name>ProjectHelper2</name>.<name><name/></name></name>class.<call><name>getConstructor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
            <comment type="line">// ProjectHelper2 must be available</comment>
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ProjectHelperRepository</name></type> <name>getInstance</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>instance</name></expr>;</return>
    }</block></function>

    <constructor><specifier>private</specifier> <name>ProjectHelperRepository</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>collectProjectHelpers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>collectProjectHelpers</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// First, try the system property</comment>
        <decl_stmt><decl><type><name><name>Constructor</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name>ProjectHelper</name></extends></argument>&gt;</argument_list></name></type> <name>projectHelper</name> =<init> <expr><call><name>getProjectHelperBySystemProperty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>registerProjectHelper</name><argument_list>(<argument><expr><name>projectHelper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// A JDK1.3 'service' ( like in JAXP ). That will plug a helper</comment>
        <comment type="line">// automatically if in CLASSPATH, with the right META-INF/services.</comment>
        <try>try <block>{
            <decl_stmt><decl><type><name>ClassLoader</name></type> <name>classLoader</name> =<init> <expr><call><name><name>LoaderUtils</name>.<name>getContextClassLoader</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>classLoader</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name><name>Enumeration</name><argument_list>&lt;<argument><name>URL</name></argument>&gt;</argument_list></name></type> <name>resources</name> =<init>
                    <expr><call><name><name>classLoader</name>.<name>getResources</name></name><argument_list>(<argument><expr><name><name>ProjectHelper</name>.<name>SERVICE_ID</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><call><name><name>resources</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                    <decl_stmt><decl><type><name>URL</name></type> <name>resource</name> =<init> <expr><call><name><name>resources</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>projectHelper</name> =
                        <call><name>getProjectHelperByService</name><argument_list>(<argument><expr><call><name><name>resource</name>.<name>openStream</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>registerProjectHelper</name><argument_list>(<argument><expr><name>projectHelper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></while>
            }</block></then></if>

            <decl_stmt><decl><type><name>InputStream</name></type> <name>systemResource</name> =<init>
                <expr><call><name><name>ClassLoader</name>.<name>getSystemResourceAsStream</name></name><argument_list>(<argument><expr><name><name>ProjectHelper</name>.<name>SERVICE_ID</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>systemResource</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>projectHelper</name> = <call><name>getProjectHelperByService</name><argument_list>(<argument><expr><name>systemResource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>registerProjectHelper</name><argument_list>(<argument><expr><name>projectHelper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"Unable to load ProjectHelper from service "
                               + <name><name>ProjectHelper</name>.<name>SERVICE_ID</name></name> + " ("
                               + <call><name><name>e</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call>
                               + ": " + <call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call> + ")"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>DEBUG</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>e</name>.<name>printStackTrace</name></name><argument_list>(<argument><expr><name><name>System</name>.<name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * Register the specified project helper into the repository.
     * &lt;p&gt;
     * The helper will be added after all the already registered helpers, but
     * before the default one (ProjectHelper2)
     *
     * @param helperClassName
     *            the fully qualified name of the helper
     * @throws BuildException
     *             if the class cannot be loaded or if there is no constructor
     *             with no argument
     * @since Ant 1.8.2
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>registerProjectHelper</name><parameter_list>(<param><decl><type><name>String</name></type> <name>helperClassName</name></decl></param>)</parameter_list>
            <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>registerProjectHelper</name><argument_list>(<argument><expr><call><name>getHelperConstructor</name><argument_list>(<argument><expr><name>helperClassName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Register the specified project helper into the repository.
     * &lt;p&gt;
     * The helper will be added after all the already registered helpers, but
     * before the default one (ProjectHelper2)
     *
     * @param helperClass
     *            the class of the helper
     * @throws BuildException
     *             if there is no constructor with no argument
     * @since Ant 1.8.2
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>registerProjectHelper</name><parameter_list>(<param><decl><type><name><name>Class</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name>ProjectHelper</name></extends></argument>&gt;</argument_list></name></type> <name>helperClass</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <try>try <block>{
            <expr_stmt><expr><call><name>registerProjectHelper</name><argument_list>(<argument><expr><call><name><name>helperClass</name>.<name>getConstructor</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>NoSuchMethodException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Couldn't find no-arg constructor in "
                    + <call><name><name>helperClass</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>registerProjectHelper</name><parameter_list>(<param><decl><type><name><name>Constructor</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name>ProjectHelper</name></extends></argument>&gt;</argument_list></name></type> <name>helperConstructor</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>helperConstructor</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>DEBUG</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"ProjectHelper "
                    + <call><name><name>helperConstructor</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call> + " registered."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>helpers</name>.<name>add</name></name><argument_list>(<argument><expr><name>helperConstructor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name><name>Constructor</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name>ProjectHelper</name></extends></argument>&gt;</argument_list></name></type> <name>getProjectHelperBySystemProperty</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>helperClass</name> =<init> <expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr><name><name>ProjectHelper</name>.<name>HELPER_PROPERTY</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <if>if <condition>(<expr><name>helperClass</name> != <name>null</name></expr>)</condition><then> <block>{
                <return>return <expr><call><name>getHelperConstructor</name><argument_list>(<argument><expr><name>helperClass</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>
        }</block> <catch>catch (<param><decl><type><name>SecurityException</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"Unable to load ProjectHelper class \""
                               + <name>helperClass</name> + " specified in system property "
                               + <name><name>ProjectHelper</name>.<name>HELPER_PROPERTY</name></name> + " ("
                               + <call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call> + ")"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>DEBUG</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>e</name>.<name>printStackTrace</name></name><argument_list>(<argument><expr><name><name>System</name>.<name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></catch></try>
        <return>return <expr><name>null</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name><name>Constructor</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name>ProjectHelper</name></extends></argument>&gt;</argument_list></name></type> <name>getProjectHelperByService</name><parameter_list>(<param><decl><type><name>InputStream</name></type> <name>is</name></decl></param>)</parameter_list> <block>{
        <try>try <block>{
            <comment type="line">// This code is needed by EBCDIC and other strange systems.</comment>
            <comment type="line">// It's a fix for bugs reported in xerces</comment>
            <decl_stmt><decl><type><name>InputStreamReader</name></type> <name>isr</name></decl>;</decl_stmt>
            <try>try <block>{
                <expr_stmt><expr><name>isr</name> = new <call><name>InputStreamReader</name><argument_list>(<argument><expr><name>is</name></expr></argument>, <argument><expr>"UTF-8"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name><name>java</name>.<name>io</name>.<name>UnsupportedEncodingException</name></name></type> <name>e</name></decl></param>) <block>{
                <expr_stmt><expr><name>isr</name> = new <call><name>InputStreamReader</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
            <decl_stmt><decl><type><name>BufferedReader</name></type> <name>rd</name> =<init> <expr>new <call><name>BufferedReader</name><argument_list>(<argument><expr><name>isr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>String</name></type> <name>helperClassName</name> =<init> <expr><call><name><name>rd</name>.<name>readLine</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>rd</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><name>helperClassName</name> != <name>null</name> &amp;&amp; !"".<call><name>equals</name><argument_list>(<argument><expr><name>helperClassName</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><call><name>getHelperConstructor</name><argument_list>(<argument><expr><name>helperClassName</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Unable to load ProjectHelper from service "
                    + <name><name>ProjectHelper</name>.<name>SERVICE_ID</name></name> + " (" + <call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call> + ")"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>DEBUG</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>e</name>.<name>printStackTrace</name></name><argument_list>(<argument><expr><name><name>System</name>.<name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></catch></try>
        <return>return <expr><name>null</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the constructor with not argument of an helper from its class name.
     * It'll first try the thread class loader, then Class.forName() will load
     * from the same loader that loaded this class.
     *
     * @param helperClass
     *            The name of the class to create an instance of. Must not be
     *            &lt;code&gt;null&lt;/code&gt;.
     *
     * @return the constructor of the specified class.
     *
     * @exception BuildException
     *                if the class cannot be found or if a constructor with no
     *                argument cannot be found.
     */</comment>
    <function><type><specifier>private</specifier> <name><name>Constructor</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name>ProjectHelper</name></extends></argument>&gt;</argument_list></name></type> <name>getHelperConstructor</name><parameter_list>(<param><decl><type><name>String</name></type> <name>helperClass</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>ClassLoader</name></type> <name>classLoader</name> =<init> <expr><call><name><name>LoaderUtils</name>.<name>getContextClassLoader</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <decl_stmt><decl><type><name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>clazz</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>classLoader</name> != <name>null</name></expr>)</condition><then> <block>{
                <try>try <block>{
                    <expr_stmt><expr><name>clazz</name> = <call><name><name>classLoader</name>.<name>loadClass</name></name><argument_list>(<argument><expr><name>helperClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>ClassNotFoundException</name></type> <name>ex</name></decl></param>) <block>{
                    <comment type="line">// try next method</comment>
                }</block></catch></try>
            }</block></then></if>
            <if>if <condition>(<expr><name>clazz</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>clazz</name> = <call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr><name>helperClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <return>return <expr><call><name><name>clazz</name>.<name>asSubclass</name></name><argument_list>(<argument><expr><name><name>ProjectHelper</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call>.<call><name>getConstructor</name><argument_list>()</argument_list></call></expr>;</return>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * Get the helper that will be able to parse the specified build file. The helper
     * will be chosen among the ones found in the classpath
     *
     * @return the first ProjectHelper that fit the requirement (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>ProjectHelper</name></type> <name>getProjectHelperForBuildFile</name><parameter_list>(<param><decl><type><name>Resource</name></type> <name>buildFile</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <for>for (<init><decl><type><name><name>Iterator</name><argument_list>&lt;<argument><name>ProjectHelper</name></argument>&gt;</argument_list></name></type> <name>it</name> =<init> <expr><call><name>getHelpers</name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>it</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
            <decl_stmt><decl><type><name>ProjectHelper</name></type> <name>helper</name> =<init> <expr><call><name><name>it</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>helper</name>.<name>canParseBuildFile</name></name><argument_list>(<argument><expr><name>buildFile</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>DEBUG</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"ProjectHelper "
                                       + <call><name><name>helper</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call>
                                       + " selected for the build file "
                                       + <name>buildFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <return>return <expr><name>helper</name></expr>;</return>
            }</block></then></if>
        }</block></for>
        <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr>"BUG: at least the ProjectHelper2 should "
                                   + "have supported the file " + <name>buildFile</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>

    <comment type="javadoc">/**
     * Get the helper that will be able to parse the specified antlib. The helper
     * will be chosen among the ones found in the classpath
     *
     * @return the first ProjectHelper that fit the requirement (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>ProjectHelper</name></type> <name>getProjectHelperForAntlib</name><parameter_list>(<param><decl><type><name>Resource</name></type> <name>antlib</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <for>for (<init><decl><type><name><name>Iterator</name><argument_list>&lt;<argument><name>ProjectHelper</name></argument>&gt;</argument_list></name></type> <name>it</name> =<init> <expr><call><name>getHelpers</name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>it</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
            <decl_stmt><decl><type><name>ProjectHelper</name></type> <name>helper</name> =<init> <expr><call><name><name>it</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>helper</name>.<name>canParseAntlibDescriptor</name></name><argument_list>(<argument><expr><name>antlib</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>DEBUG</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"ProjectHelper "
                                       + <call><name><name>helper</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call>
                                       + " selected for the antlib "
                                       + <name>antlib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <return>return <expr><name>helper</name></expr>;</return>
            }</block></then></if>
        }</block></for>
        <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr>"BUG: at least the ProjectHelper2 should "
                                   + "have supported the file " + <name>antlib</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>

    <comment type="javadoc">/**
     * Get an iterator on the list of project helpers configured. The iterator
     * will always return at least one element as there will always be the
     * default project helper configured.
     *
     * @return an iterator of {@link ProjectHelper}
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name>ProjectHelper</name></argument>&gt;</argument_list></name></type> <name>getHelpers</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>new <call><name>ConstructingIterator</name><argument_list>(<argument><expr><call><name><name>helpers</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>ConstructingIterator</name> <super><implements>implements <name><name>Iterator</name><argument_list>&lt;<argument><name>ProjectHelper</name></argument>&gt;</argument_list></name></implements></super> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name><name>Constructor</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name>ProjectHelper</name></extends></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>nested</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>empty</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

        <constructor><name>ConstructingIterator</name><parameter_list>(<param><decl><type><name><name>Iterator</name><argument_list>&lt;<argument><name><name>Constructor</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name>ProjectHelper</name></extends></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>nested</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>nested</name></name> = <name>nested</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasNext</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><call><name><name>nested</name>.<name>hasNext</name></name><argument_list>()</argument_list></call> || !<name>empty</name></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>ProjectHelper</name></type> <name>next</name><parameter_list>()</parameter_list> <block>{
            <decl_stmt><decl><type><name><name>Constructor</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name>ProjectHelper</name></extends></argument>&gt;</argument_list></name></type> <name>c</name></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>nested</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>c</name> = <call><name><name>nested</name>.<name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <comment type="line">// last but not least, ant default project helper</comment>
                <expr_stmt><expr><name>empty</name> = true</expr>;</expr_stmt>
                <expr_stmt><expr><name>c</name> = <name>PROJECTHELPER2_CONSTRUCTOR</name></expr>;</expr_stmt>
            }</block></else></if>
            <try>try <block>{
                <return>return <expr><call><name><name>c</name>.<name>newInstance</name></name><argument_list>()</argument_list></call></expr>;</return>
            }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Failed to invoke no-arg constructor"
                                         + " on " + <call><name><name>c</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>remove</name><parameter_list>()</parameter_list> <block>{
            <throw>throw <expr>new <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr>"remove is not supported"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
