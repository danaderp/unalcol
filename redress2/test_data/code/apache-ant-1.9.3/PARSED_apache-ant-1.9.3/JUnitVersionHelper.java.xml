<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\junit\JUnitVersionHelper.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>junit</name></name>;</package>

<import>import <name><name>java</name>.<name>lang</name>.<name>annotation</name>.<name>Annotation</name></name>;</import>
<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name>.<name>InvocationTargetException</name></name>;</import>
<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name>.<name>Method</name></name>;</import>

<import>import <name><name>junit</name>.<name>framework</name>.<name>Test</name></name>;</import>
<import>import <name><name>junit</name>.<name>framework</name>.<name>TestCase</name></name>;</import>

<comment type="javadoc">/**
 * Work around for some changes to the public JUnit API between
 * different JUnit releases.
 * @since Ant 1.7
 */</comment>
<comment type="line">// CheckStyle:HideUtilityClassConstructorCheck OFF (bc)</comment>
<class><specifier>public</specifier> class <name>JUnitVersionHelper</name> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Method</name></type> <name>testCaseName</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Name of the JUnit4 class we look for.
     * {@value}
     * @since Ant 1.7.1
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>JUNIT_FRAMEWORK_JUNIT4_TEST_CASE_FACADE</name>
        =<init> <expr>"junit.framework.JUnit4TestCaseFacade"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>UNKNOWN_TEST_CASE_NAME</name> =<init> <expr>"unknown"</expr></init></decl>;</decl_stmt>

    static <block>{
        <try>try <block>{
            <expr_stmt><expr><name>testCaseName</name> = <name><name>TestCase</name>.<name><name/></name></name>class.<call><name>getMethod</name><argument_list>(<argument><expr>"getName"</expr></argument>, <argument><expr>new <name><name>Class</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>NoSuchMethodException</name></type> <name>e</name></decl></param>) <block>{
            <comment type="line">// pre JUnit 3.7</comment>
            <try>try <block>{
                <expr_stmt><expr><name>testCaseName</name> = <name><name>TestCase</name>.<name><name/></name></name>class.<call><name>getMethod</name><argument_list>(<argument><expr>"name"</expr></argument>, <argument><expr>new <name><name>Class</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>NoSuchMethodException</name></type> <name>ignored</name></decl></param>) <block>{
                <comment type="line">// ignore</comment>
            }</block></catch></try>
        }</block></catch></try>
    }</block>

    <comment type="javadoc">/**
     * JUnit 3.7 introduces TestCase.getName() and subsequent versions
     * of JUnit remove the old name() method.  This method provides
     * access to the name of a TestCase via reflection that is
     * supposed to work with version before and after JUnit 3.7.
     *
     * &lt;p&gt;since Ant 1.5.1 this method will invoke &amp;quot;&lt;code&gt;public
     * String getName()&lt;/code&gt;&amp;quot; on any implementation of Test if
     * it exists.&lt;/p&gt;
     *
     * &lt;p&gt;Since Ant 1.7 also checks for JUnit4TestCaseFacade explicitly.
     * This is used by junit.framework.JUnit4TestAdapter.&lt;/p&gt;
     * @param t the test.
     * @return the name of the test.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getTestCaseName</name><parameter_list>(<param><decl><type><name>Test</name></type> <name>t</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>t</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>UNKNOWN_TEST_CASE_NAME</name></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>t</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><name>JUNIT_FRAMEWORK_JUNIT4_TEST_CASE_FACADE</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">// Self-describing as of JUnit 4 (#38811). But trim "(ClassName)".</comment>
            <decl_stmt><decl><type><name>String</name></type> <name>name</name> =<init> <expr><call><name><name>t</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>name</name>.<name>endsWith</name></name><argument_list>(<argument><expr>")"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>paren</name> =<init> <expr><call><name><name>name</name>.<name>lastIndexOf</name></name><argument_list>(<argument><expr>'('</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <return>return <expr><call><name><name>name</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>paren</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then> <else>else <block>{
                <return>return <expr><name>name</name></expr>;</return>
            }</block></else></if>
        }</block></then></if>
        <if>if <condition>(<expr><name>t</name> <name>instanceof</name> <name>TestCase</name> &amp;&amp; <name>testCaseName</name> != <name>null</name></expr>)</condition><then> <block>{
            <try>try <block>{
                <return>return <expr>(<name>String</name>) <call><name><name>testCaseName</name>.<name>invoke</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr>new <name><name>Object</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
            }</block> <catch>catch (<param><decl><type><name>Throwable</name></type> <name>ignored</name></decl></param>) <block>{
                <comment type="line">// ignore</comment>
            }</block></catch></try>
        }</block></then> <else>else <block>{
            <try>try <block>{
                <decl_stmt><decl><type><name>Method</name></type> <name>getNameMethod</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <try>try <block>{
                    <expr_stmt><expr><name>getNameMethod</name> =
                        <call><name><name>t</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getMethod</name><argument_list>(<argument><expr>"getName"</expr></argument>, <argument><expr>new <name><name>Class</name> <index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>NoSuchMethodException</name></type> <name>e</name></decl></param>) <block>{
                    <expr_stmt><expr><name>getNameMethod</name> = <call><name><name>t</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getMethod</name><argument_list>(<argument><expr>"name"</expr></argument>,
                                                           <argument><expr>new <name><name>Class</name> <index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>
                <if>if <condition>(<expr><name>getNameMethod</name> != <name>null</name>
                    &amp;&amp; <call><name><name>getNameMethod</name>.<name>getReturnType</name></name><argument_list>()</argument_list></call> == <name><name>String</name>.<name><name/></name></name>class</expr>)</condition><then> <block>{
                    <return>return <expr>(<name>String</name>) <call><name><name>getNameMethod</name>.<name>invoke</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr>new <name><name>Object</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
                }</block></then></if>
            }</block> <catch>catch (<param><decl><type><name>Throwable</name></type> <name>ignored</name></decl></param>) <block>{
                <comment type="line">// ignore</comment>
            }</block></catch></try>
        }</block></else></if>
        <return>return <expr><name>UNKNOWN_TEST_CASE_NAME</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Tries to find the name of the class which a test represents
     * across JUnit 3 and 4. For JUnit4 it parses the toString() value of the
     * test, and extracts it from there.
     * @since Ant 1.7.1 (it was private until then)
     * @param test test case to look at
     * @return the extracted class name.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getTestCaseClassName</name><parameter_list>(<param><decl><type><name>Test</name></type> <name>test</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>className</name> =<init> <expr><call><name><name>test</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>test</name> <name>instanceof</name> <name><name>JUnitTaskMirrorImpl</name>.<name>VmExitErrorTest</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>className</name> = ((<name><name>JUnitTaskMirrorImpl</name>.<name>VmExitErrorTest</name></name>) <name>test</name>).<call><name>getClassName</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else
        <if>if <condition>(<expr><call><name><name>className</name>.<name>equals</name></name><argument_list>(<argument><expr><name>JUNIT_FRAMEWORK_JUNIT4_TEST_CASE_FACADE</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">// JUnit 4 wraps solo tests this way. We can extract</comment>
            <comment type="line">// the original test name with a little hack.</comment>
            <decl_stmt><decl><type><name>String</name></type> <name>name</name> =<init> <expr><call><name><name>test</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>paren</name> =<init> <expr><call><name><name>name</name>.<name>lastIndexOf</name></name><argument_list>(<argument><expr>'('</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>paren</name> != -1 &amp;&amp; <call><name><name>name</name>.<name>endsWith</name></name><argument_list>(<argument><expr>")"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>className</name> = <call><name><name>name</name>.<name>substring</name></name><argument_list>(<argument><expr><name>paren</name> + 1</expr></argument>, <argument><expr><call><name><name>name</name>.<name>length</name></name><argument_list>()</argument_list></call> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if></else></if>
        <return>return <expr><name>className</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getIgnoreMessage</name><parameter_list>(<param><decl><type><name>Test</name></type> <name>test</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>message</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

        <try>try <block>{
            <decl_stmt><decl><type><name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>junit4FacadeClass</name> =<init> <expr><call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr>"junit.framework.JUnit4TestCaseFacade"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>test</name> != <name>null</name> &amp;&amp; <call><name><name>test</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>isAssignableFrom</name><argument_list>(<argument><expr><name>junit4FacadeClass</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">//try and get the message coded as part of the ignore</comment>
        	<comment type="block">/*
        	 * org.junit.runner.Description contains a getAnnotation(Class) method... but this
        	 * wasn't in older versions of JUnit4 so we have to try and do this by reflection
        	 */</comment>
                <decl_stmt><decl><type><name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>testClass</name> =<init> <expr><call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr><call><name><name>JUnitVersionHelper</name>.<name>getTestCaseClassName</name></name><argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name>Method</name></type> <name>testMethod</name> =<init> <expr><call><name><name>testClass</name>.<name>getMethod</name></name><argument_list>(<argument><expr><call><name><name>JUnitVersionHelper</name>.<name>getTestCaseName</name></name><argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Class</name></type> <name>ignoreAnnotation</name> =<init> <expr><call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr>"org.junit.Ignore"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Annotation</name></type> <name>annotation</name> =<init> <expr><call><name><name>testMethod</name>.<name>getAnnotation</name></name><argument_list>(<argument><expr><name>ignoreAnnotation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>annotation</name> != <name>null</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>Method</name></type> <name>valueMethod</name> =<init> <expr><call><name><name>annotation</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getMethod</name><argument_list>(<argument><expr>"value"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>value</name> =<init> <expr>(<name>String</name>) <call><name><name>valueMethod</name>.<name>invoke</name></name><argument_list>(<argument><expr><name>annotation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>value</name> != <name>null</name> &amp;&amp; <call><name><name>value</name>.<name>length</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>message</name> = <name>value</name></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then></if>

            }</block></then></if>
        }</block> <catch>catch (<param><decl><type><name>NoSuchMethodException</name></type> <name>e</name></decl></param>) <block>{
            <comment type="line">// silently ignore - we'll report a skip with no message</comment>
        }</block></catch> <catch>catch (<param><decl><type><name>ClassNotFoundException</name></type> <name>e</name></decl></param>) <block>{
            <comment type="line">// silently ignore - we'll report a skip with no message</comment>
        }</block></catch> <catch>catch (<param><decl><type><name>InvocationTargetException</name></type> <name>e</name></decl></param>) <block>{
            <comment type="line">// silently ignore - we'll report a skip with no message</comment>
        }</block></catch> <catch>catch (<param><decl><type><name>IllegalAccessException</name></type> <name>e</name></decl></param>) <block>{
            <comment type="line">// silently ignore - we'll report a skip with no message</comment>
        }</block></catch></try>
        <return>return <expr><name>message</name></expr>;</return>

    }</block></function>

}</block></class>
</unit>
