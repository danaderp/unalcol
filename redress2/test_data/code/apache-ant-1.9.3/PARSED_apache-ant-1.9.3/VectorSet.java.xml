<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\util\VectorSet.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>Collection</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashSet</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>LinkedList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Set</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>

<comment type="javadoc">/**
 * Subclass of Vector that won't store duplicate entries and shows
 * HashSet's constant time performance characteristics for the
 * contains method.
 *
 * &lt;p&gt;This is not a general purpose class but has been written because
 * the protected members of {@link
 * org.apache.tools.ant.DirectoryScanner DirectoryScanner} prohibited
 * later revisions from using a more efficient collection.&lt;/p&gt;
 *
 * &lt;p&gt;Methods are synchronized to keep Vector's contract.&lt;/p&gt;
 *
 * @since Ant 1.8.0
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name><name>VectorSet</name><argument_list>&lt;<argument><name>E</name></argument>&gt;</argument_list></name> <super><extends>extends <name><name>Vector</name><argument_list>&lt;<argument><name>E</name></argument>&gt;</argument_list></name></extends></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>1L</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>HashSet</name><argument_list>&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>set</name> =<init> <expr>new <call><name><name>HashSet</name><argument_list>&lt;<argument><name>E</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>VectorSet</name><parameter_list>()</parameter_list> <block>{ <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt> }</block></constructor>

    <constructor><specifier>public</specifier> <name>VectorSet</name><parameter_list>(<param><decl><type><name>int</name></type> <name>initialCapacity</name></decl></param>)</parameter_list> <block>{ <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>initialCapacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></constructor>

    <constructor><specifier>public</specifier> <name>VectorSet</name><parameter_list>(<param><decl><type><name>int</name></type> <name>initialCapacity</name></decl></param>, <param><decl><type><name>int</name></type> <name>capacityIncrement</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>initialCapacity</name></expr></argument>, <argument><expr><name>capacityIncrement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>VectorSet</name><parameter_list>(<param><decl><type><name><name>Collection</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name>E</name></extends></argument>&gt;</argument_list></name></type> <name>c</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>c</name> != <name>null</name></expr>)</condition><then> <block>{
            <for>for (<init><decl><type><name>E</name></type> <name>e</name> :<range> <expr><name>c</name></expr></range></decl></init>) <block>{
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></then></if>
    }</block></constructor>

    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>boolean</name></type> <name>add</name><parameter_list>(<param><decl><type><name>E</name></type> <name>o</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr>!<call><name><name>set</name>.<name>contains</name></name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>doAdd</name><argument_list>(<argument><expr><call><name>size</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <return>return <expr>false</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * This implementation may not add the element at the given index
     * if it is already contained in the collection.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>, <param><decl><type><name>E</name></type> <name>o</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>doAdd</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>doAdd</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>, <param><decl><type><name>E</name></type> <name>o</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// Vector.add seems to delegate to insertElementAt, but this</comment>
        <comment type="line">// is not documented so we may better implement it ourselves</comment>
        <if>if <condition>(<expr><call><name><name>set</name>.<name>add</name></name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>count</name> =<init> <expr><call><name>size</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>ensureCapacity</name><argument_list>(<argument><expr><name>count</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>index</name> != <name>count</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>elementData</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>elementData</name></expr></argument>, <argument><expr><name>index</name> + 1</expr></argument>,
                                 <argument><expr><name>count</name> - <name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name><name>elementData</name><index>[<expr><name>index</name></expr>]</index></name> = <name>o</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>elementCount</name>++</expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>addElement</name><parameter_list>(<param><decl><type><name>E</name></type> <name>o</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>doAdd</name><argument_list>(<argument><expr><call><name>size</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>boolean</name></type> <name>addAll</name><parameter_list>(<param><decl><type><name><name>Collection</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name>E</name></extends></argument>&gt;</argument_list></name></type> <name>c</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>changed</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>E</name></type> <name>e</name> :<range> <expr><name>c</name></expr></range></decl></init>) <block>{
            <expr_stmt><expr><name>changed</name> |= <call><name>add</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>changed</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * This implementation may not add all elements at the given index
     * if any of them are already contained in the collection.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>boolean</name></type> <name>addAll</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>, <param><decl><type><name><name>Collection</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name>E</name></extends></argument>&gt;</argument_list></name></type> <name>c</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>changed</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>E</name></type> <name>e</name> :<range> <expr><name>c</name></expr></range></decl></init>) <block>{
            <if>if <condition>(<expr>!<call><name><name>set</name>.<name>contains</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>doAdd</name><argument_list>(<argument><expr><name>index</name>++</expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>changed</name> = true</expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <return>return <expr><name>changed</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>set</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><annotation>@<name>SuppressWarnings</name><argument_list>("unchecked")</argument_list></annotation>
        <specifier>final</specifier> <name><name>VectorSet</name><argument_list>&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>vs</name> =<init> <expr>(<name><name>VectorSet</name><argument_list>&lt;<argument><name>E</name></argument>&gt;</argument_list></name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>vs</name>.<name>set</name>.<name>addAll</name></name><argument_list>(<argument><expr><name>set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>vs</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>boolean</name></type> <name>contains</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>o</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>set</name>.<name>contains</name></name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>boolean</name></type> <name>containsAll</name><parameter_list>(<param><decl><type><name><name>Collection</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>c</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>set</name>.<name>containsAll</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>insertElementAt</name><parameter_list>(<param><decl><type><name>E</name></type> <name>o</name></decl></param>, <param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>doAdd</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>E</name></type> <name>remove</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>E</name></type> <name>o</name> =<init> <expr><call><name>get</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>remove</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>o</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>remove</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>o</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>doRemove</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>synchronized</specifier> <name>boolean</name></type> <name>doRemove</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>o</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// again, remove seems to delegate to removeElement, but we</comment>
        <comment type="line">// shouldn't trust it</comment>
        <if>if <condition>(<expr><call><name><name>set</name>.<name>remove</name></name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>index</name> =<init> <expr><call><name>indexOf</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>index</name> &lt; <name><name>elementData</name>.<name>length</name></name> - 1</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>elementData</name></expr></argument>, <argument><expr><name>index</name> + 1</expr></argument>, <argument><expr><name>elementData</name></expr></argument>, <argument><expr><name>index</name></expr></argument>,
                                 <argument><expr><name><name>elementData</name>.<name>length</name></name> - <name>index</name> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>elementCount</name>--</expr>;</expr_stmt>
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <return>return <expr>false</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>boolean</name></type> <name>removeAll</name><parameter_list>(<param><decl><type><name><name>Collection</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>c</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>changed</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>Object</name></type> <name>o</name> :<range> <expr><name>c</name></expr></range></decl></init>) <block>{
            <expr_stmt><expr><name>changed</name> |= <call><name>remove</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>changed</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>removeAllElements</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>set</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name>.<name>removeAllElements</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>removeElement</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>o</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>doRemove</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>removeElementAt</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>remove</name><argument_list>(<argument><expr><call><name>get</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>removeRange</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>int</name></type> <name>fromIndex</name></decl></param>, <param><decl><type><name>int</name></type> <name>toIndex</name></decl></param>)</parameter_list> <block>{
        <while>while <condition>(<expr><name>toIndex</name> &gt; <name>fromIndex</name></expr>)</condition> <block>{
            <expr_stmt><expr><call><name>remove</name><argument_list>(<argument><expr>--<name>toIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>boolean</name></type> <name>retainAll</name><parameter_list>(<param><decl><type><name><name>Collection</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>c</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr>!(<name>c</name> <name>instanceof</name> <name>Set</name>)</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>c</name> = new <call><name><name>HashSet</name><argument_list>&lt;<argument><name>Object</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name><name>LinkedList</name><argument_list>&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>l</name> =<init> <expr>new <call><name><name>LinkedList</name><argument_list>&lt;<argument><name>E</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>E</name></type> <name>o</name> :<range> <expr><name>this</name></expr></range></decl></init>) <block>{
            <if>if <condition>(<expr>!<call><name><name>c</name>.<name>contains</name></name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>l</name>.<name>addLast</name></name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <if>if <condition>(<expr>!<call><name><name>l</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>removeAll</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <return>return <expr>false</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>E</name></type> <name>set</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>, <param><decl><type><name>E</name></type> <name>o</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>E</name></type> <name>orig</name> =<init> <expr><call><name>get</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>set</name>.<name>add</name></name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>elementData</name><index>[<expr><name>index</name></expr>]</index></name> = <name>o</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>set</name>.<name>remove</name></name><argument_list>(<argument><expr><name>orig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>oldIndexOfO</name> =<init> <expr><call><name>indexOf</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>remove</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>remove</name><argument_list>(<argument><expr><name>orig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>oldIndexOfO</name> &gt; <name>index</name> ? <name>index</name> : <name>index</name> - 1</expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><name>orig</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setElementAt</name><parameter_list>(<param><decl><type><name>E</name></type> <name>o</name></decl></param>, <param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>set</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
