<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\ExtensionPoint.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name></name>;</package>

<comment type="javadoc">/**
 * An extension point build files can provide as a place where other
 * build files can add new dependencies.
 *
 * @since Ant 1.8.0
 */</comment>
<class><specifier>public</specifier> class <name>ExtensionPoint</name> <super><extends>extends <name>Target</name></extends></super> <block>{

    <constructor><specifier>public</specifier> <name>ExtensionPoint</name><parameter_list>()</parameter_list> <block>{

    }</block></constructor>

    <comment type="javadoc">/**
     * Cloning constructor.
     * @param other the Target to clone.
     */</comment>
    <constructor><specifier>public</specifier> <name>ExtensionPoint</name><parameter_list>(<param><decl><type><name>Target</name></type> <name>other</name></decl></param>)</parameter_list> <block>{
        <comment type="line">//Should we have a clone constructor taking an ExtensionPoint as parameter?</comment>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>NO_CHILDREN_ALLOWED</name>
        =<init> <expr>"you must not nest child elements into an extension-point"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Throws an exception.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>addTask</name><parameter_list>(<param><decl><type><name>Task</name></type> <name>task</name></decl></param>)</parameter_list> <block>{
        <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>NO_CHILDREN_ALLOWED</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>

    <comment type="javadoc">/**
     * Throws an exception.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>addDataType</name><parameter_list>(<param><decl><type><name>RuntimeConfigurable</name></type> <name>r</name></decl></param>)</parameter_list> <block>{
        <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>NO_CHILDREN_ALLOWED</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>
    
}</block></class>
</unit>
