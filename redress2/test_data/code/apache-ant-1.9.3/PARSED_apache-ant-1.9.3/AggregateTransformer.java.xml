<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\junit\AggregateTransformer.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>junit</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileNotFoundException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>

<import>import <name><name>java</name>.<name>net</name>.<name>URL</name></name>;</import>

<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>

<import>import <name><name>javax</name>.<name>xml</name>.<name>parsers</name>.<name>DocumentBuilder</name></name>;</import>
<import>import <name><name>javax</name>.<name>xml</name>.<name>parsers</name>.<name>DocumentBuilderFactory</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>XSLTProcess</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>Delete</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>TempFile</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>JAXPUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>EnumeratedAttribute</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Resource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>URLResource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>FileResource</name></name>;</import>

<import>import <name><name>org</name>.<name>w3c</name>.<name>dom</name>.<name>Document</name></name>;</import>

<comment type="javadoc">/**
 * Transform a JUnit xml report.
 * The default transformation generates an html report in either framed or non-framed
 * style. The non-framed style is convenient to have a concise report via mail, the
 * framed report is much more convenient if you want to browse into different
 * packages or testcases since it is a Javadoc like report.
 *
 */</comment>
<class><specifier>public</specifier> class <name>AggregateTransformer</name> <block>{
    <comment type="javadoc">/**
     * name of the frames format.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FRAMES</name> =<init> <expr>"frames"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * name of the no frames format.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>NOFRAMES</name> =<init> <expr>"noframes"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * defines acceptable formats.
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Format</name> <super><extends>extends <name>EnumeratedAttribute</name></extends></super> <block>{
        <comment type="javadoc">/**
         * list authorized values.
         * @return authorized values.
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getValues</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr>new <name><name>String</name><index>[]</index></name><block>{<expr><name>FRAMES</name></expr>, <expr><name>NOFRAMES</name></expr>}</block></expr>;</return>
        }</block></function>
    }</block></class>

    <comment type="line">// CheckStyle:VisibilityModifier OFF - bc</comment>
    <comment type="javadoc">/** Task */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Task</name></type> <name>task</name></decl>;</decl_stmt>

    <comment type="javadoc">/** the xml document to process */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Document</name></type> <name>document</name></decl>;</decl_stmt>

    <comment type="javadoc">/** the style directory. XSLs should be read from here if necessary */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>File</name></type> <name>styleDir</name></decl>;</decl_stmt>

    <comment type="javadoc">/** the destination directory, this is the root from where html should be generated */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>File</name></type> <name>toDir</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The params that will be sent to the XSL transformation
     *
     * @since Ant 1.7
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>List</name></type> <name>params</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Instance of a utility class to use for file operations.
     *
     * @since Ant 1.7
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>FileUtils</name></type> <name>FILE_UTILS</name> =<init> <expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Used to ensure the uniqueness of a property
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>counter</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** the format to use for the report. Must be &lt;tt&gt;FRAMES&lt;/tt&gt; or &lt;tt&gt;NOFRAMES&lt;/tt&gt; */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>format</name> =<init> <expr><name>FRAMES</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** XML Parser factory */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>DocumentBuilderFactory</name></type> <name>privateDBFactory</name></decl>;</decl_stmt>

    <comment type="javadoc">/** XML Parser factory accessible to subclasses */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <name>DocumentBuilderFactory</name></type> <name>dbfactory</name></decl>;</decl_stmt>

    static <block>{
       <expr_stmt><expr><name>privateDBFactory</name> = <call><name><name>DocumentBuilderFactory</name>.<name>newInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><name>dbfactory</name> = <name>privateDBFactory</name></expr>;</expr_stmt>
    }</block>
    <comment type="line">// CheckStyle:VisibilityModifier ON</comment>

    <comment type="javadoc">/**
     * constructor creating the transformer from the junitreport task.
     * @param task  task delegating to this class
     */</comment>
    <constructor><specifier>public</specifier> <name>AggregateTransformer</name><parameter_list>(<param><decl><type><name>Task</name></type> <name>task</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>task</name></name> = <name>task</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>params</name> = new <call><name>Vector</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Get the Document Builder Factory
     *
     * @return the DocumentBuilderFactory instance in use
     */</comment>
    <function><type><specifier>protected</specifier> <specifier>static</specifier> <name>DocumentBuilderFactory</name></type> <name>getDocumentBuilderFactory</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>privateDBFactory</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * sets the format.
     * @param format  Must be &lt;tt&gt;FRAMES&lt;/tt&gt; or &lt;tt&gt;NOFRAMES&lt;/tt&gt;
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFormat</name><parameter_list>(<param><decl><type><name>Format</name></type> <name>format</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>format</name></name> = <call><name><name>format</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * sets the input document.
     * @param doc input dom tree
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setXmlDocument</name><parameter_list>(<param><decl><type><name>Document</name></type> <name>doc</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>document</name></name> = <name>doc</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the xml file to be processed. This is a helper if you want
     * to set the file directly. Much more for testing purposes.
     * @param xmlfile xml file to be processed
     * @throws BuildException if the document cannot be parsed.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setXmlfile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>xmlfile</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <try>try <block>{
            <decl_stmt><decl><type><name>DocumentBuilder</name></type> <name>builder</name> =<init> <expr><call><name><name>privateDBFactory</name>.<name>newDocumentBuilder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>InputStream</name></type> <name>in</name> =<init> <expr>new <call><name>FileInputStream</name><argument_list>(<argument><expr><name>xmlfile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <try>try <block>{
                <decl_stmt><decl><type><name>Document</name></type> <name>doc</name> =<init> <expr><call><name><name>builder</name>.<name>parse</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>setXmlDocument</name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <finally>finally <block>{
                <expr_stmt><expr><call><name><name>in</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></finally></try>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Error while parsing document: " + <name>xmlfile</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * set the style directory. It is optional and will override the
     * default xsl used.
     * @param styledir  the directory containing the xsl files if the user
     * would like to override with its own style.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setStyledir</name><parameter_list>(<param><decl><type><name>File</name></type> <name>styledir</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>styleDir</name></name> = <name>styledir</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/** set the destination directory.
     * @param todir the destination directory
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTodir</name><parameter_list>(<param><decl><type><name>File</name></type> <name>todir</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>toDir</name></name> = <name>todir</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/** set the extension of the output files
     * @param ext extension.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setExtension</name><parameter_list>(<param><decl><type><name>String</name></type> <name>ext</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>task</name>.<name>log</name></name><argument_list>(<argument><expr>"extension is not used anymore"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Create an instance of an XSL parameter for configuration by Ant.
     *
     * @return an instance of the Param class to be configured.
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <name><name>XSLTProcess</name>.<name>Param</name></name></type> <name>createParam</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>XSLTProcess</name>.<name>Param</name></name></type> <name>p</name> =<init> <expr>new <call><name><name>XSLTProcess</name>.<name>Param</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>params</name>.<name>add</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * transformation
     * @throws BuildException exception if something goes wrong with the transformation.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>transform</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>checkOptions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Project</name></type> <name>project</name> =<init> <expr><call><name><name>task</name>.<name>getProject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>TempFile</name></type> <name>tempFileTask</name> =<init> <expr>new <call><name>TempFile</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>tempFileTask</name>.<name>bindToOwner</name></name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>XSLTProcess</name></type> <name>xsltTask</name> =<init> <expr>new <call><name>XSLTProcess</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>xsltTask</name>.<name>bindToOwner</name></name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>xsltTask</name>.<name>setXslResource</name></name><argument_list>(<argument><expr><call><name>getStylesheet</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// acrobatic cast.</comment>
        <expr_stmt><expr><call><name><name>xsltTask</name>.<name>setIn</name></name><argument_list>(<argument><expr>((<name>XMLResultAggregator</name>) <name>task</name>).<call><name>getDestinationFile</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>outputFile</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>format</name>.<name>equals</name></name><argument_list>(<argument><expr><name>FRAMES</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>tempFileProperty</name> =<init> <expr><call><name>getClass</name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call> + <call><name><name>String</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name>counter</name>++</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>File</name></type> <name>tmp</name> =<init> <expr><call><name><name>FILE_UTILS</name>.<name>resolveFile</name></name><argument_list>(<argument><expr><call><name><name>project</name>.<name>getBaseDir</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>project</name>
                    .<name>getProperty</name></name><argument_list>(<argument><expr>"java.io.tmpdir"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>tempFileTask</name>.<name>setDestDir</name></name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>tempFileTask</name>.<name>setProperty</name></name><argument_list>(<argument><expr><name>tempFileProperty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>tempFileTask</name>.<name>execute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>outputFile</name> = new <call><name>File</name><argument_list>(<argument><expr><call><name><name>project</name>.<name>getProperty</name></name><argument_list>(<argument><expr><name>tempFileProperty</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>outputFile</name> = new <call><name>File</name><argument_list>(<argument><expr><name>toDir</name></expr></argument>, <argument><expr>"junit-noframes.html"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><call><name><name>xsltTask</name>.<name>setOut</name></name><argument_list>(<argument><expr><name>outputFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>Iterator</name></type> <name>i</name> =<init> <expr><call><name><name>params</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>i</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
            <decl_stmt><decl><type><name><name>XSLTProcess</name>.<name>Param</name></name></type> <name>param</name> =<init> <expr>(<name><name>XSLTProcess</name>.<name>Param</name></name>) <call><name><name>i</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>XSLTProcess</name>.<name>Param</name></name></type> <name>newParam</name> =<init> <expr><call><name><name>xsltTask</name>.<name>createParam</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>newParam</name>.<name>setProject</name></name><argument_list>(<argument><expr><call><name><name>task</name>.<name>getProject</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>newParam</name>.<name>setName</name></name><argument_list>(<argument><expr><call><name><name>param</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>newParam</name>.<name>setExpression</name></name><argument_list>(<argument><expr><call><name><name>param</name>.<name>getExpression</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <decl_stmt><decl><type><name><name>XSLTProcess</name>.<name>Param</name></name></type> <name>paramx</name> =<init> <expr><call><name><name>xsltTask</name>.<name>createParam</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>paramx</name>.<name>setProject</name></name><argument_list>(<argument><expr><call><name><name>task</name>.<name>getProject</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>paramx</name>.<name>setName</name></name><argument_list>(<argument><expr>"output.dir"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>paramx</name>.<name>setExpression</name></name><argument_list>(<argument><expr><call><name><name>toDir</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>t0</name> =<init> <expr><call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>xsltTask</name>.<name>execute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Errors while applying transformations: " + <call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
        <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>dt</name> =<init> <expr><call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call> - <name>t0</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>task</name>.<name>log</name></name><argument_list>(<argument><expr>"Transform time: " + <name>dt</name> + "ms"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>format</name>.<name>equals</name></name><argument_list>(<argument><expr><name>FRAMES</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Delete</name></type> <name>delete</name> =<init> <expr>new <call><name>Delete</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>delete</name>.<name>bindToOwner</name></name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>delete</name>.<name>setFile</name></name><argument_list>(<argument><expr><name>outputFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>delete</name>.<name>execute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * access the stylesheet to be used as a resource.
     * @return stylesheet as a resource
     */</comment>
    <function><type><specifier>protected</specifier> <name>Resource</name></type> <name>getStylesheet</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>xslname</name> =<init> <expr>"junit-frames.xsl"</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>NOFRAMES</name>.<name>equals</name></name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>xslname</name> = "junit-noframes.xsl"</expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>styleDir</name> == <name>null</name></expr>)</condition><then> <block>{
            <comment type="line">// If style dir is not specified we have to retrieve</comment>
            <comment type="line">// the stylesheet from the classloader</comment>
            <decl_stmt><decl><type><name>URL</name></type> <name>stylesheetURL</name> =<init> <expr><call><name>getClass</name><argument_list>()</argument_list></call>.<call><name>getClassLoader</name><argument_list>()</argument_list></call>.<call><name>getResource</name><argument_list>(
                    <argument><expr>"org/apache/tools/ant/taskdefs/optional/junit/xsl/" + <name>xslname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr>new <call><name>URLResource</name><argument_list>(<argument><expr><name>stylesheetURL</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <comment type="line">// If we are here, then the style dir is here and we</comment>
        <comment type="line">// should read the stylesheet from the filesystem</comment>
        <return>return <expr>new <call><name>FileResource</name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><name>styleDir</name></expr></argument>, <argument><expr><name>xslname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/** check for invalid options
     * @throws BuildException if something goes wrong.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>checkOptions</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <comment type="line">// set the destination directory relative from the project if needed.</comment>
        <if>if <condition>(<expr><name>toDir</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>toDir</name> = <call><name><name>task</name>.<name>getProject</name></name><argument_list>()</argument_list></call>.<call><name>resolveFile</name><argument_list>(<argument><expr>"."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr>!<call><name><name>toDir</name>.<name>isAbsolute</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>toDir</name> = <call><name><name>task</name>.<name>getProject</name></name><argument_list>()</argument_list></call>.<call><name>resolveFile</name><argument_list>(<argument><expr><call><name><name>toDir</name>.<name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Get the systemid of the appropriate stylesheet based on its
     * name and styledir. If no styledir is defined it will load
     * it as a java resource in the xsl child package, otherwise it
     * will get it from the given directory.
     * @return system ID of the stylesheet.
     * @throws IOException thrown if the requested stylesheet does
     * not exist.
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>getStylesheetSystemId</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>xslname</name> =<init> <expr>"junit-frames.xsl"</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>NOFRAMES</name>.<name>equals</name></name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>xslname</name> = "junit-noframes.xsl"</expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>styleDir</name> == <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>URL</name></type> <name>url</name> =<init> <expr><call><name>getClass</name><argument_list>()</argument_list></call>.<call><name>getResource</name><argument_list>(<argument><expr>"xsl/" + <name>xslname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>url</name> == <name>null</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>FileNotFoundException</name><argument_list>(<argument><expr>"Could not find jar resource " + <name>xslname</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <return>return <expr><call><name><name>url</name>.<name>toExternalForm</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>File</name></type> <name>file</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name>styleDir</name></expr></argument>, <argument><expr><name>xslname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>file</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>FileNotFoundException</name><argument_list>(<argument><expr>"Could not find file '" + <name>file</name> + "'"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr><call><name><name>JAXPUtils</name>.<name>getSystemId</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

}</block></class>
</unit>
