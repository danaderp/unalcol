<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\junit\JUnit4TestMethodAdapter.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>junit</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>junit</name>.<name>framework</name>.<name>Test</name></name>;</import>
<import>import <name><name>junit</name>.<name>framework</name>.<name>TestResult</name></name>;</import>
<import>import <name><name>org</name>.<name>junit</name>.<name>runner</name>.<name>Description</name></name>;</import>
<import>import <name><name>org</name>.<name>junit</name>.<name>runner</name>.<name>Request</name></name>;</import>
<import>import <name><name>org</name>.<name>junit</name>.<name>runner</name>.<name>Runner</name></name>;</import>
<import>import <name><name>org</name>.<name>junit</name>.<name>runner</name>.<name>manipulation</name>.<name>Filter</name></name>;</import>

<comment type="javadoc">/**
 * Adapter between JUnit 3.8.x API and JUnit 4.x API for execution of tests
 * and listening of events (test start, test finish, test failure, test skipped).
 * The constructor is passed a JUnit 4 test class and a list of name of methods
 * in it that should be executed. Method {@link #run run(TestResult)} executes
 * the given JUnit-4-style test methods and notifies the given {@code TestResult}
 * object using its old (JUnit 3.8.x style) API.
 *
 * @author  Marian Petras
 */</comment>
<class><specifier>public</specifier> class <name>JUnit4TestMethodAdapter</name> <super><implements>implements <name>Test</name></implements></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Class</name></type> <name>testClass</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name><index>[]</index></type> <name>methodNames</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Runner</name></type> <name>runner</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>CustomJUnit4TestAdapterCache</name></type> <name>cache</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a new adapter for the given class and a method within the class.
     * 
     * @param testClass test class containing the method to be executed
     * @param methodNames names of the test methods that are to be executed
     * @exception  java.lang.IllegalArgumentException
     *             if any of the arguments is {@code null}
     *             or if any of the given method names is {@code null} or empty
     */</comment>
    <constructor><specifier>public</specifier> <name>JUnit4TestMethodAdapter</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Class</name></type> <name>testClass</name></decl></param>,
                                   <param><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>methodNames</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>testClass</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"testClass is &lt;null&gt;"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>methodNames</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"methodNames is &lt;null&gt;"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>methodNames</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <if>if <condition>(<expr><name><name>methodNames</name><index>[<expr><name>i</name></expr>]</index></name> == <name>null</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"method name #" + <name>i</name> + " is &lt;null&gt;"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <if>if <condition>(<expr><name><name>methodNames</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>length</name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"method name #" + <name>i</name> + " is empty"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
        }</block></for>
        <expr_stmt><expr><name><name>this</name>.<name>testClass</name></name> = <name>testClass</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>methodNames</name></name> = (<name><name>String</name><index>[]</index></name>) <call><name><name>methodNames</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>cache</name></name> = <call><name><name>CustomJUnit4TestAdapterCache</name>.<name>getInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Warning: If 'testClass' is an old-style (pre-JUnit-4) class,</comment>
        <comment type="line">// then all its test methods will be executed by the returned runner!</comment>
        <decl_stmt><decl><type><name>Request</name></type> <name>request</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>methodNames</name>.<name>length</name></name> == 1</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>request</name> = <call><name><name>Request</name>.<name>method</name></name><argument_list>(<argument><expr><name>testClass</name></expr></argument>, <argument><expr><name><name>methodNames</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>request</name> = <call><name><name>Request</name>.<name>aClass</name></name><argument_list>(<argument><expr><name>testClass</name></expr></argument>)</argument_list></call>.<call><name>filterWith</name><argument_list>(
                            <argument><expr>new <call><name>MultipleMethodsFilter</name><argument_list>(<argument><expr><name>testClass</name></expr></argument>, <argument><expr><name>methodNames</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>runner</name> = <call><name><name>request</name>.<name>getRunner</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>countTestCases</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>runner</name>.<name>testCount</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>Description</name></type> <name>getDescription</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>runner</name>.<name>getDescription</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>List</name></type><comment type="block">/*&lt;Test&gt;*/</comment> <name>getTests</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>cache</name>.<name>asTestList</name></name><argument_list>(<argument><expr><call><name>getDescription</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>Class</name></type> <name>getTestClass</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>testClass</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>TestResult</name></type> <name>result</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>runner</name>.<name>run</name></name><argument_list>(<argument><expr><call><name><name>cache</name>.<name>getNotifier</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>testClassName</name> =<init> <expr><call><name><name>testClass</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>buf</name> =<init> <expr>new <call><name>StringBuilder</name><argument_list>(<argument><expr><call><name><name>testClassName</name>.<name>length</name></name><argument_list>()</argument_list></call>
                                              + 12 * <name><name>methodNames</name>.<name>length</name></name></expr></argument>)</argument_list></call>
                            .<call><name>append</name><argument_list>(<argument><expr>':'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>methodNames</name>.<name>length</name></name> != 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr><name><name>methodNames</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>1</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>methodNames</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr>','</expr></argument>)</argument_list></call>
                   .<call><name>append</name><argument_list>(<argument><expr><name><name>methodNames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></then></if>
        <return>return <expr><call><name><name>buf</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <class><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>MultipleMethodsFilter</name> <super><extends>extends <name>Filter</name></extends></super> <block>{

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Description</name></type> <name>methodsListDescription</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Class</name></type> <name>testClass</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name><index>[]</index></type> <name>methodNames</name></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>MultipleMethodsFilter</name><parameter_list>(<param><decl><type><name>Class</name></type> <name>testClass</name></decl></param>, <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>methodNames</name></decl></param>)</parameter_list> <block>{
            <if>if <condition>(<expr><name>testClass</name> == <name>null</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"testClass is &lt;null&gt;"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <if>if <condition>(<expr><name>methodNames</name> == <name>null</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"methodNames is &lt;null&gt;"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <expr_stmt><expr><name>methodsListDescription</name> = <call><name><name>Description</name>.<name>createSuiteDescription</name></name><argument_list>(<argument><expr><name>testClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>methodNames</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <expr_stmt><expr><call><name><name>methodsListDescription</name>.<name>addChild</name></name><argument_list>(
                        <argument><expr><call><name><name>Description</name>.<name>createTestDescription</name></name><argument_list>(<argument><expr><name>testClass</name></expr></argument>, <argument><expr><name><name>methodNames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><name><name>this</name>.<name>testClass</name></name> = <name>testClass</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>methodNames</name></name> = <name>methodNames</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>shouldRun</name><parameter_list>(<param><decl><type><name>Description</name></type> <name>description</name></decl></param>)</parameter_list> <block>{
            <if>if <condition>(<expr><name><name>methodNames</name>.<name>length</name></name> == 0</expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>
            }</block></then></if>
            <if>if <condition>(<expr><call><name><name>description</name>.<name>isTest</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>Iterator</name></type><comment type="block">/*&lt;Description&gt;*/</comment> <name>it</name> =<init> <expr><call><name><name>methodsListDescription</name>.<name>getChildren</name></name><argument_list>()</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><call><name><name>it</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                    <decl_stmt><decl><type><name>Description</name></type> <name>methodDescription</name> =<init> <expr>(<name>Description</name>) <call><name><name>it</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><call><name><name>methodDescription</name>.<name>equals</name></name><argument_list>(<argument><expr><name>description</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <return>return <expr>true</expr>;</return>
                    }</block></then></if>
                }</block></while>
            }</block></then> <else>else <block>{
                <decl_stmt><decl><type><name>Iterator</name></type><comment type="block">/*&lt;Description&gt;*/</comment> <name>it</name> =<init> <expr><call><name><name>description</name>.<name>getChildren</name></name><argument_list>()</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><call><name><name>it</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                    <decl_stmt><decl><type><name>Description</name></type> <name>each</name> =<init> <expr>(<name>Description</name>) <call><name><name>it</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><call><name>shouldRun</name><argument_list>(<argument><expr><name>each</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <return>return <expr>true</expr>;</return>
                    }</block></then></if>
                }</block></while>
            }</block></else></if>
            <return>return <expr>false</expr>;</return>					
        }</block></function>

        <function><type><specifier>public</specifier> <name>String</name></type> <name>describe</name><parameter_list>()</parameter_list> <block>{
            <decl_stmt><decl><type><name>StringBuilder</name></type> <name>buf</name> =<init> <expr>new <call><name>StringBuilder</name><argument_list>(<argument><expr>40</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>methodNames</name>.<name>length</name></name> == 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr>"No methods"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr><name><name>methodNames</name>.<name>length</name></name> == 1 ? "Method" : "Methods"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr>' '</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr><name><name>methodNames</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>1</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>methodNames</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                    <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr>','</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><name><name>methodNames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
            }</block></else></if>
            <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr>'('</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><call><name><name>testClass</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr>')'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>buf</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>

    }</block></class>


}</block></class>
</unit>
