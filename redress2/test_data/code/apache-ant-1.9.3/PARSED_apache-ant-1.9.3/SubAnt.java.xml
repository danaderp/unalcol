<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\SubAnt.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>

<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Main</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Path</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>DirSet</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>FileSet</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>FileList</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>PropertySet</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Reference</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>ResourceCollection</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>Ant</name>.<name>TargetElement</name></name>;</import>


<comment type="javadoc">/**
 * Calls a given target for all defined sub-builds. This is an extension
 * of ant for bulk project execution.
 * &lt;p&gt;
 * &lt;h2&gt; Use with directories &lt;/h2&gt;
 * &lt;p&gt;
 * subant can be used with directory sets to execute a build from different directories.
 * 2 different options are offered
 * &lt;/p&gt;
 * &lt;ul&gt;
 * &lt;li&gt;
 * run the same build file /somepath/otherpath/mybuild.xml
 * with different base directories use the genericantfile attribute
 * &lt;/li&gt;
 * &lt;li&gt;if you want to run directory1/build.xml, directory2/build.xml, ....
 * use the antfile attribute. The base directory does not get set by the subant task in this case,
 * because you can specify it in each build file.
 * &lt;/li&gt;
 * &lt;/ul&gt;
 * @since Ant1.6
 * @ant.task name="subant" category="control"
 */</comment>
<class><specifier>public</specifier> class <name>SubAnt</name> <super><extends>extends <name>Task</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>Path</name></type> <name>buildpath</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Ant</name></type> <name>ant</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>subTarget</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>antfile</name> =<init> <expr><call><name>getDefaultBuildFile</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>genericantfile</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>verbose</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>inheritAll</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>inheritRefs</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>failOnError</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>output</name>  =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Vector</name></type> <name>properties</name> =<init> <expr>new <call><name>Vector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Vector</name></type> <name>references</name> =<init> <expr>new <call><name>Vector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Vector</name></type> <name>propertySets</name> =<init> <expr>new <call><name>Vector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** the targets to call on the new project */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Vector</name></type><comment type="block">/*&lt;TargetElement&gt;*/</comment> <name>targets</name> =<init> <expr>new <call><name>Vector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Get the default build file name to use when launching the task.
     * &lt;p&gt;
     * This function may be overrided by providers of custom ProjectHelper so they can implement easily their sub
     * launcher.
     * 
     * @return the name of the default file
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>getDefaultBuildFile</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>Main</name>.<name>DEFAULT_BUILD_FILENAME</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Pass output sent to System.out to the new project.
     *
     * @param output a line of output
     * @since Ant 1.6.2
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>handleOutput</name><parameter_list>(<param><decl><type><name>String</name></type> <name>output</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>ant</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>ant</name>.<name>handleOutput</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>super</name>.<name>handleOutput</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Process input into the ant task
     *
     * @param buffer the buffer into which data is to be read.
     * @param offset the offset into the buffer at which data is stored.
     * @param length the amount of data to read
     *
     * @return the number of bytes read
     *
     * @exception IOException if the data cannot be read
     *
     * @see Task#handleInput(byte[], int, int)
     *
     * @since Ant 1.6.2
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>handleInput</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buffer</name></decl></param>, <param><decl><type><name>int</name></type> <name>offset</name></decl></param>, <param><decl><type><name>int</name></type> <name>length</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>ant</name> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>ant</name>.<name>handleInput</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
            <return>return <expr><call><name><name>super</name>.<name>handleInput</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Pass output sent to System.out to the new project.
     *
     * @param output The output to log. Should not be &lt;code&gt;null&lt;/code&gt;.
     *
     * @since Ant 1.6.2
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>handleFlush</name><parameter_list>(<param><decl><type><name>String</name></type> <name>output</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>ant</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>ant</name>.<name>handleFlush</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>super</name>.<name>handleFlush</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Pass output sent to System.err to the new project.
     *
     * @param output The error output to log. Should not be &lt;code&gt;null&lt;/code&gt;.
     *
     * @since Ant 1.6.2
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>handleErrorOutput</name><parameter_list>(<param><decl><type><name>String</name></type> <name>output</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>ant</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>ant</name>.<name>handleErrorOutput</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>super</name>.<name>handleErrorOutput</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Pass output sent to System.err to the new project.
     *
     * @param output The error output to log. Should not be &lt;code&gt;null&lt;/code&gt;.
     *
     * @since Ant 1.6.2
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>handleErrorFlush</name><parameter_list>(<param><decl><type><name>String</name></type> <name>output</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>ant</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>ant</name>.<name>handleErrorFlush</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>super</name>.<name>handleErrorFlush</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Runs the various sub-builds.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>buildpath</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"No buildpath specified"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name><index>[]</index></type> <name>filenames</name> =<init> <expr><call><name><name>buildpath</name>.<name>list</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>count</name> =<init> <expr><name><name>filenames</name>.<name>length</name></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>count</name> &lt; 1</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"No sub-builds to iterate on"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>
<comment type="block">/*
    //REVISIT: there must be cleaner way of doing this, if it is merited at all
        if (subTarget == null) {
            subTarget = getOwningTarget().getName();
        }
*/</comment>
        <decl_stmt><decl><type><name>BuildException</name></type> <name>buildException</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>count</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
            <decl_stmt><decl><type><name>File</name></type> <name>file</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>subdirPath</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Throwable</name></type> <name>thrownException</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <try>try <block>{
                <decl_stmt><decl><type><name>File</name></type> <name>directory</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>file</name> = new <call><name>File</name><argument_list>(<argument><expr><name><name>filenames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><call><name><name>file</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><name>verbose</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>subdirPath</name> = <call><name><name>file</name>.<name>getPath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Entering directory: " + <name>subdirPath</name> + "\n"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <if>if <condition>(<expr><name>genericantfile</name> != <name>null</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>directory</name> = <name>file</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>file</name> = <name>genericantfile</name></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <expr_stmt><expr><name>file</name> = new <call><name>File</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>antfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></then></if>
                <expr_stmt><expr><call><name>execute</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>verbose</name> &amp;&amp; <name>subdirPath</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Leaving directory: " + <name>subdirPath</name> + "\n"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block> <catch>catch (<param><decl><type><name>RuntimeException</name></type> <name>ex</name></decl></param>) <block>{
                <if>if <condition>(<expr>!(<call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>isKeepGoingMode</name><argument_list>()</argument_list></call>)</expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><name>verbose</name> &amp;&amp; <name>subdirPath</name> != <name>null</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Leaving directory: " + <name>subdirPath</name> + "\n"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <throw>throw <expr><name>ex</name></expr>;</throw> <comment type="line">// throw further</comment>
                }</block></then></if>
                <expr_stmt><expr><name>thrownException</name> = <name>ex</name></expr>;</expr_stmt>
            }</block></catch> <catch>catch (<param><decl><type><name>Throwable</name></type> <name>ex</name></decl></param>) <block>{
                <if>if <condition>(<expr>!(<call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>isKeepGoingMode</name><argument_list>()</argument_list></call>)</expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><name>verbose</name> &amp;&amp; <name>subdirPath</name> != <name>null</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Leaving directory: " + <name>subdirPath</name> + "\n"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if>
                <expr_stmt><expr><name>thrownException</name> = <name>ex</name></expr>;</expr_stmt>
            }</block></catch></try>
            <if>if <condition>(<expr><name>thrownException</name> != <name>null</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>thrownException</name> <name>instanceof</name> <name>BuildException</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"File '" + <name>file</name>
                        + "' failed with message '"
                        + <call><name><name>thrownException</name>.<name>getMessage</name></name><argument_list>()</argument_list></call> + "'."</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_ERR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <comment type="line">// only the first build exception is reported</comment>
                    <if>if <condition>(<expr><name>buildException</name> == <name>null</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>buildException</name> = (<name>BuildException</name>) <name>thrownException</name></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Target '" + <name>file</name>
                        + "' failed with message '"
                        + <call><name><name>thrownException</name>.<name>getMessage</name></name><argument_list>()</argument_list></call> + "'."</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_ERR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>thrownException</name>.<name>printStackTrace</name></name><argument_list>(<argument><expr><name><name>System</name>.<name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>buildException</name> == <name>null</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>buildException</name> =
                            new <call><name>BuildException</name><argument_list>(<argument><expr><name>thrownException</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></else></if>
                <if>if <condition>(<expr><name>verbose</name> &amp;&amp; <name>subdirPath</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Leaving directory: " + <name>subdirPath</name> + "\n"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></for>
        <comment type="line">// check if one of the builds failed in keep going mode</comment>
        <if>if <condition>(<expr><name>buildException</name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr><name>buildException</name></expr>;</throw>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Runs the given target on the provided build file.
     *
     * @param  file the build file to execute
     * @param  directory the directory of the current iteration
     * @throws BuildException is the file cannot be found, read, is
     *         a directory, or the target called failed, but only if
     *         &lt;code&gt;failOnError&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;. Otherwise,
     *         a warning log message is simply output.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>execute</name><parameter_list>(<param><decl><type><name>File</name></type> <name>file</name></decl></param>, <param><decl><type><name>File</name></type> <name>directory</name></decl></param>)</parameter_list>
                <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr>!<call><name><name>file</name>.<name>exists</name></name><argument_list>()</argument_list></call> || <call><name><name>file</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call> || !<call><name><name>file</name>.<name>canRead</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>msg</name> =<init> <expr>"Invalid file: " + <name>file</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>failOnError</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>

        <expr_stmt><expr><name>ant</name> = <call><name>createAntTask</name><argument_list>(<argument><expr><name>directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>antfilename</name> =<init> <expr><call><name><name>file</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ant</name>.<name>setAntfile</name></name><argument_list>(<argument><expr><name>antfilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>size</name> =<init> <expr><call><name><name>targets</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>size</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>TargetElement</name></type> <name>targetElement</name> =<init> <expr>(<name>TargetElement</name>) <call><name><name>targets</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>ant</name>.<name>addConfiguredTarget</name></name><argument_list>(<argument><expr><name>targetElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <try>try <block>{
            <if>if <condition>(<expr><name>verbose</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Executing: " + <name>antfilename</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>ant</name>.<name>execute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>e</name></decl></param>) <block>{
            <if>if <condition>(<expr><name>failOnError</name> || <call><name>isHardError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <throw>throw <expr><name>e</name></expr>;</throw>
            }</block></then></if>
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Failure for target '" + <name>subTarget</name>
               + "' of: " +  <name>antfilename</name> + "\n"
               + <call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch> <catch>catch (<param><decl><type><name>Throwable</name></type> <name>e</name></decl></param>) <block>{
            <if>if <condition>(<expr><name>failOnError</name> || <call><name>isHardError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Failure for target '" + <name>subTarget</name>
                + "' of: " + <name>antfilename</name> + "\n"
                + <call><name><name>e</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch> <finally>finally <block>{
            <expr_stmt><expr><name>ant</name> = <name>null</name></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>
    <comment type="javadoc">/** whether we should even try to continue after this error */</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>isHardError</name><parameter_list>(<param><decl><type><name>Throwable</name></type> <name>t</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>t</name> <name>instanceof</name> <name>BuildException</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name>isHardError</name><argument_list>(<argument><expr><call><name><name>t</name>.<name>getCause</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr><name>t</name> <name>instanceof</name> <name>OutOfMemoryError</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr><name>t</name> <name>instanceof</name> <name>ThreadDeath</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then> <else>else <block>{ <comment type="line">// incl. t == null</comment>
            <return>return <expr>false</expr>;</return>
        }</block></else></if></else></if></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * This method builds the file name to use in conjunction with directories.
     *
     * &lt;p&gt;Defaults to "build.xml".
     * If &lt;code&gt;genericantfile&lt;/code&gt; is set, this attribute is ignored.&lt;/p&gt;
     *
     * @param  antfile the short build file name. Defaults to "build.xml".
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAntfile</name><parameter_list>(<param><decl><type><name>String</name></type> <name>antfile</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>antfile</name></name> = <name>antfile</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * This method builds a file path to use in conjunction with directories.
     *
     * &lt;p&gt;Use &lt;code&gt;genericantfile&lt;/code&gt;, in order to run the same build file
     * with different basedirs.&lt;/p&gt;
     * If this attribute is set, &lt;code&gt;antfile&lt;/code&gt; is ignored.
     *
     * @param afile (path of the generic ant file, absolute or relative to
     *               project base directory)
     * */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setGenericAntfile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>afile</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>genericantfile</name></name> = <name>afile</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets whether to fail with a build exception on error, or go on.
     *
     * @param  failOnError the new value for this boolean flag.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFailonerror</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>failOnError</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>failOnError</name></name> = <name>failOnError</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The target to call on the different sub-builds. Set to "" to execute
     * the default target.
     * @param target the target
     * &lt;p&gt;
     */</comment>
    <comment type="line">//     REVISIT: Defaults to the target name that contains this task if not specified.</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTarget</name><parameter_list>(<param><decl><type><name>String</name></type> <name>target</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>subTarget</name></name> = <name>target</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a target to this Ant invocation.
     * @param t the &lt;code&gt;TargetElement&lt;/code&gt; to add.
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addConfiguredTarget</name><parameter_list>(<param><decl><type><name>TargetElement</name></type> <name>t</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> =<init> <expr><call><name><name>t</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>"".<call><name>equals</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"target name must not be empty"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>targets</name>.<name>add</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Enable/ disable verbose log messages showing when each sub-build path is entered/ exited.
     * The default value is "false".
     * @param on true to enable verbose mode, false otherwise (default).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setVerbose</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>on</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>verbose</name></name> = <name>on</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Corresponds to &lt;code&gt;&amp;lt;ant&amp;gt;&lt;/code&gt;'s
     * &lt;code&gt;output&lt;/code&gt; attribute.
     *
     * @param  s the filename to write the output to.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOutput</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>output</name></name> = <name>s</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Corresponds to &lt;code&gt;&amp;lt;ant&amp;gt;&lt;/code&gt;'s
     * &lt;code&gt;inheritall&lt;/code&gt; attribute.
     *
     * @param  b the new value for this boolean flag.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setInheritall</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>inheritAll</name></name> = <name>b</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Corresponds to &lt;code&gt;&amp;lt;ant&amp;gt;&lt;/code&gt;'s
     * &lt;code&gt;inheritrefs&lt;/code&gt; attribute.
     *
     * @param  b the new value for this boolean flag.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setInheritrefs</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>inheritRefs</name></name> = <name>b</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Corresponds to &lt;code&gt;&amp;lt;ant&amp;gt;&lt;/code&gt;'s
     * nested &lt;code&gt;&amp;lt;property&amp;gt;&lt;/code&gt; element.
     *
     * @param  p the property to pass on explicitly to the sub-build.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addProperty</name><parameter_list>(<param><decl><type><name>Property</name></type> <name>p</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>properties</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Corresponds to &lt;code&gt;&amp;lt;ant&amp;gt;&lt;/code&gt;'s
     * nested &lt;code&gt;&amp;lt;reference&amp;gt;&lt;/code&gt; element.
     *
     * @param  r the reference to pass on explicitly to the sub-build.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addReference</name><parameter_list>(<param><decl><type><name><name>Ant</name>.<name>Reference</name></name></type> <name>r</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>references</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Corresponds to &lt;code&gt;&amp;lt;ant&amp;gt;&lt;/code&gt;'s
     * nested &lt;code&gt;&amp;lt;propertyset&amp;gt;&lt;/code&gt; element.
     * @param ps the propertyset
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addPropertyset</name><parameter_list>(<param><decl><type><name>PropertySet</name></type> <name>ps</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>propertySets</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a directory set to the implicit build path.
     * &lt;p&gt;
     * &lt;em&gt;Note that the directories will be added to the build path
     * in no particular order, so if order is significant, one should
     * use a file list instead!&lt;/em&gt;
     *
     * @param  set the directory set to add.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addDirset</name><parameter_list>(<param><decl><type><name>DirSet</name></type> <name>set</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a file set to the implicit build path.
     * &lt;p&gt;
     * &lt;em&gt;Note that the directories will be added to the build path
     * in no particular order, so if order is significant, one should
     * use a file list instead!&lt;/em&gt;
     *
     * @param  set the file set to add.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addFileset</name><parameter_list>(<param><decl><type><name>FileSet</name></type> <name>set</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Adds an ordered file list to the implicit build path.
     * &lt;p&gt;
     * &lt;em&gt;Note that contrary to file and directory sets, file lists
     * can reference non-existent files or directories!&lt;/em&gt;
     *
     * @param  list the file list to add.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addFilelist</name><parameter_list>(<param><decl><type><name>FileList</name></type> <name>list</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a resource collection to the implicit build path.
     *
     * @param  rc the resource collection to add.
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>ResourceCollection</name></type> <name>rc</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>getBuildpath</name><argument_list>()</argument_list></call>.<call><name>add</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the buildpath to be used to find sub-projects.
     *
     * @param  s an Ant Path object containing the buildpath.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBuildpath</name><parameter_list>(<param><decl><type><name>Path</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>getBuildpath</name><argument_list>()</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Creates a nested build path, and add it to the implicit build path.
     *
     * @return the newly created nested build path.
     */</comment>
    <function><type><specifier>public</specifier> <name>Path</name></type> <name>createBuildpath</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getBuildpath</name><argument_list>()</argument_list></call>.<call><name>createPath</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Creates a nested &lt;code&gt;&amp;lt;buildpathelement&amp;gt;&lt;/code&gt;,
     * and add it to the implicit build path.
     *
     * @return the newly created nested build path element.
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Path</name>.<name>PathElement</name></name></type> <name>createBuildpathElement</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getBuildpath</name><argument_list>()</argument_list></call>.<call><name>createPathElement</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Gets the implicit build path, creating it if &lt;code&gt;null&lt;/code&gt;.
     *
     * @return the implicit build path.
     */</comment>
    <function><type><specifier>private</specifier> <name>Path</name></type> <name>getBuildpath</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>buildpath</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>buildpath</name> = new <call><name>Path</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>buildpath</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Buildpath to use, by reference.
     *
     * @param  r a reference to an Ant Path object containing the buildpath.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBuildpathRef</name><parameter_list>(<param><decl><type><name>Reference</name></type> <name>r</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>createBuildpath</name><argument_list>()</argument_list></call>.<call><name>setRefid</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Creates the &amp;lt;ant&amp;gt; task configured to run a specific target.
     *
     * @param directory : if not null the directory where the build should run
     *
     * @return the ant task, configured with the explicit properties and
     *         references necessary to run the sub-build.
     */</comment>
    <function><type><specifier>private</specifier> <name>Ant</name></type> <name>createAntTask</name><parameter_list>(<param><decl><type><name>File</name></type> <name>directory</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Ant</name></type> <name>antTask</name> =<init> <expr>new <call><name>Ant</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>antTask</name>.<name>init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>subTarget</name> != <name>null</name> &amp;&amp; <call><name><name>subTarget</name>.<name>length</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>antTask</name>.<name>setTarget</name></name><argument_list>(<argument><expr><name>subTarget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>


        <if>if <condition>(<expr><name>output</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>antTask</name>.<name>setOutput</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>directory</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>antTask</name>.<name>setDir</name></name><argument_list>(<argument><expr><name>directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>antTask</name>.<name>setUseNativeBasedir</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <expr_stmt><expr><call><name><name>antTask</name>.<name>setInheritAll</name></name><argument_list>(<argument><expr><name>inheritAll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>Enumeration</name></type> <name>i</name> =<init> <expr><call><name><name>properties</name>.<name>elements</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>i</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
            <expr_stmt><expr><call><name>copyProperty</name><argument_list>(<argument><expr><call><name><name>antTask</name>.<name>createProperty</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>Property</name>) <call><name><name>i</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <for>for (<init><decl><type><name>Enumeration</name></type> <name>i</name> =<init> <expr><call><name><name>propertySets</name>.<name>elements</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>i</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
            <expr_stmt><expr><call><name><name>antTask</name>.<name>addPropertyset</name></name><argument_list>(<argument><expr>(<name>PropertySet</name>) <call><name><name>i</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <expr_stmt><expr><call><name><name>antTask</name>.<name>setInheritRefs</name></name><argument_list>(<argument><expr><name>inheritRefs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>Enumeration</name></type> <name>i</name> =<init> <expr><call><name><name>references</name>.<name>elements</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>i</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
            <expr_stmt><expr><call><name><name>antTask</name>.<name>addReference</name></name><argument_list>(<argument><expr>(<name><name>Ant</name>.<name>Reference</name></name>) <call><name><name>i</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <return>return <expr><name>antTask</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Assigns an Ant property to another.
     *
     * @param  to the destination property whose content is modified.
     * @param  from the source property whose content is copied.
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>copyProperty</name><parameter_list>(<param><decl><type><name>Property</name></type> <name>to</name></decl></param>, <param><decl><type><name>Property</name></type> <name>from</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>to</name>.<name>setName</name></name><argument_list>(<argument><expr><call><name><name>from</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name><name>from</name>.<name>getValue</name></name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>to</name>.<name>setValue</name></name><argument_list>(<argument><expr><call><name><name>from</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>from</name>.<name>getFile</name></name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>to</name>.<name>setFile</name></name><argument_list>(<argument><expr><call><name><name>from</name>.<name>getFile</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>from</name>.<name>getResource</name></name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>to</name>.<name>setResource</name></name><argument_list>(<argument><expr><call><name><name>from</name>.<name>getResource</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>from</name>.<name>getPrefix</name></name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>to</name>.<name>setPrefix</name></name><argument_list>(<argument><expr><call><name><name>from</name>.<name>getPrefix</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>from</name>.<name>getRefid</name></name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>to</name>.<name>setRefid</name></name><argument_list>(<argument><expr><call><name><name>from</name>.<name>getRefid</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>from</name>.<name>getEnvironment</name></name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>to</name>.<name>setEnvironment</name></name><argument_list>(<argument><expr><call><name><name>from</name>.<name>getEnvironment</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>from</name>.<name>getClasspath</name></name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>to</name>.<name>setClasspath</name></name><argument_list>(<argument><expr><call><name><name>from</name>.<name>getClasspath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

}</block></class> <comment type="line">// END class SubAnt</comment>
</unit>
