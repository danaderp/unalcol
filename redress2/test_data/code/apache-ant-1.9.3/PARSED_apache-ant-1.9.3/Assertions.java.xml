<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\types\Assertions.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>

<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ListIterator</name></name>;</import>

<comment type="javadoc">/**
 * The assertion datatype. This type describes
 * assertion settings for the &amp;lt;java&amp;gt; task and others.
 * One can set the system assertions, and enable/disable those in
 * packages and classes.
 * Assertions can only be enabled or disabled when forking Java.
 *
 * Example: set system assertions and all org.apache packages except
 * for ant, and the class org.apache.tools.ant.Main.
 * &lt;pre&gt;
 * &amp;lt;assertions enableSystemAssertions="true" &amp;gt;
 *   &amp;lt;enable package="org.apache" /&amp;gt;
 *   &amp;lt;disable package="org.apache.ant" /&amp;gt;
 *   &amp;lt;enable class="org.apache.tools.ant.Main"/&amp;gt;
 * &amp;lt;/assertions&amp;gt;
 *&lt;/pre&gt;
 * Disable system assertions; enable those in the anonymous package
 * &lt;pre&gt;
 * &amp;lt;assertions enableSystemAssertions="false" &amp;gt;
 *   &amp;lt;enable package="..." /&amp;gt;
 * &amp;lt;/assertions&amp;gt;
 * &lt;/pre&gt;
 * enable assertions in a class called Test
 * &lt;pre&gt;
 * &amp;lt;assertions &amp;gt;
 *   &amp;lt;enable class="Test" /&amp;gt;
 * &amp;lt;/assertions&amp;gt;
 * &lt;/pre&gt;
 * This type is a datatype, so you can declare assertions and use them later
 *
 * &lt;pre&gt;
 * &amp;lt;assertions id="project.assertions" &amp;gt;
 *   &amp;lt;enable project="org.apache.test" /&amp;gt;
 * &amp;lt;/assertions&amp;gt;
 *
 * &amp;lt;assertions refid="project.assertions" /&amp;gt;
 *
 * &lt;/pre&gt;
 * @since Ant 1.6
 */</comment>
<class><specifier>public</specifier> class <name>Assertions</name> <super><extends>extends <name>DataType</name></extends> <implements>implements <name>Cloneable</name></implements></super> <block>{

    <comment type="javadoc">/**
     * enable/disable sys assertions; null means undefined
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Boolean</name></type> <name>enableSystemAssertions</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * list of type BaseAssertion
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>ArrayList</name><argument_list>&lt;<argument><name>BaseAssertion</name></argument>&gt;</argument_list></name></type> <name>assertionList</name> =<init> <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>BaseAssertion</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


    <comment type="javadoc">/**
     * enable assertions
     * @param assertion an enable assertion nested element
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addEnable</name><parameter_list>(<param><decl><type><name>EnabledAssertion</name></type> <name>assertion</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>checkChildrenAllowed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>assertionList</name>.<name>add</name></name><argument_list>(<argument><expr><name>assertion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * disable assertions
     * @param assertion a disable assertion nested element
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addDisable</name><parameter_list>(<param><decl><type><name>DisabledAssertion</name></type> <name>assertion</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>checkChildrenAllowed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>assertionList</name>.<name>add</name></name><argument_list>(<argument><expr><name>assertion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * enable or disable system assertions.
     * Default is not set (neither -enablesystemassersions or -disablesytemassertions
     * are used on the command line).
     * @param enableSystemAssertions if true enable system assertions
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setEnableSystemAssertions</name><parameter_list>(<param><decl><type><name>Boolean</name></type> <name>enableSystemAssertions</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>checkAttributesAllowed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>enableSystemAssertions</name></name> = <name>enableSystemAssertions</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the value of the refid attribute.
     *
     * &lt;p&gt;Subclasses may need to check whether any other attributes
     * have been set as well or child elements have been created and
     * thus override this method. if they do the must call
     * &lt;code&gt;super.setRefid&lt;/code&gt;.&lt;/p&gt;
     * @param ref the reference to use
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRefid</name><parameter_list>(<param><decl><type><name>Reference</name></type> <name>ref</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>assertionList</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 0 || <name>enableSystemAssertions</name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr><call><name>tooManyAttributes</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>super</name>.<name>setRefid</name></name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * get whatever we are referencing to. This could be ourself.
     * @return the object that contains the assertion info
     */</comment>
    <function><type><specifier>private</specifier> <name>Assertions</name></type> <name>getFinalReference</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>getRefid</name><argument_list>()</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>this</name></expr>;</return>
        }</block></then> <else>else <block>{
            <decl_stmt><decl><type><name>Object</name></type> <name>o</name> =<init> <expr><call><name>getRefid</name><argument_list>()</argument_list></call>.<call><name>getReferencedObject</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!(<name>o</name> <name>instanceof</name> <name>Assertions</name>)</expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"reference is of wrong type"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <return>return <expr>(<name>Assertions</name>) <name>o</name></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * how many assertions are made...will resolve references before returning
     * @return total # of commands to make
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>size</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Assertions</name></type> <name>clause</name> =<init> <expr><call><name>getFinalReference</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>clause</name>.<name>getFinalSize</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     * what is the final size of this object
     * @return
     */</comment>
    <function><type><specifier>private</specifier> <name>int</name></type> <name>getFinalSize</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>assertionList</name>.<name>size</name></name><argument_list>()</argument_list></call> + (<name>enableSystemAssertions</name> != <name>null</name> ? 1 : 0)</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * add the assertions to a list in a format suitable
     * for adding to a command line
     * @param commandList the command line to format
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>applyAssertions</name><parameter_list>(<param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>commandList</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>log</name><argument_list>(<argument><expr>"Applying assertions"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Assertions</name></type> <name>clause</name> =<init> <expr><call><name>getFinalReference</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">//do the system assertions</comment>
        <if>if <condition>(<expr><call><name><name>Boolean</name>.<name>TRUE</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>clause</name>.<name>enableSystemAssertions</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>log</name><argument_list>(<argument><expr>"Enabling system assertions"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>commandList</name>.<name>add</name></name><argument_list>(<argument><expr>"-enablesystemassertions"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>Boolean</name>.<name>FALSE</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>clause</name>.<name>enableSystemAssertions</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>log</name><argument_list>(<argument><expr>"disabling system assertions"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>commandList</name>.<name>add</name></name><argument_list>(<argument><expr>"-disablesystemassertions"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>

        <comment type="line">//now any inner assertions</comment>
        <for>for (<init><decl><type><name>BaseAssertion</name></type> <name>assertion</name> :<range> <expr><name><name>clause</name>.<name>assertionList</name></name></expr></range></decl></init>) <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>arg</name> =<init> <expr><call><name><name>assertion</name>.<name>toCommand</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>log</name><argument_list>(<argument><expr>"adding assertion " + <name>arg</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>commandList</name>.<name>add</name></name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * apply all the assertions to the command.
     * @param command the command line to format
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>applyAssertions</name><parameter_list>(<param><decl><type><name>CommandlineJava</name></type> <name>command</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Assertions</name></type> <name>clause</name> =<init> <expr><call><name>getFinalReference</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">//do the system assertions</comment>
        <if>if <condition>(<expr><call><name><name>Boolean</name>.<name>TRUE</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>clause</name>.<name>enableSystemAssertions</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>addVmArgument</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr>"-enablesystemassertions"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>Boolean</name>.<name>FALSE</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>clause</name>.<name>enableSystemAssertions</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>addVmArgument</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr>"-disablesystemassertions"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>

        <comment type="line">//now any inner assertions</comment>
        <for>for (<init><decl><type><name>BaseAssertion</name></type> <name>assertion</name> :<range> <expr><name><name>clause</name>.<name>assertionList</name></name></expr></range></decl></init>) <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>arg</name> =<init> <expr><call><name><name>assertion</name>.<name>toCommand</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>addVmArgument</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * add the assertions to a list in a format suitable
     * for adding to a command line
     * @param commandIterator list of commands
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>applyAssertions</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>ListIterator</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>commandIterator</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>log</name><argument_list>(<argument><expr>"Applying assertions"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Assertions</name></type> <name>clause</name> =<init> <expr><call><name>getFinalReference</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">//do the system assertions</comment>
        <if>if <condition>(<expr><call><name><name>Boolean</name>.<name>TRUE</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>clause</name>.<name>enableSystemAssertions</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>log</name><argument_list>(<argument><expr>"Enabling system assertions"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>commandIterator</name>.<name>add</name></name><argument_list>(<argument><expr>"-enablesystemassertions"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>Boolean</name>.<name>FALSE</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>clause</name>.<name>enableSystemAssertions</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>log</name><argument_list>(<argument><expr>"disabling system assertions"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>commandIterator</name>.<name>add</name></name><argument_list>(<argument><expr>"-disablesystemassertions"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>

        <comment type="line">//now any inner assertions</comment>
        <for>for (<init><decl><type><name>BaseAssertion</name></type> <name>assertion</name> :<range> <expr><name><name>clause</name>.<name>assertionList</name></name></expr></range></decl></init>) <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>arg</name> =<init> <expr><call><name><name>assertion</name>.<name>toCommand</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>log</name><argument_list>(<argument><expr>"adding assertion " + <name>arg</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>commandIterator</name>.<name>add</name></name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * helper method to add a string JVM argument to a command
     * @param command
     * @param arg
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>addVmArgument</name><parameter_list>(<param><decl><type><name>CommandlineJava</name></type> <name>command</name></decl></param>, <param><decl><type><name>String</name></type> <name>arg</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>Commandline</name>.<name>Argument</name></name></type> <name>argument</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>argument</name> = <call><name><name>command</name>.<name>createVmArgument</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>argument</name>.<name>setValue</name></name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * clone the objects.
     * This is not a full depth clone; the list of assertions is cloned,
     * but it does not clone the underlying assertions.
     * @return a cli
     * @throws CloneNotSupportedException if the super class does not support cloning
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>Assertions</name></type> <name>that</name> =<init> <expr>(<name>Assertions</name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>that</name>.<name>assertionList</name></name> = new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>BaseAssertion</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>assertionList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>that</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * base class for our assertion elements.
     */</comment>

    <class><specifier>public</specifier> <specifier>abstract</specifier> <specifier>static</specifier> class <name>BaseAssertion</name> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>packageName</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>className</name></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * name a class
         * @param className a class name
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setClass</name><parameter_list>(<param><decl><type><name>String</name></type> <name>className</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>className</name></name> = <name>className</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * name a package
         * @param packageName a package name
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setPackage</name><parameter_list>(<param><decl><type><name>String</name></type> <name>packageName</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>packageName</name></name> = <name>packageName</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * what is the class name?
         * @return classname or null
         * @see #setClass
         */</comment>
        <function><type><specifier>protected</specifier> <name>String</name></type> <name>getClassName</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>className</name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * what is the package name?
         * @return package name or null
         * @see #setPackage
         */</comment>
        <function><type><specifier>protected</specifier> <name>String</name></type> <name>getPackageName</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>packageName</name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * get the prefix used to begin the command; -ea or -da.
         * @return prefix
         */</comment>
        <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>String</name></type> <name>getCommandPrefix</name><parameter_list>()</parameter_list>;</function_decl>

        <comment type="javadoc">/**
         * create a full command string from this class
         * @throws BuildException in case of trouble
         * @return The command string
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>toCommand</name><parameter_list>()</parameter_list> <block>{
            <comment type="line">//catch invalidness</comment>
            <if>if <condition>(<expr><call><name>getPackageName</name><argument_list>()</argument_list></call> != <name>null</name> &amp;&amp; <call><name>getClassName</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Both package and class have been set"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <decl_stmt><decl><type><name>StringBuffer</name></type> <name>command</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>(<argument><expr><call><name>getCommandPrefix</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">//see if it is a package or a class</comment>
            <if>if <condition>(<expr><call><name>getPackageName</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                <comment type="line">//packages get a ... prefix</comment>
                <expr_stmt><expr><call><name><name>command</name>.<name>append</name></name><argument_list>(<argument><expr>':'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>command</name>.<name>append</name></name><argument_list>(<argument><expr><call><name>getPackageName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<call><name><name>command</name>.<name>toString</name></name><argument_list>()</argument_list></call>.<call><name>endsWith</name><argument_list>(<argument><expr>"..."</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <comment type="line">//append the ... suffix if not there already</comment>
                    <expr_stmt><expr><call><name><name>command</name>.<name>append</name></name><argument_list>(<argument><expr>"..."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then> <else>else <if>if <condition>(<expr><call><name>getClassName</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                <comment type="line">//classes just get the classname</comment>
                <expr_stmt><expr><call><name><name>command</name>.<name>append</name></name><argument_list>(<argument><expr>':'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>command</name>.<name>append</name></name><argument_list>(<argument><expr><call><name>getClassName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if>
            <return>return <expr><call><name><name>command</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>


    <comment type="javadoc">/**
     * an enabled assertion enables things
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>EnabledAssertion</name> <super><extends>extends <name>BaseAssertion</name></extends></super> <block>{
        <comment type="javadoc">/**
         * get the prefix used to begin the command; -ea or -da.
         * @return prefix
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getCommandPrefix</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr>"-ea"</expr>;</return>
        }</block></function>

    }</block></class>

    <comment type="javadoc">/**
     * A disabled assertion disables things
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>DisabledAssertion</name> <super><extends>extends <name>BaseAssertion</name></extends></super> <block>{
        <comment type="javadoc">/**
         * get the prefix used to begin the command; -ea or -da.
         * @return prefix
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getCommandPrefix</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr>"-da"</expr>;</return>
        }</block></function>

    }</block></class>
}</block></class>
</unit>
