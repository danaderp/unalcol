<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\util\UUEncoder.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>OutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>PrintStream</name></name>;</import>

<comment type="javadoc">/**
 * UUEncoding of an input stream placed into an outputstream.
 * This class is meant to be a drop in replacement for
 * sun.misc.UUEncoder, which was previously used by Ant.
 * The uuencode algorithm code has been copied from the
 * geronimo project.
 **/</comment>

<class><specifier>public</specifier> class <name>UUEncoder</name> <block>{
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DEFAULT_MODE</name> =<init> <expr>644</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MAX_CHARS_PER_LINE</name> =<init> <expr>45</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>INPUT_BUFFER_SIZE</name> =<init> <expr><name>MAX_CHARS_PER_LINE</name> * 100</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>OutputStream</name></type> <name>out</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>name</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructor specifying a name for the encoded buffer, begin
     * line will be:
     * &lt;pre&gt;
     *   begin 644 [NAME]
     * &lt;/pre&gt;
     * @param name the name of the encoded buffer.
     */</comment>
    <constructor><specifier>public</specifier> <name>UUEncoder</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>name</name></name> = <name>name</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * UUEncode bytes from the input stream, and write them as text characters
     * to the output stream. This method will run until it exhausts the
     * input stream.
     * @param is the input stream.
     * @param out the output stream.
     * @throws IOException if there is an error.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>encode</name><parameter_list>(<param><decl><type><name>InputStream</name></type> <name>is</name></decl></param>, <param><decl><type><name>OutputStream</name></type> <name>out</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>out</name></name> = <name>out</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>encodeBegin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>buffer</name> =<init> <expr>new <name><name>byte</name><index>[<expr><name>INPUT_BUFFER_SIZE</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
        <while>while <condition>(<expr>(<name>count</name> = <call><name><name>is</name>.<name>read</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>buffer</name>.<name>length</name></name></expr></argument>)</argument_list></call>) != -1</expr>)</condition> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>pos</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>count</name> &gt; 0</expr>)</condition> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>num</name> =<init> <expr><name>count</name> &gt; <name>MAX_CHARS_PER_LINE</name>
                    ? <name>MAX_CHARS_PER_LINE</name>
                    : <name>count</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>encodeLine</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>pos</name> += <name>num</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>count</name> -= <name>num</name></expr>;</expr_stmt>
            }</block></while>
        }</block></while>
        <expr_stmt><expr><call><name><name>out</name>.<name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>encodeEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Encode a string to the output.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>encodeString</name><parameter_list>(<param><decl><type><name>String</name></type> <name>n</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>PrintStream</name></type> <name>writer</name> =<init> <expr>new <call><name>PrintStream</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>writer</name>.<name>print</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>writer</name>.<name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>encodeBegin</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>encodeString</name><argument_list>(<argument><expr>"begin " + <name>DEFAULT_MODE</name> + " " + <name>name</name> + "\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>encodeEnd</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>encodeString</name><argument_list>(<argument><expr>" \nend\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Encode a single line of data (less than or equal to 45 characters).
     *
     * @param data   The array of byte data.
     * @param off    The starting offset within the data.
     * @param length Length of the data to encode.
     * @param out    The output stream the encoded data is written to.
     *
     * @exception IOException
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>encodeLine</name><parameter_list>(
        <param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></param>, <param><decl><type><name>int</name></type> <name>offset</name></decl></param>, <param><decl><type><name>int</name></type> <name>length</name></decl></param>, <param><decl><type><name>OutputStream</name></type> <name>out</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <comment type="line">// write out the number of characters encoded in this line.</comment>
        <comment type="line">// CheckStyle:MagicNumber OFF</comment>
        <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr><call>(<name>byte</name>) <argument_list>(<argument><expr>(<name>length</name> &amp; 0x3F) + ' '</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// CheckStyle:MagicNumber ON</comment>
        <decl_stmt><decl><type><name>byte</name></type> <name>a</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>byte</name></type> <name>b</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>byte</name></type> <name>c</name></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>length</name></expr>;</condition><incr/>) <block>{
            <comment type="line">// set the padding defaults</comment>
            <expr_stmt><expr><name>b</name> = 1</expr>;</expr_stmt>
            <expr_stmt><expr><name>c</name> = 1</expr>;</expr_stmt>
            <comment type="line">// get the next 3 bytes (if we have them)</comment>
            <expr_stmt><expr><name>a</name> = <name><name>data</name><index>[<expr><name>offset</name> + <name>i</name>++</expr>]</index></name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>i</name> &lt; <name>length</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>b</name> = <name><name>data</name><index>[<expr><name>offset</name> + <name>i</name>++</expr>]</index></name></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>i</name> &lt; <name>length</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>c</name> = <name><name>data</name><index>[<expr><name>offset</name> + <name>i</name>++</expr>]</index></name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>

            <comment type="line">// CheckStyle:MagicNumber OFF</comment>
            <decl_stmt><decl><type><name>byte</name></type> <name>d1</name> =<init> <expr><call>(<name>byte</name>) <argument_list>(<argument><expr>((<name>a</name> &gt;&gt;&gt; 2) &amp; 0x3F) + ' '</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>byte</name></type> <name>d2</name> =<init> <expr><call>(<name>byte</name>) <argument_list>(<argument><expr>(((<name>a</name> &lt;&lt; 4) &amp; 0x30) | ((<name>b</name> &gt;&gt;&gt; 4) &amp; 0x0F)) + ' '</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>byte</name></type> <name>d3</name> =<init> <expr><call>(<name>byte</name>) <argument_list>(<argument><expr>(((<name>b</name> &lt;&lt; 2) &amp; 0x3C) | ((<name>c</name> &gt;&gt;&gt; 6) &amp; 0x3)) + ' '</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>byte</name></type> <name>d4</name> =<init> <expr><call>(<name>byte</name>) <argument_list>(<argument><expr>(<name>c</name> &amp; 0x3F) + ' '</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// CheckStyle:MagicNumber ON</comment>

            <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr><name>d2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr><name>d3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr><name>d4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <comment type="line">// terminate with a linefeed alone</comment>
        <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr>'\n'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
