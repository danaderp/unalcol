<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\util\depend\AbstractAnalyzer.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>depend</name></name>;</package>
<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>zip</name>.<name>ZipFile</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Path</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>VectorSet</name></name>;</import>

<comment type="javadoc">/**
 * An abstract implementation of the analyzer interface providing support
 * for the bulk of interface methods.
 *
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>AbstractAnalyzer</name> <super><implements>implements <name>DependencyAnalyzer</name></implements></super> <block>{
    <comment type="javadoc">/** Maximum number of loops for looking for indirect dependencies. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MAX_LOOPS</name> =<init> <expr>1000</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The source path for the source files */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Path</name></type> <name>sourcePath</name> =<init> <expr>new <call><name>Path</name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The classpath containg dirs and jars of class files */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Path</name></type> <name>classPath</name> =<init> <expr>new <call><name>Path</name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The list of root classes */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>rootClasses</name> =<init> <expr>new <call><name><name>VectorSet</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** true if dependencies have been determined */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>determined</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** the list of File objects that the root classes depend upon */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>File</name></argument>&gt;</argument_list></name></type> <name>fileDependencies</name></decl>;</decl_stmt>
    <comment type="javadoc">/** the list of java classes the root classes depend upon */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>classDependencies</name></decl>;</decl_stmt>

    <comment type="javadoc">/** true if indirect dependencies should be gathered */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>closure</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Setup the analyzer */</comment>
    <constructor><specifier>protected</specifier> <name>AbstractAnalyzer</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Set the closure flag. If this flag is true the analyzer will traverse
     * all class relationships until it has collected the entire set of
     * direct and indirect dependencies
     *
     * @param closure true if dependencies should be traversed to determine
     *      indirect dependencies.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setClosure</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>closure</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>closure</name></name> = <name>closure</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the list of files in the file system upon which the root classes
     * depend. The files will be either the classfiles or jar files upon
     * which the root classes depend.
     *
     * @return an enumeration of File instances.
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Enumeration</name><argument_list>&lt;<argument><name>File</name></argument>&gt;</argument_list></name></type> <name>getFileDependencies</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr>!<call><name>supportsFileDependencies</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr>"File dependencies are not supported "
                + "by this analyzer"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr>!<name>determined</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>determineDependencies</name><argument_list>(<argument><expr><name>fileDependencies</name></expr></argument>, <argument><expr><name>classDependencies</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><call><name><name>fileDependencies</name>.<name>elements</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the list of classes upon which root classes depend. This is a
     * list of Java classnames in dot notation.
     *
     * @return an enumeration of Strings, each being the name of a Java
     *      class in dot notation.
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Enumeration</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getClassDependencies</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr>!<name>determined</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>determineDependencies</name><argument_list>(<argument><expr><name>fileDependencies</name></expr></argument>, <argument><expr><name>classDependencies</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><call><name><name>classDependencies</name>.<name>elements</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the file that contains the class definition
     *
     * @param classname the name of the required class
     * @return the file instance, zip or class, containing the
     *         class or null if the class could not be found.
     * @exception IOException if the files in the classpath cannot be read.
     */</comment>
    <function><type><specifier>public</specifier> <name>File</name></type> <name>getClassContainer</name><parameter_list>(<param><decl><type><name>String</name></type> <name>classname</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>classLocation</name> =<init> <expr><call><name><name>classname</name>.<name>replace</name></name><argument_list>(<argument><expr>'.'</expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call> + ".class"</expr></init></decl>;</decl_stmt>
        <comment type="line">// we look through the classpath elements. If the element is a dir</comment>
        <comment type="line">// we look for the file. IF it is a zip, we look for the zip entry</comment>
        <return>return <expr><call><name>getResourceContainer</name><argument_list>(<argument><expr><name>classLocation</name></expr></argument>, <argument><expr><call><name><name>classPath</name>.<name>list</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the file that contains the class source.
     *
     * @param classname the name of the required class
     * @return the file instance, zip or java, containing the
     *         source or null if the source for the class could not be found.
     * @exception IOException if the files in the sourcepath cannot be read.
     */</comment>
    <function><type><specifier>public</specifier> <name>File</name></type> <name>getSourceContainer</name><parameter_list>(<param><decl><type><name>String</name></type> <name>classname</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>sourceLocation</name> =<init> <expr><call><name><name>classname</name>.<name>replace</name></name><argument_list>(<argument><expr>'.'</expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call> + ".java"</expr></init></decl>;</decl_stmt>

        <comment type="line">// we look through the source path elements. If the element is a dir</comment>
        <comment type="line">// we look for the file. If it is a zip, we look for the zip entry.</comment>
        <comment type="line">// This isn't normal for source paths but we get it for free</comment>
        <return>return <expr><call><name>getResourceContainer</name><argument_list>(<argument><expr><name>sourceLocation</name></expr></argument>, <argument><expr><call><name><name>sourcePath</name>.<name>list</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Add a source path to the source path used by this analyzer. The
     * elements in the given path contain the source files for the classes
     * being analyzed. Not all analyzers will use this information.
     *
     * @param sourcePath The Path instance specifying the source path
     *      elements.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addSourcePath</name><parameter_list>(<param><decl><type><name>Path</name></type> <name>sourcePath</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>sourcePath</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>this</name>.<name>sourcePath</name>.<name>append</name></name><argument_list>(<argument><expr><name>sourcePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>sourcePath</name>.<name>setProject</name></name><argument_list>(<argument><expr><call><name><name>sourcePath</name>.<name>getProject</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a classpath to the classpath being used by the analyzer. The
     * classpath contains the binary classfiles for the classes being
     * analyzed The elements may either be the directories or jar files.Not
     * all analyzers will use this information.
     *
     * @param classPath the Path instance specifying the classpath elements
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addClassPath</name><parameter_list>(<param><decl><type><name>Path</name></type> <name>classPath</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>classPath</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>this</name>.<name>classPath</name>.<name>append</name></name><argument_list>(<argument><expr><name>classPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>classPath</name>.<name>setProject</name></name><argument_list>(<argument><expr><call><name><name>classPath</name>.<name>getProject</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a root class. The root classes are used to drive the
     * determination of dependency information. The analyzer will start at
     * the root classes and add dependencies from there.
     *
     * @param className the name of the class in Java dot notation.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addRootClass</name><parameter_list>(<param><decl><type><name>String</name></type> <name>className</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>className</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>rootClasses</name>.<name>contains</name></name><argument_list>(<argument><expr><name>className</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>rootClasses</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>className</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Configure an aspect of the analyzer. The set of aspects that are
     * supported is specific to each analyzer instance.
     *
     * @param name the name of the aspect being configured
     * @param info the configuration info.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>config</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>, <param><decl><type><name>Object</name></type> <name>info</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// do nothing by default</comment>
    }</block></function>

    <comment type="javadoc">/**
     * Reset the dependency list. This will reset the determined
     * dependencies and the also list of root classes.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>reset</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>rootClasses</name>.<name>removeAllElements</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>determined</name> = false</expr>;</expr_stmt>
        <expr_stmt><expr><name>fileDependencies</name> = new <call><name><name>Vector</name><argument_list>&lt;<argument><name>File</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>classDependencies</name> = new <call><name><name>Vector</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get an enumeration of the root classes
     *
     * @return an enumeration of Strings, each of which is a class name
     *         for a root class.
     */</comment>
    <function><type><specifier>protected</specifier> <name><name>Enumeration</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getRootClasses</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>rootClasses</name>.<name>elements</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Indicate if the analyzer is required to follow
     * indirect class relationships.
     *
     * @return true if indirect relationships should be followed.
     */</comment>
    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>isClosureRequired</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>closure</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Determine the dependencies of the current set of root classes
     *
     * @param files a vector into which Files upon which the root classes
     *      depend should be placed.
     * @param classes a vector of Strings into which the names of classes
     *      upon which the root classes depend should be placed.
     */</comment>
    <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>determineDependencies</name><parameter_list>(<param><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>File</name></argument>&gt;</argument_list></name></type> <name>files</name></decl></param>, <param><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>classes</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="javadoc">/**
     * Indicate if the particular subclass supports file dependency
     * information.
     *
     * @return true if file dependencies are supported.
     */</comment>
    <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>supportsFileDependencies</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="javadoc">/**
     * Get the file that contains the resource
     *
     * @param resourceLocation the name of the required resource.
     * @param paths the paths which will be searched for the resource.
     * @return the file instance, zip or class, containing the
     *         class or null if the class could not be found.
     * @exception IOException if the files in the given paths cannot be read.
     */</comment>
    <function><type><specifier>private</specifier> <name>File</name></type> <name>getResourceContainer</name><parameter_list>(<param><decl><type><name>String</name></type> <name>resourceLocation</name></decl></param>, <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>paths</name></decl></param>)</parameter_list>
         <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>paths</name>.<name>length</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
            <decl_stmt><decl><type><name>File</name></type> <name>element</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name><name>paths</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<call><name><name>element</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <continue>continue;</continue>
            }</block></then></if>
            <if>if <condition>(<expr><call><name><name>element</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>File</name></type> <name>resource</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name>element</name></expr></argument>, <argument><expr><name>resourceLocation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>resource</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <return>return <expr><name>resource</name></expr>;</return>
                }</block></then></if>
            }</block></then> <else>else <block>{
                <comment type="line">// must be a zip of some sort</comment>
                <decl_stmt><decl><type><name>ZipFile</name></type> <name>zipFile</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <try>try <block>{
                    <expr_stmt><expr><name>zipFile</name> = new <call><name>ZipFile</name><argument_list>(<argument><expr><name>element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><call><name><name>zipFile</name>.<name>getEntry</name></name><argument_list>(<argument><expr><name>resourceLocation</name></expr></argument>)</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                        <return>return <expr><name>element</name></expr>;</return>
                    }</block></then></if>
                }</block> <finally>finally <block>{
                    <if>if <condition>(<expr><name>zipFile</name> != <name>null</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>zipFile</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></finally></try>
            }</block></else></if>
        }</block></for>
        <return>return <expr><name>null</name></expr>;</return>
    }</block></function>
}</block></class>

</unit>
