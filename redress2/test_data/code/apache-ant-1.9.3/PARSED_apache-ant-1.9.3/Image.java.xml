<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\image\Image.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>image</name></name>;</package>

<import>import <name><name>com</name>.<name>sun</name>.<name>media</name>.<name>jai</name>.<name>codec</name>.<name>FileSeekableStream</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>DirectoryScanner</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>MatchingTask</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>FileSet</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Mapper</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>optional</name>.<name>image</name>.<name>Draw</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>optional</name>.<name>image</name>.<name>ImageOperation</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>optional</name>.<name>image</name>.<name>Rotate</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>optional</name>.<name>image</name>.<name>Scale</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>optional</name>.<name>image</name>.<name>TransformOperation</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileNameMapper</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>IdentityMapper</name></name>;</import>

<import>import <name><name>javax</name>.<name>media</name>.<name>jai</name>.<name>JAI</name></name>;</import>
<import>import <name><name>javax</name>.<name>media</name>.<name>jai</name>.<name>PlanarImage</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Locale</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>

<comment type="javadoc">/**
 * A MatchingTask which relies on &lt;a
 * href="http://java.sun.com/products/java-media/jai"&gt;JAI (Java
 * Advanced Imaging)&lt;/a&gt; to perform image manipulation operations on
 * existing images.  The operations are represented as ImageOperation
 * DataType objects.  The operations are arranged to conform to the
 * Chaining Model of JAI.  Check out the &lt;a
 * href="http://java.sun.com/products/java-media/jai/forDevelopers/jai1_0_1guide-unc/"&gt;
 * JAI Programming Guide&lt;/a&gt;.
 *
 * @see org.apache.tools.ant.types.optional.image.ImageOperation
 * @see org.apache.tools.ant.types.DataType
 */</comment>
<class><specifier>public</specifier> class <name>Image</name> <super><extends>extends <name>MatchingTask</name></extends></super> <block>{
    <comment type="line">// CheckStyle:VisibilityModifier OFF - bc</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Vector</name></type> <name>instructions</name> =<init> <expr>new <call><name>Vector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>overwrite</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Vector</name></type> <name>filesets</name> =<init> <expr>new <call><name>Vector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>File</name></type> <name>srcDir</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>File</name></type> <name>destDir</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// CheckStyle:MemberNameCheck OFF - bc</comment>

    <comment type="line">//cannot remove underscores due to protected visibility &gt;:(</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>str_encoding</name> =<init> <expr>"JPEG"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>garbage_collect</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>failonerror</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>

    <comment type="line">// CheckStyle:MemberNameCheck ON</comment>

    <comment type="line">// CheckStyle:VisibilityModifier ON</comment>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Mapper</name></type> <name>mapperElement</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Add a set of files to be deleted.
     * @param set the FileSet to add.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addFileset</name><parameter_list>(<param><decl><type><name>FileSet</name></type> <name>set</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>filesets</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set whether to fail on error.
     * If false, note errors to the output but keep going.
     * @param failonerror true or false.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFailOnError</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>failonerror</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>failonerror</name></name> = <name>failonerror</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the source dir to find the image files.
     * @param srcDir the directory in which the image files reside.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSrcdir</name><parameter_list>(<param><decl><type><name>File</name></type> <name>srcDir</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>srcDir</name></name> = <name>srcDir</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the image encoding type.  &lt;a
     * href="http://java.sun.com/products/java-media/jai/forDevelopers/jai1_0_1guide-unc/Encode.doc.html#56610"&gt;
     * See this table in the JAI Programming Guide&lt;/a&gt;.
     * @param encoding the String image encoding.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setEncoding</name><parameter_list>(<param><decl><type><name>String</name></type> <name>encoding</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>str_encoding</name> = <name>encoding</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set whether to overwrite a file if there is a naming conflict.
     * @param overwrite whether to overwrite.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOverwrite</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>overwrite</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>overwrite</name></name> = <name>overwrite</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set whether to invoke Garbage Collection after each image processed.
     * Defaults to false.
     * @param gc whether to invoke the garbage collector.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setGc</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>gc</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>garbage_collect</name> = <name>gc</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the destination directory for manipulated images.
     * @param destDir The destination directory.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDestDir</name><parameter_list>(<param><decl><type><name>File</name></type> <name>destDir</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>destDir</name></name> = <name>destDir</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add an ImageOperation to chain.
     * @param instr The ImageOperation to append to the chain.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addImageOperation</name><parameter_list>(<param><decl><type><name>ImageOperation</name></type> <name>instr</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>instructions</name>.<name>add</name></name><argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a Rotate ImageOperation to the chain.
     * @param instr The Rotate operation to add to the chain.
     * @see org.apache.tools.ant.types.optional.image.Rotate
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addRotate</name><parameter_list>(<param><decl><type><name>Rotate</name></type> <name>instr</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>instructions</name>.<name>add</name></name><argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a Scale ImageOperation to the chain.
     * @param instr The Scale operation to add to the chain.
     * @see org.apache.tools.ant.types.optional.image.Scale
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addScale</name><parameter_list>(<param><decl><type><name>Scale</name></type> <name>instr</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>instructions</name>.<name>add</name></name><argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a Draw ImageOperation to the chain.  DrawOperation
     * DataType objects can be nested inside the Draw object.
     * @param instr The Draw operation to add to the chain.
     * @see org.apache.tools.ant.types.optional.image.Draw
     * @see org.apache.tools.ant.types.optional.image.DrawOperation
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addDraw</name><parameter_list>(<param><decl><type><name>Draw</name></type> <name>instr</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>instructions</name>.<name>add</name></name><argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
    * Add an ImageOperation to chain.
    * @param instr The ImageOperation to append to the chain.
    * @since Ant 1.7
    */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>ImageOperation</name></type> <name>instr</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>addImageOperation</name><argument_list>(<argument><expr><name>instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Defines the mapper to map source to destination files.
     * @return a mapper to be configured
     * @exception BuildException if more than one mapper is defined
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>Mapper</name></type> <name>createMapper</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>mapperElement</name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Cannot define more than one mapper"</expr></argument>,
                                     <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name>mapperElement</name> = new <call><name>Mapper</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>mapperElement</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Add a nested filenamemapper.
     * @param fileNameMapper the mapper to add.
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>FileNameMapper</name></type> <name>fileNameMapper</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>createMapper</name><argument_list>()</argument_list></call>.<call><name>add</name><argument_list>(<argument><expr><name>fileNameMapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Executes all the chained ImageOperations on the files inside
     * the directory.
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>processDir</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>File</name></type> <name>srcDir</name></decl></param>, <param><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>srcNames</name></decl></param>,
                          <param><decl><type><specifier>final</specifier> <name>File</name></type> <name>dstDir</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>FileNameMapper</name></type> <name>mapper</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>writeCount</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>srcNames</name>.<name>length</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>srcName</name> =<init> <expr><name><name>srcNames</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>File</name></type> <name>srcFile</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name>srcDir</name></expr></argument>, <argument><expr><name>srcName</name></expr></argument>)</argument_list></call>.<call><name>getAbsoluteFile</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name><index>[]</index></type> <name>dstNames</name> =<init> <expr><call><name><name>mapper</name>.<name>mapFileName</name></name><argument_list>(<argument><expr><name>srcName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>dstNames</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>srcFile</name> + " skipped, don't know how to handle it"</expr></argument>,
                    <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            }</block></then></if>

            <for>for (<init><decl><type><name>int</name></type> <name>j</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>j</name> &lt; <name><name>dstNames</name>.<name>length</name></name></expr>;</condition> <incr><expr>++<name>j</name></expr></incr>)<block>{

                <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>dstName</name> =<init> <expr><name><name>dstNames</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>File</name></type> <name>dstFile</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name>dstDir</name></expr></argument>, <argument><expr><name>dstName</name></expr></argument>)</argument_list></call>.<call><name>getAbsoluteFile</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name><name>dstFile</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
                    <comment type="line">// avoid overwriting unless necessary</comment>
                    <if>if<condition>(<expr>!<name>overwrite</name>
                       &amp;&amp; <call><name><name>srcFile</name>.<name>lastModified</name></name><argument_list>()</argument_list></call> &lt;= <call><name><name>dstFile</name>.<name>lastModified</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{

                        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>srcFile</name> + " omitted as " + <name>dstFile</name>
                            + " is up to date."</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <comment type="line">// don't overwrite the file</comment>
                        <continue>continue;</continue>
                    }</block></then></if>

                    <comment type="line">// avoid extra work while overwriting</comment>
                    <if>if <condition>(<expr>!<call><name><name>srcFile</name>.<name>equals</name></name><argument_list>(<argument><expr><name>dstFile</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
                        <expr_stmt><expr><call><name><name>dstFile</name>.<name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then></if>
                <expr_stmt><expr><call><name>processFile</name><argument_list>(<argument><expr><name>srcFile</name></expr></argument>, <argument><expr><name>dstFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr>++<name>writeCount</name></expr>;</expr_stmt>
            }</block></for>
        }</block></for>

        <comment type="line">// run the garbage collector if wanted</comment>
        <if>if <condition>(<expr><name>garbage_collect</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>gc</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <return>return <expr><name>writeCount</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Executes all the chained ImageOperations on the file
     * specified.
     * @param file The file to be processed.
     * @deprecated this method isn't used anymore
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>processFile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>file</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>processFile</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr>new <call><name>File</name><argument_list>(<argument><expr><name>destDir</name> == <name>null</name>
                                   ? <name>srcDir</name> : <name>destDir</name></expr></argument>, <argument><expr><call><name><name>file</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Executes all the chained ImageOperations on the file
     * specified.
     * @param file The file to be processed.
     * @param newFile The file to write to.
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>processFile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>file</name></decl></param>, <param><decl><type><name>File</name></type> <name>newFile</name></decl></param>)</parameter_list> <block>{
        <try>try <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Processing File: " + <call><name><name>file</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>FileSeekableStream</name></type> <name>input</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>PlanarImage</name></type> <name>image</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <try>try <block>{
                <expr_stmt><expr><name>input</name> = new <call><name>FileSeekableStream</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>image</name> = <call><name><name>JAI</name>.<name>create</name></name><argument_list>(<argument><expr>"stream"</expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>size</name> =<init> <expr><call><name><name>instructions</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>size</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                    <decl_stmt><decl><type><name>Object</name></type> <name>instr</name> =<init> <expr><call><name><name>instructions</name>.<name>elementAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>instr</name> <name>instanceof</name> <name>TransformOperation</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>image</name> = ((<name>TransformOperation</name>) <name>instr</name>)
                            .<call><name>executeTransformOperation</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Not a TransformOperation: " + <name>instr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></for>
            }</block> <finally>finally <block>{
                <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></finally></try>

            <decl_stmt><decl><type><name>File</name></type> <name>dstParent</name> =<init> <expr><call><name><name>newFile</name>.<name>getParentFile</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<call><name><name>dstParent</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call> &amp;&amp; !<call><name><name>dstParent</name>.<name>mkdirs</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Failed to create parent directory "
                                         + <name>dstParent</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <if>if <condition>(<expr>(<name>overwrite</name> &amp;&amp; <call><name><name>newFile</name>.<name>exists</name></name><argument_list>()</argument_list></call>) &amp;&amp; (!<call><name><name>newFile</name>.<name>equals</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>newFile</name>.<name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <decl_stmt><decl><type><name>FileOutputStream</name></type> <name>stream</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <try>try <block>{
                <expr_stmt><expr><name>stream</name> = new <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>newFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>JAI</name>.<name>create</name></name><argument_list>(<argument><expr>"encode"</expr></argument>, <argument><expr><name>image</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>,
                           <argument><expr><call><name><name>str_encoding</name>.<name>toUpperCase</name></name><argument_list>(<argument><expr><name><name>Locale</name>.<name>ENGLISH</name></name></expr></argument>)</argument_list></call></expr></argument>,
                           <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>stream</name>.<name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block> <finally>finally <block>{
                <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></finally></try>
        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>err</name></decl></param>) <block>{
            <if>if <condition>(<expr>!<call><name><name>file</name>.<name>equals</name></name><argument_list>(<argument><expr><name>newFile</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
                <expr_stmt><expr><call><name><name>newFile</name>.<name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr>!<name>failonerror</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Error processing file:  " + <name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></else></if>
        }</block></catch> <catch>catch (<param><decl><type><name><name>java</name>.<name>lang</name>.<name>RuntimeException</name></name></type> <name>rerr</name></decl></param>) <block>{
            <if>if <condition>(<expr>!<call><name><name>file</name>.<name>equals</name></name><argument_list>(<argument><expr><name>newFile</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
                <expr_stmt><expr><call><name><name>newFile</name>.<name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr>!<name>failonerror</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Error processing file:  " + <name>rerr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>rerr</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></else></if>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * Executes the Task.
     * @throws BuildException on error.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{

        <expr_stmt><expr><call><name>validateAttributes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <try>try <block>{
            <decl_stmt><decl><type><name>File</name></type> <name>dest</name> =<init> <expr><name>destDir</name> != <name>null</name> ? <name>destDir</name> : <name>srcDir</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>writeCount</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

            <comment type="line">// build mapper</comment>
            <decl_stmt><decl><type><specifier>final</specifier> <name>FileNameMapper</name></type> <name>mapper</name></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>mapperElement</name>==<name>null</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>mapper</name> = new <call><name>IdentityMapper</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>mapper</name> = <call><name><name>mapperElement</name>.<name>getImplementation</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

            <comment type="line">// deal with specified srcDir</comment>
            <if>if <condition>(<expr><name>srcDir</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>DirectoryScanner</name></type> <name>ds</name> =<init> <expr><call><name><name>super</name>.<name>getDirectoryScanner</name></name><argument_list>(<argument><expr><name>srcDir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><specifier>final</specifier> <name>String</name><index>[]</index></type> <name>files</name> =<init> <expr><call><name><name>ds</name>.<name>getIncludedFiles</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>writeCount</name> += <call><name>processDir</name><argument_list>(<argument><expr><name>srcDir</name></expr></argument>, <argument><expr><name>files</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>mapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <comment type="line">// deal with the filesets</comment>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>size</name> =<init> <expr><call><name><name>filesets</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>size</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>FileSet</name></type> <name>fs</name> =<init> <expr>(<name>FileSet</name>) <call><name><name>filesets</name>.<name>elementAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>DirectoryScanner</name></type> <name>ds</name> =<init>
                    <expr><call><name><name>fs</name>.<name>getDirectoryScanner</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>String</name><index>[]</index></type> <name>files</name> =<init> <expr><call><name><name>ds</name>.<name>getIncludedFiles</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>File</name></type> <name>fromDir</name> =<init> <expr><call><name><name>fs</name>.<name>getDir</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>writeCount</name> += <call><name>processDir</name><argument_list>(<argument><expr><name>fromDir</name></expr></argument>, <argument><expr><name>files</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>mapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>

            <if>if <condition>(<expr><name>writeCount</name>&gt;0</expr>)</condition><then><block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Processed " + <name>writeCount</name> +
                    (<name>writeCount</name> == 1 ? " image." : " images.")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>err</name></decl></param>) <block>{
            <expr_stmt><expr><call><name><name>err</name>.<name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><call><name><name>err</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * Ensure we have a consistent and legal set of attributes, and set
     * any internal flags necessary based on different combinations
     * of attributes.
     * @throws BuildException on error.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>validateAttributes</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>srcDir</name> == <name>null</name> &amp;&amp; <call><name><name>filesets</name>.<name>size</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Specify at least one source"
                                     + "--a srcDir or a fileset."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>srcDir</name> == <name>null</name> &amp;&amp; <name>destDir</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Specify the destDir, or the srcDir."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>str_encoding</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr>"jpg"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>str_encoding</name> = "JPEG"</expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>str_encoding</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr>"tif"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>str_encoding</name> = "TIFF"</expr>;</expr_stmt>
        }</block></then></if></else></if>
    }</block></function>
}</block></class>

</unit>
