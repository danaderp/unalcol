<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\taskdefs\optional\RpmTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>Execute</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>ExecuteStreamHandler</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Commandline</name></name>;</import>
<import>import <name><name>junit</name>.<name>framework</name>.<name>TestCase</name></name>;</import>

<class><specifier>public</specifier> class <name>RpmTest</name> <super><extends>extends <name>TestCase</name></extends></super> <block>{

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testShouldThrowExceptionWhenRpmFails</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>Rpm</name></type> <name>rpm</name> =<init> <expr>new <call><name>MyRpm</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>rpm</name>.<name>setProject</name></name><argument_list>(<argument><expr>new <call><name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rpm</name>.<name>setFailOnError</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// execute</comment>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>rpm</name>.<name>execute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"should have thrown a build exception"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>ex</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>ex</name>.<name>getMessage</name></name><argument_list>()</argument_list></call>
                       .<call><name>indexOf</name><argument_list>(<argument><expr>"' failed with exit code 2"</expr></argument>)</argument_list></call> != -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testShouldNotThrowExceptionWhenRpmFails</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>Rpm</name></type> <name>rpm</name> =<init> <expr>new <call><name>MyRpm</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>rpm</name>.<name>execute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// override some of the code so we can test the handling of the</comment>
    <comment type="line">// return code only.</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>MyRpm</name> <super><extends>extends <name>Rpm</name></extends></super> <block>{
        <function><type><specifier>protected</specifier> <name>Execute</name></type> <name>getExecute</name><parameter_list>(<param><decl><type><name>Commandline</name></type> <name>toExecute</name></decl></param>,
                                     <param><decl><type><name>ExecuteStreamHandler</name></type> <name>streamhandler</name></decl></param>)</parameter_list> <block>{
            <return>return <expr>new <class><super><name>Execute</name></super><argument_list>()</argument_list> <block>{
                    <function><type><specifier>public</specifier> <name>int</name></type> <name>execute</name><parameter_list>()</parameter_list> <block>{
                        <comment type="line">// 2 is != 0 and even, so it is considered</comment>
                        <comment type="line">// failure on any platform currently supported</comment>
                        <comment type="line">// by Execute#isFailure.</comment>
                        <return>return <expr>2</expr>;</return>
                    }</block></function>
                }</block></class></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>log</name><parameter_list>(<param><decl><type><name>String</name></type> <name>msg</name></decl></param>, <param><decl><type><name>int</name></type> <name>msgLevel</name></decl></param>)</parameter_list> <block>{
        }</block></function>
    }</block></class>

}</block></class>
</unit>
