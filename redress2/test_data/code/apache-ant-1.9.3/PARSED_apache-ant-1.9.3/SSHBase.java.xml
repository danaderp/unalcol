<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\ssh\SSHBase.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>ssh</name></name>;</package>

<import>import <name><name>com</name>.<name>jcraft</name>.<name>jsch</name>.<name>JSchException</name></name>;</import>
<import>import <name><name>com</name>.<name>jcraft</name>.<name>jsch</name>.<name>Session</name></name>;</import>
<import>import <name><name>com</name>.<name>jcraft</name>.<name>jsch</name>.<name>JSch</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>

<comment type="javadoc">/**
 * Base class for Ant tasks using jsch.
 *
 * @since Ant 1.6
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>SSHBase</name> <super><extends>extends <name>Task</name></extends> <implements>implements <name>LogListener</name></implements></super> <block>{

    <comment type="javadoc">/** Default listen port for SSH daemon */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SSH_PORT</name> =<init> <expr>22</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>host</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>knownHosts</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>port</name> =<init> <expr><name>SSH_PORT</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>failOnError</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>verbose</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>SSHUserInfo</name></type> <name>userInfo</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructor for SSHBase.
     */</comment>
    <constructor><specifier>public</specifier> <name>SSHBase</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>userInfo</name> = new <call><name>SSHUserInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Remote host, either DNS name or IP.
     *
     * @param host  The new host value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setHost</name><parameter_list>(<param><decl><type><name>String</name></type> <name>host</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>host</name></name> = <name>host</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the host.
     * @return the host
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getHost</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>host</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the failonerror flag.
     * Default is true
     * @param failure if true throw a build exception when a failure occuries,
     *                otherwise just log the failure and continue
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFailonerror</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>failure</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>failOnError</name> = <name>failure</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the failonerror flag.
     * @return the failonerror flag
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getFailonerror</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>failOnError</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the verbose flag.
     * @param verbose if true output more verbose logging
     * @since Ant 1.6.2
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setVerbose</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>verbose</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>verbose</name></name> = <name>verbose</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the verbose flag.
     * @return the verbose flag
     * @since Ant 1.6.2
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getVerbose</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>verbose</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Username known to remote host.
     *
     * @param username  The new username value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUsername</name><parameter_list>(<param><decl><type><name>String</name></type> <name>username</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>userInfo</name>.<name>setName</name></name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Sets the password for the user.
     *
     * @param password  The new password value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPassword</name><parameter_list>(<param><decl><type><name>String</name></type> <name>password</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>userInfo</name>.<name>setPassword</name></name><argument_list>(<argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the keyfile for the user.
     *
     * @param keyfile  The new keyfile value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setKeyfile</name><parameter_list>(<param><decl><type><name>String</name></type> <name>keyfile</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>userInfo</name>.<name>setKeyfile</name></name><argument_list>(<argument><expr><name>keyfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the passphrase for the users key.
     *
     * @param passphrase  The new passphrase value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPassphrase</name><parameter_list>(<param><decl><type><name>String</name></type> <name>passphrase</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>userInfo</name>.<name>setPassphrase</name></name><argument_list>(<argument><expr><name>passphrase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the path to the file that has the identities of
     * all known hosts.  This is used by SSH protocol to validate
     * the identity of the host.  The default is
     * &lt;i&gt;${user.home}/.ssh/known_hosts&lt;/i&gt;.
     *
     * @param knownHosts a path to the known hosts file.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setKnownhosts</name><parameter_list>(<param><decl><type><name>String</name></type> <name>knownHosts</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>knownHosts</name></name> = <name>knownHosts</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Setting this to true trusts hosts whose identity is unknown.
     *
     * @param yesOrNo if true trust the identity of unknown hosts.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTrust</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>yesOrNo</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>userInfo</name>.<name>setTrust</name></name><argument_list>(<argument><expr><name>yesOrNo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Changes the port used to connect to the remote host.
     *
     * @param port port number of remote host.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPort</name><parameter_list>(<param><decl><type><name>int</name></type> <name>port</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>port</name></name> = <name>port</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the port attribute.
     * @return the port
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getPort</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>port</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Initialize the task.
     * This initializizs the known hosts and sets the default port.
     * @throws BuildException on error
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>init</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>super</name>.<name>init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>knownHosts</name></name> = <call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"user.home"</expr></argument>)</argument_list></call> + "/.ssh/known_hosts"</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>port</name></name> = <name>SSH_PORT</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Open an ssh session.
     * @return the opened session
     * @throws JSchException on error
     */</comment>
    <function><type><specifier>protected</specifier> <name>Session</name></type> <name>openSession</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>JSchException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>JSch</name></type> <name>jsch</name> =<init> <expr>new <call><name>JSch</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>SSHBase</name></type> <name>base</name> =<init> <expr><name>this</name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>verbose</name></expr>)</condition><then> <block>{
        	<expr_stmt><expr><call><name><name>JSch</name>.<name>setLogger</name></name><argument_list>(<argument><expr>new <class><super><name><name>com</name>.<name>jcraft</name>.<name>jsch</name>.<name>Logger</name></name></super><argument_list>()</argument_list><block>{
        		<function><type><specifier>public</specifier> <name>boolean</name></type> <name>isEnabled</name><parameter_list>(<param><decl><type><name>int</name></type> <name>level</name></decl></param>)</parameter_list><block>{
        			<return>return <expr>true</expr>;</return>
        		}</block></function>
        		<function><type><specifier>public</specifier> <name>void</name></type> <name>log</name><parameter_list>(<param><decl><type><name>int</name></type> <name>level</name></decl></param>, <param><decl><type><name>String</name></type> <name>message</name></decl></param>)</parameter_list><block>{
        			<expr_stmt><expr><call><name><name>base</name>.<name>log</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        		}</block></function>
        	}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>null</name> != <call><name><name>userInfo</name>.<name>getKeyfile</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>jsch</name>.<name>addIdentity</name></name><argument_list>(<argument><expr><call><name><name>userInfo</name>.<name>getKeyfile</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr>!<call><name><name>userInfo</name>.<name>getTrust</name></name><argument_list>()</argument_list></call> &amp;&amp; <name>knownHosts</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Using known hosts: " + <name>knownHosts</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>jsch</name>.<name>setKnownHosts</name></name><argument_list>(<argument><expr><name>knownHosts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name>Session</name></type> <name>session</name> =<init> <expr><call><name><name>jsch</name>.<name>getSession</name></name><argument_list>(<argument><expr><call><name><name>userInfo</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>session</name>.<name>setConfig</name></name><argument_list>(<argument><expr>"PreferredAuthentications"</expr></argument>,
                <argument><expr>"publickey,keyboard-interactive,password"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>session</name>.<name>setUserInfo</name></name><argument_list>(<argument><expr><name>userInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Connecting to " + <name>host</name> + ":" + <name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>session</name>.<name>connect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>session</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the user information.
     * @return the user information
     */</comment>
    <function><type><specifier>protected</specifier> <name>SSHUserInfo</name></type> <name>getUserInfo</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>userInfo</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
