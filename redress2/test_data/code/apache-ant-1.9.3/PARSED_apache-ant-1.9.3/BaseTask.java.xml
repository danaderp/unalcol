<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\antunit\core\uuencode\src\task\BaseTask.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name>task</name>;</package>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>BufferedInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>OutputStream</name></name>;</import>

<comment type="javadoc">/**
 * Base class for the uuencode/decode test tasks.
 */</comment>
<class><specifier>abstract</specifier> <specifier>public</specifier> class <name>BaseTask</name> <super><extends>extends <name>Task</name></extends></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>FileUtils</name></type> <name>FILE_UTILS</name> =<init> <expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>inFile</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>outFile</name></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setInFile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>inFile</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>inFile</name></name> = <name>inFile</name></expr>;</expr_stmt>
    }</block></function>
    <function><type><specifier>protected</specifier> <name>File</name></type> <name>getInFile</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>inFile</name></expr>;</return>
    }</block></function>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOutFile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>outFile</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>outFile</name></name> = <name>outFile</name></expr>;</expr_stmt>
    }</block></function>
    <function><type><specifier>protected</specifier> <name>File</name></type> <name>getOutFile</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>outFile</name></expr>;</return>
    }</block></function>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertAttribute</name><argument_list>(<argument><expr><name>inFile</name></expr></argument>, <argument><expr>"inFile"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertAttribute</name><argument_list>(<argument><expr><name>outFile</name></expr></argument>, <argument><expr>"outFile"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>InputStream</name></type> <name>inputStream</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>OutputStream</name></type> <name>outputStream</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>inputStream</name> = new <call><name>BufferedInputStream</name><argument_list>(
                <argument><expr>new <call><name>FileInputStream</name><argument_list>(<argument><expr><call><name>getInFile</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>outputStream</name> = new <call><name>FileOutputStream</name><argument_list>(<argument><expr><call><name>getOutFile</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>doit</name><argument_list>(<argument><expr><name>inputStream</name></expr></argument>, <argument><expr><name>outputStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>ex</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>FILE_UTILS</name>.<name>close</name></name><argument_list>(<argument><expr><name>inputStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>FILE_UTILS</name>.<name>close</name></name><argument_list>(<argument><expr><name>outputStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>
    
    <function_decl><type><specifier>abstract</specifier> <specifier>protected</specifier> <name>void</name></type> <name>doit</name><parameter_list>(
        <param><decl><type><name>InputStream</name></type> <name>is</name></decl></param>, <param><decl><type><name>OutputStream</name></type> <name>os</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws>;</function_decl>
    
    <function><type><specifier>private</specifier> <name>void</name></type> <name>assertAttribute</name><parameter_list>(<param><decl><type><name>File</name></type> <name>file</name></decl></param>, <param><decl><type><name>String</name></type> <name>attributeName</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>file</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Required attribute " + <name>attributeName</name>
                                     + " not set"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
    }</block></function>
}</block></class>

    
</unit>
