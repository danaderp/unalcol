<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\util\OutputStreamFunneler.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>OutputStream</name></name>;</import>

<comment type="javadoc">/**
 * Manages a set of &lt;code&gt;OutputStream&lt;/code&gt;s to
 * write to a single underlying stream, which is
 * closed only when the last &amp;quot;funnel&amp;quot;
 * has been closed.
 */</comment>
<class><specifier>public</specifier> class <name>OutputStreamFunneler</name> <block>{

    <comment type="javadoc">/**
     * Default timeout.
     * @see #setTimeout(long)
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>DEFAULT_TIMEOUT_MILLIS</name> =<init> <expr>1000</expr></init></decl>;</decl_stmt>

    <class><specifier>private</specifier> <specifier>final</specifier> class <name>Funnel</name> <super><extends>extends <name>OutputStream</name></extends></super> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>closed</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>Funnel</name><parameter_list>()</parameter_list> <block>{
            <synchronized>synchronized (<expr><name><name>OutputStreamFunneler</name>.<name>this</name></name></expr>) <block>{
                <expr_stmt><expr>++<name>count</name></expr>;</expr_stmt>
            }</block></synchronized>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>flush</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
            <synchronized>synchronized (<expr><name><name>OutputStreamFunneler</name>.<name>this</name></name></expr>) <block>{
                <expr_stmt><expr><call><name>dieIfClosed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>out</name>.<name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></synchronized>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<param><decl><type><name>int</name></type> <name>b</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
            <synchronized>synchronized (<expr><name><name>OutputStreamFunneler</name>.<name>this</name></name></expr>) <block>{
                <expr_stmt><expr><call><name>dieIfClosed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></synchronized>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>b</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
            <synchronized>synchronized (<expr><name><name>OutputStreamFunneler</name>.<name>this</name></name></expr>) <block>{
                <expr_stmt><expr><call><name>dieIfClosed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></synchronized>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>b</name></decl></param>, <param><decl><type><name>int</name></type> <name>off</name></decl></param>, <param><decl><type><name>int</name></type> <name>len</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
            <synchronized>synchronized (<expr><name><name>OutputStreamFunneler</name>.<name>this</name></name></expr>) <block>{
                <expr_stmt><expr><call><name>dieIfClosed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></synchronized>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
            <expr_stmt><expr><call><name>release</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>

    <decl_stmt><decl><type><specifier>private</specifier> <name>OutputStream</name></type> <name>out</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>count</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>closed</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>timeoutMillis</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Create a new &lt;code&gt;OutputStreamFunneler&lt;/code&gt; for
     * the specified &lt;code&gt;OutputStream&lt;/code&gt;.
     * @param out   &lt;code&gt;OutputStream&lt;/code&gt;.
     */</comment>
    <constructor><specifier>public</specifier> <name>OutputStreamFunneler</name><parameter_list>(<param><decl><type><name>OutputStream</name></type> <name>out</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>DEFAULT_TIMEOUT_MILLIS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Create a new &lt;code&gt;OutputStreamFunneler&lt;/code&gt; for
     * the specified &lt;code&gt;OutputStream&lt;/code&gt;, with the
     * specified timeout value.
     * @param out             &lt;code&gt;OutputStream&lt;/code&gt;.
     * @param timeoutMillis   &lt;code&gt;long&lt;/code&gt;.
     * @see #setTimeout(long)
     */</comment>
    <constructor><specifier>public</specifier> <name>OutputStreamFunneler</name><parameter_list>(<param><decl><type><name>OutputStream</name></type> <name>out</name></decl></param>, <param><decl><type><name>long</name></type> <name>timeoutMillis</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>out</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(
                <argument><expr>"OutputStreamFunneler.&lt;init&gt;:  out == null"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>out</name></name> = <name>out</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>closed</name></name> = false</expr>;</expr_stmt> <comment type="line">//as far as we know</comment>
        <expr_stmt><expr><call><name>setTimeout</name><argument_list>(<argument><expr><name>timeoutMillis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Set the timeout for this &lt;code&gt;OutputStreamFunneler&lt;/code&gt;.
     * This is the maximum time that may elapse between the closure
     * of the last &amp;quot;funnel&amp;quot; and the next call to
     * &lt;code&gt;getOutputStream()&lt;/code&gt; without closing the
     * underlying stream.
     * @param timeoutMillis   &lt;code&gt;long&lt;/code&gt; timeout value.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>setTimeout</name><parameter_list>(<param><decl><type><name>long</name></type> <name>timeoutMillis</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>timeoutMillis</name></name> = <name>timeoutMillis</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get a &amp;quot;funnel&amp;quot; &lt;code&gt;OutputStream&lt;/code&gt; instance to
     * write to this &lt;code&gt;OutputStreamFunneler&lt;/code&gt;'s underlying
     * &lt;code&gt;OutputStream&lt;/code&gt;.
     * @return &lt;code&gt;OutputStream&lt;/code&gt;.
     * @throws IOException if unable to create the funnel.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>OutputStream</name></type> <name>getFunnelInstance</name><parameter_list>()</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>dieIfClosed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <return>return <expr>new <call><name>Funnel</name><argument_list>()</argument_list></call></expr>;</return>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><call><name>notifyAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>release</name><parameter_list>(<param><decl><type><name>Funnel</name></type> <name>funnel</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <comment type="line">//ignore release of an already-closed funnel</comment>
        <if>if <condition>(<expr>!<name><name>funnel</name>.<name>closed</name></name></expr>)</condition><then> <block>{
            <try>try <block>{
                <if>if <condition>(<expr><name>timeoutMillis</name> &gt; 0</expr>)</condition><then> <block>{
                    <try>try <block>{
                        <expr_stmt><expr><call><name>wait</name><argument_list>(<argument><expr><name>timeoutMillis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block> <catch>catch (<param><decl><type><name>InterruptedException</name></type> <name>eyeEx</name></decl></param>) <block>{
                        <comment type="line">//ignore</comment>
                    }</block></catch></try>
                }</block></then></if>
                <if>if <condition>(<expr>--<name>count</name> == 0</expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block> <finally>finally <block>{
                <expr_stmt><expr><name><name>funnel</name>.<name>closed</name></name> = true</expr>;</expr_stmt>
            }</block></finally></try>
        }</block></then></if>
   }</block></function>

    <function><type><specifier>private</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <try>try <block>{
            <expr_stmt><expr><call><name>dieIfClosed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><name>closed</name> = true</expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>dieIfClosed</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>closed</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IOException</name><argument_list>(<argument><expr>"The funneled OutputStream has been closed."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
    }</block></function>

}</block></class>
</unit>
