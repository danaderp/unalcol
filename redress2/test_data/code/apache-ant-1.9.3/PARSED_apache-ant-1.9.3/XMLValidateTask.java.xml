<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\XMLValidateTask.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>AntClassLoader</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>DirectoryScanner</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>DTDLocation</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>FileSet</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Path</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Reference</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>XMLCatalog</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>JAXPUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>XmlConstants</name></name>;</import>

<import>import <name><name>org</name>.<name>xml</name>.<name>sax</name>.<name>EntityResolver</name></name>;</import>
<import>import <name><name>org</name>.<name>xml</name>.<name>sax</name>.<name>ErrorHandler</name></name>;</import>
<import>import <name><name>org</name>.<name>xml</name>.<name>sax</name>.<name>InputSource</name></name>;</import>
<import>import <name><name>org</name>.<name>xml</name>.<name>sax</name>.<name>Parser</name></name>;</import>
<import>import <name><name>org</name>.<name>xml</name>.<name>sax</name>.<name>SAXException</name></name>;</import>
<import>import <name><name>org</name>.<name>xml</name>.<name>sax</name>.<name>SAXNotRecognizedException</name></name>;</import>
<import>import <name><name>org</name>.<name>xml</name>.<name>sax</name>.<name>SAXNotSupportedException</name></name>;</import>
<import>import <name><name>org</name>.<name>xml</name>.<name>sax</name>.<name>SAXParseException</name></name>;</import>
<import>import <name><name>org</name>.<name>xml</name>.<name>sax</name>.<name>XMLReader</name></name>;</import>
<import>import <name><name>org</name>.<name>xml</name>.<name>sax</name>.<name>helpers</name>.<name>ParserAdapter</name></name>;</import>

<comment type="javadoc">/**
 * Checks XML files are valid (or only well formed). The
 * task uses the SAX2 parser implementation provided by JAXP by default
 * (probably the one that is used by Ant itself), but one can specify any
 * SAX1/2 parser if needed.
 *
 */</comment>
<class><specifier>public</specifier> class <name>XMLValidateTask</name> <super><extends>extends <name>Task</name></extends></super> <block>{

    <comment type="javadoc">/**
     * helper for path -&gt; URI and URI -&gt; path conversions.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>FileUtils</name></type> <name>FILE_UTILS</name> =<init> <expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>INIT_FAILED_MSG</name> =<init>
        <expr>"Could not start xml validation: "</expr></init></decl>;</decl_stmt>

    <comment type="line">// ant task properties</comment>
    <comment type="line">// defaults</comment>
    <comment type="line">// CheckStyle:VisibilityModifier OFF - bc</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>failOnError</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>warn</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>lenient</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>readerClassName</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** file to be validated */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>File</name></type> <name>file</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** sets of file to be validated */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Vector</name></type> <name>filesets</name> =<init> <expr>new <call><name>Vector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Path</name></type> <name>classpath</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * the parser is viewed as a SAX2 XMLReader. If a SAX1 parser is specified,
     * it's wrapped in an adapter that make it behave as a XMLReader.
     * a more 'standard' way of doing this would be to use the JAXP1.1 SAXParser
     * interface.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>XMLReader</name></type> <name>xmlReader</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <comment type="line">// XMLReader used to validation process</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>ValidatorErrorHandler</name></type> <name>errorHandler</name> =<init> <expr>new <call><name>ValidatorErrorHandler</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// to report sax parsing errors</comment>
    <comment type="line">// CheckStyle:VisibilityModifier ON</comment>

    <comment type="javadoc">/** The vector to store all attributes (features) to be set on the parser. **/</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Vector</name></type> <name>attributeList</name> =<init> <expr>new <call><name>Vector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * List of properties.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Vector</name></type> <name>propertyList</name> =<init> <expr>new <call><name>Vector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>XMLCatalog</name></type> <name>xmlCatalog</name> =<init> <expr>new <call><name>XMLCatalog</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** Message for sucessfull validation */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>MESSAGE_FILES_VALIDATED</name>
        =<init> <expr>" file(s) have been successfully validated."</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>AntClassLoader</name></type> <name>readerLoader</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Specify how parser error are to be handled.
     * Optional, default is &lt;code&gt;true&lt;/code&gt;.
     * &lt;p&gt;
     * If set to &lt;code&gt;true&lt;/code&gt; (default), throw a buildException if the
     * parser yields an error.
     * @param fail if set to &lt;code&gt;false&lt;/code&gt; do not fail on error
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFailOnError</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>fail</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>failOnError</name> = <name>fail</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Specify how parser error are to be handled.
     * &lt;p&gt;
     * If set to &lt;code&gt;true&lt;/true&gt; (default), log a warn message for each SAX warn event.
     * @param bool if set to &lt;code&gt;false&lt;/code&gt; do not send warnings
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setWarn</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>bool</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>warn</name> = <name>bool</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Specify whether the parser should be validating. Default
     * is &lt;code&gt;true&lt;/code&gt;.
     * &lt;p&gt;
     * If set to false, the validation will fail only if the parsed document
     * is not well formed XML.
     * &lt;p&gt;
     * this option is ignored if the specified class
     * with {@link #setClassName(String)} is not a SAX2 XMLReader.
     * @param bool if set to &lt;code&gt;false&lt;/code&gt; only fail on malformed XML
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLenient</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>bool</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>lenient</name> = <name>bool</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Specify the class name of the SAX parser to be used. (optional)
     * @param className should be an implementation of SAX2
     * &lt;code&gt;org.xml.sax.XMLReader&lt;/code&gt; or SAX2 &lt;code&gt;org.xml.sax.Parser&lt;/code&gt;.
     * &lt;p&gt; if className is an implementation of
     * &lt;code&gt;org.xml.sax.Parser&lt;/code&gt;, {@link #setLenient(boolean)},
     * will be ignored.
     * &lt;p&gt; if not set, the default will be used.
     * @see org.xml.sax.XMLReader
     * @see org.xml.sax.Parser
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setClassName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>className</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>readerClassName</name> = <name>className</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Specify the classpath to be searched to load the parser (optional)
     * @param classpath the classpath to load the parser
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setClasspath</name><parameter_list>(<param><decl><type><name>Path</name></type> <name>classpath</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>classpath</name></name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>classpath</name></name> = <name>classpath</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>classpath</name>.<name>append</name></name><argument_list>(<argument><expr><name>classpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * @see #setClasspath
     * @return the classpath created
     */</comment>
    <function><type><specifier>public</specifier> <name>Path</name></type> <name>createClasspath</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>classpath</name></name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>classpath</name></name> = new <call><name>Path</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><call><name><name>this</name>.<name>classpath</name>.<name>createPath</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Where to find the parser class; optional.
     * @see #setClasspath
     * @param r reference to a classpath defined elsewhere
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setClasspathRef</name><parameter_list>(<param><decl><type><name>Reference</name></type> <name>r</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>createClasspath</name><argument_list>()</argument_list></call>.<call><name>setRefid</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * specify the file to be checked; optional.
     * @param file the file to be checked
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>file</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>file</name></name> = <name>file</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * add an XMLCatalog as a nested element; optional.
     * @param catalog XMLCatalog to use
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addConfiguredXMLCatalog</name><parameter_list>(<param><decl><type><name>XMLCatalog</name></type> <name>catalog</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>xmlCatalog</name>.<name>addConfiguredXMLCatalog</name></name><argument_list>(<argument><expr><name>catalog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * specify a set of file to be checked
     * @param set the fileset to check
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addFileset</name><parameter_list>(<param><decl><type><name>FileSet</name></type> <name>set</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>filesets</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add an attribute nested element. This is used for setting arbitrary
     * features of the SAX parser.
     * Valid attributes
     * &lt;a href=
     * "http://www.saxproject.org/apidoc/org/xml/sax/package-summary.html#package_description"
     * &gt;include&lt;/a&gt;
     * @return attribute created
     * @since ant1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>Attribute</name></type> <name>createAttribute</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Attribute</name></type> <name>feature</name> =<init> <expr>new <call><name>Attribute</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>attributeList</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>feature</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>feature</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Creates a property.
     *
     * @return a property.
     * @since ant 1.6.2
     */</comment>
    <function><type><specifier>public</specifier> <name>Property</name></type> <name>createProperty</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Property</name></type> <name>prop</name> =<init> <expr>new <call><name>Property</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>propertyList</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>prop</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Called by the project to let the task initialize properly.
     *
     * @exception BuildException if something goes wrong with the build
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>init</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>super</name>.<name>init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>xmlCatalog</name>.<name>setProject</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Create a DTD location record; optional.
     * This stores the location of a DTD. The DTD is identified
     * by its public Id.
     * @return created DTD location
     */</comment>
    <function><type><specifier>public</specifier> <name>DTDLocation</name></type> <name>createDTD</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>DTDLocation</name></type> <name>dtdLocation</name> =<init> <expr>new <call><name>DTDLocation</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>xmlCatalog</name>.<name>addDTD</name></name><argument_list>(<argument><expr><name>dtdLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>dtdLocation</name></expr>;</return>
    }</block></function>
    <comment type="javadoc">/**
     * accessor to the xmlCatalog used in the task
     * @return xmlCatalog reference
     */</comment>
    <function><type><specifier>protected</specifier> <name>EntityResolver</name></type> <name>getEntityResolver</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>xmlCatalog</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * get the XML reader. Non-null only after {@link #initValidator()}.
     * If the reader is an instance of  {@link ParserAdapter} then
     * the parser is a SAX1 parser, and you cannot call
     * {@link #setFeature(String, boolean)} or {@link #setProperty(String, String)}
     * on it.
     * @return the XML reader or null.
     */</comment>
    <function><type><specifier>protected</specifier> <name>XMLReader</name></type> <name>getXmlReader</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>xmlReader</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * execute the task
     * @throws BuildException if &lt;code&gt;failonerror&lt;/code&gt; is true and an error happens
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <try>try <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>fileProcessed</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>file</name> == <name>null</name> &amp;&amp; (<call><name><name>filesets</name>.<name>size</name></name><argument_list>()</argument_list></call> == 0)</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                <argument><expr>"Specify at least one source - " + "a file or a fileset."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>



        <if>if <condition>(<expr><name>file</name> != <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name><name>file</name>.<name>exists</name></name><argument_list>()</argument_list></call> &amp;&amp; <call><name><name>file</name>.<name>canRead</name></name><argument_list>()</argument_list></call> &amp;&amp; <call><name><name>file</name>.<name>isFile</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>doValidate</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>fileProcessed</name>++</expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>errorMsg</name> =<init> <expr>"File " + <name>file</name> + " cannot be read"</expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>failOnError</name></expr>)</condition><then> <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>errorMsg</name></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>errorMsg</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_ERR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></else></if>
        }</block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>size</name> =<init> <expr><call><name><name>filesets</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>size</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{

            <decl_stmt><decl><type><name>FileSet</name></type> <name>fs</name> =<init> <expr>(<name>FileSet</name>) <call><name><name>filesets</name>.<name>elementAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>DirectoryScanner</name></type> <name>ds</name> =<init> <expr><call><name><name>fs</name>.<name>getDirectoryScanner</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>files</name> =<init> <expr><call><name><name>ds</name>.<name>getIncludedFiles</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <for>for (<init><decl><type><name>int</name></type> <name>j</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>j</name> &lt; <name><name>files</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>File</name></type> <name>srcFile</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>fs</name>.<name>getDir</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>files</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>doValidate</name><argument_list>(<argument><expr><name>srcFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>fileProcessed</name>++</expr>;</expr_stmt>
            }</block></for>
        }</block></for>
        <expr_stmt><expr><call><name>onSuccessfulValidation</name><argument_list>(<argument><expr><name>fileProcessed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><call><name>cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <comment type="javadoc">/**
     * handler called on successful file validation.
     * @param fileProcessed number of files processed.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>onSuccessfulValidation</name><parameter_list>(<param><decl><type><name>int</name></type> <name>fileProcessed</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>fileProcessed</name> + <name>MESSAGE_FILES_VALIDATED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * init the parser :
     * load the parser class, and set features if necessary
     * It is only after this that the reader is valid
     * @throws BuildException if something went wrong
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>initValidator</name><parameter_list>()</parameter_list> <block>{

        <expr_stmt><expr><name>xmlReader</name> = <call><name>createXmlReader</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>xmlReader</name>.<name>setEntityResolver</name></name><argument_list>(<argument><expr><call><name>getEntityResolver</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>xmlReader</name>.<name>setErrorHandler</name></name><argument_list>(<argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr>!<call><name>isSax1Parser</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">// turn validation on</comment>
            <if>if <condition>(<expr>!<name>lenient</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>setFeature</name><argument_list>(<argument><expr><name><name>XmlConstants</name>.<name>FEATURE_VALIDATION</name></name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <comment type="line">// set the feature from the attribute list</comment>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>attSize</name> =<init> <expr><call><name><name>attributeList</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>attSize</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>Attribute</name></type> <name>feature</name> =<init> <expr>(<name>Attribute</name>) <call><name><name>attributeList</name>.<name>elementAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>setFeature</name><argument_list>(<argument><expr><call><name><name>feature</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>feature</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            }</block></for>
            <comment type="line">// Sets properties</comment>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>propSize</name> =<init> <expr><call><name><name>propertyList</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>propSize</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>Property</name></type> <name>prop</name> =<init> <expr>(<name>Property</name>) <call><name><name>propertyList</name>.<name>elementAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>setProperty</name><argument_list>(<argument><expr><call><name><name>prop</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>prop</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * test that returns true if we are using a SAX1 parser.
     * @return true when a SAX1 parser is in use
     */</comment>
    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>isSax1Parser</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>(<name>xmlReader</name> <name>instanceof</name> <name>ParserAdapter</name>)</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * create the XML reader.
     * This is one by instantiating anything specified by {@link #readerClassName},
     * falling back to a default reader if not.
     * If the returned reader is an instance of {@link ParserAdapter} then
     * we have created and wrapped a SAX1 parser.
     * @return the new XMLReader.
     */</comment>
    <function><type><specifier>protected</specifier> <name>XMLReader</name></type> <name>createXmlReader</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Object</name></type> <name>reader</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>readerClassName</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>reader</name> = <call><name>createDefaultReaderOrParser</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{

            <decl_stmt><decl><type><name>Class</name></type> <name>readerClass</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <try>try <block>{
                <comment type="line">// load the parser class</comment>
                <if>if <condition>(<expr><name>classpath</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>readerLoader</name> = <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>createClassLoader</name><argument_list>(<argument><expr><name>classpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>readerClass</name> = <call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr><name>readerClassName</name></expr></argument>, <argument><expr>true</expr></argument>,
                                                <argument><expr><name>readerLoader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><name>readerClass</name> = <call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr><name>readerClassName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>

                <expr_stmt><expr><name>reader</name> = <call><name><name>readerClass</name>.<name>newInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>ClassNotFoundException</name></type> <name>e</name></decl></param>) <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>INIT_FAILED_MSG</name> + <name>readerClassName</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch> <catch>catch (<param><decl><type><name>InstantiationException</name></type> <name>e</name></decl></param>) <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>INIT_FAILED_MSG</name> + <name>readerClassName</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch> <catch>catch (<param><decl><type><name>IllegalAccessException</name></type> <name>e</name></decl></param>) <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>INIT_FAILED_MSG</name> + <name>readerClassName</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></else></if>

        <comment type="line">// then check it implements XMLReader</comment>
        <decl_stmt><decl><type><name>XMLReader</name></type> <name>newReader</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>reader</name> <name>instanceof</name> <name>XMLReader</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>newReader</name> = (<name>XMLReader</name>) <name>reader</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>log</name><argument_list>(
                <argument><expr>"Using SAX2 reader " + <call><name><name>reader</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{

            <comment type="line">// see if it is a SAX1 Parser</comment>
            <if>if <condition>(<expr><name>reader</name> <name>instanceof</name> <name>Parser</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>newReader</name> = new <call><name>ParserAdapter</name><argument_list>(<argument><expr>(<name>Parser</name>) <name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>log</name><argument_list>(
                    <argument><expr>"Using SAX1 parser " + <call><name><name>reader</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                    <argument><expr><name>INIT_FAILED_MSG</name>
                        + <call><name><name>reader</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call>
                        + " implements nor SAX1 Parser nor SAX2 XMLReader."</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></else></if>
        }</block></else></if>
        <return>return <expr><name>newReader</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Cleans up resources.
     *
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>cleanup</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>readerLoader</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>readerLoader</name>.<name>cleanup</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>readerLoader</name> = <name>null</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     *
     * @return
     */</comment>
    <function><type><specifier>private</specifier> <name>Object</name></type> <name>createDefaultReaderOrParser</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Object</name></type> <name>reader</name></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>reader</name> = <call><name>createDefaultReader</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>exc</name></decl></param>) <block>{
            <expr_stmt><expr><name>reader</name> = <call><name><name>JAXPUtils</name>.<name>getParser</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <return>return <expr><name>reader</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * create a reader if the use of the class did not specify another one.
     * If a BuildException is thrown, the caller may revert to an alternate
     * reader.
     * @return a new reader.
     * @throws BuildException if something went wrong
     */</comment>
    <function><type><specifier>protected</specifier> <name>XMLReader</name></type> <name>createDefaultReader</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>JAXPUtils</name>.<name>getXMLReader</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set a feature on the parser.
     * @param feature the name of the feature to set
     * @param value the value of the feature
     * @throws BuildException if the feature was not supported
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setFeature</name><parameter_list>(<param><decl><type><name>String</name></type> <name>feature</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>value</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Setting feature " + <name>feature</name> + "=" + <name>value</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>xmlReader</name>.<name>setFeature</name></name><argument_list>(<argument><expr><name>feature</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>SAXNotRecognizedException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                <argument><expr>"Parser "
                    + <call><name><name>xmlReader</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call>
                    + " doesn't recognize feature "
                    + <name>feature</name></expr></argument>,
                <argument><expr><name>e</name></expr></argument>,
                <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <catch>catch (<param><decl><type><name>SAXNotSupportedException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                <argument><expr>"Parser "
                    + <call><name><name>xmlReader</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call>
                    + " doesn't support feature "
                    + <name>feature</name></expr></argument>,
                <argument><expr><name>e</name></expr></argument>,
                <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * Sets a property.
     *
     * @param name a property name
     * @param value a property value.
     * @throws BuildException if an error occurs.
     * @throws BuildException if the property was not supported
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setProperty</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>, <param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <comment type="line">// Validates property</comment>
        <if>if <condition>(<expr><name>name</name> == <name>null</name> || <name>value</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Property name and value must be specified."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <try>try <block>{
            <expr_stmt><expr><call><name><name>xmlReader</name>.<name>setProperty</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>SAXNotRecognizedException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                <argument><expr>"Parser "
                    + <call><name><name>xmlReader</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call>
                    + " doesn't recognize property "
                    + <name>name</name></expr></argument>,
                <argument><expr><name>e</name></expr></argument>,
                <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <catch>catch (<param><decl><type><name>SAXNotSupportedException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                <argument><expr>"Parser "
                    + <call><name><name>xmlReader</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call>
                    + " doesn't support property "
                    + <name>name</name></expr></argument>,
                <argument><expr><name>e</name></expr></argument>,
                <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * parse the file
     * @param afile the file to validate.
     * @return true if the file validates.
     */</comment>
    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>doValidate</name><parameter_list>(<param><decl><type><name>File</name></type> <name>afile</name></decl></param>)</parameter_list> <block>{
        <comment type="line">//for every file, we have a new instance of the validator</comment>
        <expr_stmt><expr><call><name>initValidator</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>result</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Validating " + <call><name><name>afile</name>.<name>getName</name></name><argument_list>()</argument_list></call> + "... "</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>errorHandler</name>.<name>init</name></name><argument_list>(<argument><expr><name>afile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>InputSource</name></type> <name>is</name> =<init> <expr>new <call><name>InputSource</name><argument_list>(<argument><expr>new <call><name>FileInputStream</name><argument_list>(<argument><expr><name>afile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>uri</name> =<init> <expr><call><name><name>FILE_UTILS</name>.<name>toURI</name></name><argument_list>(<argument><expr><call><name><name>afile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>is</name>.<name>setSystemId</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>xmlReader</name>.<name>parse</name></name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>SAXException</name></type> <name>ex</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Caught when validating: " + <call><name><name>ex</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>failOnError</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                    <argument><expr>"Could not validate document " + <name>afile</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Could not validate document " + <name>afile</name> + ": " + <call><name><name>ex</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>result</name> = false</expr>;</expr_stmt>
        }</block></catch> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ex</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                <argument><expr>"Could not validate document " + <name>afile</name></expr></argument>,
                <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
        <if>if <condition>(<expr><call><name><name>errorHandler</name>.<name>getFailure</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>failOnError</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                    <argument><expr><name>afile</name> + " is not a valid XML document."</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <expr_stmt><expr><name>result</name> = false</expr>;</expr_stmt>
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>afile</name> + " is not a valid XML document"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_ERR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * ValidatorErrorHandler role :
     * &lt;ul&gt;
     * &lt;li&gt; log SAX parse exceptions,
     * &lt;li&gt; remember if an error occurred
     * &lt;/ul&gt;
     */</comment>
    <class><specifier>protected</specifier> class <name>ValidatorErrorHandler</name> <super><implements>implements <name>ErrorHandler</name></implements></super> <block>{

        <comment type="line">// CheckStyle:VisibilityModifier OFF - bc</comment>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>File</name></type> <name>currentFile</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>lastErrorMessage</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>failed</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <comment type="line">// CheckStyle:VisibilityModifier ON</comment>
        <comment type="javadoc">/**
         * initialises the class
         * @param file file used
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>init</name><parameter_list>(<param><decl><type><name>File</name></type> <name>file</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name>currentFile</name> = <name>file</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>failed</name> = false</expr>;</expr_stmt>
        }</block></function>
        <comment type="javadoc">/**
         * did an error happen during last parsing ?
         * @return did an error happen during last parsing ?
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getFailure</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>failed</name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * record a fatal error
         * @param exception the fatal error
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>fatalError</name><parameter_list>(<param><decl><type><name>SAXParseException</name></type> <name>exception</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name>failed</name> = true</expr>;</expr_stmt>
            <expr_stmt><expr><call><name>doLog</name><argument_list>(<argument><expr><name>exception</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_ERR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        <comment type="javadoc">/**
         * receive notification of a recoverable error
         * @param exception the error
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>error</name><parameter_list>(<param><decl><type><name>SAXParseException</name></type> <name>exception</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name>failed</name> = true</expr>;</expr_stmt>
            <expr_stmt><expr><call><name>doLog</name><argument_list>(<argument><expr><name>exception</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_ERR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        <comment type="javadoc">/**
         * receive notification of a warning
         * @param exception the warning
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>warning</name><parameter_list>(<param><decl><type><name>SAXParseException</name></type> <name>exception</name></decl></param>)</parameter_list> <block>{
            <comment type="line">// depending on implementation, XMLReader can yield hips of warning,</comment>
            <comment type="line">// only output then if user explicitly asked for it</comment>
            <if>if <condition>(<expr><name>warn</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>doLog</name><argument_list>(<argument><expr><name>exception</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>doLog</name><parameter_list>(<param><decl><type><name>SAXParseException</name></type> <name>e</name></decl></param>, <param><decl><type><name>int</name></type> <name>logLevel</name></decl></param>)</parameter_list> <block>{

            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><call><name>getMessage</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>logLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>private</specifier> <name>String</name></type> <name>getMessage</name><parameter_list>(<param><decl><type><name>SAXParseException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>sysID</name> =<init> <expr><call><name><name>e</name>.<name>getSystemId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>sysID</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>name</name> =<init> <expr><name>sysID</name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>sysID</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"file:"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <try>try <block>{
                        <expr_stmt><expr><name>name</name> = <call><name><name>FILE_UTILS</name>.<name>fromURI</name></name><argument_list>(<argument><expr><name>sysID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>ex</name></decl></param>) <block>{
                        <comment type="line">// if this is not a valid file: just use the uri</comment>
                    }</block></catch></try>
                }</block></then></if>
                <decl_stmt><decl><type><name>int</name></type> <name>line</name> =<init> <expr><call><name><name>e</name>.<name>getLineNumber</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>col</name> =<init> <expr><call><name><name>e</name>.<name>getColumnNumber</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <return>return  <expr><name>name</name>
                    + (<name>line</name> == -1
                       ? ""
                       : (":" + <name>line</name> + (<name>col</name> == -1 ? "" : (":" + <name>col</name>))))
                    + ": "
                    + <call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr>;</return>
            }</block></then></if>
            <return>return <expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>

    <comment type="javadoc">/**
     * The class to create to set a feature of the parser.
     * @since ant1.6
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Attribute</name> <block>{
        <comment type="javadoc">/** The name of the attribute to set.
         *
         * Valid attributes &lt;a href=
         * "http://www.saxproject.org/apidoc/org/xml/sax/package-summary.html#package_description"
         * &gt;include.&lt;/a&gt;
         */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>attributeName</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * The value of the feature.
         **/</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>attributeValue</name></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * Set the feature name.
         * @param name the name to set
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name>attributeName</name> = <name>name</name></expr>;</expr_stmt>
        }</block></function>
        <comment type="javadoc">/**
         * Set the feature value to true or false.
         * @param value feature value
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setValue</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name>attributeValue</name> = <name>value</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * Gets the attribute name.
         * @return the feature name
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>attributeName</name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Gets the attribute value.
         * @return the feature value
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getValue</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>attributeValue</name></expr>;</return>
        }</block></function>
    }</block></class>

    <comment type="javadoc">/**
     * A Parser property.
     * See &lt;a href="http://xml.apache.org/xerces-j/properties.html"&gt;
     * XML parser properties&lt;/a&gt; for usable properties
     * @since ant 1.6.2
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>Property</name> <block>{

        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>name</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>value</name></decl>;</decl_stmt>
        <comment type="javadoc">/**
         * accessor to the name of the property
         * @return name of the property
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>name</name></expr>;</return>
        }</block></function>
        <comment type="javadoc">/**
         * setter for the name of the property
         * @param name name of the property
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>name</name></name> = <name>name</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * getter for the value of the property
         * @return value of the property
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getValue</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>value</name></expr>;</return>
        }</block></function>
        <comment type="javadoc">/**
         * sets the value of the property
         * @param value value of the property
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setValue</name><parameter_list>(<param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>value</name></name> = <name>value</name></expr>;</expr_stmt>
        }</block></function>

    }</block></class> <comment type="line">// Property</comment>



}</block></class>
</unit>
