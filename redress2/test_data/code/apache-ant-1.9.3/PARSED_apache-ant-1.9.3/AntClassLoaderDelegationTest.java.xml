<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\AntClassLoaderDelegationTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>URL</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Arrays</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collections</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>junit</name>.<name>framework</name>.<name>TestCase</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Path</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>

<comment type="javadoc">/**
 * Test case for ant class loader
 *
 */</comment>
<class><specifier>public</specifier> class <name>AntClassLoaderDelegationTest</name> <super><extends>extends <name>TestCase</name></extends></super> <block>{

    <comment type="javadoc">/** Instance of a utility class to use for file operations. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>FileUtils</name></type> <name>FILE_UTILS</name> =<init> <expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Project</name></type> <name>p</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>AntClassLoaderDelegationTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>p</name> = new <call><name>Project</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/** Sample resource present in build/testcases/ */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TEST_RESOURCE</name>
        =<init> <expr>"apache/tools/ant/IncludeTest.class"</expr></init></decl>;</decl_stmt>
    
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFindResources</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <comment type="line">// This path should contain the class files for these testcases:</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>buildTestcases</name> =<init> <expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"build.tests"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr>"defined ${build.tests}"</expr></argument>, <argument><expr><name>buildTestcases</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"have a dir " + <name>buildTestcases</name></expr></argument>,
                   <argument><expr>new <call><name>File</name><argument_list>(<argument><expr><name>buildTestcases</name></expr></argument>)</argument_list></call>.<call><name>isDirectory</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Path</name></type> <name>path</name> =<init> <expr>new <call><name>Path</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>buildTestcases</name> + "/org"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// A special parent loader which is not the system class loader:</comment>
        <decl_stmt><decl><type><name>ClassLoader</name></type> <name>parent</name> =<init> <expr>new <call><name>ParentLoader</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// An AntClassLoader which is supposed to delegate to</comment>
        <comment type="line">// the parent and then to the disk path:</comment>
        <decl_stmt><decl><type><name>ClassLoader</name></type> <name>acl</name> =<init> <expr>new <call><name>AntClassLoader</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// The intended result URLs:</comment>
        <decl_stmt><decl><type><name>URL</name></type> <name>urlFromPath</name> =<init> <expr>new <call><name>URL</name><argument_list>(
            <argument><expr><call><name><name>FILE_UTILS</name>.<name>toURI</name></name><argument_list>(<argument><expr><name>buildTestcases</name></expr></argument>)</argument_list></call> + "org/" + <name>TEST_RESOURCE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>URL</name></type> <name>urlFromParent</name> =<init> <expr>new <call><name>URL</name><argument_list>(<argument><expr>"http://ant.apache.org/" + <name>TEST_RESOURCE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"correct resources (regular delegation order)"</expr></argument>,
            <argument><expr><call><name><name>Arrays</name>.<name>asList</name></name><argument_list>(<argument><expr>new <name><name>URL</name><index>[]</index></name> <block>{<expr><name>urlFromParent</name></expr>, <expr><name>urlFromPath</name></expr>}</block></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>enum2List</name><argument_list>(<argument><expr><call><name><name>acl</name>.<name>getResources</name></name><argument_list>(<argument><expr><name>TEST_RESOURCE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>acl</name> = new <call><name>AntClassLoader</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"correct resources (reverse delegation order)"</expr></argument>,
            <argument><expr><call><name><name>Arrays</name>.<name>asList</name></name><argument_list>(<argument><expr>new <name><name>URL</name><index>[]</index></name> <block>{<expr><name>urlFromPath</name></expr>, <expr><name>urlFromParent</name></expr>}</block></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>enum2List</name><argument_list>(<argument><expr><call><name><name>acl</name>.<name>getResources</name></name><argument_list>(<argument><expr><name>TEST_RESOURCE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFindIsolateResources</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>buildTestcases</name> =<init> <expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"build.tests"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr>"defined ${build.tests}"</expr></argument>, <argument><expr><name>buildTestcases</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"have a dir " + <name>buildTestcases</name></expr></argument>,
                   <argument><expr>new <call><name>File</name><argument_list>(<argument><expr><name>buildTestcases</name></expr></argument>)</argument_list></call>.<call><name>isDirectory</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Path</name></type> <name>path</name> =<init> <expr>new <call><name>Path</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>buildTestcases</name> + "/org"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// A special parent loader which is not the system class loader:</comment>
        <decl_stmt><decl><type><name>ClassLoader</name></type> <name>parent</name> =<init> <expr>new <call><name>ParentLoader</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>URL</name></type> <name>urlFromPath</name> =<init> <expr>new <call><name>URL</name><argument_list>(
            <argument><expr><call><name><name>FILE_UTILS</name>.<name>toURI</name></name><argument_list>(<argument><expr><name>buildTestcases</name></expr></argument>)</argument_list></call> + "org/" + <name>TEST_RESOURCE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>AntClassLoader</name></type> <name>acl</name> =<init> <expr>new <call><name>AntClassLoader</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>acl</name>.<name>setIsolated</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"correct resources (reverse delegation order)"</expr></argument>,
            <argument><expr><call><name><name>Arrays</name>.<name>asList</name></name><argument_list>(<argument><expr>new <name><name>URL</name><index>[]</index></name> <block>{<expr><name>urlFromPath</name></expr>}</block></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>enum2List</name><argument_list>(<argument><expr><call><name><name>acl</name>.<name>getResources</name></name><argument_list>(<argument><expr><name>TEST_RESOURCE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>List</name></type> <name>enum2List</name><parameter_list>(<param><decl><type><name>Enumeration</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>Collections</name>.<name>list</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/** Special loader that just knows how to find TEST_RESOURCE. */</comment>
    <class><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>ParentLoader</name> <super><extends>extends <name>ClassLoader</name></extends></super> <block>{
        
        <constructor><specifier>public</specifier> <name>ParentLoader</name><parameter_list>()</parameter_list> <block>{}</block></constructor>
        
        <function><type><specifier>protected</specifier> <name>Enumeration</name></type> <name>findResources</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
            <if>if <condition>(<expr><call><name><name>name</name>.<name>equals</name></name><argument_list>(<argument><expr><name>TEST_RESOURCE</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><call><name><name>Collections</name>.<name>enumeration</name></name><argument_list>(
                    <argument><expr><call><name><name>Collections</name>.<name>singleton</name></name><argument_list>(
                        <argument><expr>new <call><name>URL</name><argument_list>(<argument><expr>"http://ant.apache.org/" + <name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then> <else>else <block>{
                <return>return <expr><call><name><name>Collections</name>.<name>enumeration</name></name><argument_list>(<argument><expr><name><name>Collections</name>.<name>EMPTY_SET</name></name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></else></if>
        }</block></function>
        
    }</block></class>
    
}</block></class>
</unit>
