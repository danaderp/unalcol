<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\types\resources\BZip2Resource.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>OutputStream</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>bzip2</name>.<name>CBZip2InputStream</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>bzip2</name>.<name>CBZip2OutputStream</name></name>;</import>

<comment type="javadoc">/**
 * A Bzip2 compressed resource.
 *
 * &lt;p&gt;Wraps around another resource, delegates all queries to that
 * other resource but uncompresses/compresses streams on the fly.&lt;/p&gt;
 *
 * @since Ant 1.7
 */</comment>
<class><specifier>public</specifier> class <name>BZip2Resource</name> <super><extends>extends <name>CompressedResource</name></extends></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>char</name><index>[]</index></type> <name>MAGIC</name> =<init> <expr>new <name><name>char</name><index>[]</index></name> <block>{<expr>'B'</expr>, <expr>'Z'</expr>}</block></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** A no-arg constructor */</comment>
    <constructor><specifier>public</specifier> <name>BZip2Resource</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructor with another resource to wrap.
     * @param other the resource to wrap.
     */</comment>
    <constructor><specifier>public</specifier> <name>BZip2Resource</name><parameter_list>(<param><decl><type><name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>ResourceCollection</name></name></type> <name>other</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Decompress on the fly using {@link CBZip2InputStream}.
     * @param in the stream to wrap.
     * @return the wrapped stream.
     * @throws IOException if there is a problem.
     */</comment>
    <function><type><specifier>protected</specifier> <name>InputStream</name></type> <name>wrapStream</name><parameter_list>(<param><decl><type><name>InputStream</name></type> <name>in</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>MAGIC</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <if>if <condition>(<expr><call><name><name>in</name>.<name>read</name></name><argument_list>()</argument_list></call> != <name><name>MAGIC</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>IOException</name><argument_list>(<argument><expr>"Invalid bz2 stream."</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
        }</block></for>
        <return>return <expr>new <call><name>CBZip2InputStream</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Compress on the fly using {@link CBZip2OutputStream}.
     * @param out the stream to wrap.
     * @return the wrapped stream.
     * @throws IOException if there is a problem.
     */</comment>
    <function><type><specifier>protected</specifier> <name>OutputStream</name></type> <name>wrapStream</name><parameter_list>(<param><decl><type><name>OutputStream</name></type> <name>out</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>MAGIC</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr><name><name>MAGIC</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr>new <call><name>CBZip2OutputStream</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the name of the compression method.
     * @return the string "Bzip2".
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>getCompressionName</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>"Bzip2"</expr>;</return>
    }</block></function>
}</block></class>
</unit>
