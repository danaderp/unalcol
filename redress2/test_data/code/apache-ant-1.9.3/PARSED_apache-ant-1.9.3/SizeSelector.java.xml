<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\types\selectors\SizeSelector.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Comparison</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>EnumeratedAttribute</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Parameter</name></name>;</import>

<comment type="javadoc">/**
 * Selector that filters files based on their size.
 *
 * @since 1.5
 */</comment>
<class><specifier>public</specifier> class <name>SizeSelector</name> <super><extends>extends <name>BaseExtendSelector</name></extends></super> <block>{

    <comment type="javadoc">/** Constants for kilo, kibi etc */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type>  <name>KILO</name> =<init> <expr>1000</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type>  <name>KIBI</name> =<init> <expr>1024</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type>  <name>KIBI_POS</name> =<init> <expr>4</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type>  <name>MEGA</name> =<init> <expr>1000000</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type>  <name>MEGA_POS</name> =<init> <expr>9</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type>  <name>MEBI</name> =<init> <expr>1048576</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type>  <name>MEBI_POS</name> =<init> <expr>13</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>GIGA</name> =<init> <expr>1000000000L</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type>  <name>GIGA_POS</name> =<init> <expr>18</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>GIBI</name> =<init> <expr>1073741824L</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type>  <name>GIBI_POS</name> =<init> <expr>22</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>TERA</name> =<init> <expr>1000000000000L</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type>  <name>TERA_POS</name> =<init> <expr>27</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>TEBI</name> =<init> <expr>1099511627776L</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type>  <name>TEBI_POS</name> =<init> <expr>31</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type>  <name>END_POS</name> =<init> <expr>36</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Used for parameterized custom selector */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SIZE_KEY</name> =<init> <expr>"value"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** Used for parameterized custom selector */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>UNITS_KEY</name> =<init> <expr>"units"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** Used for parameterized custom selector */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>WHEN_KEY</name> =<init> <expr>"when"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>size</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>multiplier</name> =<init> <expr>1</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>sizelimit</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Comparison</name></type> <name>when</name> =<init> <expr><name><name>Comparison</name>.<name>EQUAL</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a new &lt;code&gt;SizeSelector&lt;/code&gt; instance.
     *
     */</comment>
    <constructor><specifier>public</specifier> <name>SizeSelector</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns a &lt;code&gt;String&lt;/code&gt; object representing the specified
     * SizeSelector. This is "{sizeselector value: " + &lt;"compare",
     * "less", "more", "equal"&gt; + "}".
     * @return a string describing this object
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>buf</name> =<init> <expr>new <call><name>StringBuilder</name><argument_list>(<argument><expr>"{sizeselector value: "</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr><name>sizelimit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr>"compare: "</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><call><name><name>when</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr>"}"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>buf</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * A size selector needs to know what size to base its selecting on.
     * This will be further modified by the multiplier to get an
     * actual size limit.
     *
     * @param size the size to select against expressed in units.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setValue</name><parameter_list>(<param><decl><type><name>long</name></type> <name>size</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>size</name></name> = <name>size</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>multiplier</name> != 0 &amp;&amp; <name>size</name> &gt; -1</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>sizelimit</name> = <name>size</name> * <name>multiplier</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the units to use for the comparison. This is a little
     * complicated because common usage has created standards that
     * play havoc with capitalization rules. Thus, some people will
     * use "K" for indicating 1000's, when the SI standard calls for
     * "k". Others have tried to introduce "K" as a multiple of 1024,
     * but that falls down when you reach "M", since "m" is already
     * defined as 0.001.
     * &lt;p&gt;
     * To get around this complexity, a number of standards bodies
     * have proposed the 2^10 standard, and at least one has adopted
     * it. But we are still left with a populace that isn't clear on
     * how capitalization should work.
     * &lt;p&gt;
     * We therefore ignore capitalization as much as possible.
     * Completely mixed case is not possible, but all upper and lower
     * forms are accepted for all long and short forms. Since we have
     * no need to work with the 0.001 case, this practice works here.
     * &lt;p&gt;
     * This function translates all the long and short forms that a
     * unit prefix can occur in and translates them into a single
     * multiplier.
     *
     * @param units The units to compare the size to, using an
     *        EnumeratedAttribute.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUnits</name><parameter_list>(<param><decl><type><name>ByteUnits</name></type> <name>units</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> =<init> <expr><call><name><name>units</name>.<name>getIndex</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>multiplier</name> = 0</expr>;</expr_stmt>
        <if>if <condition>(<expr><name>i</name> &gt; -1 &amp;&amp; <name>i</name> &lt; <name>KIBI_POS</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>multiplier</name> = <name>KILO</name></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><name>i</name> &lt; <name>MEGA_POS</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>multiplier</name> = <name>KIBI</name></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><name>i</name> &lt; <name>MEBI_POS</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>multiplier</name> = <name>MEGA</name></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><name>i</name> &lt; <name>GIGA_POS</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>multiplier</name> = <name>MEBI</name></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><name>i</name> &lt; <name>GIBI_POS</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>multiplier</name> = <name>GIGA</name></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><name>i</name> &lt; <name>TERA_POS</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>multiplier</name> = <name>GIBI</name></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><name>i</name> &lt; <name>TEBI_POS</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>multiplier</name> = <name>TERA</name></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><name>i</name> &lt; <name>END_POS</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>multiplier</name> = <name>TEBI</name></expr>;</expr_stmt>
        }</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
        <if>if <condition>(<expr><name>multiplier</name> &gt; 0 &amp;&amp; <name>size</name> &gt; -1</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>sizelimit</name> = <name>size</name> * <name>multiplier</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * This specifies when the file should be selected, whether it be
     * when the file matches a particular size, when it is smaller,
     * or whether it is larger.
     *
     * @param when The comparison to perform, an EnumeratedAttribute.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setWhen</name><parameter_list>(<param><decl><type><name>SizeComparisons</name></type> <name>when</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>when</name></name> = <name>when</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * When using this as a custom selector, this method will be called.
     * It translates each parameter into the appropriate setXXX() call.
     *
     * @param parameters the complete set of parameters for this selector.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setParameters</name><parameter_list>(<param><decl><type><name><name>Parameter</name><index>[]</index></name></type> <name>parameters</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name>.<name>setParameters</name></name><argument_list>(<argument><expr><name>parameters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>parameters</name> != <name>null</name></expr>)</condition><then> <block>{
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>parameters</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>paramname</name> =<init> <expr><name><name>parameters</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>getName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>SIZE_KEY</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>paramname</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <try>try <block>{
                        <expr_stmt><expr><call><name>setValue</name><argument_list>(<argument><expr><call><name><name>Long</name>.<name>parseLong</name></name><argument_list>(<argument><expr><name><name>parameters</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block> <catch>catch (<param><decl><type><name>NumberFormatException</name></type> <name>nfe</name></decl></param>) <block>{
                        <expr_stmt><expr><call><name>setError</name><argument_list>(<argument><expr>"Invalid size setting "
                                + <name><name>parameters</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></catch></try>
                }</block></then> <else>else <if>if <condition>(<expr><call><name><name>UNITS_KEY</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>paramname</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>ByteUnits</name></type> <name>units</name> =<init> <expr>new <call><name>ByteUnits</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>units</name>.<name>setValue</name></name><argument_list>(<argument><expr><name><name>parameters</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>setUnits</name><argument_list>(<argument><expr><name>units</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <if>if <condition>(<expr><call><name><name>WHEN_KEY</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>paramname</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>SizeComparisons</name></type> <name>scmp</name> =<init> <expr>new <call><name>SizeComparisons</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>scmp</name>.<name>setValue</name></name><argument_list>(<argument><expr><name><name>parameters</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>setWhen</name><argument_list>(<argument><expr><name>scmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name>setError</name><argument_list>(<argument><expr>"Invalid parameter " + <name>paramname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if></else></if></else></if>
            }</block></for>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * &lt;p&gt;Checks to make sure all settings are kosher. In this case, it
     * means that the size attribute has been set (to a positive value),
     * that the multiplier has a valid setting, and that the size limit
     * is valid. Since the latter is a calculated value, this can only
     * fail due to a programming error.
     * &lt;/p&gt;
     * &lt;p&gt;If a problem is detected, the setError() method is called.
     * &lt;/p&gt;
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>verifySettings</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>size</name> &lt; 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>setError</name><argument_list>(<argument><expr>"The value attribute is required, and must be positive"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><name>multiplier</name> &lt; 1</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>setError</name><argument_list>(<argument><expr>"Invalid Units supplied, must be K,Ki,M,Mi,G,Gi,T,or Ti"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><name>sizelimit</name> &lt; 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>setError</name><argument_list>(<argument><expr>"Internal error: Code is not setting sizelimit correctly"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * The heart of the matter. This is where the selector gets to decide
     * on the inclusion of a file in a particular fileset.
     *
     * @param basedir A java.io.File object for the base directory.
     * @param filename The name of the file to check.
     * @param file A File object for this filename.
     * @return whether the file should be selected or not.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSelected</name><parameter_list>(<param><decl><type><name>File</name></type> <name>basedir</name></decl></param>, <param><decl><type><name>String</name></type> <name>filename</name></decl></param>, <param><decl><type><name>File</name></type> <name>file</name></decl></param>)</parameter_list> <block>{

        <comment type="line">// throw BuildException on error</comment>
        <expr_stmt><expr><call><name>validate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Directory size never selected for</comment>
        <if>if <condition>(<expr><call><name><name>file</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>long</name></type> <name>diff</name> =<init> <expr><call><name><name>file</name>.<name>length</name></name><argument_list>()</argument_list></call> - <name>sizelimit</name></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>when</name>.<name>evaluate</name></name><argument_list>(<argument><expr><name>diff</name> == 0 ? 0 : <call>(<name>int</name>) <argument_list>(<argument><expr><name>diff</name> / <call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     * Enumerated attribute with the values for units.
     * &lt;p&gt;
     * This treats the standard SI units as representing powers of ten,
     * as they should. If you want the powers of 2 that approximate
     * the SI units, use the first two characters followed by a
     * &lt;code&gt;bi&lt;/code&gt;. So 1024 (2^10) becomes &lt;code&gt;kibi&lt;/code&gt;,
     * 1048576 (2^20) becomes &lt;code&gt;mebi&lt;/code&gt;, 1073741824 (2^30)
     * becomes &lt;code&gt;gibi&lt;/code&gt;, and so on. The symbols are also
     * accepted, and these are the first letter capitalized followed
     * by an &lt;code&gt;i&lt;/code&gt;. &lt;code&gt;Ki&lt;/code&gt;, &lt;code&gt;Mi&lt;/code&gt;,
     * &lt;code&gt;Gi&lt;/code&gt;, and so on. Capitalization variations on these
     * are also accepted.
     * &lt;p&gt;
     * This binary prefix system is approved by the IEC and appears on
     * its way for approval by other agencies, but it is not an SI
     * standard. It disambiguates things for us, though.
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>ByteUnits</name> <super><extends>extends <name>EnumeratedAttribute</name></extends></super> <block>{
        <comment type="javadoc">/**
         * @return the values as an array of strings
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getValues</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr>new <name><name>String</name><index>[]</index></name><block>{<expr>"K"</expr>, <expr>"k"</expr>, <expr>"kilo"</expr>, <expr>"KILO"</expr>,
                                <expr>"Ki"</expr>, <expr>"KI"</expr>, <expr>"ki"</expr>, <expr>"kibi"</expr>, <expr>"KIBI"</expr>,
                                <expr>"M"</expr>, <expr>"m"</expr>, <expr>"mega"</expr>, <expr>"MEGA"</expr>,
                                <expr>"Mi"</expr>, <expr>"MI"</expr>, <expr>"mi"</expr>, <expr>"mebi"</expr>, <expr>"MEBI"</expr>,
                                <expr>"G"</expr>, <expr>"g"</expr>, <expr>"giga"</expr>, <expr>"GIGA"</expr>,
                                <expr>"Gi"</expr>, <expr>"GI"</expr>, <expr>"gi"</expr>, <expr>"gibi"</expr>, <expr>"GIBI"</expr>,
                                <expr>"T"</expr>, <expr>"t"</expr>, <expr>"tera"</expr>, <expr>"TERA"</expr>,
           <comment type="block">/* You wish! */</comment>      <expr>"Ti"</expr>, <expr>"TI"</expr>, <expr>"ti"</expr>, <expr>"tebi"</expr>, <expr>"TEBI"</expr>
            }</block></expr>;</return>
        }</block></function>
    }</block></class>

    <comment type="javadoc">/**
     * Enumerated attribute with the values for size comparison.
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>SizeComparisons</name> <super><extends>extends <name>Comparison</name></extends></super> <block>{
    }</block></class>

}</block></class>

</unit>
