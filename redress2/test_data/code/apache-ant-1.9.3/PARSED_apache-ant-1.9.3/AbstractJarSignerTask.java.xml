<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\AbstractJarSignerTask.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>filters</name>.<name>LineContainsRegExp</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Environment</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>FileSet</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Path</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>RedirectorElement</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>RegularExpression</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>JavaEnvUtils</name></name>;</import>

<comment type="javadoc">/**
 * This is factored out from {@link SignJar}; a base class that can be used
 * for both signing and verifying JAR files using jarsigner
 */</comment>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>AbstractJarSignerTask</name> <super><extends>extends <name>Task</name></extends></super> <block>{
    <comment type="line">// CheckStyle:VisibilityModifier OFF - bc</comment>
    <comment type="javadoc">/**
     * The name of the jar file.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>File</name></type> <name>jar</name></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * The alias of signer.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>alias</name></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * The url or path of keystore file.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>keystore</name></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * password for the store
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>storepass</name></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * type of store,-storetype param
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>storetype</name></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * password for the key in the store
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>keypass</name></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * verbose output
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>verbose</name></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * strict checking
     * @since Ant 1.9.1
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>strict</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * The maximum amount of memory to use for Jar signer
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>maxMemory</name></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * the filesets of the jars to sign
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>FileSet</name></argument>&gt;</argument_list></name></type> <name>filesets</name> =<init> <expr>new <call><name><name>Vector</name><argument_list>&lt;<argument><name>FileSet</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * name of JDK program we are looking for
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>JARSIGNER_COMMAND</name> =<init> <expr>"jarsigner"</expr></init></decl>;</decl_stmt>

    <comment type="line">// CheckStyle:VisibilityModifier ON</comment>

    <comment type="javadoc">/**
     * redirector used to talk to the jarsigner program
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>RedirectorElement</name></type> <name>redirector</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Java declarations -J-Dname=value
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Environment</name></type> <name>sysProperties</name> =<init> <expr>new <call><name>Environment</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * error string for unit test verification: {@value}
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ERROR_NO_SOURCE</name> =<init> <expr>"jar must be set through jar attribute "
            + "or nested filesets"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Path holding all non-filesets of filesystem resources we want to sign.
     *
     * @since Ant 1.7
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Path</name></type> <name>path</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The executable to use instead of jarsigner.
     *
     * @since Ant 1.8.0
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>executable</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Set the maximum memory to be used by the jarsigner process
     *
     * @param max a string indicating the maximum memory according to the JVM
     *            conventions (e.g. 128m is 128 Megabytes)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMaxmemory</name><parameter_list>(<param><decl><type><name>String</name></type> <name>max</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>maxMemory</name> = <name>max</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * the jar file to sign; required
     *
     * @param jar the jar file to sign
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setJar</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>File</name></type> <name>jar</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>jar</name></name> = <name>jar</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * the alias to sign under; required
     *
     * @param alias the alias to sign under
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAlias</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>alias</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>alias</name></name> = <name>alias</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * keystore location; required
     *
     * @param keystore the keystore location
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setKeystore</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>keystore</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>keystore</name></name> = <name>keystore</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * password for keystore integrity; required
     *
     * @param storepass the password for the keystore
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setStorepass</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>storepass</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>storepass</name></name> = <name>storepass</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * keystore type; optional
     *
     * @param storetype the keystore type
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setStoretype</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>storetype</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>storetype</name></name> = <name>storetype</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * password for private key (if different); optional
     *
     * @param keypass the password for the key (if different)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setKeypass</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>keypass</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>keypass</name></name> = <name>keypass</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Enable verbose output when signing ; optional: default false
     *
     * @param verbose if true enable verbose output
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setVerbose</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>verbose</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>verbose</name></name> = <name>verbose</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * do strict checking
     * @since Ant 1.9.1
     * @param strict
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setStrict</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>strict</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>strict</name></name> = <name>strict</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a set of files to sign
     *
     * @param set a set of files to sign
     * @since Ant 1.4
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addFileset</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>FileSet</name></type> <name>set</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>filesets</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a system property.
     *
     * @param sysp system property.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addSysproperty</name><parameter_list>(<param><decl><type><name><name>Environment</name>.<name>Variable</name></name></type> <name>sysp</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>sysProperties</name>.<name>addVariable</name></name><argument_list>(<argument><expr><name>sysp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a path of files to sign.
     *
     * @return a path of files to sign.
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>Path</name></type> <name>createPath</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>path</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>path</name> = new <call><name>Path</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><call><name><name>path</name>.<name>createPath</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * init processing logic; this is retained through our execution(s)
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>beginExecution</name><parameter_list>()</parameter_list> <block>{

        <expr_stmt><expr><name>redirector</name> = <call><name>createRedirector</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * any cleanup logic
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>endExecution</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>redirector</name> = <name>null</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Create the redirector to use, if any.
     *
     * @return a configured RedirectorElement.
     */</comment>
    <function><type><specifier>private</specifier> <name>RedirectorElement</name></type> <name>createRedirector</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>RedirectorElement</name></type> <name>result</name> =<init> <expr>new <call><name>RedirectorElement</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>storepass</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>StringBuffer</name></type> <name>input</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>(<argument><expr><name>storepass</name></expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr>'\n'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>keypass</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>input</name>.<name>append</name></name><argument_list>(<argument><expr><name>keypass</name></expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr>'\n'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>result</name>.<name>setInputString</name></name><argument_list>(<argument><expr><call><name><name>input</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>result</name>.<name>setLogInputString</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// Try to avoid showing password prompts on log output, as they would be confusing.</comment>
            <decl_stmt><decl><type><name>LineContainsRegExp</name></type> <name>filter</name> =<init> <expr>new <call><name>LineContainsRegExp</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>RegularExpression</name></type> <name>rx</name> =<init> <expr>new <call><name>RegularExpression</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// TODO only handles English locale, not ja or zh_CN</comment>
            <expr_stmt><expr><call><name><name>rx</name>.<name>setPattern</name></name><argument_list>(<argument><expr>"^(Enter Passphrase for keystore: |Enter key password for .+: )$"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>filter</name>.<name>addConfiguredRegexp</name></name><argument_list>(<argument><expr><name>rx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>filter</name>.<name>setNegate</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>result</name>.<name>createErrorFilterChain</name></name><argument_list>()</argument_list></call>.<call><name>addLineContainsRegExp</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * get the redirector. Non-null between invocations of
     * {@link #beginExecution()} and {@link #endExecution()}
     * @return a redirector or null
     */</comment>
    <function><type><specifier>public</specifier> <name>RedirectorElement</name></type> <name>getRedirector</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>redirector</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the actual executable command to invoke, instead of the binary
     * &lt;code&gt;jarsigner&lt;/code&gt; found in Ant's JDK.
     * @param executable the command to invoke.
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setExecutable</name><parameter_list>(<param><decl><type><name>String</name></type> <name>executable</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>executable</name></name> = <name>executable</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * these are options common to signing and verifying
     * @param cmd  command to configure
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setCommonOptions</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>ExecTask</name></type> <name>cmd</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>maxMemory</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>addValue</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr>"-J-Xmx" + <name>maxMemory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>verbose</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>addValue</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr>"-verbose"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>strict</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>addValue</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr>"-strict"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">//now patch in all system properties</comment>
        <for>for (<init><decl><type><name><name>Environment</name>.<name>Variable</name></name></type> <name>variable</name> :<range> <expr><call><name><name>sysProperties</name>.<name>getVariablesVector</name></name><argument_list>()</argument_list></call></expr></range></decl></init>) <block>{
            <expr_stmt><expr><call><name>declareSysProperty</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>variable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     *
     * @param cmd command to configure
     * @param property property to set
     * @throws BuildException if the property is not correctly defined.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>declareSysProperty</name><parameter_list>(
        <param><decl><type><name>ExecTask</name></type> <name>cmd</name></decl></param>, <param><decl><type><name><name>Environment</name>.<name>Variable</name></name></type> <name>property</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>addValue</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr>"-J-D" + <call><name><name>property</name>.<name>getContent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * bind to a keystore if the attributes are there
     * @param cmd command to configure
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>bindToKeystore</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>ExecTask</name></type> <name>cmd</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>null</name> != <name>keystore</name></expr>)</condition><then> <block>{
            <comment type="line">// is the keystore a file</comment>
            <expr_stmt><expr><call><name>addValue</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr>"-keystore"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>loc</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>File</name></type> <name>keystoreFile</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>resolveFile</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>keystoreFile</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>loc</name> = <call><name><name>keystoreFile</name>.<name>getPath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <comment type="line">// must be a URL - just pass as is</comment>
                <expr_stmt><expr><name>loc</name> = <name>keystore</name></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><call><name>addValue</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>null</name> != <name>storetype</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>addValue</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr>"-storetype"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>addValue</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>storetype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * create the jarsigner executable task
     * @return a task set up with the executable of jarsigner, failonerror=true
     * and bound to our redirector
     */</comment>
    <function><type><specifier>protected</specifier> <name>ExecTask</name></type> <name>createJarSigner</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>ExecTask</name></type> <name>cmd</name> =<init> <expr>new <call><name>ExecTask</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>executable</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>cmd</name>.<name>setExecutable</name></name><argument_list>(<argument><expr><call><name><name>JavaEnvUtils</name>.<name>getJdkExecutable</name></name><argument_list>(<argument><expr><name>JARSIGNER_COMMAND</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>cmd</name>.<name>setExecutable</name></name><argument_list>(<argument><expr><name>executable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><call><name><name>cmd</name>.<name>setTaskType</name></name><argument_list>(<argument><expr><name>JARSIGNER_COMMAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cmd</name>.<name>setFailonerror</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cmd</name>.<name>addConfiguredRedirector</name></name><argument_list>(<argument><expr><name>redirector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>cmd</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * clone our filesets vector, and patch in the jar attribute as a new
     * fileset, if is defined
     * @return a vector of FileSet instances
     */</comment>
    <function><type><specifier>protected</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>FileSet</name></argument>&gt;</argument_list></name></type> <name>createUnifiedSources</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><annotation>@<name>SuppressWarnings</name><argument_list>("unchecked")</argument_list></annotation>
        <name><name>Vector</name><argument_list>&lt;<argument><name>FileSet</name></argument>&gt;</argument_list></name></type> <name>sources</name> =<init> <expr>(<name><name>Vector</name><argument_list>&lt;<argument><name>FileSet</name></argument>&gt;</argument_list></name>) <call><name><name>filesets</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>jar</name> != <name>null</name></expr>)</condition><then> <block>{
            <comment type="line">//we create a fileset with the source file.</comment>
            <comment type="line">//this lets us combine our logic for handling output directories,</comment>
            <comment type="line">//mapping etc.</comment>
            <decl_stmt><decl><type><name>FileSet</name></type> <name>sourceJar</name> =<init> <expr>new <call><name>FileSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>sourceJar</name>.<name>setProject</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sourceJar</name>.<name>setFile</name></name><argument_list>(<argument><expr><name>jar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sourceJar</name>.<name>setDir</name></name><argument_list>(<argument><expr><call><name><name>jar</name>.<name>getParentFile</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sources</name>.<name>add</name></name><argument_list>(<argument><expr><name>sourceJar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>sources</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * clone our path and add all explicitly specified FileSets as
     * well, patch in the jar attribute as a new fileset if it is
     * defined.
     * @return a path that contains all files to sign
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>protected</specifier> <name>Path</name></type> <name>createUnifiedSourcePath</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Path</name></type> <name>p</name> =<init> <expr><name>path</name> == <name>null</name> ? new <call><name>Path</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> : (<name>Path</name>) <call><name><name>path</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>FileSet</name></type> <name>fileSet</name> :<range> <expr><call><name>createUnifiedSources</name><argument_list>()</argument_list></call></expr></range></decl></init>) <block>{
            <expr_stmt><expr><call><name><name>p</name>.<name>add</name></name><argument_list>(<argument><expr><name>fileSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>p</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Has either a path or a fileset been specified?
     * @return true if a path or fileset has been specified.
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>hasResources</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>path</name> != <name>null</name> || <call><name><name>filesets</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 0</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * add a value argument to a command
     * @param cmd command to manipulate
     * @param value value to add
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>addValue</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>ExecTask</name></type> <name>cmd</name></decl></param>, <param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>cmd</name>.<name>createArg</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
