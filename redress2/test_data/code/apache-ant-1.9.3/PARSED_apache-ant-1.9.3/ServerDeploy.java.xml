<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\j2ee\ServerDeploy.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>j2ee</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>

<comment type="javadoc">/**
 *  Controls hot deployment tools for J2EE servers.
 *
 *  This class is used as a framework for the creation of vendor specific
 *  hot deployment tools.
 *
 *  @see org.apache.tools.ant.taskdefs.optional.j2ee.HotDeploymentTool
 *  @see org.apache.tools.ant.taskdefs.optional.j2ee.AbstractHotDeploymentTool
 *  @see org.apache.tools.ant.taskdefs.optional.j2ee.GenericHotDeploymentTool
 *  @see org.apache.tools.ant.taskdefs.optional.j2ee.WebLogicHotDeploymentTool
 */</comment>
<class><specifier>public</specifier> class <name>ServerDeploy</name> <super><extends>extends <name>Task</name></extends></super> <block>{
    <comment type="javadoc">/** The action to be performed.  IE: "deploy", "delete", etc... **/</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>action</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The source (fully-qualified path) to the component being deployed **/</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>source</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The vendor specific tool for deploying the component **/</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Vector</name></type> <name>vendorTools</name> =<init> <expr>new <call><name>Vector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">///////////////////////////////////////////////////////////////////////////</comment>
    <comment type="line">//</comment>
    <comment type="line">// Place vendor specific tool creations here.</comment>
    <comment type="line">//</comment>
    <comment type="line">///////////////////////////////////////////////////////////////////////////</comment>

    <comment type="javadoc">/**
     *  Creates a generic deployment tool.
     *  &lt;p&gt;Ant calls this method on creation to handle embedded "generic" elements
     *  in the ServerDeploy task.
     *  @param tool An instance of GenericHotDeployment tool, passed in by Ant.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addGeneric</name><parameter_list>(<param><decl><type><name>GenericHotDeploymentTool</name></type> <name>tool</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>tool</name>.<name>setTask</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vendorTools</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>tool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     *  Creates a WebLogic deployment tool, for deployment to WebLogic servers.
     *  &lt;p&gt;Ant calls this method on creation to handle embedded "weblogic" elements
     *  in the ServerDeploy task.
     *  @param tool An instance of WebLogicHotDeployment tool, passed in by Ant.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addWeblogic</name><parameter_list>(<param><decl><type><name>WebLogicHotDeploymentTool</name></type> <name>tool</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>tool</name>.<name>setTask</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vendorTools</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>tool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     *  Creates a JOnAS deployment tool, for deployment to JOnAS servers.
     *  &lt;p&gt;Ant calls this method on creation to handle embedded "jonas" elements
     *  in the ServerDeploy task.
     *  @param tool An instance of JonasHotDeployment tool, passed in by Ant.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addJonas</name><parameter_list>(<param><decl><type><name>JonasHotDeploymentTool</name></type> <name>tool</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>tool</name>.<name>setTask</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vendorTools</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>tool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="line">///////////////////////////////////////////////////////////////////////////</comment>
    <comment type="line">//</comment>
    <comment type="line">// Execute method</comment>
    <comment type="line">//</comment>
    <comment type="line">///////////////////////////////////////////////////////////////////////////</comment>

    <comment type="javadoc">/**
     *  Execute the task.
     *  &lt;p&gt;This method calls the deploy() method on each of the vendor-specific tools
     *  in the &lt;code&gt;vendorTools&lt;/code&gt; collection.  This performs the actual
     *  process of deployment on each tool.
     *  @exception org.apache.tools.ant.BuildException if the attributes
     *  are invalid or incomplete, or a failure occurs in the deployment process.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <for>for (<init><decl><type><name>Enumeration</name></type> <name>e</name> =<init> <expr><call><name><name>vendorTools</name>.<name>elements</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init>
             <condition><expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
            <decl_stmt><decl><type><name>HotDeploymentTool</name></type> <name>tool</name> =<init> <expr>(<name>HotDeploymentTool</name>) <call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>tool</name>.<name>validateAttributes</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>tool</name>.<name>deploy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <comment type="line">///////////////////////////////////////////////////////////////////////////</comment>
    <comment type="line">//</comment>
    <comment type="line">// Set/get methods</comment>
    <comment type="line">//</comment>
    <comment type="line">///////////////////////////////////////////////////////////////////////////</comment>

    <comment type="javadoc">/**
     *  Returns the action field.
     *  @return A string representing the "action" attribute.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getAction</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>action</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     *  The action to be performed, usually "deploy"; required.
     *   Some tools support additional actions, such as "delete", "list", "undeploy", "update"...
     *  @param action A String representing the "action" attribute.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAction</name><parameter_list>(<param><decl><type><name>String</name></type> <name>action</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>action</name></name> = <name>action</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     *  Returns the source field (the path/filename of the component to be
     *  deployed.
     *  @return A File object representing the "source" attribute.
     */</comment>
    <function><type><specifier>public</specifier> <name>File</name></type> <name>getSource</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>source</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     *  The filename of the component to be deployed; optional
     *  depending upon the tool and the action.
     *  @param source String representing the "source" attribute.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSource</name><parameter_list>(<param><decl><type><name>File</name></type> <name>source</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>source</name></name> = <name>source</name></expr>;</expr_stmt>
    }</block></function>
}</block></class>

</unit>
