<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\DefaultLoggerTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>PrintWriter</name></name>;</import>
<import>import <name><name>junit</name>.<name>framework</name>.<name>TestCase</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>StringUtils</name></name>;</import>

<class><specifier>public</specifier> class <name>DefaultLoggerTest</name> <super><extends>extends <name>TestCase</name></extends></super> <block>{

    <constructor><specifier>public</specifier> <name>DefaultLoggerTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>n</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>msg</name><parameter_list>(<param><decl><type><name>Throwable</name></type> <name>error</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>verbose</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>m</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>DefaultLogger</name>.<name>throwableMessage</name></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>verbose</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>m</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testThrowableMessage</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{ <comment type="line">// #43398</comment>
        <decl_stmt><decl><type><name>BuildException</name></type> <name>be</name> =<init> <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"oops"</expr></argument>, <argument><expr>new <call><name>Location</name><argument_list>(<argument><expr>"build.xml"</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(
                <argument><expr>"build.xml:1: oops" + <name><name>StringUtils</name>.<name>LINE_SEP</name></name></expr></argument>,
                <argument><expr><call><name>msg</name><argument_list>(<argument><expr><name>be</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>be</name> = <call><name><name>ProjectHelper</name>.<name>addLocationToBuildException</name></name><argument_list>(<argument><expr><name>be</name></expr></argument>, <argument><expr>new <call><name>Location</name><argument_list>(<argument><expr>"build.xml"</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(
                <argument><expr>"build.xml:2: The following error occurred while executing this line:" + <name><name>StringUtils</name>.<name>LINE_SEP</name></name> +
                "build.xml:1: oops" + <name><name>StringUtils</name>.<name>LINE_SEP</name></name></expr></argument>,
                <argument><expr><call><name>msg</name><argument_list>(<argument><expr><name>be</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>be</name> = <call><name><name>ProjectHelper</name>.<name>addLocationToBuildException</name></name><argument_list>(<argument><expr><name>be</name></expr></argument>, <argument><expr>new <call><name>Location</name><argument_list>(<argument><expr>"build.xml"</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(
                <argument><expr>"build.xml:3: The following error occurred while executing this line:" + <name><name>StringUtils</name>.<name>LINE_SEP</name></name> +
                "build.xml:2: The following error occurred while executing this line:" + <name><name>StringUtils</name>.<name>LINE_SEP</name></name> +
                "build.xml:1: oops" + <name><name>StringUtils</name>.<name>LINE_SEP</name></name></expr></argument>,
                <argument><expr><call><name>msg</name><argument_list>(<argument><expr><name>be</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Exception</name></type> <name>x</name> =<init> <expr>new <class><super><name>Exception</name></super><argument_list>(<argument><expr>"problem"</expr></argument>)</argument_list> <block>{
            <function><type><specifier>public</specifier> <name>void</name></type> <name>printStackTrace</name><parameter_list>(<param><decl><type><name>PrintWriter</name></type> <name>w</name></decl></param>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>w</name>.<name>println</name></name><argument_list>(<argument><expr>"problem"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>w</name>.<name>println</name></name><argument_list>(<argument><expr>"  at p.C.m"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(
                <argument><expr>"problem" + <name><name>StringUtils</name>.<name>LINE_SEP</name></name> +
                "  at p.C.m" + <name><name>StringUtils</name>.<name>LINE_SEP</name></name></expr></argument>,
                <argument><expr><call><name>msg</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>be</name> = new <call><name>BuildException</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr>new <call><name>Location</name><argument_list>(<argument><expr>"build.xml"</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(
                <argument><expr>"build.xml:1: problem" + <name><name>StringUtils</name>.<name>LINE_SEP</name></name> +
                "  at p.C.m" + <name><name>StringUtils</name>.<name>LINE_SEP</name></name></expr></argument>,
                <argument><expr><call><name>msg</name><argument_list>(<argument><expr><name>be</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>be</name> = <call><name><name>ProjectHelper</name>.<name>addLocationToBuildException</name></name><argument_list>(<argument><expr><name>be</name></expr></argument>, <argument><expr>new <call><name>Location</name><argument_list>(<argument><expr>"build.xml"</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(
                <argument><expr>"build.xml:2: The following error occurred while executing this line:" + <name><name>StringUtils</name>.<name>LINE_SEP</name></name> +
                "build.xml:1: problem" + <name><name>StringUtils</name>.<name>LINE_SEP</name></name> +
                "  at p.C.m" + <name><name>StringUtils</name>.<name>LINE_SEP</name></name></expr></argument>,
                <argument><expr><call><name>msg</name><argument_list>(<argument><expr><name>be</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
