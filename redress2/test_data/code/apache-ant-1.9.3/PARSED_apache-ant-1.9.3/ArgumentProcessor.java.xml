<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\ArgumentProcessor.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>PrintStream</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<comment type="javadoc">/**
 * Processor of arguments of the command line.
 * &lt;p&gt;
 * Arguments supported by third party code should not conflict with Ant core
 * ones. It is then recommended to chose specific 'enough' argument name,
 * avoiding for instance one letter arguments. By the way, if there any
 * conflict, Ant will take precedence.
 * 
 * @since 1.9
 */</comment>
<class type="interface"><specifier>public</specifier> interface <name>ArgumentProcessor</name> <block>{

    <comment type="javadoc">/**
     * Read the arguments from the command line at the specified position
     * &lt;p&gt;
     * If the argument is not supported, returns -1. Else, the position of the
     * first argument not supported.
     */</comment>
    <function_decl><type><name>int</name></type> <name>readArguments</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></param>, <param><decl><type><name>int</name></type> <name>pos</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="javadoc">/**
     * If some arguments matched with {@link #readArguments(String[], int)},
     * this method is called after all arguments were parsed. Returns
     * &lt;code&gt;true&lt;/code&gt; if Ant should stop there, ie the build file not parsed
     * and the project should not be executed.
     */</comment>
    <function_decl><type><name>boolean</name></type> <name>handleArg</name><parameter_list>(<param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>args</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="javadoc">/**
     * If some arguments matched with {@link #readArguments(String[], int)},
     * this method is called just before the project being configured
     */</comment>
    <function_decl><type><name>void</name></type> <name>prepareConfigure</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>args</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="javadoc">/**
     * Handle the arguments with {@link #readArguments(String[], int)}, just
     * after the project being configured. Returns &lt;code&gt;true&lt;/code&gt; if Ant
     * should stop there, ie the build file not parsed and the project should
     * not be executed.
     */</comment>
    <function_decl><type><name>boolean</name></type> <name>handleArg</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>arg</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="javadoc">/**
     * Print the usage of the supported arguments
     * 
     * @see org.apache.tools.ant.Main.printUsage()
     */</comment>
    <function_decl><type><name>void</name></type> <name>printUsage</name><parameter_list>(<param><decl><type><name>PrintStream</name></type> <name>writer</name></decl></param>)</parameter_list>;</function_decl>

}</block></class>
</unit>
