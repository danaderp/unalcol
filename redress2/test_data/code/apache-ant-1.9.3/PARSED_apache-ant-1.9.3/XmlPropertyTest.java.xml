<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\taskdefs\XmlPropertyTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileFilter</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Hashtable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Properties</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildFileTest</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Path</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>

<comment type="javadoc">/**
 */</comment>
<class><specifier>public</specifier> class <name>XmlPropertyTest</name> <super><extends>extends <name>BuildFileTest</name></extends></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>FileUtils</name></type> <name>FILE_UTILS</name> =<init> <expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>XmlPropertyTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr>"src/etc/testcases/taskdefs/xmlproperty.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFile</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>testProperties</name><argument_list>(<argument><expr>"test"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testResource</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>testProperties</name><argument_list>(<argument><expr>"testResource"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>testProperties</name><parameter_list>(<param><decl><type><name>String</name></type> <name>target</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"true"</expr></argument>, <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getProperty</name><argument_list>(<argument><expr>"root-tag(myattr)"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Text"</expr></argument>, <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getProperty</name><argument_list>(<argument><expr>"root-tag.inner-tag"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"val"</expr></argument>,
                     <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getProperty</name><argument_list>(<argument><expr>"root-tag.inner-tag(someattr)"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"false"</expr></argument>, <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getProperty</name><argument_list>(<argument><expr>"root-tag.a2.a3.a4"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"CDATA failed"</expr></argument>,
            <argument><expr>"&lt;test&gt;"</expr></argument>, <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getProperty</name><argument_list>(<argument><expr>"root-tag.cdatatag"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testDTD</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testdtd"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Text"</expr></argument>, <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getProperty</name><argument_list>(<argument><expr>"root-tag.inner-tag"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNone</name> <parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>doTest</name><argument_list>(<argument><expr>"testNone"</expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testKeeproot</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>doTest</name><argument_list>(<argument><expr>"testKeeproot"</expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testCollapse</name> <parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>doTest</name><argument_list>(<argument><expr>"testCollapse"</expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testSemantic</name> <parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>doTest</name><argument_list>(<argument><expr>"testSemantic"</expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testKeeprootCollapse</name> <parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>doTest</name><argument_list>(<argument><expr>"testKeeprootCollapse"</expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testKeeprootSemantic</name> <parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>doTest</name><argument_list>(<argument><expr>"testKeeprootSemantic"</expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testCollapseSemantic</name> <parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>doTest</name><argument_list>(<argument><expr>"testCollapseSemantic"</expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testKeeprootCollapseSemantic</name> <parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>doTest</name><argument_list>(<argument><expr>"testKeeprootCollapseSemantic"</expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testInclude</name> <parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>doTest</name><argument_list>(<argument><expr>"testInclude"</expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testSemanticInclude</name> <parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>doTest</name><argument_list>(<argument><expr>"testSemanticInclude"</expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testSemanticLocal</name> <parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>doTest</name><argument_list>(<argument><expr>"testSemanticInclude"</expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNeedsCatalog</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testneedscat"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"true"</expr></argument>, <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getProperty</name><argument_list>(<argument><expr>"skinconfig.foo"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Actually run a test, finding all input files (and corresponding
     * goldfile)
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>doTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>msg</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>keepRoot</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>collapse</name></decl></param>,
                        <param><decl><type><name>boolean</name></type> <name>semantic</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>include</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>localRoot</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Enumeration</name></type> <name>iter</name> =<init>
            <expr><call><name>getFiles</name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"src/etc/testcases/taskdefs/xmlproperty/inputs"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>iter</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>File</name></type> <name>inputFile</name> =<init> <expr>(<name>File</name>) <call><name><name>iter</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// What's the working directory?  If local, then its the</comment>
            <comment type="line">// folder of the input file.  Otherwise, its the "current" dir..</comment>
            <decl_stmt><decl><type><name>File</name></type> <name>workingDir</name></decl>;</decl_stmt>
            <if>if <condition>( <expr><name>localRoot</name></expr> )</condition><then> <block>{
                <expr_stmt><expr><name>workingDir</name> = <call><name><name>inputFile</name>.<name>getParentFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>workingDir</name> = <call><name><name>FILE_UTILS</name>.<name>resolveFile</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr>"."</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

            <try>try <block>{

                <decl_stmt><decl><type><name>File</name></type> <name>propertyFile</name> =<init> <expr><call><name>getGoldfile</name><argument_list>(<argument><expr><name>inputFile</name></expr></argument>, <argument><expr><name>keepRoot</name></expr></argument>, <argument><expr><name>collapse</name></expr></argument>,
                                                <argument><expr><name>semantic</name></expr></argument>, <argument><expr><name>include</name></expr></argument>, <argument><expr><name>localRoot</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr>!<call><name><name>propertyFile</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
<comment type="line">//                    System.out.println("Skipping as "</comment>
<comment type="line">//                                       + propertyFile.getAbsolutePath()</comment>
<comment type="line">//                                       + ") doesn't exist.");</comment>
                    <continue>continue;</continue>
                }</block></then></if>

                <comment type="line">//                System.out.println(msg + " (" + propertyFile.getName() + ") in (" + workingDir + ")");</comment>

                <decl_stmt><decl><type><name>Project</name></type> <name>p</name> =<init> <expr>new <call><name>Project</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name>XmlProperty</name></type> <name>xmlproperty</name> =<init> <expr>new <call><name>XmlProperty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>xmlproperty</name>.<name>setProject</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>xmlproperty</name>.<name>setFile</name></name><argument_list>(<argument><expr><name>inputFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>xmlproperty</name>.<name>setKeeproot</name></name><argument_list>(<argument><expr><name>keepRoot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>xmlproperty</name>.<name>setCollapseAttributes</name></name><argument_list>(<argument><expr><name>collapse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>xmlproperty</name>.<name>setSemanticAttributes</name></name><argument_list>(<argument><expr><name>semantic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>xmlproperty</name>.<name>setIncludeSemanticAttribute</name></name><argument_list>(<argument><expr><name>include</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>xmlproperty</name>.<name>setRootDirectory</name></name><argument_list>(<argument><expr><name>workingDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Set a property on the project to make sure that loading</comment>
                <comment type="line">// a property with the same name from an xml file will</comment>
                <comment type="line">// *not* change it.</comment>
                <expr_stmt><expr><call><name><name>p</name>.<name>setNewProperty</name></name><argument_list>(<argument><expr>"override.property.test"</expr></argument>, <argument><expr>"foo"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>xmlproperty</name>.<name>execute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>Properties</name></type> <name>props</name> =<init> <expr>new <call><name>Properties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>props</name>.<name>load</name></name><argument_list>(<argument><expr>new <call><name>FileInputStream</name><argument_list>(<argument><expr><name>propertyFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">//printProperties(p.getProperties());</comment>

                <expr_stmt><expr><call><name>ensureProperties</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>inputFile</name></expr></argument>, <argument><expr><name>workingDir</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>ensureReferences</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>inputFile</name></expr></argument>, <argument><expr><call><name><name>p</name>.<name>getReferences</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ex</name></decl></param>) <block>{
                <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><call><name><name>ex</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></while>
    }</block></function>

    <comment type="javadoc">/**
     * Make sure every property loaded from the goldfile was also
     * read from the XmlProperty.  We could try and test the other way,
     * but some other properties may get set in the XmlProperty due
     * to generic Project/Task configuration.
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>ensureProperties</name> <parameter_list>(<param><decl><type><name>String</name></type> <name>msg</name></decl></param>, <param><decl><type><name>File</name></type> <name>inputFile</name></decl></param>,
                                          <param><decl><type><name>File</name></type> <name>workingDir</name></decl></param>, <param><decl><type><name>Project</name></type> <name>p</name></decl></param>,
                                          <param><decl><type><name>Properties</name></type> <name>properties</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Hashtable</name></type> <name>xmlproperties</name> =<init> <expr><call><name><name>p</name>.<name>getProperties</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// Every key identified by the Properties must have been loaded.</comment>
        <decl_stmt><decl><type><name>Enumeration</name></type> <name>propertyKeyEnum</name> =<init> <expr><call><name><name>properties</name>.<name>propertyNames</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while<condition>(<expr><call><name><name>propertyKeyEnum</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{
            <decl_stmt><decl><type><name>String</name></type> <name>currentKey</name> =<init> <expr><call><name><name>propertyKeyEnum</name>.<name>nextElement</name></name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>assertMsg</name> =<init> <expr><name>msg</name> + "-" + <call><name><name>inputFile</name>.<name>getName</name></name><argument_list>()</argument_list></call>
                + " Key=" + <name>currentKey</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>String</name></type> <name>propertyValue</name> =<init> <expr><call><name><name>properties</name>.<name>getProperty</name></name><argument_list>(<argument><expr><name>currentKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>String</name></type> <name>xmlValue</name> =<init> <expr>(<name>String</name>)<call><name><name>xmlproperties</name>.<name>get</name></name><argument_list>(<argument><expr><name>currentKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>( <expr><call><name><name>propertyValue</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"ID."</expr></argument>)</argument_list></call> == 0</expr> )</condition><then> <block>{
                <comment type="line">// The property is an id's thing -- either a property</comment>
                <comment type="line">// or a path.  We need to make sure</comment>
                <comment type="line">// that the object was created with the given id.</comment>
                <comment type="line">// We don't have an adequate way of testing the actual</comment>
                <comment type="line">// *value* of the Path object, though...</comment>
                <decl_stmt><decl><type><name>String</name></type> <name>id</name> =<init> <expr><name>currentKey</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Object</name></type> <name>obj</name> =<init> <expr><call><name><name>p</name>.<name>getReferences</name></name><argument_list>()</argument_list></call>.<call><name>get</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if>if <condition>( <expr><name>obj</name> == <name>null</name></expr> )</condition><then> <block>{
                    <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><name>assertMsg</name> + " Object ID does not exist."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <comment type="line">// What is the property supposed to be?</comment>
                <expr_stmt><expr><name>propertyValue</name> =
                    <call><name><name>propertyValue</name>.<name>substring</name></name><argument_list>(<argument><expr>3</expr></argument>, <argument><expr><call><name><name>propertyValue</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><call><name><name>propertyValue</name>.<name>equals</name></name><argument_list>(<argument><expr>"path"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>Path</name>)</expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><name>assertMsg</name> + " Path ID is a "
                             + <call><name><name>obj</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>assertMsg</name></expr></argument>, <argument><expr><name>propertyValue</name></expr></argument>, <argument><expr><call><name><name>obj</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>

            }</block></then> <else>else <block>{

                <if>if <condition>(<expr><call><name><name>propertyValue</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"FILE."</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
                    <comment type="line">// The property is the name of a file.  We are testing</comment>
                    <comment type="line">// a location attribute, so we need to resolve the given</comment>
                    <comment type="line">// file name in the provided folder.</comment>
                    <decl_stmt><decl><type><name>String</name></type> <name>fileName</name> =<init>
                        <expr><call><name><name>propertyValue</name>.<name>substring</name></name><argument_list>(<argument><expr>5</expr></argument>, <argument><expr><call><name><name>propertyValue</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>File</name></type> <name>f</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name>workingDir</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>propertyValue</name> = <call><name><name>f</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>assertMsg</name></expr></argument>, <argument><expr><name>propertyValue</name></expr></argument>, <argument><expr><name>xmlValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

        }</block></while>
    }</block></function>

    <comment type="javadoc">/**
     * Debugging method to print the properties in the given hashtable
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>printProperties</name><parameter_list>(<param><decl><type><name>Hashtable</name></type> <name>xmlproperties</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Enumeration</name></type> <name>keyEnum</name> =<init> <expr><call><name><name>xmlproperties</name>.<name>keys</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>keyEnum</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>currentKey</name> =<init> <expr><call><name><name>keyEnum</name>.<name>nextElement</name></name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><name>currentKey</name> + " = "
                               + <call><name><name>xmlproperties</name>.<name>get</name></name><argument_list>(<argument><expr><name>currentKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
    }</block></function>

    <comment type="javadoc">/**
     * Ensure all references loaded by the project are valid.
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>ensureReferences</name> <parameter_list>(<param><decl><type><name>String</name></type> <name>msg</name></decl></param>, <param><decl><type><name>File</name></type> <name>inputFile</name></decl></param>,
                                          <param><decl><type><name>Hashtable</name></type> <name>references</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Enumeration</name></type> <name>referenceKeyEnum</name> =<init> <expr><call><name><name>references</name>.<name>keys</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while<condition>(<expr><call><name><name>referenceKeyEnum</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{
            <decl_stmt><decl><type><name>String</name></type> <name>currentKey</name> =<init> <expr><call><name><name>referenceKeyEnum</name>.<name>nextElement</name></name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Object</name></type> <name>currentValue</name> =<init> <expr><call><name><name>references</name>.<name>get</name></name><argument_list>(<argument><expr><name>currentKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>currentValue</name> <name>instanceof</name> <name>Path</name></expr>)</condition><then> <block>{
            }</block></then> <else>else <if>if <condition>(<expr><name>currentValue</name> <name>instanceof</name> <name>String</name></expr>)</condition><then> <block>{
            }</block></then> <else>else <block>{
                <if>if<condition>( <expr>! <call><name><name>currentKey</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"ant."</expr></argument>)</argument_list></call></expr> )</condition><then> <block>{
                    <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><name>msg</name> + "-" + <call><name><name>inputFile</name>.<name>getName</name></name><argument_list>()</argument_list></call> + " Key="
                         + <name>currentKey</name> + " is not a recognized type."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></else></if></else></if>
        }</block></while>
    }</block></function>

    <comment type="javadoc">/**
     * Munge the name of the input file to find an appropriate goldfile,
     * based on hardwired naming conventions.
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>File</name></type> <name>getGoldfile</name> <parameter_list>(<param><decl><type><name>File</name></type> <name>input</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>keepRoot</name></decl></param>,
                                     <param><decl><type><name>boolean</name></type> <name>collapse</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>semantic</name></decl></param>,
                                     <param><decl><type><name>boolean</name></type> <name>include</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>localRoot</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// Substitute .xml with .properties</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>baseName</name> =<init> <expr><call><name><name>input</name>.<name>getName</name></name><argument_list>()</argument_list></call>.<call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>baseName</name>.<name>endsWith</name></name><argument_list>(<argument><expr>".xml"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>baseName</name> = <call><name><name>baseName</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>baseName</name>.<name>length</name></name><argument_list>()</argument_list></call> - 4</expr></argument>)</argument_list></call>
                + ".properties"</expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name>File</name></type> <name>dir</name> =<init> <expr><call><name><name>input</name>.<name>getParentFile</name></name><argument_list>()</argument_list></call>.<call><name>getParentFile</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>goldFileFolder</name> =<init> <expr>"goldfiles/"</expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>keepRoot</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>goldFileFolder</name> += "keeproot-"</expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>goldFileFolder</name> += "nokeeproot-"</expr>;</expr_stmt>
        }</block></else></if>

        <if>if <condition>(<expr><name>semantic</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>goldFileFolder</name> += "semantic-"</expr>;</expr_stmt>
            <if>if <condition>(<expr><name>include</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>goldFileFolder</name> += "include-"</expr>;</expr_stmt>
            }</block></then></if>
        }</block></then> <else>else <block>{
            <if>if <condition>(<expr><name>collapse</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>goldFileFolder</name> += "collapse-"</expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>goldFileFolder</name> += "nocollapse-"</expr>;</expr_stmt>
            }</block></else></if>
        }</block></else></if>

        <return>return <expr>new <call><name>File</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>goldFileFolder</name> + <name>baseName</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Retrieve a list of xml files in the specified folder
     * and below.
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>Enumeration</name></type> <name>getFiles</name> <parameter_list>(<param><decl><type><specifier>final</specifier> <name>File</name></type> <name>startingDir</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Vector</name></type> <name>result</name> =<init> <expr>new <call><name>Vector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>getFiles</name><argument_list>(<argument><expr><name>startingDir</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>result</name>.<name>elements</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Collect a list of xml files in the specified folder
     * and below.
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>getFiles</name> <parameter_list>(<param><decl><type><specifier>final</specifier> <name>File</name></type> <name>startingDir</name></decl></param>, <param><decl><type><name>Vector</name></type> <name>collect</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>FileFilter</name></type> <name>filter</name> =<init> <expr>new <class><super><name>FileFilter</name></super><argument_list>()</argument_list> <block>{
            <function><type><specifier>public</specifier> <name>boolean</name></type> <name>accept</name> <parameter_list>(<param><decl><type><name>File</name></type> <name>file</name></decl></param>)</parameter_list> <block>{
                <if>if <condition>(<expr><call><name><name>file</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <return>return <expr>true</expr>;</return>
                }</block></then> <else>else <block>{
                    <return>return <expr>(<call><name><name>file</name>.<name>getPath</name></name><argument_list>()</argument_list></call>.<call><name>indexOf</name><argument_list>(<argument><expr>"taskdefs"</expr></argument>)</argument_list></call> &gt; 0 &amp;&amp;
                            <call><name><name>file</name>.<name>getPath</name></name><argument_list>()</argument_list></call>.<call><name>toLowerCase</name><argument_list>()</argument_list></call>.<call><name>endsWith</name><argument_list>(<argument><expr>".xml"</expr></argument>)</argument_list></call> )</expr>;</return>
                }</block></else></if>
            }</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>File</name><index>[]</index></type> <name>files</name> =<init> <expr><call><name><name>startingDir</name>.<name>listFiles</name></name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init><condition><expr><name>i</name>&lt;<name><name>files</name>.<name>length</name></name></expr>;</condition><incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>File</name></type> <name>f</name> =<init> <expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<call><name><name>f</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>collect</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>getFiles</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>collect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></for>
    }</block></function>
}</block></class>
</unit>
