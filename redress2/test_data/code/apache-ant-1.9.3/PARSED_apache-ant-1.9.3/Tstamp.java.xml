<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\Tstamp.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>text</name>.<name>SimpleDateFormat</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Calendar</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Date</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Locale</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>NoSuchElementException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>StringTokenizer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>TimeZone</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Location</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>EnumeratedAttribute</name></name>;</import>

<comment type="javadoc">/**
 * Sets properties to the current time, or offsets from the current time.
 * The default properties are TSTAMP, DSTAMP and TODAY;
 *
 * @since Ant 1.1
 * @ant.task category="utility"
 */</comment>
<class><specifier>public</specifier> class <name>Tstamp</name> <super><extends>extends <name>Task</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>Vector</name></type> <name>customFormats</name> =<init> <expr>new <call><name>Vector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>prefix</name> =<init> <expr>""</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Set a prefix for the properties. If the prefix does not end with a "."
     * one is automatically added.
     * @param prefix the prefix to use.
     * @since Ant 1.5
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPrefix</name><parameter_list>(<param><decl><type><name>String</name></type> <name>prefix</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>prefix</name></name> = <name>prefix</name></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>prefix</name>.<name>endsWith</name></name><argument_list>(<argument><expr>"."</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>prefix</name></name> += "."</expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * create the timestamps. Custom ones are done before
     * the standard ones, to get their retaliation in early.
     * @throws BuildException on error.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <try>try <block>{
            <decl_stmt><decl><type><name>Date</name></type> <name>d</name> =<init> <expr>new <call><name>Date</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>Enumeration</name></type> <name>i</name> =<init> <expr><call><name><name>customFormats</name>.<name>elements</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>i</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <decl_stmt><decl><type><name>CustomFormat</name></type> <name>cts</name> =<init> <expr>(<name>CustomFormat</name>) <call><name><name>i</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>cts</name>.<name>execute</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>

            <decl_stmt><decl><type><name>SimpleDateFormat</name></type> <name>dstamp</name> =<init> <expr>new <call><name>SimpleDateFormat</name> <argument_list>(<argument><expr>"yyyyMMdd"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>setProperty</name><argument_list>(<argument><expr>"DSTAMP"</expr></argument>, <argument><expr><call><name><name>dstamp</name>.<name>format</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>SimpleDateFormat</name></type> <name>tstamp</name> =<init> <expr>new <call><name>SimpleDateFormat</name> <argument_list>(<argument><expr>"HHmm"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>setProperty</name><argument_list>(<argument><expr>"TSTAMP"</expr></argument>, <argument><expr><call><name><name>tstamp</name>.<name>format</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>SimpleDateFormat</name></type> <name>today</name>
                =<init> <expr>new <call><name>SimpleDateFormat</name> <argument_list>(<argument><expr>"MMMM d yyyy"</expr></argument>, <argument><expr><name><name>Locale</name>.<name>US</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>setProperty</name><argument_list>(<argument><expr>"TODAY"</expr></argument>, <argument><expr><call><name><name>today</name>.<name>format</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * create a custom format with the current prefix.
     * @return a ready to fill-in format
     */</comment>
    <function><type><specifier>public</specifier> <name>CustomFormat</name></type> <name>createFormat</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>CustomFormat</name></type> <name>cts</name> =<init> <expr>new <call><name>CustomFormat</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>customFormats</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>cts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>cts</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * helper that encapsulates prefix logic and property setting
     * policy (i.e. we use setNewProperty instead of setProperty).
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>setProperty</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>, <param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>setNewProperty</name><argument_list>(<argument><expr><name>prefix</name> + <name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * This nested element that allows a property to be set
     * to the current date and time in a given format.
     * The date/time patterns are as defined in the
     * Java SimpleDateFormat class.
     * The format element also allows offsets to be applied to
     * the time to generate different time values.
     * @todo consider refactoring out into a re-usable element.
     */</comment>
    <class><specifier>public</specifier> class <name>CustomFormat</name> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>TimeZone</name></type> <name>timeZone</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>propertyName</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>pattern</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>language</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>country</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>variant</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>offset</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>field</name> =<init> <expr><name><name>Calendar</name>.<name>DATE</name></name></expr></init></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * Create a format
         */</comment>
        <constructor><specifier>public</specifier> <name>CustomFormat</name><parameter_list>()</parameter_list> <block>{
        }</block></constructor>

        <comment type="javadoc">/**
         *  The property to receive the date/time string in the given pattern
         * @param propertyName the name of the property.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setProperty</name><parameter_list>(<param><decl><type><name>String</name></type> <name>propertyName</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>propertyName</name></name> = <name>propertyName</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * The date/time pattern to be used. The values are as
         * defined by the Java SimpleDateFormat class.
         * @param pattern the pattern to use.
         * @see java.text.SimpleDateFormat
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setPattern</name><parameter_list>(<param><decl><type><name>String</name></type> <name>pattern</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>pattern</name></name> = <name>pattern</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * The locale used to create date/time string.
         * The general form is "language, country, variant" but
         * either variant or variant and country may be omitted.
         * For more information please refer to documentation
         * for the java.util.Locale  class.
         * @param locale the locale to use.
         * @see java.util.Locale
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setLocale</name><parameter_list>(<param><decl><type><name>String</name></type> <name>locale</name></decl></param>)</parameter_list> <block>{
            <decl_stmt><decl><type><name>StringTokenizer</name></type> <name>st</name> =<init> <expr>new <call><name>StringTokenizer</name><argument_list>(<argument><expr><name>locale</name></expr></argument>, <argument><expr>" \t\n\r\f,"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <try>try <block>{
                <expr_stmt><expr><name>language</name> = <call><name><name>st</name>.<name>nextToken</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><call><name><name>st</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>country</name> = <call><name><name>st</name>.<name>nextToken</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><call><name><name>st</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>variant</name> = <call><name><name>st</name>.<name>nextToken</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><call><name><name>st</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"bad locale format"</expr></argument>,
                                                      <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                        }</block></then></if>
                    }</block></then></if>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><name>country</name> = ""</expr>;</expr_stmt>
                }</block></else></if>
            }</block> <catch>catch (<param><decl><type><name>NoSuchElementException</name></type> <name>e</name></decl></param>) <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"bad locale format"</expr></argument>, <argument><expr><name>e</name></expr></argument>,
                                         <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></function>

        <comment type="javadoc">/**
         * The timezone to use for displaying time.
         * The values are as defined by the Java TimeZone class.
         * @param id the timezone value.
         * @see java.util.TimeZone
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setTimezone</name><parameter_list>(<param><decl><type><name>String</name></type> <name>id</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name>timeZone</name> = <call><name><name>TimeZone</name>.<name>getTimeZone</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * The numeric offset to the current time.
         * @param offset the offset to use.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setOffset</name><parameter_list>(<param><decl><type><name>int</name></type> <name>offset</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>offset</name></name> = <name>offset</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * Set the unit type (using String).
         * @param unit the unit to use.
         * @deprecated since 1.5.x.
         *             setUnit(String) is deprecated and is replaced with
         *             setUnit(Tstamp.Unit) to make Ant's
         *             Introspection mechanism do the work and also to
         *             encapsulate operations on the unit in its own
         *             class.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setUnit</name><parameter_list>(<param><decl><type><name>String</name></type> <name>unit</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"DEPRECATED - The setUnit(String) method has been deprecated."
                + " Use setUnit(Tstamp.Unit) instead."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Unit</name></type> <name>u</name> =<init> <expr>new <call><name>Unit</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>u</name>.<name>setValue</name></name><argument_list>(<argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>field</name> = <call><name><name>u</name>.<name>getCalendarField</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * The unit of the offset to be applied to the current time.
         * Valid Values are
         * &lt;ul&gt;
         *    &lt;li&gt;millisecond&lt;/li&gt;
         *    &lt;li&gt;second&lt;/li&gt;
         *    &lt;li&gt;minute&lt;/li&gt;
         *    &lt;li&gt;hour&lt;/li&gt;
         *    &lt;li&gt;day&lt;/li&gt;
         *    &lt;li&gt;week&lt;/li&gt;
         *    &lt;li&gt;month&lt;/li&gt;
         *    &lt;li&gt;year&lt;/li&gt;
         * &lt;/ul&gt;
         * The default unit is day.
         * @param unit the unit to use.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setUnit</name><parameter_list>(<param><decl><type><name>Unit</name></type> <name>unit</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name>field</name> = <call><name><name>unit</name>.<name>getCalendarField</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * validate parameter and execute the format.
         * @param project project to set property in.
         * @param date date to use as a starting point.
         * @param location line in file (for errors)
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>, <param><decl><type><name>Date</name></type> <name>date</name></decl></param>, <param><decl><type><name>Location</name></type> <name>location</name></decl></param>)</parameter_list> <block>{
            <if>if <condition>(<expr><name>propertyName</name> == <name>null</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"property attribute must be provided"</expr></argument>,
                                         <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <if>if <condition>(<expr><name>pattern</name> == <name>null</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"pattern attribute must be provided"</expr></argument>,
                                         <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <decl_stmt><decl><type><name>SimpleDateFormat</name></type> <name>sdf</name></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>language</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>sdf</name> = new <call><name>SimpleDateFormat</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><name>variant</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>sdf</name> = new <call><name>SimpleDateFormat</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>,
                                           <argument><expr>new <call><name>Locale</name><argument_list>(<argument><expr><name>language</name></expr></argument>, <argument><expr><name>country</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>sdf</name> = new <call><name>SimpleDateFormat</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>,
                                           <argument><expr>new <call><name>Locale</name><argument_list>(<argument><expr><name>language</name></expr></argument>, <argument><expr><name>country</name></expr></argument>,
                                                      <argument><expr><name>variant</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if></else></if>
            <if>if <condition>(<expr><name>offset</name> != 0</expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>Calendar</name></type> <name>calendar</name> =<init> <expr><call><name><name>Calendar</name>.<name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>calendar</name>.<name>setTime</name></name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>calendar</name>.<name>add</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>date</name> = <call><name><name>calendar</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name>timeZone</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>sdf</name>.<name>setTimeZone</name></name><argument_list>(<argument><expr><name>timeZone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>Tstamp</name>.<name>this</name>.<name>setProperty</name></name><argument_list>(<argument><expr><name>propertyName</name></expr></argument>, <argument><expr><call><name><name>sdf</name>.<name>format</name></name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>

    <comment type="javadoc">/**
     * set of valid units to use for time offsets.
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Unit</name> <super><extends>extends <name>EnumeratedAttribute</name></extends></super> <block>{

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>MILLISECOND</name> =<init> <expr>"millisecond"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SECOND</name> =<init> <expr>"second"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>MINUTE</name> =<init> <expr>"minute"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>HOUR</name> =<init> <expr>"hour"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DAY</name> =<init> <expr>"day"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>WEEK</name> =<init> <expr>"week"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>MONTH</name> =<init> <expr>"month"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>YEAR</name> =<init> <expr>"year"</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name><index>[]</index></type> <name>UNITS</name> =<init> <expr><block>{
                                                <expr><name>MILLISECOND</name></expr>,
                                                <expr><name>SECOND</name></expr>,
                                                <expr><name>MINUTE</name></expr>,
                                                <expr><name>HOUR</name></expr>,
                                                <expr><name>DAY</name></expr>,
                                                <expr><name>WEEK</name></expr>,
                                                <expr><name>MONTH</name></expr>,
                                                <expr><name>YEAR</name></expr>
                                              }</block></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <name>Map</name></type> <name>calendarFields</name> =<init> <expr>new <call><name>HashMap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="javadoc">/** Constructor for Unit enumerated type. */</comment>
        <constructor><specifier>public</specifier> <name>Unit</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>calendarFields</name>.<name>put</name></name><argument_list>(<argument><expr><name>MILLISECOND</name></expr></argument>,
                               <argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>MILLISECOND</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>calendarFields</name>.<name>put</name></name><argument_list>(<argument><expr><name>SECOND</name></expr></argument>, <argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>SECOND</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>calendarFields</name>.<name>put</name></name><argument_list>(<argument><expr><name>MINUTE</name></expr></argument>, <argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>MINUTE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>calendarFields</name>.<name>put</name></name><argument_list>(<argument><expr><name>HOUR</name></expr></argument>, <argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>HOUR_OF_DAY</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>calendarFields</name>.<name>put</name></name><argument_list>(<argument><expr><name>DAY</name></expr></argument>, <argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>DATE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>calendarFields</name>.<name>put</name></name><argument_list>(<argument><expr><name>WEEK</name></expr></argument>, <argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>WEEK_OF_YEAR</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>calendarFields</name>.<name>put</name></name><argument_list>(<argument><expr><name>MONTH</name></expr></argument>, <argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>MONTH</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>calendarFields</name>.<name>put</name></name><argument_list>(<argument><expr><name>YEAR</name></expr></argument>, <argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>YEAR</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="javadoc">/**
         * Convert the value to int unit value.
         * @return an int value.
         */</comment>
        <function><type><specifier>public</specifier> <name>int</name></type> <name>getCalendarField</name><parameter_list>()</parameter_list> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>key</name> =<init> <expr><call><name>getValue</name><argument_list>()</argument_list></call>.<call><name>toLowerCase</name><argument_list>(<argument><expr><name><name>Locale</name>.<name>ENGLISH</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Integer</name></type> <name>i</name> =<init> <expr>(<name>Integer</name>) <call><name><name>calendarFields</name>.<name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>i</name>.<name>intValue</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Get the valid values.
         * @return the value values.
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getValues</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>UNITS</name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
