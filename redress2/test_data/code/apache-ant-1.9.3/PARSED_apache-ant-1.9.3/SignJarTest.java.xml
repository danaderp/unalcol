<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\taskdefs\SignJarTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildFileTest</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>JavaEnvUtils</name></name>;</import>

<comment type="javadoc">/**
 * Testcase for the Signjar task
 *
 */</comment>
<class><specifier>public</specifier> class <name>SignJarTest</name> <super><extends>extends <name>BuildFileTest</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>EXPANDED_MANIFEST</name>
        =<init> <expr>"src/etc/testcases/taskdefs/manifests/META-INF/MANIFEST.MF"</expr></init></decl>;</decl_stmt>


    <constructor><specifier>public</specifier> <name>SignJarTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr>"src/etc/testcases/taskdefs/signjar.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"clean"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * check for being offline
     * @return true if the system property "offline" is "true"
     */</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>isOffline</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>Boolean</name>.<name>getBoolean</name></name><argument_list>(<argument><expr>"offline"</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testSigFile</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"sigfile"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>SignJarChild</name></type> <name>sj</name> =<init> <expr>new <call><name>SignJarChild</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sj</name>.<name>setAlias</name></name><argument_list>(<argument><expr>"testonly"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sj</name>.<name>setKeystore</name></name><argument_list>(<argument><expr>"testkeystore"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sj</name>.<name>setStorepass</name></name><argument_list>(<argument><expr>"apacheant"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>jar</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getProperty</name><argument_list>(<argument><expr>"test.jar"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sj</name>.<name>setJar</name></name><argument_list>(<argument><expr><name>jar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr>"mustn't find signature without sigfile attribute"</expr></argument>,
                    <argument><expr><call><name><name>sj</name>.<name>isSigned</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sj</name>.<name>setSigfile</name></name><argument_list>(<argument><expr>"TEST"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"must find signature with sigfile attribute"</expr></argument>,
                   <argument><expr><call><name><name>sj</name>.<name>isSigned</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testInvalidChars</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"invalidchars"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>SignJarChild</name></type> <name>sj</name> =<init> <expr>new <call><name>SignJarChild</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sj</name>.<name>setAlias</name></name><argument_list>(<argument><expr>"test@nly"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sj</name>.<name>setKeystore</name></name><argument_list>(<argument><expr>"testkeystore"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sj</name>.<name>setStorepass</name></name><argument_list>(<argument><expr>"apacheant"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>jar</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getProperty</name><argument_list>(<argument><expr>"test.jar"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sj</name>.<name>setJar</name></name><argument_list>(<argument><expr><name>jar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>sj</name>.<name>isSigned</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * subclass in order to get access to protected isSigned method if
     * tests and task come from different classloaders.
     */</comment>
    <class><specifier>private</specifier> <specifier>static</specifier> class <name>SignJarChild</name> <super><extends>extends <name>SignJar</name></extends></super> <block>{
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSigned</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><call><name>isSigned</name><argument_list>(<argument><expr><name>jar</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testURLKeystoreFile</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"urlKeystoreFile"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testURLKeystoreHTTP</name><parameter_list>()</parameter_list> <block>{
        <if>if<condition>(<expr>!<call><name>isOffline</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"urlKeystoreHTTP"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testTsaLocalhost</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">//only test on java1.5+</comment>
        <if>if<condition>(<expr><call><name><name>JavaEnvUtils</name>.<name>getJavaVersionNumber</name></name><argument_list>()</argument_list></call>&gt;=15</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>expectBuildException</name><argument_list>(<argument><expr>"testTsaLocalhost"</expr></argument>,
                <argument><expr>"no TSA at localhost:0"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertLogContaining</name><argument_list>(<argument><expr>"java.net.ConnectException"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * @see https://issues.apache.org/bugzilla/show_bug.cgi?id=50081
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testSignUnnormalizedJar</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"jar"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>testJar</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getProperty</name><argument_list>(<argument><expr>"test.jar"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>testJarParent</name> =<init> <expr><call><name><name>testJar</name>.<name>getParentFile</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>f</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name>testJarParent</name></expr></argument>,
                          <argument><expr>"../" + <call><name><name>testJarParent</name>.<name>getName</name></name><argument_list>()</argument_list></call> + "/"
                          + <call><name><name>testJar</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>testJar</name>.<name>equals</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>testJar</name>.<name>getCanonicalPath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>f</name>.<name>getCanonicalPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>SignJar</name></type> <name>s</name> =<init> <expr>new <call><name>SignJar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>s</name>.<name>setProject</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>s</name>.<name>setJar</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>s</name>.<name>setAlias</name></name><argument_list>(<argument><expr>"testonly"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>s</name>.<name>setStorepass</name></name><argument_list>(<argument><expr>"apacheant"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>s</name>.<name>setKeystore</name></name><argument_list>(<argument><expr>"testkeystore"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>s</name>.<name>execute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
