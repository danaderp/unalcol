<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\types\DirSetTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileOutputStream</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>

<comment type="javadoc">/**
 * JUnit 3 testcases for org.apache.tools.ant.types.DirSet.
 *
 */</comment>
<class><specifier>public</specifier> class <name>DirSetTest</name> <super><extends>extends <name>AbstractFileSetTest</name></extends></super> <block>{

    <constructor><specifier>public</specifier> <name>DirSetTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>protected</specifier> <name>AbstractFileSet</name></type> <name>getInstance</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>new <call><name>DirSet</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFileSetIsNoDirSet</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>DirSet</name></type> <name>ds</name> =<init> <expr>(<name>DirSet</name>) <call><name>getInstance</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setProject</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>FileSet</name></type> <name>fs</name> =<init> <expr>new <call><name>FileSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>fs</name>.<name>setProject</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>addReference</name><argument_list>(<argument><expr>"dummy"</expr></argument>, <argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setRefid</name></name><argument_list>(<argument><expr>new <call><name>Reference</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"dummy"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>ds</name>.<name>getDir</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"DirSet created from FileSet reference"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"dummy doesn\'t denote a DirSet"</expr></argument>, <argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <expr_stmt><expr><name>ds</name> = (<name>DirSet</name>) <call><name>getInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setProject</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>addReference</name><argument_list>(<argument><expr>"dummy2"</expr></argument>, <argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>fs</name>.<name>setRefid</name></name><argument_list>(<argument><expr>new <call><name>Reference</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"dummy2"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>fs</name>.<name>getDir</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"FileSet created from DirSet reference"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"dummy2 doesn\'t denote a FileSet"</expr></argument>, <argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testToString</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>tmp</name> =<init> <expr><call><name><name>File</name>.<name>createTempFile</name></name><argument_list>(<argument><expr>"DirSetTest"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>tmp</name>.<name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>File</name></type> <name>a</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>"a"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>a</name>.<name>mkdirs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>File</name></type> <name>b</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>"b"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>File</name></type> <name>bc</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr>"c"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>bc</name>.<name>mkdirs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr>new <call><name>FileOutputStream</name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr>"x"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr>new <call><name>FileOutputStream</name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr>"x"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr>new <call><name>FileOutputStream</name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><name>bc</name></expr></argument>, <argument><expr>"x"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>DirSet</name></type> <name>ds</name> =<init> <expr>new <call><name>DirSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>ds</name>.<name>setProject</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ds</name>.<name>setDir</name></name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ds</name>.<name>setIncludes</name></name><argument_list>(<argument><expr>"b/"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"b;b" + <name><name>File</name>.<name>separator</name></name> + "c"</expr></argument>, <argument><expr><call><name><name>ds</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
            <expr_stmt><expr>new <call><name>File</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>"a/x"</expr></argument>)</argument_list></call>.<call><name>delete</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr>new <call><name>File</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>"a"</expr></argument>)</argument_list></call>.<call><name>delete</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr>new <call><name>File</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>"b/c/x"</expr></argument>)</argument_list></call>.<call><name>delete</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr>new <call><name>File</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>"b/c"</expr></argument>)</argument_list></call>.<call><name>delete</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr>new <call><name>File</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>"b/x"</expr></argument>)</argument_list></call>.<call><name>delete</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr>new <call><name>File</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>"b"</expr></argument>)</argument_list></call>.<call><name>delete</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>tmp</name>.<name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

}</block></class>
</unit>
