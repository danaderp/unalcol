<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\depend\DirectoryIterator.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>depend</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Stack</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>

<comment type="javadoc">/**
 * An iterator which iterates through the contents of a java directory. The
 * iterator should be created with the directory at the root of the Java
 * namespace.
 *
 */</comment>
<class><specifier>public</specifier> class <name>DirectoryIterator</name> <super><implements>implements <name>ClassFileIterator</name></implements></super> <block>{

    <comment type="javadoc">/**
     * This is a stack of current iterators supporting the depth first
     * traversal of the directory tree.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Stack</name></type> <name>enumStack</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The current directory iterator. As directories encounter lower level
     * directories, the current iterator is pushed onto the iterator stack
     * and a new iterator over the sub directory becomes the current
     * directory. This implements a depth first traversal of the directory
     * namespace.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Enumeration</name></type> <name>currentEnum</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a directory iterator. The directory iterator is created to
     * scan the root directory. If the changeInto flag is given, then the
     * entries returned will be relative to this directory and not the
     * current directory.
     *
     * @param rootDirectory the root if the directory namespace which is to
     *      be iterated over
     * @param changeInto if true then the returned entries will be relative
     *      to the rootDirectory and not the current directory.
     * @exception IOException if there is a problem reading the directory
     *      information.
     */</comment>
    <constructor><specifier>public</specifier> <name>DirectoryIterator</name><parameter_list>(<param><decl><type><name>File</name></type> <name>rootDirectory</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>changeInto</name></decl></param>)</parameter_list>
         <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>enumStack</name> = new <call><name>Stack</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Vector</name></type> <name>filesInRoot</name> =<init> <expr><call><name>getDirectoryEntries</name><argument_list>(<argument><expr><name>rootDirectory</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>currentEnum</name> = <call><name><name>filesInRoot</name>.<name>elements</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Get a vector covering all the entries (files and subdirectories in a
     * directory).
     *
     * @param directory the directory to be scanned.
     * @return a vector containing File objects for each entry in the
     *      directory.
     */</comment>
    <function><type><specifier>private</specifier> <name>Vector</name></type> <name>getDirectoryEntries</name><parameter_list>(<param><decl><type><name>File</name></type> <name>directory</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Vector</name></type> <name>files</name> =<init> <expr>new <call><name>Vector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// File[] filesInDir = directory.listFiles();</comment>
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>filesInDir</name> =<init> <expr><call><name><name>directory</name>.<name>list</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>filesInDir</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>length</name> =<init> <expr><name><name>filesInDir</name>.<name>length</name></name></expr></init></decl>;</decl_stmt>

            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>length</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
                <expr_stmt><expr><call><name><name>files</name>.<name>addElement</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><name>directory</name></expr></argument>, <argument><expr><name><name>filesInDir</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></then></if>

        <return>return <expr><name>files</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Template method to allow subclasses to supply elements for the
     * iteration. The directory iterator maintains a stack of iterators
     * covering each level in the directory hierarchy. The current iterator
     * covers the current directory being scanned. If the next entry in that
     * directory is a subdirectory, the current iterator is pushed onto the
     * stack and a new iterator is created for the subdirectory. If the
     * entry is a file, it is returned as the next element and the iterator
     * remains valid. If there are no more entries in the current directory,
     * the topmost iterator on the stack is popped off to become the
     * current iterator.
     *
     * @return the next ClassFile in the iteration.
     */</comment>
    <function><type><specifier>public</specifier> <name>ClassFile</name></type> <name>getNextClassFile</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>ClassFile</name></type> <name>nextElement</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

        <try>try <block>{
            <while>while <condition>(<expr><name>nextElement</name> == <name>null</name></expr>)</condition> <block>{
                <if>if <condition>(<expr><call><name><name>currentEnum</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>File</name></type> <name>element</name> =<init> <expr>(<name>File</name>) <call><name><name>currentEnum</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <if>if <condition>(<expr><call><name><name>element</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{

                        <comment type="line">// push the current iterator onto the stack and then</comment>
                        <comment type="line">// iterate through this directory.</comment>
                        <expr_stmt><expr><call><name><name>enumStack</name>.<name>push</name></name><argument_list>(<argument><expr><name>currentEnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <decl_stmt><decl><type><name>Vector</name></type> <name>files</name> =<init> <expr><call><name>getDirectoryEntries</name><argument_list>(<argument><expr><name>element</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <expr_stmt><expr><name>currentEnum</name> = <call><name><name>files</name>.<name>elements</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{

                        <comment type="line">// we have a file. create a stream for it</comment>
                        <decl_stmt><decl><type><name>FileInputStream</name></type> <name>inFileStream</name>
                            =<init> <expr>new <call><name>FileInputStream</name><argument_list>(<argument><expr><name>element</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <if>if <condition>(<expr><call><name><name>element</name>.<name>getName</name></name><argument_list>()</argument_list></call>.<call><name>endsWith</name><argument_list>(<argument><expr>".class"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{

                            <comment type="line">// create a data input stream from the jar</comment>
                            <comment type="line">// input stream</comment>
                            <decl_stmt><decl><type><name>ClassFile</name></type> <name>javaClass</name> =<init> <expr>new <call><name>ClassFile</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                            <expr_stmt><expr><call><name><name>javaClass</name>.<name>read</name></name><argument_list>(<argument><expr><name>inFileStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt><expr><name>nextElement</name> = <name>javaClass</name></expr>;</expr_stmt>
                        }</block></then></if>
                    }</block></else></if>
                }</block></then> <else>else <block>{
                    <comment type="line">// this iterator is exhausted. Can we pop one off the stack</comment>
                    <if>if <condition>(<expr><call><name><name>enumStack</name>.<name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                        <break>break;</break>
                    }</block></then> <else>else <block>{
                        <expr_stmt><expr><name>currentEnum</name> = (<name>Enumeration</name>) <call><name><name>enumStack</name>.<name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></else></if>
            }</block></while>
        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><name>nextElement</name> = <name>null</name></expr>;</expr_stmt>
        }</block></catch></try>

        <return>return <expr><name>nextElement</name></expr>;</return>
    }</block></function>

}</block></class>

</unit>
