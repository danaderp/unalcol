<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\util\SymbolicLinkUtils.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileNotFoundException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FilenameFilter</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>Execute</name></name>;</import>

<comment type="javadoc">/**
 * Contains methods related to symbolic links - or what Ant thinks is
 * a symbolic link based on the absent support for them in Java.
 *
 * @since Ant 1.8.0
 */</comment>
<class><specifier>public</specifier> class <name>SymbolicLinkUtils</name> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>FileUtils</name></type> <name>FILE_UTILS</name> =<init> <expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Shared instance.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>SymbolicLinkUtils</name></type> <name>PRIMARY_INSTANCE</name> =<init>
        <expr>new <call><name>SymbolicLinkUtils</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Method to retrieve The SymbolicLinkUtils, which is shared by
     * all users of this method.
     * @return an instance of SymbolicLinkUtils.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>SymbolicLinkUtils</name></type> <name>getSymbolicLinkUtils</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// keep the door open for Java X.Y specific subclass if symbolic</comment>
        <comment type="line">// links ever become supported in the classlib</comment>
        <return>return <expr><name>PRIMARY_INSTANCE</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Empty constructor.
     */</comment>
    <constructor><specifier>protected</specifier> <name>SymbolicLinkUtils</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <comment type="javadoc">/**
     * Checks whether a given file is a symbolic link.
     *
     * &lt;p&gt;It doesn't really test for symbolic links but whether the
     * canonical and absolute paths of the file are identical--this
     * may lead to false positives on some platforms.&lt;/p&gt;
     *
     * @param file the file to test.  Must not be null.
     *
     * @return true if the file is a symbolic link.
     * @throws IOException on error.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSymbolicLink</name><parameter_list>(<param><decl><type><name>File</name></type> <name>file</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name>isSymbolicLink</name><argument_list>(<argument><expr><call><name><name>file</name>.<name>getParentFile</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>file</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Checks whether a given file is a symbolic link.
     *
     * &lt;p&gt;It doesn't really test for symbolic links but whether the
     * canonical and absolute paths of the file are identical--this
     * may lead to false positives on some platforms.&lt;/p&gt;
     *
     * @param name the name of the file to test.
     *
     * @return true if the file is a symbolic link.
     * @throws IOException on error.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSymbolicLink</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name>isSymbolicLink</name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Checks whether a given file is a symbolic link.
     *
     * &lt;p&gt;It doesn't really test for symbolic links but whether the
     * canonical and absolute paths of the file are identical--this
     * may lead to false positives on some platforms.&lt;/p&gt;
     *
     * @param parent the parent directory of the file to test
     * @param name the name of the file to test.
     *
     * @return true if the file is a symbolic link.
     * @throws IOException on error.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSymbolicLink</name><parameter_list>(<param><decl><type><name>File</name></type> <name>parent</name></decl></param>, <param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>toTest</name> =<init> <expr><name>parent</name> != <name>null</name>
            ? new <call><name>File</name><argument_list>(<argument><expr><call><name><name>parent</name>.<name>getCanonicalPath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call>
            : new <call><name>File</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>!<call><name><name>toTest</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><call><name><name>toTest</name>.<name>getCanonicalPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Checks whether a given file is a broken symbolic link.
     *
     * &lt;p&gt;It doesn't really test for symbolic links but whether Java
     * reports that the File doesn't exist but its parent's child list
     * contains it--this may lead to false positives on some
     * platforms.&lt;/p&gt;
     *
     * &lt;p&gt;Note that #isSymbolicLink returns false if this method
     * returns true since Java won't produce a canonical name
     * different from the abolute one if the link is broken.&lt;/p&gt;
     *
     * @param name the name of the file to test.
     *
     * @return true if the file is a broken symbolic link.
     * @throws IOException on error.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isDanglingSymbolicLink</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name>isDanglingSymbolicLink</name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Checks whether a given file is a broken symbolic link.
     *
     * &lt;p&gt;It doesn't really test for symbolic links but whether Java
     * reports that the File doesn't exist but its parent's child list
     * contains it--this may lead to false positives on some
     * platforms.&lt;/p&gt;
     *
     * &lt;p&gt;Note that #isSymbolicLink returns false if this method
     * returns true since Java won't produce a canonical name
     * different from the abolute one if the link is broken.&lt;/p&gt;
     *
     * @param file the file to test.
     *
     * @return true if the file is a broken symbolic link.
     * @throws IOException on error.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isDanglingSymbolicLink</name><parameter_list>(<param><decl><type><name>File</name></type> <name>file</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name>isDanglingSymbolicLink</name><argument_list>(<argument><expr><call><name><name>file</name>.<name>getParentFile</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>file</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Checks whether a given file is a broken symbolic link.
     *
     * &lt;p&gt;It doesn't really test for symbolic links but whether Java
     * reports that the File doesn't exist but its parent's child list
     * contains it--this may lead to false positives on some
     * platforms.&lt;/p&gt;
     *
     * &lt;p&gt;Note that #isSymbolicLink returns false if this method
     * returns true since Java won't produce a canonical name
     * different from the abolute one if the link is broken.&lt;/p&gt;
     *
     * @param parent the parent directory of the file to test
     * @param name the name of the file to test.
     *
     * @return true if the file is a broken symbolic link.
     * @throws IOException on error.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isDanglingSymbolicLink</name><parameter_list>(<param><decl><type><name>File</name></type> <name>parent</name></decl></param>, <param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> 
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>f</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>f</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>localName</name> =<init> <expr><call><name><name>f</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>c</name> =<init> <expr><call><name><name>parent</name>.<name>list</name></name><argument_list>(<argument><expr>new <class><super><name>FilenameFilter</name></super><argument_list>()</argument_list> <block>{
                    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>accept</name><parameter_list>(<param><decl><type><name>File</name></type> <name>d</name></decl></param>, <param><decl><type><name>String</name></type> <name>n</name></decl></param>)</parameter_list> <block>{
                        <return>return <expr><call><name><name>localName</name>.<name>equals</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
                    }</block></function>
                }</block></class></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><name>c</name> != <name>null</name> &amp;&amp; <name><name>c</name>.<name>length</name></name> &gt; 0</expr>;</return>
        }</block></then></if>
        <return>return <expr>false</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Delete a symlink (without deleting the associated resource).
     *
     * &lt;p&gt;This is a utility method that removes a unix symlink without
     * removing the resource that the symlink points to. If it is
     * accidentally invoked on a real file, the real file will not be
     * harmed, but silently ignored.&lt;/p&gt;
     *
     * &lt;p&gt;Normally this method works by
     * getting the canonical path of the link, using the canonical path to
     * rename the resource (breaking the link) and then deleting the link.
     * The resource is then returned to its original name inside a finally
     * block to ensure that the resource is unharmed even in the event of
     * an exception.&lt;/p&gt;
     *
     * &lt;p&gt;There may be cases where the algorithm described above doesn't work,
     * in that case the method tries to use the native "rm" command on
     * the symlink instead.&lt;/p&gt;
     *
     * @param link A &lt;code&gt;File&lt;/code&gt; object of the symlink to delete.
     * @param task An Ant Task required if "rm" needs to be invoked.
     *
     * @throws IOException If calls to &lt;code&gt;File.rename&lt;/code&gt;,
     * &lt;code&gt;File.delete&lt;/code&gt; or &lt;code&gt;File.getCanonicalPath&lt;/code&gt;
     * fail.
     * @throws BuildException if the execution of "rm" failed.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>deleteSymbolicLink</name><parameter_list>(<param><decl><type><name>File</name></type> <name>link</name></decl></param>, <param><decl><type><name>Task</name></type> <name>task</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><call><name>isDanglingSymbolicLink</name><argument_list>(<argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <if>if <condition>(<expr>!<call><name><name>link</name>.<name>delete</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>IOException</name><argument_list>(<argument><expr>"failed to remove dangling symbolic link "
                                      + <name>link</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <return>return;</return>
        }</block></then></if>

        <if>if <condition>(<expr>!<call><name>isSymbolicLink</name><argument_list>(<argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">// plain file, not a link</comment>
            <return>return;</return>
        }</block></then></if>

        <if>if <condition>(<expr>!<call><name><name>link</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>FileNotFoundException</name><argument_list>(<argument><expr>"No such symbolic link: " + <name>link</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <comment type="line">// find the resource of the existing link:</comment>
        <decl_stmt><decl><type><name>File</name></type> <name>target</name> =<init> <expr><call><name><name>link</name>.<name>getCanonicalFile</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// no reason to try the renaming algorithm if we aren't allowed to</comment>
        <comment type="line">// write to the target's parent directory.  Let's hope that</comment>
        <comment type="line">// File.canWrite works on all platforms.</comment>

        <if>if <condition>(<expr><name>task</name> == <name>null</name> || <call><name><name>target</name>.<name>getParentFile</name></name><argument_list>()</argument_list></call>.<call><name>canWrite</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{

            <comment type="line">// rename the resource, thus breaking the link:</comment>
            <decl_stmt><decl><type><name>File</name></type> <name>temp</name> =<init> <expr><call><name><name>FILE_UTILS</name>.<name>createTempFile</name></name><argument_list>(<argument><expr>"symlink"</expr></argument>, <argument><expr>".tmp"</expr></argument>,
                                                  <argument><expr><call><name><name>target</name>.<name>getParentFile</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>false</expr></argument>,
                                                  <argument><expr>false</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><call><name><name>FILE_UTILS</name>.<name>isLeadingPath</name></name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <comment type="line">// link points to a parent directory, renaming the parent</comment>
                <comment type="line">// will rename the file</comment>
                <expr_stmt><expr><name>link</name> = new <call><name>File</name><argument_list>(<argument><expr><name>temp</name></expr></argument>,
                                <argument><expr><call><name><name>FILE_UTILS</name>.<name>removeLeadingPath</name></name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <decl_stmt><decl><type><name>boolean</name></type> <name>renamedTarget</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
            <try>try <block>{
                <try>try <block>{
                    <expr_stmt><expr><call><name><name>FILE_UTILS</name>.<name>rename</name></name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>renamedTarget</name> = true</expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
                    <throw>throw <expr>new <call><name>IOException</name><argument_list>(<argument><expr>"Couldn't rename resource when "
                                          + "attempting to delete '" + <name>link</name>
                                          + "'.  Reason: " + <call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></catch></try>
                <comment type="line">// delete the (now) broken link:</comment>
                <if>if <condition>(<expr>!<call><name><name>link</name>.<name>delete</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <throw>throw <expr>new <call><name>IOException</name><argument_list>(<argument><expr>"Couldn't delete symlink: "
                                          + <name>link</name>
                                          + " (was it a real file? is this "
                                          + "not a UNIX system?)"</expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if>
            }</block> <finally>finally <block>{
                <if>if <condition>(<expr><name>renamedTarget</name></expr>)</condition><then> <block>{
                    <comment type="line">// return the resource to its original name:</comment>
                    <try>try <block>{
                        <expr_stmt><expr><call><name><name>FILE_UTILS</name>.<name>rename</name></name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
                        <throw>throw <expr>new <call><name>IOException</name><argument_list>(<argument><expr>"Couldn't return resource "
                                              + <name>temp</name>
                                              + " to its original name: "
                                              + <call><name><name>target</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call>
                                              + ". Reason: " + <call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call>
                                              + "\n THE RESOURCE'S NAME ON DISK"
                                              + " HAS BEEN CHANGED BY THIS"
                                              + " ERROR!\n"</expr></argument>)</argument_list></call></expr>;</throw>
                    }</block></catch></try>
                }</block></then></if>
            }</block></finally></try>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>Execute</name>.<name>runCommand</name></name><argument_list>(<argument><expr><name>task</name></expr></argument>,
                               <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"rm"</expr>, <expr><call><name><name>link</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

}</block></class>
</unit>
