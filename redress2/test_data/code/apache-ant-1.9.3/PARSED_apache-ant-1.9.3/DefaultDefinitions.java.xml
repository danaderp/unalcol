<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\DefaultDefinitions.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name></name>;</package>

<comment type="javadoc">/**
 * Default definitions.
 * @since Ant 1.9.1
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>DefaultDefinitions</name> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>IF_NAMESPACE</name> =<init> <expr>"ant:if"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>UNLESS_NAMESPACE</name> =<init> <expr>"ant:unless"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>OATA</name> =<init> <expr>"org.apache.tools.ant."</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ComponentHelper</name></type> <name>componentHelper</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Create a default definitions object.
     * @param componentHelper the componenthelper to initialize.
     */</comment>
    <constructor><specifier>public</specifier> <name>DefaultDefinitions</name><parameter_list>(<param><decl><type><name>ComponentHelper</name></type> <name>componentHelper</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>componentHelper</name></name> = <name>componentHelper</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Register the definitions.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>attributeNamespaceDef</name><argument_list>(<argument><expr><name>IF_NAMESPACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>attributeNamespaceDef</name><argument_list>(<argument><expr><name>UNLESS_NAMESPACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>ifUnlessDef</name><argument_list>(<argument><expr>"true"</expr></argument>, <argument><expr>"IfTrueAttribute"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ifUnlessDef</name><argument_list>(<argument><expr>"set"</expr></argument>, <argument><expr>"IfSetAttribute"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ifUnlessDef</name><argument_list>(<argument><expr>"blank"</expr></argument>, <argument><expr>"IfBlankAttribute"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>attributeNamespaceDef</name><parameter_list>(<param><decl><type><name>String</name></type> <name>ns</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>AntTypeDefinition</name></type> <name>def</name> =<init> <expr>new <call><name>AntTypeDefinition</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>def</name>.<name>setName</name></name><argument_list>(<argument><expr><call><name><name>ProjectHelper</name>.<name>nsToComponentName</name></name><argument_list>(<argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>def</name>.<name>setClassName</name></name><argument_list>(<argument><expr><name>OATA</name> + "attribute.AttributeNamespace"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>def</name>.<name>setClassLoader</name></name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call>.<call><name>getClassLoader</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>def</name>.<name>setRestrict</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>componentHelper</name>.<name>addDataTypeDefinition</name></name><argument_list>(<argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>ifUnlessDef</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>, <param><decl><type><name>String</name></type> <name>base</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>classname</name> =<init>  <expr><name>OATA</name> + "attribute." + <name>base</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>componentDef</name><argument_list>(<argument><expr><name>IF_NAMESPACE</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>classname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>componentDef</name><argument_list>(<argument><expr><name>UNLESS_NAMESPACE</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>classname</name> + "$Unless"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>componentDef</name><parameter_list>(<param><decl><type><name>String</name></type> <name>ns</name></decl></param>, <param><decl><type><name>String</name></type> <name>name</name></decl></param>, <param><decl><type><name>String</name></type> <name>classname</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>AntTypeDefinition</name></type> <name>def</name> =<init> <expr>new <call><name>AntTypeDefinition</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>n</name> =<init> <expr><call><name><name>ProjectHelper</name>.<name>genComponentName</name></name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>def</name>.<name>setName</name></name><argument_list>(<argument><expr><call><name><name>ProjectHelper</name>.<name>genComponentName</name></name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>def</name>.<name>setClassName</name></name><argument_list>(<argument><expr><name>classname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>def</name>.<name>setClassLoader</name></name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call>.<call><name>getClassLoader</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>def</name>.<name>setRestrict</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>componentHelper</name>.<name>addDataTypeDefinition</name></name><argument_list>(<argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
