<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\WaitFor.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>HashMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Locale</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>condition</name>.<name>Condition</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>condition</name>.<name>ConditionBase</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>EnumeratedAttribute</name></name>;</import>

<comment type="javadoc">/**
 * Wait for an external event to occur.
 *
 * Wait for an external process to start or to complete some
 * task. This is useful with the &lt;code&gt;parallel&lt;/code&gt; task to
 * synchronize the execution of tests with server startup.
 *
 * The following attributes can be specified on a waitfor task:
 * &lt;ul&gt;
 * &lt;li&gt;maxwait - maximum length of time to wait before giving up&lt;/li&gt;
 * &lt;li&gt;maxwaitunit - The unit to be used to interpret maxwait attribute&lt;/li&gt;
 * &lt;li&gt;checkevery - amount of time to sleep between each check&lt;/li&gt;
 * &lt;li&gt;checkeveryunit - The unit to be used to interpret checkevery attribute&lt;/li&gt;
 * &lt;li&gt;timeoutproperty - name of a property to set if maxwait has been exceeded.&lt;/li&gt;
 * &lt;/ul&gt;
 *
 * The maxwaitunit and checkeveryunit are allowed to have the following values:
 * millisecond, second, minute, hour, day and week. The default is millisecond.
 *
 * For programmatic use/subclassing, there are two methods that may be overridden,
 * &lt;code&gt;processSuccess&lt;/code&gt; and &lt;code&gt;processTimeout&lt;/code&gt;
 * @since Ant 1.5
 *
 * @ant.task category="control"
 */</comment>
<class><specifier>public</specifier> class <name>WaitFor</name> <super><extends>extends <name>ConditionBase</name></extends></super> <block>{
    <comment type="javadoc">/** a millisecond */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>ONE_MILLISECOND</name> =<init> <expr>1L</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** a second in milliseconds */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>ONE_SECOND</name> =<init> <expr>1000L</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** a minute in milliseconds */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>ONE_MINUTE</name> =<init> <expr><name>ONE_SECOND</name> * 60L</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** an hour in milliseconds */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>ONE_HOUR</name>   =<init> <expr><name>ONE_MINUTE</name> * 60L</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** a day in milliseconds */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>ONE_DAY</name>    =<init> <expr><name>ONE_HOUR</name> * 24L</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** a week in milliseconds */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>ONE_WEEK</name>   =<init> <expr><name>ONE_DAY</name> * 7L</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** default wait time */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>DEFAULT_MAX_WAIT_MILLIS</name> =<init> <expr><name>ONE_MINUTE</name> * 3L</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** default check time */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>DEFAULT_CHECK_MILLIS</name> =<init> <expr>500L</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** default max wait time in the current unit*/</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>maxWait</name> =<init> <expr><name>DEFAULT_MAX_WAIT_MILLIS</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>maxWaitMultiplier</name> =<init> <expr><name>ONE_MILLISECOND</name></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * check time in the current unit
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>checkEvery</name> =<init> <expr><name>DEFAULT_CHECK_MILLIS</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>checkEveryMultiplier</name> =<init> <expr><name>ONE_MILLISECOND</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>timeoutProperty</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructor, names this task "waitfor".
     */</comment>
    <constructor><specifier>public</specifier> <name>WaitFor</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr>"waitfor"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <comment type="javadoc">/**
     * Constructor that takes the name of the task in the task name.
     *
     * @param taskName the name of the task.
     * @since Ant 1.8
     */</comment>
    <constructor><specifier>public</specifier> <name>WaitFor</name><parameter_list>(<param><decl><type><name>String</name></type> <name>taskName</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>taskName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Set the maximum length of time to wait.
     * @param time a &lt;code&gt;long&lt;/code&gt; value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMaxWait</name><parameter_list>(<param><decl><type><name>long</name></type> <name>time</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>maxWait</name> = <name>time</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Set the max wait time unit
     * @param unit an enumerated &lt;code&gt;Unit&lt;/code&gt; value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMaxWaitUnit</name><parameter_list>(<param><decl><type><name>Unit</name></type> <name>unit</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>maxWaitMultiplier</name> = <call><name><name>unit</name>.<name>getMultiplier</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>



    <comment type="javadoc">/**
     * Set the time between each check
     * @param time a &lt;code&gt;long&lt;/code&gt; value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCheckEvery</name><parameter_list>(<param><decl><type><name>long</name></type> <name>time</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>checkEvery</name> = <name>time</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the check every time unit
     * @param unit an enumerated &lt;code&gt;Unit&lt;/code&gt; value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCheckEveryUnit</name><parameter_list>(<param><decl><type><name>Unit</name></type> <name>unit</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>checkEveryMultiplier</name> = <call><name><name>unit</name>.<name>getMultiplier</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Name the property to set after a timeout.
     * @param p the property name
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTimeoutProperty</name><parameter_list>(<param><decl><type><name>String</name></type> <name>p</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>timeoutProperty</name> = <name>p</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Check repeatedly for the specified conditions until they become
     * true or the timeout expires.
     * @throws BuildException on error
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><call><name>countConditions</name><argument_list>()</argument_list></call> &gt; 1</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"You must not nest more than one "
                                     + "condition into "
                                     + <call><name>getTaskName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>countConditions</name><argument_list>()</argument_list></call> &lt; 1</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"You must nest a condition into "
                                     + <call><name>getTaskName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>Condition</name></type> <name>c</name> =<init> <expr>(<name>Condition</name>) <call><name>getConditions</name><argument_list>()</argument_list></call>.<call><name>nextElement</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <decl_stmt><decl><type><name>long</name></type> <name>maxWaitMillis</name> =<init> <expr><call><name>calculateMaxWaitMillis</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>checkEveryMillis</name> =<init> <expr><call><name>calculateCheckEveryMillis</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>start</name> =<init> <expr><call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>end</name> =<init> <expr><name>start</name> + <name>maxWaitMillis</name></expr></init></decl>;</decl_stmt>

            <while>while <condition>(<expr><call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call> &lt; <name>end</name></expr>)</condition> <block>{
                <if>if <condition>(<expr><call><name><name>c</name>.<name>eval</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>processSuccess</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <return>return;</return>
                }</block></then></if>
                <expr_stmt><expr><call><name><name>Thread</name>.<name>sleep</name></name><argument_list>(<argument><expr><name>checkEveryMillis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
        }</block> <catch>catch (<param><decl><type><name>InterruptedException</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Task " + <call><name>getTaskName</name><argument_list>()</argument_list></call>
                    + " interrupted, treating as timed out."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <expr_stmt><expr><call><name>processTimeout</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the check wait time, in milliseconds.
     * @since Ant 1.8
     * @return how long to wait between checks
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>calculateCheckEveryMillis</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>checkEvery</name> * <name>checkEveryMultiplier</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the maximum wait time, in milliseconds.
     * @since Ant 1.8
     * @return how long to wait before timing out
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>calculateMaxWaitMillis</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>maxWait</name> * <name>maxWaitMultiplier</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Actions to be taken on a successful waitfor.
     * This is an override point. The base implementation does nothing.
     * @since Ant1.7
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>processSuccess</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><call><name>getTaskName</name><argument_list>()</argument_list></call> + ": condition was met"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Actions to be taken on an unsuccessful wait.
     * This is an override point. It is where the timeout processing takes place.
     * The base implementation sets the timeoutproperty if there was a timeout
     * and the property was defined.
     * @since Ant1.7
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>processTimeout</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><call><name>getTaskName</name><argument_list>()</argument_list></call> + ": timeout"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>timeoutProperty</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>setNewProperty</name><argument_list>(<argument><expr><name>timeoutProperty</name></expr></argument>, <argument><expr>"true"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * The enumeration of units:
     * millisecond, second, minute, hour, day, week
     * @todo we use timestamps in many places, why not factor this out
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Unit</name> <super><extends>extends <name>EnumeratedAttribute</name></extends></super> <block>{

        <comment type="javadoc">/** millisecond string */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>MILLISECOND</name> =<init> <expr>"millisecond"</expr></init></decl>;</decl_stmt>
        <comment type="javadoc">/** second string */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SECOND</name> =<init> <expr>"second"</expr></init></decl>;</decl_stmt>
        <comment type="javadoc">/** minute string */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>MINUTE</name> =<init> <expr>"minute"</expr></init></decl>;</decl_stmt>
        <comment type="javadoc">/** hour string */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>HOUR</name> =<init> <expr>"hour"</expr></init></decl>;</decl_stmt>
        <comment type="javadoc">/** day string */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DAY</name> =<init> <expr>"day"</expr></init></decl>;</decl_stmt>
        <comment type="javadoc">/** week string */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>WEEK</name> =<init> <expr>"week"</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name><index>[]</index></type> <name>UNITS</name> =<init> <expr><block>{
            <expr><name>MILLISECOND</name></expr>, <expr><name>SECOND</name></expr>, <expr><name>MINUTE</name></expr>, <expr><name>HOUR</name></expr>, <expr><name>DAY</name></expr>, <expr><name>WEEK</name></expr>
        }</block></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <name>Map</name></type> <name>timeTable</name> =<init> <expr>new <call><name>HashMap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="javadoc">/** Constructor the Unit enumerated type. */</comment>
        <constructor><specifier>public</specifier> <name>Unit</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>timeTable</name>.<name>put</name></name><argument_list>(<argument><expr><name>MILLISECOND</name></expr></argument>, <argument><expr>new <call><name>Long</name><argument_list>(<argument><expr>1L</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>timeTable</name>.<name>put</name></name><argument_list>(<argument><expr><name>SECOND</name></expr></argument>,      <argument><expr>new <call><name>Long</name><argument_list>(<argument><expr><name>ONE_SECOND</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>timeTable</name>.<name>put</name></name><argument_list>(<argument><expr><name>MINUTE</name></expr></argument>,      <argument><expr>new <call><name>Long</name><argument_list>(<argument><expr><name>ONE_MINUTE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>timeTable</name>.<name>put</name></name><argument_list>(<argument><expr><name>HOUR</name></expr></argument>,        <argument><expr>new <call><name>Long</name><argument_list>(<argument><expr><name>ONE_HOUR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>timeTable</name>.<name>put</name></name><argument_list>(<argument><expr><name>DAY</name></expr></argument>,         <argument><expr>new <call><name>Long</name><argument_list>(<argument><expr><name>ONE_DAY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>timeTable</name>.<name>put</name></name><argument_list>(<argument><expr><name>WEEK</name></expr></argument>,        <argument><expr>new <call><name>Long</name><argument_list>(<argument><expr><name>ONE_WEEK</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="javadoc">/**
         * Convert the value to a multipler (millisecond to unit).
         * @return a multipler (a long value)
         */</comment>
        <function><type><specifier>public</specifier> <name>long</name></type> <name>getMultiplier</name><parameter_list>()</parameter_list> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>key</name> =<init> <expr><call><name>getValue</name><argument_list>()</argument_list></call>.<call><name>toLowerCase</name><argument_list>(<argument><expr><name><name>Locale</name>.<name>ENGLISH</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Long</name></type> <name>l</name> =<init> <expr>(<name>Long</name>) <call><name><name>timeTable</name>.<name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>l</name>.<name>longValue</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * @see EnumeratedAttribute#getValues()
         */</comment>
        <comment type="javadoc">/** {@inheritDoc} */</comment>
        <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getValues</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>UNITS</name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
