<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\attribute\BaseIfAttribute.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>attribute</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>HashMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>ProjectComponent</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>RuntimeConfigurable</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>UnknownElement</name></name>;</import>


<comment type="javadoc">/**
 * An abstract class for if/unless attributes.
 * This contains a boolean flag to specify whether this is an
 * if or unless attribute.
 * @since Ant 1.9.1
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>BaseIfAttribute</name>
    <super><extends>extends <name>ProjectComponent</name></extends> <implements>implements <name>EnableAttribute</name></implements></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>positive</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * Set the positive flag.
     * @param positive the value to use.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setPositive</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>positive</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>positive</name></name> = <name>positive</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the positive flag.
     * @return the flag.
     */</comment>
    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>isPositive</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>positive</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * convert the result.
     * @param val the result to convert
     * @return val if positive or !val if not.
     */</comment>
    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>convertResult</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>val</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name>positive</name> ? <name>val</name> : !<name>val</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get all the attributes in the ant-attribute:param
     * namespace and place them in a map.
     * @param el the element this attribute is in.
     * @return a map of attributes.
     */</comment>
    <function><type><specifier>protected</specifier> <name>Map</name></type> <name>getParams</name><parameter_list>(<param><decl><type><name>UnknownElement</name></type> <name>el</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Map</name></type> <name>ret</name> =<init> <expr>new <call><name>HashMap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RuntimeConfigurable</name></type> <name>rc</name> =<init> <expr><call><name><name>el</name>.<name>getWrapper</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Map</name></type> <name>attributes</name> =<init> <expr><call><name><name>rc</name>.<name>getAttributeMap</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// This does a copy!</comment>
        <for>for (<init><decl><type><name>Iterator</name></type> <name>i</name> =<init> <expr><call><name><name>attributes</name>.<name>entrySet</name></name><argument_list>()</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>i</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
            <decl_stmt><decl><type><name><name>Map</name>.<name>Entry</name></name></type> <name>entry</name> =<init> <expr>(<name><name>Map</name>.<name>Entry</name></name>) <call><name><name>i</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>key</name> =<init> <expr>(<name>String</name>) <call><name><name>entry</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>value</name> =<init> <expr>(<name>String</name>) <call><name><name>entry</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>key</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"ant-attribute:param"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>pos</name> =<init> <expr><call><name><name>key</name>.<name>lastIndexOf</name></name><argument_list>(<argument><expr>':'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>ret</name>.<name>put</name></name><argument_list>(<argument><expr><call><name><name>key</name>.<name>substring</name></name><argument_list>(<argument><expr><name>pos</name> + 1</expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name><name>el</name>.<name>getProject</name></name><argument_list>()</argument_list></call>.<call><name>replaceProperties</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <return>return <expr><name>ret</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
