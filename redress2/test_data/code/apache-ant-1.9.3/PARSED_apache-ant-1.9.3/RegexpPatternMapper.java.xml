<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\util\RegexpPatternMapper.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>regexp</name>.<name>RegexpMatcher</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>regexp</name>.<name>RegexpMatcherFactory</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>regexp</name>.<name>RegexpUtil</name></name>;</import>

<comment type="javadoc">/**
 * Implementation of FileNameMapper that does regular expression
 * replacements.
 *
 */</comment>
<class><specifier>public</specifier> class <name>RegexpPatternMapper</name> <super><implements>implements <name>FileNameMapper</name></implements></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DECIMAL</name> =<init> <expr>10</expr></init></decl>;</decl_stmt>

    <comment type="line">// CheckStyle:VisibilityModifier OFF - bc</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>RegexpMatcher</name></type> <name>reg</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>char</name><index>[]</index></type> <name>to</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>StringBuffer</name></type> <name>result</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// CheckStyle:VisibilityModifier ON</comment>

    <comment type="javadoc">/**
     * Constructor for RegexpPatternMapper.
     * @throws BuildException on error.
     */</comment>
    <constructor><specifier>public</specifier> <name>RegexpPatternMapper</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><name>reg</name> = (new <call><name>RegexpMatcherFactory</name><argument_list>()</argument_list></call>).<call><name>newRegexpMatcher</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>handleDirSep</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type>     <name>regexpOptions</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Attribute specifying whether to ignore the difference
     * between / and \ (the two common directory characters).
     * @param handleDirSep a boolean, default is false.
     * @since Ant 1.6.3
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setHandleDirSep</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>handleDirSep</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>handleDirSep</name></name> = <name>handleDirSep</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Attribute specifying whether to ignore the case difference
     * in the names.
     *
     * @param caseSensitive a boolean, default is false.
     * @since Ant 1.6.3
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCaseSensitive</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>caseSensitive</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>regexpOptions</name> = <call><name><name>RegexpUtil</name>.<name>asOptions</name></name><argument_list>(<argument><expr><name>caseSensitive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the &amp;quot;from&amp;quot; pattern. Required.
     * @param from the from pattern.
     * @throws BuildException on error.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFrom</name><parameter_list>(<param><decl><type><name>String</name></type> <name>from</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>from</name> != <name>null</name></expr>)</condition><then> <block>{
            <try>try <block>{
                <expr_stmt><expr><call><name><name>reg</name>.<name>setPattern</name></name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>NoClassDefFoundError</name></type> <name>e</name></decl></param>) <block>{
                <comment type="line">// depending on the implementation the actual RE won't</comment>
                <comment type="line">// get instantiated in the constructor.</comment>
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Cannot load regular expression matcher"</expr></argument>,
                                         <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></then> <else>else <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"this mapper requires a 'from' attribute"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the &amp;quot;to&amp;quot; pattern. Required.
     * @param to the to pattern.
     * @throws BuildException on error.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTo</name><parameter_list>(<param><decl><type><name>String</name></type> <name>to</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>to</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>to</name></name> = <call><name><name>to</name>.<name>toCharArray</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"this mapper requires a 'to' attribute"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns null if the source file name doesn't match the
     * &amp;quot;from&amp;quot; pattern, an one-element array containing the
     * translated file otherwise.
     * @param sourceFileName the source file name
     * @return a one-element array containing the translated file or
     *         null if the to pattern did not match
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>mapFileName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>sourceFileName</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>handleDirSep</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name><name>sourceFileName</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"\\"</expr></argument>)</argument_list></call> != -1</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>sourceFileName</name> = <call><name><name>sourceFileName</name>.<name>replace</name></name><argument_list>(<argument><expr>'\\'</expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <if>if <condition>(<expr><name>reg</name> == <name>null</name>  || <name>to</name> == <name>null</name>
            || !<call><name><name>reg</name>.<name>matches</name></name><argument_list>(<argument><expr><name>sourceFileName</name></expr></argument>, <argument><expr><name>regexpOptions</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <return>return <expr>new <name><name>String</name><index>[]</index></name> <block>{<expr><call><name>replaceReferences</name><argument_list>(<argument><expr><name>sourceFileName</name></expr></argument>)</argument_list></call></expr>}</block></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Replace all backreferences in the to pattern with the matched
     * groups of the source.
     * @param source the source file name.
     * @return the translated file name.
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>replaceReferences</name><parameter_list>(<param><decl><type><name>String</name></type> <name>source</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Vector</name></type> <name>v</name> =<init> <expr><call><name><name>reg</name>.<name>getGroups</name></name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>regexpOptions</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>result</name>.<name>setLength</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>to</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <if>if <condition>(<expr><name><name>to</name><index>[<expr><name>i</name></expr>]</index></name> == '\\'</expr>)</condition><then> <block>{
                <if>if <condition>(<expr>++<name>i</name> &lt; <name><name>to</name>.<name>length</name></name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>int</name></type> <name>value</name> =<init> <expr><call><name><name>Character</name>.<name>digit</name></name><argument_list>(<argument><expr><name><name>to</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>DECIMAL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>value</name> &gt; -1</expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>(<name>String</name>) <call><name><name>v</name>.<name>elementAt</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr><name><name>to</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></then> <else>else <block>{
                    <comment type="line">// TODO - should throw an exception instead?</comment>
                    <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'\\'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr><name><name>to</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></for>
        <return>return <expr><call><name><name>result</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

}</block></class>
</unit>
