<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\util\DeweyDecimal.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>StringTokenizer</name></name>;</import>

<comment type="javadoc">/**
 * Utility class to contain version numbers in "Dewey Decimal"
 * syntax.  Numbers in the "Dewey Decimal" syntax consist of positive
 * decimal integers separated by periods ".".  For example, "2.0" or
 * "1.2.3.4.5.6.7".  This allows an extensible number to be used to
 * represent major, minor, micro, etc versions.  The version number
 * must begin with a number.
 *
 */</comment>
<class><specifier>public</specifier> class <name>DeweyDecimal</name> <super><implements>implements <name><name>Comparable</name><argument_list>&lt;<argument><name>DeweyDecimal</name></argument>&gt;</argument_list></name></implements></super> <block>{

    <comment type="javadoc">/** Array of components that make up DeweyDecimal */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name><index>[]</index></type> <name>components</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Construct a DeweyDecimal from an array of integer components.
     *
     * @param components an array of integer components.
     */</comment>
    <constructor><specifier>public</specifier> <name>DeweyDecimal</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>int</name><index>[]</index></name></type> <name>components</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>components</name></name> = new <name><name>int</name><index>[<expr><name><name>components</name>.<name>length</name></name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>components</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>this</name>.<name>components</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>components</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Construct a DeweyDecimal from string in DeweyDecimal format.
     *
     * @param string the string in dewey decimal format
     * @exception NumberFormatException if string is malformed
     */</comment>
    <constructor><specifier>public</specifier> <name>DeweyDecimal</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>string</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>NumberFormatException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>StringTokenizer</name></type> <name>tokenizer</name> =<init> <expr>new <call><name>StringTokenizer</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr>"."</expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>size</name> =<init> <expr><call><name><name>tokenizer</name>.<name>countTokens</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>components</name> = new <name><name>int</name><index>[ <expr>(<name>size</name> + 1) / 2</expr> ]</index></name></expr>;</expr_stmt>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>components</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>component</name> =<init> <expr><call><name><name>tokenizer</name>.<name>nextToken</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>component</name>.<name>length</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>NumberFormatException</name><argument_list>(<argument><expr>"Empty component in string"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <expr_stmt><expr><name><name>components</name><index>[ <expr><name>i</name></expr> ]</index></name> = <call><name><name>Integer</name>.<name>parseInt</name></name><argument_list>(<argument><expr><name>component</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">//Strip '.' token</comment>
            <if>if <condition>(<expr><call><name><name>tokenizer</name>.<name>hasMoreTokens</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>tokenizer</name>.<name>nextToken</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <comment type="line">//If it ended in a dot, throw an exception</comment>
                <if>if <condition>(<expr>!<call><name><name>tokenizer</name>.<name>hasMoreTokens</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <throw>throw <expr>new <call><name>NumberFormatException</name><argument_list>(<argument><expr>"DeweyDecimal ended in a '.'"</expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if>
            }</block></then></if>
        }</block></for>
    }</block></constructor>

    <comment type="javadoc">/**
     * Return number of components in &lt;code&gt;DeweyDecimal&lt;/code&gt;.
     *
     * @return the number of components in dewey decimal
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getSize</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>components</name>.<name>length</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Return the component at specified index.
     *
     * @param index the index of components
     * @return the value of component at index
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>get</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name><name>components</name><index>[ <expr><name>index</name></expr> ]</index></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Return &lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;DeweyDecimal&lt;/code&gt; is
     * equal to the other &lt;code&gt;DeweyDecimal&lt;/code&gt;.
     *
     * @param other the other DeweyDecimal
     * @return true if equal to other DeweyDecimal, false otherwise
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isEqual</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>DeweyDecimal</name></type> <name>other</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>max</name> =<init> <expr><call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name><name>other</name>.<name>components</name>.<name>length</name></name></expr></argument>, <argument><expr><name><name>components</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>max</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>component1</name> =<init> <expr>(<name>i</name> &lt; <name><name>components</name>.<name>length</name></name>) ? <name><name>components</name><index>[ <expr><name>i</name></expr> ]</index></name> : 0</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>component2</name> =<init> <expr>(<name>i</name> &lt; <name><name>other</name>.<name>components</name>.<name>length</name></name>) ? <name><name>other</name>.<name>components</name><index>[ <expr><name>i</name></expr> ]</index></name> : 0</expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>component2</name> != <name>component1</name></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>
            }</block></then></if>
        }</block></for>

        <return>return <expr>true</expr>;</return> <comment type="line">// Exact match</comment>
    }</block></function>

    <comment type="javadoc">/**
     * Return &lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;DeweyDecimal&lt;/code&gt; is
     * less than the other &lt;code&gt;DeweyDecimal&lt;/code&gt;.
     *
     * @param other the other DeweyDecimal
     * @return true if less than other DeweyDecimal, false otherwise
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isLessThan</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>DeweyDecimal</name></type> <name>other</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>!<call><name>isGreaterThanOrEqual</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Return &lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;DeweyDecimal&lt;/code&gt; is
     * less than or equal to the other &lt;code&gt;DeweyDecimal&lt;/code&gt;.
     *
     * @param other the other DeweyDecimal
     * @return true if less than or equal to other DeweyDecimal, false otherwise
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isLessThanOrEqual</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>DeweyDecimal</name></type> <name>other</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>!<call><name>isGreaterThan</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Return &lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;DeweyDecimal&lt;/code&gt; is
     * greater than the other &lt;code&gt;DeweyDecimal&lt;/code&gt;.
     *
     * @param other the other DeweyDecimal
     * @return true if greater than other DeweyDecimal, false otherwise
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isGreaterThan</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>DeweyDecimal</name></type> <name>other</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>max</name> =<init> <expr><call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name><name>other</name>.<name>components</name>.<name>length</name></name></expr></argument>, <argument><expr><name><name>components</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>max</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>component1</name> =<init> <expr>(<name>i</name> &lt; <name><name>components</name>.<name>length</name></name>) ? <name><name>components</name><index>[ <expr><name>i</name></expr> ]</index></name> : 0</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>component2</name> =<init> <expr>(<name>i</name> &lt; <name><name>other</name>.<name>components</name>.<name>length</name></name>) ? <name><name>other</name>.<name>components</name><index>[ <expr><name>i</name></expr> ]</index></name> : 0</expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>component2</name> &gt; <name>component1</name></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>
            }</block></then></if>
            <if>if <condition>(<expr><name>component2</name> &lt; <name>component1</name></expr>)</condition><then> <block>{
                <return>return <expr>true</expr>;</return>
            }</block></then></if>
        }</block></for>

        <return>return <expr>false</expr>;</return> <comment type="line">// Exact match</comment>
    }</block></function>

    <comment type="javadoc">/**
     * Return &lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;DeweyDecimal&lt;/code&gt; is
     * greater than or equal to the other &lt;code&gt;DeweyDecimal&lt;/code&gt;.
     *
     * @param other the other DeweyDecimal
     * @return true if greater than or equal to other DeweyDecimal, false otherwise
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isGreaterThanOrEqual</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>DeweyDecimal</name></type> <name>other</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>max</name> =<init> <expr><call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name><name>other</name>.<name>components</name>.<name>length</name></name></expr></argument>, <argument><expr><name><name>components</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>max</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>component1</name> =<init> <expr>(<name>i</name> &lt; <name><name>components</name>.<name>length</name></name>) ? <name><name>components</name><index>[ <expr><name>i</name></expr> ]</index></name> : 0</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>component2</name> =<init> <expr>(<name>i</name> &lt; <name><name>other</name>.<name>components</name>.<name>length</name></name>) ? <name><name>other</name>.<name>components</name><index>[ <expr><name>i</name></expr> ]</index></name> : 0</expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>component2</name> &gt; <name>component1</name></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>
            }</block></then></if>
            <if>if <condition>(<expr><name>component2</name> &lt; <name>component1</name></expr>)</condition><then> <block>{
                <return>return <expr>true</expr>;</return>
            }</block></then></if>
        }</block></for>

        <return>return <expr>true</expr>;</return> <comment type="line">// Exact match</comment>
    }</block></function>

    <comment type="javadoc">/**
     * Return string representation of &lt;code&gt;DeweyDecimal&lt;/code&gt;.
     *
     * @return the string representation of DeweyDecimal.
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuffer</name></type> <name>sb</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>components</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <if>if <condition>(<expr><name>i</name> != 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>'.'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name><name>components</name><index>[ <expr><name>i</name></expr> ]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <return>return <expr><call><name><name>sb</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<param><decl><type><name>DeweyDecimal</name></type> <name>other</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>max</name> =<init> <expr><call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name><name>other</name>.<name>components</name>.<name>length</name></name></expr></argument>, <argument><expr><name><name>components</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>max</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>component1</name> =<init> <expr>(<name>i</name> &lt; <name><name>components</name>.<name>length</name></name>) ? <name><name>components</name><index>[ <expr><name>i</name></expr> ]</index></name> : 0</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>component2</name> =<init> <expr>(<name>i</name> &lt; <name><name>other</name>.<name>components</name>.<name>length</name></name>) ? <name><name>other</name>.<name>components</name><index>[ <expr><name>i</name></expr> ]</index></name> : 0</expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>component1</name> != <name>component2</name></expr>)</condition><then> <block>{
                <return>return <expr><name>component1</name> - <name>component2</name></expr>;</return>
            }</block></then></if>
        }</block></for>
        <return>return <expr>0</expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>toString</name><argument_list>()</argument_list></call>.<call><name>hashCode</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>o</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name>o</name> <name>instanceof</name> <name>DeweyDecimal</name> &amp;&amp; <call><name>isEqual</name><argument_list>(<argument><expr>(<name>DeweyDecimal</name>) <name>o</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

}</block></class>
</unit>
