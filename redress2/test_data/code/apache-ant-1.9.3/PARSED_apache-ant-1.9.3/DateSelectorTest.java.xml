<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\types\selectors\DateSelectorTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Parameter</name></name>;</import>


<comment type="javadoc">/**
 * Tests Date Selectors.
 *
 */</comment>
<class><specifier>public</specifier> class <name>DateSelectorTest</name> <super><extends>extends <name>BaseSelectorTest</name></extends></super> <block>{

    <constructor><specifier>public</specifier> <name>DateSelectorTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Factory method from base class. This is overriden in child
     * classes to return a specific Selector class.
     */</comment>
    <function><type><specifier>public</specifier> <name>BaseSelector</name></type> <name>getInstance</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>new <call><name>DateSelector</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Test the code that validates the selector.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testValidate</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>DateSelector</name></type> <name>s</name> =<init> <expr>(<name>DateSelector</name>)<call><name>getInstance</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>s</name>.<name>isSelected</name></name><argument_list>(<argument><expr><name>basedir</name></expr></argument>,<argument><expr><name><name>filenames</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>files</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"DateSelector did not check for required fields"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be1</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"You must provide a datetime or the number of "
                    + "milliseconds."</expr></argument>, <argument><expr><call><name><name>be1</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <expr_stmt><expr><name>s</name> = (<name>DateSelector</name>)<call><name>getInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>s</name>.<name>setDatetime</name></name><argument_list>(<argument><expr>"01/01/1969 01:01 AM"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>s</name>.<name>isSelected</name></name><argument_list>(<argument><expr><name>basedir</name></expr></argument>,<argument><expr><name><name>filenames</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>files</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"DateSelector did not check for Datetime being in the "
                    + "allowable range"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be2</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Date of 01/01/1969 01:01 AM results in negative "
                    + "milliseconds value relative to epoch (January 1, "
                    + "1970, 00:00:00 GMT)."</expr></argument>, <argument><expr><call><name><name>be2</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <expr_stmt><expr><name>s</name> = (<name>DateSelector</name>)<call><name>getInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>s</name>.<name>setDatetime</name></name><argument_list>(<argument><expr>"this is not a date"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>s</name>.<name>isSelected</name></name><argument_list>(<argument><expr><name>basedir</name></expr></argument>,<argument><expr><name><name>filenames</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>files</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"DateSelector did not check for Datetime being in a "
                    + "valid format"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be3</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Date of this is not a date"
                        + " Cannot be parsed correctly. It should be in"
                        + " MM/DD/YYYY HH:MM AM_PM format."</expr></argument>, <argument><expr><call><name><name>be3</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <expr_stmt><expr><name>s</name> = (<name>DateSelector</name>)<call><name>getInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Parameter</name></type> <name>param</name> =<init> <expr>new <call><name>Parameter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>param</name>.<name>setName</name></name><argument_list>(<argument><expr>"garbage in"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>param</name>.<name>setValue</name></name><argument_list>(<argument><expr>"garbage out"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Parameter</name><index>[]</index></type> <name>params</name> =<init> <expr>new <name><name>Parameter</name><index>[<expr>1</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>params</name><index>[<expr>0</expr>]</index></name> = <name>param</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>s</name>.<name>setParameters</name></name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>s</name>.<name>isSelected</name></name><argument_list>(<argument><expr><name>basedir</name></expr></argument>,<argument><expr><name><name>filenames</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>files</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"DateSelector did not check for valid parameter element"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be4</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Invalid parameter garbage in"</expr></argument>, <argument><expr><call><name><name>be4</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <expr_stmt><expr><name>s</name> = (<name>DateSelector</name>)<call><name>getInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>param</name> = new <call><name>Parameter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>param</name>.<name>setName</name></name><argument_list>(<argument><expr>"millis"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>param</name>.<name>setValue</name></name><argument_list>(<argument><expr>"garbage out"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>params</name><index>[<expr>0</expr>]</index></name> = <name>param</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>s</name>.<name>setParameters</name></name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>s</name>.<name>isSelected</name></name><argument_list>(<argument><expr><name>basedir</name></expr></argument>,<argument><expr><name><name>filenames</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>files</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"DateSelector did not check for valid millis parameter"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be5</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Invalid millisecond setting garbage out"</expr></argument>,
                    <argument><expr><call><name><name>be5</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <expr_stmt><expr><name>s</name> = (<name>DateSelector</name>)<call><name>getInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>param</name> = new <call><name>Parameter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>param</name>.<name>setName</name></name><argument_list>(<argument><expr>"granularity"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>param</name>.<name>setValue</name></name><argument_list>(<argument><expr>"garbage out"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>params</name><index>[<expr>0</expr>]</index></name> = <name>param</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>s</name>.<name>setParameters</name></name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>s</name>.<name>isSelected</name></name><argument_list>(<argument><expr><name>basedir</name></expr></argument>,<argument><expr><name><name>filenames</name><index>[<expr>0</expr>]</index></name></expr></argument>,<argument><expr><name><name>files</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"DateSelector did not check for valid granularity parameter"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be6</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Invalid granularity setting garbage out"</expr></argument>,
                    <argument><expr><call><name><name>be6</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

    }</block></function>

    <comment type="javadoc">/**
     * Tests to make sure that the selector is selecting files correctly.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testSelectionBehaviour</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>DateSelector</name></type> <name>s</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>results</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>DateSelector</name>.<name>TimeComparisons</name></name></type> <name>before</name> =<init> <expr>new
                <call><name><name>DateSelector</name>.<name>TimeComparisons</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>before</name>.<name>setValue</name></name><argument_list>(<argument><expr>"before"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>DateSelector</name>.<name>TimeComparisons</name></name></type> <name>equal</name> =<init> <expr>new
                <call><name><name>DateSelector</name>.<name>TimeComparisons</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>equal</name>.<name>setValue</name></name><argument_list>(<argument><expr>"equal"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>DateSelector</name>.<name>TimeComparisons</name></name></type> <name>after</name> =<init> <expr>new
                <call><name><name>DateSelector</name>.<name>TimeComparisons</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>after</name>.<name>setValue</name></name><argument_list>(<argument><expr>"after"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <try>try <block>{
            <expr_stmt><expr><call><name>makeBed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>s</name> = (<name>DateSelector</name>)<call><name>getInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>s</name>.<name>setDatetime</name></name><argument_list>(<argument><expr>"10/10/1999 1:45 PM"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>s</name>.<name>setWhen</name></name><argument_list>(<argument><expr><name>before</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>results</name> = <call><name>selectionString</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"TFFFFFFFFFFT"</expr></argument>, <argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>s</name> = (<name>DateSelector</name>)<call><name>getInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>s</name>.<name>setDatetime</name></name><argument_list>(<argument><expr>"10/10/1999 1:45 PM"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>s</name>.<name>setWhen</name></name><argument_list>(<argument><expr><name>before</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>s</name>.<name>setCheckdirs</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>results</name> = <call><name>selectionString</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"FFFFFFFFFFFF"</expr></argument>, <argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>s</name> = (<name>DateSelector</name>)<call><name>getInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>s</name>.<name>setDatetime</name></name><argument_list>(<argument><expr>"10/10/1999 1:45 PM"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>s</name>.<name>setWhen</name></name><argument_list>(<argument><expr><name>after</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>results</name> = <call><name>selectionString</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"TTTTTTTTTTTT"</expr></argument>, <argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>s</name> = (<name>DateSelector</name>)<call><name>getInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>s</name>.<name>setDatetime</name></name><argument_list>(<argument><expr>"11/21/2001 4:54 AM"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>s</name>.<name>setWhen</name></name><argument_list>(<argument><expr><name>before</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>results</name> = <call><name>selectionString</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"TFTFFFFFFFFT"</expr></argument>, <argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>s</name> = (<name>DateSelector</name>)<call><name>getInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>s</name>.<name>setDatetime</name></name><argument_list>(<argument><expr>"11/21/2001 4:55 AM"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>long</name></type> <name>milliseconds</name> =<init> <expr><call><name><name>s</name>.<name>getMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>s</name>.<name>setWhen</name></name><argument_list>(<argument><expr><name>equal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>results</name> = <call><name>selectionString</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"TTFFTFFFTTTT"</expr></argument>, <argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>s</name> = (<name>DateSelector</name>)<call><name>getInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>s</name>.<name>setMillis</name></name><argument_list>(<argument><expr><name>milliseconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>s</name>.<name>setWhen</name></name><argument_list>(<argument><expr><name>equal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>results</name> = <call><name>selectionString</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"TTFFTFFFTTTT"</expr></argument>, <argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>s</name> = (<name>DateSelector</name>)<call><name>getInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>s</name>.<name>setDatetime</name></name><argument_list>(<argument><expr>"11/21/2001 4:56 AM"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>s</name>.<name>setWhen</name></name><argument_list>(<argument><expr><name>after</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>results</name> = <call><name>selectionString</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"TFFTFTTTFFFT"</expr></argument>, <argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>s</name> = (<name>DateSelector</name>)<call><name>getInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Parameter</name></type> <name>param1</name> =<init> <expr>new <call><name>Parameter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Parameter</name></type> <name>param2</name> =<init> <expr>new <call><name>Parameter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>param1</name>.<name>setName</name></name><argument_list>(<argument><expr>"datetime"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>param1</name>.<name>setValue</name></name><argument_list>(<argument><expr>"11/21/2001 4:56 AM"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>param2</name>.<name>setName</name></name><argument_list>(<argument><expr>"when"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>param2</name>.<name>setValue</name></name><argument_list>(<argument><expr>"after"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Parameter</name><index>[]</index></type> <name>params</name> =<init> <expr><block>{<expr><name>param1</name></expr>,<expr><name>param2</name></expr>}</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>s</name>.<name>setParameters</name></name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>results</name> = <call><name>selectionString</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"TFFTFTTTFFFT"</expr></argument>, <argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <try>try <block>{
                <expr_stmt><expr><call><name>makeMirror</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>s</name> = (<name>DateSelector</name>)<call><name>getInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>long</name></type> <name>testtime</name> =<init> <expr><name><name>mirrorfiles</name><index>[<expr>5</expr>]</index></name>.<call><name>lastModified</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>s</name>.<name>setMillis</name></name><argument_list>(<argument><expr><name>testtime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>s</name>.<name>setWhen</name></name><argument_list>(<argument><expr><name>after</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>s</name>.<name>setGranularity</name></name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>results</name> = <call><name>mirrorSelectionString</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"TFFFFTTTTTTT"</expr></argument>, <argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>s</name> = (<name>DateSelector</name>)<call><name>getInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>testtime</name> = <name><name>mirrorfiles</name><index>[<expr>6</expr>]</index></name>.<call><name>lastModified</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>s</name>.<name>setMillis</name></name><argument_list>(<argument><expr><name>testtime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>s</name>.<name>setWhen</name></name><argument_list>(<argument><expr><name>before</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>s</name>.<name>setGranularity</name></name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>results</name> = <call><name>mirrorSelectionString</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"TTTTTTTFFFFT"</expr></argument>, <argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <finally>finally <block>{
                <expr_stmt><expr><call><name>cleanupMirror</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></finally></try>

        }</block>
        <finally>finally <block>{
            <expr_stmt><expr><call><name>cleanupBed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>

    }</block></function>

}</block></class>
</unit>
