<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\taskdefs\ExecTaskTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name></name>.*;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>GregorianCalendar</name></name>;</import>

<comment type="javadoc">/**
 * Unit test for the &amp;lt;exec&amp;gt; task.
 */</comment>
<class><specifier>public</specifier> class <name>ExecTaskTest</name> <super><extends>extends <name>BuildFileTest</name></extends></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>BUILD_PATH</name> =<init> <expr>"src/etc/testcases/taskdefs/exec/"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>BUILD_FILE</name> =<init> <expr><name>BUILD_PATH</name> + "exec.xml"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>TIME_TO_WAIT</name> =<init> <expr>1</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** maximum time allowed for the build in milliseconds */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MAX_BUILD_TIME</name> =<init> <expr>4000</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SECURITY_MARGIN</name> =<init> <expr>2000</expr></init></decl>;</decl_stmt> <comment type="line">// wait 2 second extras</comment>
    <comment type="line">// the test failed with 100 ms of margin on cvs.apache.org on August 1st,</comment>
    <comment type="line">// 2003</comment>

    <comment type="javadoc">/** Utilities used for file operations */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>FileUtils</name></type> <name>FILE_UTILS</name> =<init> <expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>logFile</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>MonitoredBuild</name></type> <name>myBuild</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>volatile</name> <specifier>private</specifier> <name>boolean</name></type> <name>buildFinished</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ExecTaskTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr><name>BUILD_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>logFile</name> != <name>null</name> &amp;&amp; <call><name><name>logFile</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>setProperty</name><argument_list>(<argument><expr>"logFile"</expr></argument>, <argument><expr><call><name><name>logFile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"cleanup"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testspawn</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>project</name>.<name>executeTarget</name></name><argument_list>(<argument><expr>"init"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>project</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"test.can.run"</expr></argument>)</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <expr_stmt><expr><name>myBuild</name> = new <call><name>MonitoredBuild</name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>BUILD_FILE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"spawn"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>logFile</name> = <call><name><name>FILE_UTILS</name>.<name>createTempFile</name></name><argument_list>(<argument><expr>"spawn"</expr></argument>, <argument><expr>"log"</expr></argument>, <argument><expr><call><name><name>project</name>.<name>getBaseDir</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// this is guaranteed by FileUtils#createTempFile</comment>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"log file not existing"</expr></argument>, <argument><expr>!<call><name><name>logFile</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// make the spawned process run 4 seconds</comment>
        <expr_stmt><expr><call><name><name>myBuild</name>.<name>setTimeToWait</name></name><argument_list>(<argument><expr><name>TIME_TO_WAIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>myBuild</name>.<name>setLogFile</name></name><argument_list>(<argument><expr><call><name><name>logFile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>myBuild</name>.<name>addBuildListener</name></name><argument_list>(<argument><expr>new <call><name>MonitoredBuildListener</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>myBuild</name>.<name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>GregorianCalendar</name></type> <name>startwait</name> =<init> <expr>new <call><name>GregorianCalendar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// this loop runs parallel to the build</comment>
        <while>while <condition>(<expr>!<name>buildFinished</name></expr>)</condition> <block>{
            <try>try <block>{
                <expr_stmt><expr><call><name><name>Thread</name>.<name>sleep</name></name><argument_list>(<argument><expr>10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>InterruptedException</name></type> <name>e</name></decl></param>) <block>{
                <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"my sleep was interrupted"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
            <decl_stmt><decl><type><name>GregorianCalendar</name></type> <name>now</name> =<init> <expr>new <call><name>GregorianCalendar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// security</comment>
            <if>if <condition>(<expr><call><name><name>now</name>.<name>getTime</name></name><argument_list>()</argument_list></call>.<call><name>getTime</name><argument_list>()</argument_list></call> - <call><name><name>startwait</name>.<name>getTime</name></name><argument_list>()</argument_list></call>.<call><name>getTime</name><argument_list>()</argument_list></call> &gt; <name>MAX_BUILD_TIME</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"aborting wait, too long "
                        + (<call><name><name>now</name>.<name>getTime</name></name><argument_list>()</argument_list></call>.<call><name>getTime</name><argument_list>()</argument_list></call> - <call><name><name>startwait</name>.<name>getTime</name></name><argument_list>()</argument_list></call>.<call><name>getTime</name><argument_list>()</argument_list></call>)
                        + "milliseconds"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
        }</block></while>
        <comment type="line">// now wait until the spawned process is finished</comment>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>Thread</name>.<name>sleep</name></name><argument_list>(<argument><expr>(<name>TIME_TO_WAIT</name>) * 1000 + <name>SECURITY_MARGIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>InterruptedException</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"my sleep was interrupted"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <comment type="line">// time of the build in milli seconds</comment>
        <decl_stmt><decl><type><name>long</name></type> <name>elapsed</name> =<init> <expr><call><name><name>myBuild</name>.<name>getTimeElapsed</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"we waited more than the process lasted"</expr></argument>,
                <argument><expr><name>TIME_TO_WAIT</name> * 1000 + <name>SECURITY_MARGIN</name> &gt; <name>elapsed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>logFile</name> = new <call><name>File</name><argument_list>(<argument><expr><call><name><name>logFile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"log file found after spawn"</expr></argument>, <argument><expr><call><name><name>logFile</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block">/* TODO #50507 - fails at least on Linux
    public void testOutAndErr() {
        project.executeTarget("test-out-and-err");
    }
    */</comment>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>MonitoredBuild</name> <super><implements>implements <name>Runnable</name></implements></super> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>Thread</name></type> <name>worker</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>myBuildFile</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>target</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>Project</name></type> <name>project</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>timeToWait</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>logFile</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>GregorianCalendar</name></type> <name>timeStarted</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>GregorianCalendar</name></type> <name>timeFinished</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>setLogFile</name><parameter_list>(<param><decl><type><name>String</name></type> <name>logFile</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>logFile</name></name> = <name>logFile</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>project</name>.<name>setProperty</name></name><argument_list>(<argument><expr>"logFile"</expr></argument>, <argument><expr><name>logFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>setTimeToWait</name><parameter_list>(<param><decl><type><name>int</name></type> <name>timeToWait</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>timeToWait</name></name> = <name>timeToWait</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>project</name>.<name>setProperty</name></name><argument_list>(<argument><expr>"timeToWait"</expr></argument>, <argument><expr><call><name><name>Long</name>.<name>toString</name></name><argument_list>(<argument><expr><name>timeToWait</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>addBuildListener</name><parameter_list>(<param><decl><type><name>BuildListener</name></type> <name>bl</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>project</name>.<name>addBuildListener</name></name><argument_list>(<argument><expr><name>bl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <constructor><specifier>public</specifier> <name>MonitoredBuild</name><parameter_list>(<param><decl><type><name>File</name></type> <name>buildFile</name></decl></param>, <param><decl><type><name>String</name></type> <name>target</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name>myBuildFile</name> = <name>buildFile</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>target</name></name> = <name>target</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>project</name> = new <call><name>Project</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>project</name> = new <call><name>Project</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>project</name>.<name>init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>project</name>.<name>setUserProperty</name></name><argument_list>(<argument><expr>"ant.file"</expr></argument>, <argument><expr><call><name><name>myBuildFile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ProjectHelper</name>.<name>configureProject</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr><name>myBuildFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="javadoc">/**
         *
         * @return time in millis of the build
         */</comment>
        <function><type><specifier>public</specifier> <name>long</name></type> <name>getTimeElapsed</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><call><name><name>timeFinished</name>.<name>getTime</name></name><argument_list>()</argument_list></call>.<call><name>getTime</name><argument_list>()</argument_list></call> - <call><name><name>timeStarted</name>.<name>getTime</name></name><argument_list>()</argument_list></call>.<call><name>getTime</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>start</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><name>worker</name> = new <call><name>Thread</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name><name>myBuildFile</name>.<name>toString</name></name><argument_list>()</argument_list></call> + "/" + <name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>worker</name>.<name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name>startProject</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>startProject</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><name>timeStarted</name> = new <call><name>GregorianCalendar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>project</name>.<name>executeTarget</name></name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>timeFinished</name> = new <call><name>GregorianCalendar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>

    <class><specifier>private</specifier> class <name>MonitoredBuildListener</name> <super><implements>implements <name>BuildListener</name></implements></super> <block>{
        <function><type><specifier>public</specifier> <name>void</name></type> <name>buildStarted</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>buildFinished</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>targetStarted</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>targetFinished</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
            <if>if <condition>(<expr><call><name><name>event</name>.<name>getTarget</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr>"spawn"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>buildFinished</name> = true</expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>taskStarted</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>taskFinished</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>messageLogged</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
        }</block></function>
    }</block></class>

}</block></class>
</unit>
