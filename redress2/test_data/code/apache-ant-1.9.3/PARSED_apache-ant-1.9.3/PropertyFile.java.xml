<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\PropertyFile.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>BufferedInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ByteArrayOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>OutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>DateFormat</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>DecimalFormat</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>ParseException</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>SimpleDateFormat</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Calendar</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Date</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Properties</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>LayoutPreservingProperties</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>EnumeratedAttribute</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>

<comment type="javadoc">/**
 *Modifies settings in a property file.
 *
 * &lt;p&gt;
 *The following is an example of its usage:
 *    &lt;ul&gt;&amp;lt;target name="setState"&amp;gt;&lt;br&gt;
 *    &lt;ul&gt;&amp;lt;property&lt;br&gt;
 *        &lt;ul&gt;name="header"&lt;br&gt;
 *        value="##Generated file - do not modify!"/&amp;gt;&lt;br&gt;
 *      &amp;lt;propertyfile file="apropfile.properties" comment="${header}"&amp;gt;&lt;br&gt;
 *        &amp;lt;entry key="product.version.major" type="int"  value="5"/&amp;gt;&lt;br&gt;
 *        &amp;lt;entry key="product.version.minor" type="int"  value="0"/&amp;gt;&lt;br&gt;
 *        &amp;lt;entry key="product.build.major"   type="int"  value="0" /&amp;gt;&lt;br&gt;
 *        &amp;lt;entry key="product.build.minor"   type="int"  operation="+" /&amp;gt;&lt;br&gt;
 *        &amp;lt;entry key="product.build.date"    type="date" value="now" /&amp;gt;&lt;br&gt;
 *        &amp;lt;entry key="intSet" type="int" operation="=" value="681"/&amp;gt;&lt;br&gt;
 *        &amp;lt;entry key="intDec" type="int" operation="-"/&amp;gt;&lt;br&gt;
 *        &amp;lt;entry key="StringEquals" type="string" value="testValue"/&amp;gt;&lt;br&gt;
 *     &amp;lt;/propertyfile&amp;gt;&lt;br&gt;&lt;/ul&gt;
 *   &amp;lt;/target&amp;gt;&lt;/ul&gt;&lt;p&gt;
 *
 *The &amp;lt;propertyfile&amp;gt; task must have:&lt;br&gt;
 *    &lt;ul&gt;&lt;li&gt;file&lt;/li&gt;&lt;/ul&gt;
 *Other parameters are:&lt;br&gt;
 *    &lt;ul&gt;&lt;li&gt;comment, key, operation, type and value (the final four being
 *            eliminated shortly)&lt;/li&gt;&lt;/ul&gt;
 *
 *The &amp;lt;entry&amp;gt; task must have:&lt;br&gt;
 *    &lt;ul&gt;&lt;li&gt;key&lt;/li&gt;&lt;/ul&gt;
 *Other parameters are:&lt;br&gt;
 *    &lt;ul&gt;&lt;li&gt;operation&lt;/li&gt;
 *        &lt;li&gt;type&lt;/li&gt;
 *        &lt;li&gt;value&lt;/li&gt;
 *        &lt;li&gt;default&lt;/li&gt;
 *        &lt;li&gt;unit&lt;/li&gt;
 *    &lt;/ul&gt;
 *
 *If type is unspecified, it defaults to string
 *
 *Parameter values:&lt;br&gt;
 *    &lt;ul&gt;&lt;li&gt;operation:&lt;/li&gt;
 *        &lt;ul&gt;&lt;li&gt;"=" (set -- default)&lt;/li&gt;
 *        &lt;li&gt;"-" (dec)&lt;/li&gt;
 *        &lt;li&gt;"+" (inc)&lt;/li&gt;
 *
 *    &lt;li&gt;type:&lt;/li&gt;
 *        &lt;ul&gt;&lt;li&gt;"int"&lt;/li&gt;
 *        &lt;li&gt;"date"&lt;/li&gt;
 *        &lt;li&gt;"string"&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;
 *
 *    &lt;li&gt;value:&lt;/li&gt;
 *      &lt;ul&gt;&lt;li&gt;holds the default value, if the property
 *              was not found in property file&lt;/li&gt;
 *          &lt;li&gt;"now" In case of type "date", the
 *              value "now" will be replaced by the current
 *              date/time and used even if a valid date was
 *              found in the property file.&lt;/li&gt;&lt;/ul&gt;
 *
 *
 *String property types can only use the "=" operation.
 *Int property types can only use the "=", "-" or "+" operations.&lt;p&gt;
 *
 *The message property is used for the property file header, with "\\" being
 *a newline delimiter character.
 *
 */</comment>
<class><specifier>public</specifier> class <name>PropertyFile</name> <super><extends>extends <name>Task</name></extends></super> <block>{

    <comment type="block">/* ========================================================================
     *
     * Instance variables.
     */</comment>

    <comment type="line">// Use this to prepend a message to the properties file</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type>              <name>comment</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Properties</name></type>          <name>properties</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type>                <name>propertyfile</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type>             <name>useJDKProperties</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Vector</name></type> <name>entries</name> =<init> <expr>new <call><name>Vector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/* ========================================================================
     *
     * Constructors
     */</comment>

    <comment type="block">/* ========================================================================
     *
     * Methods
     */</comment>

    <comment type="javadoc">/**
     * Execute the task.
     * @throws BuildException on error.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>checkParameters</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>readFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>executeOperation</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>writeFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The entry nested element.
     * @return an entry nested element to be configured.
     */</comment>
    <function><type><specifier>public</specifier> <name>Entry</name></type> <name>createEntry</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Entry</name></type> <name>e</name> =<init> <expr>new <call><name>Entry</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>entries</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>e</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>executeOperation</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <for>for (<init><decl><type><name>Enumeration</name></type> <name>e</name> =<init> <expr><call><name><name>entries</name>.<name>elements</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
            <decl_stmt><decl><type><name>Entry</name></type> <name>entry</name> =<init> <expr>(<name>Entry</name>) <call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>entry</name>.<name>executeOn</name></name><argument_list>(<argument><expr><name>properties</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>readFile</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>useJDKProperties</name></expr>)</condition><then> <block>{
            <comment type="line">// user chose to use standard Java properties, which loose</comment>
            <comment type="line">// comments and layout</comment>
            <expr_stmt><expr><name>properties</name> = new <call><name>Properties</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>properties</name> = new <call><name>LayoutPreservingProperties</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <try>try <block>{
            <if>if <condition>(<expr><call><name><name>propertyfile</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Updating property file: "
                    + <call><name><name>propertyfile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>FileInputStream</name></type> <name>fis</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <try>try <block>{
                    <expr_stmt><expr><name>fis</name> = new <call><name>FileInputStream</name><argument_list>(<argument><expr><name>propertyfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>BufferedInputStream</name></type> <name>bis</name> =<init> <expr>new <call><name>BufferedInputStream</name><argument_list>(<argument><expr><name>fis</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>properties</name>.<name>load</name></name><argument_list>(<argument><expr><name>bis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <finally>finally <block>{
                    <if>if <condition>(<expr><name>fis</name> != <name>null</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>fis</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></finally></try>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Creating new property file: "
                    + <call><name><name>propertyfile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>FileOutputStream</name></type> <name>out</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <try>try <block>{
                    <expr_stmt><expr><name>out</name> = new <call><name>FileOutputStream</name><argument_list>(<argument><expr><call><name><name>propertyfile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>out</name>.<name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block> <finally>finally <block>{
                    <if>if <condition>(<expr><name>out</name> != <name>null</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>out</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></finally></try>
            }</block></else></if>
        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ioe</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><call><name><name>ioe</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>checkParameters</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr>!<call><name>checkParam</name><argument_list>(<argument><expr><name>propertyfile</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"file token must not be null."</expr></argument>,
                                     <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Location of the property file to be edited; required.
     * @param file the property file.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>file</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>propertyfile</name> = <name>file</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * optional header comment for the file
     * @param hdr the string to use for the comment.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setComment</name><parameter_list>(<param><decl><type><name>String</name></type> <name>hdr</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>comment</name> = <name>hdr</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * optional flag to use original Java properties (as opposed to
     * layout preserving properties)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setJDKProperties</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>val</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>useJDKProperties</name> = <name>val</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeFile</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <comment type="line">// Write to RAM first, as an OOME could otherwise produce a truncated file:</comment>
        <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>baos</name> =<init> <expr>new <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>properties</name>.<name>store</name></name><argument_list>(<argument><expr><name>baos</name></expr></argument>, <argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>x</name></decl></param>) <block>{ <comment type="line">// should not happen</comment>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
        <try>try <block>{
            <decl_stmt><decl><type><name>OutputStream</name></type> <name>os</name> =<init> <expr>new <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>propertyfile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <try>try <block>{
                <try>try <block>{
                    <expr_stmt><expr><call><name><name>os</name>.<name>write</name></name><argument_list>(<argument><expr><call><name><name>baos</name>.<name>toByteArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <finally>finally <block>{
                    <expr_stmt><expr><call><name><name>os</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></finally></try>
            }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>x</name></decl></param>) <block>{ <comment type="line">// possibly corrupt</comment>
                <expr_stmt><expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call>.<call><name>tryHardToDelete</name><argument_list>(<argument><expr><name>propertyfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <throw>throw <expr><name>x</name></expr>;</throw>
            }</block></catch></try>
        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>x</name></decl></param>) <block>{ <comment type="line">// opening, writing, or closing</comment>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>checkParam</name><parameter_list>(<param><decl><type><name>File</name></type> <name>param</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>!(<name>param</name> == <name>null</name>)</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Instance of this class represents nested elements of
     * a task propertyfile.
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Entry</name> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DEFAULT_INT_VALUE</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEFAULT_DATE_VALUE</name> =<init> <expr>"now"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEFAULT_STRING_VALUE</name> =<init> <expr>""</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type>              <name>key</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type>                 <name>type</name> =<init> <expr><name><name>Type</name>.<name>STRING_TYPE</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type>                 <name>operation</name> =<init> <expr><name><name>Operation</name>.<name>EQUALS_OPER</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type>              <name>value</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type>              <name>defaultValue</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type>              <name>newValue</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type>              <name>pattern</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type>                 <name>field</name> =<init> <expr><name><name>Calendar</name>.<name>DATE</name></name></expr></init></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * Name of the property name/value pair
         * @param value the key.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setKey</name><parameter_list>(<param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>key</name></name> = <name>value</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * Value to set (=), to add (+) or subtract (-)
         * @param value the value.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setValue</name><parameter_list>(<param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>value</name></name> = <name>value</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * operation to apply.
         * &amp;quot;+&amp;quot; or &amp;quot;=&amp;quot;
         *(default) for all datatypes; &amp;quot;-&amp;quot; for date and int only)\.
         * @param value the operation enumerated value.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setOperation</name><parameter_list>(<param><decl><type><name>Operation</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>operation</name></name> = <call><name><name>Operation</name>.<name>toOperation</name></name><argument_list>(<argument><expr><call><name><name>value</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * Regard the value as : int, date or string (default)
         * @param value the type enumerated value.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setType</name><parameter_list>(<param><decl><type><name>Type</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>type</name></name> = <call><name><name>Type</name>.<name>toType</name></name><argument_list>(<argument><expr><call><name><name>value</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * Initial value to set for a property if it is not
         * already defined in the property file.
         * For type date, an additional keyword is allowed: &amp;quot;now&amp;quot;
         * @param value the default value.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setDefault</name><parameter_list>(<param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>defaultValue</name></name> = <name>value</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * For int and date type only. If present, Values will
         * be parsed and formatted accordingly.
         * @param value the pattern to use.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setPattern</name><parameter_list>(<param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>pattern</name></name> = <name>value</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * The unit of the value to be applied to date +/- operations.
         *            Valid Values are:
         *            &lt;ul&gt;
         *               &lt;li&gt;millisecond&lt;/li&gt;
         *               &lt;li&gt;second&lt;/li&gt;
         *               &lt;li&gt;minute&lt;/li&gt;
         *               &lt;li&gt;hour&lt;/li&gt;
         *               &lt;li&gt;day (default)&lt;/li&gt;
         *               &lt;li&gt;week&lt;/li&gt;
         *               &lt;li&gt;month&lt;/li&gt;
         *               &lt;li&gt;year&lt;/li&gt;
         *            &lt;/ul&gt;
         *            This only applies to date types using a +/- operation.
         * @param unit the unit enumerated value.
         * @since Ant 1.5
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setUnit</name><parameter_list>(<param><decl><type><name><name>PropertyFile</name>.<name>Unit</name></name></type> <name>unit</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name>field</name> = <call><name><name>unit</name>.<name>getCalendarField</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * Apply the nested element to the properties.
         * @param props the properties to apply the entry on.
         * @throws BuildException if there is an error.
         */</comment>
        <function><type><specifier>protected</specifier> <name>void</name></type> <name>executeOn</name><parameter_list>(<param><decl><type><name>Properties</name></type> <name>props</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
            <expr_stmt><expr><call><name>checkParameters</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            
            <if>if <condition>(<expr><name>operation</name> == <name><name>Operation</name>.<name>DELETE_OPER</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>props</name>.<name>remove</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            }</block></then></if>

            <comment type="line">// type may be null because it wasn't set</comment>
            <decl_stmt><decl><type><name>String</name></type> <name>oldValue</name> =<init> <expr>(<name>String</name>) <call><name><name>props</name>.<name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <try>try <block>{
                <if>if <condition>(<expr><name>type</name> == <name><name>Type</name>.<name>INTEGER_TYPE</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>executeInteger</name><argument_list>(<argument><expr><name>oldValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <if>if <condition>(<expr><name>type</name> == <name><name>Type</name>.<name>DATE_TYPE</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>executeDate</name><argument_list>(<argument><expr><name>oldValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <if>if <condition>(<expr><name>type</name> == <name><name>Type</name>.<name>STRING_TYPE</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>executeString</name><argument_list>(<argument><expr><name>oldValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Unknown operation type: "
                                             + <name>type</name></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></else></if></else></if></else></if>
            }</block> <catch>catch (<param><decl><type><name>NullPointerException</name></type> <name>npe</name></decl></param>) <block>{
                <comment type="line">// Default to string type</comment>
                <comment type="line">// which means do nothing</comment>
                <expr_stmt><expr><call><name><name>npe</name>.<name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>

            <if>if <condition>(<expr><name>newValue</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>newValue</name> = ""</expr>;</expr_stmt>
            }</block></then></if>

            <comment type="line">// Insert as a string by default</comment>
            <expr_stmt><expr><call><name><name>props</name>.<name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>newValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * Handle operations for type &lt;code&gt;date&lt;/code&gt;.
         *
         * @param oldValue the current value read from the property file or
         *                 &lt;code&gt;null&lt;/code&gt; if the &lt;code&gt;key&lt;/code&gt; was
         *                 not contained in the property file.
         */</comment>
        <function><type><specifier>private</specifier> <name>void</name></type> <name>executeDate</name><parameter_list>(<param><decl><type><name>String</name></type> <name>oldValue</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
            <decl_stmt><decl><type><name>Calendar</name></type> <name>currentValue</name> =<init> <expr><call><name><name>Calendar</name>.<name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>pattern</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>pattern</name> = "yyyy/MM/dd HH:mm"</expr>;</expr_stmt>
            }</block></then></if>
            <decl_stmt><decl><type><name>DateFormat</name></type> <name>fmt</name> =<init> <expr>new <call><name>SimpleDateFormat</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>String</name></type> <name>currentStringValue</name> =<init> <expr><call><name>getCurrentValue</name><argument_list>(<argument><expr><name>oldValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>currentStringValue</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>currentStringValue</name> = <name>DEFAULT_DATE_VALUE</name></expr>;</expr_stmt>
            }</block></then></if>

            <if>if <condition>(<expr>"now".<call><name>equals</name><argument_list>(<argument><expr><name>currentStringValue</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>currentValue</name>.<name>setTime</name></name><argument_list>(<argument><expr>new <call><name>Date</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <try>try <block>{
                    <expr_stmt><expr><call><name><name>currentValue</name>.<name>setTime</name></name><argument_list>(<argument><expr><call><name><name>fmt</name>.<name>parse</name></name><argument_list>(<argument><expr><name>currentStringValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>ParseException</name></type> <name>pe</name></decl></param>)  <block>{
                    <comment type="line">// swallow</comment>
                }</block></catch></try>
            }</block></else></if>

            <if>if <condition>(<expr><name>operation</name> != <name><name>Operation</name>.<name>EQUALS_OPER</name></name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>offset</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
                <try>try <block>{
                    <expr_stmt><expr><name>offset</name> = <call><name><name>Integer</name>.<name>parseInt</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>operation</name> == <name><name>Operation</name>.<name>DECREMENT_OPER</name></name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>offset</name> = -1 * <name>offset</name></expr>;</expr_stmt>
                    }</block></then></if>
                }</block> <catch>catch (<param><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></param>) <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Value not an integer on " + <name>key</name></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></catch></try>
                <expr_stmt><expr><call><name><name>currentValue</name>.<name>add</name></name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><name>newValue</name> = <call><name><name>fmt</name>.<name>format</name></name><argument_list>(<argument><expr><call><name><name>currentValue</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>


        <comment type="javadoc">/**
         * Handle operations for type &lt;code&gt;int&lt;/code&gt;.
         *
         * @param oldValue the current value read from the property file or
         *                 &lt;code&gt;null&lt;/code&gt; if the &lt;code&gt;key&lt;/code&gt; was
         *                 not contained in the property file.
         */</comment>
        <function><type><specifier>private</specifier> <name>void</name></type> <name>executeInteger</name><parameter_list>(<param><decl><type><name>String</name></type> <name>oldValue</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>currentValue</name> =<init> <expr><name>DEFAULT_INT_VALUE</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>newV</name>  =<init> <expr><name>DEFAULT_INT_VALUE</name></expr></init></decl>;</decl_stmt>


            <decl_stmt><decl><type><name>DecimalFormat</name></type> <name>fmt</name> =<init> <expr>(<name>pattern</name> != <name>null</name>) ? new <call><name>DecimalFormat</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call>
                : new <call><name>DecimalFormat</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <try>try <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>curval</name> =<init> <expr><call><name>getCurrentValue</name><argument_list>(<argument><expr><name>oldValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>curval</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>currentValue</name> = <call><name><name>fmt</name>.<name>parse</name></name><argument_list>(<argument><expr><name>curval</name></expr></argument>)</argument_list></call>.<call><name>intValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><name>currentValue</name> = 0</expr>;</expr_stmt>
                }</block></else></if>
            }</block> <catch>catch (<param><decl><type><name>NumberFormatException</name></type> <name>nfe</name></decl></param>) <block>{
                <comment type="line">// swallow</comment>
            }</block></catch> <catch>catch (<param><decl><type><name>ParseException</name></type> <name>pe</name></decl></param>)  <block>{
                <comment type="line">// swallow</comment>
            }</block></catch></try>

            <if>if <condition>(<expr><name>operation</name> == <name><name>Operation</name>.<name>EQUALS_OPER</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>newV</name> = <name>currentValue</name></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>operationValue</name> =<init> <expr>1</expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>value</name> != <name>null</name></expr>)</condition><then> <block>{
                    <try>try <block>{
                        <expr_stmt><expr><name>operationValue</name> = <call><name><name>fmt</name>.<name>parse</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call>.<call><name>intValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block> <catch>catch (<param><decl><type><name>NumberFormatException</name></type> <name>nfe</name></decl></param>) <block>{
                        <comment type="line">// swallow</comment>
                    }</block></catch> <catch>catch (<param><decl><type><name>ParseException</name></type> <name>pe</name></decl></param>)  <block>{
                        <comment type="line">// swallow</comment>
                    }</block></catch></try>
                }</block></then></if>

                <if>if <condition>(<expr><name>operation</name> == <name><name>Operation</name>.<name>INCREMENT_OPER</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>newV</name> = <name>currentValue</name> + <name>operationValue</name></expr>;</expr_stmt>
                }</block></then> <else>else <if>if <condition>(<expr><name>operation</name> == <name><name>Operation</name>.<name>DECREMENT_OPER</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>newV</name> = <name>currentValue</name> - <name>operationValue</name></expr>;</expr_stmt>
                }</block></then></if></else></if>
            }</block></else></if>

            <expr_stmt><expr><name><name>this</name>.<name>newValue</name></name> = <call><name><name>fmt</name>.<name>format</name></name><argument_list>(<argument><expr><name>newV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * Handle operations for type &lt;code&gt;string&lt;/code&gt;.
         *
         * @param oldValue the current value read from the property file or
         *                 &lt;code&gt;null&lt;/code&gt; if the &lt;code&gt;key&lt;/code&gt; was
         *                 not contained in the property file.
         */</comment>
        <function><type><specifier>private</specifier> <name>void</name></type> <name>executeString</name><parameter_list>(<param><decl><type><name>String</name></type> <name>oldValue</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>newV</name>  =<init> <expr><name>DEFAULT_STRING_VALUE</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>String</name></type> <name>currentValue</name> =<init> <expr><call><name>getCurrentValue</name><argument_list>(<argument><expr><name>oldValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>currentValue</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>currentValue</name> = <name>DEFAULT_STRING_VALUE</name></expr>;</expr_stmt>
            }</block></then></if>

            <if>if <condition>(<expr><name>operation</name> == <name><name>Operation</name>.<name>EQUALS_OPER</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>newV</name> = <name>currentValue</name></expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><name>operation</name> == <name><name>Operation</name>.<name>INCREMENT_OPER</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>newV</name> = <name>currentValue</name> + <name>value</name></expr>;</expr_stmt>
            }</block></then></if></else></if>
            <expr_stmt><expr><name><name>this</name>.<name>newValue</name></name> = <name>newV</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * Check if parameter combinations can be supported
         * @todo make sure the 'unit' attribute is only specified on date
         *      fields
         */</comment>
        <function><type><specifier>private</specifier> <name>void</name></type> <name>checkParameters</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
            <if>if <condition>(<expr><name>type</name> == <name><name>Type</name>.<name>STRING_TYPE</name></name>
                &amp;&amp; <name>operation</name> == <name><name>Operation</name>.<name>DECREMENT_OPER</name></name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"- is not supported for string "
                                         + "properties (key:" + <name>key</name> + ")"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <if>if <condition>(<expr><name>value</name> == <name>null</name> &amp;&amp; <name>defaultValue</name> == <name>null</name>  &amp;&amp; <name>operation</name> != <name><name>Operation</name>.<name>DELETE_OPER</name></name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"\"value\" and/or \"default\" "
                                         + "attribute must be specified (key:" + <name>key</name> + ")"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <if>if <condition>(<expr><name>key</name> == <name>null</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"key is mandatory"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <if>if <condition>(<expr><name>type</name> == <name><name>Type</name>.<name>STRING_TYPE</name></name> &amp;&amp; <name>pattern</name> != <name>null</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"pattern is not supported for string "
                                         + "properties (key:" + <name>key</name> + ")"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
        }</block></function>

        <function><type><specifier>private</specifier> <name>String</name></type> <name>getCurrentValue</name><parameter_list>(<param><decl><type><name>String</name></type> <name>oldValue</name></decl></param>)</parameter_list> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>ret</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>operation</name> == <name><name>Operation</name>.<name>EQUALS_OPER</name></name></expr>)</condition><then> <block>{
                <comment type="line">// If only value is specified, the property is set to it</comment>
                <comment type="line">// regardless of its previous value.</comment>
                <if>if <condition>(<expr><name>value</name> != <name>null</name> &amp;&amp; <name>defaultValue</name> == <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>ret</name> = <name>value</name></expr>;</expr_stmt>
                }</block></then></if>

                <comment type="line">// If only default is specified and the property previously</comment>
                <comment type="line">// existed in the property file, it is unchanged.</comment>
                <if>if <condition>(<expr><name>value</name> == <name>null</name> &amp;&amp; <name>defaultValue</name> != <name>null</name> &amp;&amp; <name>oldValue</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>ret</name> = <name>oldValue</name></expr>;</expr_stmt>
                }</block></then></if>

                <comment type="line">// If only default is specified and the property did not</comment>
                <comment type="line">// exist in the property file, the property is set to default.</comment>
                <if>if <condition>(<expr><name>value</name> == <name>null</name> &amp;&amp; <name>defaultValue</name> != <name>null</name> &amp;&amp; <name>oldValue</name> == <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>ret</name> = <name>defaultValue</name></expr>;</expr_stmt>
                }</block></then></if>

                <comment type="line">// If value and default are both specified and the property</comment>
                <comment type="line">// previously existed in the property file, the property</comment>
                <comment type="line">// is set to value.</comment>
                <if>if <condition>(<expr><name>value</name> != <name>null</name> &amp;&amp; <name>defaultValue</name> != <name>null</name> &amp;&amp; <name>oldValue</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>ret</name> = <name>value</name></expr>;</expr_stmt>
                }</block></then></if>

                <comment type="line">// If value and default are both specified and the property</comment>
                <comment type="line">// did not exist in the property file, the property is set</comment>
                <comment type="line">// to default.</comment>
                <if>if <condition>(<expr><name>value</name> != <name>null</name> &amp;&amp; <name>defaultValue</name> != <name>null</name> &amp;&amp; <name>oldValue</name> == <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>ret</name> = <name>defaultValue</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>ret</name> = (<name>oldValue</name> == <name>null</name>) ? <name>defaultValue</name> : <name>oldValue</name></expr>;</expr_stmt>
            }</block></else></if>

            <return>return <expr><name>ret</name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Enumerated attribute with the values "+", "-", "="
         */</comment>
        <class><specifier>public</specifier> <specifier>static</specifier> class <name>Operation</name> <super><extends>extends <name>EnumeratedAttribute</name></extends></super> <block>{

            <comment type="line">// Property type operations</comment>
            <comment type="javadoc">/** + */</comment>
            <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>INCREMENT_OPER</name> =<init>   <expr>0</expr></init></decl>;</decl_stmt>
            <comment type="javadoc">/** - */</comment>
            <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DECREMENT_OPER</name> =<init>   <expr>1</expr></init></decl>;</decl_stmt>
            <comment type="javadoc">/** = */</comment>
            <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>EQUALS_OPER</name> =<init>      <expr>2</expr></init></decl>;</decl_stmt>
            <comment type="javadoc">/** del */</comment>
            <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DELETE_OPER</name> =<init>      <expr>3</expr></init></decl>;</decl_stmt>

            <comment type="javadoc">/** {@inheritDoc}. */</comment>
            <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getValues</name><parameter_list>()</parameter_list> <block>{
                <return>return <expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"+"</expr>, <expr>"-"</expr>, <expr>"="</expr>, <expr>"del"</expr>}</block></expr>;</return>
            }</block></function>

            <comment type="javadoc">/**
             * Convert string to index.
             * @param oper the string to convert.
             * @return the index.
             */</comment>
            <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>toOperation</name><parameter_list>(<param><decl><type><name>String</name></type> <name>oper</name></decl></param>)</parameter_list> <block>{
                <if>if <condition>(<expr>"+".<call><name>equals</name><argument_list>(<argument><expr><name>oper</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <return>return <expr><name>INCREMENT_OPER</name></expr>;</return>
                }</block></then> <else>else <if>if <condition>(<expr>"-".<call><name>equals</name><argument_list>(<argument><expr><name>oper</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <return>return <expr><name>DECREMENT_OPER</name></expr>;</return>
                }</block></then> <else>else <if>if <condition>(<expr>"del".<call><name>equals</name><argument_list>(<argument><expr><name>oper</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <return>return <expr><name>DELETE_OPER</name></expr>;</return>
                }</block></then></if></else></if></else></if>
                <return>return <expr><name>EQUALS_OPER</name></expr>;</return>
            }</block></function>
        }</block></class>

        <comment type="javadoc">/**
         * Enumerated attribute with the values "int", "date" and "string".
         */</comment>
        <class><specifier>public</specifier> <specifier>static</specifier> class <name>Type</name> <super><extends>extends <name>EnumeratedAttribute</name></extends></super> <block>{

            <comment type="line">// Property types</comment>
            <comment type="javadoc">/** int */</comment>
            <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>INTEGER_TYPE</name> =<init>     <expr>0</expr></init></decl>;</decl_stmt>
            <comment type="javadoc">/** date */</comment>
            <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DATE_TYPE</name> =<init>        <expr>1</expr></init></decl>;</decl_stmt>
            <comment type="javadoc">/** string */</comment>
            <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>STRING_TYPE</name> =<init>      <expr>2</expr></init></decl>;</decl_stmt>

            <comment type="javadoc">/** {@inheritDoc} */</comment>
            <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getValues</name><parameter_list>()</parameter_list> <block>{
                <return>return <expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"int"</expr>, <expr>"date"</expr>, <expr>"string"</expr>}</block></expr>;</return>
            }</block></function>

            <comment type="javadoc">/**
             * Convert string to index.
             * @param type the string to convert.
             * @return the index.
             */</comment>
            <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>toType</name><parameter_list>(<param><decl><type><name>String</name></type> <name>type</name></decl></param>)</parameter_list> <block>{
                <if>if <condition>(<expr>"int".<call><name>equals</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <return>return <expr><name>INTEGER_TYPE</name></expr>;</return>
                }</block></then> <else>else <if>if <condition>(<expr>"date".<call><name>equals</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <return>return <expr><name>DATE_TYPE</name></expr>;</return>
                }</block></then></if></else></if>
                <return>return <expr><name>STRING_TYPE</name></expr>;</return>
            }</block></function>
        }</block></class>
    }</block></class>

    <comment type="javadoc">/**
     * Borrowed from Tstamp
     * @todo share all this time stuff across many tasks as a datetime datatype
     * @since Ant 1.5
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Unit</name> <super><extends>extends <name>EnumeratedAttribute</name></extends></super> <block>{

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>MILLISECOND</name> =<init> <expr>"millisecond"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SECOND</name> =<init> <expr>"second"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>MINUTE</name> =<init> <expr>"minute"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>HOUR</name> =<init> <expr>"hour"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DAY</name> =<init> <expr>"day"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>WEEK</name> =<init> <expr>"week"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>MONTH</name> =<init> <expr>"month"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>YEAR</name> =<init> <expr>"year"</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name><index>[]</index></type> <name>UNITS</name>
            =<init> <expr><block>{<expr><name>MILLISECOND</name></expr>, <expr><name>SECOND</name></expr>, <expr><name>MINUTE</name></expr>, <expr><name>HOUR</name></expr>,
               <expr><name>DAY</name></expr>, <expr><name>WEEK</name></expr>, <expr><name>MONTH</name></expr>, <expr><name>YEAR</name></expr> }</block></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <name>Map</name></type> <name>calendarFields</name> =<init> <expr>new <call><name>HashMap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="javadoc">/** no arg constructor */</comment>
        <constructor><specifier>public</specifier> <name>Unit</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>calendarFields</name>.<name>put</name></name><argument_list>(<argument><expr><name>MILLISECOND</name></expr></argument>,
                               <argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>MILLISECOND</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>calendarFields</name>.<name>put</name></name><argument_list>(<argument><expr><name>SECOND</name></expr></argument>, <argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>SECOND</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>calendarFields</name>.<name>put</name></name><argument_list>(<argument><expr><name>MINUTE</name></expr></argument>, <argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>MINUTE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>calendarFields</name>.<name>put</name></name><argument_list>(<argument><expr><name>HOUR</name></expr></argument>, <argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>HOUR_OF_DAY</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>calendarFields</name>.<name>put</name></name><argument_list>(<argument><expr><name>DAY</name></expr></argument>, <argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>DATE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>calendarFields</name>.<name>put</name></name><argument_list>(<argument><expr><name>WEEK</name></expr></argument>, <argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>WEEK_OF_YEAR</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>calendarFields</name>.<name>put</name></name><argument_list>(<argument><expr><name>MONTH</name></expr></argument>, <argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>MONTH</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>calendarFields</name>.<name>put</name></name><argument_list>(<argument><expr><name>YEAR</name></expr></argument>, <argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>YEAR</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="javadoc">/**
         * Convert the value to a Calendar field index.
         * @return the calander value.
         */</comment>
        <function><type><specifier>public</specifier> <name>int</name></type> <name>getCalendarField</name><parameter_list>()</parameter_list> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>key</name> =<init> <expr><call><name>getValue</name><argument_list>()</argument_list></call>.<call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Integer</name></type> <name>i</name> =<init> <expr>(<name>Integer</name>) <call><name><name>calendarFields</name>.<name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>i</name>.<name>intValue</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="javadoc">/** {@inheritDoc}. */</comment>
        <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getValues</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>UNITS</name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
