<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\depend\constantpool\ConstantPool.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>depend</name>.<name>constantpool</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>DataInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>

<comment type="javadoc">/**
 * The constant pool of a Java class. The constant pool is a collection of
 * constants used in a Java class file. It stores strings, constant values,
 * class names, method names, field names etc.
 *
 * @see &lt;a href="http://java.sun.com/docs/books/vmspec/"&gt;The Java Virtual
 *      Machine Specification&lt;/a&gt;
 */</comment>
<class><specifier>public</specifier> class <name>ConstantPool</name> <block>{

    <comment type="javadoc">/** The entries in the constant pool. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list>&lt;<argument><name>ConstantPoolEntry</name></argument>&gt;</argument_list></name></type> <name>entries</name> =<init> <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>ConstantPoolEntry</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * A Hashtable of UTF8 entries - used to get constant pool indexes of
     * the UTF8 values quickly
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>utf8Indexes</name> =<init> <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Initialise the constant pool. */</comment>
    <constructor><specifier>public</specifier> <name>ConstantPool</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// The zero index is never present in the constant pool itself so</comment>
        <comment type="line">// we add a null entry for it</comment>
        <expr_stmt><expr><call><name><name>entries</name>.<name>add</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Read the constant pool from a class input stream.
     *
     * @param classStream the DataInputStream of a class file.
     * @exception IOException if there is a problem reading the constant pool
     *      from the stream
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>read</name><parameter_list>(<param><decl><type><name>DataInputStream</name></type> <name>classStream</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>numEntries</name> =<init> <expr><call><name><name>classStream</name>.<name>readUnsignedShort</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>1</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>numEntries</name></expr>;</condition><incr/>) <block>{
            <decl_stmt><decl><type><name>ConstantPoolEntry</name></type> <name>nextEntry</name>
                 =<init> <expr><call><name><name>ConstantPoolEntry</name>.<name>readEntry</name></name><argument_list>(<argument><expr><name>classStream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>i</name> += <call><name><name>nextEntry</name>.<name>getNumEntries</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>addEntry</name><argument_list>(<argument><expr><name>nextEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Get the size of the constant pool.
     *
     * @return the size of the constant pool
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>size</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>entries</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Add an entry to the constant pool.
     *
     * @param entry the new entry to be added to the constant pool.
     * @return the index into the constant pool at which the entry is
     *      stored.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>addEntry</name><parameter_list>(<param><decl><type><name>ConstantPoolEntry</name></type> <name>entry</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> =<init> <expr><call><name><name>entries</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>entries</name>.<name>add</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>numSlots</name> =<init> <expr><call><name><name>entry</name>.<name>getNumEntries</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// add null entries for any additional slots required.</comment>
        <for>for (<init><decl><type><name>int</name></type> <name>j</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>j</name> &lt; <name>numSlots</name> - 1</expr>;</condition> <incr><expr>++<name>j</name></expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>entries</name>.<name>add</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <if>if <condition>(<expr><name>entry</name> <name>instanceof</name> <name>Utf8CPInfo</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Utf8CPInfo</name></type> <name>utf8Info</name> =<init> <expr>(<name>Utf8CPInfo</name>) <name>entry</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>utf8Indexes</name>.<name>put</name></name><argument_list>(<argument><expr><call><name><name>utf8Info</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <return>return <expr><name>index</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Resolve the entries in the constant pool. Resolution of the constant
     * pool involves transforming indexes to other constant pool entries
     * into the actual data for that entry.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>resolve</name><parameter_list>()</parameter_list> <block>{
        <for>for (<init><decl><type><name>ConstantPoolEntry</name></type> <name>poolInfo</name> :<range> <expr><name>entries</name></expr></range></decl></init>) <block>{
            <if>if <condition>(<expr><name>poolInfo</name> != <name>null</name> &amp;&amp; !<call><name><name>poolInfo</name>.<name>isResolved</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>poolInfo</name>.<name>resolve</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
    }</block></function>


    <comment type="javadoc">/**
     * Get an constant pool entry at a particular index.
     *
     * @param index the index into the constant pool.
     * @return the constant pool entry at that index.
     */</comment>
    <function><type><specifier>public</specifier> <name>ConstantPoolEntry</name></type> <name>getEntry</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>entries</name>.<name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the index of a given UTF8 constant pool entry.
     *
     * @param value the string value of the UTF8 entry.
     * @return the index at which the given string occurs in the constant
     *      pool or -1 if the value does not occur.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getUTF8Entry</name><parameter_list>(<param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Integer</name></type> <name>indexInteger</name> =<init> <expr><call><name><name>utf8Indexes</name>.<name>get</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>indexInteger</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>index</name> = <call><name><name>indexInteger</name>.<name>intValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <return>return <expr><name>index</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the index of a given CONSTANT_CLASS entry in the constant pool.
     *
     * @param className the name of the class for which the class entry
     *      index is required.
     * @return the index at which the given class entry occurs in the
     *      constant pool or -1 if the value does not occur.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getClassEntry</name><parameter_list>(<param><decl><type><name>String</name></type> <name>className</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>size</name> =<init> <expr><call><name><name>entries</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>size</name> &amp;&amp; <name>index</name> == -1</expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
            <decl_stmt><decl><type><name>Object</name></type> <name>element</name> =<init> <expr><call><name><name>entries</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>element</name> <name>instanceof</name> <name>ClassCPInfo</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>ClassCPInfo</name></type> <name>classinfo</name> =<init> <expr>(<name>ClassCPInfo</name>) <name>element</name></expr></init></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name><name>classinfo</name>.<name>getClassName</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><name>className</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>index</name> = <name>i</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></for>

        <return>return <expr><name>index</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the index of a given constant value entry in the constant pool.
     *
     * @param constantValue the constant value for which the index is
     *      required.
     * @return the index at which the given value entry occurs in the
     *      constant pool or -1 if the value does not occur.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getConstantEntry</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>constantValue</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>size</name> =<init> <expr><call><name><name>entries</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>size</name> &amp;&amp; <name>index</name> == -1</expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
            <decl_stmt><decl><type><name>Object</name></type> <name>element</name> =<init> <expr><call><name><name>entries</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>element</name> <name>instanceof</name> <name>ConstantCPInfo</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>ConstantCPInfo</name></type> <name>constantEntry</name> =<init> <expr>(<name>ConstantCPInfo</name>) <name>element</name></expr></init></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name><name>constantEntry</name>.<name>getValue</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><name>constantValue</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>index</name> = <name>i</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></for>

        <return>return <expr><name>index</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the index of a given CONSTANT_METHODREF entry in the constant
     * pool.
     *
     * @param methodClassName the name of the class which contains the
     *      method being referenced.
     * @param methodName the name of the method being referenced.
     * @param methodType the type descriptor of the method being referenced.
     * @return the index at which the given method ref entry occurs in the
     *      constant pool or -1 if the value does not occur.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getMethodRefEntry</name><parameter_list>(<param><decl><type><name>String</name></type> <name>methodClassName</name></decl></param>, <param><decl><type><name>String</name></type> <name>methodName</name></decl></param>,
                                 <param><decl><type><name>String</name></type> <name>methodType</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>size</name> =<init> <expr><call><name><name>entries</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>size</name> &amp;&amp; <name>index</name> == -1</expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
            <decl_stmt><decl><type><name>Object</name></type> <name>element</name> =<init> <expr><call><name><name>entries</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>element</name> <name>instanceof</name> <name>MethodRefCPInfo</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>MethodRefCPInfo</name></type> <name>methodRefEntry</name> =<init> <expr>(<name>MethodRefCPInfo</name>) <name>element</name></expr></init></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name><name>methodRefEntry</name>.<name>getMethodClassName</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><name>methodClassName</name></expr></argument>)</argument_list></call>
                     &amp;&amp; <call><name><name>methodRefEntry</name>.<name>getMethodName</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><name>methodName</name></expr></argument>)</argument_list></call>
                     &amp;&amp; <call><name><name>methodRefEntry</name>.<name>getMethodType</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><name>methodType</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>index</name> = <name>i</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></for>

        <return>return <expr><name>index</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the index of a given CONSTANT_INTERFACEMETHODREF entry in the
     * constant pool.
     *
     * @param interfaceMethodClassName the name of the interface which
     *      contains the method being referenced.
     * @param interfaceMethodName the name of the method being referenced.
     * @param interfaceMethodType the type descriptor of the method being
     *      referenced.
     * @return the index at which the given method ref entry occurs in the
     *      constant pool or -1 if the value does not occur.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getInterfaceMethodRefEntry</name><parameter_list>(<param><decl><type><name>String</name></type> <name>interfaceMethodClassName</name></decl></param>,
                                          <param><decl><type><name>String</name></type> <name>interfaceMethodName</name></decl></param>,
                                          <param><decl><type><name>String</name></type> <name>interfaceMethodType</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>size</name> =<init> <expr><call><name><name>entries</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>size</name> &amp;&amp; <name>index</name> == -1</expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
            <decl_stmt><decl><type><name>Object</name></type> <name>element</name> =<init> <expr><call><name><name>entries</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>element</name> <name>instanceof</name> <name>InterfaceMethodRefCPInfo</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>InterfaceMethodRefCPInfo</name></type> <name>interfaceMethodRefEntry</name>
                     =<init> <expr>(<name>InterfaceMethodRefCPInfo</name>) <name>element</name></expr></init></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name><name>interfaceMethodRefEntry</name>.<name>getInterfaceMethodClassName</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(
                        <argument><expr><name>interfaceMethodClassName</name></expr></argument>)</argument_list></call>
                     &amp;&amp; <call><name><name>interfaceMethodRefEntry</name>.<name>getInterfaceMethodName</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(
                         <argument><expr><name>interfaceMethodName</name></expr></argument>)</argument_list></call>
                     &amp;&amp; <call><name><name>interfaceMethodRefEntry</name>.<name>getInterfaceMethodType</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(
                         <argument><expr><name>interfaceMethodType</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>index</name> = <name>i</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></for>

        <return>return <expr><name>index</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the index of a given CONSTANT_FIELDREF entry in the constant
     * pool.
     *
     * @param fieldClassName the name of the class which contains the field
     *      being referenced.
     * @param fieldName the name of the field being referenced.
     * @param fieldType the type descriptor of the field being referenced.
     * @return the index at which the given field ref entry occurs in the
     *      constant pool or -1 if the value does not occur.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getFieldRefEntry</name><parameter_list>(<param><decl><type><name>String</name></type> <name>fieldClassName</name></decl></param>, <param><decl><type><name>String</name></type> <name>fieldName</name></decl></param>,
                                <param><decl><type><name>String</name></type> <name>fieldType</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>size</name> =<init> <expr><call><name><name>entries</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>size</name> &amp;&amp; <name>index</name> == -1</expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
            <decl_stmt><decl><type><name>Object</name></type> <name>element</name> =<init> <expr><call><name><name>entries</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>element</name> <name>instanceof</name> <name>FieldRefCPInfo</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>FieldRefCPInfo</name></type> <name>fieldRefEntry</name> =<init> <expr>(<name>FieldRefCPInfo</name>) <name>element</name></expr></init></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name><name>fieldRefEntry</name>.<name>getFieldClassName</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><name>fieldClassName</name></expr></argument>)</argument_list></call>
                     &amp;&amp; <call><name><name>fieldRefEntry</name>.<name>getFieldName</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>)</argument_list></call>
                     &amp;&amp; <call><name><name>fieldRefEntry</name>.<name>getFieldType</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><name>fieldType</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>index</name> = <name>i</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></for>

        <return>return <expr><name>index</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the index of a given CONSTANT_NAMEANDTYPE entry in the constant
     * pool.
     *
     * @param name the name
     * @param type the type
     * @return the index at which the given NameAndType entry occurs in the
     *      constant pool or -1 if the value does not occur.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getNameAndTypeEntry</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>, <param><decl><type><name>String</name></type> <name>type</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>size</name> =<init> <expr><call><name><name>entries</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>size</name> &amp;&amp; <name>index</name> == -1</expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
            <decl_stmt><decl><type><name>Object</name></type> <name>element</name> =<init> <expr><call><name><name>entries</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>element</name> <name>instanceof</name> <name>NameAndTypeCPInfo</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>NameAndTypeCPInfo</name></type> <name>nameAndTypeEntry</name>
                    =<init> <expr>(<name>NameAndTypeCPInfo</name>) <name>element</name></expr></init></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name><name>nameAndTypeEntry</name>.<name>getName</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call>
                     &amp;&amp; <call><name><name>nameAndTypeEntry</name>.<name>getType</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>index</name> = <name>i</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></for>

        <return>return <expr><name>index</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Dump the constant pool to a string.
     *
     * @return the constant pool entries as strings
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> =<init> <expr>new <call><name>StringBuilder</name><argument_list>(<argument><expr>"\n"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>size</name> =<init> <expr><call><name><name>entries</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>size</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>"[" + <name>i</name> + "] = " + <call><name>getEntry</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> + "\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <return>return <expr><call><name><name>sb</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

}</block></class>

</unit>
