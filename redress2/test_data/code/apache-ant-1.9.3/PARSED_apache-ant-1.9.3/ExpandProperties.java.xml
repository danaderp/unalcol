<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\filters\ExpandProperties.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>filters</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Reader</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Properties</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>PropertyHelper</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>property</name>.<name>GetProperty</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>property</name>.<name>ParseProperties</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>PropertySet</name></name>;</import>

<comment type="javadoc">/**
 * Expands Ant properties, if any, in the data.
 * &lt;p&gt;
 * Example:&lt;br&gt;
 * &lt;pre&gt;&amp;lt;expandproperties/&amp;gt;&lt;/pre&gt;
 * Or:
 * &lt;pre&gt;&amp;lt;filterreader
 *    classname=&amp;quot;org.apache.tools.ant.filters.ExpandProperties&amp;quot;/&amp;gt;&lt;/pre&gt;
 *
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>ExpandProperties</name>
    <super><extends>extends <name>BaseFilterReader</name></extends>
    <implements>implements <name>ChainableReader</name></implements></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>EOF</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>char</name><index>[]</index></type> <name>buffer</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>index</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>PropertySet</name></type> <name>propertySet</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructor for "dummy" instances.
     *
     * @see BaseFilterReader#BaseFilterReader()
     */</comment>
    <constructor><specifier>public</specifier> <name>ExpandProperties</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a new filtered reader.
     *
     * @param in A Reader object providing the underlying stream.
     *           Must not be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <constructor><specifier>public</specifier> <name>ExpandProperties</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Reader</name></type> <name>in</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Restrict the expanded properties using a PropertySet.
     * @param propertySet replacement lookup
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>PropertySet</name></type> <name>propertySet</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>propertySet</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"expandproperties filter accepts only one propertyset"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>propertySet</name></name> = <name>propertySet</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the next character in the filtered stream. The original
     * stream is first read in fully, and the Ant properties are expanded.
     * The results of this expansion are then queued so they can be read
     * character-by-character.
     *
     * @return the next character in the resulting stream, or -1
     * if the end of the resulting stream has been reached
     *
     * @exception IOException if the underlying stream throws an IOException
     * during reading
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>read</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>index</name> &gt; <name>EOF</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>buffer</name> == <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>data</name> =<init> <expr><call><name>readFully</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Project</name></type> <name>project</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>GetProperty</name></type> <name>getProperty</name></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>propertySet</name> == <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>getProperty</name> = <call><name><name>PropertyHelper</name>.<name>getPropertyHelper</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <decl_stmt><decl><type><specifier>final</specifier> <name>Properties</name></type> <name>props</name> =<init> <expr><call><name><name>propertySet</name>.<name>getProperties</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>getProperty</name> = new <class><super><name>GetProperty</name></super><argument_list>()</argument_list> <block>{

                        <function><type><specifier>public</specifier> <name>Object</name></type> <name>getProperty</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
                            <return>return <expr><call><name><name>props</name>.<name>getProperty</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
                        }</block></function>
                    }</block></class></expr>;</expr_stmt>
                }</block></else></if>
                <decl_stmt><decl><type><name>Object</name></type> <name>expanded</name> =<init> <expr>new <call><name>ParseProperties</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr><call><name><name>PropertyHelper</name>
                                                      .<name>getPropertyHelper</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call>
                                                      .<call><name>getExpanders</name><argument_list>()</argument_list></call></expr></argument>,
                                                      <argument><expr><name>getProperty</name></expr></argument>)</argument_list></call>
                    .<call><name>parseProperties</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>buffer</name> = <name>expanded</name> == <name>null</name> ? new <name><name>char</name><index>[<expr>0</expr>]</index></name>
                    : <call><name><name>expanded</name>.<name>toString</name></name><argument_list>()</argument_list></call>.<call><name>toCharArray</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name>index</name> &lt; <name><name>buffer</name>.<name>length</name></name></expr>)</condition><then> <block>{
                <return>return <expr><name><name>buffer</name><index>[<expr><name>index</name>++</expr>]</index></name></expr>;</return>
            }</block></then></if>
            <expr_stmt><expr><name>index</name> = <name>EOF</name></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>EOF</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Creates a new ExpandProperties filter using the passed in
     * Reader for instantiation.
     *
     * @param rdr A Reader object providing the underlying stream.
     *            Must not be &lt;code&gt;null&lt;/code&gt;.
     *
     * @return a new filter based on this configuration, but filtering
     *         the specified reader
     */</comment>
    <function><type><specifier>public</specifier> <name>Reader</name></type> <name>chain</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Reader</name></type> <name>rdr</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>ExpandProperties</name></type> <name>newFilter</name> =<init> <expr>new <call><name>ExpandProperties</name><argument_list>(<argument><expr><name>rdr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>newFilter</name>.<name>setProject</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>newFilter</name>.<name>add</name></name><argument_list>(<argument><expr><name>propertySet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>newFilter</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
