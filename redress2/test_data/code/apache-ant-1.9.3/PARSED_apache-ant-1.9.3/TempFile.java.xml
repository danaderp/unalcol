<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\TempFile.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>

<comment type="javadoc">/**
 *  This task sets a property to the name of a temporary file.
 *  Unlike {@link File#createTempFile}, this task does not (by default) actually create the
 *  temporary file, but it does guarantee that the file did not
 *  exist when the task was executed.
 * &lt;p&gt;
 * Examples
 * &lt;pre&gt;&amp;lt;tempfile property="temp.file" /&amp;gt;&lt;/pre&gt;
 * create a temporary file
 * &lt;pre&gt;&amp;lt;tempfile property="temp.file" suffix=".xml" /&amp;gt;&lt;/pre&gt;
 * create a temporary file with the .xml suffix.
 * &lt;pre&gt;&amp;lt;tempfile property="temp.file" destDir="build"/&amp;gt;&lt;/pre&gt;
 * create a temp file in the build subdir
 * @since       Ant 1.5
 * @ant.task
 */</comment>

<class><specifier>public</specifier> class <name>TempFile</name> <super><extends>extends <name>Task</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>FileUtils</name></type> <name>FILE_UTILS</name> =<init> <expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Name of property to set.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>property</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Directory to create the file in. Can be null.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>destDir</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Prefix for the file.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>prefix</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Suffix for the file.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>suffix</name> =<init> <expr>""</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** deleteOnExit flag */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>deleteOnExit</name></decl>;</decl_stmt>

    <comment type="javadoc">/** createFile flag */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>createFile</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Sets the property you wish to assign the temporary file to.
     *
     * @param  property  The property to set
     * @ant.attribute group="required"
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setProperty</name><parameter_list>(<param><decl><type><name>String</name></type> <name>property</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>property</name></name> = <name>property</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Sets the destination directory. If not set,
     * the basedir directory is used instead.
     *
     * @param  destDir  The new destDir value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDestDir</name><parameter_list>(<param><decl><type><name>File</name></type> <name>destDir</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>destDir</name></name> = <name>destDir</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Sets the optional prefix string for the temp file.
     *
     * @param  prefix  string to prepend to generated string
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPrefix</name><parameter_list>(<param><decl><type><name>String</name></type> <name>prefix</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>prefix</name></name> = <name>prefix</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Sets the optional suffix string for the temp file.
     *
     * @param  suffix  suffix including any "." , e.g ".xml"
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSuffix</name><parameter_list>(<param><decl><type><name>String</name></type> <name>suffix</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>suffix</name></name> = <name>suffix</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set whether the tempfile created by this task should be set
     * for deletion on normal VM exit.
     * @param deleteOnExit boolean flag.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDeleteOnExit</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>deleteOnExit</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>deleteOnExit</name></name> = <name>deleteOnExit</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Learn whether deleteOnExit is set for this tempfile task.
     * @return boolean deleteOnExit flag.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isDeleteOnExit</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>deleteOnExit</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * If set the file is actually created, if not just a name is created.
     * @param createFile boolean flag.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCreateFile</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>createFile</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>createFile</name></name> = <name>createFile</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Learn whether createFile flag is set for this tempfile task.
     * @return the createFile flag.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isCreateFile</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>createFile</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Creates the temporary file.
     *
     * @exception  BuildException  if something goes wrong with the build
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>property</name> == <name>null</name> || <call><name><name>property</name>.<name>length</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"no property specified"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>destDir</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>destDir</name> = <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>resolveFile</name><argument_list>(<argument><expr>"."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>File</name></type> <name>tfile</name> =<init> <expr><call><name><name>FILE_UTILS</name>.<name>createTempFile</name></name><argument_list>(<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>suffix</name></expr></argument>, <argument><expr><name>destDir</name></expr></argument>,
                    <argument><expr><name>deleteOnExit</name></expr></argument>, <argument><expr><name>createFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>setNewProperty</name><argument_list>(<argument><expr><name>property</name></expr></argument>, <argument><expr><call><name><name>tfile</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
