<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\util\regexp\JakartaRegexpRegexp.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>regexp</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>regexp</name>.<name>RE</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>

<comment type="javadoc">/***
 * Regular expression implementation using the Jakarta Regexp package
 */</comment>
<class><specifier>public</specifier> class <name>JakartaRegexpRegexp</name> <super><extends>extends <name>JakartaRegexpMatcher</name></extends>
    <implements>implements <name>Regexp</name></implements></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DECIMAL</name> =<init> <expr>10</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Constructor for JakartaRegexpRegexp */</comment>
    <constructor><specifier>public</specifier> <name>JakartaRegexpRegexp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Convert ant regexp substitution option to apache regex options.
     *
     * @param options the ant regexp options
     * @return the apache regex substition options
     */</comment>
    <function><type><specifier>protected</specifier> <name>int</name></type> <name>getSubsOptions</name><parameter_list>(<param><decl><type><name>int</name></type> <name>options</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>subsOptions</name> =<init> <expr><name><name>RE</name>.<name>REPLACE_FIRSTONLY</name></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>RegexpUtil</name>.<name>hasFlag</name></name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>REPLACE_ALL</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>subsOptions</name> = <name><name>RE</name>.<name>REPLACE_ALL</name></name></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>subsOptions</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Perform a substitution on the regular expression.
     * @param input The string to substitute on
     * @param argument The string which defines the substitution
     * @param options The list of options for the match and replace.
     * @return the result of the operation
     * @throws BuildException on error
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>substitute</name><parameter_list>(<param><decl><type><name>String</name></type> <name>input</name></decl></param>, <param><decl><type><name>String</name></type> <name>argument</name></decl></param>, <param><decl><type><name>int</name></type> <name>options</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>Vector</name></type> <name>v</name> =<init> <expr><call><name>getGroups</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// replace \1 with the corresponding group</comment>
        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>result</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>argument</name>.<name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>char</name></type> <name>c</name> =<init> <expr><call><name><name>argument</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>c</name> == '\\'</expr>)</condition><then> <block>{
                <if>if <condition>(<expr>++<name>i</name> &lt; <call><name><name>argument</name>.<name>length</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>c</name> = <call><name><name>argument</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>value</name> =<init> <expr><call><name><name>Character</name>.<name>digit</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>DECIMAL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>value</name> &gt; -1</expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>(<name>String</name>) <call><name><name>v</name>.<name>elementAt</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></then> <else>else <block>{
                    <comment type="line">// TODO - should throw an exception instead?</comment>
                    <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'\\'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></for>
        <expr_stmt><expr><name>argument</name> = <call><name><name>result</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>RE</name></type> <name>reg</name> =<init> <expr><call><name>getCompiledPattern</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>sOptions</name> =<init> <expr><call><name>getSubsOptions</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>reg</name>.<name>subst</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>argument</name></expr></argument>, <argument><expr><name>sOptions</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
