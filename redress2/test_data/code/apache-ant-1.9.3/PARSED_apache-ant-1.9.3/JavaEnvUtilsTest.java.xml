<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\util\JavaEnvUtilsTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>

<import>import <name><name>junit</name>.<name>framework</name>.<name>AssertionFailedError</name></name>;</import>
<import>import <name><name>junit</name>.<name>framework</name>.<name>TestCase</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>condition</name>.<name>Os</name></name>;</import>

<comment type="javadoc">/**
 * TestCase for JavaEnvUtils.
 *
 */</comment>
<class><specifier>public</specifier> class <name>JavaEnvUtilsTest</name> <super><extends>extends <name>TestCase</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>FileUtils</name></type> <name>FILE_UTILS</name> =<init> <expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>JavaEnvUtilsTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testGetExecutableNetware</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>Os</name>.<name>isName</name></name><argument_list>(<argument><expr>"netware"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"java"</expr></argument>, <argument><expr><call><name><name>JavaEnvUtils</name>.<name>getJreExecutable</name></name><argument_list>(<argument><expr>"java"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"javac"</expr></argument>, <argument><expr><call><name><name>JavaEnvUtils</name>.<name>getJdkExecutable</name></name><argument_list>(<argument><expr>"javac"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"foo"</expr></argument>, <argument><expr><call><name><name>JavaEnvUtils</name>.<name>getJreExecutable</name></name><argument_list>(<argument><expr>"foo"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"foo"</expr></argument>, <argument><expr><call><name><name>JavaEnvUtils</name>.<name>getJdkExecutable</name></name><argument_list>(<argument><expr>"foo"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testGetExecutableWindows</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr>"windows"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>javaHome</name> =<init>
                <expr><call><name><name>FILE_UTILS</name>.<name>normalize</name></name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"java.home"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                .<call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>String</name></type> <name>j</name> =<init> <expr><call><name><name>JavaEnvUtils</name>.<name>getJreExecutable</name></name><argument_list>(<argument><expr>"java"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>j</name>.<name>endsWith</name></name><argument_list>(<argument><expr>".exe"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>j</name>+" is absolute"</expr></argument>, <argument><expr>(new <call><name>File</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call>).<call><name>isAbsolute</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <try>try <block>{
                <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>j</name>+" is normalized and in the JRE dir"</expr></argument>,
                           <argument><expr><call><name><name>j</name>.<name>startsWith</name></name><argument_list>(<argument><expr><name>javaHome</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>AssertionFailedError</name></type> <name>e</name></decl></param>) <block>{
                <comment type="line">// java.home is bogus</comment>
                <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"java.exe"</expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>

            <expr_stmt><expr><name>j</name> = <call><name><name>JavaEnvUtils</name>.<name>getJdkExecutable</name></name><argument_list>(<argument><expr>"javac"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>j</name>.<name>endsWith</name></name><argument_list>(<argument><expr>".exe"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <try>try <block>{
                <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>j</name>+" is absolute"</expr></argument>, <argument><expr>(new <call><name>File</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call>).<call><name>isAbsolute</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>javaHomeParent</name> =<init>
                    <expr><call><name><name>FILE_UTILS</name>.<name>normalize</name></name><argument_list>(<argument><expr><name>javaHome</name>+"/.."</expr></argument>)</argument_list></call>.<call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>j</name>+" is normalized and in the JDK dir"</expr></argument>,
                           <argument><expr><call><name><name>j</name>.<name>startsWith</name></name><argument_list>(<argument><expr><name>javaHomeParent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>j</name>+" is normalized and not in the JRE dir"</expr></argument>,
                           <argument><expr>!<call><name><name>j</name>.<name>startsWith</name></name><argument_list>(<argument><expr><name>javaHome</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            }</block> <catch>catch (<param><decl><type><name>AssertionFailedError</name></type> <name>e</name></decl></param>) <block>{
                <comment type="line">// java.home is bogus</comment>
                <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"javac.exe"</expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>

            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"foo.exe"</expr></argument>, <argument><expr><call><name><name>JavaEnvUtils</name>.<name>getJreExecutable</name></name><argument_list>(<argument><expr>"foo"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"foo.exe"</expr></argument>, <argument><expr><call><name><name>JavaEnvUtils</name>.<name>getJdkExecutable</name></name><argument_list>(<argument><expr>"foo"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testGetExecutableMostPlatforms</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr>!<call><name><name>Os</name>.<name>isName</name></name><argument_list>(<argument><expr>"netware"</expr></argument>)</argument_list></call> &amp;&amp; !<call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr>"windows"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>javaHome</name> =<init>
                <expr><call><name><name>FILE_UTILS</name>.<name>normalize</name></name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"java.home"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                .<call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// could still be OS/2</comment>
            <decl_stmt><decl><type><name>String</name></type> <name>extension</name> =<init> <expr><call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr>"dos"</expr></argument>)</argument_list></call> ? ".exe" : ""</expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>String</name></type> <name>j</name> =<init> <expr><call><name><name>JavaEnvUtils</name>.<name>getJreExecutable</name></name><argument_list>(<argument><expr>"java"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<call><name><name>extension</name>.<name>equals</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>j</name>.<name>endsWith</name></name><argument_list>(<argument><expr><name>extension</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>j</name>+" is absolute"</expr></argument>, <argument><expr>(new <call><name>File</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call>).<call><name>isAbsolute</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>j</name>+" is normalized and in the JRE dir"</expr></argument>,
                       <argument><expr><call><name><name>j</name>.<name>startsWith</name></name><argument_list>(<argument><expr><name>javaHome</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>j</name> = <call><name><name>JavaEnvUtils</name>.<name>getJdkExecutable</name></name><argument_list>(<argument><expr>"javac"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<call><name><name>extension</name>.<name>equals</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>j</name>.<name>endsWith</name></name><argument_list>(<argument><expr><name>extension</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>j</name>+" is absolute"</expr></argument>, <argument><expr>(new <call><name>File</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call>).<call><name>isAbsolute</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>String</name></type> <name>javaHomeParent</name> =<init>
                <expr><call><name><name>FILE_UTILS</name>.<name>normalize</name></name><argument_list>(<argument><expr><name>javaHome</name>+"/.."</expr></argument>)</argument_list></call>.<call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>j</name>+" is normalized and in the JDK dir"</expr></argument>,
                       <argument><expr><call><name><name>j</name>.<name>startsWith</name></name><argument_list>(<argument><expr><name>javaHomeParent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr>"mac"</expr></argument>)</argument_list></call> &amp;&amp; <call><name><name>JavaEnvUtils</name>.<name>getJavaVersionNumber</name></name><argument_list>()</argument_list></call> &lt;= <name><name>JavaEnvUtils</name>.<name>VERSION_1_6</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>j</name>+" is normalized and in the JRE dir"</expr></argument>,
                           <argument><expr><call><name><name>j</name>.<name>startsWith</name></name><argument_list>(<argument><expr><name>javaHome</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>j</name>+" is normalized and not in the JRE dir"</expr></argument>,
                           <argument><expr>!<call><name><name>j</name>.<name>startsWith</name></name><argument_list>(<argument><expr><name>javaHome</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"foo"+<name>extension</name></expr></argument>,
                         <argument><expr><call><name><name>JavaEnvUtils</name>.<name>getJreExecutable</name></name><argument_list>(<argument><expr>"foo"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"foo"+<name>extension</name></expr></argument>,
                         <argument><expr><call><name><name>JavaEnvUtils</name>.<name>getJdkExecutable</name></name><argument_list>(<argument><expr>"foo"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testIsAtLeastJavaVersion</name><parameter_list>()</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(
                <argument><expr>"Current java version is not at least the current java version..."</expr></argument>,
                <argument><expr><call><name><name>JavaEnvUtils</name>.<name>isAtLeastJavaVersion</name></name><argument_list>(<argument><expr><call><name><name>JavaEnvUtils</name>.<name>getJavaVersion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(
                <argument><expr>"In case the current java version is higher than 9.0 definitely a new algorithem will be needed"</expr></argument>,
                <argument><expr><call><name><name>JavaEnvUtils</name>.<name>isAtLeastJavaVersion</name></name><argument_list>(<argument><expr>"9.0"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
