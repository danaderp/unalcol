<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\util\regexp\RegexpMatcherFactory.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>regexp</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>MagicNames</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>ClasspathUtils</name></name>;</import>

<comment type="javadoc">/**
 * Simple Factory Class that produces an implementation of RegexpMatcher based on the system
 * property &lt;code&gt;ant.regexp.regexpimpl&lt;/code&gt; and the classes available.
 *
 * &lt;p&gt;
 * In a more general framework this class would be abstract and have a static newInstance method.
 * &lt;/p&gt;
 *
 */</comment>
<class><specifier>public</specifier> class <name>RegexpMatcherFactory</name> <block>{

    <comment type="javadoc">/** Constructor for RegexpMatcherFactory. */</comment>
    <constructor><specifier>public</specifier> <name>RegexpMatcherFactory</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <comment type="javadoc">/***
     * Create a new regular expression instance.
     * @return the matcher
     * @throws BuildException on error
     */</comment>
    <function><type><specifier>public</specifier> <name>RegexpMatcher</name></type> <name>newRegexpMatcher</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name>newRegexpMatcher</name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/***
     * Create a new regular expression instance.
     *
     * @param p Project whose ant.regexp.regexpimpl property will be used.
     * @return the matcher
     * @throws BuildException on error
     */</comment>
    <function><type><specifier>public</specifier> <name>RegexpMatcher</name></type> <name>newRegexpMatcher</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>p</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>systemDefault</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>p</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>systemDefault</name> = <call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr><name><name>MagicNames</name>.<name>REGEXP_IMPL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>systemDefault</name> = <call><name><name>p</name>.<name>getProperty</name></name><argument_list>(<argument><expr><name><name>MagicNames</name>.<name>REGEXP_IMPL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <if>if <condition>(<expr><name>systemDefault</name> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name>createInstance</name><argument_list>(<argument><expr><name>systemDefault</name></expr></argument>)</argument_list></call></expr>;</return>
            <comment type="line">// TODO     should we silently catch possible exceptions and try to</comment>
            <comment type="line">//         load a different implementation?</comment>
        }</block></then></if>

        <return>return <expr>new <call><name>Jdk14RegexpMatcher</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Create an instance of a matcher from a classname.
     *
     * @param className a &lt;code&gt;String&lt;/code&gt; value
     * @return a &lt;code&gt;RegexpMatcher&lt;/code&gt; value
     * @exception BuildException if an error occurs
     */</comment>
    <function><type><specifier>protected</specifier> <name>RegexpMatcher</name></type> <name>createInstance</name><parameter_list>(<param><decl><type><name>String</name></type> <name>className</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <return>return <expr>(<name>RegexpMatcher</name>) <call><name><name>ClasspathUtils</name>.<name>newInstance</name></name><argument_list>(<argument><expr><name>className</name></expr></argument>, <argument><expr><name><name>RegexpMatcherFactory</name>.<name><name/></name></name>class
                .<call><name>getClassLoader</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>RegexpMatcher</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Test if a particular class is available to be used.
     *
     * @param className a &lt;code&gt;String&lt;/code&gt; value
     * @exception BuildException if an error occurs
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>testAvailability</name><parameter_list>(<param><decl><type><name>String</name></type> <name>className</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <try>try <block>{
            <expr_stmt><expr><call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr><name>className</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>Throwable</name></type> <name>t</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * Checks if a RegExp-Matcher is available.
     * @param project  The project to check for (may be &lt;code&gt;null&lt;/code&gt;)
     * @return &lt;code&gt;true&lt;/code&gt; if available otherwise &lt;code&gt;false&lt;/code&gt;
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>regexpMatcherPresent</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>)</parameter_list> <block>{
        <try>try <block>{
            <comment type="line">// The factory throws a BuildException if no usable matcher</comment>
            <comment type="line">// cant be instantiated. We dont need the matcher itself here.</comment>
            <expr_stmt><expr>new <call><name>RegexpMatcherFactory</name><argument_list>()</argument_list></call>.<call><name>newRegexpMatcher</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>true</expr>;</return>
        }</block> <catch>catch (<param><decl><type><name>Throwable</name></type> <name>ex</name></decl></param>) <block>{
            <return>return <expr>false</expr>;</return>
        }</block></catch></try>
    }</block></function>
}</block></class>
</unit>
