<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\extension\ExtensionUtil.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>extension</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>jar</name>.<name>JarFile</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>jar</name>.<name>Manifest</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>DirectoryScanner</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>FileSet</name></name>;</import>

<comment type="javadoc">/**
 * A set of useful methods relating to extensions.
 *
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>ExtensionUtil</name> <block>{
    <comment type="javadoc">/**
     * Class is not meant to be instantiated.
     */</comment>
    <constructor><specifier>private</specifier> <name>ExtensionUtil</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">//all methods static</comment>
    }</block></constructor>

    <comment type="javadoc">/**
     * Convert a list of extensionAdapter objects to extensions.
     *
     * @param adapters the list of ExtensionAdapterss to add to convert
     * @throws BuildException if an error occurs
     */</comment>
    <function><type><specifier>static</specifier> <name>ArrayList</name></type> <name>toExtensions</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>List</name></type> <name>adapters</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>ArrayList</name></type> <name>results</name> =<init> <expr>new <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>size</name> =<init> <expr><call><name><name>adapters</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>size</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>ExtensionAdapter</name></type> <name>adapter</name> =<init>
                <expr>(<name>ExtensionAdapter</name>) <call><name><name>adapters</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>Extension</name></type> <name>extension</name> =<init> <expr><call><name><name>adapter</name>.<name>toExtension</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>results</name>.<name>add</name></name><argument_list>(<argument><expr><name>extension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <return>return <expr><name>results</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Generate a list of extensions from a specified fileset.
     *
     * @param libraries the list to add extensions to
     * @param fileset the filesets containing librarys
     * @throws BuildException if an error occurs
     */</comment>
    <function><type><specifier>static</specifier> <name>void</name></type> <name>extractExtensions</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Project</name></type> <name>project</name></decl></param>,
                                   <param><decl><type><specifier>final</specifier> <name>List</name></type> <name>libraries</name></decl></param>,
                                   <param><decl><type><specifier>final</specifier> <name>List</name></type> <name>fileset</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr>!<call><name><name>fileset</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>Extension</name><index>[]</index></type> <name>extensions</name> =<init> <expr><call><name>getExtensions</name><argument_list>(<argument><expr><name>project</name></expr></argument>,
                                                          <argument><expr><name>fileset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>extensions</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <expr_stmt><expr><call><name><name>libraries</name>.<name>add</name></name><argument_list>(<argument><expr><name><name>extensions</name><index>[ <expr><name>i</name></expr> ]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Retrieve extensions from the specified libraries.
     *
     * @param libraries the filesets for libraries
     * @return the extensions contained in libraries
     * @throws BuildException if failing to scan libraries
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>Extension</name><index>[]</index></type> <name>getExtensions</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Project</name></type> <name>project</name></decl></param>,
                                              <param><decl><type><specifier>final</specifier> <name>List</name></type> <name>libraries</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>ArrayList</name></type> <name>extensions</name> =<init> <expr>new <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>libraries</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>FileSet</name></type> <name>fileSet</name> =<init> <expr>(<name>FileSet</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>boolean</name></type> <name>includeImpl</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>includeURL</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>fileSet</name> <name>instanceof</name> <name>LibFileSet</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>LibFileSet</name></type> <name>libFileSet</name> =<init> <expr>(<name>LibFileSet</name>) <name>fileSet</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>includeImpl</name> = <call><name><name>libFileSet</name>.<name>isIncludeImpl</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>includeURL</name> = <call><name><name>libFileSet</name>.<name>isIncludeURL</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <decl_stmt><decl><type><specifier>final</specifier> <name>DirectoryScanner</name></type> <name>scanner</name> =<init> <expr><call><name><name>fileSet</name>.<name>getDirectoryScanner</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>File</name></type> <name>basedir</name> =<init> <expr><call><name><name>scanner</name>.<name>getBasedir</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name><index>[]</index></type> <name>files</name> =<init> <expr><call><name><name>scanner</name>.<name>getIncludedFiles</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>files</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>File</name></type> <name>file</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name>basedir</name></expr></argument>, <argument><expr><name><name>files</name><index>[ <expr><name>i</name></expr> ]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>loadExtensions</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>extensions</name></expr></argument>, <argument><expr><name>includeImpl</name></expr></argument>, <argument><expr><name>includeURL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></while>
        <return>return <expr>(<name><name>Extension</name><index>[]</index></name>) <call><name><name>extensions</name>.<name>toArray</name></name><argument_list>(<argument><expr>new <name><name>Extension</name><index>[<expr><call><name><name>extensions</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Load list of available extensions from specified file.
     *
     * @param file the file
     * @param extensionList the list to add available extensions to
     * @throws BuildException if there is an error
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>loadExtensions</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>File</name></type> <name>file</name></decl></param>,
                                        <param><decl><type><specifier>final</specifier> <name>List</name></type> <name>extensionList</name></decl></param>,
                                        <param><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>includeImpl</name></decl></param>,
                                        <param><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>includeURL</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <try>try <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>JarFile</name></type> <name>jarFile</name> =<init> <expr>new <call><name>JarFile</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>Extension</name><index>[]</index></type> <name>extensions</name> =<init>
                <expr><call><name><name>Extension</name>.<name>getAvailable</name></name><argument_list>(<argument><expr><call><name><name>jarFile</name>.<name>getManifest</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>extensions</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>Extension</name></type> <name>extension</name> =<init> <expr><name><name>extensions</name><index>[ <expr><name>i</name></expr> ]</index></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>addExtension</name><argument_list>(<argument><expr><name>extensionList</name></expr></argument>, <argument><expr><name>extension</name></expr></argument>, <argument><expr><name>includeImpl</name></expr></argument>, <argument><expr><name>includeURL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block> <catch>catch (<param><decl><type><specifier>final</specifier> <name>Exception</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * Add extension to list.
     * If extension should not have implementation details but
     * does strip them. If extension should not have url but does
     * then strip it.
     *
     * @param extensionList the list of extensions to add to
     * @param originalExtension the extension
     * @param includeImpl false to exclude implementation details
     * @param includeURL false to exclude implementation URL
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>addExtension</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>List</name></type> <name>extensionList</name></decl></param>,
                                      <param><decl><type><specifier>final</specifier> <name>Extension</name></type> <name>originalExtension</name></decl></param>,
                                      <param><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>includeImpl</name></decl></param>,
                                      <param><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>includeURL</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Extension</name></type> <name>extension</name> =<init> <expr><name>originalExtension</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>includeURL</name>
            &amp;&amp; <name>null</name> != <call><name><name>extension</name>.<name>getImplementationURL</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>extension</name> =
                new <call><name>Extension</name><argument_list>(<argument><expr><call><name><name>extension</name>.<name>getExtensionName</name></name><argument_list>()</argument_list></call></expr></argument>,
                               <argument><expr><call><name><name>extension</name>.<name>getSpecificationVersion</name></name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>,
                               <argument><expr><call><name><name>extension</name>.<name>getSpecificationVendor</name></name><argument_list>()</argument_list></call></expr></argument>,
                               <argument><expr><call><name><name>extension</name>.<name>getImplementationVersion</name></name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>,
                               <argument><expr><call><name><name>extension</name>.<name>getImplementationVendor</name></name><argument_list>()</argument_list></call></expr></argument>,
                               <argument><expr><call><name><name>extension</name>.<name>getImplementationVendorID</name></name><argument_list>()</argument_list></call></expr></argument>,
                               <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>hasImplAttributes</name> =<init>
            <expr><name>null</name> != <call><name><name>extension</name>.<name>getImplementationURL</name></name><argument_list>()</argument_list></call>
            || <name>null</name> != <call><name><name>extension</name>.<name>getImplementationVersion</name></name><argument_list>()</argument_list></call>
            || <name>null</name> != <call><name><name>extension</name>.<name>getImplementationVendorID</name></name><argument_list>()</argument_list></call>
            || <name>null</name> != <call><name><name>extension</name>.<name>getImplementationVendor</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr>!<name>includeImpl</name> &amp;&amp; <name>hasImplAttributes</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>extension</name> =
                new <call><name>Extension</name><argument_list>(<argument><expr><call><name><name>extension</name>.<name>getExtensionName</name></name><argument_list>()</argument_list></call></expr></argument>,
                               <argument><expr><call><name><name>extension</name>.<name>getSpecificationVersion</name></name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>,
                               <argument><expr><call><name><name>extension</name>.<name>getSpecificationVendor</name></name><argument_list>()</argument_list></call></expr></argument>,
                               <argument><expr><name>null</name></expr></argument>,
                               <argument><expr><name>null</name></expr></argument>,
                               <argument><expr><name>null</name></expr></argument>,
                               <argument><expr><call><name><name>extension</name>.<name>getImplementationURL</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>extensionList</name>.<name>add</name></name><argument_list>(<argument><expr><name>extension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Retrieve manifest for specified file.
     *
     * @param file the file
     * @return the manifest
     * @throws BuildException if errror occurs (file doesn't exist,
     *         file not a jar, manifest doesn't exist in file)
     */</comment>
    <function><type><specifier>static</specifier> <name>Manifest</name></type> <name>getManifest</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>File</name></type> <name>file</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <try>try <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>JarFile</name></type> <name>jarFile</name> =<init> <expr>new <call><name>JarFile</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Manifest</name></type> <name>m</name> =<init> <expr><call><name><name>jarFile</name>.<name>getManifest</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>m</name> == <name>null</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>file</name> + " doesn't have a MANIFEST"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <return>return <expr><name>m</name></expr>;</return>
        }</block> <catch>catch (<param><decl><type><specifier>final</specifier> <name>IOException</name></type> <name>ioe</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><call><name><name>ioe</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ioe</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>
}</block></class>
</unit>
