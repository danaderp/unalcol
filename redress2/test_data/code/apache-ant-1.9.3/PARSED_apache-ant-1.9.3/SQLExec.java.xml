<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\SQLExec.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>KeepAliveOutputStream</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>StringUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>EnumeratedAttribute</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>FileSet</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Resource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>ResourceCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>Appendable</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>FileProvider</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>FileResource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>Union</name></name>;</import>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>OutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>PrintStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>BufferedOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Reader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>BufferedReader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>StringReader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStreamReader</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Locale</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>StringTokenizer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>

<import>import <name><name>java</name>.<name>sql</name>.<name>Blob</name></name>;</import>
<import>import <name><name>java</name>.<name>sql</name>.<name>Connection</name></name>;</import>
<import>import <name><name>java</name>.<name>sql</name>.<name>Statement</name></name>;</import>
<import>import <name><name>java</name>.<name>sql</name>.<name>SQLException</name></name>;</import>
<import>import <name><name>java</name>.<name>sql</name>.<name>SQLWarning</name></name>;</import>
<import>import <name><name>java</name>.<name>sql</name>.<name>ResultSet</name></name>;</import>
<import>import <name><name>java</name>.<name>sql</name>.<name>ResultSetMetaData</name></name>;</import>
<import>import <name><name>java</name>.<name>sql</name>.<name>Types</name></name>;</import>

<comment type="javadoc">/**
 * Executes a series of SQL statements on a database using JDBC.
 *
 * &lt;p&gt;Statements can
 * either be read in from a text file using the &lt;i&gt;src&lt;/i&gt; attribute or from
 * between the enclosing SQL tags.&lt;/p&gt;
 *
 * &lt;p&gt;Multiple statements can be provided, separated by semicolons (or the
 * defined &lt;i&gt;delimiter&lt;/i&gt;). Individual lines within the statements can be
 * commented using either --, // or REM at the start of the line.&lt;/p&gt;
 *
 * &lt;p&gt;The &lt;i&gt;autocommit&lt;/i&gt; attribute specifies whether auto-commit should be
 * turned on or off whilst executing the statements. If auto-commit is turned
 * on each statement will be executed and committed. If it is turned off the
 * statements will all be executed as one transaction.&lt;/p&gt;
 *
 * &lt;p&gt;The &lt;i&gt;onerror&lt;/i&gt; attribute specifies how to proceed when an error occurs
 * during the execution of one of the statements.
 * The possible values are: &lt;b&gt;continue&lt;/b&gt; execution, only show the error;
 * &lt;b&gt;stop&lt;/b&gt; execution and commit transaction;
 * and &lt;b&gt;abort&lt;/b&gt; execution and transaction and fail task.&lt;/p&gt;
 *
 * @since Ant 1.2
 *
 * @ant.task name="sql" category="database"
 */</comment>
<class><specifier>public</specifier> class <name>SQLExec</name> <super><extends>extends <name>JDBCTask</name></extends></super> <block>{

    <comment type="javadoc">/**
     * delimiters we support, "normal" and "row"
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>DelimiterType</name> <super><extends>extends <name>EnumeratedAttribute</name></extends></super> <block>{
        <comment type="javadoc">/** The enumerated strings */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>NORMAL</name> =<init> <expr>"normal"</expr></init>, <name>ROW</name> =<init> <expr>"row"</expr></init></decl>;</decl_stmt>
        <comment type="javadoc">/** @return the enumerated strings */</comment>
        <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getValues</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr>new <name><name>String</name><index>[]</index></name> <block>{<expr><name>NORMAL</name></expr>, <expr><name>ROW</name></expr>}</block></expr>;</return>
        }</block></function>
    }</block></class>

    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>goodSql</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>totalSql</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Database connection
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Connection</name></type> <name>conn</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * files to load
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Union</name></type> <name>resources</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * SQL statement
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Statement</name></type> <name>statement</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * SQL input file
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>srcFile</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * SQL input command
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>sqlCommand</name> =<init> <expr>""</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * SQL transactions to perform
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Vector</name></type> <name>transactions</name> =<init> <expr>new <call><name>Vector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * SQL Statement delimiter
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>delimiter</name> =<init> <expr>";"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The delimiter type indicating whether the delimiter will
     * only be recognized on a line by itself
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>delimiterType</name> =<init> <expr><name><name>DelimiterType</name>.<name>NORMAL</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Print SQL results.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>print</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Print header columns.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>showheaders</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Print SQL stats (rows affected)
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>showtrailers</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Results Output Resource.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Resource</name></type> <name>output</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Action to perform if an error is found
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>onError</name> =<init> <expr>"abort"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Encoding to use when reading SQL statements from a file
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>encoding</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Append to an existing file or overwrite it?
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>append</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Keep the format of a sql block?
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>keepformat</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Argument to Statement.setEscapeProcessing
     *
     * @since Ant 1.6
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>escapeProcessing</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * should properties be expanded in text?
     * false for backwards compatibility
     *
     * @since Ant 1.7
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>expandProperties</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * should we print raw BLOB data?
     * @since Ant 1.7.1
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>rawBlobs</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * delimiters must match in case and whitespace is significant.
     * @since Ant 1.8.0
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>strictDelimiterMatching</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * whether to show SQLWarnings as WARN messages.
     * @since Ant 1.8.0
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>showWarnings</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The column separator used when printing the results.
     *
     * &lt;p&gt;Defaults to ","&lt;/p&gt;
     *
     * @since Ant 1.8.0
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>csvColumnSep</name> =<init> <expr>","</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The character used to quote column values.
     *
     * &lt;p&gt;If set, columns that contain either the column separator or
     * the quote character itself will be surrounded by the quote
     * character.  The quote character itself will be doubled if it
     * appears inside of the column's value.&lt;/p&gt;
     *
     * &lt;p&gt;If this value is not set (the default), no column values
     * will be quoted, not even if they contain the column
     * separator.&lt;/p&gt;
     *
     * &lt;p&gt;&lt;b&gt;Note:&lt;b&gt; BLOB values will never be quoted.&lt;/p&gt;
     *
     * &lt;p&gt;Defaults to "not set"&lt;/p&gt;
     *
     * @since Ant 1.8.0
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>csvQuoteChar</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Whether a warning is an error - in which case onError applies.
     * @since Ant 1.8.0
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>treatWarningsAsErrors</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The name of the property to set in the event of an error
     * @since Ant 1.8.0
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>errorProperty</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The name of the property to set in the event of a warning
     * @since Ant 1.8.0
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>warningProperty</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The name of the property that receives the number of rows
     * returned
     * @since Ant 1.8.0
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>rowCountProperty</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Set the name of the SQL file to be run.
     * Required unless statements are enclosed in the build file
     * @param srcFile the file containing the SQL command.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSrc</name><parameter_list>(<param><decl><type><name>File</name></type> <name>srcFile</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>srcFile</name></name> = <name>srcFile</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Enable property expansion inside nested text
     *
     * @param expandProperties if true expand properties.
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setExpandProperties</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>expandProperties</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>expandProperties</name></name> = <name>expandProperties</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * is property expansion inside inline text enabled?
     *
     * @return true if properties are to be expanded.
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getExpandProperties</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>expandProperties</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set an inline SQL command to execute.
     * NB: Properties are not expanded in this text unless {@link #expandProperties}
     * is set.
     * @param sql an inline string containing the SQL command.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addText</name><parameter_list>(<param><decl><type><name>String</name></type> <name>sql</name></decl></param>)</parameter_list> <block>{
        <comment type="line">//there is no need to expand properties here as that happens when Transaction.addText is</comment>
        <comment type="line">//called; to do so here would be an error.</comment>
        <expr_stmt><expr><name><name>this</name>.<name>sqlCommand</name></name> += <name>sql</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a set of files (nested fileset attribute).
     * @param set a set of files contains SQL commands, each File is run in
     *            a separate transaction.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addFileset</name><parameter_list>(<param><decl><type><name>FileSet</name></type> <name>set</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a collection of resources (nested element).
     * @param rc a collection of resources containing SQL commands,
     * each resource is run in a separate transaction.
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>ResourceCollection</name></type> <name>rc</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>rc</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Cannot add null ResourceCollection"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <synchronized>synchronized (<expr><name>this</name></expr>) <block>{
            <if>if <condition>(<expr><name>resources</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>resources</name> = new <call><name>Union</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></synchronized>
        <expr_stmt><expr><call><name><name>resources</name>.<name>add</name></name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a SQL transaction to execute
     * @return a Transaction to be configured.
     */</comment>
    <function><type><specifier>public</specifier> <name>Transaction</name></type> <name>createTransaction</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Transaction</name></type> <name>t</name> =<init> <expr>new <call><name>Transaction</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>transactions</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>t</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the file encoding to use on the SQL files read in
     *
     * @param encoding the encoding to use on the files
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setEncoding</name><parameter_list>(<param><decl><type><name>String</name></type> <name>encoding</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>encoding</name></name> = <name>encoding</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the delimiter that separates SQL statements. Defaults to &amp;quot;;&amp;quot;;
     * optional
     *
     * &lt;p&gt;For example, set this to "go" and delimitertype to "ROW" for
     * Sybase ASE or MS SQL Server.&lt;/p&gt;
     * @param delimiter the separator.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDelimiter</name><parameter_list>(<param><decl><type><name>String</name></type> <name>delimiter</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>delimiter</name></name> = <name>delimiter</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the delimiter type: "normal" or "row" (default "normal").
     *
     * &lt;p&gt;The delimiter type takes two values - normal and row. Normal
     * means that any occurrence of the delimiter terminate the SQL
     * command whereas with row, only a line containing just the
     * delimiter is recognized as the end of the command.&lt;/p&gt;
     * @param delimiterType the type of delimiter - "normal" or "row".
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDelimiterType</name><parameter_list>(<param><decl><type><name>DelimiterType</name></type> <name>delimiterType</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>delimiterType</name></name> = <call><name><name>delimiterType</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Print result sets from the statements;
     * optional, default false
     * @param print if true print result sets.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPrint</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>print</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>print</name></name> = <name>print</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Print headers for result sets from the
     * statements; optional, default true.
     * @param showheaders if true print headers of result sets.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setShowheaders</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>showheaders</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>showheaders</name></name> = <name>showheaders</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Print trailing info (rows affected) for the SQL
     * Addresses Bug/Request #27446
     * @param showtrailers if true prints the SQL rows affected
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setShowtrailers</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>showtrailers</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>showtrailers</name></name> = <name>showtrailers</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the output file;
     * optional, defaults to the Ant log.
     * @param output the output file to use for logging messages.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOutput</name><parameter_list>(<param><decl><type><name>File</name></type> <name>output</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setOutput</name><argument_list>(<argument><expr>new <call><name>FileResource</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the output Resource;
     * optional, defaults to the Ant log.
     * @param output the output Resource to store results.
     * @since Ant 1.8
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOutput</name><parameter_list>(<param><decl><type><name>Resource</name></type> <name>output</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>output</name></name> = <name>output</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * whether output should be appended to or overwrite
     * an existing file.  Defaults to false.
     *
     * @since Ant 1.5
     * @param append if true append to an existing file.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAppend</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>append</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>append</name></name> = <name>append</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Action to perform when statement fails: continue, stop, or abort
     * optional; default &amp;quot;abort&amp;quot;
     * @param action the action to perform on statement failure.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOnerror</name><parameter_list>(<param><decl><type><name>OnError</name></type> <name>action</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>onError</name></name> = <call><name><name>action</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * whether or not format should be preserved.
     * Defaults to false.
     *
     * @param keepformat The keepformat to set
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setKeepformat</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>keepformat</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>keepformat</name></name> = <name>keepformat</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set escape processing for statements.
     * @param enable if true enable escape processing, default is true.
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setEscapeProcessing</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>enable</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>escapeProcessing</name> = <name>enable</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set whether to print raw BLOBs rather than their string (hex) representations.
     * @param rawBlobs whether to print raw BLOBs.
     * @since Ant 1.7.1
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRawBlobs</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>rawBlobs</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>rawBlobs</name></name> = <name>rawBlobs</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * If false, delimiters will be searched for in a case-insensitive
     * manner (i.e. delimiter="go" matches "GO") and surrounding
     * whitespace will be ignored (delimiter="go" matches "GO ").
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setStrictDelimiterMatching</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>strictDelimiterMatching</name> = <name>b</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * whether to show SQLWarnings as WARN messages.
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setShowWarnings</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>showWarnings</name> = <name>b</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Whether a warning is an error - in which case onError applies.
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTreatWarningsAsErrors</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>treatWarningsAsErrors</name> =  <name>b</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The column separator used when printing the results.
     *
     * &lt;p&gt;Defaults to ","&lt;/p&gt;
     *
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCsvColumnSeparator</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>csvColumnSep</name> = <name>s</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The character used to quote column values.
     *
     * &lt;p&gt;If set, columns that contain either the column separator or
     * the quote character itself will be surrounded by the quote
     * character.  The quote character itself will be doubled if it
     * appears inside of the column's value.&lt;/p&gt;
     *
     * &lt;p&gt;If this value is not set (the default), no column values
     * will be quoted, not even if they contain the column
     * separator.&lt;/p&gt;
     *
     * &lt;p&gt;&lt;b&gt;Note:&lt;b&gt; BLOB values will never be quoted.&lt;/p&gt;
     *
     * &lt;p&gt;Defaults to "not set"&lt;/p&gt;
     *
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCsvQuoteCharacter</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>s</name> != <name>null</name> &amp;&amp; <call><name><name>s</name>.<name>length</name></name><argument_list>()</argument_list></call> &gt; 1</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"The quote character must be a single"
                                     + " character."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name>csvQuoteChar</name> = <name>s</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Property to set to "true" if a statement throws an error.
     *
     * @param errorProperty the name of the property to set in the
     * event of an error.
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setErrorProperty</name><parameter_list>(<param><decl><type><name>String</name></type> <name>errorProperty</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>errorProperty</name></name> = <name>errorProperty</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Property to set to "true" if a statement produces a warning.
     *
     * @param warningProperty the name of the property to set in the
     * event of a warning.
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setWarningProperty</name><parameter_list>(<param><decl><type><name>String</name></type> <name>warningProperty</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>warningProperty</name></name> = <name>warningProperty</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets a given property to the number of rows in the first
     * statement that returned a row count.
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRowCountProperty</name><parameter_list>(<param><decl><type><name>String</name></type> <name>rowCountProperty</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>rowCountProperty</name></name> = <name>rowCountProperty</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Load the sql file and then execute it
     * @throws BuildException on error.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>Vector</name></type> <name>savedTransaction</name> =<init> <expr>(<name>Vector</name>) <call><name><name>transactions</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>savedSqlCommand</name> =<init> <expr><name>sqlCommand</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>sqlCommand</name> = <call><name><name>sqlCommand</name>.<name>trim</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <try>try <block>{
            <if>if <condition>(<expr><name>srcFile</name> == <name>null</name> &amp;&amp; <call><name><name>sqlCommand</name>.<name>length</name></name><argument_list>()</argument_list></call> == 0 &amp;&amp; <name>resources</name> == <name>null</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><call><name><name>transactions</name>.<name>size</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Source file or resource collection, "
                                             + "transactions or sql statement "
                                             + "must be set!"</expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if>
            }</block></then></if>

            <if>if <condition>(<expr><name>srcFile</name> != <name>null</name> &amp;&amp; !<call><name><name>srcFile</name>.<name>isFile</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Source file " + <name>srcFile</name>
                        + " is not a file!"</expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <if>if <condition>(<expr><name>resources</name> != <name>null</name></expr>)</condition><then> <block>{
                <comment type="line">// deal with the resources</comment>
                <for>for (<init><decl><type><name>Resource</name></type> <name>r</name> :<range> <expr><name>resources</name></expr></range></decl></init>) <block>{
                    <comment type="line">// Make a transaction for each resource</comment>
                    <decl_stmt><decl><type><name>Transaction</name></type> <name>t</name> =<init> <expr><call><name>createTransaction</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>t</name>.<name>setSrcResource</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
            }</block></then></if>

            <comment type="line">// Make a transaction group for the outer command</comment>
            <decl_stmt><decl><type><name>Transaction</name></type> <name>t</name> =<init> <expr><call><name>createTransaction</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>t</name>.<name>setSrc</name></name><argument_list>(<argument><expr><name>srcFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>t</name>.<name>addText</name></name><argument_list>(<argument><expr><name>sqlCommand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><call><name>getConnection</name><argument_list>()</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
                <comment type="line">// not a valid rdbms</comment>
                <return>return;</return>
            }</block></then></if>

            <try>try <block>{
                <decl_stmt><decl><type><name>PrintStream</name></type> <name>out</name> =<init> <expr><call><name><name>KeepAliveOutputStream</name>.<name>wrapSystemOut</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <try>try <block>{
                    <if>if <condition>(<expr><name>output</name> != <name>null</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Opening PrintStream to output Resource " + <name>output</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <decl_stmt><decl><type><name>OutputStream</name></type> <name>os</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>FileProvider</name></type> <name>fp</name> =<init>
                            <expr><call><name><name>output</name>.<name>as</name></name><argument_list>(<argument><expr><name><name>FileProvider</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if>if <condition>(<expr><name>fp</name> != <name>null</name></expr>)</condition><then> <block>{
                            <expr_stmt><expr><name>os</name> = new <call><name>FileOutputStream</name><argument_list>(<argument><expr><call><name><name>fp</name>.<name>getFile</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>append</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then> <else>else <block>{
                            <if>if <condition>(<expr><name>append</name></expr>)</condition><then> <block>{
                                <decl_stmt><decl><type><name>Appendable</name></type> <name>a</name> =<init>
                                    <expr><call><name><name>output</name>.<name>as</name></name><argument_list>(<argument><expr><name><name>Appendable</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                <if>if <condition>(<expr><name>a</name> != <name>null</name></expr>)</condition><then> <block>{
                                    <expr_stmt><expr><name>os</name> = <call><name><name>a</name>.<name>getAppendOutputStream</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                                }</block></then></if>
                            }</block></then></if>
                            <if>if <condition>(<expr><name>os</name> == <name>null</name></expr>)</condition><then> <block>{
                                <expr_stmt><expr><name>os</name> = <call><name><name>output</name>.<name>getOutputStream</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                                <if>if <condition>(<expr><name>append</name></expr>)</condition><then> <block>{
                                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Ignoring append=true for non-appendable"
                                        + " resource " + <name>output</name></expr></argument>,
                                        <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                }</block></then></if>
                            }</block></then></if>
                        }</block></else></if>
                        <expr_stmt><expr><name>out</name> = new <call><name>PrintStream</name><argument_list>(<argument><expr>new <call><name>BufferedOutputStream</name><argument_list>(<argument><expr><name>os</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>

                    <comment type="line">// Process all transactions</comment>
                    <for>for (<init><decl><type><name>Enumeration</name></type> <name>e</name> =<init> <expr><call><name><name>transactions</name>.<name>elements</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init>
                         <condition><expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{

                        <expr_stmt><expr>((<name>Transaction</name>) <call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call>).<call><name>runTransaction</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr>!<call><name>isAutocommit</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Committing transaction"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>getConnection</name><argument_list>()</argument_list></call>.<call><name>commit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                    }</block></for>
                }</block> <finally>finally <block>{
                    <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></finally></try>
            }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
                <expr_stmt><expr><call><name>closeQuietly</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>setErrorProperty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><call><name><name>onError</name>.<name>equals</name></name><argument_list>(<argument><expr>"abort"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if>
            }</block></catch> <catch>catch (<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>) <block>{
                <expr_stmt><expr><call><name>closeQuietly</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>setErrorProperty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><call><name><name>onError</name>.<name>equals</name></name><argument_list>(<argument><expr>"abort"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if>
            }</block></catch> <finally>finally <block>{
                <try>try <block>{
                    <if>if <condition>(<expr><call><name>getStatement</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>getStatement</name><argument_list>()</argument_list></call>.<call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block> <catch>catch (<param><decl><type><name>SQLException</name></type> <name>ex</name></decl></param>) <block>{
                    <comment type="line">// ignore</comment>
                }</block></catch></try>
                <try>try <block>{
                    <if>if <condition>(<expr><call><name>getConnection</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>getConnection</name><argument_list>()</argument_list></call>.<call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block> <catch>catch (<param><decl><type><name>SQLException</name></type> <name>ex</name></decl></param>) <block>{
                    <comment type="line">// ignore</comment>
                }</block></catch></try>
            }</block></finally></try>

            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>goodSql</name> + " of " + <name>totalSql</name> + " SQL statements executed successfully"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><name>transactions</name> = <name>savedTransaction</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>sqlCommand</name> = <name>savedSqlCommand</name></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <comment type="javadoc">/**
     * read in lines and execute them
     * @param reader the reader contains sql lines.
     * @param out the place to output results.
     * @throws SQLException on sql problems
     * @throws IOException on io problems
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>runStatements</name><parameter_list>(<param><decl><type><name>Reader</name></type> <name>reader</name></decl></param>, <param><decl><type><name>PrintStream</name></type> <name>out</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>SQLException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>sql</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>line</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>BufferedReader</name></type> <name>in</name> =<init> <expr>new <call><name>BufferedReader</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <while>while <condition>(<expr>(<name>line</name> = <call><name><name>in</name>.<name>readLine</name></name><argument_list>()</argument_list></call>) != <name>null</name></expr>)</condition> <block>{
            <if>if <condition>(<expr>!<name>keepformat</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>line</name> = <call><name><name>line</name>.<name>trim</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name>expandProperties</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>line</name> = <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>replaceProperties</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr>!<name>keepformat</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><call><name><name>line</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"//"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <continue>continue;</continue>
                }</block></then></if>
                <if>if <condition>(<expr><call><name><name>line</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"--"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <continue>continue;</continue>
                }</block></then></if>
                <decl_stmt><decl><type><name>StringTokenizer</name></type> <name>st</name> =<init> <expr>new <call><name>StringTokenizer</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>st</name>.<name>hasMoreTokens</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>String</name></type> <name>token</name> =<init> <expr><call><name><name>st</name>.<name>nextToken</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr>"REM".<call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <continue>continue;</continue>
                    }</block></then></if>
                }</block></then></if>
            }</block></then></if>

            <expr_stmt><expr><call><name><name>sql</name>.<name>append</name></name><argument_list>(<argument><expr><name>keepformat</name> ? "\n" : " "</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// SQL defines "--" as a comment to EOL</comment>
            <comment type="line">// and in Oracle it may contain a hint</comment>
            <comment type="line">// so we cannot just remove it, instead we must end it</comment>
            <if>if <condition>(<expr>!<name>keepformat</name> &amp;&amp; <call><name><name>line</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"--"</expr></argument>)</argument_list></call> &gt;= 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>sql</name>.<name>append</name></name><argument_list>(<argument><expr>"\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <decl_stmt><decl><type><name>int</name></type> <name>lastDelimPos</name> =<init> <expr><call><name>lastDelimiterPosition</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>lastDelimPos</name> &gt; -1</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>execSQL</name><argument_list>(<argument><expr><call><name><name>sql</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>lastDelimPos</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>sql</name>.<name>replace</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>sql</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></while>
        <comment type="line">// Catch any statements not followed by ;</comment>
        <if>if <condition>(<expr><call><name><name>sql</name>.<name>length</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>execSQL</name><argument_list>(<argument><expr><call><name><name>sql</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Exec the sql statement.
     * @param sql the SQL statement to execute
     * @param out the place to put output
     * @throws SQLException on SQL problems
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>execSQL</name><parameter_list>(<param><decl><type><name>String</name></type> <name>sql</name></decl></param>, <param><decl><type><name>PrintStream</name></type> <name>out</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{
        <comment type="line">// Check and ignore empty statements</comment>
        <if>if <condition>(<expr>"".<call><name>equals</name><argument_list>(<argument><expr><call><name><name>sql</name>.<name>trim</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>ResultSet</name></type> <name>resultSet</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>totalSql</name>++</expr>;</expr_stmt>
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"SQL: " + <name>sql</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>boolean</name></type> <name>ret</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>updateCount</name> =<init> <expr>0</expr></init>, <name>updateCountTotal</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>ret</name> = <call><name>getStatement</name><argument_list>()</argument_list></call>.<call><name>execute</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>updateCount</name> = <call><name>getStatement</name><argument_list>()</argument_list></call>.<call><name>getUpdateCount</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <do>do <block>{
                <if>if <condition>(<expr><name>updateCount</name> != -1</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>updateCountTotal</name> += <name>updateCount</name></expr>;</expr_stmt>
                }</block></then></if>
                <if>if <condition>(<expr><name>ret</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>resultSet</name> = <call><name>getStatement</name><argument_list>()</argument_list></call>.<call><name>getResultSet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>printWarnings</name><argument_list>(<argument><expr><call><name><name>resultSet</name>.<name>getWarnings</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>resultSet</name>.<name>clearWarnings</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>print</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>printResults</name><argument_list>(<argument><expr><name>resultSet</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then></if>
                <expr_stmt><expr><name>ret</name> = <call><name>getStatement</name><argument_list>()</argument_list></call>.<call><name>getMoreResults</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>updateCount</name> = <call><name>getStatement</name><argument_list>()</argument_list></call>.<call><name>getUpdateCount</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block> while <condition>(<expr><name>ret</name> || <name>updateCount</name> != -1</expr>)</condition>;</do>

            <expr_stmt><expr><call><name>printWarnings</name><argument_list>(<argument><expr><call><name>getStatement</name><argument_list>()</argument_list></call>.<call><name>getWarnings</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>getStatement</name><argument_list>()</argument_list></call>.<call><name>clearWarnings</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>updateCountTotal</name> + " rows affected"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>updateCountTotal</name> != -1</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>setRowCountProperty</name><argument_list>(<argument><expr><name>updateCountTotal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <if>if <condition>(<expr><name>print</name> &amp;&amp; <name>showtrailers</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>out</name>.<name>println</name></name><argument_list>(<argument><expr><name>updateCountTotal</name> + " rows affected"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <decl_stmt><decl><type><name>SQLWarning</name></type> <name>warning</name> =<init> <expr><call><name>getConnection</name><argument_list>()</argument_list></call>.<call><name>getWarnings</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>printWarnings</name><argument_list>(<argument><expr><name>warning</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>getConnection</name><argument_list>()</argument_list></call>.<call><name>clearWarnings</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>goodSql</name>++</expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Failed to execute: " + <name>sql</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_ERR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setErrorProperty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<call><name><name>onError</name>.<name>equals</name></name><argument_list>(<argument><expr>"abort"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><call><name><name>e</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_ERR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr>!<call><name><name>onError</name>.<name>equals</name></name><argument_list>(<argument><expr>"continue"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <throw>throw <expr><name>e</name></expr>;</throw>
            }</block></then></if>
        }</block></catch> <finally>finally <block>{
            <if>if <condition>(<expr><name>resultSet</name> != <name>null</name></expr>)</condition><then> <block>{
                <try>try <block>{
                    <expr_stmt><expr><call><name><name>resultSet</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>SQLException</name></type> <name>e</name></decl></param>) <block>{
                    <comment type="line">//ignore</comment>
                }</block></catch></try>
            }</block></then></if>
        }</block></finally></try>
    }</block></function>

    <comment type="javadoc">/**
     * print any results in the statement
     * @deprecated since 1.6.x.
     *             Use {@link #printResults(java.sql.ResultSet, java.io.PrintStream)
     *             the two arg version} instead.
     * @param out the place to print results
     * @throws SQLException on SQL problems.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>printResults</name><parameter_list>(<param><decl><type><name>PrintStream</name></type> <name>out</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>ResultSet</name></type> <name>rs</name> =<init> <expr><call><name>getStatement</name><argument_list>()</argument_list></call>.<call><name>getResultSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name>printResults</name><argument_list>(<argument><expr><name>rs</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
            <if>if <condition>(<expr><name>rs</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>rs</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></finally></try>
    }</block></function>

    <comment type="javadoc">/**
     * print any results in the result set.
     * @param rs the resultset to print information about
     * @param out the place to print results
     * @throws SQLException on SQL problems.
     * @since Ant 1.6.3
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>printResults</name><parameter_list>(<param><decl><type><name>ResultSet</name></type> <name>rs</name></decl></param>, <param><decl><type><name>PrintStream</name></type> <name>out</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>rs</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Processing new result set."</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>ResultSetMetaData</name></type> <name>md</name> =<init> <expr><call><name><name>rs</name>.<name>getMetaData</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>columnCount</name> =<init> <expr><call><name><name>md</name>.<name>getColumnCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>columnCount</name> &gt; 0</expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>showheaders</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>out</name>.<name>print</name></name><argument_list>(<argument><expr><call><name><name>md</name>.<name>getColumnName</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <for>for (<init><decl><type><name>int</name></type> <name>col</name> =<init> <expr>2</expr></init></decl>;</init> <condition><expr><name>col</name> &lt;= <name>columnCount</name></expr>;</condition> <incr><expr><name>col</name>++</expr></incr>) <block>{
                         <expr_stmt><expr><call><name><name>out</name>.<name>print</name></name><argument_list>(<argument><expr><name>csvColumnSep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                         <expr_stmt><expr><call><name><name>out</name>.<name>print</name></name><argument_list>(<argument><expr><call><name>maybeQuote</name><argument_list>(<argument><expr><call><name><name>md</name>.<name>getColumnName</name></name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></for>
                    <expr_stmt><expr><call><name><name>out</name>.<name>println</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <while>while <condition>(<expr><call><name><name>rs</name>.<name>next</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                    <expr_stmt><expr><call><name>printValue</name><argument_list>(<argument><expr><name>rs</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <for>for (<init><decl><type><name>int</name></type> <name>col</name> =<init> <expr>2</expr></init></decl>;</init> <condition><expr><name>col</name> &lt;= <name>columnCount</name></expr>;</condition> <incr><expr><name>col</name>++</expr></incr>) <block>{
                        <expr_stmt><expr><call><name><name>out</name>.<name>print</name></name><argument_list>(<argument><expr><name>csvColumnSep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>printValue</name><argument_list>(<argument><expr><name>rs</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></for>
                    <expr_stmt><expr><call><name><name>out</name>.<name>println</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>printWarnings</name><argument_list>(<argument><expr><call><name><name>rs</name>.<name>getWarnings</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></while>
            }</block></then></if>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>out</name>.<name>println</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>printValue</name><parameter_list>(<param><decl><type><name>ResultSet</name></type> <name>rs</name></decl></param>, <param><decl><type><name>int</name></type> <name>col</name></decl></param>, <param><decl><type><name>PrintStream</name></type> <name>out</name></decl></param>)</parameter_list>
            <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>rawBlobs</name> &amp;&amp; <call><name><name>rs</name>.<name>getMetaData</name></name><argument_list>()</argument_list></call>.<call><name>getColumnType</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call> == <name><name>Types</name>.<name>BLOB</name></name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Blob</name></type> <name>blob</name> =<init> <expr><call><name><name>rs</name>.<name>getBlob</name></name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>blob</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr>new <call><name>StreamPumper</name><argument_list>(<argument><expr><call><name><name>rs</name>.<name>getBlob</name></name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call>.<call><name>getBinaryStream</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call>.<call><name>run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>out</name>.<name>print</name></name><argument_list>(<argument><expr><call><name>maybeQuote</name><argument_list>(<argument><expr><call><name><name>rs</name>.<name>getString</name></name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>maybeQuote</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>csvQuoteChar</name> == <name>null</name> || <name>s</name> == <name>null</name>
            || (<call><name><name>s</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>csvColumnSep</name></expr></argument>)</argument_list></call> == -1 &amp;&amp; <call><name><name>s</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>csvQuoteChar</name></expr></argument>)</argument_list></call> == -1)</expr>
            )</condition><then> <block>{
            <return>return <expr><name>s</name></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>sb</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>(<argument><expr><name>csvQuoteChar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>len</name> =<init> <expr><call><name><name>s</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name>q</name> =<init> <expr><call><name><name>csvQuoteChar</name>.<name>charAt</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>char</name></type> <name>c</name> =<init> <expr><call><name><name>s</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>c</name> == <name>q</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>csvQuoteChar</name></expr></argument>)</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block">/*
     * Closes an unused connection after an error and doesn't rethrow
     * a possible SQLException
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>closeQuietly</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr>!<call><name>isAutocommit</name><argument_list>()</argument_list></call> &amp;&amp; <call><name>getConnection</name><argument_list>()</argument_list></call> != <name>null</name> &amp;&amp; <call><name><name>onError</name>.<name>equals</name></name><argument_list>(<argument><expr>"abort"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <try>try <block>{
                <expr_stmt><expr><call><name>getConnection</name><argument_list>()</argument_list></call>.<call><name>rollback</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>SQLException</name></type> <name>ex</name></decl></param>) <block>{
                <comment type="line">// ignore</comment>
            }</block></catch></try>
        }</block></then></if>
    }</block></function>


    <comment type="javadoc">/**
     * Caches the connection returned by the base class's getConnection method.
     *
     * &lt;p&gt;Subclasses that need to provide a different connection than
     * the base class would, should override this method but keep in
     * mind that this class expects to get the same connection
     * instance on consecutive calls.&lt;/p&gt;
     *
     * &lt;p&gt;returns null if the connection does not connect to the
     * expected RDBMS.&lt;/p&gt;
     */</comment>
    <function><type><specifier>protected</specifier> <name>Connection</name></type> <name>getConnection</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>conn</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>conn</name> = <call><name><name>super</name>.<name>getConnection</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<call><name>isValidRdbms</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>conn</name> = <name>null</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <return>return <expr><name>conn</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Creates and configures a Statement instance which is then
     * cached for subsequent calls.
     *
     * &lt;p&gt;Subclasses that want to provide different Statement
     * instances, should override this method but keep in mind that
     * this class expects to get the same connection instance on
     * consecutive calls.&lt;/p&gt;
     */</comment>
    <function><type><specifier>protected</specifier> <name>Statement</name></type> <name>getStatement</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>statement</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>statement</name> = <call><name>getConnection</name><argument_list>()</argument_list></call>.<call><name>createStatement</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>statement</name>.<name>setEscapeProcessing</name></name><argument_list>(<argument><expr><name>escapeProcessing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <return>return <expr><name>statement</name></expr>;</return>
    }</block></function>
        
    <comment type="javadoc">/**
     * The action a task should perform on an error,
     * one of "continue", "stop" and "abort"
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>OnError</name> <super><extends>extends <name>EnumeratedAttribute</name></extends></super> <block>{
        <comment type="javadoc">/** @return the enumerated values */</comment>
        <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getValues</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"continue"</expr>, <expr>"stop"</expr>, <expr>"abort"</expr>}</block></expr>;</return>
        }</block></function>
    }</block></class>

    <comment type="javadoc">/**
     * Contains the definition of a new transaction element.
     * Transactions allow several files or blocks of statements
     * to be executed using the same JDBC connection and commit
     * operation in between.
     */</comment>
    <class><specifier>public</specifier> class <name>Transaction</name> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>Resource</name></type> <name>tSrcResource</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>tSqlCommand</name> =<init> <expr>""</expr></init></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * Set the source file attribute.
         * @param src the source file
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setSrc</name><parameter_list>(<param><decl><type><name>File</name></type> <name>src</name></decl></param>)</parameter_list> <block>{
            <comment type="line">//there are places (in this file, and perhaps elsewhere, where it is assumed</comment>
            <comment type="line">//that null is an acceptable parameter.</comment>
            <if>if <condition>(<expr><name>src</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>setSrcResource</name><argument_list>(<argument><expr>new <call><name>FileResource</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <comment type="javadoc">/**
         * Set the source resource attribute.
         * @param src the source file
         * @since Ant 1.7
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setSrcResource</name><parameter_list>(<param><decl><type><name>Resource</name></type> <name>src</name></decl></param>)</parameter_list> <block>{
            <if>if <condition>(<expr><name>tSrcResource</name> != <name>null</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"only one resource per transaction"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <expr_stmt><expr><name>tSrcResource</name> = <name>src</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * Set inline text
         * @param sql the inline text
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>addText</name><parameter_list>(<param><decl><type><name>String</name></type> <name>sql</name></decl></param>)</parameter_list> <block>{
            <if>if <condition>(<expr><name>sql</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>this</name>.<name>tSqlCommand</name></name> += <name>sql</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <comment type="javadoc">/**
         * Set the source resource.
         * @param a the source resource collection.
         * @since Ant 1.7
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>addConfigured</name><parameter_list>(<param><decl><type><name>ResourceCollection</name></type> <name>a</name></decl></param>)</parameter_list> <block>{
            <if>if <condition>(<expr><call><name><name>a</name>.<name>size</name></name><argument_list>()</argument_list></call> != 1</expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"only single argument resource "
                                         + "collections are supported."</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <expr_stmt><expr><call><name>setSrcResource</name><argument_list>(<argument><expr><call><name><name>a</name>.<name>iterator</name></name><argument_list>()</argument_list></call>.<call><name>next</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         *
         */</comment>
        <function><type><specifier>private</specifier> <name>void</name></type> <name>runTransaction</name><parameter_list>(<param><decl><type><name>PrintStream</name></type> <name>out</name></decl></param>)</parameter_list>
            <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>SQLException</name></expr></argument></throws> <block>{
            <if>if <condition>(<expr><call><name><name>tSqlCommand</name>.<name>length</name></name><argument_list>()</argument_list></call> != 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Executing commands"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>runStatements</name><argument_list>(<argument><expr>new <call><name>StringReader</name><argument_list>(<argument><expr><name>tSqlCommand</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <if>if <condition>(<expr><name>tSrcResource</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Executing resource: " + <call><name><name>tSrcResource</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>InputStream</name></type> <name>is</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Reader</name></type> <name>reader</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <try>try <block>{
                    <expr_stmt><expr><name>is</name> = <call><name><name>tSrcResource</name>.<name>getInputStream</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>reader</name> = (<name>encoding</name> == <name>null</name>) ? new <call><name>InputStreamReader</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call>
                        : new <call><name>InputStreamReader</name><argument_list>(<argument><expr><name>is</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>runStatements</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <finally>finally <block>{
                    <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></finally></try>
            }</block></then></if>
        }</block></function>
    }</block></class>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>lastDelimiterPosition</name><parameter_list>(<param><decl><type><name>StringBuffer</name></type> <name>buf</name></decl></param>, <param><decl><type><name>String</name></type> <name>currentLine</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>strictDelimiterMatching</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr>(<call><name><name>delimiterType</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>DelimiterType</name>.<name>NORMAL</name></name></expr></argument>)</argument_list></call>
                 &amp;&amp; <call><name><name>StringUtils</name>.<name>endsWith</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>delimiter</name></expr></argument>)</argument_list></call>) ||
                (<call><name><name>delimiterType</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>DelimiterType</name>.<name>ROW</name></name></expr></argument>)</argument_list></call>
                 &amp;&amp; <call><name><name>currentLine</name>.<name>equals</name></name><argument_list>(<argument><expr><name>delimiter</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
                <return>return <expr><call><name><name>buf</name>.<name>length</name></name><argument_list>()</argument_list></call> - <call><name><name>delimiter</name>.<name>length</name></name><argument_list>()</argument_list></call></expr>;</return>
            }</block></then></if>
            <comment type="line">// no match</comment>
            <return>return <expr>-1</expr>;</return>
        }</block></then> <else>else <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>d</name> =<init> <expr><call><name><name>delimiter</name>.<name>trim</name></name><argument_list>()</argument_list></call>.<call><name>toLowerCase</name><argument_list>(<argument><expr><name><name>Locale</name>.<name>ENGLISH</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>delimiterType</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>DelimiterType</name>.<name>NORMAL</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <comment type="line">// still trying to avoid wasteful copying, see</comment>
                <comment type="line">// StringUtils.endsWith</comment>
                <decl_stmt><decl><type><name>int</name></type> <name>endIndex</name> =<init> <expr><call><name><name>delimiter</name>.<name>length</name></name><argument_list>()</argument_list></call> - 1</expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>bufferIndex</name> =<init> <expr><call><name><name>buf</name>.<name>length</name></name><argument_list>()</argument_list></call> - 1</expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><name>bufferIndex</name> &gt;= 0
                       &amp;&amp; <call><name><name>Character</name>.<name>isWhitespace</name></name><argument_list>(<argument><expr><call><name><name>buf</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>bufferIndex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{
                    <expr_stmt><expr>--<name>bufferIndex</name></expr>;</expr_stmt>
                }</block></while>
                <if>if <condition>(<expr><name>bufferIndex</name> &lt; <name>endIndex</name></expr>)</condition><then> <block>{
                    <return>return <expr>-1</expr>;</return>
                }</block></then></if>
                <while>while <condition>(<expr><name>endIndex</name> &gt;= 0</expr>)</condition> <block>{
                    <if>if <condition>(<expr><call><name><name>buf</name>.<name>substring</name></name><argument_list>(<argument><expr><name>bufferIndex</name></expr></argument>, <argument><expr><name>bufferIndex</name> + 1</expr></argument>)</argument_list></call>
                        .<call><name>toLowerCase</name><argument_list>(<argument><expr><name><name>Locale</name>.<name>ENGLISH</name></name></expr></argument>)</argument_list></call>.<call><name>charAt</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>
                        != <call><name><name>d</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>endIndex</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <return>return <expr>-1</expr>;</return>
                    }</block></then></if>
                    <expr_stmt><expr><name>bufferIndex</name>--</expr>;</expr_stmt>
                    <expr_stmt><expr><name>endIndex</name>--</expr>;</expr_stmt>
                }</block></while>
                <return>return <expr><name>bufferIndex</name> + 1</expr>;</return>
            }</block></then> <else>else <block>{
                <return>return <expr><call><name><name>currentLine</name>.<name>trim</name></name><argument_list>()</argument_list></call>.<call><name>toLowerCase</name><argument_list>(<argument><expr><name><name>Locale</name>.<name>ENGLISH</name></name></expr></argument>)</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call>
                    ? <call><name><name>buf</name>.<name>length</name></name><argument_list>()</argument_list></call> - <call><name><name>currentLine</name>.<name>length</name></name><argument_list>()</argument_list></call> : -1</expr>;</return>
            }</block></else></if>
        }</block></else></if>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>printWarnings</name><parameter_list>(<param><decl><type><name>SQLWarning</name></type> <name>warning</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>force</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>SQLWarning</name></type> <name>initialWarning</name> =<init> <expr><name>warning</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>showWarnings</name> || <name>force</name></expr>)</condition><then> <block>{
            <while>while <condition>(<expr><name>warning</name> != <name>null</name></expr>)</condition> <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>warning</name> + " sql warning"</expr></argument>,
                    <argument><expr><name>showWarnings</name> ? <name><name>Project</name>.<name>MSG_WARN</name></name> : <name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>warning</name> = <call><name><name>warning</name>.<name>getNextWarning</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></while>
        }</block></then></if>
        <if>if <condition>(<expr><name>initialWarning</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>setWarningProperty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>treatWarningsAsErrors</name> &amp;&amp; <name>initialWarning</name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr><name>initialWarning</name></expr>;</throw>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>protected</specifier> <specifier>final</specifier> <name>void</name></type> <name>setErrorProperty</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>setProperty</name><argument_list>(<argument><expr><name>errorProperty</name></expr></argument>, <argument><expr>"true"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>protected</specifier> <specifier>final</specifier> <name>void</name></type> <name>setWarningProperty</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>setProperty</name><argument_list>(<argument><expr><name>warningProperty</name></expr></argument>, <argument><expr>"true"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>protected</specifier> <specifier>final</specifier> <name>void</name></type> <name>setRowCountProperty</name><parameter_list>(<param><decl><type><name>int</name></type> <name>rowCount</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setProperty</name><argument_list>(<argument><expr><name>rowCountProperty</name></expr></argument>, <argument><expr><call><name><name>Integer</name>.<name>toString</name></name><argument_list>(<argument><expr><name>rowCount</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>setProperty</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>, <param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>name</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>setNewProperty</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>
}</block></class>
</unit>
