<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\taskdefs\JavaTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>BufferedReader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStreamReader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>OutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>OutputStreamWriter</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>PipedInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>PipedOutputStream</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildFileTest</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>input</name>.<name>DefaultInputHandler</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>TeeOutputStream</name></name>;</import>

<comment type="javadoc">/**
 * stress out java task
 * */</comment>
<class><specifier>public</specifier> class <name>JavaTest</name> <super><extends>extends <name>BuildFileTest</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>TIME_TO_WAIT</name> =<init> <expr>1</expr></init></decl>;</decl_stmt>
    <comment type="line">// wait 1 second extra to allow for java to start ...</comment>
    <comment type="line">// this time was OK on a Win NT machine and on nagoya</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SECURITY_MARGIN</name> =<init> <expr>2000</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Utilities used for file operations */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>FileUtils</name></type> <name>FILE_UTILS</name> =<init> <expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>runFatalTests</name>=<init><expr>false</expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>JavaTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * configure the project.
     * if the property junit.run.fatal.tests is set we run
     * the fatal tests
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr>"src/etc/testcases/taskdefs/java.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//final String propname="tests-classpath.value";</comment>
        <comment type="line">//String testClasspath=System.getProperty(propname);</comment>
        <comment type="line">//System.out.println("Test cp="+testClasspath);</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>runFatal</name>=<init><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"junit.run.fatal.tests"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>runFatal</name>!=<name>null</name></expr>)</condition><then>
            <expr_stmt><expr><name>runFatalTests</name>=true</expr>;</expr_stmt></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// remove log file from testSpawn</comment>
        <expr_stmt><expr><call><name><name>project</name>.<name>executeTarget</name></name><argument_list>(<argument><expr>"cleanup"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNoJarNoClassname</name><parameter_list>()</parameter_list><block>{
        <expr_stmt><expr><call><name>expectBuildExceptionContaining</name><argument_list>(<argument><expr>"testNoJarNoClassname"</expr></argument>,
            <argument><expr>"parameter validation"</expr></argument>,
            <argument><expr>"Classname must not be null."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testJarNoFork</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildExceptionContaining</name><argument_list>(<argument><expr>"testJarNoFork"</expr></argument>,
            <argument><expr>"parameter validation"</expr></argument>,
            <argument><expr>"Cannot execute a jar in non-forked mode. "
                + "Please set fork='true'. "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testJarAndClassName</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildException</name><argument_list>(<argument><expr>"testJarAndClassName"</expr></argument>,
            <argument><expr>"Should not be able to set both classname AND jar"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>testClassnameAndJar</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildException</name><argument_list>(<argument><expr>"testClassnameAndJar"</expr></argument>,
            <argument><expr>"Should not be able to set both classname AND jar"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testRun</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testRun"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>



    <comment type="javadoc">/** this test fails but we ignore the return value;
     *  we verify that failure only matters when failonerror is set
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testRunFail</name><parameter_list>()</parameter_list> <block>{
        <if>if<condition>(<expr><name>runFatalTests</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testRunFail"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testRunFailFoe</name><parameter_list>()</parameter_list> <block>{
        <if>if<condition>(<expr><name>runFatalTests</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>expectBuildExceptionContaining</name><argument_list>(<argument><expr>"testRunFailFoe"</expr></argument>,
                <argument><expr>"java failures being propagated"</expr></argument>,
                <argument><expr>"Java returned:"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testRunFailFoeFork</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildExceptionContaining</name><argument_list>(<argument><expr>"testRunFailFoeFork"</expr></argument>,
            <argument><expr>"java failures being propagated"</expr></argument>,
            <argument><expr>"Java returned:"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testExcepting</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectLogContaining</name><argument_list>(<argument><expr>"testExcepting"</expr></argument>,
                            <argument><expr>"Exception raised inside called program"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testExceptingFork</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectLogContaining</name><argument_list>(<argument><expr>"testExceptingFork"</expr></argument>,
                            <argument><expr>"Java Result:"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testExceptingFoe</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildExceptionContaining</name><argument_list>(<argument><expr>"testExceptingFoe"</expr></argument>,
            <argument><expr>"passes exception through"</expr></argument>,
            <argument><expr>"Exception raised inside called program"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testExceptingFoeFork</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildExceptionContaining</name><argument_list>(<argument><expr>"testExceptingFoeFork"</expr></argument>,
            <argument><expr>"exceptions turned into error codes"</expr></argument>,
            <argument><expr>"Java returned:"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testResultPropertyZero</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testResultPropertyZero"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"0"</expr></argument>,<argument><expr><call><name><name>project</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"exitcode"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testResultPropertyNonZero</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testResultPropertyNonZero"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"2"</expr></argument>,<argument><expr><call><name><name>project</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"exitcode"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testResultPropertyZeroNoFork</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testResultPropertyZeroNoFork"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"0"</expr></argument>,<argument><expr><call><name><name>project</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"exitcode"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testResultPropertyNonZeroNoFork</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testResultPropertyNonZeroNoFork"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"-1"</expr></argument>,<argument><expr><call><name><name>project</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"exitcode"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testRunFailWithFailOnError</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildExceptionContaining</name><argument_list>(<argument><expr>"testRunFailWithFailOnError"</expr></argument>,
            <argument><expr>"non zero return code"</expr></argument>,
            <argument><expr>"Java returned:"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testRunSuccessWithFailOnError</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testRunSuccessWithFailOnError"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testSpawn</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>logFile</name> =<init> <expr><call><name><name>FILE_UTILS</name>.<name>createTempFile</name></name><argument_list>(<argument><expr>"spawn"</expr></argument>,<argument><expr>"log"</expr></argument>, <argument><expr><call><name><name>project</name>.<name>getBaseDir</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// this is guaranteed by FileUtils#createTempFile</comment>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"log file not existing"</expr></argument>, <argument><expr>!<call><name><name>logFile</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>setProperty</name></name><argument_list>(<argument><expr>"logFile"</expr></argument>, <argument><expr><call><name><name>logFile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>setProperty</name></name><argument_list>(<argument><expr>"timeToWait"</expr></argument>, <argument><expr><call><name><name>Long</name>.<name>toString</name></name><argument_list>(<argument><expr><name>TIME_TO_WAIT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>executeTarget</name></name><argument_list>(<argument><expr>"testSpawn"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>Thread</name>.<name>sleep</name></name><argument_list>(<argument><expr><name>TIME_TO_WAIT</name> * 1000 + <name>SECURITY_MARGIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>ex</name></decl></param>) <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"my sleep was interrupted"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <comment type="line">// let's be nice with the next generation of developers</comment>
        <if>if <condition>(<expr>!<call><name><name>logFile</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"suggestion: increase the constant"
            + " SECURITY_MARGIN to give more time for java to start."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"log file exists"</expr></argument>, <argument><expr><call><name><name>logFile</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testRedirect1</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"redirect1"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testRedirect2</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"redirect2"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testRedirect3</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"redirect3"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testRedirector1</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"redirector1"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testRedirector2</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"redirector2"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testReleasedInput</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>PipedOutputStream</name></type> <name>out</name> =<init> <expr>new <call><name>PipedOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>PipedInputStream</name></type> <name>in</name> =<init> <expr>new <call><name>PipedInputStream</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>setInputHandler</name></name><argument_list>(<argument><expr>new <class><super><name>DefaultInputHandler</name></super><argument_list>()</argument_list> <block>{
            <function><type><specifier>protected</specifier> <name>InputStream</name></type> <name>getInputStream</name><parameter_list>()</parameter_list> <block>{
                <return>return <expr><name>in</name></expr>;</return>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>setDefaultInputStream</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Java</name></type> <name>java</name> =<init> <expr>new <call><name>Java</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>java</name>.<name>setProject</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>java</name>.<name>setClassname</name></name><argument_list>(<argument><expr>"org.apache.tools.ant.Main"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>java</name>.<name>setArgs</name></name><argument_list>(<argument><expr>"-version"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>java</name>.<name>setFork</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// note: due to the missing classpath it will fail, but the input stream</comment>
        <comment type="line">// reader will be read</comment>
        <expr_stmt><expr><call><name><name>java</name>.<name>execute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Thread</name></type> <name>inputThread</name> =<init> <expr>new <call><name>Thread</name><argument_list>(<argument><expr>new <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
            <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                <decl_stmt><decl><type><name>Input</name></type> <name>input</name> =<init> <expr>new <call><name>Input</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>input</name>.<name>setProject</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>input</name>.<name>setAddproperty</name></name><argument_list>(<argument><expr>"input.value"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>input</name>.<name>execute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>inputThread</name>.<name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// wait a little bit for the task to wait for input</comment>
        <expr_stmt><expr><call><name><name>Thread</name>.<name>sleep</name></name><argument_list>(<argument><expr>100</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// write some stuff in the input stream to be catched by the input task</comment>
        <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr>"foo\n".<call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>out</name>.<name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr>"bar\n".<call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name>.<name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>x</name></decl></param>) <block>{
            <comment type="line">// "Pipe closed" on XP; ignore?</comment>
        }</block></catch></try>

        <expr_stmt><expr><call><name><name>inputThread</name>.<name>join</name></name><argument_list>(<argument><expr>2000</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"foo"</expr></argument>, <argument><expr><call><name><name>project</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"input.value"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFlushedInput</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>PipedOutputStream</name></type> <name>out</name> =<init> <expr>new <call><name>PipedOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>PipedInputStream</name></type> <name>in</name> =<init> <expr>new <call><name>PipedInputStream</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>setInputHandler</name></name><argument_list>(<argument><expr>new <class><super><name>DefaultInputHandler</name></super><argument_list>()</argument_list> <block>{
            <function><type><specifier>protected</specifier> <name>InputStream</name></type> <name>getInputStream</name><parameter_list>()</parameter_list> <block>{
                <return>return <expr><name>in</name></expr>;</return>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>setDefaultInputStream</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name><index>[]</index></type> <name>timeout</name> =<init> <expr>new <name><name>boolean</name><index>[<expr>1</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>timeout</name><index>[<expr>0</expr>]</index></name> = false</expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Thread</name></type> <name>writingThread</name> =<init> <expr>new <call><name>Thread</name><argument_list>(<argument><expr>new <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
            <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                <try>try <block>{
                    <comment type="line">// wait a little bit to have the target executed</comment>
                    <expr_stmt><expr><call><name><name>Thread</name>.<name>sleep</name></name><argument_list>(<argument><expr>500</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>InterruptedException</name></type> <name>e</name></decl></param>) <block>{
                    <comment type="line">// don't care</comment>
                }</block></catch></try>
                <try>try <block>{
                    <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr>"foo-FlushedInput\n".<call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
                    <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></catch></try>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>writingThread</name>.<name>setDaemon</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>writingThread</name>.<name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"flushedInput"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * entry point class with no dependencies other
     * than normal JRE runtime
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>EntryPoint</name> <block>{

    <comment type="javadoc">/**
     * this entry point is used by the java.xml tests to
     * generate failure strings to handle
     * argv[0] = exit code (optional)
     * argv[1] = string to print to System.out (optional)
     * argv[1] = string to print to System.err (optional)
     */</comment>
        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>argv</name></decl></param>)</parameter_list> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>exitCode</name>=<init><expr>0</expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name><name>argv</name>.<name>length</name></name>&gt;0</expr>)</condition><then> <block>{
                <try>try <block>{
                    <expr_stmt><expr><name>exitCode</name>=<call><name><name>Integer</name>.<name>parseInt</name></name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch(<param><decl><type><name>NumberFormatException</name></type> <name>nfe</name></decl></param>) <block>{
                    <expr_stmt><expr><name>exitCode</name>=-1</expr>;</expr_stmt>
                }</block></catch></try>
            }</block></then></if>
            <if>if<condition>(<expr><name><name>argv</name>.<name>length</name></name>&gt;1</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if<condition>(<expr><name><name>argv</name>.<name>length</name></name>&gt;2</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if<condition>(<expr><name>exitCode</name>!=0</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>System</name>.<name>exit</name></name><argument_list>(<argument><expr><name>exitCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>
    }</block></class>

    <comment type="javadoc">/**
     * entry point class with no dependencies other
     * than normal JRE runtime
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>ExceptingEntryPoint</name> <block>{

        <comment type="javadoc">/**
         * throw a run time exception which does not need
         * to be in the signature of the entry point
         */</comment>
        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>argv</name></decl></param>)</parameter_list> <block>{
            <throw>throw <expr>new <call><name>NullPointerException</name><argument_list>(<argument><expr>"Exception raised inside called program"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></function>
    }</block></class>
    <comment type="javadoc">/**
     * test class for spawn
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>SpawnEntryPoint</name> <block>{
        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<param><decl><type><name><name>String</name> <index>[]</index></name></type> <name>argv</name></decl></param>)</parameter_list> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>sleepTime</name> =<init> <expr>10</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>logFile</name> =<init> <expr>"spawn.log"</expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>argv</name>.<name>length</name></name> &gt;= 1</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>sleepTime</name> = <call><name><name>Integer</name>.<name>parseInt</name></name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name><name>argv</name>.<name>length</name></name> &gt;= 2</expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>logFile</name> = <name><name>argv</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
            }</block></then></if>
            <decl_stmt><decl><type><name>OutputStreamWriter</name></type> <name>out</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <try>try <block>{
                <expr_stmt><expr><call><name><name>Thread</name>.<name>sleep</name></name><argument_list>(<argument><expr><name>sleepTime</name> * 1000</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>InterruptedException</name></type> <name>ex</name></decl></param>) <block>{
                <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"my sleep was interrupted"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>

            <try>try <block>{
                <decl_stmt><decl><type><name>File</name></type> <name>dest</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name>logFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>FileOutputStream</name></type> <name>fos</name> =<init> <expr>new <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>out</name> = new <call><name>OutputStreamWriter</name><argument_list>(<argument><expr><name>fos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr>"bye bye\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>ex</name></decl></param>) <block>{}</block></catch>
            <finally>finally <block>{
                <try>try <block>{<expr_stmt><expr><call><name><name>out</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ioe</name></decl></param>) <block>{}</block></catch></try>}</block></finally></try>

        }</block></function>
    }</block></class>

    <comment type="javadoc">/**
     * entry point class to pipe System.in to the specified stream:
     * "out", "err", or "both".  If none specified, swallow the input.
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>PipeEntryPoint</name> <block>{

        <comment type="javadoc">/**
         * pipe input to specified output
         */</comment>
        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></param>)</parameter_list> <block>{
            <decl_stmt><decl><type><name>OutputStream</name></type> <name>os</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>args</name>.<name>length</name></name> &gt; 0</expr>)</condition><then> <block>{
                <if>if <condition>(<expr>"out".<call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>os</name> = <name><name>System</name>.<name>out</name></name></expr>;</expr_stmt>
                }</block></then> <else>else <if>if <condition>(<expr>"err".<call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>os</name> = <name><name>System</name>.<name>err</name></name></expr>;</expr_stmt>
                }</block></then> <else>else <if>if <condition>(<expr>"both".<call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>os</name> = new <call><name>TeeOutputStream</name><argument_list>(<argument><expr><name><name>System</name>.<name>out</name></name></expr></argument>, <argument><expr><name><name>System</name>.<name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if></else></if></else></if>
            }</block></then></if>
            <if>if <condition>(<expr><name>os</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>Thread</name></type> <name>t</name> =<init> <expr>new <call><name>Thread</name><argument_list>(<argument><expr>new <call><name>StreamPumper</name><argument_list>(<argument><expr><name><name>System</name>.<name>in</name></name></expr></argument>, <argument><expr><name>os</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>t</name>.<name>setName</name></name><argument_list>(<argument><expr>"PipeEntryPoint " + <name><name>args</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>t</name>.<name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <try>try <block>{
                    <expr_stmt><expr><call><name><name>t</name>.<name>join</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>InterruptedException</name></type> <name>eyeEx</name></decl></param>) <block>{
                }</block></catch></try>
            }</block></then></if>
        }</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>ReadPoint</name> <block>{
        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>line</name> =<init> <expr>new <call><name>BufferedReader</name><argument_list>(<argument><expr>new <call><name>InputStreamReader</name><argument_list>(<argument><expr><name><name>System</name>.<name>in</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<call><name>readLine</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>

}</block></class>
</unit>
