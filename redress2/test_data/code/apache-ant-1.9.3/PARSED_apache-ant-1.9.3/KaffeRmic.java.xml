<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\rmic\KaffeRmic.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>rmic</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>ExecuteJava</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Commandline</name></name>;</import>

<comment type="javadoc">/**
 * The implementation of the rmic for Kaffe
 *
 * @since Ant 1.4
 */</comment>
<class><specifier>public</specifier> class <name>KaffeRmic</name> <super><extends>extends <name>DefaultRmicAdapter</name></extends></super> <block>{
    <comment type="line">// sorted by newest Kaffe version first</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name><index>[]</index></type> <name>RMIC_CLASSNAMES</name> =<init> <expr>new <name><name>String</name><index>[]</index></name> <block>{
        <expr>"gnu.classpath.tools.rmi.rmic.RMIC"</expr>,
        <comment type="line">// pre Kaffe 1.1.5</comment>
        <expr>"gnu.java.rmi.rmic.RMIC"</expr>,
        <comment type="line">// pre Kaffe 1.1.2</comment>
        <expr>"kaffe.rmi.rmic.RMIC"</expr>,
    }</block></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * the name of this adapter for users to select
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COMPILER_NAME</name> =<init> <expr>"kaffe"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** {@inheritDoc} */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>getRmic</name><argument_list>()</argument_list></call>.<call><name>log</name><argument_list>(<argument><expr>"Using Kaffe rmic"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Commandline</name></type> <name>cmd</name> =<init> <expr><call><name>setupRmicCommand</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Class</name></type> <name>c</name> =<init> <expr><call><name>getRmicClass</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>c</name> == <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>StringBuffer</name></type> <name>buf</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>(<argument><expr>"Cannot use Kaffe rmic, as it"
                                                + " is not available.  None"
                                                + " of "</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>RMIC_CLASSNAMES</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <if>if <condition>(<expr><name>i</name> != 0</expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr>", "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr><name><name>RMIC_CLASSNAMES</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr>" have been found. A common solution is to set the"
                       + " environment variable JAVA_HOME or CLASSPATH."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><call><name><name>buf</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>,
                                     <argument><expr><call><name>getRmic</name><argument_list>()</argument_list></call>.<call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>cmd</name>.<name>setExecutable</name></name><argument_list>(<argument><expr><call><name><name>c</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name><name>c</name>.<name>getName</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><name><name>RMIC_CLASSNAMES</name><index>[<expr><name><name>RMIC_CLASSNAMES</name>.<name>length</name></name> - 1</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">// only supported since Kaffe 1.1.2</comment>
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-verbose"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>getRmic</name><argument_list>()</argument_list></call>.<call><name>log</name><argument_list>(<argument><expr><call><name><name>Commandline</name>.<name>describeCommand</name></name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>ExecuteJava</name></type> <name>ej</name> =<init> <expr>new <call><name>ExecuteJava</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ej</name>.<name>setJavaCommand</name></name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>ej</name>.<name>fork</name></name><argument_list>(<argument><expr><call><name>getRmic</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> == 0</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * test for kaffe being on the system
     * @return true if kaffe is on the current classpath
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isAvailable</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getRmicClass</name><argument_list>()</argument_list></call> != <name>null</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * tries to load Kaffe RMIC and falls back to the older class name
     * if necessary.
     *
     * @return null if neither class can get loaded.
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>Class</name></type> <name>getRmicClass</name><parameter_list>()</parameter_list> <block>{
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>RMIC_CLASSNAMES</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <try>try <block>{
                <return>return <expr><call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr><name><name>RMIC_CLASSNAMES</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
            }</block> <catch>catch (<param><decl><type><name>ClassNotFoundException</name></type> <name>cnfe</name></decl></param>) <block>{
                <comment type="line">// Ignore</comment>
            }</block></catch></try>
        }</block></for>
        <return>return <expr><name>null</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
