<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\util\ScriptRunnerCreator.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>

<comment type="javadoc">/**
 * This is a helper class used by ScriptRunnerHelper to
 * create a ScriptRunner based on a classloader and on a language.
 */</comment>
<class><specifier>public</specifier> class <name>ScriptRunnerCreator</name> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>AUTO</name> =<init> <expr>"auto"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>OATAU</name> =<init> <expr>"org.apache.tools.ant.util"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>UTIL_OPT</name> =<init> <expr><name>OATAU</name> + ".optional"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>BSF</name> =<init> <expr>"bsf"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>BSF_PACK</name> =<init> <expr>"org.apache.bsf"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>BSF_MANAGER</name> =<init> <expr><name>BSF_PACK</name> + ".BSFManager"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>BSF_RUNNER</name> =<init> <expr><name>UTIL_OPT</name> + ".ScriptRunner"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>JAVAX</name> =<init> <expr>"javax"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>JAVAX_MANAGER</name> =<init> <expr>"javax.script.ScriptEngineManager"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>JAVAX_RUNNER</name> =<init> <expr><name>UTIL_OPT</name> + ".JavaxScriptRunner"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Project</name></type>     <name>project</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type>      <name>manager</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type>      <name>language</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ClassLoader</name></type> <name>scriptLoader</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructor for creator.
     * @param project the current project.
     */</comment>
    <constructor><specifier>public</specifier> <name>ScriptRunnerCreator</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>project</name></name> = <name>project</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Create a ScriptRunner.
     * @param manager      the script manager ("auto" | "bsf" | "javax")
     * @param language     the language.
     * @param classLoader  the classloader to use
     * @return the created script runner.
     * @throws BuildException if unable to create the ScriptRunner.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>ScriptRunnerBase</name></type> <name>createRunner</name><parameter_list>(
        <param><decl><type><name>String</name></type> <name>manager</name></decl></param>, <param><decl><type><name>String</name></type> <name>language</name></decl></param>, <param><decl><type><name>ClassLoader</name></type> <name>classLoader</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>manager</name></name>      = <name>manager</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>language</name></name>     = <name>language</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>scriptLoader</name></name> = <name>classLoader</name></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>language</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"script language must be specified"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>manager</name>.<name>equals</name></name><argument_list>(<argument><expr><name>AUTO</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name><name>manager</name>.<name>equals</name></name><argument_list>(<argument><expr><name>JAVAX</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name><name>manager</name>.<name>equals</name></name><argument_list>(<argument><expr><name>BSF</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Unsupported language prefix " + <name>manager</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <comment type="line">// Check for bsf first then javax</comment>
        <comment type="line">// This version does not check if the scriptManager</comment>
        <comment type="line">// supports the language.</comment>

        <decl_stmt><decl><type><name>ScriptRunnerBase</name></type> <name>ret</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>ret</name> = <call><name>createRunner</name><argument_list>(<argument><expr><name>BSF</name></expr></argument>, <argument><expr><name>BSF_MANAGER</name></expr></argument>, <argument><expr><name>BSF_RUNNER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>ret</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>ret</name> = <call><name>createRunner</name><argument_list>(<argument><expr><name>JAVAX</name></expr></argument>, <argument><expr><name>JAVAX_MANAGER</name></expr></argument>, <argument><expr><name>JAVAX_RUNNER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>ret</name> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>ret</name></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>JAVAX</name>.<name>equals</name></name><argument_list>(<argument><expr><name>manager</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                    <argument><expr>"Unable to load the script engine manager " + "(" + <name>JAVAX_MANAGER</name> + ")"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>BSF</name>.<name>equals</name></name><argument_list>(<argument><expr><name>manager</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                    <argument><expr>"Unable to load the BSF script engine manager " + "(" + <name>BSF_MANAGER</name> + ")"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Unable to load a script engine manager "
                + "(" + <name>BSF_MANAGER</name> + " or " + <name>JAVAX_MANAGER</name> + ")"</expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>

    <comment type="javadoc">/**
     * Create a script runner if the scriptManager matches the passed
     * in manager.
     * This checks if the script manager exists in the scriptLoader
     * classloader and if so it creates and returns the script runner.
     * @param checkManager check if the manager matchs this value.
     * @param managerClass the name of the script manager class.
     * @param runnerClass   the name of ant's script runner for this manager.
     * @return the script runner class.
     * @throws BuildException if there is a problem creating the runner class.
     */</comment>
    <function><type><specifier>private</specifier> <name>ScriptRunnerBase</name></type> <name>createRunner</name><parameter_list>(
        <param><decl><type><name>String</name></type> <name>checkManager</name></decl></param>, <param><decl><type><name>String</name></type> <name>managerClass</name></decl></param>, <param><decl><type><name>String</name></type> <name>runnerClass</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>ScriptRunnerBase</name></type> <name>runner</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>manager</name>.<name>equals</name></name><argument_list>(<argument><expr><name>AUTO</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name><name>manager</name>.<name>equals</name></name><argument_list>(<argument><expr><name>checkManager</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>scriptLoader</name>.<name>getResource</name></name><argument_list>(<argument><expr><call><name><name>LoaderUtils</name>.<name>classNameToResource</name></name><argument_list>(<argument><expr><name>managerClass</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>managerClass</name>.<name>equals</name></name><argument_list>(<argument><expr><name>BSF_MANAGER</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr>new <call><name>ScriptFixBSFPath</name><argument_list>()</argument_list></call>.<call><name>fixClassLoader</name><argument_list>(<argument><expr><name>scriptLoader</name></expr></argument>, <argument><expr><name>language</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <try>try <block>{
            <expr_stmt><expr><name>runner</name> = (<name>ScriptRunnerBase</name>) <call><name><name>Class</name>.<name>forName</name></name><argument_list>(
                    <argument><expr><name>runnerClass</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr><name>scriptLoader</name></expr></argument>)</argument_list></call>.<call><name>newInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>runner</name>.<name>setProject</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>ex</name></decl></param>) <block>{
            <throw>throw <expr><call><name><name>ReflectUtil</name>.<name>toBuildException</name></name><argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
        <expr_stmt><expr><call><name><name>runner</name>.<name>setLanguage</name></name><argument_list>(<argument><expr><name>language</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>runner</name>.<name>setScriptClassLoader</name></name><argument_list>(<argument><expr><name>scriptLoader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>runner</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
