<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\taskdefs\SQLExecTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>sql</name>.<name>Driver</name></name>;</import>
<import>import <name><name>java</name>.<name>sql</name>.<name>Connection</name></name>;</import>
<import>import <name><name>java</name>.<name>sql</name>.<name>SQLException</name></name>;</import>
<import>import <name><name>java</name>.<name>sql</name>.<name>DriverPropertyInfo</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Properties</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>URL</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>logging</name>.<name>Logger</name></name>;</import>

<import>import <name><name>junit</name>.<name>framework</name>.<name>TestCase</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>

<comment type="javadoc">/**
 * Simple testcase to test for driver caching.
 * To test for your own database, you may need to tweak getProperties(int)
 * and add a couple of keys. see testOracle and testMySQL for an example.
 *
 * It would be much better to extend this testcase by using HSQL
 * as the test db, so that a db is really used.
 *
 */</comment>
<class><specifier>public</specifier> class <name>SQLExecTest</name> <super><extends>extends <name>TestCase</name></extends></super> <block>{

    <comment type="line">// some database keys, see #getProperties(int)</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>int</name></type> <name>NULL</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>int</name></type> <name>ORACLE</name> =<init> <expr>1</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>int</name></type> <name>MYSQL</name> =<init> <expr>2</expr></init></decl>;</decl_stmt>

    <comment type="line">// keys used in properties.</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>DRIVER</name> =<init> <expr>"driver"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>USER</name> =<init> <expr>"user"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>PASSWORD</name> =<init> <expr>"password"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>URL</name> =<init> <expr>"url"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>PATH</name> =<init> <expr>"path"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>SQL</name> =<init> <expr>"sql"</expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>SQLExecTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <comment type="line">// make sure the cache is cleared.</comment>
        <expr_stmt><expr><call><name><name>JDBCTask</name>.<name>getLoaderMap</name></name><argument_list>()</argument_list></call>.<call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

   <comment type="line">// simple test to ensure that the caching does work...</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testDriverCaching</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name>SQLExec</name></type> <name>sql</name> =<init> <expr><call><name>createTask</name><argument_list>(<argument><expr><call><name>getProperties</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>!<call><name><name>SQLExec</name>.<name>getLoaderMap</name></name><argument_list>()</argument_list></call>.<call><name>containsKey</name><argument_list>(<argument><expr><name>NULL_DRIVER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>sql</name>.<name>execute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>e</name></decl></param>)<block>{
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getCause</name></name><argument_list>()</argument_list></call>.<call><name>getMessage</name><argument_list>()</argument_list></call>.<call><name>indexOf</name><argument_list>(<argument><expr>"No suitable Driver"</expr></argument>)</argument_list></call> != -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>SQLExec</name>.<name>getLoaderMap</name></name><argument_list>()</argument_list></call>.<call><name>containsKey</name><argument_list>(<argument><expr><name>NULL_DRIVER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertSame</name><argument_list>(<argument><expr><call><name><name>sql</name>.<name>getLoader</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>JDBCTask</name>.<name>getLoaderMap</name></name><argument_list>()</argument_list></call>.<call><name>get</name><argument_list>(<argument><expr><name>NULL_DRIVER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ClassLoader</name></type> <name>loader1</name> =<init> <expr><call><name><name>sql</name>.<name>getLoader</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// 2nd run..</comment>
        <expr_stmt><expr><name>sql</name> = <call><name>createTask</name><argument_list>(<argument><expr><call><name>getProperties</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// the driver must still be cached.</comment>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>JDBCTask</name>.<name>getLoaderMap</name></name><argument_list>()</argument_list></call>.<call><name>containsKey</name><argument_list>(<argument><expr><name>NULL_DRIVER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>sql</name>.<name>execute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>e</name></decl></param>)<block>{
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getCause</name></name><argument_list>()</argument_list></call>.<call><name>getMessage</name><argument_list>()</argument_list></call>.<call><name>indexOf</name><argument_list>(<argument><expr>"No suitable Driver"</expr></argument>)</argument_list></call> != -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>JDBCTask</name>.<name>getLoaderMap</name></name><argument_list>()</argument_list></call>.<call><name>containsKey</name><argument_list>(<argument><expr><name>NULL_DRIVER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertSame</name><argument_list>(<argument><expr><call><name><name>sql</name>.<name>getLoader</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>JDBCTask</name>.<name>getLoaderMap</name></name><argument_list>()</argument_list></call>.<call><name>get</name><argument_list>(<argument><expr><name>NULL_DRIVER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertSame</name><argument_list>(<argument><expr><name>loader1</name></expr></argument>, <argument><expr><call><name><name>sql</name>.<name>getLoader</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNull</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>doMultipleCalls</name><argument_list>(<argument><expr>1000</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block">/*
    public void testOracle(){
        doMultipleCalls(1000, ORACLE, true, false);
    }*/</comment>

    <comment type="block">/*
    public void testMySQL(){
        doMultipleCalls(1000, MYSQL, true, false);
    }*/</comment>


    <comment type="javadoc">/**
     * run a sql tasks multiple times.
     * @param calls number of times to execute the task
     * @param database the database to execute on.
     * @param caching should caching be enabled ?
     * @param catchexception true to catch exception for each call, false if not.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>doMultipleCalls</name><parameter_list>(<param><decl><type><name>int</name></type> <name>calls</name></decl></param>, <param><decl><type><name>int</name></type> <name>database</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>caching</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>catchexception</name></decl></param>)</parameter_list><block>{
        <decl_stmt><decl><type><name>Properties</name></type> <name>props</name> =<init> <expr><call><name>getProperties</name><argument_list>(<argument><expr><name>database</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>calls</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{
            <decl_stmt><decl><type><name>SQLExec</name></type> <name>sql</name> =<init> <expr><call><name>createTask</name><argument_list>(<argument><expr><name>props</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>sql</name>.<name>setCaching</name></name><argument_list>(<argument><expr><name>caching</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <try>try  <block>{
                <expr_stmt><expr><call><name><name>sql</name>.<name>execute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>e</name></decl></param>)<block>{
                <if>if <condition>(<expr>!<name>catchexception</name></expr>)</condition><then><block>{
                    <throw>throw <expr><name>e</name></expr>;</throw>
                }</block></then></if>
            }</block></catch></try>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Create a task from a set of properties
     * @see #getProperties(int)
     */</comment>
    <function><type><specifier>protected</specifier> <name>SQLExec</name></type> <name>createTask</name><parameter_list>(<param><decl><type><name>Properties</name></type> <name>props</name></decl></param>)</parameter_list><block>{
        <decl_stmt><decl><type><name>SQLExec</name></type> <name>sql</name> =<init> <expr>new <call><name>SQLExec</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sql</name>.<name>setProject</name></name><argument_list>( <argument><expr>new <call><name>Project</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sql</name>.<name>setDriver</name></name><argument_list>( <argument><expr><call><name><name>props</name>.<name>getProperty</name></name><argument_list>(<argument><expr><name>DRIVER</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sql</name>.<name>setUserid</name></name><argument_list>( <argument><expr><call><name><name>props</name>.<name>getProperty</name></name><argument_list>(<argument><expr><name>USER</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sql</name>.<name>setPassword</name></name><argument_list>( <argument><expr><call><name><name>props</name>.<name>getProperty</name></name><argument_list>(<argument><expr><name>PASSWORD</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sql</name>.<name>setUrl</name></name><argument_list>( <argument><expr><call><name><name>props</name>.<name>getProperty</name></name><argument_list>(<argument><expr><name>URL</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sql</name>.<name>createClasspath</name></name><argument_list>()</argument_list></call>.<call><name>setLocation</name><argument_list>( <argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>props</name>.<name>getProperty</name></name><argument_list>(<argument><expr><name>PATH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sql</name>.<name>addText</name></name><argument_list>( <argument><expr><call><name><name>props</name>.<name>getProperty</name></name><argument_list>(<argument><expr><name>SQL</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>sql</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * try to find the path from a resource (jar file or directory name)
     * so that it can be used as a classpath to load the resource.
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>findResourcePath</name><parameter_list>(<param><decl><type><name>String</name></type> <name>resource</name></decl></param>)</parameter_list><block>{
        <expr_stmt><expr><name>resource</name> = <call><name><name>resource</name>.<name>replace</name></name><argument_list>(<argument><expr>'.'</expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call> + ".class"</expr>;</expr_stmt>
        <decl_stmt><decl><type><name>URL</name></type> <name>url</name> =<init> <expr><call><name>getClass</name><argument_list>()</argument_list></call>.<call><name>getClassLoader</name><argument_list>()</argument_list></call>.<call><name>getResource</name><argument_list>(<argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>url</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>String</name></type> <name>u</name> =<init> <expr><call><name><name>url</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>u</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"jar:file:"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>pling</name> =<init> <expr><call><name><name>u</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"!"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>u</name>.<name>substring</name></name><argument_list>(<argument><expr>"jar:file:".<call><name>length</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>pling</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>u</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"file:"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>tail</name> =<init> <expr><call><name><name>u</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>u</name>.<name>substring</name></name><argument_list>(<argument><expr>"file:".<call><name>length</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>tail</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if></else></if>
        <return>return <expr><name>null</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * returns a configuration associated to a specific database.
     * If you want to test on your specific base, you'd better
     * tweak this to make it run or add your own database.
     * The driver lib should be dropped into the system classloader.
     */</comment>
    <function><type><specifier>protected</specifier> <name>Properties</name></type> <name>getProperties</name><parameter_list>(<param><decl><type><name>int</name></type> <name>database</name></decl></param>)</parameter_list><block>{
        <decl_stmt><decl><type><name>Properties</name></type> <name>props</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name>database</name></expr>)</condition><block>{
            <case>case <expr><name>ORACLE</name></expr>:
                <expr_stmt><expr><name>props</name> = <call><name>getProperties</name><argument_list>(<argument><expr>"oracle.jdbc.driver.OracleDriver"</expr></argument>, <argument><expr>"test"</expr></argument>, <argument><expr>"test"</expr></argument>, <argument><expr>"jdbc:oracle:thin:@127.0.0.1:1521:orcl"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr><name>MYSQL</name></expr>:
                <expr_stmt><expr><name>props</name> = <call><name>getProperties</name><argument_list>(<argument><expr>"org.gjt.mm.mysql.Driver"</expr></argument>, <argument><expr>"test"</expr></argument>, <argument><expr>"test"</expr></argument>, <argument><expr>"jdbc:mysql://127.0.0.1:3306/test"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr><name>NULL</name></expr>:
            </case><default>default:
                <expr_stmt><expr><name>props</name> = <call><name>getProperties</name><argument_list>(<argument><expr><name>NULL_DRIVER</name></expr></argument>, <argument><expr>"test"</expr></argument>, <argument><expr>"test"</expr></argument>, <argument><expr>"jdbc:database://hostname:port/name"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </default>}</block></switch>
        <comment type="line">// look for the driver path...</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>path</name> =<init> <expr><call><name>findResourcePath</name><argument_list>(<argument><expr><call><name><name>props</name>.<name>getProperty</name></name><argument_list>(<argument><expr><name>DRIVER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>props</name>.<name>put</name></name><argument_list>(<argument><expr><name>PATH</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>props</name>.<name>put</name></name><argument_list>(<argument><expr><name>SQL</name></expr></argument>, <argument><expr>"create table OOME_TEST(X INTEGER NOT NULL);\ndrop table if exists OOME_TEST;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>props</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/** helper method to build properties */</comment>
    <function><type><specifier>protected</specifier> <name>Properties</name></type> <name>getProperties</name><parameter_list>(<param><decl><type><name>String</name></type> <name>driver</name></decl></param>, <param><decl><type><name>String</name></type> <name>user</name></decl></param>, <param><decl><type><name>String</name></type> <name>pwd</name></decl></param>, <param><decl><type><name>String</name></type> <name>url</name></decl></param>)</parameter_list><block>{
        <decl_stmt><decl><type><name>Properties</name></type> <name>props</name> =<init> <expr>new <call><name>Properties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>props</name>.<name>put</name></name><argument_list>(<argument><expr><name>DRIVER</name></expr></argument>, <argument><expr><name>driver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>props</name>.<name>put</name></name><argument_list>(<argument><expr><name>USER</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>props</name>.<name>put</name></name><argument_list>(<argument><expr><name>PASSWORD</name></expr></argument>, <argument><expr><name>pwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>props</name>.<name>put</name></name><argument_list>(<argument><expr><name>URL</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>props</name></expr>;</return>
    }</block></function>


<comment type="line">//--- NULL JDBC driver just for simple test since there are no db driver</comment>
<comment type="line">// available as a default in Ant :)</comment>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>NULL_DRIVER</name> =<init> <expr><name><name>NullDriver</name>.<name><name/></name></name>class.<call><name>getName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>NullDriver</name> <super><implements>implements <name>Driver</name></implements></super> <block>{
        <function><type><specifier>public</specifier> <name>Connection</name></type> <name>connect</name><parameter_list>(<param><decl><type><name>String</name></type> <name>url</name></decl></param>, <param><decl><type><name>Properties</name></type> <name>info</name></decl></param>)</parameter_list>
                <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>acceptsURL</name><parameter_list>(<param><decl><type><name>String</name></type> <name>url</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>DriverPropertyInfo</name><index>[]</index></type> <name>getPropertyInfo</name><parameter_list>(<param><decl><type><name>String</name></type> <name>url</name></decl></param>, <param><decl><type><name>Properties</name></type> <name>info</name></decl></param>)</parameter_list>
                <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{
            <return>return <expr>new <name><name>DriverPropertyInfo</name><index>[<expr>0</expr>]</index></name></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>getMajorVersion</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr>0</expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>getMinorVersion</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr>0</expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>jdbcCompliant</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>Logger</name></type> <name>getParentLogger</name><parameter_list>()</parameter_list> <comment type="block">/*throws SQLFeatureNotSupportedException*/</comment> <block>{
            <return>return <expr><call><name><name>Logger</name>.<name>getAnonymousLogger</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testLastDelimiterPositionNormalModeStrict</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>SQLExec</name></type> <name>s</name> =<init> <expr>new <call><name>SQLExec</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>-1</expr></argument>,
                     <argument><expr><call><name><name>s</name>.<name>lastDelimiterPosition</name></name><argument_list>(<argument><expr>new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>-1</expr></argument>,
                     <argument><expr><call><name><name>s</name>.<name>lastDelimiterPosition</name></name><argument_list>(<argument><expr>new <call><name>StringBuffer</name><argument_list>(<argument><expr>"GO"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>-1</expr></argument>,
                     <argument><expr><call><name><name>s</name>.<name>lastDelimiterPosition</name></name><argument_list>(<argument><expr>new <call><name>StringBuffer</name><argument_list>(<argument><expr>"; "</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>2</expr></argument>,
                     <argument><expr><call><name><name>s</name>.<name>lastDelimiterPosition</name></name><argument_list>(<argument><expr>new <call><name>StringBuffer</name><argument_list>(<argument><expr>"ab;"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>s</name>.<name>setDelimiter</name></name><argument_list>(<argument><expr>"GO"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>-1</expr></argument>,
                     <argument><expr><call><name><name>s</name>.<name>lastDelimiterPosition</name></name><argument_list>(<argument><expr>new <call><name>StringBuffer</name><argument_list>(<argument><expr>"GO "</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>-1</expr></argument>,
                     <argument><expr><call><name><name>s</name>.<name>lastDelimiterPosition</name></name><argument_list>(<argument><expr>new <call><name>StringBuffer</name><argument_list>(<argument><expr>"go"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>0</expr></argument>,
                     <argument><expr><call><name><name>s</name>.<name>lastDelimiterPosition</name></name><argument_list>(<argument><expr>new <call><name>StringBuffer</name><argument_list>(<argument><expr>"GO"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testLastDelimiterPositionNormalModeNonStrict</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>SQLExec</name></type> <name>s</name> =<init> <expr>new <call><name>SQLExec</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>s</name>.<name>setStrictDelimiterMatching</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>-1</expr></argument>,
                     <argument><expr><call><name><name>s</name>.<name>lastDelimiterPosition</name></name><argument_list>(<argument><expr>new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>-1</expr></argument>,
                     <argument><expr><call><name><name>s</name>.<name>lastDelimiterPosition</name></name><argument_list>(<argument><expr>new <call><name>StringBuffer</name><argument_list>(<argument><expr>"GO"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>0</expr></argument>,
                     <argument><expr><call><name><name>s</name>.<name>lastDelimiterPosition</name></name><argument_list>(<argument><expr>new <call><name>StringBuffer</name><argument_list>(<argument><expr>"; "</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>2</expr></argument>,
                     <argument><expr><call><name><name>s</name>.<name>lastDelimiterPosition</name></name><argument_list>(<argument><expr>new <call><name>StringBuffer</name><argument_list>(<argument><expr>"ab;"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>s</name>.<name>setDelimiter</name></name><argument_list>(<argument><expr>"GO"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>0</expr></argument>,
                     <argument><expr><call><name><name>s</name>.<name>lastDelimiterPosition</name></name><argument_list>(<argument><expr>new <call><name>StringBuffer</name><argument_list>(<argument><expr>"GO "</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>0</expr></argument>,
                     <argument><expr><call><name><name>s</name>.<name>lastDelimiterPosition</name></name><argument_list>(<argument><expr>new <call><name>StringBuffer</name><argument_list>(<argument><expr>"go"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>0</expr></argument>,
                     <argument><expr><call><name><name>s</name>.<name>lastDelimiterPosition</name></name><argument_list>(<argument><expr>new <call><name>StringBuffer</name><argument_list>(<argument><expr>"GO"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testLastDelimiterPositionRowModeStrict</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>SQLExec</name></type> <name>s</name> =<init> <expr>new <call><name>SQLExec</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>SQLExec</name>.<name>DelimiterType</name></name></type> <name>t</name> =<init> <expr>new <call><name><name>SQLExec</name>.<name>DelimiterType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>t</name>.<name>setValue</name></name><argument_list>(<argument><expr>"row"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>s</name>.<name>setDelimiterType</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>-1</expr></argument>, <argument><expr><call><name><name>s</name>.<name>lastDelimiterPosition</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>-1</expr></argument>, <argument><expr><call><name><name>s</name>.<name>lastDelimiterPosition</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr>"GO"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>-1</expr></argument>, <argument><expr><call><name><name>s</name>.<name>lastDelimiterPosition</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr>"; "</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><call><name><name>s</name>.<name>lastDelimiterPosition</name></name><argument_list>(<argument><expr>new <call><name>StringBuffer</name><argument_list>(<argument><expr>"ab"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>";"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>s</name>.<name>setDelimiter</name></name><argument_list>(<argument><expr>"GO"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>-1</expr></argument>, <argument><expr><call><name><name>s</name>.<name>lastDelimiterPosition</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr>"GO "</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>-1</expr></argument>, <argument><expr><call><name><name>s</name>.<name>lastDelimiterPosition</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr>"go"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>s</name>.<name>lastDelimiterPosition</name></name><argument_list>(<argument><expr>new <call><name>StringBuffer</name><argument_list>(<argument><expr>"ab"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"GO"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testLastDelimiterPositionRowModeNonStrict</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>SQLExec</name></type> <name>s</name> =<init> <expr>new <call><name>SQLExec</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>SQLExec</name>.<name>DelimiterType</name></name></type> <name>t</name> =<init> <expr>new <call><name><name>SQLExec</name>.<name>DelimiterType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>t</name>.<name>setValue</name></name><argument_list>(<argument><expr>"row"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>s</name>.<name>setDelimiterType</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>s</name>.<name>setStrictDelimiterMatching</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>-1</expr></argument>, <argument><expr><call><name><name>s</name>.<name>lastDelimiterPosition</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>-1</expr></argument>, <argument><expr><call><name><name>s</name>.<name>lastDelimiterPosition</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr>"GO"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>s</name>.<name>lastDelimiterPosition</name></name><argument_list>(<argument><expr>new <call><name>StringBuffer</name><argument_list>(<argument><expr>"; "</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"; "</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><call><name><name>s</name>.<name>lastDelimiterPosition</name></name><argument_list>(<argument><expr>new <call><name>StringBuffer</name><argument_list>(<argument><expr>"ab"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>";"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>s</name>.<name>setDelimiter</name></name><argument_list>(<argument><expr>"GO"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>1</expr></argument>,
                     <argument><expr><call><name><name>s</name>.<name>lastDelimiterPosition</name></name><argument_list>(<argument><expr>new <call><name>StringBuffer</name><argument_list>(<argument><expr>"abcd"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"GO "</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>s</name>.<name>lastDelimiterPosition</name></name><argument_list>(<argument><expr>new <call><name>StringBuffer</name><argument_list>(<argument><expr>"go"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"go"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>s</name>.<name>lastDelimiterPosition</name></name><argument_list>(<argument><expr>new <call><name>StringBuffer</name><argument_list>(<argument><expr>"ab"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"GO"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
