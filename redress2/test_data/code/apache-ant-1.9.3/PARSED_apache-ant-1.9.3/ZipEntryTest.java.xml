<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\zip\ZipEntryTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>zip</name></name>;</package>

<import>import <name><name>junit</name>.<name>framework</name>.<name>TestCase</name></name>;</import>

<comment type="javadoc">/**
 * JUnit 3 testcases for org.apache.tools.zip.ZipEntry.
 *
 */</comment>
<class><specifier>public</specifier> class <name>ZipEntryTest</name> <super><extends>extends <name>TestCase</name></extends></super> <block>{

    <constructor><specifier>public</specifier> <name>ZipEntryTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * test handling of extra fields
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testExtraFields</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>AsiExtraField</name></type> <name>a</name> =<init> <expr>new <call><name>AsiExtraField</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>a</name>.<name>setDirectory</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>a</name>.<name>setMode</name></name><argument_list>(<argument><expr>0755</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>UnrecognizedExtraField</name></type> <name>u</name> =<init> <expr>new <call><name>UnrecognizedExtraField</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>u</name>.<name>setHeaderId</name></name><argument_list>(<argument><expr><name><name>ExtraFieldUtilsTest</name>.<name>UNRECOGNIZED_HEADER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>u</name>.<name>setLocalFileDataData</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ZipEntry</name></type> <name>ze</name> =<init> <expr>new <call><name>ZipEntry</name><argument_list>(<argument><expr>"test/"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ze</name>.<name>setExtraFields</name></name><argument_list>(<argument><expr>new <name><name>ZipExtraField</name><index>[]</index></name> <block>{<expr><name>a</name></expr>, <expr><name>u</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>data1</name> =<init> <expr><call><name><name>ze</name>.<name>getExtra</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ZipExtraField</name><index>[]</index></type> <name>result</name> =<init> <expr><call><name><name>ze</name>.<name>getExtraFields</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"first pass"</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name><name>result</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertSame</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>result</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertSame</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name><name>result</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>UnrecognizedExtraField</name></type> <name>u2</name> =<init> <expr>new <call><name>UnrecognizedExtraField</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>u2</name>.<name>setHeaderId</name></name><argument_list>(<argument><expr><name><name>ExtraFieldUtilsTest</name>.<name>UNRECOGNIZED_HEADER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>u2</name>.<name>setLocalFileDataData</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name> <block>{<expr>1</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>ze</name>.<name>addExtraField</name></name><argument_list>(<argument><expr><name>u2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>data2</name> =<init> <expr><call><name><name>ze</name>.<name>getExtra</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> = <call><name><name>ze</name>.<name>getExtraFields</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"second pass"</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name><name>result</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertSame</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>result</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertSame</name><argument_list>(<argument><expr><name>u2</name></expr></argument>, <argument><expr><name><name>result</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"length second pass"</expr></argument>, <argument><expr><name><name>data1</name>.<name>length</name></name>+1</expr></argument>, <argument><expr><name><name>data2</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>UnrecognizedExtraField</name></type> <name>u3</name> =<init> <expr>new <call><name>UnrecognizedExtraField</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>u3</name>.<name>setHeaderId</name></name><argument_list>(<argument><expr>new <call><name>ZipShort</name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>u3</name>.<name>setLocalFileDataData</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name> <block>{<expr>1</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ze</name>.<name>addExtraField</name></name><argument_list>(<argument><expr><name>u3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = <call><name><name>ze</name>.<name>getExtraFields</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"third pass"</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr><name><name>result</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>ze</name>.<name>removeExtraField</name></name><argument_list>(<argument><expr><name><name>ExtraFieldUtilsTest</name>.<name>UNRECOGNIZED_HEADER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>data3</name> =<init> <expr><call><name><name>ze</name>.<name>getExtra</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> = <call><name><name>ze</name>.<name>getExtraFields</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"fourth pass"</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name><name>result</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertSame</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>result</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertSame</name><argument_list>(<argument><expr><name>u3</name></expr></argument>, <argument><expr><name><name>result</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"length fourth pass"</expr></argument>, <argument><expr><name><name>data2</name>.<name>length</name></name></expr></argument>, <argument><expr><name><name>data3</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <try>try <block>{
            <expr_stmt><expr><call><name><name>ze</name>.<name>removeExtraField</name></name><argument_list>(<argument><expr><name><name>ExtraFieldUtilsTest</name>.<name>UNRECOGNIZED_HEADER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"should be no such element"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name><name>java</name>.<name>util</name>.<name>NoSuchElementException</name></name></type> <name>nse</name></decl></param>) <block>{
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * test handling of extra fields via central directory
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testExtraFieldMerging</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>AsiExtraField</name></type> <name>a</name> =<init> <expr>new <call><name>AsiExtraField</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>a</name>.<name>setDirectory</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>a</name>.<name>setMode</name></name><argument_list>(<argument><expr>0755</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>UnrecognizedExtraField</name></type> <name>u</name> =<init> <expr>new <call><name>UnrecognizedExtraField</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>u</name>.<name>setHeaderId</name></name><argument_list>(<argument><expr><name><name>ExtraFieldUtilsTest</name>.<name>UNRECOGNIZED_HEADER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>u</name>.<name>setLocalFileDataData</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ZipEntry</name></type> <name>ze</name> =<init> <expr>new <call><name>ZipEntry</name><argument_list>(<argument><expr>"test/"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ze</name>.<name>setExtraFields</name></name><argument_list>(<argument><expr>new <name><name>ZipExtraField</name><index>[]</index></name> <block>{<expr><name>a</name></expr>, <expr><name>u</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// merge</comment>
        <comment type="line">// Header-ID 1 + length 1 + one byte of data</comment>
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>b</name> =<init> <expr><call><name><name>ExtraFieldUtilsTest</name>.<name>UNRECOGNIZED_HEADER</name>.<name>getBytes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ze</name>.<name>setCentralDirectoryExtra</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name> <block>{<expr><name><name>b</name><index>[<expr>0</expr>]</index></name></expr>, <expr><name><name>b</name><index>[<expr>1</expr>]</index></name></expr>, <expr>1</expr>, <expr>0</expr>, <expr>127</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ZipExtraField</name><index>[]</index></type> <name>result</name> =<init> <expr><call><name><name>ze</name>.<name>getExtraFields</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"first pass"</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name><name>result</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertSame</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>result</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>ExtraFieldUtilsTest</name>.<name>UNRECOGNIZED_HEADER</name></name></expr></argument>,
                     <argument><expr><name><name>result</name><index>[<expr>1</expr>]</index></name>.<call><name>getHeaderId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>new <call><name>ZipShort</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>result</name><index>[<expr>1</expr>]</index></name>.<call><name>getLocalFileDataLength</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>new <call><name>ZipShort</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>result</name><index>[<expr>1</expr>]</index></name>.<call><name>getCentralDirectoryLength</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// add new</comment>
        <comment type="line">// Header-ID 2 + length 0</comment>
        <expr_stmt><expr><call><name><name>ze</name>.<name>setCentralDirectoryExtra</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name> <block>{<expr>2</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>result</name> = <call><name><name>ze</name>.<name>getExtraFields</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"second pass"</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr><name><name>result</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// merge</comment>
        <comment type="line">// Header-ID 2 + length 1 + one byte of data</comment>
        <expr_stmt><expr><call><name><name>ze</name>.<name>setExtra</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name> <block>{<expr>2</expr>, <expr>0</expr>, <expr>1</expr>, <expr>0</expr>, <expr>127</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>result</name> = <call><name><name>ze</name>.<name>getExtraFields</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"third pass"</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr><name><name>result</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertSame</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>result</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>new <call><name>ZipShort</name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>result</name><index>[<expr>2</expr>]</index></name>.<call><name>getHeaderId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>new <call><name>ZipShort</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>result</name><index>[<expr>2</expr>]</index></name>.<call><name>getLocalFileDataLength</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>new <call><name>ZipShort</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>result</name><index>[<expr>2</expr>]</index></name>.<call><name>getCentralDirectoryLength</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * test handling of extra fields
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testAddAsFirstExtraField</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>AsiExtraField</name></type> <name>a</name> =<init> <expr>new <call><name>AsiExtraField</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>a</name>.<name>setDirectory</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>a</name>.<name>setMode</name></name><argument_list>(<argument><expr>0755</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>UnrecognizedExtraField</name></type> <name>u</name> =<init> <expr>new <call><name>UnrecognizedExtraField</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>u</name>.<name>setHeaderId</name></name><argument_list>(<argument><expr><name><name>ExtraFieldUtilsTest</name>.<name>UNRECOGNIZED_HEADER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>u</name>.<name>setLocalFileDataData</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ZipEntry</name></type> <name>ze</name> =<init> <expr>new <call><name>ZipEntry</name><argument_list>(<argument><expr>"test/"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ze</name>.<name>setExtraFields</name></name><argument_list>(<argument><expr>new <name><name>ZipExtraField</name><index>[]</index></name> <block>{<expr><name>a</name></expr>, <expr><name>u</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>data1</name> =<init> <expr><call><name><name>ze</name>.<name>getExtra</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>UnrecognizedExtraField</name></type> <name>u2</name> =<init> <expr>new <call><name>UnrecognizedExtraField</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>u2</name>.<name>setHeaderId</name></name><argument_list>(<argument><expr><name><name>ExtraFieldUtilsTest</name>.<name>UNRECOGNIZED_HEADER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>u2</name>.<name>setLocalFileDataData</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name> <block>{<expr>1</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>ze</name>.<name>addAsFirstExtraField</name></name><argument_list>(<argument><expr><name>u2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>data2</name> =<init> <expr><call><name><name>ze</name>.<name>getExtra</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ZipExtraField</name><index>[]</index></type> <name>result</name> =<init> <expr><call><name><name>ze</name>.<name>getExtraFields</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"second pass"</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name><name>result</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertSame</name><argument_list>(<argument><expr><name>u2</name></expr></argument>, <argument><expr><name><name>result</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertSame</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>result</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"length second pass"</expr></argument>, <argument><expr><name><name>data1</name>.<name>length</name></name> + 1</expr></argument>, <argument><expr><name><name>data2</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>UnrecognizedExtraField</name></type> <name>u3</name> =<init> <expr>new <call><name>UnrecognizedExtraField</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>u3</name>.<name>setHeaderId</name></name><argument_list>(<argument><expr>new <call><name>ZipShort</name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>u3</name>.<name>setLocalFileDataData</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name> <block>{<expr>1</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ze</name>.<name>addAsFirstExtraField</name></name><argument_list>(<argument><expr><name>u3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = <call><name><name>ze</name>.<name>getExtraFields</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"third pass"</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr><name><name>result</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertSame</name><argument_list>(<argument><expr><name>u3</name></expr></argument>, <argument><expr><name><name>result</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertSame</name><argument_list>(<argument><expr><name>u2</name></expr></argument>, <argument><expr><name><name>result</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertSame</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>result</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testUnixMode</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>ZipEntry</name></type> <name>ze</name> =<init> <expr>new <call><name>ZipEntry</name><argument_list>(<argument><expr>"foo"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>ze</name>.<name>getPlatform</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ze</name>.<name>setUnixMode</name></name><argument_list>(<argument><expr>0755</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>3</expr></argument>, <argument><expr><call><name><name>ze</name>.<name>getPlatform</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>0755</expr></argument>,
                     <argument><expr>(<call><name><name>ze</name>.<name>getExternalAttributes</name></name><argument_list>()</argument_list></call> &gt;&gt; 16) &amp; 0xFFFF</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>ze</name>.<name>getExternalAttributes</name></name><argument_list>()</argument_list></call>  &amp; 0xFFFF</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>ze</name>.<name>setUnixMode</name></name><argument_list>(<argument><expr>0444</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>3</expr></argument>, <argument><expr><call><name><name>ze</name>.<name>getPlatform</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>0444</expr></argument>,
                     <argument><expr>(<call><name><name>ze</name>.<name>getExternalAttributes</name></name><argument_list>()</argument_list></call> &gt;&gt; 16) &amp; 0xFFFF</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><call><name><name>ze</name>.<name>getExternalAttributes</name></name><argument_list>()</argument_list></call>  &amp; 0xFFFF</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>ze</name> = new <call><name>ZipEntry</name><argument_list>(<argument><expr>"foo/"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>ze</name>.<name>getPlatform</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ze</name>.<name>setUnixMode</name></name><argument_list>(<argument><expr>0777</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>3</expr></argument>, <argument><expr><call><name><name>ze</name>.<name>getPlatform</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>0777</expr></argument>,
                     <argument><expr>(<call><name><name>ze</name>.<name>getExternalAttributes</name></name><argument_list>()</argument_list></call> &gt;&gt; 16) &amp; 0xFFFF</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>0x10</expr></argument>, <argument><expr><call><name><name>ze</name>.<name>getExternalAttributes</name></name><argument_list>()</argument_list></call>  &amp; 0xFFFF</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>ze</name>.<name>setUnixMode</name></name><argument_list>(<argument><expr>0577</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>3</expr></argument>, <argument><expr><call><name><name>ze</name>.<name>getPlatform</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>0577</expr></argument>,
                     <argument><expr>(<call><name><name>ze</name>.<name>getExternalAttributes</name></name><argument_list>()</argument_list></call> &gt;&gt; 16) &amp; 0xFFFF</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>0x11</expr></argument>, <argument><expr><call><name><name>ze</name>.<name>getExternalAttributes</name></name><argument_list>()</argument_list></call>  &amp; 0xFFFF</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Test case for
     * &lt;a href="https://issues.apache.org/jira/browse/COMPRESS-94"
     * &gt;COMPRESS-94&lt;/a&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNotEquals</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>ZipEntry</name></type> <name>entry1</name> =<init> <expr>new <call><name>ZipEntry</name><argument_list>(<argument><expr>"foo"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ZipEntry</name></type> <name>entry2</name> =<init> <expr>new <call><name>ZipEntry</name><argument_list>(<argument><expr>"bar"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>entry1</name>.<name>equals</name></name><argument_list>(<argument><expr><name>entry2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
