<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\util\regexp\RegexpMatcherTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>regexp</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>

<import>import <name><name>junit</name>.<name>framework</name>.<name>TestCase</name></name>;</import>

<comment type="javadoc">/**
 * Tests for all implementations of the RegexpMatcher interface.
 *
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>RegexpMatcherTest</name> <super><extends>extends <name>TestCase</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>UNIX_LINE</name> =<init> <expr>"\n"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>RegexpMatcher</name></type> <name>reg</name></decl>;</decl_stmt>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>RegexpMatcher</name></type> <name>getImplementation</name><parameter_list>()</parameter_list>;</function_decl>

    <function><type><specifier>protected</specifier> <specifier>final</specifier> <name>RegexpMatcher</name></type> <name>getReg</name><parameter_list>()</parameter_list> <block>{<return>return <expr><name>reg</name></expr>;</return>}</block></function>

    <constructor><specifier>public</specifier> <name>RegexpMatcherTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>reg</name> = <call><name>getImplementation</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testMatches</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>reg</name>.<name>setPattern</name></name><argument_list>(<argument><expr>"aaaa"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"aaaa should match itself"</expr></argument>, <argument><expr><call><name><name>reg</name>.<name>matches</name></name><argument_list>(<argument><expr>"aaaa"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"aaaa should match xaaaa"</expr></argument>, <argument><expr><call><name><name>reg</name>.<name>matches</name></name><argument_list>(<argument><expr>"xaaaa"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"aaaa shouldn\'t match xaaa"</expr></argument>, <argument><expr>!<call><name><name>reg</name>.<name>matches</name></name><argument_list>(<argument><expr>"xaaa"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>reg</name>.<name>setPattern</name></name><argument_list>(<argument><expr>"^aaaa"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"^aaaa shouldn\'t match xaaaa"</expr></argument>, <argument><expr>!<call><name><name>reg</name>.<name>matches</name></name><argument_list>(<argument><expr>"xaaaa"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"^aaaa should match aaaax"</expr></argument>, <argument><expr><call><name><name>reg</name>.<name>matches</name></name><argument_list>(<argument><expr>"aaaax"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>reg</name>.<name>setPattern</name></name><argument_list>(<argument><expr>"aaaa$"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"aaaa$ shouldn\'t match aaaax"</expr></argument>, <argument><expr>!<call><name><name>reg</name>.<name>matches</name></name><argument_list>(<argument><expr>"aaaax"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"aaaa$ should match xaaaa"</expr></argument>, <argument><expr><call><name><name>reg</name>.<name>matches</name></name><argument_list>(<argument><expr>"xaaaa"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>reg</name>.<name>setPattern</name></name><argument_list>(<argument><expr>"[0-9]+"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"[0-9]+ should match 123"</expr></argument>, <argument><expr><call><name><name>reg</name>.<name>matches</name></name><argument_list>(<argument><expr>"123"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"[0-9]+ should match 1"</expr></argument>, <argument><expr><call><name><name>reg</name>.<name>matches</name></name><argument_list>(<argument><expr>"1"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"[0-9]+ shouldn\'t match \'\'"</expr></argument>, <argument><expr>!<call><name><name>reg</name>.<name>matches</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"[0-9]+ shouldn\'t match a"</expr></argument>, <argument><expr>!<call><name><name>reg</name>.<name>matches</name></name><argument_list>(<argument><expr>"a"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>reg</name>.<name>setPattern</name></name><argument_list>(<argument><expr>"[0-9]*"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"[0-9]* should match 123"</expr></argument>, <argument><expr><call><name><name>reg</name>.<name>matches</name></name><argument_list>(<argument><expr>"123"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"[0-9]* should match 1"</expr></argument>, <argument><expr><call><name><name>reg</name>.<name>matches</name></name><argument_list>(<argument><expr>"1"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"[0-9]* should match \'\'"</expr></argument>, <argument><expr><call><name><name>reg</name>.<name>matches</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"[0-9]* should match a"</expr></argument>, <argument><expr><call><name><name>reg</name>.<name>matches</name></name><argument_list>(<argument><expr>"a"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>reg</name>.<name>setPattern</name></name><argument_list>(<argument><expr>"([0-9]+)=\\1"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"([0-9]+)=\\1 should match 1=1"</expr></argument>, <argument><expr><call><name><name>reg</name>.<name>matches</name></name><argument_list>(<argument><expr>"1=1"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"([0-9]+)=\\1 shouldn\'t match 1=2"</expr></argument>, <argument><expr>!<call><name><name>reg</name>.<name>matches</name></name><argument_list>(<argument><expr>"1=2"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testGroups</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>reg</name>.<name>setPattern</name></name><argument_list>(<argument><expr>"aaaa"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Vector</name></type> <name>v</name> =<init> <expr><call><name><name>reg</name>.<name>getGroups</name></name><argument_list>(<argument><expr>"xaaaa"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"No parens -&gt; no extra groups"</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><call><name><name>v</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Trivial match with no parens"</expr></argument>, <argument><expr>"aaaa"</expr></argument>,
                     <argument><expr>(<name>String</name>) <call><name><name>v</name>.<name>elementAt</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>reg</name>.<name>setPattern</name></name><argument_list>(<argument><expr>"(aaaa)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>v</name> = <call><name><name>reg</name>.<name>getGroups</name></name><argument_list>(<argument><expr>"xaaaa"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Trivial match with single paren"</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><call><name><name>v</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Trivial match with single paren, full match"</expr></argument>, <argument><expr>"aaaa"</expr></argument>,
                     <argument><expr>(<name>String</name>) <call><name><name>v</name>.<name>elementAt</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Trivial match with single paren, matched paren"</expr></argument>, <argument><expr>"aaaa"</expr></argument>,
                     <argument><expr>(<name>String</name>) <call><name><name>v</name>.<name>elementAt</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>reg</name>.<name>setPattern</name></name><argument_list>(<argument><expr>"(a+)b(b+)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>v</name> = <call><name><name>reg</name>.<name>getGroups</name></name><argument_list>(<argument><expr>"xaabb"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>3</expr></argument>, <argument><expr><call><name><name>v</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"aabb"</expr></argument>, <argument><expr>(<name>String</name>) <call><name><name>v</name>.<name>elementAt</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"aa"</expr></argument>, <argument><expr>(<name>String</name>) <call><name><name>v</name>.<name>elementAt</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"b"</expr></argument>, <argument><expr>(<name>String</name>) <call><name><name>v</name>.<name>elementAt</name></name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testBugzillaReport14619</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>reg</name>.<name>setPattern</name></name><argument_list>(<argument><expr>"^(.*)/src/((.*/)*)([a-zA-Z0-9_\\.]+)\\.java$"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Vector</name></type> <name>v</name> =<init> <expr><call><name><name>reg</name>.<name>getGroups</name></name><argument_list>(<argument><expr>"de/tom/src/Google.java"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>5</expr></argument>, <argument><expr><call><name><name>v</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"de/tom"</expr></argument>, <argument><expr><call><name><name>v</name>.<name>elementAt</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><call><name><name>v</name>.<name>elementAt</name></name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><call><name><name>v</name>.<name>elementAt</name></name><argument_list>(<argument><expr>3</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Google"</expr></argument>, <argument><expr><call><name><name>v</name>.<name>elementAt</name></name><argument_list>(<argument><expr>4</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testCaseInsensitiveMatch</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>reg</name>.<name>setPattern</name></name><argument_list>(<argument><expr>"aaaa"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"aaaa doesn't match AAaa"</expr></argument>, <argument><expr>!<call><name><name>reg</name>.<name>matches</name></name><argument_list>(<argument><expr>"AAaa"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"aaaa matches AAaa ignoring case"</expr></argument>,
                   <argument><expr><call><name><name>reg</name>.<name>matches</name></name><argument_list>(<argument><expr>"AAaa"</expr></argument>, <argument><expr><name><name>RegexpMatcher</name>.<name>MATCH_CASE_INSENSITIVE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


<comment type="line">// make sure there are no issues concerning line separator interpretation</comment>
<comment type="line">// a line separator for regex (perl) is always a unix line (ie \n)</comment>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testParagraphCharacter</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>reg</name>.<name>setPattern</name></name><argument_list>(<argument><expr>"end of text$"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"paragraph character"</expr></argument>, <argument><expr>!<call><name><name>reg</name>.<name>matches</name></name><argument_list>(<argument><expr>"end of text\u2029"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testLineSeparatorCharacter</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>reg</name>.<name>setPattern</name></name><argument_list>(<argument><expr>"end of text$"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"line-separator character"</expr></argument>, <argument><expr>!<call><name><name>reg</name>.<name>matches</name></name><argument_list>(<argument><expr>"end of text\u2028"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNextLineCharacter</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>reg</name>.<name>setPattern</name></name><argument_list>(<argument><expr>"end of text$"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"next-line character"</expr></argument>, <argument><expr>!<call><name><name>reg</name>.<name>matches</name></name><argument_list>(<argument><expr>"end of text\u0085"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testStandaloneCR</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>reg</name>.<name>setPattern</name></name><argument_list>(<argument><expr>"end of text$"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"standalone CR"</expr></argument>, <argument><expr>!<call><name><name>reg</name>.<name>matches</name></name><argument_list>(<argument><expr>"end of text\r"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testWindowsLineSeparator</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>reg</name>.<name>setPattern</name></name><argument_list>(<argument><expr>"end of text$"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Windows line separator"</expr></argument>, <argument><expr>!<call><name><name>reg</name>.<name>matches</name></name><argument_list>(<argument><expr>"end of text\r\n"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testWindowsLineSeparator2</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>reg</name>.<name>setPattern</name></name><argument_list>(<argument><expr>"end of text\r$"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Windows line separator"</expr></argument>, <argument><expr><call><name><name>reg</name>.<name>matches</name></name><argument_list>(<argument><expr>"end of text\r\n"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testUnixLineSeparator</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>reg</name>.<name>setPattern</name></name><argument_list>(<argument><expr>"end of text$"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Unix line separator"</expr></argument>, <argument><expr><call><name><name>reg</name>.<name>matches</name></name><argument_list>(<argument><expr>"end of text\n"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>testMultiVersusSingleLine</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>buf</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr>"Line1"</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><name>UNIX_LINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr>"starttest Line2"</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><name>UNIX_LINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr>"Line3 endtest"</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><name>UNIX_LINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr>"Line4"</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><name>UNIX_LINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>text</name> =<init> <expr><call><name><name>buf</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>doStartTest1</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>doStartTest2</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>doEndTest1</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>doEndTest2</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>doStartTest1</name><parameter_list>(<param><decl><type><name>String</name></type> <name>text</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>reg</name>.<name>setPattern</name></name><argument_list>(<argument><expr>"^starttest"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"^starttest in default mode"</expr></argument>, <argument><expr>!<call><name><name>reg</name>.<name>matches</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"^starttest in single line mode"</expr></argument>,
               <argument><expr>!<call><name><name>reg</name>.<name>matches</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name><name>RegexpMatcher</name>.<name>MATCH_SINGLELINE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"^starttest in multi line mode"</expr></argument>,
               <argument><expr><call><name><name>reg</name>.<name>matches</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name><name>RegexpMatcher</name>.<name>MATCH_MULTILINE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>doStartTest2</name><parameter_list>(<param><decl><type><name>String</name></type> <name>text</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>reg</name>.<name>setPattern</name></name><argument_list>(<argument><expr>"^Line1"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"^Line1 in default mode"</expr></argument>, <argument><expr><call><name><name>reg</name>.<name>matches</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"^Line1 in single line mode"</expr></argument>,
               <argument><expr><call><name><name>reg</name>.<name>matches</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name><name>RegexpMatcher</name>.<name>MATCH_SINGLELINE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"^Line1 in multi line mode"</expr></argument>,
               <argument><expr><call><name><name>reg</name>.<name>matches</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name><name>RegexpMatcher</name>.<name>MATCH_MULTILINE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>doEndTest1</name><parameter_list>(<param><decl><type><name>String</name></type> <name>text</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>reg</name>.<name>setPattern</name></name><argument_list>(<argument><expr>"endtest$"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"endtest$ in default mode"</expr></argument>, <argument><expr>!<call><name><name>reg</name>.<name>matches</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"endtest$ in single line mode"</expr></argument>,
               <argument><expr>!<call><name><name>reg</name>.<name>matches</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name><name>RegexpMatcher</name>.<name>MATCH_SINGLELINE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"endtest$ in multi line mode"</expr></argument>,
               <argument><expr><call><name><name>reg</name>.<name>matches</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name><name>RegexpMatcher</name>.<name>MATCH_MULTILINE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>doEndTest2</name><parameter_list>(<param><decl><type><name>String</name></type> <name>text</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>reg</name>.<name>setPattern</name></name><argument_list>(<argument><expr>"Line4$"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Line4$ in default mode"</expr></argument>, <argument><expr><call><name><name>reg</name>.<name>matches</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Line4$ in single line mode"</expr></argument>,
               <argument><expr><call><name><name>reg</name>.<name>matches</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name><name>RegexpMatcher</name>.<name>MATCH_SINGLELINE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Line4$ in multi line mode"</expr></argument>,
               <argument><expr><call><name><name>reg</name>.<name>matches</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name><name>RegexpMatcher</name>.<name>MATCH_MULTILINE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
