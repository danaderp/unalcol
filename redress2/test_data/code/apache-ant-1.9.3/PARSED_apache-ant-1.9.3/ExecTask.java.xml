<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\ExecTask.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Locale</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>condition</name>.<name>Os</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Commandline</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Environment</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Path</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>RedirectorElement</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>

<comment type="javadoc">/**
 * Executes a given command if the os platform is appropriate.
 *
 * @since Ant 1.2
 *
 * @ant.task category="control"
 */</comment>
<class><specifier>public</specifier> class <name>ExecTask</name> <super><extends>extends <name>Task</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>FileUtils</name></type> <name>FILE_UTILS</name> =<init> <expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>os</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>osFamily</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>dir</name></decl>;</decl_stmt>
    <comment type="line">// CheckStyle:VisibilityModifier OFF - bc</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>failOnError</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>newEnvironment</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Long</name></type> <name>timeout</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Environment</name></type> <name>env</name> =<init> <expr>new <call><name>Environment</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Commandline</name></type> <name>cmdl</name> =<init> <expr>new <call><name>Commandline</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>resultProperty</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>failIfExecFails</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>executable</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>resolveExecutable</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>searchPath</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>spawn</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>incompatibleWithSpawn</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="line">//include locally for screening purposes</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>inputString</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>input</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>output</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>error</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>protected</specifier> <name>Redirector</name></type> <name>redirector</name> =<init> <expr>new <call><name>Redirector</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>RedirectorElement</name></type> <name>redirectorElement</name></decl>;</decl_stmt>
    <comment type="line">// CheckStyle:VisibilityModifier ON</comment>

    <comment type="javadoc">/**
     * Controls whether the VM (1.3 and above) is used to execute the
     * command
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>vmLauncher</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>


    <comment type="javadoc">/**
     * Create an instance.
     * Needs to be configured by binding to a project.
     */</comment>
    <constructor><specifier>public</specifier> <name>ExecTask</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <comment type="javadoc">/**
     * create an instance that is helping another task.
     * Project, OwningTarget, TaskName and description are all
     * pulled out
     * @param owner task that we belong to
     */</comment>
    <constructor><specifier>public</specifier> <name>ExecTask</name><parameter_list>(<param><decl><type><name>Task</name></type> <name>owner</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>bindToOwner</name><argument_list>(<argument><expr><name>owner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Set whether or not you want the process to be spawned.
     * Default is false.
     * @param spawn if true you do not want Ant to wait for the end of the process.
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSpawn</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>spawn</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>spawn</name></name> = <name>spawn</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the timeout in milliseconds after which the process will be killed.
     *
     * @param value timeout in milliseconds.
     *
     * @since Ant 1.5
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTimeout</name><parameter_list>(<param><decl><type><name>Long</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>timeout</name> = <name>value</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>incompatibleWithSpawn</name> |= <name>timeout</name> != <name>null</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the timeout in milliseconds after which the process will be killed.
     *
     * @param value timeout in milliseconds.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTimeout</name><parameter_list>(<param><decl><type><name>Integer</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setTimeout</name><argument_list>(
            <argument><expr><call>(<name>Long</name>) <argument_list>(<argument><expr>(<name>value</name> == <name>null</name>) ? <name>null</name> : new <call><name>Long</name><argument_list>(<argument><expr><call><name><name>value</name>.<name>intValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the name of the executable program.
     * @param value the name of the executable program.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setExecutable</name><parameter_list>(<param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>executable</name></name> = <name>value</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cmdl</name>.<name>setExecutable</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the working directory of the process.
     * @param d the working directory of the process.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDir</name><parameter_list>(<param><decl><type><name>File</name></type> <name>d</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>dir</name></name> = <name>d</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * List of operating systems on which the command may be executed.
     * @param os list of operating systems on which the command may be executed.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOs</name><parameter_list>(<param><decl><type><name>String</name></type> <name>os</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>os</name></name> = <name>os</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * List of operating systems on which the command may be executed.
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>getOs</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>os</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets a command line.
     * @param cmdl command line.
     * @ant.attribute ignore="true"
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCommand</name><parameter_list>(<param><decl><type><name>Commandline</name></type> <name>cmdl</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"The command attribute is deprecated.\n"
            + "Please use the executable attribute and nested arg elements."</expr></argument>,
            <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>cmdl</name></name> = <name>cmdl</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * File the output of the process is redirected to. If error is not
     * redirected, it too will appear in the output.
     *
     * @param out name of a file to which output should be sent.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOutput</name><parameter_list>(<param><decl><type><name>File</name></type> <name>out</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>output</name></name> = <name>out</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>incompatibleWithSpawn</name> = true</expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the input file to use for the task.
     *
     * @param input name of a file from which to get input.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setInput</name><parameter_list>(<param><decl><type><name>File</name></type> <name>input</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>inputString</name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"The \"input\" and \"inputstring\" "
                + "attributes cannot both be specified"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>input</name></name> = <name>input</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>incompatibleWithSpawn</name> = true</expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the string to use as input.
     *
     * @param inputString the string which is used as the input source.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setInputString</name><parameter_list>(<param><decl><type><name>String</name></type> <name>inputString</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>input</name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"The \"input\" and \"inputstring\" "
                + "attributes cannot both be specified"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>inputString</name></name> = <name>inputString</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>incompatibleWithSpawn</name> = true</expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Controls whether error output of exec is logged. This is only useful when
     * output is being redirected and error output is desired in the Ant log.
     *
     * @param logError set to true to log error output in the normal ant log.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLogError</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>logError</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>redirector</name>.<name>setLogError</name></name><argument_list>(<argument><expr><name>logError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>incompatibleWithSpawn</name> |= <name>logError</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the File to which the error stream of the process should be redirected.
     *
     * @param error a file to which stderr should be sent.
     *
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setError</name><parameter_list>(<param><decl><type><name>File</name></type> <name>error</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>error</name></name> = <name>error</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>incompatibleWithSpawn</name> = true</expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the property name whose value should be set to the output of
     * the process.
     *
     * @param outputProp name of property.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOutputproperty</name><parameter_list>(<param><decl><type><name>String</name></type> <name>outputProp</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>redirector</name>.<name>setOutputProperty</name></name><argument_list>(<argument><expr><name>outputProp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>incompatibleWithSpawn</name> = true</expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the name of the property whose value should be set to the error of
     * the process.
     *
     * @param errorProperty name of property.
     *
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setErrorProperty</name><parameter_list>(<param><decl><type><name>String</name></type> <name>errorProperty</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>redirector</name>.<name>setErrorProperty</name></name><argument_list>(<argument><expr><name>errorProperty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>incompatibleWithSpawn</name> = true</expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Fail if the command exits with a non-zero return code.
     *
     * @param fail if true fail the command on non-zero return code.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFailonerror</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>fail</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>failOnError</name> = <name>fail</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>incompatibleWithSpawn</name> |= <name>fail</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Do not propagate old environment when new environment variables are specified.
     *
     * @param newenv if true, do not propagate old environment
     * when new environment variables are specified.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setNewenvironment</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>newenv</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>newEnvironment</name> = <name>newenv</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set whether to attempt to resolve the executable to a file.
     *
     * @param resolveExecutable if true, attempt to resolve the
     * path of the executable.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setResolveExecutable</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>resolveExecutable</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>resolveExecutable</name></name> = <name>resolveExecutable</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set whether to search nested, then
     * system PATH environment variables for the executable.
     *
     * @param searchPath if true, search PATHs.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSearchPath</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>searchPath</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>searchPath</name></name> = <name>searchPath</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Indicates whether to attempt to resolve the executable to a
     * file.
     * @return the resolveExecutable flag
     *
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getResolveExecutable</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>resolveExecutable</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Add an environment variable to the launched process.
     *
     * @param var new environment variable.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addEnv</name><parameter_list>(<param><decl><type><name><name>Environment</name>.<name>Variable</name></name></type> <name>var</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>env</name>.<name>addVariable</name></name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a command-line argument.
     *
     * @return new command line argument created.
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Commandline</name>.<name>Argument</name></name></type> <name>createArg</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>cmdl</name>.<name>createArgument</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the name of a property in which the return code of the
     * command should be stored. Only of interest if failonerror=false.
     *
     * @since Ant 1.5
     *
     * @param resultProperty name of property.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setResultProperty</name><parameter_list>(<param><decl><type><name>String</name></type> <name>resultProperty</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>resultProperty</name></name> = <name>resultProperty</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>incompatibleWithSpawn</name> = true</expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Helper method to set result property to the
     * passed in value if appropriate.
     *
     * @param result value desired for the result property value.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>maybeSetResultPropertyValue</name><parameter_list>(<param><decl><type><name>int</name></type> <name>result</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>resultProperty</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>res</name> =<init> <expr><call><name><name>Integer</name>.<name>toString</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>setNewProperty</name><argument_list>(<argument><expr><name>resultProperty</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Set whether to stop the build if program cannot be started.
     * Defaults to true.
     *
     * @param flag stop the build if program cannot be started.
     *
     * @since Ant 1.5
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFailIfExecutionFails</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>failIfExecFails</name> = <name>flag</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>incompatibleWithSpawn</name> |= <name>flag</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set whether output should be appended to or overwrite an existing file.
     * Defaults to false.
     *
     * @param append if true append is desired.
     *
     * @since 1.30, Ant 1.5
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAppend</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>append</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>redirector</name>.<name>setAppend</name></name><argument_list>(<argument><expr><name>append</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>incompatibleWithSpawn</name> |= <name>append</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a &lt;code&gt;RedirectorElement&lt;/code&gt; to this task.
     *
     * @param redirectorElement   &lt;code&gt;RedirectorElement&lt;/code&gt;.
     * @since Ant 1.6.2
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addConfiguredRedirector</name><parameter_list>(<param><decl><type><name>RedirectorElement</name></type> <name>redirectorElement</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>redirectorElement</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"cannot have &gt; 1 nested &lt;redirector&gt;s"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>redirectorElement</name></name> = <name>redirectorElement</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>incompatibleWithSpawn</name> = true</expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Restrict this execution to a single OS Family
     * @param osFamily the family to restrict to.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOsFamily</name><parameter_list>(<param><decl><type><name>String</name></type> <name>osFamily</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>osFamily</name></name> = <call><name><name>osFamily</name>.<name>toLowerCase</name></name><argument_list>(<argument><expr><name><name>Locale</name>.<name>ENGLISH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Restrict this execution to a single OS Family
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>getOsFamily</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>osFamily</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * The method attempts to figure out where the executable is so that we can feed
     * the full path. We first try basedir, then the exec dir, and then
     * fallback to the straight executable name (i.e. on the path).
     *
     * @param exec the name of the executable.
     * @param mustSearchPath if true, the executable will be looked up in
     * the PATH environment and the absolute path is returned.
     *
     * @return the executable as a full path if it can be determined.
     *
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>resolveExecutable</name><parameter_list>(<param><decl><type><name>String</name></type> <name>exec</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>mustSearchPath</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr>!<name>resolveExecutable</name></expr>)</condition><then> <block>{
            <return>return <expr><name>exec</name></expr>;</return>
        }</block></then></if>
        <comment type="line">// try to find the executable</comment>
        <decl_stmt><decl><type><name>File</name></type> <name>executableFile</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>resolveFile</name><argument_list>(<argument><expr><name>exec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>executableFile</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>executableFile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <comment type="line">// now try to resolve against the dir if given</comment>
        <if>if <condition>(<expr><name>dir</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>executableFile</name> = <call><name><name>FILE_UTILS</name>.<name>resolveFile</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>exec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name><name>executableFile</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><call><name><name>executableFile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr>;</return>
            }</block></then></if>
        }</block></then></if>
        <comment type="line">// couldn't find it - must be on path</comment>
        <if>if <condition>(<expr><name>mustSearchPath</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Path</name></type> <name>p</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>environment</name> =<init> <expr><call><name><name>env</name>.<name>getVariables</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>environment</name> != <name>null</name></expr>)</condition><then> <block>{
                <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>environment</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                    <if>if <condition>(<expr><call><name>isPath</name><argument_list>(<argument><expr><name><name>environment</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>p</name> = new <call><name>Path</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getPath</name><argument_list>(<argument><expr><name><name>environment</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    }</block></then></if>
                }</block></for>
            }</block></then></if>
            <if>if <condition>(<expr><name>p</name> == <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>path</name> =<init> <expr><call><name>getPath</name><argument_list>(<argument><expr><call><name><name>Execute</name>.<name>getEnvironmentVariables</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>path</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>p</name> = new <call><name>Path</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
            <if>if <condition>(<expr><name>p</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>dirs</name> =<init> <expr><call><name><name>p</name>.<name>list</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>dirs</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                    <expr_stmt><expr><name>executableFile</name>
                        = <call><name><name>FILE_UTILS</name>.<name>resolveFile</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><name><name>dirs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>exec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><call><name><name>executableFile</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                        <return>return <expr><call><name><name>executableFile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr>;</return>
                    }</block></then></if>
                }</block></for>
            }</block></then></if>
        }</block></then></if>
        <comment type="line">// mustSearchPath is false, or no PATH or not found - keep our</comment>
        <comment type="line">// fingers crossed.</comment>
        <return>return <expr><name>exec</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Do the work.
     *
     * @throws BuildException in a number of circumstances:
     * &lt;ul&gt;
     * &lt;li&gt;if failIfExecFails is set to true and the process cannot be started&lt;/li&gt;
     * &lt;li&gt;the java13command launcher can send build exceptions&lt;/li&gt;
     * &lt;li&gt;this list is not exhaustive or limitative&lt;/li&gt;
     * &lt;/ul&gt;
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <comment type="line">// Quick fail if this is not a valid OS for the command</comment>
        <if>if <condition>(<expr>!<call><name>isValidOs</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>File</name></type> <name>savedDir</name> =<init> <expr><name>dir</name></expr></init></decl>;</decl_stmt> <comment type="line">// possibly altered in prepareExec</comment>
        <expr_stmt><expr><call><name><name>cmdl</name>.<name>setExecutable</name></name><argument_list>(<argument><expr><call><name>resolveExecutable</name><argument_list>(<argument><expr><name>executable</name></expr></argument>, <argument><expr><name>searchPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkConfiguration</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name>runExec</name><argument_list>(<argument><expr><call><name>prepareExec</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><name>dir</name> = <name>savedDir</name></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <comment type="javadoc">/**
     * Has the user set all necessary attributes?
     * @throws BuildException if there are missing required parameters.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>checkConfiguration</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><call><name><name>cmdl</name>.<name>getExecutable</name></name><argument_list>()</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"no executable specified"</expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>dir</name> != <name>null</name> &amp;&amp; !<call><name><name>dir</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"The directory " + <name>dir</name> + " does not exist"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>dir</name> != <name>null</name> &amp;&amp; !<call><name><name>dir</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>dir</name> + " is not a directory"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>spawn</name> &amp;&amp; <name>incompatibleWithSpawn</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>log</name><argument_list>(<argument><expr>"spawn does not allow attributes related to input, "
            + "output, error, result"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_ERR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>log</name><argument_list>(<argument><expr>"spawn also does not allow timeout"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_ERR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>log</name><argument_list>(<argument><expr>"finally, spawn is not compatible "
                + "with a nested I/O &lt;redirector&gt;"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_ERR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"You have used an attribute "
                + "or nested element which is not compatible with spawn"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name>setupRedirector</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set up properties on the redirector that we needed to store locally.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setupRedirector</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>redirector</name>.<name>setInput</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>redirector</name>.<name>setInputString</name></name><argument_list>(<argument><expr><name>inputString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>redirector</name>.<name>setOutput</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>redirector</name>.<name>setError</name></name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Is this the OS the user wanted?
     * @return boolean.
     * &lt;ul&gt;
     * &lt;li&gt;
     * &lt;li&gt;&lt;code&gt;true&lt;/code&gt; if the os and osfamily attributes are null.&lt;/li&gt;
     * &lt;li&gt;&lt;code&gt;true&lt;/code&gt; if osfamily is set, and the os family and must match
     * that of the current OS, according to the logic of
     * {@link Os#isOs(String, String, String, String)}, and the result of the
     * &lt;code&gt;os&lt;/code&gt; attribute must also evaluate true.
     * &lt;/li&gt;
     * &lt;li&gt;
     * &lt;code&gt;true&lt;/code&gt; if os is set, and the system.property os.name
     * is found in the os attribute,&lt;/li&gt;
     * &lt;li&gt;&lt;code&gt;false&lt;/code&gt; otherwise.&lt;/li&gt;
     * &lt;/ul&gt;
     */</comment>
    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>isValidOs</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">//hand osfamily off to Os class, if set</comment>
        <if>if <condition>(<expr><name>osFamily</name> != <name>null</name> &amp;&amp; !<call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr><name>osFamily</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <comment type="line">//the Exec OS check is different from Os.isOs(), which</comment>
        <comment type="line">//probes for a specific OS. Instead it searches the os field</comment>
        <comment type="line">//for the current os.name</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>myos</name> =<init> <expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"os.name"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Current OS is " + <name>myos</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>(<name>os</name> != <name>null</name>) &amp;&amp; (<call><name><name>os</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>myos</name></expr></argument>)</argument_list></call> &lt; 0)</expr>)</condition><then> <block>{
            <comment type="line">// this command will be executed only on the specified OS</comment>
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"This OS, " + <name>myos</name>
                    + " was not found in the specified list of valid OSes: " + <name>os</name></expr></argument>,
                    <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set whether to launch new process with VM, otherwise use the OS's shell.
     * Default value is true.
     * @param vmLauncher true if we want to launch new process with VM,
     * false if we want to use the OS's shell.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setVMLauncher</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>vmLauncher</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>vmLauncher</name></name> = <name>vmLauncher</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Create an Execute instance with the correct working directory set.
     *
     * @return an instance of the Execute class.
     *
     * @throws BuildException under unknown circumstances.
     */</comment>
    <function><type><specifier>protected</specifier> <name>Execute</name></type> <name>prepareExec</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <comment type="line">// default directory to the project's base directory</comment>
        <if>if <condition>(<expr><name>dir</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>dir</name> = <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>redirectorElement</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>redirectorElement</name>.<name>configure</name></name><argument_list>(<argument><expr><name>redirector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>Execute</name></type> <name>exe</name> =<init> <expr>new <call><name>Execute</name><argument_list>(<argument><expr><call><name>createHandler</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>createWatchdog</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>exe</name>.<name>setAntRun</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>exe</name>.<name>setWorkingDirectory</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>exe</name>.<name>setVMLauncher</name></name><argument_list>(<argument><expr><name>vmLauncher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>environment</name> =<init> <expr><call><name><name>env</name>.<name>getVariables</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>environment</name> != <name>null</name></expr>)</condition><then> <block>{
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>environment</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Setting environment variable: " + <name><name>environment</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
                    <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>exe</name>.<name>setNewenvironment</name></name><argument_list>(<argument><expr><name>newEnvironment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>exe</name>.<name>setEnvironment</name></name><argument_list>(<argument><expr><name>environment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>exe</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * A Utility method for this classes and subclasses to run an
     * Execute instance (an external command).
     *
     * @param exe instance of the execute class.
     *
     * @throws IOException in case of problem to attach to the stdin/stdout/stderr
     * streams of the process.
     */</comment>
    <function><type><specifier>protected</specifier> <specifier>final</specifier> <name>void</name></type> <name>runExecute</name><parameter_list>(<param><decl><type><name>Execute</name></type> <name>exe</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>returnCode</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt> <comment type="line">// assume the worst</comment>

        <if>if <condition>(<expr>!<name>spawn</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>returnCode</name> = <call><name><name>exe</name>.<name>execute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <comment type="line">//test for and handle a forced process death</comment>
            <if>if <condition>(<expr><call><name><name>exe</name>.<name>killedProcess</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>msg</name> =<init> <expr>"Timeout: killed the sub-process"</expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>failOnError</name></expr>)</condition><then> <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then></if>
            <expr_stmt><expr><call><name>maybeSetResultPropertyValue</name><argument_list>(<argument><expr><name>returnCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>redirector</name>.<name>complete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name><name>Execute</name>.<name>isFailure</name></name><argument_list>(<argument><expr><name>returnCode</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>failOnError</name></expr>)</condition><then> <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><call><name>getTaskType</name><argument_list>()</argument_list></call> + " returned: "
                        + <name>returnCode</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Result: " + <name>returnCode</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_ERR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then></if>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>exe</name>.<name>spawn</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Run the command using the given Execute instance. This may be
     * overridden by subclasses.
     *
     * @param exe instance of Execute to run.
     *
     * @throws BuildException if the new process could not be started
     * only if failIfExecFails is set to true (the default).
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>runExec</name><parameter_list>(<param><decl><type><name>Execute</name></type> <name>exe</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <comment type="line">// show the command</comment>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><call><name><name>cmdl</name>.<name>describeCommand</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>exe</name>.<name>setCommandline</name></name><argument_list>(<argument><expr><call><name><name>cmdl</name>.<name>getCommandline</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name>runExecute</name><argument_list>(<argument><expr><name>exe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
            <if>if <condition>(<expr><name>failIfExecFails</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Execute failed: " + <call><name><name>e</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>,
                                         <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Execute failed: " + <call><name><name>e</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_ERR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></catch> <finally>finally <block>{
            <comment type="line">// close the output file if required</comment>
            <expr_stmt><expr><call><name>logFlush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <comment type="javadoc">/**
     * Create the StreamHandler to use with our Execute instance.
     *
     * @return instance of ExecuteStreamHandler.
     *
     * @throws BuildException under unknown circumstances.
     */</comment>
    <function><type><specifier>protected</specifier> <name>ExecuteStreamHandler</name></type> <name>createHandler</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name><name>redirector</name>.<name>createHandler</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Create the Watchdog to kill a runaway process.
     *
     * @return instance of ExecuteWatchdog.
     *
     * @throws BuildException under unknown circumstances.
     */</comment>
    <function><type><specifier>protected</specifier> <name>ExecuteWatchdog</name></type> <name>createWatchdog</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <return>return <expr>(<name>timeout</name> == <name>null</name>)
            ? <name>null</name> : new <call><name>ExecuteWatchdog</name><argument_list>(<argument><expr><call><name><name>timeout</name>.<name>longValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Flush the output stream - if there is one.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>logFlush</name><parameter_list>()</parameter_list> <block>{
    }</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>isPath</name><parameter_list>(<param><decl><type><name>String</name></type> <name>line</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>line</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"PATH="</expr></argument>)</argument_list></call>
            || <call><name><name>line</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"Path="</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>getPath</name><parameter_list>(<param><decl><type><name>String</name></type> <name>line</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>line</name>.<name>substring</name></name><argument_list>(<argument><expr>"PATH=".<call><name>length</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>getPath</name><parameter_list>(<param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>map</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>p</name> =<init> <expr><call><name><name>map</name>.<name>get</name></name><argument_list>(<argument><expr>"PATH"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>p</name> != <name>null</name> ? <name>p</name> : <call><name><name>map</name>.<name>get</name></name><argument_list>(<argument><expr>"Path"</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
