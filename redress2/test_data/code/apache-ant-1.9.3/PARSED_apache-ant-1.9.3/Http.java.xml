<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\condition\Http.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>condition</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>Locale</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>HttpURLConnection</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>MalformedURLException</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>URL</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>URLConnection</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>ProjectComponent</name></name>;</import>

<comment type="javadoc">/**
 * Condition to wait for a HTTP request to succeed. Its attribute(s) are:
 *   url - the URL of the request.
 *   errorsBeginAt - number at which errors begin at; default=400.
 *   requestMethod - HTTP request method to use; GET, HEAD, etc. default=GET
 * @since Ant 1.5
 */</comment>
<class><specifier>public</specifier> class <name>Http</name> <super><extends>extends <name>ProjectComponent</name></extends> <implements>implements <name>Condition</name></implements></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>ERROR_BEGINS</name> =<init> <expr>400</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEFAULT_REQUEST_METHOD</name> =<init> <expr>"GET"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>spec</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>requestMethod</name> =<init> <expr><name>DEFAULT_REQUEST_METHOD</name></expr></init></decl>;</decl_stmt>


    <comment type="javadoc">/**
     * Set the url attribute
     * @param url the url of the request
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUrl</name><parameter_list>(<param><decl><type><name>String</name></type> <name>url</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>spec</name> = <name>url</name></expr>;</expr_stmt>
    }</block></function>

    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>errorsBeginAt</name> =<init> <expr><name>ERROR_BEGINS</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Set the errorsBeginAt attribute
     * @param errorsBeginAt number at which errors begin at, default is
     *                      400
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setErrorsBeginAt</name><parameter_list>(<param><decl><type><name>int</name></type> <name>errorsBeginAt</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>errorsBeginAt</name></name> = <name>errorsBeginAt</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the method to be used when issuing the HTTP request.
     *
     * @param method The HTTP request method to use. Valid values are
     *               the same as those accepted by the
     *               HttpURLConnection.setRequestMetho d() method,
     *               such as "GET", "HEAD", "TRACE", etc. The default
     *               if not specified is "GET".
     *
     * @see java.net.HttpURLConnection#setRequestMethod
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRequestMethod</name><parameter_list>(<param><decl><type><name>String</name></type> <name>method</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>requestMethod</name></name> = <name>method</name> == <name>null</name> ? <name>DEFAULT_REQUEST_METHOD</name>
            : <call><name><name>method</name>.<name>toUpperCase</name></name><argument_list>(<argument><expr><name><name>Locale</name>.<name>ENGLISH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * @return true if the HTTP request succeeds
     * @exception BuildException if an error occurs
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>eval</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>spec</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"No url specified in http condition"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Checking for " + <name>spec</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <decl_stmt><decl><type><name>URL</name></type> <name>url</name> =<init> <expr>new <call><name>URL</name><argument_list>(<argument><expr><name>spec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <try>try <block>{
                <decl_stmt><decl><type><name>URLConnection</name></type> <name>conn</name> =<init> <expr><call><name><name>url</name>.<name>openConnection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>conn</name> <name>instanceof</name> <name>HttpURLConnection</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>HttpURLConnection</name></type> <name>http</name> =<init> <expr>(<name>HttpURLConnection</name>) <name>conn</name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>http</name>.<name>setRequestMethod</name></name><argument_list>(<argument><expr><name>requestMethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>code</name> =<init> <expr><call><name><name>http</name>.<name>getResponseCode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Result code for " + <name>spec</name> + " was " + <name>code</name></expr></argument>,
                        <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>code</name> &gt; 0 &amp;&amp; <name>code</name> &lt; <name>errorsBeginAt</name></expr>)</condition><then> <block>{
                        <return>return <expr>true</expr>;</return>
                    }</block></then></if>
                    <return>return <expr>false</expr>;</return>
                }</block></then></if>
            }</block> <catch>catch (<param><decl><type><name><name>java</name>.<name>net</name>.<name>ProtocolException</name></name></type> <name>pe</name></decl></param>) <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Invalid HTTP protocol: "
                                         + <name>requestMethod</name></expr></argument>, <argument><expr><name>pe</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch> <catch>catch (<param><decl><type><name><name>java</name>.<name>io</name>.<name>IOException</name></name></type> <name>e</name></decl></param>) <block>{
                <return>return <expr>false</expr>;</return>
            }</block></catch></try>
        }</block> <catch>catch (<param><decl><type><name>MalformedURLException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Badly formed URL: " + <name>spec</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
        <return>return <expr>true</expr>;</return>
    }</block></function>
}</block></class>
</unit>
