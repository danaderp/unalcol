<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\depend\constantpool\MethodRefCPInfo.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>depend</name>.<name>constantpool</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>DataInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>

<comment type="javadoc">/**
 * A MethodRef CP Info
 *
 */</comment>
<class><specifier>public</specifier> class <name>MethodRefCPInfo</name> <super><extends>extends <name>ConstantPoolEntry</name></extends></super> <block>{
    <comment type="javadoc">/** the name of the class defining this method */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>methodClassName</name></decl>;</decl_stmt>
    <comment type="javadoc">/** the name of the method */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>methodName</name></decl>;</decl_stmt>
    <comment type="javadoc">/** the method's type descriptor */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>methodType</name></decl>;</decl_stmt>
    <comment type="javadoc">/** The index into the constant pool which defines the class of this method. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>classIndex</name></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * the index into the constant pool which defined the name and type
     * signature of the method
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>nameAndTypeIndex</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Constructor. */</comment>
    <constructor><specifier>public</specifier> <name>MethodRefCPInfo</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>CONSTANT_METHODREF</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * read a constant pool entry from a class stream.
     *
     * @param cpStream the DataInputStream which contains the constant pool
     *      entry to be read.
     * @exception IOException if there is a problem reading the entry from
     *      the stream.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>read</name><parameter_list>(<param><decl><type><name>DataInputStream</name></type> <name>cpStream</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><name>classIndex</name> = <call><name><name>cpStream</name>.<name>readUnsignedShort</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nameAndTypeIndex</name> = <call><name><name>cpStream</name>.<name>readUnsignedShort</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Print a readable version of the constant pool entry.
     *
     * @return the string representation of this constant pool entry.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>value</name></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name>isResolved</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>value</name> = "Method : Class = " + <name>methodClassName</name> + ", name = "
                 + <name>methodName</name> + ", type = " + <name>methodType</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>value</name> = "Method : Class index = " + <name>classIndex</name>
                 + ", name and type index = " + <name>nameAndTypeIndex</name></expr>;</expr_stmt>
        }</block></else></if>

        <return>return <expr><name>value</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Resolve this constant pool entry with respect to its dependents in
     * the constant pool.
     *
     * @param constantPool the constant pool of which this entry is a member
     *      and against which this entry is to be resolved.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>resolve</name><parameter_list>(<param><decl><type><name>ConstantPool</name></type> <name>constantPool</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>ClassCPInfo</name></type> <name>methodClass</name>
             =<init> <expr>(<name>ClassCPInfo</name>) <call><name><name>constantPool</name>.<name>getEntry</name></name><argument_list>(<argument><expr><name>classIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>methodClass</name>.<name>resolve</name></name><argument_list>(<argument><expr><name>constantPool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>methodClassName</name> = <call><name><name>methodClass</name>.<name>getClassName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>NameAndTypeCPInfo</name></type> <name>nt</name>
             =<init> <expr>(<name>NameAndTypeCPInfo</name>) <call><name><name>constantPool</name>.<name>getEntry</name></name><argument_list>(<argument><expr><name>nameAndTypeIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>nt</name>.<name>resolve</name></name><argument_list>(<argument><expr><name>constantPool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>methodName</name> = <call><name><name>nt</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>methodType</name> = <call><name><name>nt</name>.<name>getType</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>super</name>.<name>resolve</name></name><argument_list>(<argument><expr><name>constantPool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the name of the class defining the method
     *
     * @return the name of the class defining this method
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getMethodClassName</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>methodClassName</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the name of the method.
     *
     * @return the name of the method.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getMethodName</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>methodName</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the type signature of the method.
     *
     * @return the type signature of the method.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getMethodType</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>methodType</name></expr>;</return>
    }</block></function>

}</block></class>

</unit>
