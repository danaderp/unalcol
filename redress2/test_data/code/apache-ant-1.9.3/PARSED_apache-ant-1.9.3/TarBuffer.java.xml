<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\tar\TarBuffer.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<comment type="block">/*
 * This package is based on the work done by Timothy Gerard Endres
 * (time@ice.com) to whom the Ant project is very grateful for his great code.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>tar</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>OutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Arrays</name></name>;</import>

<comment type="javadoc">/**
 * The TarBuffer class implements the tar archive concept
 * of a buffered input stream. This concept goes back to the
 * days of blocked tape drives and special io devices. In the
 * Java universe, the only real function that this class
 * performs is to ensure that files have the correct "block"
 * size, or other tars will complain.
 * &lt;p&gt;
 * You should never have a need to access this class directly.
 * TarBuffers are created by Tar IO Streams.
 *
 */</comment>

<class><specifier>public</specifier> class <name>TarBuffer</name> <block>{

    <comment type="javadoc">/** Default record size */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DEFAULT_RCDSIZE</name> =<init> <expr>(512)</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Default block size */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DEFAULT_BLKSIZE</name> =<init> <expr>(<name>DEFAULT_RCDSIZE</name> * 20)</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>InputStream</name></type>     <name>inStream</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>OutputStream</name></type>    <name>outStream</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type>       <name>blockSize</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type>       <name>recordSize</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type>       <name>recsPerBlock</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>byte</name><index>[]</index></type>    <name>blockBuffer</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type>             <name>currBlkIdx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type>             <name>currRecIdx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type>         <name>debug</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructor for a TarBuffer on an input stream.
     * @param inStream the input stream to use
     */</comment>
    <constructor><specifier>public</specifier> <name>TarBuffer</name><parameter_list>(<param><decl><type><name>InputStream</name></type> <name>inStream</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>inStream</name></expr></argument>, <argument><expr><name><name>TarBuffer</name>.<name>DEFAULT_BLKSIZE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructor for a TarBuffer on an input stream.
     * @param inStream the input stream to use
     * @param blockSize the block size to use
     */</comment>
    <constructor><specifier>public</specifier> <name>TarBuffer</name><parameter_list>(<param><decl><type><name>InputStream</name></type> <name>inStream</name></decl></param>, <param><decl><type><name>int</name></type> <name>blockSize</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>inStream</name></expr></argument>, <argument><expr><name>blockSize</name></expr></argument>, <argument><expr><name><name>TarBuffer</name>.<name>DEFAULT_RCDSIZE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructor for a TarBuffer on an input stream.
     * @param inStream the input stream to use
     * @param blockSize the block size to use
     * @param recordSize the record size to use
     */</comment>
    <constructor><specifier>public</specifier> <name>TarBuffer</name><parameter_list>(<param><decl><type><name>InputStream</name></type> <name>inStream</name></decl></param>, <param><decl><type><name>int</name></type> <name>blockSize</name></decl></param>, <param><decl><type><name>int</name></type> <name>recordSize</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>inStream</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>blockSize</name></expr></argument>, <argument><expr><name>recordSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructor for a TarBuffer on an output stream.
     * @param outStream the output stream to use
     */</comment>
    <constructor><specifier>public</specifier> <name>TarBuffer</name><parameter_list>(<param><decl><type><name>OutputStream</name></type> <name>outStream</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>outStream</name></expr></argument>, <argument><expr><name><name>TarBuffer</name>.<name>DEFAULT_BLKSIZE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructor for a TarBuffer on an output stream.
     * @param outStream the output stream to use
     * @param blockSize the block size to use
     */</comment>
    <constructor><specifier>public</specifier> <name>TarBuffer</name><parameter_list>(<param><decl><type><name>OutputStream</name></type> <name>outStream</name></decl></param>, <param><decl><type><name>int</name></type> <name>blockSize</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>outStream</name></expr></argument>, <argument><expr><name>blockSize</name></expr></argument>, <argument><expr><name><name>TarBuffer</name>.<name>DEFAULT_RCDSIZE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructor for a TarBuffer on an output stream.
     * @param outStream the output stream to use
     * @param blockSize the block size to use
     * @param recordSize the record size to use
     */</comment>
    <constructor><specifier>public</specifier> <name>TarBuffer</name><parameter_list>(<param><decl><type><name>OutputStream</name></type> <name>outStream</name></decl></param>, <param><decl><type><name>int</name></type> <name>blockSize</name></decl></param>, <param><decl><type><name>int</name></type> <name>recordSize</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr><name>outStream</name></expr></argument>, <argument><expr><name>blockSize</name></expr></argument>, <argument><expr><name>recordSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Private constructor to perform common setup.
     */</comment>
    <constructor><specifier>private</specifier> <name>TarBuffer</name><parameter_list>(<param><decl><type><name>InputStream</name></type> <name>inStream</name></decl></param>, <param><decl><type><name>OutputStream</name></type> <name>outStream</name></decl></param>, <param><decl><type><name>int</name></type> <name>blockSize</name></decl></param>, <param><decl><type><name>int</name></type> <name>recordSize</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>inStream</name></name> = <name>inStream</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>outStream</name></name> = <name>outStream</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>debug</name></name> = false</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>blockSize</name></name> = <name>blockSize</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>recordSize</name></name> = <name>recordSize</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>recsPerBlock</name></name> = (<name><name>this</name>.<name>blockSize</name></name> / <name><name>this</name>.<name>recordSize</name></name>)</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>blockBuffer</name></name> = new <name><name>byte</name><index>[<expr><name><name>this</name>.<name>blockSize</name></name></expr>]</index></name></expr>;</expr_stmt>

        <if>if <condition>(<expr><name><name>this</name>.<name>inStream</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>currBlkIdx</name></name> = -1</expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>currRecIdx</name></name> = <name><name>this</name>.<name>recsPerBlock</name></name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name><name>this</name>.<name>currBlkIdx</name></name> = 0</expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>currRecIdx</name></name> = 0</expr>;</expr_stmt>
        }</block></else></if>
    }</block></constructor>

    <comment type="javadoc">/**
     * Get the TAR Buffer's block size. Blocks consist of multiple records.
     * @return the block size
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getBlockSize</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>blockSize</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the TAR Buffer's record size.
     * @return the record size
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getRecordSize</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>recordSize</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the debugging flag for the buffer.
     *
     * @param debug If true, print debugging output.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDebug</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>debug</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>debug</name></name> = <name>debug</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Determine if an archive record indicate End of Archive. End of
     * archive is indicated by a record that consists entirely of null bytes.
     *
     * @param record The record data to check.
     * @return true if the record data is an End of Archive
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isEOFRecord</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>record</name></decl></param>)</parameter_list> <block>{
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init>, <name>sz</name> =<init> <expr><call><name>getRecordSize</name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>sz</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
            <if>if <condition>(<expr><name><name>record</name><index>[<expr><name>i</name></expr>]</index></name> != 0</expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>
            }</block></then></if>
        }</block></for>

        <return>return <expr>true</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Skip over a record on the input stream.
     * @throws IOException on error
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>skipRecord</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>debug</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"SkipRecord: recIdx = " + <name>currRecIdx</name>
                               + " blkIdx = " + <name>currBlkIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>inStream</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IOException</name><argument_list>(<argument><expr>"reading (via skip) from an output buffer"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr><name>currRecIdx</name> &gt;= <name>recsPerBlock</name> &amp;&amp; !<call><name>readBlock</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>    <comment type="line">// UNDONE</comment>
        }</block></then></if>

        <expr_stmt><expr><name>currRecIdx</name>++</expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Read a record from the input stream and return the data.
     *
     * @return The record data.
     * @throws IOException on error
     */</comment>
    <function><type><specifier>public</specifier> <name>byte</name><index>[]</index></type> <name>readRecord</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>debug</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"ReadRecord: recIdx = " + <name>currRecIdx</name>
                               + " blkIdx = " + <name>currBlkIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>inStream</name> == <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>outStream</name> == <name>null</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>IOException</name><argument_list>(<argument><expr>"input buffer is closed"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <throw>throw <expr>new <call><name>IOException</name><argument_list>(<argument><expr>"reading from an output buffer"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr><name>currRecIdx</name> &gt;= <name>recsPerBlock</name> &amp;&amp; !<call><name>readBlock</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>result</name> =<init> <expr>new <name><name>byte</name><index>[<expr><name>recordSize</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>blockBuffer</name></expr></argument>,
                         <argument><expr>(<name>currRecIdx</name> * <name>recordSize</name>)</expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr>0</expr></argument>,
                         <argument><expr><name>recordSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>currRecIdx</name>++</expr>;</expr_stmt>

        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * @return false if End-Of-File, else true
     */</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>readBlock</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>debug</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"ReadBlock: blkIdx = " + <name>currBlkIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>inStream</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IOException</name><argument_list>(<argument><expr>"reading from an output buffer"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <expr_stmt><expr><name>currRecIdx</name> = 0</expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>offset</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>bytesNeeded</name> =<init> <expr><name>blockSize</name></expr></init></decl>;</decl_stmt>

        <while>while <condition>(<expr><name>bytesNeeded</name> &gt; 0</expr>)</condition> <block>{
            <decl_stmt><decl><type><name>long</name></type> <name>numBytes</name> =<init> <expr><call><name><name>inStream</name>.<name>read</name></name><argument_list>(<argument><expr><name>blockBuffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,
                                               <argument><expr><name>bytesNeeded</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">//</comment>
            <comment type="line">// NOTE</comment>
            <comment type="line">// We have fit EOF, and the block is not full!</comment>
            <comment type="line">//</comment>
            <comment type="line">// This is a broken archive. It does not follow the standard</comment>
            <comment type="line">// blocking algorithm. However, because we are generous, and</comment>
            <comment type="line">// it requires little effort, we will simply ignore the error</comment>
            <comment type="line">// and continue as if the entire block were read. This does</comment>
            <comment type="line">// not appear to break anything upstream. We used to return</comment>
            <comment type="line">// false in this case.</comment>
            <comment type="line">//</comment>
            <comment type="line">// Thanks to 'Yohann.Roussel@alcatel.fr' for this fix.</comment>
            <comment type="line">//</comment>
            <if>if <condition>(<expr><name>numBytes</name> == -1</expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>offset</name> == 0</expr>)</condition><then> <block>{
                    <comment type="line">// Ensure that we do not read gigabytes of zeros</comment>
                    <comment type="line">// for a corrupt tar file.</comment>
                    <comment type="line">// See http://issues.apache.org/bugzilla/show_bug.cgi?id=39924</comment>
                    <return>return <expr>false</expr>;</return>
                }</block></then></if>
                <comment type="line">// However, just leaving the unread portion of the buffer dirty does</comment>
                <comment type="line">// cause problems in some cases.  This problem is described in</comment>
                <comment type="line">// http://issues.apache.org/bugzilla/show_bug.cgi?id=29877</comment>
                <comment type="line">//</comment>
                <comment type="line">// The solution is to fill the unused portion of the buffer with zeros.</comment>

                <expr_stmt><expr><call><name><name>Arrays</name>.<name>fill</name></name><argument_list>(<argument><expr><name>blockBuffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>offset</name> + <name>bytesNeeded</name></expr></argument>, <argument><expr>(<name>byte</name>) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break>break;</break>
            }</block></then></if>

            <expr_stmt><expr><name>offset</name> += <name>numBytes</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>bytesNeeded</name> -= <name>numBytes</name></expr>;</expr_stmt>

            <if>if <condition>(<expr><name>numBytes</name> != <name>blockSize</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>debug</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"ReadBlock: INCOMPLETE READ "
                                       + <name>numBytes</name> + " of " + <name>blockSize</name>
                                       + " bytes read."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></while>

        <expr_stmt><expr><name>currBlkIdx</name>++</expr>;</expr_stmt>

        <return>return <expr>true</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the current block number, zero based.
     *
     * @return The current zero based block number.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getCurrentBlockNum</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>currBlkIdx</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the current record number, within the current block, zero based.
     * Thus, current offset = (currentBlockNum * recsPerBlk) + currentRecNum.
     *
     * @return The current zero based record number.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getCurrentRecordNum</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>currRecIdx</name> - 1</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Write an archive record to the archive.
     *
     * @param record The record data to write to the archive.
     * @throws IOException on error
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>writeRecord</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>record</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>debug</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"WriteRecord: recIdx = " + <name>currRecIdx</name>
                               + " blkIdx = " + <name>currBlkIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>outStream</name> == <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>inStream</name> == <name>null</name></expr>)</condition><then><block>{
                <throw>throw <expr>new <call><name>IOException</name><argument_list>(<argument><expr>"Output buffer is closed"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <throw>throw <expr>new <call><name>IOException</name><argument_list>(<argument><expr>"writing to an input buffer"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr><name><name>record</name>.<name>length</name></name> != <name>recordSize</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IOException</name><argument_list>(<argument><expr>"record to write has length '"
                                  + <name><name>record</name>.<name>length</name></name>
                                  + "' which is not the record size of '"
                                  + <name>recordSize</name> + "'"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr><name>currRecIdx</name> &gt;= <name>recsPerBlock</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>writeBlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>record</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>blockBuffer</name></expr></argument>,
                         <argument><expr>(<name>currRecIdx</name> * <name>recordSize</name>)</expr></argument>,
                         <argument><expr><name>recordSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>currRecIdx</name>++</expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Write an archive record to the archive, where the record may be
     * inside of a larger array buffer. The buffer must be "offset plus
     * record size" long.
     *
     * @param buf The buffer containing the record data to write.
     * @param offset The offset of the record data within buf.
     * @throws IOException on error
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>writeRecord</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buf</name></decl></param>, <param><decl><type><name>int</name></type> <name>offset</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>debug</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"WriteRecord: recIdx = " + <name>currRecIdx</name>
                               + " blkIdx = " + <name>currBlkIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>outStream</name> == <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>inStream</name> == <name>null</name></expr>)</condition><then><block>{
                <throw>throw <expr>new <call><name>IOException</name><argument_list>(<argument><expr>"Output buffer is closed"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <throw>throw <expr>new <call><name>IOException</name><argument_list>(<argument><expr>"writing to an input buffer"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr>(<name>offset</name> + <name>recordSize</name>) &gt; <name><name>buf</name>.<name>length</name></name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IOException</name><argument_list>(<argument><expr>"record has length '" + <name><name>buf</name>.<name>length</name></name>
                                  + "' with offset '" + <name>offset</name>
                                  + "' which is less than the record size of '"
                                  + <name>recordSize</name> + "'"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr><name>currRecIdx</name> &gt;= <name>recsPerBlock</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>writeBlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>blockBuffer</name></expr></argument>,
                         <argument><expr>(<name>currRecIdx</name> * <name>recordSize</name>)</expr></argument>,
                         <argument><expr><name>recordSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>currRecIdx</name>++</expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Write a TarBuffer block to the archive.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeBlock</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>debug</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"WriteBlock: blkIdx = " + <name>currBlkIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>outStream</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IOException</name><argument_list>(<argument><expr>"writing to an input buffer"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>outStream</name>.<name>write</name></name><argument_list>(<argument><expr><name>blockBuffer</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>blockSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>outStream</name>.<name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>currRecIdx</name> = 0</expr>;</expr_stmt>
        <expr_stmt><expr><name>currBlkIdx</name>++</expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Arrays</name>.<name>fill</name></name><argument_list>(<argument><expr><name>blockBuffer</name></expr></argument>, <argument><expr>(<name>byte</name>) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Flush the current data block if it has any data in it.
     */</comment>
    <function><type><name>void</name></type> <name>flushBlock</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>debug</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"TarBuffer.flushBlock() called."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>outStream</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IOException</name><argument_list>(<argument><expr>"writing to an input buffer"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr><name>currRecIdx</name> &gt; 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>writeBlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Close the TarBuffer. If this is an output buffer, also flush the
     * current block before closing.
     * @throws IOException on error
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>debug</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"TarBuffer.closeBuffer()."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>outStream</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>flushBlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><name>outStream</name> != <name><name>System</name>.<name>out</name></name>
                    &amp;&amp; <name>outStream</name> != <name><name>System</name>.<name>err</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>outStream</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>outStream</name> = <name>null</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then> <else>else <if>if <condition>(<expr><name>inStream</name> != <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>inStream</name> != <name><name>System</name>.<name>in</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>inStream</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>inStream</name> = <name>null</name></expr>;</expr_stmt>
        }</block></then></if></else></if>
    }</block></function>
}</block></class>
</unit>
