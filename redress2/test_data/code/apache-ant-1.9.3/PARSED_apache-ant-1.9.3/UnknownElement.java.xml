<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\UnknownElement.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>PreSetDef</name></name>;</import>

<comment type="javadoc">/**
 * Wrapper class that holds all the information necessary to create a task
 * or data type that did not exist when Ant started, or one which
 * has had its definition updated to use a different implementation class.
 *
 */</comment>
<class><specifier>public</specifier> class <name>UnknownElement</name> <super><extends>extends <name>Task</name></extends></super> <block>{

    <comment type="javadoc">/**
     * Holds the name of the task/type or nested child element of a
     * task/type that hasn't been defined at parser time or has
     * been redefined since original creation.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>elementName</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Holds the namespace of the element.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>namespace</name> =<init> <expr>""</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Holds the namespace qname of the element.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>qname</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The real object after it has been loaded.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Object</name></type> <name>realThing</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * List of child elements (UnknownElements).
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>List</name><argument_list>&lt;<argument><name>UnknownElement</name></argument>&gt;</argument_list></name></type> <name>children</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Specifies if a predefined definition has been done */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>presetDefed</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates an UnknownElement for the given element name.
     *
     * @param elementName The name of the unknown element.
     *                    Must not be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <constructor><specifier>public</specifier> <name>UnknownElement</name><parameter_list>(<param><decl><type><name>String</name></type> <name>elementName</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>elementName</name></name> = <name>elementName</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * @return the list of nested UnknownElements for this UnknownElement.
     */</comment>
    <function><type><specifier>public</specifier> <name><name>List</name><argument_list>&lt;<argument><name>UnknownElement</name></argument>&gt;</argument_list></name></type> <name>getChildren</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>children</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the name of the XML element which generated this unknown
     * element.
     *
     * @return the name of the XML element which generated this unknown
     *         element.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getTag</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>elementName</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Return the namespace of the XML element associated with this component.
     *
     * @return Namespace URI used in the xmlns declaration.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getNamespace</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>namespace</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the namespace of the XML element associated with this component.
     * This method is typically called by the XML processor.
     * If the namespace is "ant:current", the component helper
     * is used to get the current antlib uri.
     *
     * @param namespace URI used in the xmlns declaration.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setNamespace</name><parameter_list>(<param><decl><type><name>String</name></type> <name>namespace</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>namespace</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>ProjectHelper</name>.<name>ANT_CURRENT_URI</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>ComponentHelper</name></type> <name>helper</name> =<init> <expr><call><name><name>ComponentHelper</name>.<name>getComponentHelper</name></name><argument_list>(
                <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>namespace</name> = <call><name><name>helper</name>.<name>getCurrentAntlibUri</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>namespace</name></name> = <name>namespace</name> == <name>null</name> ? "" : <name>namespace</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Return the qname of the XML element associated with this component.
     *
     * @return namespace Qname used in the element declaration.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getQName</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>qname</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the namespace qname of the XML element.
     * This method is typically called by the XML processor.
     *
     * @param qname the qualified name of the element
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setQName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>qname</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>qname</name></name> = <name>qname</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Get the RuntimeConfigurable instance for this UnknownElement, containing
     * the configuration information.
     *
     * @return the configuration info.
     */</comment>
    <function><type><specifier>public</specifier> <name>RuntimeConfigurable</name></type> <name>getWrapper</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>super</name>.<name>getWrapper</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Creates the real object instance and child elements, then configures
     * the attributes and text of the real object. This unknown element
     * is then replaced with the real object in the containing target's list
     * of children.
     *
     * @exception BuildException if the configuration fails
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>maybeConfigure</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>realThing</name> != <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>configure</name><argument_list>(<argument><expr><call><name>makeObject</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>getWrapper</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Configure the given object from this UnknownElement
     *
     * @param realObject the real object this UnknownElement is representing.
     *
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>configure</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>realObject</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>realObject</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <expr_stmt><expr><name>realThing</name> = <name>realObject</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>getWrapper</name><argument_list>()</argument_list></call>.<call><name>setProxy</name><argument_list>(<argument><expr><name>realThing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Task</name></type> <name>task</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>realThing</name> <name>instanceof</name> <name>Task</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>task</name> = (<name>Task</name>) <name>realThing</name></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>task</name>.<name>setRuntimeConfigurableWrapper</name></name><argument_list>(<argument><expr><call><name>getWrapper</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// For Script example that modifies id'ed tasks in other</comment>
            <comment type="line">// targets to work. *very* Ugly</comment>
            <comment type="line">// The reference is replaced by RuntimeConfigurable</comment>
            <if>if <condition>(<expr><call><name>getWrapper</name><argument_list>()</argument_list></call>.<call><name>getId</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>this</name>.<name>getOwningTarget</name></name><argument_list>()</argument_list></call>.<call><name>replaceChild</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr>(<name>Task</name>) <name>realThing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
       }</block></then></if>


        <comment type="line">// configure attributes of the object and it's children. If it is</comment>
        <comment type="line">// a task container, defer the configuration till the task container</comment>
        <comment type="line">// attempts to use the task</comment>

        <if>if <condition>(<expr><name>task</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>task</name>.<name>maybeConfigure</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>getWrapper</name><argument_list>()</argument_list></call>.<call><name>maybeConfigure</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <expr_stmt><expr><call><name>handleChildren</name><argument_list>(<argument><expr><name>realThing</name></expr></argument>, <argument><expr><call><name>getWrapper</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Handles output sent to System.out by this task or its real task.
     *
     * @param output The output to log. Should not be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>handleOutput</name><parameter_list>(<param><decl><type><name>String</name></type> <name>output</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>realThing</name> <name>instanceof</name> <name>Task</name></expr>)</condition><then> <block>{
            <expr_stmt><expr>((<name>Task</name>) <name>realThing</name>).<call><name>handleOutput</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>super</name>.<name>handleOutput</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Delegate to realThing if present and if it as task.
     * @see Task#handleInput(byte[], int, int)
     * @param buffer the buffer into which data is to be read.
     * @param offset the offset into the buffer at which data is stored.
     * @param length the amount of data to read.
     *
     * @return the number of bytes read.
     *
     * @exception IOException if the data cannot be read.
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>protected</specifier> <name>int</name></type> <name>handleInput</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buffer</name></decl></param>, <param><decl><type><name>int</name></type> <name>offset</name></decl></param>, <param><decl><type><name>int</name></type> <name>length</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>realThing</name> <name>instanceof</name> <name>Task</name></expr>)</condition><then> <block>{
            <return>return <expr>((<name>Task</name>) <name>realThing</name>).<call><name>handleInput</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
            <return>return <expr><call><name><name>super</name>.<name>handleInput</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>

    }</block></function>

    <comment type="javadoc">/**
     * Handles output sent to System.out by this task or its real task.
     *
     * @param output The output to log. Should not be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>handleFlush</name><parameter_list>(<param><decl><type><name>String</name></type> <name>output</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>realThing</name> <name>instanceof</name> <name>Task</name></expr>)</condition><then> <block>{
            <expr_stmt><expr>((<name>Task</name>) <name>realThing</name>).<call><name>handleFlush</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>super</name>.<name>handleFlush</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Handles error output sent to System.err by this task or its real task.
     *
     * @param output The error output to log. Should not be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>handleErrorOutput</name><parameter_list>(<param><decl><type><name>String</name></type> <name>output</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>realThing</name> <name>instanceof</name> <name>Task</name></expr>)</condition><then> <block>{
            <expr_stmt><expr>((<name>Task</name>) <name>realThing</name>).<call><name>handleErrorOutput</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>super</name>.<name>handleErrorOutput</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Handles error output sent to System.err by this task or its real task.
     *
     * @param output The error output to log. Should not be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>handleErrorFlush</name><parameter_list>(<param><decl><type><name>String</name></type> <name>output</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>realThing</name> <name>instanceof</name> <name>Task</name></expr>)</condition><then> <block>{
            <expr_stmt><expr>((<name>Task</name>) <name>realThing</name>).<call><name>handleErrorFlush</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>super</name>.<name>handleErrorFlush</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Executes the real object if it's a task. If it's not a task
     * (e.g. a data type) then this method does nothing.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>realThing</name> == <name>null</name></expr>)</condition><then> <block>{
            <comment type="line">// Got here if the runtimeconfigurable is not enabled.</comment>
            <return>return;</return>
        }</block></then></if>
        <try>try <block>{
            <if>if <condition>(<expr><name>realThing</name> <name>instanceof</name> <name>Task</name></expr>)</condition><then> <block>{
                <expr_stmt><expr>((<name>Task</name>) <name>realThing</name>).<call><name>execute</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block> <finally>finally <block>{
            <comment type="line">// Finished executing the task</comment>
            <comment type="line">// null it (unless it has an ID) to allow</comment>
            <comment type="line">// GC do its job</comment>
            <comment type="line">// If this UE is used again, a new "realthing" will be made</comment>
            <if>if <condition>(<expr><call><name>getWrapper</name><argument_list>()</argument_list></call>.<call><name>getId</name><argument_list>()</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>realThing</name> = <name>null</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>getWrapper</name><argument_list>()</argument_list></call>.<call><name>setProxy</name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></finally></try>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a child element to this element.
     *
     * @param child The child element to add. Must not be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addChild</name><parameter_list>(<param><decl><type><name>UnknownElement</name></type> <name>child</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>children</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>children</name> = new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>UnknownElement</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>children</name>.<name>add</name></name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Creates child elements, creates children of the children
     * (recursively), and sets attributes of the child elements.
     *
     * @param parent The configured object for the parent.
     *               Must not be &lt;code&gt;null&lt;/code&gt;.
     *
     * @param parentWrapper The wrapper containing child wrappers
     *                      to be configured. Must not be &lt;code&gt;null&lt;/code&gt;
     *                      if there are any children.
     *
     * @exception BuildException if the children cannot be configured.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>handleChildren</name><parameter_list>(
        <param><decl><type><name>Object</name></type> <name>parent</name></decl></param>,
        <param><decl><type><name>RuntimeConfigurable</name></type> <name>parentWrapper</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>parent</name> <name>instanceof</name> <name>TypeAdapter</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>parent</name> = ((<name>TypeAdapter</name>) <name>parent</name>).<call><name>getProxy</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name>String</name></type> <name>parentUri</name> =<init> <expr><call><name>getNamespace</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>parentClass</name> =<init> <expr><call><name><name>parent</name>.<name>getClass</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>IntrospectionHelper</name></type> <name>ih</name> =<init> <expr><call><name><name>IntrospectionHelper</name>.<name>getHelper</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>parentClass</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


        <if>if <condition>(<expr><name>children</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name><name>Iterator</name><argument_list>&lt;<argument><name>UnknownElement</name></argument>&gt;</argument_list></name></type> <name>it</name> =<init> <expr><call><name><name>children</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><call><name><name>it</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>RuntimeConfigurable</name></type> <name>childWrapper</name> =<init> <expr><call><name><name>parentWrapper</name>.<name>getChild</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>UnknownElement</name></type> <name>child</name> =<init> <expr><call><name><name>it</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <try>try <block>{
                    <if>if <condition>(<expr>!<call><name><name>childWrapper</name>.<name>isEnabled</name></name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <if>if <condition>(<expr><call><name><name>ih</name>.<name>supportsNestedElement</name></name><argument_list>(
                                <argument><expr><name>parentUri</name></expr></argument>, <argument><expr><call><name><name>ProjectHelper</name>.<name>genComponentName</name></name><argument_list>(
                                    <argument><expr><call><name><name>child</name>.<name>getNamespace</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>child</name>.<name>getTag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                            <continue>continue;</continue>
                        }</block></then></if>
                        <comment type="line">// fall tru and fail in handlechild (unsupported element)</comment>
                    }</block></then></if>
                    <if>if <condition>(<expr>!<call><name>handleChild</name><argument_list>(
                            <argument><expr><name>parentUri</name></expr></argument>, <argument><expr><name>ih</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>child</name></expr></argument>, <argument><expr><name>childWrapper</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <if>if <condition>(<expr>!(<name>parent</name> <name>instanceof</name> <name>TaskContainer</name>)</expr>)</condition><then> <block>{
                            <expr_stmt><expr><call><name><name>ih</name>.<name>throwNotSupported</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>parent</name></expr></argument>,
                                                 <argument><expr><call><name><name>child</name>.<name>getTag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then> <else>else <block>{
                            <comment type="line">// a task container - anything could happen - just add the</comment>
                            <comment type="line">// child to the container</comment>
                            <decl_stmt><decl><type><name>TaskContainer</name></type> <name>container</name> =<init> <expr>(<name>TaskContainer</name>) <name>parent</name></expr></init></decl>;</decl_stmt>
                            <expr_stmt><expr><call><name><name>container</name>.<name>addTask</name></name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></else></if>
                    }</block></then></if>
                }</block> <catch>catch (<param><decl><type><name>UnsupportedElementException</name></type> <name>ex</name></decl></param>) <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                        <argument><expr><call><name><name>parentWrapper</name>.<name>getElementTag</name></name><argument_list>()</argument_list></call>
                        + " doesn't support the nested \"" + <call><name><name>ex</name>.<name>getElement</name></name><argument_list>()</argument_list></call>
                        + "\" element."</expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></catch></try>
            }</block></for>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * @return the component name - uses ProjectHelper#genComponentName()
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>getComponentName</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>ProjectHelper</name>.<name>genComponentName</name></name><argument_list>(<argument><expr><call><name>getNamespace</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getTag</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * This is used then the realobject of the UE is a PreSetDefinition.
     * This is also used when a presetdef is used on a presetdef
     * The attributes, elements and text are applied to this
     * UE.
     *
     * @param u an UnknownElement containing the attributes, elements and text
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>applyPreSet</name><parameter_list>(<param><decl><type><name>UnknownElement</name></type> <name>u</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>presetDefed</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <comment type="line">// Do the runtime</comment>
        <expr_stmt><expr><call><name>getWrapper</name><argument_list>()</argument_list></call>.<call><name>applyPreSet</name><argument_list>(<argument><expr><call><name><name>u</name>.<name>getWrapper</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>u</name>.<name>children</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>UnknownElement</name></argument>&gt;</argument_list></name></type> <name>newChildren</name> =<init> <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>UnknownElement</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>newChildren</name>.<name>addAll</name></name><argument_list>(<argument><expr><name><name>u</name>.<name>children</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>children</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>newChildren</name>.<name>addAll</name></name><argument_list>(<argument><expr><name>children</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>children</name> = <name>newChildren</name></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>presetDefed</name> = true</expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Creates a named task or data type. If the real object is a task,
     * it is configured up to the init() stage.
     *
     * @param ue The unknown element to create the real object for.
     *           Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param w  Ignored in this implementation.
     *
     * @return the task or data type represented by the given unknown element.
     */</comment>
    <function><type><specifier>protected</specifier> <name>Object</name></type> <name>makeObject</name><parameter_list>(<param><decl><type><name>UnknownElement</name></type> <name>ue</name></decl></param>, <param><decl><type><name>RuntimeConfigurable</name></type> <name>w</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr>!<call><name><name>w</name>.<name>isEnabled</name></name><argument_list>(<argument><expr><name>ue</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>ComponentHelper</name></type> <name>helper</name> =<init> <expr><call><name><name>ComponentHelper</name>.<name>getComponentHelper</name></name><argument_list>(
            <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> =<init> <expr><call><name><name>ue</name>.<name>getComponentName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Object</name></type> <name>o</name> =<init> <expr><call><name><name>helper</name>.<name>createComponent</name></name><argument_list>(<argument><expr><name>ue</name></expr></argument>, <argument><expr><call><name><name>ue</name>.<name>getNamespace</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>o</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr><call><name>getNotFoundException</name><argument_list>(<argument><expr>"task or type"</expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>o</name> <name>instanceof</name> <name><name>PreSetDef</name>.<name>PreSetDefinition</name></name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name><name>PreSetDef</name>.<name>PreSetDefinition</name></name></type> <name>def</name> =<init> <expr>(<name><name>PreSetDef</name>.<name>PreSetDefinition</name></name>) <name>o</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>o</name> = <call><name><name>def</name>.<name>createObject</name></name><argument_list>(<argument><expr><call><name><name>ue</name>.<name>getProject</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>o</name> == <name>null</name></expr>)</condition><then> <block>{
                <throw>throw <expr><call><name>getNotFoundException</name><argument_list>(
                    <argument><expr>"preset " + <name>name</name></expr></argument>,
                    <argument><expr><call><name><name>def</name>.<name>getPreSets</name></name><argument_list>()</argument_list></call>.<call><name>getComponentName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>ue</name>.<name>applyPreSet</name></name><argument_list>(<argument><expr><call><name><name>def</name>.<name>getPreSets</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>o</name> <name>instanceof</name> <name>Task</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>Task</name></type> <name>task</name> =<init> <expr>(<name>Task</name>) <name>o</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>task</name>.<name>setTaskType</name></name><argument_list>(<argument><expr><call><name><name>ue</name>.<name>getTaskType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>task</name>.<name>setTaskName</name></name><argument_list>(<argument><expr><call><name><name>ue</name>.<name>getTaskName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>task</name>.<name>init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <if>if <condition>(<expr><name>o</name> <name>instanceof</name> <name>UnknownElement</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>o</name> = ((<name>UnknownElement</name>) <name>o</name>).<call><name>makeObject</name><argument_list>(<argument><expr>(<name>UnknownElement</name>) <name>o</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>o</name> <name>instanceof</name> <name>Task</name></expr>)</condition><then> <block>{
            <expr_stmt><expr>((<name>Task</name>) <name>o</name>).<call><name>setOwningTarget</name><argument_list>(<argument><expr><call><name>getOwningTarget</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>o</name> <name>instanceof</name> <name>ProjectComponent</name></expr>)</condition><then> <block>{
            <expr_stmt><expr>((<name>ProjectComponent</name>) <name>o</name>).<call><name>setLocation</name><argument_list>(<argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>o</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Creates a named task and configures it up to the init() stage.
     *
     * @param ue The UnknownElement to create the real task for.
     *           Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param w  Ignored.
     *
     * @return the task specified by the given unknown element, or
     *         &lt;code&gt;null&lt;/code&gt; if the task name is not recognised.
     */</comment>
    <function><type><specifier>protected</specifier> <name>Task</name></type> <name>makeTask</name><parameter_list>(<param><decl><type><name>UnknownElement</name></type> <name>ue</name></decl></param>, <param><decl><type><name>RuntimeConfigurable</name></type> <name>w</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Task</name></type> <name>task</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>createTask</name><argument_list>(<argument><expr><call><name><name>ue</name>.<name>getTag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>task</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>task</name>.<name>setLocation</name></name><argument_list>(<argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// UnknownElement always has an associated target</comment>
            <expr_stmt><expr><call><name><name>task</name>.<name>setOwningTarget</name></name><argument_list>(<argument><expr><call><name>getOwningTarget</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>task</name>.<name>init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>task</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a very verbose exception for when a task/data type cannot
     * be found.
     *
     * @param what The kind of thing being created. For example, when
     *             a task name could not be found, this would be
     *             &lt;code&gt;"task"&lt;/code&gt;. Should not be &lt;code&gt;null&lt;/code&gt;.
     * @param name The name of the element which could not be found.
     *             Should not be &lt;code&gt;null&lt;/code&gt;.
     *
     * @return a detailed description of what might have caused the problem.
     */</comment>
    <function><type><specifier>protected</specifier> <name>BuildException</name></type> <name>getNotFoundException</name><parameter_list>(<param><decl><type><name>String</name></type> <name>what</name></decl></param>,
                                                  <param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>ComponentHelper</name></type> <name>helper</name> =<init> <expr><call><name><name>ComponentHelper</name>.<name>getComponentHelper</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>msg</name> =<init> <expr><call><name><name>helper</name>.<name>diagnoseCreationFailure</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>what</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the name to use in logging messages.
     *
     * @return the name to use in logging messages.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getTaskName</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">//return elementName;</comment>
        <return>return <expr><name>realThing</name> == <name>null</name>
            || !(<name>realThing</name> <name>instanceof</name> <name>Task</name>) ? <call><name><name>super</name>.<name>getTaskName</name></name><argument_list>()</argument_list></call>
                                            : ((<name>Task</name>) <name>realThing</name>).<call><name>getTaskName</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the task instance after it has been created and if it is a task.
     *
     * @return a task instance or &lt;code&gt;null&lt;/code&gt; if the real object is not
     *         a task.
     */</comment>
    <function><type><specifier>public</specifier> <name>Task</name></type> <name>getTask</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>realThing</name> <name>instanceof</name> <name>Task</name></expr>)</condition><then> <block>{
            <return>return <expr>(<name>Task</name>) <name>realThing</name></expr>;</return>
        }</block></then></if>
        <return>return <expr><name>null</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Return the configured object
     *
     * @return the real thing whatever it is
     *
     * @since ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>getRealThing</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>realThing</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the configured object
     * @param realThing the configured object
     * @since ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRealThing</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>realThing</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>realThing</name></name> = <name>realThing</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Try to create a nested element of &lt;code&gt;parent&lt;/code&gt; for the
     * given tag.
     *
     * @return whether the creation has been successful
     */</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>handleChild</name><parameter_list>(
        <param><decl><type><name>String</name></type> <name>parentUri</name></decl></param>,
        <param><decl><type><name>IntrospectionHelper</name></type> <name>ih</name></decl></param>,
        <param><decl><type><name>Object</name></type> <name>parent</name></decl></param>, <param><decl><type><name>UnknownElement</name></type> <name>child</name></decl></param>,
        <param><decl><type><name>RuntimeConfigurable</name></type> <name>childWrapper</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>childName</name> =<init> <expr><call><name><name>ProjectHelper</name>.<name>genComponentName</name></name><argument_list>(
            <argument><expr><call><name><name>child</name>.<name>getNamespace</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>child</name>.<name>getTag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>ih</name>.<name>supportsNestedElement</name></name><argument_list>(<argument><expr><name>parentUri</name></expr></argument>, <argument><expr><name>childName</name></expr></argument>, <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>,
                                     <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name><name>IntrospectionHelper</name>.<name>Creator</name></name></type> <name>creator</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <try>try <block>{
                <expr_stmt><expr><name>creator</name> = <call><name><name>ih</name>.<name>getElementCreator</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>parentUri</name></expr></argument>,
                                               <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>childName</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>UnsupportedElementException</name></type> <name>use</name></decl></param>) <block>{
                <if>if <condition>(<expr>!<call><name><name>ih</name>.<name>isDynamic</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <throw>throw <expr><name>use</name></expr>;</throw>
                }</block></then></if>
                <comment type="line">// can't trust supportsNestedElement for dynamic elements</comment>
                <return>return <expr>false</expr>;</return>
            }</block></catch></try>
            <expr_stmt><expr><call><name><name>creator</name>.<name>setPolyType</name></name><argument_list>(<argument><expr><call><name><name>childWrapper</name>.<name>getPolyType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Object</name></type> <name>realChild</name> =<init> <expr><call><name><name>creator</name>.<name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>realChild</name> <name>instanceof</name> <name><name>PreSetDef</name>.<name>PreSetDefinition</name></name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name><name>PreSetDef</name>.<name>PreSetDefinition</name></name></type> <name>def</name> =<init>
                    <expr>(<name><name>PreSetDef</name>.<name>PreSetDefinition</name></name>) <name>realChild</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>realChild</name> = <call><name><name>creator</name>.<name>getRealObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>child</name>.<name>applyPreSet</name></name><argument_list>(<argument><expr><call><name><name>def</name>.<name>getPreSets</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>childWrapper</name>.<name>setCreator</name></name><argument_list>(<argument><expr><name>creator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>childWrapper</name>.<name>setProxy</name></name><argument_list>(<argument><expr><name>realChild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>realChild</name> <name>instanceof</name> <name>Task</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>Task</name></type> <name>childTask</name> =<init> <expr>(<name>Task</name>) <name>realChild</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>childTask</name>.<name>setRuntimeConfigurableWrapper</name></name><argument_list>(<argument><expr><name>childWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>childTask</name>.<name>setTaskName</name></name><argument_list>(<argument><expr><name>childName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>childTask</name>.<name>setTaskType</name></name><argument_list>(<argument><expr><name>childName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name>realChild</name> <name>instanceof</name> <name>ProjectComponent</name></expr>)</condition><then> <block>{
                <expr_stmt><expr>((<name>ProjectComponent</name>) <name>realChild</name>).<call><name>setLocation</name><argument_list>(<argument><expr><call><name><name>child</name>.<name>getLocation</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>childWrapper</name>.<name>maybeConfigure</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>child</name>.<name>handleChildren</name></name><argument_list>(<argument><expr><name>realChild</name></expr></argument>, <argument><expr><name>childWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>creator</name>.<name>store</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <return>return <expr>false</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * like contents equals, but ignores project
     * @param obj the object to check against
     * @return true if this unknownelement has the same contents the other
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>similar</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name>getClass</name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><call><name><name>obj</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>UnknownElement</name></type> <name>other</name> =<init> <expr>(<name>UnknownElement</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <comment type="line">// Are the names the same ?</comment>
        <if>if <condition>(<expr>!<call><name>equalsString</name><argument_list>(<argument><expr><name>elementName</name></expr></argument>, <argument><expr><name><name>other</name>.<name>elementName</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>namespace</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>other</name>.<name>namespace</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>qname</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>other</name>.<name>qname</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <comment type="line">// Are attributes the same ?</comment>
        <if>if <condition>(<expr>!<call><name>getWrapper</name><argument_list>()</argument_list></call>.<call><name>getAttributeMap</name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(
                <argument><expr><call><name><name>other</name>.<name>getWrapper</name></name><argument_list>()</argument_list></call>.<call><name>getAttributeMap</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <comment type="line">// Is the text the same?</comment>
        <comment type="line">//   Need to use equals on the string and not</comment>
        <comment type="line">//   on the stringbuffer as equals on the string buffer</comment>
        <comment type="line">//   does not compare the contents.</comment>
        <if>if <condition>(<expr>!<call><name>getWrapper</name><argument_list>()</argument_list></call>.<call><name>getText</name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(
                <argument><expr><call><name><name>other</name>.<name>getWrapper</name></name><argument_list>()</argument_list></call>.<call><name>getText</name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <comment type="line">// Are the sub elements the same ?</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>childrenSize</name> =<init> <expr><name>children</name> == <name>null</name> ? 0 : <call><name><name>children</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>childrenSize</name> == 0</expr>)</condition><then> <block>{
            <return>return <expr><name><name>other</name>.<name>children</name></name> == <name>null</name> || <call><name><name>other</name>.<name>children</name>.<name>size</name></name><argument_list>()</argument_list></call> == 0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>other</name>.<name>children</name></name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>childrenSize</name> != <call><name><name>other</name>.<name>children</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>childrenSize</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
            <decl_stmt><decl><type><name>UnknownElement</name></type> <name>child</name> =<init> <expr>(<name>UnknownElement</name>) <call><name><name>children</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<call><name><name>child</name>.<name>similar</name></name><argument_list>(<argument><expr><call><name><name>other</name>.<name>children</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>
            }</block></then></if>
        }</block></for>
        <return>return <expr>true</expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>equalsString</name><parameter_list>(<param><decl><type><name>String</name></type> <name>a</name></decl></param>, <param><decl><type><name>String</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>(<name>a</name> == <name>null</name>) ? (<name>b</name> == <name>null</name>) : <call><name><name>a</name>.<name>equals</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Make a copy of the unknown element and set it in the new project.
     * @param newProject the project to create the UE in.
     * @return the copied UE.
     */</comment>
    <function><type><specifier>public</specifier> <name>UnknownElement</name></type> <name>copy</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>newProject</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>UnknownElement</name></type> <name>ret</name> =<init> <expr>new <call><name>UnknownElement</name><argument_list>(<argument><expr><call><name>getTag</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ret</name>.<name>setNamespace</name></name><argument_list>(<argument><expr><call><name>getNamespace</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ret</name>.<name>setProject</name></name><argument_list>(<argument><expr><name>newProject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ret</name>.<name>setQName</name></name><argument_list>(<argument><expr><call><name>getQName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ret</name>.<name>setTaskType</name></name><argument_list>(<argument><expr><call><name>getTaskType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ret</name>.<name>setTaskName</name></name><argument_list>(<argument><expr><call><name>getTaskName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ret</name>.<name>setLocation</name></name><argument_list>(<argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>getOwningTarget</name><argument_list>()</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Target</name></type> <name>t</name> =<init> <expr>new <call><name>Target</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>t</name>.<name>setProject</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ret</name>.<name>setOwningTarget</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>ret</name>.<name>setOwningTarget</name></name><argument_list>(<argument><expr><call><name>getOwningTarget</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <decl_stmt><decl><type><name>RuntimeConfigurable</name></type> <name>copyRC</name> =<init> <expr>new <call><name>RuntimeConfigurable</name><argument_list>(
            <argument><expr><name>ret</name></expr></argument>, <argument><expr><call><name>getTaskName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>copyRC</name>.<name>setPolyType</name></name><argument_list>(<argument><expr><call><name>getWrapper</name><argument_list>()</argument_list></call>.<call><name>getPolyType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>m</name> =<init> <expr><call><name>getWrapper</name><argument_list>()</argument_list></call>.<call><name>getAttributeMap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> :<range> <expr><call><name><name>m</name>.<name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>) <block>{
            <expr_stmt><expr><call><name><name>copyRC</name>.<name>setAttribute</name></name><argument_list>(<argument><expr><call><name><name>entry</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>String</name>) <call><name><name>entry</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name><name>copyRC</name>.<name>addText</name></name><argument_list>(<argument><expr><call><name>getWrapper</name><argument_list>()</argument_list></call>.<call><name>getText</name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for (<init><decl><type><name><name>Enumeration</name><argument_list>&lt;<argument><name>RuntimeConfigurable</name></argument>&gt;</argument_list></name></type> <name>e</name> =<init> <expr><call><name>getWrapper</name><argument_list>()</argument_list></call>.<call><name>getChildren</name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
            <decl_stmt><decl><type><name>RuntimeConfigurable</name></type> <name>r</name> =<init> <expr><call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>UnknownElement</name></type> <name>ueChild</name> =<init> <expr>(<name>UnknownElement</name>) <call><name><name>r</name>.<name>getProxy</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>UnknownElement</name></type> <name>copyChild</name> =<init> <expr><call><name><name>ueChild</name>.<name>copy</name></name><argument_list>(<argument><expr><name>newProject</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>copyRC</name>.<name>addChild</name></name><argument_list>(<argument><expr><call><name><name>copyChild</name>.<name>getWrapper</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ret</name>.<name>addChild</name></name><argument_list>(<argument><expr><name>copyChild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>ret</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
