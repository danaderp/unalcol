<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\junit\JUnitTestRunner.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>junit</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>BufferedReader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>BufferedWriter</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ByteArrayOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileWriter</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>OutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>PrintStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>StringReader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>StringWriter</name></name>;</import>
<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name>.<name>Method</name></name>;</import>
<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name>.<name>Modifier</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Hashtable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Properties</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>StringTokenizer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>
<import>import <name><name>junit</name>.<name>framework</name>.<name>AssertionFailedError</name></name>;</import>
<import>import <name><name>junit</name>.<name>framework</name>.<name>Test</name></name>;</import>
<import>import <name><name>junit</name>.<name>framework</name>.<name>TestCase</name></name>;</import>
<import>import <name><name>junit</name>.<name>framework</name>.<name>TestFailure</name></name>;</import>
<import>import <name><name>junit</name>.<name>framework</name>.<name>TestListener</name></name>;</import>
<import>import <name><name>junit</name>.<name>framework</name>.<name>TestResult</name></name>;</import>
<import>import <name><name>junit</name>.<name>framework</name>.<name>TestSuite</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Permissions</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>StringUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>TeeOutputStream</name></name>;</import>

<comment type="javadoc">/**
 * Simple Testrunner for JUnit that runs all tests of a testsuite.
 *
 * &lt;p&gt;This TestRunner expects a name of a TestCase class as its
 * argument. If this class provides a static suite() method it will be
 * called and the resulting Test will be run. So, the signature should be
 * &lt;pre&gt;&lt;code&gt;
 *     public static junit.framework.Test suite()
 * &lt;/code&gt;&lt;/pre&gt;
 *
 * &lt;p&gt; If no such method exists, all public methods starting with
 * "test" and taking no argument will be run.
 *
 * &lt;p&gt; Summary output is generated at the end.
 *
 * @since Ant 1.2
 */</comment>

<class><specifier>public</specifier> class <name>JUnitTestRunner</name> <super><implements>implements <name>TestListener</name>, <name>JUnitTaskMirror</name>.<name>JUnitTestRunnerMirror</name></implements></super> <block>{

    <comment type="javadoc">/**
     * Holds the registered formatters.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name><name>JUnitTaskMirror</name>.<name>JUnitResultFormatterMirror</name></name></argument>&gt;</argument_list></name></type> <name>formatters</name> =<init> <expr>new <call><name>Vector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Collects TestResults.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>IgnoredTestResult</name></type> <name>res</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Do we filter junit.*.* stack frames out of failure and error exceptions.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>filtertrace</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Do we send output to System.out/.err in addition to the formatters?
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>showOutput</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>outputToFormatters</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The permissions set for the test to run.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Permissions</name></type> <name>perm</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>JUNIT_4_TEST_ADAPTER</name>
        =<init> <expr>"junit.framework.JUnit4TestAdapter"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name><index>[]</index></type> <name>DEFAULT_TRACE_FILTERS</name> =<init> <expr>new <name><name>String</name><index>[]</index></name> <block>{
                <expr>"junit.framework.TestCase"</expr>,
                <expr>"junit.framework.TestResult"</expr>,
                <expr>"junit.framework.TestSuite"</expr>,
                <expr>"junit.framework.Assert."</expr>, <comment type="line">// don't filter AssertionFailure</comment>
                <expr>"junit.swingui.TestRunner"</expr>,
                <expr>"junit.awtui.TestRunner"</expr>,
                <expr>"junit.textui.TestRunner"</expr>,
                <expr>"java.lang.reflect.Method.invoke("</expr>,
                <expr>"sun.reflect."</expr>,
                <expr>"org.apache.tools.ant."</expr>,
                <comment type="line">// JUnit 4 support:</comment>
                <expr>"org.junit."</expr>,
                <expr>"junit.framework.JUnit4TestAdapter"</expr>,
                <expr>" more"</expr>,
        }</block></expr></init></decl>;</decl_stmt>


    <comment type="javadoc">/**
     * Do we stop on errors.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>haltOnError</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Do we stop on test failures.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>haltOnFailure</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Returncode
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>retCode</name> =<init> <expr><name>SUCCESS</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The TestSuite we are currently running.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>JUnitTest</name></type> <name>junitTest</name></decl>;</decl_stmt>

    <comment type="javadoc">/** output written during the test */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>PrintStream</name></type> <name>systemError</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Error output during the test */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>PrintStream</name></type> <name>systemOut</name></decl>;</decl_stmt>

    <comment type="javadoc">/** is this runner running in forked mode? */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>forked</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Running more than one test suite? */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>multipleTests</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** ClassLoader passed in in non-forked mode. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ClassLoader</name></type> <name>loader</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Do we print TestListener events? */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>logTestListenerEvents</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Turned on if we are using JUnit 4 for this test suite. see #38811 */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>junit4</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The file used to indicate that the build crashed.
     * File will be empty in case the build did not crash.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>crashFile</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Names of test methods to execute */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name><index>[]</index></type> <name>methods</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Constructor for fork=true or when the user hasn't specified a
     * classpath.
     * @param test the test to run.
     * @param haltOnError whether to stop the run if an error is found.
     * @param filtertrace whether to filter junit.*.* stack frames out of exceptions
     * @param haltOnFailure whether to stop the run if failure is found.
     */</comment>
    <constructor><specifier>public</specifier> <name>JUnitTestRunner</name><parameter_list>(<param><decl><type><name>JUnitTest</name></type> <name>test</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>haltOnError</name></decl></param>,
                           <param><decl><type><name>boolean</name></type> <name>filtertrace</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>haltOnFailure</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>haltOnError</name></expr></argument>, <argument><expr><name>filtertrace</name></expr></argument>, <argument><expr><name>haltOnFailure</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructor for fork=true or when the user hasn't specified a
     * classpath.
     * @param test the test to run.
     * @param haltOnError whether to stop the run if an error is found.
     * @param filtertrace whether to filter junit.*.* stack frames out of exceptions
     * @param haltOnFailure whether to stop the run if failure is found.
     * @param showOutput    whether to send output to System.out/.err as well as formatters.
     */</comment>
    <constructor><specifier>public</specifier> <name>JUnitTestRunner</name><parameter_list>(<param><decl><type><name>JUnitTest</name></type> <name>test</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>haltOnError</name></decl></param>,
                           <param><decl><type><name>boolean</name></type> <name>filtertrace</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>haltOnFailure</name></decl></param>,
                           <param><decl><type><name>boolean</name></type> <name>showOutput</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>haltOnError</name></expr></argument>, <argument><expr><name>filtertrace</name></expr></argument>, <argument><expr><name>haltOnFailure</name></expr></argument>, <argument><expr><name>showOutput</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructor for fork=true or when the user hasn't specified a
     * classpath.
     * @param test the test to run.
     * @param haltOnError whether to stop the run if an error is found.
     * @param filtertrace whether to filter junit.*.* stack frames out of exceptions
     * @param haltOnFailure whether to stop the run if failure is found.
     * @param showOutput    whether to send output to System.out/.err as well as formatters.
     * @param logTestListenerEvents whether to print TestListener events.
     * @since Ant 1.7
     */</comment>
    <constructor><specifier>public</specifier> <name>JUnitTestRunner</name><parameter_list>(<param><decl><type><name>JUnitTest</name></type> <name>test</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>haltOnError</name></decl></param>,
                           <param><decl><type><name>boolean</name></type> <name>filtertrace</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>haltOnFailure</name></decl></param>,
                           <param><decl><type><name>boolean</name></type> <name>showOutput</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>logTestListenerEvents</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>haltOnError</name></expr></argument>, <argument><expr><name>filtertrace</name></expr></argument>, <argument><expr><name>haltOnFailure</name></expr></argument>, <argument><expr><name>showOutput</name></expr></argument>,
             <argument><expr><name>logTestListenerEvents</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructor for fork=true or when the user hasn't specified a
     * classpath.
     * @param test the test to run.
     * @param methods names of methods of the test to be executed.
     * @param haltOnError whether to stop the run if an error is found.
     * @param filtertrace whether to filter junit.*.* stack frames out of exceptions
     * @param haltOnFailure whether to stop the run if failure is found.
     * @param showOutput    whether to send output to System.out/.err as well as formatters.
     * @param logTestListenerEvents whether to print TestListener events.
     * @since 1.8.2
     */</comment>
    <constructor><specifier>public</specifier> <name>JUnitTestRunner</name><parameter_list>(<param><decl><type><name>JUnitTest</name></type> <name>test</name></decl></param>, <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>methods</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>haltOnError</name></decl></param>,
                           <param><decl><type><name>boolean</name></type> <name>filtertrace</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>haltOnFailure</name></decl></param>,
                           <param><decl><type><name>boolean</name></type> <name>showOutput</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>logTestListenerEvents</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>methods</name></expr></argument>, <argument><expr><name>haltOnError</name></expr></argument>, <argument><expr><name>filtertrace</name></expr></argument>, <argument><expr><name>haltOnFailure</name></expr></argument>, <argument><expr><name>showOutput</name></expr></argument>,
             <argument><expr><name>logTestListenerEvents</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructor to use when the user has specified a classpath.
     * @param test the test to run.
     * @param haltOnError whether to stop the run if an error is found.
     * @param filtertrace whether to filter junit.*.* stack frames out of exceptions
     * @param haltOnFailure whether to stop the run if failure is found.
     * @param loader the classloader to use running the test.
     */</comment>
    <constructor><specifier>public</specifier> <name>JUnitTestRunner</name><parameter_list>(<param><decl><type><name>JUnitTest</name></type> <name>test</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>haltOnError</name></decl></param>,
                           <param><decl><type><name>boolean</name></type> <name>filtertrace</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>haltOnFailure</name></decl></param>,
                           <param><decl><type><name>ClassLoader</name></type> <name>loader</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>haltOnError</name></expr></argument>, <argument><expr><name>filtertrace</name></expr></argument>, <argument><expr><name>haltOnFailure</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr><name>loader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructor to use when the user has specified a classpath.
     * @param test the test to run.
     * @param haltOnError whether to stop the run if an error is found.
     * @param filtertrace whether to filter junit.*.* stack frames out of exceptions
     * @param haltOnFailure whether to stop the run if failure is found.
     * @param showOutput    whether to send output to System.out/.err as well as formatters.
     * @param loader the classloader to use running the test.
     */</comment>
    <constructor><specifier>public</specifier> <name>JUnitTestRunner</name><parameter_list>(<param><decl><type><name>JUnitTest</name></type> <name>test</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>haltOnError</name></decl></param>,
                           <param><decl><type><name>boolean</name></type> <name>filtertrace</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>haltOnFailure</name></decl></param>,
                           <param><decl><type><name>boolean</name></type> <name>showOutput</name></decl></param>, <param><decl><type><name>ClassLoader</name></type> <name>loader</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>haltOnError</name></expr></argument>, <argument><expr><name>filtertrace</name></expr></argument>, <argument><expr><name>haltOnFailure</name></expr></argument>, <argument><expr><name>showOutput</name></expr></argument>,
             <argument><expr>false</expr></argument>, <argument><expr><name>loader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructor to use when the user has specified a classpath.
     * @param test the test to run.
     * @param haltOnError whether to stop the run if an error is found.
     * @param filtertrace whether to filter junit.*.* stack frames out of exceptions
     * @param haltOnFailure whether to stop the run if failure is found.
     * @param showOutput    whether to send output to System.out/.err as well as formatters.
     * @param logTestListenerEvents whether to print TestListener events.
     * @param loader the classloader to use running the test.
     * @since Ant 1.7
     */</comment>
    <constructor><specifier>public</specifier> <name>JUnitTestRunner</name><parameter_list>(<param><decl><type><name>JUnitTest</name></type> <name>test</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>haltOnError</name></decl></param>,
                           <param><decl><type><name>boolean</name></type> <name>filtertrace</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>haltOnFailure</name></decl></param>,
                           <param><decl><type><name>boolean</name></type> <name>showOutput</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>logTestListenerEvents</name></decl></param>,
                           <param><decl><type><name>ClassLoader</name></type> <name>loader</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>haltOnError</name></expr></argument>, <argument><expr><name>filtertrace</name></expr></argument>, <argument><expr><name>haltOnFailure</name></expr></argument>, <argument><expr><name>showOutput</name></expr></argument>, 
             <argument><expr><name>logTestListenerEvents</name></expr></argument>, <argument><expr><name>loader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <comment type="javadoc">/**
     * Constructor to use when the user has specified a classpath.
     * @since 1.8.2
     */</comment>
    <constructor><specifier>public</specifier> <name>JUnitTestRunner</name><parameter_list>(<param><decl><type><name>JUnitTest</name></type> <name>test</name></decl></param>, <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>methods</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>haltOnError</name></decl></param>,
                           <param><decl><type><name>boolean</name></type> <name>filtertrace</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>haltOnFailure</name></decl></param>,
                           <param><decl><type><name>boolean</name></type> <name>showOutput</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>logTestListenerEvents</name></decl></param>,
                           <param><decl><type><name>ClassLoader</name></type> <name>loader</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>JUnitTestRunner</name>.<name>filtertrace</name></name> = <name>filtertrace</name></expr>;</expr_stmt> <comment type="line">// TODO clumsy, should use instance field somehow</comment>
        <expr_stmt><expr><name><name>this</name>.<name>junitTest</name></name> = <name>test</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>haltOnError</name></name> = <name>haltOnError</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>haltOnFailure</name></name> = <name>haltOnFailure</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>showOutput</name></name> = <name>showOutput</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>logTestListenerEvents</name></name> = <name>logTestListenerEvents</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>methods</name></name> = <name>methods</name> != <name>null</name> ? (<name><name>String</name><index>[]</index></name>) <call><name><name>methods</name>.<name>clone</name></name><argument_list>()</argument_list></call> : <name>null</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>loader</name></name> = <name>loader</name></expr>;</expr_stmt>
    }</block></constructor>

    <decl_stmt><decl><type><specifier>private</specifier> <name>PrintStream</name></type> <name>savedOut</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>PrintStream</name></type> <name>savedErr</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <function><type><specifier>private</specifier> <name>PrintStream</name></type> <name>createEmptyStream</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>new <call><name>PrintStream</name><argument_list>(
            <argument><expr>new <class><super><name>OutputStream</name></super><argument_list>()</argument_list> <block>{
                <function><type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<param><decl><type><name>int</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>PrintStream</name></type> <name>createTeePrint</name><parameter_list>(<param><decl><type><name>PrintStream</name></type> <name>ps1</name></decl></param>, <param><decl><type><name>PrintStream</name></type> <name>ps2</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>new <call><name>PrintStream</name><argument_list>(<argument><expr>new <call><name>TeeOutputStream</name><argument_list>(<argument><expr><name>ps1</name></expr></argument>, <argument><expr><name>ps2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>setupIOStreams</name><parameter_list>(<param><decl><type><name>ByteArrayOutputStream</name></type> <name>o</name></decl></param>,
                                <param><decl><type><name>ByteArrayOutputStream</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>systemOut</name> = new <call><name>PrintStream</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>systemError</name> = new <call><name>PrintStream</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>forked</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr>!<name>outputToFormatters</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr>!<name>showOutput</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>savedOut</name> = <name><name>System</name>.<name>out</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>savedErr</name> = <name><name>System</name>.<name>err</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>System</name>.<name>setOut</name></name><argument_list>(<argument><expr><call><name>createEmptyStream</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>System</name>.<name>setErr</name></name><argument_list>(<argument><expr><call><name>createEmptyStream</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>savedOut</name> = <name><name>System</name>.<name>out</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>savedErr</name> = <name><name>System</name>.<name>err</name></name></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>showOutput</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>System</name>.<name>setOut</name></name><argument_list>(<argument><expr><name>systemOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>System</name>.<name>setErr</name></name><argument_list>(<argument><expr><name>systemError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name><name>System</name>.<name>setOut</name></name><argument_list>(<argument><expr><call><name>createTeePrint</name><argument_list>(<argument><expr><name>savedOut</name></expr></argument>, <argument><expr><name>systemOut</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>System</name>.<name>setErr</name></name><argument_list>(<argument><expr><call><name>createTeePrint</name><argument_list>(<argument><expr><name>savedErr</name></expr></argument>, <argument><expr><name>systemError</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr><name>perm</name> = <name>null</name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then> <else>else <block>{
            <if>if <condition>(<expr><name>perm</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>perm</name>.<name>setSecurityManager</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Run the test.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>res</name> = new <call><name>IgnoredTestResult</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>res</name>.<name>addListener</name></name><argument_list>(<argument><expr><call><name>wrapListener</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>size</name> =<init> <expr><call><name><name>formatters</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>size</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>res</name>.<name>addListener</name></name><argument_list>(<argument><expr><call><name>wrapListener</name><argument_list>(<argument><expr>(<name>TestListener</name>) <call><name><name>formatters</name>.<name>elementAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>errStrm</name> =<init> <expr>new <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>outStrm</name> =<init> <expr>new <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>setupIOStreams</name><argument_list>(<argument><expr><name>outStrm</name></expr></argument>, <argument><expr><name>errStrm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Test</name></type> <name>suite</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Throwable</name></type> <name>exception</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>startTestSuiteSuccess</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

        <try>try <block>{

            <try>try <block>{
                <decl_stmt><decl><type><name>Class</name></type> <name>testClass</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>loader</name> == <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>testClass</name> = <call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr><call><name><name>junitTest</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><name>testClass</name> = <call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr><call><name><name>junitTest</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>true</expr></argument>,
                                              <argument><expr><name>loader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>

                <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>testMethodsSpecified</name> =<init> <expr>(<name>methods</name> != <name>null</name>)</expr></init></decl>;</decl_stmt>

                <comment type="line">// check for a static suite method first, even when using</comment>
                <comment type="line">// JUnit 4</comment>
                <decl_stmt><decl><type><name>Method</name></type> <name>suiteMethod</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr>!<name>testMethodsSpecified</name></expr>)</condition><then> <block>{
                <try>try <block>{
                    <comment type="line">// check if there is a suite method</comment>
                    <expr_stmt><expr><name>suiteMethod</name> = <call><name><name>testClass</name>.<name>getMethod</name></name><argument_list>(<argument><expr>"suite"</expr></argument>, <argument><expr>new <name><name>Class</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>NoSuchMethodException</name></type> <name>e</name></decl></param>) <block>{
                    <comment type="line">// no appropriate suite method found. We don't report any</comment>
                    <comment type="line">// error here since it might be perfectly normal.</comment>
                }</block></catch></try>
                }</block></then></if>

                <if>if <condition>(<expr><name>suiteMethod</name> != <name>null</name></expr>)</condition><then> <block>{
                    <comment type="line">// if there is a suite method available, then try</comment>
                    <comment type="line">// to extract the suite from it. If there is an error</comment>
                    <comment type="line">// here it will be caught below and reported.</comment>
                    <expr_stmt><expr><name>suite</name> = (<name>Test</name>) <call><name><name>suiteMethod</name>.<name>invoke</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr>new <name><name>Object</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                }</block></then> <else>else <block>{
                    <decl_stmt><decl><type><name>Class</name></type> <name>junit4TestAdapterClass</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>Class</name></type> <name>junit4TestAdapterCacheClass</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>boolean</name></type> <name>useSingleMethodAdapter</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

                    <if>if <condition>(<expr><name><name>junit</name>.<name>framework</name>.<name>TestCase</name>.<name><name/></name></name>class.<call><name>isAssignableFrom</name><argument_list>(<argument><expr><name>testClass</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <comment type="line">// Do not use JUnit 4 API for running JUnit 3.x</comment>
                        <comment type="line">// tests - it is not able to run individual test</comment>
                        <comment type="line">// methods.</comment>
                        <comment type="line">//</comment>
                        <comment type="line">// Technical details:</comment>
                        <comment type="line">// org.junit.runner.Request.method(Class, String).getRunner()</comment>
                        <comment type="line">// would return a runner which always executes all</comment>
                        <comment type="line">// test methods. The reason is that the Runner would be</comment>
                        <comment type="line">// an instance of class</comment>
                        <comment type="line">// org.junit.internal.runners.OldTestClassRunner</comment>
                        <comment type="line">// that does not implement interface Filterable - so it</comment>
                        <comment type="line">// is unable to filter out test methods not matching</comment>
                        <comment type="line">// the requested name.</comment>
                    }</block></then> <else>else <block>{
                    <comment type="line">// Check for JDK 5 first. Will *not* help on JDK 1.4</comment>
                    <comment type="line">// if only junit-4.0.jar in CP because in that case</comment>
                    <comment type="line">// linkage of whole task will already have failed! But</comment>
                    <comment type="line">// will help if CP has junit-3.8.2.jar:junit-4.0.jar.</comment>

                    <comment type="line">// In that case first C.fN will fail with CNFE and we</comment>
                    <comment type="line">// will avoid UnsupportedClassVersionError.</comment>

                    <try>try <block>{
                        <expr_stmt><expr><call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr>"java.lang.annotation.Annotation"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>junit4TestAdapterCacheClass</name> = <call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr>"org.apache.tools.ant.taskdefs.optional.junit.CustomJUnit4TestAdapterCache"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>loader</name> == <name>null</name></expr>)</condition><then> <block>{
                            <expr_stmt><expr><name>junit4TestAdapterClass</name> =
                                <call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr><name>JUNIT_4_TEST_ADAPTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <if>if <condition>(<expr><name>testMethodsSpecified</name></expr>)</condition><then> <block>{
                                <comment type="block">/*
                                 * We cannot try to load the JUnit4TestAdapter
                                 * before trying to load JUnit4TestMethodAdapter
                                 * because it might fail with
                                 * NoClassDefFoundException, instead of plain
                                 * ClassNotFoundException.
                                 */</comment>
                                <expr_stmt><expr><name>junit4TestAdapterClass</name> = <call><name><name>Class</name>.<name>forName</name></name><argument_list>(
                                    <argument><expr>"org.apache.tools.ant.taskdefs.optional.junit.JUnit4TestMethodAdapter"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><name>useSingleMethodAdapter</name> = true</expr>;</expr_stmt>
                            }</block></then></if>
                        }</block></then> <else>else <block>{
                            <expr_stmt><expr><name>junit4TestAdapterClass</name> =
                                <call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr><name>JUNIT_4_TEST_ADAPTER</name></expr></argument>,
                                              <argument><expr>true</expr></argument>, <argument><expr><name>loader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <if>if <condition>(<expr><name>testMethodsSpecified</name></expr>)</condition><then> <block>{
                                <expr_stmt><expr><name>junit4TestAdapterClass</name> =
                                    <call><name><name>Class</name>.<name>forName</name></name><argument_list>(
                                        <argument><expr>"org.apache.tools.ant.taskdefs.optional.junit.JUnit4TestMethodAdapter"</expr></argument>,
                                        <argument><expr>true</expr></argument>, <argument><expr><name>loader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><name>useSingleMethodAdapter</name> = true</expr>;</expr_stmt>
                            }</block></then></if>
                        }</block></else></if>
                    }</block> <catch>catch (<param><decl><type><name>ClassNotFoundException</name></type> <name>e</name></decl></param>) <block>{
                        <comment type="line">// OK, fall back to JUnit 3.</comment>
                    }</block></catch></try>
                    }</block></else></if>
                    <expr_stmt><expr><name>junit4</name> = <name>junit4TestAdapterClass</name> != <name>null</name></expr>;</expr_stmt>

                    <if>if <condition>(<expr><call><name><name>junitTest</name>.<name>isSkipNonTests</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                       <if>if <condition>(<expr>!<call><name>containsTests</name><argument_list>( <argument><expr><name>testClass</name></expr></argument>, <argument><expr><name>junit4</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                           <return>return;</return>
                       }</block></then></if>
                    }</block></then></if>


                    <if>if <condition>(<expr><name>junit4</name></expr>)</condition><then> <block>{
                        <comment type="line">// Let's use it!</comment>
                        <decl_stmt><decl><type><name>Class</name><index>[]</index></type> <name>formalParams</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Object</name><index>[]</index></type> <name>actualParams</name></decl>;</decl_stmt>
                        <if>if <condition>(<expr><name>useSingleMethodAdapter</name></expr>)</condition><then> <block>{
                            <expr_stmt><expr><name>formalParams</name> = new <name><name>Class</name><index>[]</index></name> <block>{<expr><name><name>Class</name>.<name><name/></name></name>class</expr>, <expr><name><name>String</name><index>[]</index></name>.class</expr>}</block></expr>;</expr_stmt>
                            <expr_stmt><expr><name>actualParams</name> = new <name><name>Object</name><index>[]</index></name> <block>{<expr><name>testClass</name></expr>, <expr><name>methods</name></expr>}</block></expr>;</expr_stmt>
                        }</block></then> <else>else <block>{
                            <expr_stmt><expr><name>formalParams</name> = new <name><name>Class</name><index>[]</index></name> <block>{<expr><name><name>Class</name>.<name><name/></name></name>class</expr>, <expr><call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr>"junit.framework.JUnit4TestAdapterCache"</expr></argument>)</argument_list></call></expr>}</block></expr>;</expr_stmt>
                            <expr_stmt><expr><name>actualParams</name> = new <name><name>Object</name><index>[]</index></name> <block>{<expr><name>testClass</name></expr>, <expr><call><name><name>junit4TestAdapterCacheClass</name>.<name>getMethod</name></name><argument_list>(<argument><expr>"getInstance"</expr></argument>)</argument_list></call>.<call><name>invoke</name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>}</block></expr>;</expr_stmt>
                        }</block></else></if>
                        <expr_stmt><expr><name>suite</name> =
                            (<name>Test</name>) <call><name><name>junit4TestAdapterClass</name>
                            .<name>getConstructor</name></name><argument_list>(<argument><expr><name>formalParams</name></expr></argument>)</argument_list></call>.
                            <call><name>newInstance</name><argument_list>(<argument><expr><name>actualParams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <comment type="line">// Use JUnit 3.</comment>

                        <comment type="line">// try to extract a test suite automatically this</comment>
                        <comment type="line">// will generate warnings if the class is no</comment>
                        <comment type="line">// suitable Test</comment>
                        <if>if <condition>(<expr>!<name>testMethodsSpecified</name></expr>)</condition><then> <block>{
                            <expr_stmt><expr><name>suite</name> = new <call><name>TestSuite</name><argument_list>(<argument><expr><name>testClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then> <else>else <if>if <condition>(<expr><name><name>methods</name>.<name>length</name></name> == 1</expr>)</condition><then> <block>{
                            <expr_stmt><expr><name>suite</name> = <call><name><name>TestSuite</name>.<name>createTest</name></name><argument_list>(<argument><expr><name>testClass</name></expr></argument>, <argument><expr><name><name>methods</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then> <else>else <block>{
                            <decl_stmt><decl><type><name>TestSuite</name></type> <name>testSuite</name> =<init> <expr>new <call><name>TestSuite</name><argument_list>(<argument><expr><call><name><name>testClass</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>methods</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                                <expr_stmt><expr><call><name><name>testSuite</name>.<name>addTest</name></name><argument_list>(
                                    <argument><expr><call><name><name>TestSuite</name>.<name>createTest</name></name><argument_list>(<argument><expr><name>testClass</name></expr></argument>, <argument><expr><name><name>methods</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></for>
                            <expr_stmt><expr><name>suite</name> = <name>testSuite</name></expr>;</expr_stmt>
                        }</block></else></if></else></if>
                    }</block></else></if>

                }</block></else></if>

            }</block> <catch>catch (<param><decl><type><name>Throwable</name></type> <name>e</name></decl></param>) <block>{
                <expr_stmt><expr><name>retCode</name> = <name>ERRORS</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>exception</name> = <name>e</name></expr>;</expr_stmt>
            }</block></catch></try>

            <decl_stmt><decl><type><name>long</name></type> <name>start</name> =<init> <expr><call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>fireStartTestSuite</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>startTestSuiteSuccess</name> = true</expr>;</expr_stmt>
            <if>if <condition>(<expr><name>exception</name> != <name>null</name></expr>)</condition><then> <block>{ <comment type="line">// had an exception constructing suite</comment>
                <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>formatterSize</name> =<init> <expr><call><name><name>formatters</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>formatterSize</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                    <expr_stmt><expr>((<name>TestListener</name>) <call><name><name>formatters</name>.<name>elementAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>)
                        .<call><name>addError</name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr><name>exception</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
                <expr_stmt><expr><call><name><name>junitTest</name>.<name>setCounts</name></name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>junitTest</name>.<name>setRunTime</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <try>try <block>{
                    <expr_stmt><expr><call><name>logTestListenerEvent</name><argument_list>(<argument><expr>"tests to run: " + <call><name><name>suite</name>.<name>countTestCases</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>suite</name>.<name>run</name></name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <finally>finally <block>{
                    <if>if <condition>(<expr><name>junit4</name> ||
                        <call><name><name>suite</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><name>JUNIT_4_TEST_ADAPTER</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name><index>[]</index></type> <name>cnts</name> =<init> <expr><call><name>findJUnit4FailureErrorCount</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>junitTest</name>.<name>setCounts</name></name><argument_list>(<argument><expr><call><name><name>res</name>.<name>runCount</name></name><argument_list>()</argument_list></call> + <call><name><name>res</name>.<name>ignoredCount</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>cnts</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name><name>cnts</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><call><name><name>res</name>.<name>ignoredCount</name></name><argument_list>()</argument_list></call> + <call><name><name>res</name>.<name>skippedCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name><name>junitTest</name>.<name>setCounts</name></name><argument_list>(<argument><expr><call><name><name>res</name>.<name>runCount</name></name><argument_list>()</argument_list></call> + <call><name><name>res</name>.<name>ignoredCount</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>res</name>.<name>failureCount</name></name><argument_list>()</argument_list></call></expr></argument>,
                                <argument><expr><call><name><name>res</name>.<name>errorCount</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>res</name>.<name>ignoredCount</name></name><argument_list>()</argument_list></call> + <call><name><name>res</name>.<name>skippedCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                    <expr_stmt><expr><call><name><name>junitTest</name>.<name>setRunTime</name></name><argument_list>(<argument><expr><call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call> - <name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></finally></try>
            }</block></else></if>
        }</block> <finally>finally <block>{
            <if>if <condition>(<expr><name>perm</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>perm</name>.<name>restoreSecurityManager</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name>savedOut</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>System</name>.<name>setOut</name></name><argument_list>(<argument><expr><name>savedOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name>savedErr</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>System</name>.<name>setErr</name></name><argument_list>(<argument><expr><name>savedErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><call><name><name>systemError</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>systemError</name> = <name>null</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>systemOut</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>systemOut</name> = <name>null</name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>startTestSuiteSuccess</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>sendOutAndErr</name><argument_list>(<argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>outStrm</name>.<name>toByteArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                              <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>errStrm</name>.<name>toByteArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></finally></try>
        <expr_stmt><expr><call><name>fireEndTestSuite</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// junitTest has the correct counts for JUnit4, while res doesn't</comment>
        <if>if <condition>(<expr><name>retCode</name> != <name>SUCCESS</name> || <call><name><name>junitTest</name>.<name>errorCount</name></name><argument_list>()</argument_list></call> != 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>retCode</name> = <name>ERRORS</name></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>junitTest</name>.<name>failureCount</name></name><argument_list>()</argument_list></call> != 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>retCode</name> = <name>FAILURES</name></expr>;</expr_stmt>
        }</block></then></if></else></if>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>containsTests</name><parameter_list>(<param><decl><type><name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>testClass</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>isJUnit4</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Class</name></type> <name>testAnnotation</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Class</name></type> <name>suiteAnnotation</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Class</name></type> <name>runWithAnnotation</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

        <try>try <block>{
            <expr_stmt><expr><name>testAnnotation</name> = <call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr>"org.junit.Test"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>ClassNotFoundException</name></type> <name>e</name></decl></param>) <block>{
            <if>if <condition>(<expr><name>isJUnit4</name></expr>)</condition><then> <block>{
                <comment type="line">// odd - we think we're JUnit4 but don't support the test annotation. We therefore can't have any tests!</comment>
                <return>return <expr>false</expr>;</return>
            }</block></then></if>
            <comment type="line">// else... we're a JUnit3 test and don't need the annotation</comment>
        }</block></catch></try>

        <try>try <block>{
            <expr_stmt><expr><name>suiteAnnotation</name> = <call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr>"org.junit.Suite.SuiteClasses"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch(<param><decl><type><name>ClassNotFoundException</name></type> <name>ex</name></decl></param>) <block>{
            <comment type="line">// ignore - we don't have this annotation so make sure we don't check for it</comment>
        }</block></catch></try>
        <try>try <block>{
            <expr_stmt><expr><name>runWithAnnotation</name> = <call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr>"org.junit.runner.RunWith"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch(<param><decl><type><name>ClassNotFoundException</name></type> <name>ex</name></decl></param>) <block>{
            <comment type="line">// also ignore as this annotation doesn't exist so tests can't use it</comment>
        }</block></catch></try>


        <if>if <condition>(<expr>!<name>isJUnit4</name> &amp;&amp; !<name><name>TestCase</name>.<name><name/></name></name>class.<call><name>isAssignableFrom</name><argument_list>(<argument><expr><name>testClass</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">//a test we think is JUnit3 but does not extend TestCase. Can't really be a test.</comment>
            <return>return <expr>false</expr>;</return>
        }</block></then></if>

        <comment type="line">// check if we have any inner classes that contain suitable test methods</comment>
        <for>for (<init><decl><type><name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>innerClass</name> :<range> <expr><call><name><name>testClass</name>.<name>getDeclaredClasses</name></name><argument_list>()</argument_list></call></expr></range></decl></init>) <block>{
            <if>if <condition>(<expr><call><name>containsTests</name><argument_list>(<argument><expr><name>innerClass</name></expr></argument>, <argument><expr><name>isJUnit4</name></expr></argument>)</argument_list></call> || <call><name>containsTests</name><argument_list>(<argument><expr><name>innerClass</name></expr></argument>, <argument><expr>!<name>isJUnit4</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>true</expr>;</return>
            }</block></then></if>
        }</block></for>

        <if>if <condition>(<expr><call><name><name>Modifier</name>.<name>isAbstract</name></name><argument_list>(<argument><expr><call><name><name>testClass</name>.<name>getModifiers</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> || <call><name><name>Modifier</name>.<name>isInterface</name></name><argument_list>(<argument><expr><call><name><name>testClass</name>.<name>getModifiers</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">// can't instantiate class and no inner classes are tests either</comment>
            <return>return <expr>false</expr>;</return>
        }</block></then></if>

        <if>if <condition>(<expr><name>isJUnit4</name></expr>)</condition><then> <block>{
             <if>if <condition>(<expr><name>suiteAnnotation</name> != <name>null</name> &amp;&amp; <call><name><name>testClass</name>.<name>getAnnotation</name></name><argument_list>(<argument><expr><name>suiteAnnotation</name></expr></argument>)</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                <comment type="line">// class is marked as a suite. Let JUnit try and work its magic on it.</comment>
                <return>return <expr>true</expr>;</return>
             }</block></then></if>
            <if>if <condition>(<expr><name>runWithAnnotation</name> != <name>null</name> &amp;&amp; <call><name><name>testClass</name>.<name>getAnnotation</name></name><argument_list>(<argument><expr><name>runWithAnnotation</name></expr></argument>)</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                <comment type="block">/* Class is marked with @RunWith. If this class is badly written (no test methods, multiple
                 * constructors, private constructor etc) then the class is automatically run and fails in the
                 * IDEs I've tried... so I'm happy handing the class to JUnit to try and run, and let JUnit
                 * report a failure if a bad test case is provided. Trying to do anything else is likely to
                 * result in us filtering out cases that could be valid for future versions of JUnit so would
                 * just increase future maintenance work.
                 */</comment>
                <return>return <expr>true</expr>;</return>
            }</block></then></if>
        }</block></then></if>

        <for>for (<init><decl><type><name>Method</name></type> <name>m</name> :<range> <expr><call><name><name>testClass</name>.<name>getMethods</name></name><argument_list>()</argument_list></call></expr></range></decl></init>) <block>{
            <if>if <condition>(<expr><name>isJUnit4</name></expr>)</condition><then> <block>{
                <comment type="line">// check if suspected JUnit4 classes have methods with @Test annotation</comment>
                <if>if <condition>(<expr><call><name><name>m</name>.<name>getAnnotation</name></name><argument_list>(<argument><expr><name>testAnnotation</name></expr></argument>)</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                    <return>return <expr>true</expr>;</return>
                }</block></then></if>
            }</block></then> <else>else <block>{
                <comment type="line">// check if JUnit3 class have public or protected no-args methods starting with names starting with test</comment>
                <if>if <condition>(<expr><call><name><name>m</name>.<name>getName</name></name><argument_list>()</argument_list></call>.<call><name>startsWith</name><argument_list>(<argument><expr>"test"</expr></argument>)</argument_list></call> &amp;&amp; <call><name><name>m</name>.<name>getParameterTypes</name></name><argument_list>()</argument_list></call>.<name>length</name> == 0
                        &amp;&amp; (<call><name><name>Modifier</name>.<name>isProtected</name></name><argument_list>(<argument><expr><call><name><name>m</name>.<name>getModifiers</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> || <call><name><name>Modifier</name>.<name>isPublic</name></name><argument_list>(<argument><expr><call><name><name>m</name>.<name>getModifiers</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
                    <return>return <expr>true</expr>;</return>
                }</block></then></if>
            }</block></else></if>
            <comment type="line">// check if JUnit3 or JUnit4 test have a public or protected, static,</comment>
            <comment type="line">// no-args 'suite' method</comment>
            <if>if <condition>(<expr><call><name><name>m</name>.<name>getName</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr>"suite"</expr></argument>)</argument_list></call> &amp;&amp; <call><name><name>m</name>.<name>getParameterTypes</name></name><argument_list>()</argument_list></call>.<name>length</name> == 0
                    &amp;&amp; (<call><name><name>Modifier</name>.<name>isProtected</name></name><argument_list>(<argument><expr><call><name><name>m</name>.<name>getModifiers</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> || <call><name><name>Modifier</name>.<name>isPublic</name></name><argument_list>(<argument><expr><call><name><name>m</name>.<name>getModifiers</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>)
                    &amp;&amp; <call><name><name>Modifier</name>.<name>isStatic</name></name><argument_list>(<argument><expr><call><name><name>m</name>.<name>getModifiers</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>true</expr>;</return>
            }</block></then></if>
        }</block></for>

        <comment type="line">// no test methods found</comment>
        <return>return <expr>false</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns what System.exit() would return in the standalone version.
     *
     * @return 2 if errors occurred, 1 if tests failed else 0.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getRetCode</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>retCode</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Interface TestListener.
     *
     * &lt;p&gt;A new Test is started.
     * @param t the test.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>startTest</name><parameter_list>(<param><decl><type><name>Test</name></type> <name>t</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>testName</name> =<init> <expr><call><name><name>JUnitVersionHelper</name>.<name>getTestCaseName</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>logTestListenerEvent</name><argument_list>(<argument><expr>"startTest(" + <name>testName</name> + ")"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Interface TestListener.
     *
     * &lt;p&gt;A Test is finished.
     * @param test the test.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>endTest</name><parameter_list>(<param><decl><type><name>Test</name></type> <name>test</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>testName</name> =<init> <expr><call><name><name>JUnitVersionHelper</name>.<name>getTestCaseName</name></name><argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>logTestListenerEvent</name><argument_list>(<argument><expr>"endTest(" + <name>testName</name> + ")"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>logTestListenerEvent</name><parameter_list>(<param><decl><type><name>String</name></type> <name>msg</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>logTestListenerEvents</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>PrintStream</name></type> <name>out</name> =<init> <expr><name>savedOut</name> != <name>null</name> ? <name>savedOut</name> : <name><name>System</name>.<name>out</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>out</name>.<name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>msg</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>msg</name> = "null"</expr>;</expr_stmt>
            }</block></then></if>
            <decl_stmt><decl><type><name>StringTokenizer</name></type> <name>msgLines</name> =<init> <expr>new <call><name>StringTokenizer</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr>"\r\n"</expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>msgLines</name>.<name>hasMoreTokens</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <expr_stmt><expr><call><name><name>out</name>.<name>println</name></name><argument_list>(<argument><expr><name><name>JUnitTask</name>.<name>TESTLISTENER_PREFIX</name></name>
                            + <call><name><name>msgLines</name>.<name>nextToken</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
            <expr_stmt><expr><call><name><name>out</name>.<name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Interface TestListener for JUnit &amp;lt;= 3.4.
     *
     * &lt;p&gt;A Test failed.
     * @param test the test.
     * @param t    the exception thrown by the test.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addFailure</name><parameter_list>(<param><decl><type><name>Test</name></type> <name>test</name></decl></param>, <param><decl><type><name>Throwable</name></type> <name>t</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>testName</name> =<init> <expr><call><name><name>JUnitVersionHelper</name>.<name>getTestCaseName</name></name><argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>logTestListenerEvent</name><argument_list>(<argument><expr>"addFailure(" + <name>testName</name> + ", " + <call><name><name>t</name>.<name>getMessage</name></name><argument_list>()</argument_list></call> + ")"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>haltOnFailure</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>res</name>.<name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Interface TestListener for JUnit &amp;gt; 3.4.
     *
     * &lt;p&gt;A Test failed.
     * @param test the test.
     * @param t    the assertion thrown by the test.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addFailure</name><parameter_list>(<param><decl><type><name>Test</name></type> <name>test</name></decl></param>, <param><decl><type><name>AssertionFailedError</name></type> <name>t</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>addFailure</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr>(<name>Throwable</name>) <name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Interface TestListener.
     *
     * &lt;p&gt;An error occurred while running the test.
     * @param test the test.
     * @param t    the error thrown by the test.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addError</name><parameter_list>(<param><decl><type><name>Test</name></type> <name>test</name></decl></param>, <param><decl><type><name>Throwable</name></type> <name>t</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>testName</name> =<init> <expr><call><name><name>JUnitVersionHelper</name>.<name>getTestCaseName</name></name><argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>logTestListenerEvent</name><argument_list>(<argument><expr>"addError(" + <name>testName</name> + ", " + <call><name><name>t</name>.<name>getMessage</name></name><argument_list>()</argument_list></call> + ")"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>haltOnError</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>res</name>.<name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Permissions for the test run.
     * @since Ant 1.6
     * @param permissions the permissions to use.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPermissions</name><parameter_list>(<param><decl><type><name>Permissions</name></type> <name>permissions</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>perm</name> = <name>permissions</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Handle a string destined for standard output.
     * @param output the string to output
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>handleOutput</name><parameter_list>(<param><decl><type><name>String</name></type> <name>output</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr>!<name>logTestListenerEvents</name> &amp;&amp; <call><name><name>output</name>.<name>startsWith</name></name><argument_list>(<argument><expr><name><name>JUnitTask</name>.<name>TESTLISTENER_PREFIX</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">// ignore</comment>
        }</block></then> <else>else <if>if <condition>(<expr><name>systemOut</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>systemOut</name>.<name>print</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Handle input.
     * @param buffer not used.
     * @param offset not used.
     * @param length not used.
     * @return -1 always.
     * @throws IOException never.
     * @see org.apache.tools.ant.Task#handleInput(byte[], int, int)
     *
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>handleInput</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buffer</name></decl></param>, <param><decl><type><name>int</name></type> <name>offset</name></decl></param>, <param><decl><type><name>int</name></type> <name>length</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <return>return <expr>-1</expr>;</return>
    }</block></function>

    <comment type="javadoc">/** {@inheritDoc}. */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>handleErrorOutput</name><parameter_list>(<param><decl><type><name>String</name></type> <name>output</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>systemError</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>systemError</name>.<name>print</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/** {@inheritDoc}. */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>handleFlush</name><parameter_list>(<param><decl><type><name>String</name></type> <name>output</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>systemOut</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>systemOut</name>.<name>print</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/** {@inheritDoc}. */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>handleErrorFlush</name><parameter_list>(<param><decl><type><name>String</name></type> <name>output</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>systemError</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>systemError</name>.<name>print</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>sendOutAndErr</name><parameter_list>(<param><decl><type><name>String</name></type> <name>out</name></decl></param>, <param><decl><type><name>String</name></type> <name>err</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>size</name> =<init> <expr><call><name><name>formatters</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>size</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>JUnitResultFormatter</name></type> <name>formatter</name> =<init>
                <expr>((<name>JUnitResultFormatter</name>) <call><name><name>formatters</name>.<name>elementAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>)</expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>formatter</name>.<name>setSystemOutput</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>formatter</name>.<name>setSystemError</name></name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>fireStartTestSuite</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>size</name> =<init> <expr><call><name><name>formatters</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>size</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr>((<name>JUnitResultFormatter</name>) <call><name><name>formatters</name>.<name>elementAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>)
                .<call><name>startTestSuite</name><argument_list>(<argument><expr><name>junitTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>fireEndTestSuite</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>size</name> =<init> <expr><call><name><name>formatters</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>size</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr>((<name>JUnitResultFormatter</name>) <call><name><name>formatters</name>.<name>elementAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>)
                .<call><name>endTestSuite</name><argument_list>(<argument><expr><name>junitTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Add a formatter.
     * @param f the formatter to add.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addFormatter</name><parameter_list>(<param><decl><type><name>JUnitResultFormatter</name></type> <name>f</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>formatters</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/** {@inheritDoc}. */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addFormatter</name><parameter_list>(<param><decl><type><name><name>JUnitTaskMirror</name>.<name>JUnitResultFormatterMirror</name></name></type> <name>f</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>formatters</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Entry point for standalone (forked) mode.
     *
     * Parameters: testcaseclassname plus parameters in the format
     * key=value, none of which is required.
     *
     * &lt;table cols="4" border="1"&gt;
     * &lt;tr&gt;&lt;th&gt;key&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;th&gt;default value&lt;/th&gt;&lt;/tr&gt;
     *
     * &lt;tr&gt;&lt;td&gt;haltOnError&lt;/td&gt;&lt;td&gt;halt test on
     * errors?&lt;/td&gt;&lt;td&gt;false&lt;/td&gt;&lt;/tr&gt;
     *
     * &lt;tr&gt;&lt;td&gt;haltOnFailure&lt;/td&gt;&lt;td&gt;halt test on
     * failures?&lt;/td&gt;&lt;td&gt;false&lt;/td&gt;&lt;/tr&gt;
     *
     * &lt;tr&gt;&lt;td&gt;formatter&lt;/td&gt;&lt;td&gt;A JUnitResultFormatter given as
     * classname,filename. If filename is omitted, System.out is
     * assumed.&lt;/td&gt;&lt;td&gt;none&lt;/td&gt;&lt;/tr&gt;
     *
     * &lt;tr&gt;&lt;td&gt;showoutput&lt;/td&gt;&lt;td&gt;send output to System.err/.out as
     * well as to the formatters?&lt;/td&gt;&lt;td&gt;false&lt;/td&gt;&lt;/tr&gt;
     *
     * &lt;tr&gt;&lt;td&gt;logtestlistenerevents&lt;/td&gt;&lt;td&gt;log TestListener events to
     * System.out.&lt;/td&gt;&lt;td&gt;false&lt;/td&gt;&lt;/tr&gt;
     *
     * &lt;tr&gt;&lt;td&gt;methods&lt;/td&gt;&lt;td&gt;Comma-separated list of names of individual
     * test methods to execute.
     * &lt;/td&gt;&lt;td&gt;null&lt;/td&gt;&lt;/tr&gt;
     *
     * &lt;/table&gt;
     * @param args the command line arguments.
     * @throws IOException on error.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>methods</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>haltError</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>haltFail</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>stackfilter</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Properties</name></type> <name>props</name> =<init> <expr>new <call><name>Properties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>showOut</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>outputToFormat</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>logFailedTests</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>logTestListenerEvents</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>skipNonTests</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>


        <if>if <condition>(<expr><name><name>args</name>.<name>length</name></name> == 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"required argument TestClassName missing"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>exit</name></name><argument_list>(<argument><expr><name>ERRORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name><name>args</name><index>[<expr>0</expr>]</index></name>.<call><name>startsWith</name><argument_list>(<argument><expr><name><name>Constants</name>.<name>TESTSFILE</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>multipleTests</name> = true</expr>;</expr_stmt>
            <expr_stmt><expr><name><name>args</name><index>[<expr>0</expr>]</index></name> = <name><name>args</name><index>[<expr>0</expr>]</index></name>.<call><name>substring</name><argument_list>(<argument><expr><call><name><name>Constants</name>.<name>TESTSFILE</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>1</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>args</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <if>if <condition>(<expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>startsWith</name><argument_list>(<argument><expr><name><name>Constants</name>.<name>METHOD_NAMES</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <try>try <block>{
                    <decl_stmt><decl><type><name>String</name></type> <name>methodsList</name> =<init> <expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>substring</name><argument_list>(<argument><expr><call><name><name>Constants</name>.<name>METHOD_NAMES</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>methods</name> = <call><name><name>JUnitTest</name>.<name>parseTestMethodNamesList</name></name><argument_list>(<argument><expr><name>methodsList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>IllegalArgumentException</name></type> <name>ex</name></decl></param>) <block>{
                    <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"Invalid specification of test method names: " + <name><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>System</name>.<name>exit</name></name><argument_list>(<argument><expr><name>ERRORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>
            }</block></then> <else>else <if>if <condition>(<expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>startsWith</name><argument_list>(<argument><expr><name><name>Constants</name>.<name>HALT_ON_ERROR</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>haltError</name> = <call><name><name>Project</name>.<name>toBoolean</name></name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>substring</name><argument_list>(<argument><expr><call><name><name>Constants</name>.<name>HALT_ON_ERROR</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>startsWith</name><argument_list>(<argument><expr><name><name>Constants</name>.<name>HALT_ON_FAILURE</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>haltFail</name> = <call><name><name>Project</name>.<name>toBoolean</name></name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>substring</name><argument_list>(<argument><expr><call><name><name>Constants</name>.<name>HALT_ON_FAILURE</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>startsWith</name><argument_list>(<argument><expr><name><name>Constants</name>.<name>FILTERTRACE</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>stackfilter</name> = <call><name><name>Project</name>.<name>toBoolean</name></name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>substring</name><argument_list>(<argument><expr><call><name><name>Constants</name>.<name>FILTERTRACE</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>startsWith</name><argument_list>(<argument><expr><name><name>Constants</name>.<name>CRASHFILE</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>crashFile</name> = <name><name>args</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>substring</name><argument_list>(<argument><expr><call><name><name>Constants</name>.<name>CRASHFILE</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>registerTestCase</name><argument_list>(<argument><expr><name><name>Constants</name>.<name>BEFORE_FIRST_TEST</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>startsWith</name><argument_list>(<argument><expr><name><name>Constants</name>.<name>FORMATTER</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <try>try <block>{
                    <expr_stmt><expr><call><name>createAndStoreFormatter</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>substring</name><argument_list>(<argument><expr><call><name><name>Constants</name>.<name>FORMATTER</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
                    <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>be</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>System</name>.<name>exit</name></name><argument_list>(<argument><expr><name>ERRORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>
            }</block></then> <else>else <if>if <condition>(<expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>startsWith</name><argument_list>(<argument><expr><name><name>Constants</name>.<name>PROPSFILE</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>FileInputStream</name></type> <name>in</name> =<init> <expr>new <call><name>FileInputStream</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name>
                                                         .<call><name>substring</name><argument_list>(<argument><expr><call><name><name>Constants</name>.<name>PROPSFILE</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>props</name>.<name>load</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>in</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>startsWith</name><argument_list>(<argument><expr><name><name>Constants</name>.<name>SHOWOUTPUT</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>showOut</name> = <call><name><name>Project</name>.<name>toBoolean</name></name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>substring</name><argument_list>(<argument><expr><call><name><name>Constants</name>.<name>SHOWOUTPUT</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>startsWith</name><argument_list>(<argument><expr><name><name>Constants</name>.<name>LOGTESTLISTENEREVENTS</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>logTestListenerEvents</name> = <call><name><name>Project</name>.<name>toBoolean</name></name><argument_list>(
                    <argument><expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>substring</name><argument_list>(<argument><expr><call><name><name>Constants</name>.<name>LOGTESTLISTENEREVENTS</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>startsWith</name><argument_list>(<argument><expr><name><name>Constants</name>.<name>OUTPUT_TO_FORMATTERS</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>outputToFormat</name> = <call><name><name>Project</name>.<name>toBoolean</name></name><argument_list>(
                    <argument><expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>substring</name><argument_list>(<argument><expr><call><name><name>Constants</name>.<name>OUTPUT_TO_FORMATTERS</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>startsWith</name><argument_list>(<argument><expr><name><name>Constants</name>.<name>LOG_FAILED_TESTS</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>logFailedTests</name> = <call><name><name>Project</name>.<name>toBoolean</name></name><argument_list>(
                    <argument><expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>substring</name><argument_list>(<argument><expr><call><name><name>Constants</name>.<name>LOG_FAILED_TESTS</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>startsWith</name><argument_list>(<argument><expr><name><name>Constants</name>.<name>SKIP_NON_TESTS</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>skipNonTests</name> = <call><name><name>Project</name>.<name>toBoolean</name></name><argument_list>(
                    <argument><expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>substring</name><argument_list>(<argument><expr><call><name><name>Constants</name>.<name>SKIP_NON_TESTS</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
        }</block></for>

        <comment type="line">// Add/overlay system properties on the properties from the Ant project</comment>
        <decl_stmt><decl><type><name>Hashtable</name></type> <name>p</name> =<init> <expr><call><name><name>System</name>.<name>getProperties</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>Enumeration</name></type> <name>e</name> =<init> <expr><call><name><name>p</name>.<name>keys</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
            <decl_stmt><decl><type><name>Object</name></type> <name>key</name> =<init> <expr><call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>props</name>.<name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name><name>p</name>.<name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <decl_stmt><decl><type><name>int</name></type> <name>returnCode</name> =<init> <expr><name>SUCCESS</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>multipleTests</name></expr>)</condition><then> <block>{
            <try>try <block>{
                <decl_stmt><decl><type><name><name>java</name>.<name>io</name>.<name>BufferedReader</name></name></type> <name>reader</name> =<init>
                    <expr>new <call><name><name>java</name>.<name>io</name>.<name>BufferedReader</name></name><argument_list>(<argument><expr>new <call><name><name>java</name>.<name>io</name>.<name>FileReader</name></name><argument_list>(<argument><expr><name><name>args</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>testCaseName</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>testMethodNames</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>code</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>boolean</name></type> <name>errorOccurred</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>boolean</name></type> <name>failureOccurred</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>line</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr>(<name>line</name> = <call><name><name>reader</name>.<name>readLine</name></name><argument_list>()</argument_list></call>) != <name>null</name></expr>)</condition> <block>{
                    <decl_stmt><decl><type><name>StringTokenizer</name></type> <name>st</name> =<init> <expr>new <call><name>StringTokenizer</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr>","</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>testListSpec</name> =<init> <expr><call><name><name>st</name>.<name>nextToken</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>colonIndex</name> =<init> <expr><call><name><name>testListSpec</name>.<name>indexOf</name></name><argument_list>(<argument><expr>':'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>colonIndex</name> == -1</expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>testCaseName</name> = <name>testListSpec</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>testMethodNames</name> = <name>null</name></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <expr_stmt><expr><name>testCaseName</name> = <call><name><name>testListSpec</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>colonIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>testMethodNames</name> = <call><name><name>JUnitTest</name>.<name>parseTestMethodNamesList</name></name><argument_list>(
                                                    <argument><expr><call><name><name>testListSpec</name>
                                                    .<name>substring</name></name><argument_list>(<argument><expr><name>colonIndex</name> + 1</expr></argument>)</argument_list></call>
                                                    .<call><name>replace</name><argument_list>(<argument><expr>'+'</expr></argument>, <argument><expr>','</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                    <decl_stmt><decl><type><name>JUnitTest</name></type> <name>t</name> =<init> <expr>new <call><name>JUnitTest</name><argument_list>(<argument><expr><name>testCaseName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>t</name>.<name>setTodir</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>st</name>.<name>nextToken</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>t</name>.<name>setOutfile</name></name><argument_list>(<argument><expr><call><name><name>st</name>.<name>nextToken</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>t</name>.<name>setProperties</name></name><argument_list>(<argument><expr><name>props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>t</name>.<name>setSkipNonTests</name></name><argument_list>(<argument><expr><name>skipNonTests</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>code</name> = <call><name>launch</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>testMethodNames</name></expr></argument>, <argument><expr><name>haltError</name></expr></argument>, <argument><expr><name>stackfilter</name></expr></argument>, <argument><expr><name>haltFail</name></expr></argument>,
                                  <argument><expr><name>showOut</name></expr></argument>, <argument><expr><name>outputToFormat</name></expr></argument>,
                                  <argument><expr><name>logTestListenerEvents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>errorOccurred</name> = (<name>code</name> == <name>ERRORS</name>)</expr>;</expr_stmt>
                    <expr_stmt><expr><name>failureOccurred</name> = (<name>code</name> != <name>SUCCESS</name>)</expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>errorOccurred</name> || <name>failureOccurred</name></expr>)</condition><then> <block>{
                        <if>if <condition>(<expr>(<name>errorOccurred</name> &amp;&amp; <name>haltError</name>)
                            || (<name>failureOccurred</name> &amp;&amp; <name>haltFail</name>)</expr>)</condition><then> <block>{
                            <expr_stmt><expr><call><name>registerNonCrash</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>System</name>.<name>exit</name></name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then> <else>else <block>{
                            <if>if <condition>(<expr><name>code</name> &gt; <name>returnCode</name></expr>)</condition><then> <block>{
                                <expr_stmt><expr><name>returnCode</name> = <name>code</name></expr>;</expr_stmt>
                            }</block></then></if>
                            <if>if <condition>(<expr><name>logFailedTests</name></expr>)</condition><then> <block>{
                                <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"TEST " + <call><name><name>t</name>.<name>getName</name></name><argument_list>()</argument_list></call>
                                                   + " FAILED"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></then></if>
                        }</block></else></if>
                    }</block></then></if>
                }</block></while>
            }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
                <expr_stmt><expr><call><name><name>e</name>.<name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></then> <else>else <block>{
            <decl_stmt><decl><type><name>JUnitTest</name></type> <name>t</name> =<init> <expr>new <call><name>JUnitTest</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>t</name>.<name>setProperties</name></name><argument_list>(<argument><expr><name>props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>t</name>.<name>setSkipNonTests</name></name><argument_list>(<argument><expr><name>skipNonTests</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>returnCode</name> = <call><name>launch</name><argument_list>(
                <argument><expr><name>t</name></expr></argument>, <argument><expr><name>methods</name></expr></argument>, <argument><expr><name>haltError</name></expr></argument>, <argument><expr><name>stackfilter</name></expr></argument>, <argument><expr><name>haltFail</name></expr></argument>,
                <argument><expr><name>showOut</name></expr></argument>, <argument><expr><name>outputToFormat</name></expr></argument>, <argument><expr><name>logTestListenerEvents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <expr_stmt><expr><call><name>registerNonCrash</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>exit</name></name><argument_list>(<argument><expr><name>returnCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Vector</name></type> <name>fromCmdLine</name> =<init> <expr>new <call><name>Vector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>transferFormatters</name><parameter_list>(<param><decl><type><name>JUnitTestRunner</name></type> <name>runner</name></decl></param>,
                                           <param><decl><type><name>JUnitTest</name></type> <name>test</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>runner</name>.<name>addFormatter</name></name><argument_list>(<argument><expr>new <class><super><name>JUnitResultFormatter</name></super><argument_list>()</argument_list> <block>{

            <function><type><specifier>public</specifier> <name>void</name></type> <name>startTestSuite</name><parameter_list>(<param><decl><type><name>JUnitTest</name></type> <name>suite</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
            }</block></function>

            <function><type><specifier>public</specifier> <name>void</name></type> <name>endTestSuite</name><parameter_list>(<param><decl><type><name>JUnitTest</name></type> <name>suite</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
            }</block></function>

            <function><type><specifier>public</specifier> <name>void</name></type> <name>setOutput</name><parameter_list>(<param><decl><type><name>OutputStream</name></type> <name>out</name></decl></param>)</parameter_list> <block>{
            }</block></function>

            <function><type><specifier>public</specifier> <name>void</name></type> <name>setSystemOutput</name><parameter_list>(<param><decl><type><name>String</name></type> <name>out</name></decl></param>)</parameter_list> <block>{
            }</block></function>

            <function><type><specifier>public</specifier> <name>void</name></type> <name>setSystemError</name><parameter_list>(<param><decl><type><name>String</name></type> <name>err</name></decl></param>)</parameter_list> <block>{
            }</block></function>

            <function><type><specifier>public</specifier> <name>void</name></type> <name>addError</name><parameter_list>(<param><decl><type><name>Test</name></type> <name>arg0</name></decl></param>, <param><decl><type><name>Throwable</name></type> <name>arg1</name></decl></param>)</parameter_list> <block>{
            }</block></function>

            <function><type><specifier>public</specifier> <name>void</name></type> <name>addFailure</name><parameter_list>(<param><decl><type><name>Test</name></type> <name>arg0</name></decl></param>, <param><decl><type><name>AssertionFailedError</name></type> <name>arg1</name></decl></param>)</parameter_list> <block>{
            }</block></function>

            <function><type><specifier>public</specifier> <name>void</name></type> <name>endTest</name><parameter_list>(<param><decl><type><name>Test</name></type> <name>arg0</name></decl></param>)</parameter_list> <block>{
            }</block></function>

            <function><type><specifier>public</specifier> <name>void</name></type> <name>startTest</name><parameter_list>(<param><decl><type><name>Test</name></type> <name>arg0</name></decl></param>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>registerTestCase</name><argument_list>(<argument><expr><call><name><name>JUnitVersionHelper</name>.<name>getTestCaseName</name></name><argument_list>(<argument><expr><name>arg0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>size</name> =<init> <expr><call><name><name>fromCmdLine</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>size</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>FormatterElement</name></type> <name>fe</name> =<init> <expr>(<name>FormatterElement</name>) <call><name><name>fromCmdLine</name>.<name>elementAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>multipleTests</name> &amp;&amp; <call><name><name>fe</name>.<name>getUseFile</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>File</name></type> <name>destFile</name> =<init>
                    <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>test</name>.<name>getTodir</name></name><argument_list>()</argument_list></call></expr></argument>,
                             <argument><expr><call><name><name>test</name>.<name>getOutfile</name></name><argument_list>()</argument_list></call> + <call><name><name>fe</name>.<name>getExtension</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>fe</name>.<name>setOutfile</name></name><argument_list>(<argument><expr><name>destFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>runner</name>.<name>addFormatter</name></name><argument_list>(<argument><expr>(<name>JUnitResultFormatter</name>) <call><name><name>fe</name>.<name>createFormatter</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Line format is: formatter=&lt;classname&gt;(,&lt;pathname&gt;)?
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>createAndStoreFormatter</name><parameter_list>(<param><decl><type><name>String</name></type> <name>line</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>FormatterElement</name></type> <name>fe</name> =<init> <expr>new <call><name>FormatterElement</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>pos</name> =<init> <expr><call><name><name>line</name>.<name>indexOf</name></name><argument_list>(<argument><expr>','</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>pos</name> == -1</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>fe</name>.<name>setClassname</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>fe</name>.<name>setUseFile</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>fe</name>.<name>setClassname</name></name><argument_list>(<argument><expr><call><name><name>line</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>fe</name>.<name>setUseFile</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>multipleTests</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>fe</name>.<name>setOutfile</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>line</name>.<name>substring</name></name><argument_list>(<argument><expr><name>pos</name> + 1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>fName</name> =<init> <expr><call><name><name>line</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>IGNORED_FILE_NAME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>fName</name> &gt; -1</expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>fe</name>.<name>setExtension</name></name><argument_list>(<argument><expr><call><name><name>line</name>
                                    .<name>substring</name></name><argument_list>(<argument><expr><name>fName</name>
                                               + <call><name><name>IGNORED_FILE_NAME</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></else></if>
        }</block></else></if>
        <expr_stmt><expr><call><name><name>fromCmdLine</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>fe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a filtered stack trace.
     * This is ripped out of junit.runner.BaseTestRunner.
     * @param t the exception to filter.
     * @return the filtered stack trace.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getFilteredTrace</name><parameter_list>(<param><decl><type><name>Throwable</name></type> <name>t</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>trace</name> =<init> <expr><call><name><name>StringUtils</name>.<name>getStackTrace</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>JUnitTestRunner</name>.<name>filterStack</name></name><argument_list>(<argument><expr><name>trace</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Filters stack frames from internal JUnit and Ant classes
     * @param stack the stack trace to filter.
     * @return the filtered stack.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>filterStack</name><parameter_list>(<param><decl><type><name>String</name></type> <name>stack</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr>!<name>filtertrace</name></expr>)</condition><then> <block>{
            <return>return <expr><name>stack</name></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>StringWriter</name></type> <name>sw</name> =<init> <expr>new <call><name>StringWriter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BufferedWriter</name></type> <name>pw</name> =<init> <expr>new <call><name>BufferedWriter</name><argument_list>(<argument><expr><name>sw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>StringReader</name></type> <name>sr</name> =<init> <expr>new <call><name>StringReader</name><argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BufferedReader</name></type> <name>br</name> =<init> <expr>new <call><name>BufferedReader</name><argument_list>(<argument><expr><name>sr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>line</name></decl>;</decl_stmt>
        <try>try <block>{
            <decl_stmt><decl><type><name>boolean</name></type> <name>firstLine</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr>(<name>line</name> = <call><name><name>br</name>.<name>readLine</name></name><argument_list>()</argument_list></call>) != <name>null</name></expr>)</condition> <block>{
                <if>if <condition>(<expr><name>firstLine</name> || !<call><name>filterLine</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>pw</name>.<name>write</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>pw</name>.<name>newLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name>firstLine</name> = false</expr>;</expr_stmt>
            }</block></while>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
            <return>return <expr><name>stack</name></expr>;</return> <comment type="line">// return the stack unfiltered</comment>
        }</block></catch> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>pw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
        <return>return <expr><call><name><name>sw</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>filterLine</name><parameter_list>(<param><decl><type><name>String</name></type> <name>line</name></decl></param>)</parameter_list> <block>{
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>DEFAULT_TRACE_FILTERS</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <if>if <condition>(<expr><call><name><name>line</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name><name>DEFAULT_TRACE_FILTERS</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> != -1</expr>)</condition><then> <block>{
                <return>return <expr>true</expr>;</return>
            }</block></then></if>
        }</block></for>
        <return>return <expr>false</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * @since Ant 1.6.2
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>launch</name><parameter_list>(<param><decl><type><name>JUnitTest</name></type> <name>t</name></decl></param>, <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>methods</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>haltError</name></decl></param>,
                              <param><decl><type><name>boolean</name></type> <name>stackfilter</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>haltFail</name></decl></param>,
                              <param><decl><type><name>boolean</name></type> <name>showOut</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>outputToFormat</name></decl></param>,
                              <param><decl><type><name>boolean</name></type> <name>logTestListenerEvents</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>JUnitTestRunner</name></type> <name>runner</name> =<init>
            <expr>new <call><name>JUnitTestRunner</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>methods</name></expr></argument>, <argument><expr><name>haltError</name></expr></argument>, <argument><expr><name>stackfilter</name></expr></argument>, <argument><expr><name>haltFail</name></expr></argument>, <argument><expr><name>showOut</name></expr></argument>,
                                <argument><expr><name>logTestListenerEvents</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>runner</name>.<name>forked</name></name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>runner</name>.<name>outputToFormatters</name></name> = <name>outputToFormat</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>transferFormatters</name><argument_list>(<argument><expr><name>runner</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>runner</name>.<name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>runner</name>.<name>getRetCode</name></name><argument_list>()</argument_list></call></expr>;</return>
     }</block></function>

    <comment type="javadoc">/**
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>registerNonCrash</name><parameter_list>()</parameter_list>
            <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>crashFile</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>FileWriter</name></type> <name>out</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <try>try <block>{
                <expr_stmt><expr><name>out</name> = new <call><name>FileWriter</name><argument_list>(<argument><expr><name>crashFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr><name><name>Constants</name>.<name>TERMINATED_SUCCESSFULLY</name></name> + "\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>out</name>.<name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block> <finally>finally <block>{
                <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></finally></try>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>registerTestCase</name><parameter_list>(<param><decl><type><name>String</name></type> <name>testCase</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>crashFile</name> != <name>null</name></expr>)</condition><then> <block>{
            <try>try <block>{
                <decl_stmt><decl><type><name>FileWriter</name></type> <name>out</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <try>try <block>{
                    <expr_stmt><expr><name>out</name> = new <call><name>FileWriter</name><argument_list>(<argument><expr><name>crashFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr><name>testCase</name> + "\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>out</name>.<name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block> <finally>finally <block>{
                    <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></finally></try>
            }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
                <comment type="line">// ignored.</comment>
            }</block></catch></try>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Modifies a TestListener when running JUnit 4: treats AssertionFailedError
     * as a failure not an error.
     *
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>private</specifier> <name>TestListenerWrapper</name></type> <name>wrapListener</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>TestListener</name></type> <name>testListener</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>new <class><super><name>TestListenerWrapper</name></super><argument_list>(<argument><expr><name>testListener</name></expr></argument>)</argument_list> <block>{
            <function><type><specifier>public</specifier> <name>void</name></type> <name>addError</name><parameter_list>(<param><decl><type><name>Test</name></type> <name>test</name></decl></param>, <param><decl><type><name>Throwable</name></type> <name>t</name></decl></param>)</parameter_list> <block>{
                <if>if <condition>(<expr><name>junit4</name> &amp;&amp; <name>t</name> <name>instanceof</name> <name>AssertionFailedError</name></expr>)</condition><then> <block>{
                    <comment type="line">// JUnit 4 does not distinguish between errors and failures</comment>
                    <comment type="line">// even in the JUnit 3 adapter.</comment>
                    <comment type="line">// So we need to help it a bit to retain compatibility for JUnit 3 tests.</comment>
                    <expr_stmt><expr><call><name><name>testListener</name>.<name>addFailure</name></name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr>(<name>AssertionFailedError</name>) <name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <if>if <condition>(<expr><name>junit4</name> &amp;&amp; <name>t</name> <name>instanceof</name>  <name>AssertionError</name></expr>)</condition><then> <block>{
                    <comment type="line">// Not strictly necessary but probably desirable.</comment>
                    <comment type="line">// JUnit 4-specific test GUIs will show just "failures".</comment>
                    <comment type="line">// But Ant's output shows "failures" vs. "errors".</comment>
                    <comment type="line">// We would prefer to show "failure" for things that logically are.</comment>
                    <decl_stmt><decl><type><name>String</name></type> <name>msg</name> =<init> <expr><call><name><name>t</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>AssertionFailedError</name></type> <name>failure</name> =<init> <expr><name>msg</name> != <name>null</name>
                        ? new <call><name>AssertionFailedError</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call> : new <call><name>AssertionFailedError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>failure</name>.<name>setStackTrace</name></name><argument_list>(<argument><expr><call><name><name>t</name>.<name>getStackTrace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>testListener</name>.<name>addFailure</name></name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>failure</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name><name>testListener</name>.<name>addError</name></name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if></else></if>
            }</block></function>
            <function><type><specifier>public</specifier> <name>void</name></type> <name>addFailure</name><parameter_list>(<param><decl><type><name>Test</name></type> <name>test</name></decl></param>, <param><decl><type><name>AssertionFailedError</name></type> <name>t</name></decl></param>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>testListener</name>.<name>addFailure</name></name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
            <function><type><specifier>public</specifier> <name>void</name></type> <name>addFailure</name><parameter_list>(<param><decl><type><name>Test</name></type> <name>test</name></decl></param>, <param><decl><type><name>Throwable</name></type> <name>t</name></decl></param>)</parameter_list> <block>{ <comment type="line">// pre-3.4</comment>
                <if>if <condition>(<expr><name>t</name> <name>instanceof</name> <name>AssertionFailedError</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>testListener</name>.<name>addFailure</name></name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr>(<name>AssertionFailedError</name>) <name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name><name>testListener</name>.<name>addError</name></name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></function>
            <function><type><specifier>public</specifier> <name>void</name></type> <name>endTest</name><parameter_list>(<param><decl><type><name>Test</name></type> <name>test</name></decl></param>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>testListener</name>.<name>endTest</name></name><argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
            <function><type><specifier>public</specifier> <name>void</name></type> <name>startTest</name><parameter_list>(<param><decl><type><name>Test</name></type> <name>test</name></decl></param>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>testListener</name>.<name>startTest</name></name><argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Use instead of TestResult.get{Failure,Error}Count on JUnit 4,
     * since the adapter claims that all failures are errors.
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>private</specifier> <name>int</name><index>[]</index></type> <name>findJUnit4FailureErrorCount</name><parameter_list>(<param><decl><type><name>TestResult</name></type> <name>result</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>failures</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>errors</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Enumeration</name></type> <name>e</name> =<init> <expr><call><name><name>result</name>.<name>failures</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <expr_stmt><expr><call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>failures</name>++</expr>;</expr_stmt>
        }</block></while>
        <expr_stmt><expr><name>e</name> = <call><name><name>result</name>.<name>errors</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>Throwable</name></type> <name>t</name> =<init> <expr>((<name>TestFailure</name>) <call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call>).<call><name>thrownException</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>t</name> <name>instanceof</name> <name>AssertionFailedError</name>
                || <name>t</name> <name>instanceof</name> <name>AssertionError</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>failures</name>++</expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>errors</name>++</expr>;</expr_stmt>
            }</block></else></if>
        }</block></while>
        <return>return <expr>new <name><name>int</name><index>[]</index></name> <block>{<expr><name>failures</name></expr>, <expr><name>errors</name></expr>}</block></expr>;</return>
    }</block></function>

}</block></class> <comment type="line">// JUnitTestRunner</comment>
</unit>
