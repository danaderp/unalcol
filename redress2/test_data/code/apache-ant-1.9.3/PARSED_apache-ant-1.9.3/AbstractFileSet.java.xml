<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\types\AbstractFileSet.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collections</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Stack</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>FileScanner</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>DirectoryScanner</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>OrSelector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>AndSelector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>NotSelector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>DateSelector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>FileSelector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>NoneSelector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>SizeSelector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>TypeSelector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>DepthSelector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>DependSelector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>ExtendSelector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>SelectSelector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>PresentSelector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>SelectorScanner</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>ContainsSelector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>FilenameSelector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>MajoritySelector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>DifferentSelector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>SelectorContainer</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>ContainsRegexpSelector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>ReadableSelector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>WritableSelector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>modifiedselector</name>.<name>ModifiedSelector</name></name>;</import>

<comment type="javadoc">/**
 * Class that holds an implicit patternset and supports nested
 * patternsets and creates a DirectoryScanner using these patterns.
 *
 * &lt;p&gt;Common base class for DirSet and FileSet.&lt;/p&gt;
 *
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>AbstractFileSet</name> <super><extends>extends <name>DataType</name></extends>
    <implements>implements <name>Cloneable</name>, <name>SelectorContainer</name></implements></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>PatternSet</name></type> <name>defaultPatterns</name> =<init> <expr>new <call><name>PatternSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>List</name><argument_list>&lt;<argument><name>PatternSet</name></argument>&gt;</argument_list></name></type> <name>additionalPatterns</name> =<init> <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>PatternSet</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>List</name><argument_list>&lt;<argument><name>FileSelector</name></argument>&gt;</argument_list></name></type> <name>selectors</name> =<init> <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>FileSelector</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>dir</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>useDefaultExcludes</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>caseSensitive</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>followSymlinks</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>errorOnMissingDir</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>maxLevelsOfSymlinks</name> =<init> <expr><name><name>DirectoryScanner</name>.<name>MAX_LEVELS_OF_SYMLINKS</name></name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* cached DirectoryScanner instance for our own Project only */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>DirectoryScanner</name></type> <name>directoryScanner</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Construct a new &lt;code&gt;AbstractFileSet&lt;/code&gt;.
     */</comment>
    <constructor><specifier>public</specifier> <name>AbstractFileSet</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Construct a new &lt;code&gt;AbstractFileSet&lt;/code&gt;, shallowly cloned
     * from the specified &lt;code&gt;AbstractFileSet&lt;/code&gt;.
     * @param fileset the &lt;code&gt;AbstractFileSet&lt;/code&gt; to use as a template.
     */</comment>
    <constructor><specifier>protected</specifier> <name>AbstractFileSet</name><parameter_list>(<param><decl><type><name>AbstractFileSet</name></type> <name>fileset</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>dir</name></name> = <name><name>fileset</name>.<name>dir</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>defaultPatterns</name></name> = <name><name>fileset</name>.<name>defaultPatterns</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>additionalPatterns</name></name> = <name><name>fileset</name>.<name>additionalPatterns</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>selectors</name></name> = <name><name>fileset</name>.<name>selectors</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>useDefaultExcludes</name></name> = <name><name>fileset</name>.<name>useDefaultExcludes</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>caseSensitive</name></name> = <name><name>fileset</name>.<name>caseSensitive</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>followSymlinks</name></name> = <name><name>fileset</name>.<name>followSymlinks</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>errorOnMissingDir</name></name> = <name><name>fileset</name>.<name>errorOnMissingDir</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>maxLevelsOfSymlinks</name></name> = <name><name>fileset</name>.<name>maxLevelsOfSymlinks</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setProject</name><argument_list>(<argument><expr><call><name><name>fileset</name>.<name>getProject</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Makes this instance in effect a reference to another instance.
     *
     * &lt;p&gt;You must not set another attribute or nest elements inside
     * this element if you make it a reference.&lt;/p&gt;
     * @param r the &lt;code&gt;Reference&lt;/code&gt; to use.
     * @throws BuildException on error
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRefid</name><parameter_list>(<param><decl><type><name>Reference</name></type> <name>r</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>dir</name> != <name>null</name> || <call><name><name>defaultPatterns</name>.<name>hasPatterns</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr><call><name>tooManyAttributes</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>additionalPatterns</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr><call><name>noChildrenAllowed</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>selectors</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr><call><name>noChildrenAllowed</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>super</name>.<name>setRefid</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the base-directory for this instance.
     * @param dir the directory's &lt;code&gt;File&lt;/code&gt; instance.
     * @throws BuildException on error
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>setDir</name><parameter_list>(<param><decl><type><name>File</name></type> <name>dir</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr><call><name>tooManyAttributes</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>dir</name></name> = <name>dir</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>directoryScanner</name> = <name>null</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Retrieves the base-directory for this instance.
     * @return &lt;code&gt;File&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>File</name></type> <name>getDir</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getDir</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Retrieves the base-directory for this instance.
     * @param p the &lt;code&gt;Project&lt;/code&gt; against which the
     *          reference is resolved, if set.
     * @return &lt;code&gt;File&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>File</name></type> <name>getDir</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>p</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name>getRef</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call>.<call><name>getDir</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>dieOnCircularReference</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>dir</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Creates a nested patternset.
     * @return &lt;code&gt;PatternSet&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>PatternSet</name></type> <name>createPatternSet</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr><call><name>noChildrenAllowed</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>PatternSet</name></type> <name>patterns</name> =<init> <expr>new <call><name>PatternSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>additionalPatterns</name>.<name>add</name></name><argument_list>(<argument><expr><name>patterns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>directoryScanner</name> = <name>null</name></expr>;</expr_stmt>
        <return>return <expr><name>patterns</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Add a name entry to the include list.
     * @return &lt;code&gt;PatternSet.NameEntry&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name><name>PatternSet</name>.<name>NameEntry</name></name></type> <name>createInclude</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr><call><name>noChildrenAllowed</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name>directoryScanner</name> = <name>null</name></expr>;</expr_stmt>
        <return>return <expr><call><name><name>defaultPatterns</name>.<name>createInclude</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Add a name entry to the include files list.
     * @return &lt;code&gt;PatternSet.NameEntry&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name><name>PatternSet</name>.<name>NameEntry</name></name></type> <name>createIncludesFile</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr><call><name>noChildrenAllowed</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name>directoryScanner</name> = <name>null</name></expr>;</expr_stmt>
        <return>return <expr><call><name><name>defaultPatterns</name>.<name>createIncludesFile</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Add a name entry to the exclude list.
     * @return &lt;code&gt;PatternSet.NameEntry&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name><name>PatternSet</name>.<name>NameEntry</name></name></type> <name>createExclude</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr><call><name>noChildrenAllowed</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name>directoryScanner</name> = <name>null</name></expr>;</expr_stmt>
        <return>return <expr><call><name><name>defaultPatterns</name>.<name>createExclude</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Add a name entry to the excludes files list.
     * @return &lt;code&gt;PatternSet.NameEntry&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name><name>PatternSet</name>.<name>NameEntry</name></name></type> <name>createExcludesFile</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr><call><name>noChildrenAllowed</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name>directoryScanner</name> = <name>null</name></expr>;</expr_stmt>
        <return>return <expr><call><name><name>defaultPatterns</name>.<name>createExcludesFile</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Creates a single file fileset.
     * @param file the single &lt;code&gt;File&lt;/code&gt; included in this
     *             &lt;code&gt;AbstractFileSet&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>setFile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>file</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr><call><name>tooManyAttributes</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name>setDir</name><argument_list>(<argument><expr><call><name><name>file</name>.<name>getParentFile</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>createInclude</name><argument_list>()</argument_list></call>.<call><name>setName</name><argument_list>(<argument><expr><call><name><name>file</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Appends &lt;code&gt;includes&lt;/code&gt; to the current list of include
     * patterns.
     *
     * &lt;p&gt;Patterns may be separated by a comma or a space.&lt;/p&gt;
     *
     * @param includes the &lt;code&gt;String&lt;/code&gt; containing the include patterns.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>setIncludes</name><parameter_list>(<param><decl><type><name>String</name></type> <name>includes</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr><call><name>tooManyAttributes</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>defaultPatterns</name>.<name>setIncludes</name></name><argument_list>(<argument><expr><name>includes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>directoryScanner</name> = <name>null</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Appends &lt;code&gt;includes&lt;/code&gt; to the current list of include
     * patterns.
     *
     * @param includes array containing the include patterns.
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>appendIncludes</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>includes</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr><call><name>tooManyAttributes</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>includes</name> != <name>null</name></expr>)</condition><then> <block>{
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>includes</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <expr_stmt><expr><call><name><name>defaultPatterns</name>.<name>createInclude</name></name><argument_list>()</argument_list></call>.<call><name>setName</name><argument_list>(<argument><expr><name><name>includes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><name>directoryScanner</name> = <name>null</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Appends &lt;code&gt;excludes&lt;/code&gt; to the current list of exclude
     * patterns.
     *
     * &lt;p&gt;Patterns may be separated by a comma or a space.&lt;/p&gt;
     *
     * @param excludes the &lt;code&gt;String&lt;/code&gt; containing the exclude patterns.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>setExcludes</name><parameter_list>(<param><decl><type><name>String</name></type> <name>excludes</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr><call><name>tooManyAttributes</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>defaultPatterns</name>.<name>setExcludes</name></name><argument_list>(<argument><expr><name>excludes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>directoryScanner</name> = <name>null</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Appends &lt;code&gt;excludes&lt;/code&gt; to the current list of include
     * patterns.
     *
     * @param excludes array containing the exclude patterns.
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>appendExcludes</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>excludes</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr><call><name>tooManyAttributes</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>excludes</name> != <name>null</name></expr>)</condition><then> <block>{
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>excludes</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <expr_stmt><expr><call><name><name>defaultPatterns</name>.<name>createExclude</name></name><argument_list>()</argument_list></call>.<call><name>setName</name><argument_list>(<argument><expr><name><name>excludes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><name>directoryScanner</name> = <name>null</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the &lt;code&gt;File&lt;/code&gt; containing the includes patterns.
     *
     * @param incl &lt;code&gt;File&lt;/code&gt; instance.
     * @throws BuildException on error
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>setIncludesfile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>incl</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr><call><name>tooManyAttributes</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>defaultPatterns</name>.<name>setIncludesfile</name></name><argument_list>(<argument><expr><name>incl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>directoryScanner</name> = <name>null</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the &lt;code&gt;File&lt;/code&gt; containing the excludes patterns.
     *
     * @param excl &lt;code&gt;File&lt;/code&gt; instance.
     * @throws BuildException on error
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>setExcludesfile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>excl</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr><call><name>tooManyAttributes</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>defaultPatterns</name>.<name>setExcludesfile</name></name><argument_list>(<argument><expr><name>excl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>directoryScanner</name> = <name>null</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets whether default exclusions should be used or not.
     *
     * @param useDefaultExcludes &lt;code&gt;boolean&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>setDefaultexcludes</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>useDefaultExcludes</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr><call><name>tooManyAttributes</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>useDefaultExcludes</name></name> = <name>useDefaultExcludes</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>directoryScanner</name> = <name>null</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Whether default exclusions should be used or not.
     * @return the default exclusions value.
     * @since Ant 1.6.3
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>boolean</name></type> <name>getDefaultexcludes</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name>getRef</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>getDefaultexcludes</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>dieOnCircularReference</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>useDefaultExcludes</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets case sensitivity of the file system.
     *
     * @param caseSensitive &lt;code&gt;boolean&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>setCaseSensitive</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>caseSensitive</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr><call><name>tooManyAttributes</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>caseSensitive</name></name> = <name>caseSensitive</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>directoryScanner</name> = <name>null</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Find out if the fileset is case sensitive.
     *
     * @return &lt;code&gt;boolean&lt;/code&gt; indicating whether the fileset is
     * case sensitive.
     *
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>boolean</name></type> <name>isCaseSensitive</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name>getRef</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>isCaseSensitive</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>dieOnCircularReference</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>caseSensitive</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets whether or not symbolic links should be followed.
     *
     * @param followSymlinks whether or not symbolic links should be followed.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>setFollowSymlinks</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>followSymlinks</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr><call><name>tooManyAttributes</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>followSymlinks</name></name> = <name>followSymlinks</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>directoryScanner</name> = <name>null</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Find out if the fileset wants to follow symbolic links.
     *
     * @return &lt;code&gt;boolean&lt;/code&gt; indicating whether symbolic links
     *         should be followed.
     *
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>boolean</name></type> <name>isFollowSymlinks</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name>getRef</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>isCaseSensitive</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>dieOnCircularReference</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>followSymlinks</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * The maximum number of times a symbolic link may be followed
     * during a scan.
     *
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMaxLevelsOfSymlinks</name><parameter_list>(<param><decl><type><name>int</name></type> <name>max</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>maxLevelsOfSymlinks</name> = <name>max</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The maximum number of times a symbolic link may be followed
     * during a scan.
     *
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getMaxLevelsOfSymlinks</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>maxLevelsOfSymlinks</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets whether an error is thrown if a directory does not exist.
     *
     * @param errorOnMissingDir true if missing directories cause errors,
     *                        false if not.
     */</comment>
     <function><type><specifier>public</specifier> <name>void</name></type> <name>setErrorOnMissingDir</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>errorOnMissingDir</name></decl></param>)</parameter_list> <block>{
         <expr_stmt><expr><name><name>this</name>.<name>errorOnMissingDir</name></name> = <name>errorOnMissingDir</name></expr>;</expr_stmt>
     }</block></function>

    <comment type="javadoc">/**
     * Gets whether an error is/should be thrown if the base directory
     * does not exist.
     * @since Ant 1.8.2
     */</comment>
     <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getErrorOnMissingDir</name><parameter_list>()</parameter_list> <block>{
         <return>return <expr><name>errorOnMissingDir</name></expr>;</return>
     }</block></function>

    <comment type="javadoc">/**
     * Returns the directory scanner needed to access the files to process.
     * @return a &lt;code&gt;DirectoryScanner&lt;/code&gt; instance.
     */</comment>
    <function><type><specifier>public</specifier> <name>DirectoryScanner</name></type> <name>getDirectoryScanner</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getDirectoryScanner</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the directory scanner needed to access the files to process.
     * @param p the Project against which the DirectoryScanner should be configured.
     * @return a &lt;code&gt;DirectoryScanner&lt;/code&gt; instance.
     */</comment>
    <function><type><specifier>public</specifier> <name>DirectoryScanner</name></type> <name>getDirectoryScanner</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>p</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name>getRef</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call>.<call><name>getDirectoryScanner</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>dieOnCircularReference</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>DirectoryScanner</name></type> <name>ds</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <synchronized>synchronized (<expr><name>this</name></expr>) <block>{
            <if>if <condition>(<expr><name>directoryScanner</name> != <name>null</name> &amp;&amp; <name>p</name> == <call><name>getProject</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>ds</name> = <name>directoryScanner</name></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <if>if <condition>(<expr><name>dir</name> == <name>null</name></expr>)</condition><then> <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"No directory specified for "
                                             + <call><name>getDataTypeName</name><argument_list>()</argument_list></call> + "."</expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if>
                <if>if <condition>(<expr>!<call><name><name>dir</name>.<name>exists</name></name><argument_list>()</argument_list></call> &amp;&amp; <name>errorOnMissingDir</name></expr>)</condition><then> <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><call><name><name>dir</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call>
                                             + <name><name>DirectoryScanner</name>
                                             .<name>DOES_NOT_EXIST_POSTFIX</name></name></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if>
                <if>if <condition>(<expr>!<call><name><name>dir</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call> &amp;&amp; <call><name><name>dir</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><call><name><name>dir</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call>
                                             + " is not a directory."</expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if>
                <expr_stmt><expr><name>ds</name> = new <call><name>DirectoryScanner</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>setupDirectoryScanner</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ds</name>.<name>setFollowSymlinks</name></name><argument_list>(<argument><expr><name>followSymlinks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ds</name>.<name>setErrorOnMissingDir</name></name><argument_list>(<argument><expr><name>errorOnMissingDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ds</name>.<name>setMaxLevelsOfSymlinks</name></name><argument_list>(<argument><expr><name>maxLevelsOfSymlinks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>directoryScanner</name> = (<name>p</name> == <call><name>getProject</name><argument_list>()</argument_list></call>) ? <name>ds</name> : <name>directoryScanner</name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></synchronized>
        <expr_stmt><expr><call><name><name>ds</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>ds</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set up the specified directory scanner against this
     * AbstractFileSet's Project.
     * @param ds a &lt;code&gt;FileScanner&lt;/code&gt; instance.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setupDirectoryScanner</name><parameter_list>(<param><decl><type><name>FileScanner</name></type> <name>ds</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setupDirectoryScanner</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set up the specified directory scanner against the specified project.
     * @param ds a &lt;code&gt;FileScanner&lt;/code&gt; instance.
     * @param p an Ant &lt;code&gt;Project&lt;/code&gt; instance.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>setupDirectoryScanner</name><parameter_list>(<param><decl><type><name>FileScanner</name></type> <name>ds</name></decl></param>, <param><decl><type><name>Project</name></type> <name>p</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>getRef</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call>.<call><name>setupDirectoryScanner</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>dieOnCircularReference</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>ds</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"ds cannot be null"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setBasedir</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>PatternSet</name></type> <name>ps</name> =<init> <expr><call><name>mergePatterns</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>log</name></name><argument_list>(<argument><expr><call><name>getDataTypeName</name><argument_list>()</argument_list></call> + ": Setup scanner in dir " + <name>dir</name>
            + " with " + <name>ps</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>ds</name>.<name>setIncludes</name></name><argument_list>(<argument><expr><call><name><name>ps</name>.<name>getIncludePatterns</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setExcludes</name></name><argument_list>(<argument><expr><call><name><name>ps</name>.<name>getExcludePatterns</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>ds</name> <name>instanceof</name> <name>SelectorScanner</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>SelectorScanner</name></type> <name>ss</name> =<init> <expr>(<name>SelectorScanner</name>) <name>ds</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>ss</name>.<name>setSelectors</name></name><argument_list>(<argument><expr><call><name>getSelectors</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>useDefaultExcludes</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>ds</name>.<name>addDefaultExcludes</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setCaseSensitive</name></name><argument_list>(<argument><expr><name>caseSensitive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Performs the check for circular references and returns the
     * referenced FileSet.
     * @param p the current project
     * @return the referenced FileSet
     */</comment>
    <function><type><specifier>protected</specifier> <name>AbstractFileSet</name></type> <name>getRef</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>p</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>(<name>AbstractFileSet</name>) <call><name>getCheckedRef</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="line">// SelectorContainer methods</comment>

    <comment type="javadoc">/**
     * Indicates whether there are any selectors here.
     *
     * @return whether any selectors are in this container.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>boolean</name></type> <name>hasSelectors</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name>getRef</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>hasSelectors</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>dieOnCircularReference</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>!(<call><name><name>selectors</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call>)</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Indicates whether there are any patterns here.
     *
     * @return whether any patterns are in this container.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>boolean</name></type> <name>hasPatterns</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call> &amp;&amp; <call><name>getProject</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name>getRef</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>hasPatterns</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>dieOnCircularReference</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>defaultPatterns</name>.<name>hasPatterns</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <for>for (<init><decl><type><name>PatternSet</name></type> <name>ps</name> :<range> <expr><name>additionalPatterns</name></expr></range></decl></init>) <block>{
            <if>if <condition>(<expr><call><name><name>ps</name>.<name>hasPatterns</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>true</expr>;</return>
            }</block></then></if>
        }</block></for>
        <return>return <expr>false</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Gives the count of the number of selectors in this container.
     *
     * @return the number of selectors in this container as an &lt;code&gt;int&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>int</name></type> <name>selectorCount</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name>getRef</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>selectorCount</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>dieOnCircularReference</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>selectors</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the set of selectors as an array.
     * @param p the current project
     * @return a &lt;code&gt;FileSelector[]&lt;/code&gt; of the selectors in this container.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>FileSelector</name><index>[]</index></type> <name>getSelectors</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>p</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name>getRef</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>getSelectors</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>dieOnCircularReference</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>(<name><name>FileSelector</name><index>[]</index></name>) (<call><name><name>selectors</name>.<name>toArray</name></name><argument_list>(
            <argument><expr>new <name><name>FileSelector</name><index>[<expr><call><name><name>selectors</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call>)</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns an enumerator for accessing the set of selectors.
     *
     * @return an &lt;code&gt;Enumeration&lt;/code&gt; of selectors.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name><name>Enumeration</name><argument_list>&lt;<argument><name>FileSelector</name></argument>&gt;</argument_list></name></type> <name>selectorElements</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name>getRef</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>selectorElements</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>dieOnCircularReference</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>Collections</name>.<name>enumeration</name></name><argument_list>(<argument><expr><name>selectors</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Add a new selector into this container.
     *
     * @param selector the new &lt;code&gt;FileSelector&lt;/code&gt; to add.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>appendSelector</name><parameter_list>(<param><decl><type><name>FileSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr><call><name>noChildrenAllowed</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>selectors</name>.<name>add</name></name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>directoryScanner</name> = <name>null</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setChecked</name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block">/* Methods below all add specific selectors */</comment>

    <comment type="javadoc">/**
     * Add a "Select" selector entry on the selector list.
     * @param selector the &lt;code&gt;SelectSelector&lt;/code&gt; to add.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addSelector</name><parameter_list>(<param><decl><type><name>SelectSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>appendSelector</name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add an "And" selector entry on the selector list.
     * @param selector the &lt;code&gt;AndSelector&lt;/code&gt; to add.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addAnd</name><parameter_list>(<param><decl><type><name>AndSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>appendSelector</name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add an "Or" selector entry on the selector list.
     * @param selector the &lt;code&gt;OrSelector&lt;/code&gt; to add.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addOr</name><parameter_list>(<param><decl><type><name>OrSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>appendSelector</name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a "Not" selector entry on the selector list.
     * @param selector the &lt;code&gt;NotSelector&lt;/code&gt; to add.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addNot</name><parameter_list>(<param><decl><type><name>NotSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>appendSelector</name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a "None" selector entry on the selector list.
     * @param selector the &lt;code&gt;NoneSelector&lt;/code&gt; to add.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addNone</name><parameter_list>(<param><decl><type><name>NoneSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>appendSelector</name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a majority selector entry on the selector list.
     * @param selector the &lt;code&gt;MajoritySelector&lt;/code&gt; to add.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addMajority</name><parameter_list>(<param><decl><type><name>MajoritySelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>appendSelector</name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a selector date entry on the selector list.
     * @param selector the &lt;code&gt;DateSelector&lt;/code&gt; to add.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addDate</name><parameter_list>(<param><decl><type><name>DateSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>appendSelector</name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a selector size entry on the selector list.
     * @param selector the &lt;code&gt;SizeSelector&lt;/code&gt; to add.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addSize</name><parameter_list>(<param><decl><type><name>SizeSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>appendSelector</name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a DifferentSelector entry on the selector list.
     * @param selector the &lt;code&gt;DifferentSelector&lt;/code&gt; to add.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addDifferent</name><parameter_list>(<param><decl><type><name>DifferentSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>appendSelector</name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a selector filename entry on the selector list.
     * @param selector the &lt;code&gt;FilenameSelector&lt;/code&gt; to add.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addFilename</name><parameter_list>(<param><decl><type><name>FilenameSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>appendSelector</name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a selector type entry on the selector list.
     * @param selector the &lt;code&gt;TypeSelector&lt;/code&gt; to add.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addType</name><parameter_list>(<param><decl><type><name>TypeSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>appendSelector</name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add an extended selector entry on the selector list.
     * @param selector the &lt;code&gt;ExtendSelector&lt;/code&gt; to add.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addCustom</name><parameter_list>(<param><decl><type><name>ExtendSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>appendSelector</name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a contains selector entry on the selector list.
     * @param selector the &lt;code&gt;ContainsSelector&lt;/code&gt; to add.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addContains</name><parameter_list>(<param><decl><type><name>ContainsSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>appendSelector</name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a present selector entry on the selector list.
     * @param selector the &lt;code&gt;PresentSelector&lt;/code&gt; to add.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addPresent</name><parameter_list>(<param><decl><type><name>PresentSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>appendSelector</name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a depth selector entry on the selector list.
     * @param selector the &lt;code&gt;DepthSelector&lt;/code&gt; to add.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addDepth</name><parameter_list>(<param><decl><type><name>DepthSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>appendSelector</name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a depends selector entry on the selector list.
     * @param selector the &lt;code&gt;DependSelector&lt;/code&gt; to add.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addDepend</name><parameter_list>(<param><decl><type><name>DependSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>appendSelector</name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a regular expression selector entry on the selector list.
     * @param selector the &lt;code&gt;ContainsRegexpSelector&lt;/code&gt; to add.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addContainsRegexp</name><parameter_list>(<param><decl><type><name>ContainsRegexpSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>appendSelector</name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add the modified selector.
     * @param selector the &lt;code&gt;ModifiedSelector&lt;/code&gt; to add.
     * @since ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addModified</name><parameter_list>(<param><decl><type><name>ModifiedSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>appendSelector</name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addReadable</name><parameter_list>(<param><decl><type><name>ReadableSelector</name></type> <name>r</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>appendSelector</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addWritable</name><parameter_list>(<param><decl><type><name>WritableSelector</name></type> <name>w</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>appendSelector</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add an arbitrary selector.
     * @param selector the &lt;code&gt;FileSelector&lt;/code&gt; to add.
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>FileSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>appendSelector</name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns included files as a list of semicolon-separated filenames.
     *
     * @return a &lt;code&gt;String&lt;/code&gt; of included filenames.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name>getRef</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>dieOnCircularReference</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>DirectoryScanner</name></type> <name>ds</name> =<init> <expr><call><name>getDirectoryScanner</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>files</name> =<init> <expr><call><name><name>ds</name>.<name>getIncludedFiles</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>sb</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>files</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <if>if <condition>(<expr><name>i</name> &gt; 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>';'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><call><name><name>sb</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Creates a deep clone of this instance, except for the nested
     * selectors (the list of selectors is a shallow clone of this
     * instance's list).
     * @return the cloned object
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>(<call><name>getRef</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>).<call><name>clone</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
            <try>try <block>{
                <decl_stmt><decl><type><name>AbstractFileSet</name></type> <name>fs</name> =<init> <expr>(<name>AbstractFileSet</name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>fs</name>.<name>defaultPatterns</name></name> = (<name>PatternSet</name>) <call><name><name>defaultPatterns</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>fs</name>.<name>additionalPatterns</name></name> = new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>PatternSet</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>additionalPatterns</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for (<init><decl><type><name>PatternSet</name></type> <name>ps</name> :<range> <expr><name>additionalPatterns</name></expr></range></decl></init>) <block>{
                    <expr_stmt><expr><call><name><name>fs</name>.<name>additionalPatterns</name>.<name>add</name></name><argument_list>(<argument><expr>(<name>PatternSet</name>) <call><name><name>ps</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
                <expr_stmt><expr><name><name>fs</name>.<name>selectors</name></name> = new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>FileSelector</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>selectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>fs</name></expr>;</return>
            }</block> <catch>catch (<param><decl><type><name>CloneNotSupportedException</name></type> <name>e</name></decl></param>) <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Get the merged include patterns for this AbstractFileSet.
     * @param p the project to use.
     * @return the include patterns of the default pattern set and all
     * nested patternsets.
     *
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>mergeIncludes</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>p</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>mergePatterns</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call>.<call><name>getIncludePatterns</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the merged exclude patterns for this AbstractFileSet.
     * @param p the project to use.
     * @return the exclude patterns of the default pattern set and all
     * nested patternsets.
     *
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>mergeExcludes</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>p</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>mergePatterns</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call>.<call><name>getExcludePatterns</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the merged patterns for this AbstractFileSet.
     * @param p the project to use.
     * @return the default patternset merged with the additional sets
     * in a new PatternSet instance.
     *
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>PatternSet</name></type> <name>mergePatterns</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>p</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name>getRef</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call>.<call><name>mergePatterns</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>dieOnCircularReference</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>PatternSet</name></type> <name>ps</name> =<init> <expr>(<name>PatternSet</name>) <call><name><name>defaultPatterns</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>count</name> =<init> <expr><call><name><name>additionalPatterns</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>count</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>ps</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>additionalPatterns</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>ps</name></expr>;</return>
    }</block></function>

    <function><type><specifier>protected</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>dieOnCircularReference</name><parameter_list>(<param><decl><type><name><name>Stack</name><argument_list>&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>stk</name></decl></param>, <param><decl><type><name>Project</name></type> <name>p</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><call><name>isChecked</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>super</name>.<name>dieOnCircularReference</name></name><argument_list>(<argument><expr><name>stk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <for>for (<init><decl><type><name>FileSelector</name></type> <name>fileSelector</name> :<range> <expr><name>selectors</name></expr></range></decl></init>) <block>{
                <if>if <condition>(<expr><name>fileSelector</name> <name>instanceof</name> <name>DataType</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>pushAndInvokeCircularReferenceCheck</name><argument_list>(<argument><expr>(<name>DataType</name>) <name>fileSelector</name></expr></argument>, <argument><expr><name>stk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
            <for>for (<init><decl><type><name>PatternSet</name></type> <name>ps</name> :<range> <expr><name>additionalPatterns</name></expr></range></decl></init>) <block>{
                <expr_stmt><expr><call><name>pushAndInvokeCircularReferenceCheck</name><argument_list>(<argument><expr><name>ps</name></expr></argument>, <argument><expr><name>stk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><call><name>setChecked</name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>
}</block></class>
</unit>
