<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\types\resources\selectors\Name.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>selectors</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>RegularExpression</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Resource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>SelectorUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>regexp</name>.<name>Regexp</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>regexp</name>.<name>RegexpUtil</name></name>;</import>

<comment type="javadoc">/**
 * Name ResourceSelector.
 * @since Ant 1.7
 */</comment>
<class><specifier>public</specifier> class <name>Name</name> <super><implements>implements <name>ResourceSelector</name></implements></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>regex</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>pattern</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>cs</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>handleDirSep</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="line">// caches for performance reasons</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>RegularExpression</name></type> <name>reg</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Regexp</name></type> <name>expression</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Project</name></type> <name>project</name></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setProject</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>p</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>project</name> = <name>p</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the pattern to compare names against.
     * @param n the pattern String to set.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>n</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>pattern</name> = <name>n</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the pattern used by this Name ResourceSelector.
     * @return the String selection pattern.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>pattern</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the regular expression to compare names against.
     * @param r the regex to set.
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRegex</name><parameter_list>(<param><decl><type><name>String</name></type> <name>r</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>regex</name> = <name>r</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>reg</name> = <name>null</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the regular expression used by this Name ResourceSelector.
     * @return the String selection pattern.
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getRegex</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>regex</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set whether the name comparisons are case-sensitive.
     * @param b boolean case-sensitivity flag.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCaseSensitive</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>cs</name> = <name>b</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Learn whether this Name ResourceSelector is case-sensitive.
     * @return boolean case-sensitivity flag.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isCaseSensitive</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>cs</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Attribute specifying whether to ignore the difference
     * between / and \ (the two common directory characters).
     * @param handleDirSep a boolean, default is false.
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setHandleDirSep</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>handleDirSep</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>handleDirSep</name></name> = <name>handleDirSep</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Whether the difference between / and \ (the two common
     * directory characters) is ignored.
     *
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>doesHandledirSep</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>handleDirSep</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Return true if this Resource is selected.
     * @param r the Resource to check.
     * @return whether the Resource was selected.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSelected</name><parameter_list>(<param><decl><type><name>Resource</name></type> <name>r</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>n</name> =<init> <expr><call><name><name>r</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>matches</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>String</name></type> <name>s</name> =<init> <expr><call><name><name>r</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>s</name>.<name>equals</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> ? false : <call><name>matches</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>matches</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>pattern</name> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>SelectorUtils</name>.<name>match</name></name><argument_list>(<argument><expr><call><name>modify</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>modify</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cs</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
            <if>if <condition>(<expr><name>reg</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>reg</name> = new <call><name>RegularExpression</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>reg</name>.<name>setPattern</name></name><argument_list>(<argument><expr><name>regex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>expression</name> = <call><name><name>reg</name>.<name>getRegexp</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <return>return <expr><call><name><name>expression</name>.<name>matches</name></name><argument_list>(<argument><expr><call><name>modify</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>RegexpUtil</name>.<name>asOptions</name></name><argument_list>(<argument><expr><name>cs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>modify</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>s</name> == <name>null</name> || !<name>handleDirSep</name> || <call><name><name>s</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"\\"</expr></argument>)</argument_list></call> == -1</expr>)</condition><then> <block>{
            <return>return <expr><name>s</name></expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name><name>s</name>.<name>replace</name></name><argument_list>(<argument><expr>'\\'</expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
