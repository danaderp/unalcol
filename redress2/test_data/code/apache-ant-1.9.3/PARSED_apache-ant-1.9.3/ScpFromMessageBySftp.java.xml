<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\ssh\ScpFromMessageBySftp.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>ssh</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>

<import>import <name><name>com</name>.<name>jcraft</name>.<name>jsch</name>.<name>JSchException</name></name>;</import>
<import>import <name><name>com</name>.<name>jcraft</name>.<name>jsch</name>.<name>Session</name></name>;</import>
<import>import <name><name>com</name>.<name>jcraft</name>.<name>jsch</name>.<name>ChannelSftp</name></name>;</import>
<import>import <name><name>com</name>.<name>jcraft</name>.<name>jsch</name>.<name>SftpException</name></name>;</import>
<import>import <name><name>com</name>.<name>jcraft</name>.<name>jsch</name>.<name>SftpATTRS</name></name>;</import>
<import>import <name><name>com</name>.<name>jcraft</name>.<name>jsch</name>.<name>SftpProgressMonitor</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>

<comment type="javadoc">/**
 * A helper object representing an scp download.
 */</comment>
<class><specifier>public</specifier> class <name>ScpFromMessageBySftp</name> <super><extends>extends <name>ScpFromMessage</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>HUNDRED_KILOBYTES</name> =<init> <expr>102400</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>remoteFile</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>localFile</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>isRecursive</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>verbose</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructor for ScpFromMessageBySftp.
     * @param verbose if true log extra information
     * @param session the Scp session to use
     * @param aRemoteFile the remote file name
     * @param aLocalFile  the local file
     * @param recursive   if true use recursion
     * @since Ant 1.7
     */</comment>
    <constructor><specifier>public</specifier> <name>ScpFromMessageBySftp</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>verbose</name></decl></param>,
                                <param><decl><type><name>Session</name></type> <name>session</name></decl></param>,
                                <param><decl><type><name>String</name></type> <name>aRemoteFile</name></decl></param>,
                                <param><decl><type><name>File</name></type> <name>aLocalFile</name></decl></param>,
                                <param><decl><type><name>boolean</name></type> <name>recursive</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>verbose</name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><name>aRemoteFile</name></expr></argument>, <argument><expr><name>aLocalFile</name></expr></argument>, <argument><expr><name>recursive</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructor for ScpFromMessageBySftp.
     * @param session the Scp session to use
     * @param aRemoteFile the remote file name
     * @param aLocalFile  the local file
     * @param recursive   if true use recursion
     */</comment>
    <constructor><specifier>public</specifier> <name>ScpFromMessageBySftp</name><parameter_list>(<param><decl><type><name>Session</name></type> <name>session</name></decl></param>,
                                <param><decl><type><name>String</name></type> <name>aRemoteFile</name></decl></param>,
                                <param><decl><type><name>File</name></type> <name>aLocalFile</name></decl></param>,
                                <param><decl><type><name>boolean</name></type> <name>recursive</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>false</expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><name>aRemoteFile</name></expr></argument>, <argument><expr><name>aLocalFile</name></expr></argument>, <argument><expr><name>recursive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructor for ScpFromMessageBySftp.
     * @param verbose if true log extra information
     * @param session the Scp session to use
     * @param aRemoteFile the remote file name
     * @param aLocalFile  the local file
     * @param recursive   if true use recursion
     * @param preserveLastModified whether to preserve file
     * modification times
     * @since Ant 1.8.0
     */</comment>
    <constructor><specifier>public</specifier> <name>ScpFromMessageBySftp</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>verbose</name></decl></param>,
                                <param><decl><type><name>Session</name></type> <name>session</name></decl></param>,
                                <param><decl><type><name>String</name></type> <name>aRemoteFile</name></decl></param>,
                                <param><decl><type><name>File</name></type> <name>aLocalFile</name></decl></param>,
                                <param><decl><type><name>boolean</name></type> <name>recursive</name></decl></param>,
                                <param><decl><type><name>boolean</name></type> <name>preserveLastModified</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>verbose</name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><name>aRemoteFile</name></expr></argument>, <argument><expr><name>aLocalFile</name></expr></argument>, <argument><expr><name>recursive</name></expr></argument>,
              <argument><expr><name>preserveLastModified</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>verbose</name></name> = <name>verbose</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>remoteFile</name></name> = <name>aRemoteFile</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>localFile</name></name> = <name>aLocalFile</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>isRecursive</name></name> = <name>recursive</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Carry out the transfer.
     * @throws IOException on i/o errors
     * @throws JSchException on errors detected by scp
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>JSchException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>ChannelSftp</name></type> <name>channel</name> =<init> <expr><call><name>openSftpChannel</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>channel</name>.<name>connect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <try>try <block>{
                <decl_stmt><decl><type><name>SftpATTRS</name></type> <name>attrs</name> =<init> <expr><call><name><name>channel</name>.<name>stat</name></name><argument_list>(<argument><expr><name>remoteFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>attrs</name>.<name>isDir</name></name><argument_list>()</argument_list></call> &amp;&amp; !<call><name><name>remoteFile</name>.<name>endsWith</name></name><argument_list>(<argument><expr>"/"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>remoteFile</name> = <name>remoteFile</name> + "/"</expr>;</expr_stmt>
                }</block></then></if>
            }</block> <catch>catch (<param><decl><type><name>SftpException</name></type> <name>ee</name></decl></param>) <block>{
                <comment type="line">// Ignored</comment>
            }</block></catch></try>
            <expr_stmt><expr><call><name>getDir</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>remoteFile</name></expr></argument>, <argument><expr><name>localFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>SftpException</name></type> <name>e</name></decl></param>) <block>{
            <decl_stmt><decl><type><name>JSchException</name></type> <name>schException</name> =<init> <expr>new <call><name>JSchException</name><argument_list>(<argument><expr>"Could not get '"+ <name>remoteFile</name>
                    +"' to '"+<name>localFile</name>+"' - "
                    +<call><name><name>e</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>schException</name>.<name>initCause</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><name>schException</name></expr>;</throw>
        }</block></catch> <finally>finally <block>{
            <if>if <condition>(<expr><name>channel</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>channel</name>.<name>disconnect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></finally></try>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"done\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>getDir</name><parameter_list>(<param><decl><type><name>ChannelSftp</name></type> <name>channel</name></decl></param>,
                        <param><decl><type><name>String</name></type> <name>remoteFile</name></decl></param>,
                        <param><decl><type><name>File</name></type> <name>localFile</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>SftpException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>pwd</name> =<init> <expr><name>remoteFile</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>remoteFile</name>.<name>lastIndexOf</name></name><argument_list>(<argument><expr>'/'</expr></argument>)</argument_list></call> != -1</expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name><name>remoteFile</name>.<name>length</name></name><argument_list>()</argument_list></call> &gt; 1</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>pwd</name> = <call><name><name>remoteFile</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>remoteFile</name>.<name>lastIndexOf</name></name><argument_list>(<argument><expr>'/'</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>channel</name>.<name>cd</name></name><argument_list>(<argument><expr><name>pwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name><name>localFile</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>localFile</name>.<name>mkdirs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name><name>java</name>.<name>util</name>.<name>Vector</name></name></type> <name>files</name> =<init> <expr><call><name><name>channel</name>.<name>ls</name></name><argument_list>(<argument><expr><name>remoteFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>size</name> =<init> <expr><call><name><name>files</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>size</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name><name>ChannelSftp</name>.<name>LsEntry</name></name></type> <name>le</name> =<init> <expr>(<name><name>ChannelSftp</name>.<name>LsEntry</name></name>) <call><name><name>files</name>.<name>elementAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>name</name> =<init> <expr><call><name><name>le</name>.<name>getFilename</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>le</name>.<name>getAttrs</name></name><argument_list>()</argument_list></call>.<call><name>isDir</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><call><name><name>name</name>.<name>equals</name></name><argument_list>(<argument><expr>"."</expr></argument>)</argument_list></call> || <call><name><name>name</name>.<name>equals</name></name><argument_list>(<argument><expr>".."</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <continue>continue;</continue>
                }</block></then></if>
                <expr_stmt><expr><call><name>getDir</name><argument_list>(<argument><expr><name>channel</name></expr></argument>,
                       <argument><expr><call><name><name>channel</name>.<name>pwd</name></name><argument_list>()</argument_list></call> + "/" + <name>name</name> + "/"</expr></argument>,
                       <argument><expr>new <call><name>File</name><argument_list>(<argument><expr><name>localFile</name></expr></argument>, <argument><expr><call><name><name>le</name>.<name>getFilename</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>getFile</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>le</name></expr></argument>, <argument><expr><name>localFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></for>
        <expr_stmt><expr><call><name><name>channel</name>.<name>cd</name></name><argument_list>(<argument><expr>".."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>getFile</name><parameter_list>(<param><decl><type><name>ChannelSftp</name></type> <name>channel</name></decl></param>,
                         <param><decl><type><name><name>ChannelSftp</name>.<name>LsEntry</name></name></type> <name>le</name></decl></param>,
                         <param><decl><type><name>File</name></type> <name>localFile</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>SftpException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>remoteFile</name> =<init> <expr><call><name><name>le</name>.<name>getFilename</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>localFile</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>path</name> =<init> <expr><call><name><name>localFile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>i</name> =<init> <expr><call><name><name>path</name>.<name>lastIndexOf</name></name><argument_list>(<argument><expr><name><name>File</name>.<name>pathSeparator</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>i</name> != -1</expr>)</condition><then> <block>{
                <if>if <condition>(<expr><call><name><name>path</name>.<name>length</name></name><argument_list>()</argument_list></call> &gt; <call><name><name>File</name>.<name>pathSeparator</name>.<name>length</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>path</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<call><name>mkdirs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></then></if>

        <if>if <condition>(<expr><call><name><name>localFile</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>localFile</name> = new <call><name>File</name><argument_list>(<argument><expr><name>localFile</name></expr></argument>, <argument><expr><name>remoteFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name>long</name></type> <name>startTime</name> =<init> <expr><call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>totalLength</name> =<init> <expr><call><name><name>le</name>.<name>getAttrs</name></name><argument_list>()</argument_list></call>.<call><name>getSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>SftpProgressMonitor</name></type> <name>monitor</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>trackProgress</name> =<init> <expr><call><name>getVerbose</name><argument_list>()</argument_list></call> &amp;&amp; <name>totalLength</name> &gt; <name>HUNDRED_KILOBYTES</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>trackProgress</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>monitor</name> = <call><name>getProgressMonitor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <try>try <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Receiving: " + <name>remoteFile</name> + " : " + <call><name><name>le</name>.<name>getAttrs</name></name><argument_list>()</argument_list></call>.<call><name>getSize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>channel</name>.<name>get</name></name><argument_list>(<argument><expr><name>remoteFile</name></expr></argument>, <argument><expr><call><name><name>localFile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
            <decl_stmt><decl><type><name>long</name></type> <name>endTime</name> =<init> <expr><call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>logStats</name><argument_list>(<argument><expr><name>startTime</name></expr></argument>, <argument><expr><name>endTime</name></expr></argument>, <argument><expr>(<name>int</name>) <name>totalLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
        <if>if <condition>(<expr><call><name>getPreserveLastModified</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call>.<call><name>setFileLastModified</name><argument_list>(<argument><expr><name>localFile</name></expr></argument>,
                                                         <argument><expr>((<name>long</name>) <call><name><name>le</name>.<name>getAttrs</name></name><argument_list>()</argument_list></call>
                                                          .<call><name>getMTime</name><argument_list>()</argument_list></call>)
                                                         * 1000</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>
}</block></class>
</unit>
