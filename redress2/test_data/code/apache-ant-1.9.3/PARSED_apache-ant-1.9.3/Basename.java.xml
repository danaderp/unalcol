<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\Basename.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>

<comment type="javadoc">/**
 * Sets a property to the base name of a specified file, optionally minus a
 * suffix.
 *
 * This task can accept the following attributes:
 * &lt;ul&gt;
 * &lt;li&gt;file
 * &lt;li&gt;property
 * &lt;li&gt;suffix
 * &lt;/ul&gt;
 * The &lt;b&gt;file&lt;/b&gt; and &lt;b&gt;property&lt;/b&gt; attributes are required. The
 * &lt;b&gt;suffix&lt;/b&gt; attribute can be specified either with or without
 * the &amp;quot;.&amp;quot;, and the result will be the same (ie., the
 * returned file name will be minus the .suffix).
 * &lt;p&gt;
 * When this task executes, it will set the specified property to the
 * value of the last element in the specified file. If file is a
 * directory, the basename will be the last directory element. If file
 * is a full-path filename, the basename will be the simple file name.
 * If a suffix is specified, and the specified file ends in that suffix,
 * the basename will be the simple file name without the suffix.
 *
 *
 * @since Ant 1.5
 *
 * @ant.task category="property"
 */</comment>

<class><specifier>public</specifier> class <name>Basename</name> <super><extends>extends <name>Task</name></extends></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>file</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>property</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>suffix</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * file or directory to get base name from
     * @param file file or directory to get base name from
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>file</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>file</name></name> = <name>file</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
    * Property to set base name to.
     * @param property name of property
    */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setProperty</name><parameter_list>(<param><decl><type><name>String</name></type> <name>property</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>property</name></name>  = <name>property</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
    * Optional suffix to remove from base name.
     * @param suffix suffix to remove from base name
    */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSuffix</name><parameter_list>(<param><decl><type><name>String</name></type> <name>suffix</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>suffix</name></name> = <name>suffix</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * do the work
     * @throws BuildException if required attributes are not supplied
     * property and attribute are required attributes
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>property</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"property attribute required"</expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>file</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"file attribute required"</expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>String</name></type> <name>value</name> =<init> <expr><call><name><name>file</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>suffix</name> != <name>null</name> &amp;&amp; <call><name><name>value</name>.<name>endsWith</name></name><argument_list>(<argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">// if the suffix does not starts with a '.' and the</comment>
            <comment type="line">// char preceding the suffix is a '.', we assume the user</comment>
            <comment type="line">// wants to remove the '.' as well (see docs)</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>pos</name> =<init> <expr><call><name><name>value</name>.<name>length</name></name><argument_list>()</argument_list></call> - <call><name><name>suffix</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>pos</name> &gt; 0 &amp;&amp; <call><name><name>suffix</name>.<name>charAt</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call> != '.'
                &amp;&amp; <call><name><name>value</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>pos</name> - 1</expr></argument>)</argument_list></call> == '.'</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>pos</name>--</expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>value</name> = <call><name><name>value</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>setNewProperty</name><argument_list>(<argument><expr><name>property</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>

</unit>
