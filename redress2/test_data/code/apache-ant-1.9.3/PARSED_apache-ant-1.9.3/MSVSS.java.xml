<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\vss\MSVSS.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>vss</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>EnumeratedAttribute</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>DateFormat</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>ParseException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Calendar</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Date</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>GregorianCalendar</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>Execute</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>LogStreamHandler</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Commandline</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>

<comment type="javadoc">/**
 * A base class for creating tasks for executing commands on Visual SourceSafe.
 * &lt;p&gt;
 * The class extends the 'exec' task as it operates by executing the ss.exe program
 * supplied with SourceSafe. By default the task expects ss.exe to be in the path,
 * you can override this be specifying the ssdir attribute.
 * &lt;/p&gt;
 * &lt;p&gt;
 * This class provides set and get methods for 'login' and 'vsspath' attributes. It
 * also contains constants for the flags that can be passed to SS.
 * &lt;/p&gt;
 *
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>MSVSS</name> <super><extends>extends <name>Task</name></extends> <implements>implements <name>MSVSSConstants</name></implements></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>ssDir</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>vssLogin</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>vssPath</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>serverPath</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**  Version */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>version</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**  Date */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>date</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**  Label */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>label</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**  Auto response */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>autoResponse</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**  Local path */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>localPath</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**  Comment */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>comment</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**  From label */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>fromLabel</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**  To label */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>toLabel</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**  Output file name */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>outputFileName</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**  User */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>user</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**  From date */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>fromDate</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**  To date */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>toDate</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**  History style */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>style</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**  Quiet defaults to false */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>quiet</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**  Recursive defaults to false */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>recursive</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**  Writable defaults to false */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>writable</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**  Fail on error defaults to true */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>failOnError</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**  Get local copy for checkout defaults to true */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>getLocalCopy</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**  Number of days offset for History */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>numDays</name> =<init> <expr><name><name>Integer</name>.<name>MIN_VALUE</name></name></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**  Date format for History */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>DateFormat</name></type> <name>dateFormat</name> =<init> <expr><call><name><name>DateFormat</name>.<name>getDateInstance</name></name><argument_list>(<argument><expr><name><name>DateFormat</name>.<name>SHORT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**  Timestamp for retreived files */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>CurrentModUpdated</name></type> <name>timestamp</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**  Behaviour for writable files */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>WritableFiles</name></type> <name>writableFiles</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Each sub-class must implemnt this method and return the constructed
     * command line to be executed. It is up to the sub-task to determine the
     * required attrubutes and their order.
     * @return    The Constructed command line.
     */</comment>
    <function_decl><type><specifier>abstract</specifier> <name>Commandline</name></type> <name>buildCmdLine</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="javadoc">/**
     * Directory where &lt;code&gt;ss.exe&lt;/code&gt; resides.
     * By default the task expects it to be in the PATH.
     * @param  dir  The directory containing ss.exe.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>setSsdir</name><parameter_list>(<param><decl><type><name>String</name></type> <name>dir</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>ssDir</name></name> = <call><name><name>FileUtils</name>.<name>translatePath</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Login to use when accessing VSS, formatted as "username,password".
     * &lt;p&gt;
     * You can omit the password if your database is not password protected.
     * If you have a password and omit it, Ant will hang.
     * @param  vssLogin  The login string to use.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>setLogin</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>vssLogin</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>vssLogin</name></name> = <name>vssLogin</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * SourceSafe path which specifies the project/file(s) you wish to perform
     * the action on.
     * &lt;p&gt;
     * A prefix of 'vss://' will be removed if specified.
     * @param  vssPath  The VSS project path.
     * @ant.attribute group="required"
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>setVsspath</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>vssPath</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>projectPath</name></decl>;</decl_stmt>
        <comment type="line">// CheckStyle:MagicNumber OFF</comment>
        <if>if <condition>(<expr><call><name><name>vssPath</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"vss://"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{ <comment type="line">//$NON-NLS-1$</comment>
            <expr_stmt><expr><name>projectPath</name> = <call><name><name>vssPath</name>.<name>substring</name></name><argument_list>(<argument><expr>5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>projectPath</name> = <name>vssPath</name></expr>;</expr_stmt>
        }</block></else></if>
        <comment type="line">// CheckStyle:MagicNumber ON</comment>

        <if>if <condition>(<expr><call><name><name>projectPath</name>.<name>startsWith</name></name><argument_list>(<argument><expr><name>PROJECT_PREFIX</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>vssPath</name></name> = <name>projectPath</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name><name>this</name>.<name>vssPath</name></name> = <name>PROJECT_PREFIX</name> + <name>projectPath</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Directory where &lt;code&gt;srssafe.ini&lt;/code&gt; resides.
     * @param  serverPath  The path to the VSS server.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>setServerpath</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>serverPath</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>serverPath</name></name> = <name>serverPath</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Indicates if the build should fail if the Sourcesafe command does. Defaults to true.
     * @param failOnError True if task should fail on any error.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>setFailOnError</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>failOnError</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>failOnError</name></name> = <name>failOnError</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Executes the task. &lt;br&gt;
     * Builds a command line to execute ss.exe and then calls Exec's run method
     * to execute the command line.
     * @throws BuildException if the command cannot execute.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Commandline</name></type> <name>commandLine</name> =<init> <expr><call><name>buildCmdLine</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> = <call><name>run</name><argument_list>(<argument><expr><name>commandLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>Execute</name>.<name>isFailure</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>getFailOnError</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>msg</name> =<init> <expr>"Failed executing: " + <call><name>formatCommandLine</name><argument_list>(<argument><expr><name>commandLine</name></expr></argument>)</argument_list></call>
                     + " With a return code of " + <name>result</name></expr></init></decl>;</decl_stmt>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
    }</block></function>

    <comment type="line">// Special setters for the sub-classes</comment>

    <comment type="javadoc">/**
     * Set the internal comment attribute.
     * @param comment the value to use.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setInternalComment</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>comment</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>comment</name></name> = <name>comment</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the auto response attribute.
     * @param autoResponse the value to use.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setInternalAutoResponse</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>autoResponse</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>autoResponse</name></name> = <name>autoResponse</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the date attribute.
     * @param date the value to use.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setInternalDate</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>date</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>date</name></name> = <name>date</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the date format attribute.
     * @param dateFormat the value to use.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setInternalDateFormat</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>DateFormat</name></type> <name>dateFormat</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>dateFormat</name></name> = <name>dateFormat</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the failOnError attribute.
     * @param failOnError the value to use.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setInternalFailOnError</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>failOnError</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>failOnError</name></name> = <name>failOnError</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the from date attribute.
     * @param fromDate the value to use.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setInternalFromDate</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>fromDate</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>fromDate</name></name> = <name>fromDate</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the from label attribute.
     * @param fromLabel the value to use.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setInternalFromLabel</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>fromLabel</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>fromLabel</name></name> = <name>fromLabel</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the label attribute.
     * @param label the value to use.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setInternalLabel</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>label</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>label</name></name> = <name>label</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the local path comment attribute.
     * @param localPath the value to use.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setInternalLocalPath</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>localPath</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>localPath</name></name> = <name>localPath</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the num days attribute.
     * @param numDays the value to use.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setInternalNumDays</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>int</name></type> <name>numDays</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>numDays</name></name> = <name>numDays</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the outputFileName comment attribute.
     * @param outputFileName the value to use.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setInternalOutputFilename</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>outputFileName</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>outputFileName</name></name> = <name>outputFileName</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the quiet attribute.
     * @param quiet the value to use.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setInternalQuiet</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>quiet</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>quiet</name></name> = <name>quiet</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the recursive attribute.
     * @param recursive the value to use.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setInternalRecursive</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>recursive</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>recursive</name></name> = <name>recursive</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the style attribute.
     * @param style the value to use.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setInternalStyle</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>style</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>style</name></name> = <name>style</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the to date attribute.
     * @param toDate the value to use.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setInternalToDate</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>toDate</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>toDate</name></name> = <name>toDate</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the to label attribute.
     * @param toLabel the value to use.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setInternalToLabel</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>toLabel</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>toLabel</name></name> = <name>toLabel</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the user attribute.
     * @param user the value to use.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setInternalUser</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>user</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>user</name></name> = <name>user</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the version attribute.
     * @param version the value to use.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setInternalVersion</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>version</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>version</name></name> = <name>version</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the writable attribute.
     * @param writable the value to use.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setInternalWritable</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>writable</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>writable</name></name> = <name>writable</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the timestamp attribute.
     * @param timestamp the value to use.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setInternalFileTimeStamp</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>CurrentModUpdated</name></type> <name>timestamp</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>timestamp</name></name> = <name>timestamp</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the writableFiles attribute.
     * @param writableFiles the value to use.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setInternalWritableFiles</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>WritableFiles</name></type> <name>writableFiles</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>writableFiles</name></name> = <name>writableFiles</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the getLocalCopy attribute.
     * @param getLocalCopy the value to use.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setInternalGetLocalCopy</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>getLocalCopy</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>getLocalCopy</name></name> = <name>getLocalCopy</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Gets the sscommand string. "ss" or "c:\path\to\ss"
     * @return    The path to ss.exe or just ss if sscommand is not set.
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>getSSCommand</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>ssDir</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>SS_EXE</name></expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name><name>ssDir</name>.<name>endsWith</name></name><argument_list>(<argument><expr><name><name>File</name>.<name>separator</name></name></expr></argument>)</argument_list></call> ? <name>ssDir</name> + <name>SS_EXE</name> : <name>ssDir</name>
                 + <name><name>File</name>.<name>separator</name></name> + <name>SS_EXE</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Gets the vssserverpath string.
     * @return    null if vssserverpath is not set.
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>getVsspath</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>vssPath</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Gets the quiet string. -O-
     * @return An empty string if quiet is not set or is false.
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>getQuiet</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>quiet</name> ? <name>FLAG_QUIET</name> : ""</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Gets the recursive string. "-R"
     * @return An empty string if recursive is not set or is false.
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>getRecursive</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>recursive</name> ? <name>FLAG_RECURSION</name> : ""</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Gets the writable string. "-W"
     * @return An empty string if writable is not set or is false.
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>getWritable</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>writable</name> ? <name>FLAG_WRITABLE</name> : ""</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Gets the label string. "-Lbuild1"
     * Max label length is 32 chars
     * @return An empty string if label is not set.
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>getLabel</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>shortLabel</name> =<init> <expr>""</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>label</name> != <name>null</name> &amp;&amp; <call><name><name>label</name>.<name>length</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>shortLabel</name> = <name>FLAG_LABEL</name> + <call><name>getShortLabel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>shortLabel</name></expr>;</return>
    }</block></function>
    <comment type="javadoc">/**
     * Return at most the 30 first chars of the label,
     * logging a warning message about the truncation
     * @return at most the 30 first chars of the label
     */</comment>
    <function><type><specifier>private</specifier> <name>String</name></type> <name>getShortLabel</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>shortLabel</name></decl>;</decl_stmt>
        <comment type="line">// CheckStyle:MagicNumber OFF</comment>
        <if>if <condition>(<expr><name>label</name> !=  <name>null</name> &amp;&amp; <call><name><name>label</name>.<name>length</name></name><argument_list>()</argument_list></call> &gt; 31</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>shortLabel</name> = <call><name><name>this</name>.<name>label</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>30</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Label is longer than 31 characters, truncated to: " + <name>shortLabel</name></expr></argument>,
                <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>shortLabel</name> = <name>label</name></expr>;</expr_stmt>
        }</block></else></if>
        <comment type="line">// CheckStyle:MagicNumber ON</comment>
        <return>return <expr><name>shortLabel</name></expr>;</return>
    }</block></function>
    <comment type="javadoc">/**
     * Gets the style string. "-Lbuild1"
     * @return An empty string if label is not set.
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>getStyle</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>style</name> != <name>null</name> ? <name>style</name> : ""</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Gets the version string. Returns the first specified of version "-V1.0",
     * date "-Vd01.01.01", label "-Vlbuild1".
     * @return An empty string if a version, date and label are not set.
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>getVersionDateLabel</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>versionDateLabel</name> =<init> <expr>""</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>version</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>versionDateLabel</name> = <name>FLAG_VERSION</name> + <name>version</name></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><name>date</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>versionDateLabel</name> = <name>FLAG_VERSION_DATE</name> + <name>date</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <comment type="line">// Use getShortLabel() so labels longer then 30 char are truncated</comment>
            <comment type="line">// and the user is warned</comment>
            <decl_stmt><decl><type><name>String</name></type> <name>shortLabel</name> =<init> <expr><call><name>getShortLabel</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>shortLabel</name> != <name>null</name> &amp;&amp; !<call><name><name>shortLabel</name>.<name>equals</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>versionDateLabel</name> = <name>FLAG_VERSION_LABEL</name> + <name>shortLabel</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></else></if></else></if>
        <return>return <expr><name>versionDateLabel</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Gets the version string.
     * @return An empty string if a version is not set.
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>getVersion</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>version</name> != <name>null</name> ? <name>FLAG_VERSION</name> + <name>version</name> : ""</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Gets the localpath string. "-GLc:\source" &lt;p&gt;
     * The localpath is created if it didn't exist.
     * @return An empty string if localpath is not set.
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>getLocalpath</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>lclPath</name> =<init> <expr>""</expr></init></decl>;</decl_stmt> <comment type="line">//set to empty str if no local path return</comment>
        <if>if <condition>(<expr><name>localPath</name> != <name>null</name></expr>)</condition><then> <block>{
            <comment type="line">//make sure m_LocalDir exists, create it if it doesn't</comment>
            <decl_stmt><decl><type><name>File</name></type> <name>dir</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>resolveFile</name><argument_list>(<argument><expr><name>localPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<call><name><name>dir</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>boolean</name></type> <name>done</name> =<init> <expr><call><name><name>dir</name>.<name>mkdirs</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr>!<name>done</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>String</name></type> <name>msg</name> =<init> <expr>"Directory " + <name>localPath</name> + " creation was not "
                            + "successful for an unknown reason"</expr></init></decl>;</decl_stmt>
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if>
                <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>log</name><argument_list>(<argument><expr>"Created dir: " + <call><name><name>dir</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>lclPath</name> = <name>FLAG_OVERRIDE_WORKING_DIR</name> + <name>localPath</name></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>lclPath</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Gets the comment string. "-Ccomment text"
     * @return A comment of "-" if comment is not set.
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>getComment</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>comment</name> != <name>null</name> ? <name>FLAG_COMMENT</name> + <name>comment</name> : <name>FLAG_COMMENT</name> + "-"</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Gets the auto response string. This can be Y "-I-Y" or N "-I-N".
     * @return The default value "-I-" if autoresponse is not set.
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>getAutoresponse</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>autoResponse</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>FLAG_AUTORESPONSE_DEF</name></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>autoResponse</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr>"Y"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name>FLAG_AUTORESPONSE_YES</name></expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>autoResponse</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr>"N"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name>FLAG_AUTORESPONSE_NO</name></expr>;</return>
        }</block></then> <else>else <block>{
            <return>return <expr><name>FLAG_AUTORESPONSE_DEF</name></expr>;</return>
        }</block></else></if></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Gets the login string. This can be user and password, "-Yuser,password"
     * or just user "-Yuser".
     * @return An empty string if login is not set.
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>getLogin</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>vssLogin</name> != <name>null</name> ? <name>FLAG_LOGIN</name> + <name>vssLogin</name> : ""</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Gets the output file string. "-Ooutput.file"
     * @return An empty string if user is not set.
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>getOutput</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>outputFileName</name> != <name>null</name> ? <name>FLAG_OUTPUT</name> + <name>outputFileName</name> : ""</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Gets the user string. "-Uusername"
     * @return An empty string if user is not set.
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>getUser</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>user</name> != <name>null</name> ? <name>FLAG_USER</name> + <name>user</name> : ""</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Gets the version string. This can be to-from "-VLbuild2~Lbuild1", from
     * "~Lbuild1" or to "-VLbuild2".
     * @return An empty string if neither tolabel or fromlabel are set.
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>getVersionLabel</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>fromLabel</name> == <name>null</name> &amp;&amp; <name>toLabel</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr>""</expr>;</return>
        }</block></then></if>
        <comment type="line">// CheckStyle:MagicNumber OFF</comment>
        <if>if <condition>(<expr><name>fromLabel</name> != <name>null</name> &amp;&amp; <name>toLabel</name> != <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name><name>fromLabel</name>.<name>length</name></name><argument_list>()</argument_list></call> &gt; 31</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>fromLabel</name> = <call><name><name>fromLabel</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>30</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"FromLabel is longer than 31 characters, truncated to: "
                    + <name>fromLabel</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><call><name><name>toLabel</name>.<name>length</name></name><argument_list>()</argument_list></call> &gt; 31</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>toLabel</name> = <call><name><name>toLabel</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>30</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"ToLabel is longer than 31 characters, truncated to: "
                    + <name>toLabel</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <return>return <expr><name>FLAG_VERSION_LABEL</name> + <name>toLabel</name> + <name>VALUE_FROMLABEL</name> + <name>fromLabel</name></expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr><name>fromLabel</name> != <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name><name>fromLabel</name>.<name>length</name></name><argument_list>()</argument_list></call> &gt; 31</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>fromLabel</name> = <call><name><name>fromLabel</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>30</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"FromLabel is longer than 31 characters, truncated to: "
                    + <name>fromLabel</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <return>return <expr><name>FLAG_VERSION</name> + <name>VALUE_FROMLABEL</name> + <name>fromLabel</name></expr>;</return>
        }</block></then> <else>else <block>{
            <if>if <condition>(<expr><call><name><name>toLabel</name>.<name>length</name></name><argument_list>()</argument_list></call> &gt; 31</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>toLabel</name> = <call><name><name>toLabel</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>30</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"ToLabel is longer than 31 characters, truncated to: "
                    + <name>toLabel</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <return>return <expr><name>FLAG_VERSION_LABEL</name> + <name>toLabel</name></expr>;</return>
        }</block></else></if></else></if>
        <comment type="line">// CheckStyle:MagicNumber ON</comment>
    }</block></function>

    <comment type="javadoc">/**
     * Gets the Version date string.
     * @return An empty string if neither Todate or from date are set.
     * @throws BuildException if there is an error.
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>getVersionDate</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>fromDate</name> == <name>null</name> &amp;&amp; <name>toDate</name> == <name>null</name>
            &amp;&amp; <name>numDays</name> == <name><name>Integer</name>.<name>MIN_VALUE</name></name></expr>)</condition><then> <block>{
            <return>return <expr>""</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>fromDate</name> != <name>null</name> &amp;&amp; <name>toDate</name> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>FLAG_VERSION_DATE</name> + <name>toDate</name> + <name>VALUE_FROMDATE</name> + <name>fromDate</name></expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr><name>toDate</name> != <name>null</name> &amp;&amp; <name>numDays</name> != <name><name>Integer</name>.<name>MIN_VALUE</name></name></expr>)</condition><then> <block>{
            <try>try <block>{
                <return>return <expr><name>FLAG_VERSION_DATE</name> + <name>toDate</name> + <name>VALUE_FROMDATE</name>
                        + <call><name>calcDate</name><argument_list>(<argument><expr><name>toDate</name></expr></argument>, <argument><expr><name>numDays</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block> <catch>catch (<param><decl><type><name>ParseException</name></type> <name>ex</name></decl></param>) <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>msg</name> =<init> <expr>"Error parsing date: " + <name>toDate</name></expr></init></decl>;</decl_stmt>
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></then> <else>else <if>if <condition>(<expr><name>fromDate</name> != <name>null</name> &amp;&amp; <name>numDays</name> != <name><name>Integer</name>.<name>MIN_VALUE</name></name></expr>)</condition><then> <block>{
            <try>try <block>{
                <return>return <expr><name>FLAG_VERSION_DATE</name> + <call><name>calcDate</name><argument_list>(<argument><expr><name>fromDate</name></expr></argument>, <argument><expr><name>numDays</name></expr></argument>)</argument_list></call>
                        + <name>VALUE_FROMDATE</name> + <name>fromDate</name></expr>;</return>
            }</block> <catch>catch (<param><decl><type><name>ParseException</name></type> <name>ex</name></decl></param>) <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>msg</name> =<init> <expr>"Error parsing date: " + <name>fromDate</name></expr></init></decl>;</decl_stmt>
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></then> <else>else <block>{
            <return>return <expr><name>fromDate</name> != <name>null</name> ? <name>FLAG_VERSION</name> + <name>VALUE_FROMDATE</name>
                    + <name>fromDate</name> : <name>FLAG_VERSION_DATE</name> + <name>toDate</name></expr>;</return>
        }</block></else></if></else></if></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Builds and returns the -G- flag if required.
     * @return An empty string if get local copy is true.
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>getGetLocalCopy</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>(!<name>getLocalCopy</name>) ? <name>FLAG_NO_GET</name> : ""</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Gets the value of the fail on error flag.
     * @return    True if the FailOnError flag has been set or if 'writablefiles=skip'.
     */</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>getFailOnError</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getWritableFiles</name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><name>WRITABLE_SKIP</name></expr></argument>)</argument_list></call> ? false : <name>failOnError</name></expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     * Gets the value set for the FileTimeStamp.
     * if it equals "current" then we return -GTC
     * if it equals "modified" then we return -GTM
     * if it equals "updated" then we return -GTU
     * otherwise we return -GTC
     *
     * @return The default file time flag, if not set.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getFileTimeStamp</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>timestamp</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr>""</expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>timestamp</name>.<name>getValue</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><name>TIME_MODIFIED</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name>FLAG_FILETIME_MODIFIED</name></expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>timestamp</name>.<name>getValue</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><name>TIME_UPDATED</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name>FLAG_FILETIME_UPDATED</name></expr>;</return>
        }</block></then> <else>else <block>{
            <return>return <expr><name>FLAG_FILETIME_DEF</name></expr>;</return>
        }</block></else></if></else></if></else></if>
    }</block></function>


    <comment type="javadoc">/**
     * Gets the value to determine the behaviour when encountering writable files.
     * @return An empty String, if not set.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getWritableFiles</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>writableFiles</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr>""</expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>writableFiles</name>.<name>getValue</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><name>WRITABLE_REPLACE</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name>FLAG_REPLACE_WRITABLE</name></expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>writableFiles</name>.<name>getValue</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><name>WRITABLE_SKIP</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">// ss.exe exits with '100', when files have been skipped</comment>
            <comment type="line">// so we have to ignore the failure</comment>
            <expr_stmt><expr><name>failOnError</name> = false</expr>;</expr_stmt>
            <return>return <expr><name>FLAG_SKIP_WRITABLE</name></expr>;</return>
        }</block></then> <else>else <block>{
            <return>return <expr>""</expr>;</return>
        }</block></else></if></else></if></else></if>
    }</block></function>

    <comment type="javadoc">/**
     *  Sets up the required environment and executes the command line.
     *
     * @param  cmd  The command line to execute.
     * @return      The return code from the exec'd process.
     */</comment>
    <function><type><specifier>private</specifier> <name>int</name></type> <name>run</name><parameter_list>(<param><decl><type><name>Commandline</name></type> <name>cmd</name></decl></param>)</parameter_list> <block>{
        <try>try <block>{
            <decl_stmt><decl><type><name>Execute</name></type> <name>exe</name> =<init> <expr>new <call><name>Execute</name><argument_list>(<argument><expr>new <call><name>LogStreamHandler</name><argument_list>(<argument><expr><name>this</name></expr></argument>,
                    <argument><expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></argument>,
                    <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// If location of ss.ini is specified we need to set the</comment>
            <comment type="line">// environment-variable SSDIR to this value</comment>
            <if>if <condition>(<expr><name>serverPath</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>env</name> =<init> <expr><call><name><name>exe</name>.<name>getEnvironment</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>env</name> == <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>env</name> = new <name><name>String</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
                }</block></then></if>
                <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>newEnv</name> =<init> <expr>new <name><name>String</name><index>[<expr><name><name>env</name>.<name>length</name></name> + 1</expr>]</index></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>newEnv</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>env</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>newEnv</name><index>[<expr><name><name>env</name>.<name>length</name></name></expr>]</index></name> = "SSDIR=" + <name>serverPath</name></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>exe</name>.<name>setEnvironment</name></name><argument_list>(<argument><expr><name>newEnv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><call><name><name>exe</name>.<name>setAntRun</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>exe</name>.<name>setWorkingDirectory</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>exe</name>.<name>setCommandline</name></name><argument_list>(<argument><expr><call><name><name>cmd</name>.<name>getCommandline</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// Use the OS launcher so we get environment variables</comment>
            <expr_stmt><expr><call><name><name>exe</name>.<name>setVMLauncher</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>exe</name>.<name>execute</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

     <comment type="javadoc">/**
     * Calculates the start date for version comparison.
     * &lt;p&gt;
     * Calculates the date numDay days earlier than startdate.
     * @param   startDate    The start date.
     * @param   daysToAdd     The number of days to add.
     * @return The calculated date.
     * @throws ParseException
     */</comment>
    <function><type><specifier>private</specifier> <name>String</name></type> <name>calcDate</name><parameter_list>(<param><decl><type><name>String</name></type> <name>startDate</name></decl></param>, <param><decl><type><name>int</name></type> <name>daysToAdd</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>ParseException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>Calendar</name></type> <name>calendar</name> =<init> <expr>new <call><name>GregorianCalendar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>currentDate</name> =<init> <expr><call><name><name>dateFormat</name>.<name>parse</name></name><argument_list>(<argument><expr><name>startDate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>calendar</name>.<name>setTime</name></name><argument_list>(<argument><expr><name>currentDate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>calendar</name>.<name>add</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>DATE</name></name></expr></argument>, <argument><expr><name>daysToAdd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>dateFormat</name>.<name>format</name></name><argument_list>(<argument><expr><call><name><name>calendar</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Changes the password to '***' so it isn't displayed on screen if the build fails
     *
     * @param cmd   The command line to clean
     * @return The command line as a string with out the password
     */</comment>
    <function><type><specifier>private</specifier> <name>String</name></type> <name>formatCommandLine</name><parameter_list>(<param><decl><type><name>Commandline</name></type> <name>cmd</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>sBuff</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>(<argument><expr><call><name><name>cmd</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>indexUser</name> =<init> <expr><call><name><name>sBuff</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>.<call><name>indexOf</name><argument_list>(<argument><expr><name>FLAG_LOGIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>indexUser</name> &gt; 0</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>indexPass</name> =<init> <expr><call><name><name>sBuff</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>.<call><name>indexOf</name><argument_list>(<argument><expr>","</expr></argument>, <argument><expr><name>indexUser</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>indexAfterPass</name> =<init> <expr><call><name><name>sBuff</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>.<call><name>indexOf</name><argument_list>(<argument><expr>" "</expr></argument>, <argument><expr><name>indexPass</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr><name>indexPass</name> + 1</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>indexAfterPass</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <expr_stmt><expr><call><name><name>sBuff</name>.<name>setCharAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr>'*'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></then></if>
        <return>return <expr><call><name><name>sBuff</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Extention of EnumeratedAttribute to hold the values for file time stamp.
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>CurrentModUpdated</name> <super><extends>extends <name>EnumeratedAttribute</name></extends></super> <block>{
        <comment type="javadoc">/**
         * Gets the list of allowable values.
         * @return The values.
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getValues</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr>new <name><name>String</name><index>[]</index></name> <block>{<expr><name>TIME_CURRENT</name></expr>, <expr><name>TIME_MODIFIED</name></expr>, <expr><name>TIME_UPDATED</name></expr>}</block></expr>;</return>
        }</block></function>
    }</block></class>

    <comment type="javadoc">/**
     * Extention of EnumeratedAttribute to hold the values for writable filess.
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>WritableFiles</name> <super><extends>extends <name>EnumeratedAttribute</name></extends></super> <block>{
        <comment type="javadoc">/**
         * Gets the list of allowable values.
         * @return The values.
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getValues</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr>new <name><name>String</name><index>[]</index></name> <block>{<expr><name>WRITABLE_REPLACE</name></expr>, <expr><name>WRITABLE_SKIP</name></expr>, <expr><name>WRITABLE_FAIL</name></expr>}</block></expr>;</return>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
