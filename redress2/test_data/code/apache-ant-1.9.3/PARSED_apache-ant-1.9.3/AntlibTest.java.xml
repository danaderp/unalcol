<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\taskdefs\AntlibTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildFileTest</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>

<comment type="javadoc">/**
 */</comment>
<class><specifier>public</specifier> class <name>AntlibTest</name> <super><extends>extends <name>BuildFileTest</name></extends></super> <block>{
    <constructor><specifier>public</specifier> <name>AntlibTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr>"src/etc/testcases/taskdefs/antlib.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * only do the antlib tests if we are in the same JVM as ant.
     * @return
     */</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>isSharedJVM</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>property</name> =<init> <expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"tests.and.ant.share.classloader"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>property</name>!=<name>null</name> &amp;&amp; <call><name><name>Project</name>.<name>toBoolean</name></name><argument_list>(<argument><expr><name>property</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testAntlibFile</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectLog</name><argument_list>(<argument><expr>"antlib.file"</expr></argument>, <argument><expr>"MyTask called"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Confirms that all matching resources will be used, so that you
     * can collect several antlibs in one Definer call.
     * @see "http://issues.apache.org/bugzilla/show_bug.cgi?id=24024"
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testAntlibResource</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectLog</name><argument_list>(<argument><expr>"antlib.resource"</expr></argument>, <argument><expr>"MyTask called-and-then-MyTask2 called"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNsCurrent</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectLog</name><argument_list>(<argument><expr>"ns.current"</expr></argument>, <argument><expr>"Echo2 inside a macroHello from x:p"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>testAntlib_uri</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isSharedJVM</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"antlib_uri"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testAntlib_uri_auto</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isSharedJVM</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"antlib_uri_auto"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testAntlib_uri_auto2</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isSharedJVM</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"antlib_uri_auto2"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>
    
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>MyTask</name> <super><extends>extends <name>Task</name></extends></super> <block>{
        <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"MyTask called"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>MyTask2</name> <super><extends>extends <name>Task</name></extends></super> <block>{
        <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"MyTask2 called"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>

}</block></class>

</unit>
