<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\types\resources\FileResourceIterator.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>NoSuchElementException</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Resource</name></name>;</import>

<comment type="javadoc">/**
 * Iterator of FileResources from filenames.
 * @since Ant 1.7
 */</comment>
<class><specifier>public</specifier> class <name>FileResourceIterator</name> <super><implements>implements <name><name>Iterator</name><argument_list>&lt;<argument><name>Resource</name></argument>&gt;</argument_list></name></implements></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>Project</name></type> <name>project</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>basedir</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name><index>[]</index></type> <name>files</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>pos</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Construct a new FileResourceIterator.
     * @deprecated in favor of {@link FileResourceIterator#FileResourceIterator(Project)}
     */</comment>
    <constructor><specifier>public</specifier> <name>FileResourceIterator</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <comment type="javadoc">/**
     * Create a new FileResourceIterator.
     * @param project associated Project instance
     * @since Ant 1.8
     */</comment>
    <constructor><specifier>public</specifier> <name>FileResourceIterator</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>project</name></name> = <name>project</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Construct a new FileResourceIterator relative to the specified
     * base directory.
     * @param basedir the base directory of this instance.
     * @deprecated in favor of {@link FileResourceIterator#FileResourceIterator(Project, File)}
     */</comment>
    <constructor><specifier>public</specifier> <name>FileResourceIterator</name><parameter_list>(<param><decl><type><name>File</name></type> <name>basedir</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr><name>basedir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Construct a new FileResourceIterator relative to the specified
     * base directory.
     * @param project associated Project instance
     * @param basedir the base directory of this instance.
     * @since Ant 1.8
     */</comment>
    <constructor><specifier>public</specifier> <name>FileResourceIterator</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>, <param><decl><type><name>File</name></type> <name>basedir</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>basedir</name></name> = <name>basedir</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Construct a new FileResourceIterator over the specified filenames,
     * relative to the specified base directory.
     * @param basedir the base directory of this instance.
     * @param filenames the String[] of filenames.
     * @deprecated in favor of {@link FileResourceIterator#FileResourceIterator(Project, File, String[])}
     */</comment>
    <constructor><specifier>public</specifier> <name>FileResourceIterator</name><parameter_list>(<param><decl><type><name>File</name></type> <name>basedir</name></decl></param>, <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>filenames</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr><name>basedir</name></expr></argument>, <argument><expr><name>filenames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Construct a new FileResourceIterator over the specified filenames,
     * relative to the specified base directory.
     * @param project associated Project instance
     * @param basedir the base directory of this instance.
     * @param filenames the String[] of filenames.
     * @since Ant 1.8
     */</comment>
    <constructor><specifier>public</specifier> <name>FileResourceIterator</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>, <param><decl><type><name>File</name></type> <name>basedir</name></decl></param>, <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>filenames</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr><name>basedir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addFiles</name><argument_list>(<argument><expr><name>filenames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Add an array of filenames to this FileResourceIterator.
     * @param s the filenames to add.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addFiles</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>s</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>start</name> =<init> <expr>(<name>files</name> == <name>null</name>) ? 0 : <name><name>files</name>.<name>length</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>newfiles</name> =<init> <expr>new <name><name>String</name><index>[<expr><name>start</name> + <name><name>s</name>.<name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>start</name> &gt; 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>files</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>newfiles</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>files</name> = <name>newfiles</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>files</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name><name>s</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Find out whether this FileResourceIterator has more elements.
     * @return whether there are more Resources to iterate over.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasNext</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>pos</name> &lt; <name><name>files</name>.<name>length</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the next element from this FileResourceIterator.
     * @return the next Object.
     */</comment>
    <function><type><specifier>public</specifier> <name>Resource</name></type> <name>next</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>nextResource</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Not implemented.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>remove</name><parameter_list>()</parameter_list> <block>{
        <throw>throw <expr>new <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    }</block></function>

    <comment type="javadoc">/**
     * Convenience method to return the next resource.
     * @return the next File.
     */</comment>
    <function><type><specifier>public</specifier> <name>FileResource</name></type> <name>nextResource</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr>!<call><name>hasNext</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>NoSuchElementException</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>FileResource</name></type> <name>result</name> =<init> <expr>new <call><name>FileResource</name><argument_list>(<argument><expr><name>basedir</name></expr></argument>, <argument><expr><name><name>files</name><index>[<expr><name>pos</name>++</expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>result</name>.<name>setProject</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

}</block></class>
</unit>
