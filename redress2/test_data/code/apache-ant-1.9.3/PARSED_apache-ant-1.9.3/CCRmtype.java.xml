<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\clearcase\CCRmtype.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>clearcase</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>Execute</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Commandline</name></name>;</import>

<comment type="javadoc">/**
 * Task to perform rmtype command to ClearCase.
 * &lt;p&gt;
 * The following attributes are interpreted:
 * &lt;table border="1"&gt;
 *   &lt;tr&gt;
 *     &lt;th&gt;Attribute&lt;/th&gt;
 *     &lt;th&gt;Values&lt;/th&gt;
 *     &lt;th&gt;Required&lt;/th&gt;
 *   &lt;/tr&gt;
 *   &lt;tr&gt;
 *      &lt;td&gt;typekind&lt;/td&gt;
 *      &lt;td&gt;The kind of type to create. Valid types are:&lt;br&gt;
 *              attype                         attribute type&lt;br&gt;
 *              brtype                         branch type&lt;br&gt;
 *              eltype                         element type&lt;br&gt;
 *              hltype                         hyperlink type&lt;br&gt;
 *              lbtype                         label type&lt;br&gt;
 *              trtype                         trigger type&lt;br&gt;
 *      &lt;/td&gt;
 *      &lt;td&gt;Yes&lt;/td&gt;
 *   &lt;tr&gt;
 *   &lt;tr&gt;
 *      &lt;td&gt;typename&lt;/td&gt;
 *      &lt;td&gt;The name of the type to remove&lt;/td&gt;
 *      &lt;td&gt;Yes&lt;/td&gt;
 *   &lt;tr&gt;
 *   &lt;tr&gt;
 *      &lt;td&gt;vob&lt;/td&gt;
 *      &lt;td&gt;Name of the VOB&lt;/td&gt;
 *      &lt;td&gt;No&lt;/td&gt;
 *   &lt;tr&gt;
 *   &lt;tr&gt;
 *      &lt;td&gt;ignore&lt;/td&gt;
 *      &lt;td&gt;Used with trigger types only. Forces removal of trigger type
 *          even if a pre-operation trigger would prevent its removal&lt;/td&gt;
 *      &lt;td&gt;No&lt;/td&gt;
 *   &lt;tr&gt;
 *   &lt;tr&gt;
 *      &lt;td&gt;rmall&lt;/td&gt;
 *      &lt;td&gt;Removes all instances of a type and the type object itself&lt;/td&gt;
 *      &lt;td&gt;No&lt;/td&gt;
 *   &lt;tr&gt;
 *   &lt;tr&gt;
 *      &lt;td&gt;comment&lt;/td&gt;
 *      &lt;td&gt;Specify a comment. Only one of comment or cfile may be used.&lt;/td&gt;
 *      &lt;td&gt;No&lt;/td&gt;
 *   &lt;tr&gt;
 *   &lt;tr&gt;
 *      &lt;td&gt;commentfile&lt;/td&gt;
 *      &lt;td&gt;Specify a file containing a comment. Only one of comment or cfile
 *          may be used.&lt;/td&gt;
 *      &lt;td&gt;No&lt;/td&gt;
 *   &lt;tr&gt;
 *   &lt;tr&gt;
 *      &lt;td&gt;failonerr&lt;/td&gt;
 *      &lt;td&gt;Throw an exception if the command fails. Default is true&lt;/td&gt;
 *      &lt;td&gt;No&lt;/td&gt;
 *   &lt;tr&gt;
 * &lt;/table&gt;
 *
 */</comment>
<class><specifier>public</specifier> class <name>CCRmtype</name> <super><extends>extends <name>ClearCase</name></extends></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>mTypeKind</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>mTypeName</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>mVOB</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>mComment</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>mCfile</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>mRmall</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>mIgnore</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Executes the task.
     * &lt;p&gt;
     * Builds a command line to execute cleartool and then calls Exec's run method
     * to execute the command line.
     * @throws BuildException if the command fails and failonerr is set to true
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>Commandline</name></type> <name>commandLine</name> =<init> <expr>new <call><name>Commandline</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

        <comment type="line">// Check for required attributes</comment>
        <if>if <condition>(<expr><call><name>getTypeKind</name><argument_list>()</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Required attribute TypeKind not specified"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>getTypeName</name><argument_list>()</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Required attribute TypeName not specified"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <comment type="line">// build the command line from what we got. the format is</comment>
        <comment type="line">// cleartool rmtype [options...] type-selector...</comment>
        <comment type="line">// as specified in the CLEARTOOL help</comment>
        <expr_stmt><expr><call><name><name>commandLine</name>.<name>setExecutable</name></name><argument_list>(<argument><expr><call><name>getClearToolCommand</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>commandLine</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>COMMAND_RMTYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>checkOptions</name><argument_list>(<argument><expr><name>commandLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr>!<call><name>getFailOnErr</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>log</name><argument_list>(<argument><expr>"Ignoring any errors that occur for: "
                    + <call><name>getTypeSpecifier</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>result</name> = <call><name>run</name><argument_list>(<argument><expr><name>commandLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>Execute</name>.<name>isFailure</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>getFailOnErr</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>msg</name> =<init> <expr>"Failed executing: " + <call><name><name>commandLine</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
    }</block></function>


    <comment type="javadoc">/**
     * Check the command line options.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>checkOptions</name><parameter_list>(<param><decl><type><name>Commandline</name></type> <name>cmd</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>getIgnore</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">// -ignore</comment>
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>FLAG_IGNORE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>getRmAll</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">// -rmall -force</comment>
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>FLAG_RMALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>FLAG_FORCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>getComment</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <comment type="line">// -c</comment>
            <expr_stmt><expr><call><name>getCommentCommand</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <if>if <condition>(<expr><call><name>getCommentFile</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                <comment type="line">// -cfile</comment>
                <expr_stmt><expr><call><name>getCommentFileCommand</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>FLAG_NOCOMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></else></if>

        <comment type="line">// type-kind:type-name</comment>
        <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name>getTypeSpecifier</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the ignore flag
     *
     * @param ignore the status to set the flag to
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setIgnore</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>ignore</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>mIgnore</name> = <name>ignore</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get ignore flag status
     *
     * @return boolean containing status of ignore flag
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getIgnore</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>mIgnore</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set rmall flag
     *
     * @param rmall the status to set the flag to
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRmAll</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>rmall</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>mRmall</name> = <name>rmall</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get rmall flag status
     *
     * @return boolean containing status of rmall flag
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getRmAll</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>mRmall</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set comment string
     *
     * @param comment the comment string
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setComment</name><parameter_list>(<param><decl><type><name>String</name></type> <name>comment</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>mComment</name> = <name>comment</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get comment string
     *
     * @return String containing the comment
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getComment</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>mComment</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set comment file
     *
     * @param cfile the path to the comment file
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCommentFile</name><parameter_list>(<param><decl><type><name>String</name></type> <name>cfile</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>mCfile</name> = <name>cfile</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get comment file
     *
     * @return String containing the path to the comment file
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getCommentFile</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>mCfile</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set type-kind string
     *
     * @param tk the type-kind string
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTypeKind</name><parameter_list>(<param><decl><type><name>String</name></type> <name>tk</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>mTypeKind</name> = <name>tk</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get type-kind string
     *
     * @return String containing the type-kind
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getTypeKind</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>mTypeKind</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set type-name string
     *
     * @param tn the type-name string
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTypeName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>tn</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>mTypeName</name> = <name>tn</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get type-name string
     *
     * @return String containing the type-name
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getTypeName</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>mTypeName</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the VOB name
     *
     * @param vob the VOB name
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setVOB</name><parameter_list>(<param><decl><type><name>String</name></type> <name>vob</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>mVOB</name> = <name>vob</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get VOB name
     *
     * @return String containing VOB name
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getVOB</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>mVOB</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the 'type-specifier' string
     *
     * @return the 'type-kind:type-name@vob' specifier
     *
     */</comment>
    <function><type><specifier>private</specifier> <name>String</name></type> <name>getTypeSpecifier</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>tkind</name> =<init> <expr><call><name>getTypeKind</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>tname</name> =<init> <expr><call><name>getTypeName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>typeSpec</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

        <comment type="line">// Return the type-selector</comment>
        <expr_stmt><expr><name>typeSpec</name> = <name>tkind</name> + ":" + <name>tname</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>getVOB</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>typeSpec</name> += "@" + <call><name>getVOB</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>typeSpec</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the 'comment' command
     *
     * @param cmd containing the command line string with or
     *        without the comment flag and string appended
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>getCommentCommand</name><parameter_list>(<param><decl><type><name>Commandline</name></type> <name>cmd</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>getComment</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <comment type="block">/* Had to make two separate commands here because if a space is
               inserted between the flag and the value, it is treated as a
               Windows filename with a space and it is enclosed in double
               quotes ("). This breaks clearcase.
            */</comment>
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>FLAG_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name>getComment</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Get the 'commentfile' command
     *
     * @param cmd containing the command line string with or
     *        without the commentfile flag and file appended
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>getCommentFileCommand</name><parameter_list>(<param><decl><type><name>Commandline</name></type> <name>cmd</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>getCommentFile</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <comment type="block">/* Had to make two separate commands here because if a space is
               inserted between the flag and the value, it is treated as a
               Windows filename with a space and it is enclosed in double
               quotes ("). This breaks clearcase.
            */</comment>
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>FLAG_COMMENTFILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name>getCommentFile</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>


    <comment type="javadoc">/**
     * -ignore flag -- ignore pre-trigger operations when removing a trigger type
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FLAG_IGNORE</name> =<init> <expr>"-ignore"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * -rmall flag -- removes all instances of a type and the type object itself
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FLAG_RMALL</name> =<init> <expr>"-rmall"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * -force flag -- suppresses confirmation prompts
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FLAG_FORCE</name> =<init> <expr>"-force"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * -c flag -- comment to attach to the file
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FLAG_COMMENT</name> =<init> <expr>"-c"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * -cfile flag -- file containing a comment to attach to the file
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FLAG_COMMENTFILE</name> =<init> <expr>"-cfile"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * -nc flag -- no comment is specified
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FLAG_NOCOMMENT</name> =<init> <expr>"-nc"</expr></init></decl>;</decl_stmt>

}</block></class>

</unit>
