<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\util\facade\ImplementationSpecificArgument.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>facade</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Commandline</name></name>;</import>

<comment type="javadoc">/**
 * Extension of Commandline.Argument with a new attribute that chooses
 * a specific implementation of the facade.
 *
 *
 * @since Ant 1.5
 */</comment>
<class><specifier>public</specifier> class <name>ImplementationSpecificArgument</name> <super><extends>extends <name>Commandline</name>.<name>Argument</name></extends></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>impl</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Constructor for ImplementationSpecificArgument. */</comment>
    <constructor><specifier>public</specifier> <name>ImplementationSpecificArgument</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Set the implementation this argument is for.
     * @param impl the implementation this command line argument is for.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setImplementation</name><parameter_list>(<param><decl><type><name>String</name></type> <name>impl</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>impl</name></name> = <name>impl</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Return the parts this Argument consists of, if the
     * implementation matches the chosen implementation.
     * @see org.apache.tools.ant.types.Commandline.Argument#getParts()
     * @param chosenImpl the implementation to check against.
     * @return the parts if the implementation matches or an zero length
     *         array if not.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>String</name><index>[]</index></type> <name>getParts</name><parameter_list>(<param><decl><type><name>String</name></type> <name>chosenImpl</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>impl</name> == <name>null</name> || <call><name><name>impl</name>.<name>equals</name></name><argument_list>(<argument><expr><name>chosenImpl</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>super</name>.<name>getParts</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
            <return>return <expr>new <name><name>String</name><index>[<expr>0</expr>]</index></name></expr>;</return>
        }</block></else></if>
    }</block></function>
}</block></class>
</unit>
