<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\ssh\AbstractSshMessage.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>ssh</name></name>;</package>

<import>import <name><name>com</name>.<name>jcraft</name>.<name>jsch</name>.<name>Channel</name></name>;</import>
<import>import <name><name>com</name>.<name>jcraft</name>.<name>jsch</name>.<name>ChannelExec</name></name>;</import>
<import>import <name><name>com</name>.<name>jcraft</name>.<name>jsch</name>.<name>JSchException</name></name>;</import>
<import>import <name><name>com</name>.<name>jcraft</name>.<name>jsch</name>.<name>Session</name></name>;</import>
<import>import <name><name>com</name>.<name>jcraft</name>.<name>jsch</name>.<name>ChannelSftp</name></name>;</import>
<import>import <name><name>com</name>.<name>jcraft</name>.<name>jsch</name>.<name>SftpProgressMonitor</name></name>;</import>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>OutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>NumberFormat</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>

<comment type="javadoc">/**
 * Abstract class for ssh upload and download
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>AbstractSshMessage</name> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>double</name></type> <name>ONE_SECOND</name> =<init> <expr>1000.0</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Session</name></type> <name>session</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>verbose</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>LogListener</name></type> <name>listener</name> =<init> <expr>new <class><super><name>LogListener</name></super><argument_list>()</argument_list> <block>{
        <function><type><specifier>public</specifier> <name>void</name></type> <name>log</name><parameter_list>(<param><decl><type><name>String</name></type> <name>message</name></decl></param>)</parameter_list> <block>{
            <comment type="line">// do nothing;</comment>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructor for AbstractSshMessage
     * @param session the ssh session to use
     */</comment>
    <constructor><specifier>public</specifier> <name>AbstractSshMessage</name><parameter_list>(<param><decl><type><name>Session</name></type> <name>session</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>false</expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructor for AbstractSshMessage
     * @param verbose if true do verbose logging
     * @param session the ssh session to use
     * @since Ant 1.6.2
     */</comment>
    <constructor><specifier>public</specifier> <name>AbstractSshMessage</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>verbose</name></decl></param>, <param><decl><type><name>Session</name></type> <name>session</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>verbose</name></name> = <name>verbose</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>session</name></name> = <name>session</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Open an ssh channel.
     * @param command the command to use
     * @return the channel
     * @throws JSchException on error
     */</comment>
    <function><type><specifier>protected</specifier> <name>Channel</name></type> <name>openExecChannel</name><parameter_list>(<param><decl><type><name>String</name></type> <name>command</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>JSchException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>ChannelExec</name></type> <name>channel</name> =<init> <expr>(<name>ChannelExec</name>) <call><name><name>session</name>.<name>openChannel</name></name><argument_list>(<argument><expr>"exec"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>channel</name>.<name>setCommand</name></name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>channel</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Open an ssh sftp channel.
     * @return the channel
     * @throws JSchException on error
     */</comment>
    <function><type><specifier>protected</specifier> <name>ChannelSftp</name></type> <name>openSftpChannel</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>JSchException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>ChannelSftp</name></type> <name>channel</name> =<init> <expr>(<name>ChannelSftp</name>) <call><name><name>session</name>.<name>openChannel</name></name><argument_list>(<argument><expr>"sftp"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><name>channel</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Send an ack.
     * @param out the output stream to use
     * @throws IOException on error
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>sendAck</name><parameter_list>(<param><decl><type><name>OutputStream</name></type> <name>out</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>buf</name> =<init> <expr>new <name><name>byte</name><index>[<expr>1</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>buf</name><index>[<expr>0</expr>]</index></name> = 0</expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>out</name>.<name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Reads the response, throws a BuildException if the response
     * indicates an error.
     * @param in the input stream to use
     * @throws IOException on I/O error
     * @throws BuildException on other errors
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>waitForAck</name><parameter_list>(<param><decl><type><name>InputStream</name></type> <name>in</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>b</name> =<init> <expr><call><name><name>in</name>.<name>read</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// b may be 0 for success,</comment>
        <comment type="line">//          1 for error,</comment>
        <comment type="line">//          2 for fatal error,</comment>

        <if>if <condition>(<expr><name>b</name> == -1</expr>)</condition><then> <block>{
            <comment type="line">// didn't receive any response</comment>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"No response from server"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then> <else>else <if>if <condition>(<expr><name>b</name> != 0</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>StringBuffer</name></type> <name>sb</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>c</name> =<init> <expr><call><name><name>in</name>.<name>read</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>c</name> &gt; 0 &amp;&amp; <name>c</name> != '\n'</expr>)</condition> <block>{
                <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>(<name>char</name>) <name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>c</name> = <call><name><name>in</name>.<name>read</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></while>

            <if>if <condition>(<expr><name>b</name> == 1</expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"server indicated an error: "
                                         + <call><name><name>sb</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then> <else>else <if>if <condition>(<expr><name>b</name> == 2</expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"server indicated a fatal error: "
                                         + <call><name><name>sb</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then> <else>else <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"unknown response, code " + <name>b</name>
                                         + " message: " + <call><name><name>sb</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></else></if></else></if>
        }</block></then></if></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Carry out the transfer.
     * @throws IOException on I/O errors
     * @throws JSchException on ssh errors
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>JSchException</name></expr></argument></throws>;</function_decl>

    <comment type="javadoc">/**
     * Set a log listener.
     * @param aListener the log listener
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLogListener</name><parameter_list>(<param><decl><type><name>LogListener</name></type> <name>aListener</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>listener</name> = <name>aListener</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Log a message to the log listener.
     * @param message the message to log
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>log</name><parameter_list>(<param><decl><type><name>String</name></type> <name>message</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>listener</name>.<name>log</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Log transfer stats to the log listener.
     * @param timeStarted the time started
     * @param timeEnded   the finishing time
     * @param totalLength the total length
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>logStats</name><parameter_list>(<param><decl><type><name>long</name></type> <name>timeStarted</name></decl></param>,
                             <param><decl><type><name>long</name></type> <name>timeEnded</name></decl></param>,
                             <param><decl><type><name>long</name></type> <name>totalLength</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>duration</name> =<init> <expr>(<name>timeEnded</name> - <name>timeStarted</name>) / <name>ONE_SECOND</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>NumberFormat</name></type> <name>format</name> =<init> <expr><call><name><name>NumberFormat</name>.<name>getNumberInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>format</name>.<name>setMaximumFractionDigits</name></name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>format</name>.<name>setMinimumFractionDigits</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>listener</name>.<name>log</name></name><argument_list>(<argument><expr>"File transfer time: " + <call><name><name>format</name>.<name>format</name></name><argument_list>(<argument><expr><name>duration</name></expr></argument>)</argument_list></call>
            + " Average Rate: " + <call><name><name>format</name>.<name>format</name></name><argument_list>(<argument><expr><name>totalLength</name> / <name>duration</name></expr></argument>)</argument_list></call>
            + " B/s"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Is the verbose attribute set.
     * @return true if the verbose attribute is set
     * @since Ant 1.6.2
     */</comment>
    <function><type><specifier>protected</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>getVerbose</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>verbose</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Track progress every 10% if 100kb &lt; filesize &lt; 1mb. For larger
     * files track progress for every percent transmitted.
     * @param filesize the size of the file been transmitted
     * @param totalLength the total transmission size
     * @param percentTransmitted the current percent transmitted
     * @return the percent that the file is of the total
     */</comment>
    <function><type><specifier>protected</specifier> <specifier>final</specifier> <name>int</name></type> <name>trackProgress</name><parameter_list>(<param><decl><type><name>long</name></type> <name>filesize</name></decl></param>, <param><decl><type><name>long</name></type> <name>totalLength</name></decl></param>,
                                      <param><decl><type><name>int</name></type> <name>percentTransmitted</name></decl></param>)</parameter_list> <block>{

        <comment type="line">// CheckStyle:MagicNumber OFF</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>percent</name> =<init> <expr>(<name>int</name>) <call><name><name>Math</name>.<name>round</name></name><argument_list>(<argument><expr><call><name><name>Math</name>.<name>floor</name></name><argument_list>(<argument><expr>(<name>totalLength</name>
                                                   / (<name>double</name>) <name>filesize</name>) * 100</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>percent</name> &gt; <name>percentTransmitted</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>filesize</name> &lt; 1048576</expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>percent</name> % 10 == 0</expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><name>percent</name> == 100</expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>" 100%"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>print</name></name><argument_list>(<argument><expr>"*"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></then></if>
            }</block></then> <else>else <block>{
                <if>if <condition>(<expr><name>percent</name> == 50</expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>" 50%"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <if>if <condition>(<expr><name>percent</name> == 100</expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>" 100%"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>print</name></name><argument_list>(<argument><expr>"."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if></else></if>
            }</block></else></if>
        }</block></then></if>
        <comment type="line">// CheckStyle:MagicNumber ON</comment>

        <return>return <expr><name>percent</name></expr>;</return>
    }</block></function>

    <decl_stmt><decl><type><specifier>private</specifier> <name>ProgressMonitor</name></type> <name>monitor</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Get the progress monitor.
     * @return the progress monitor.
     */</comment>
    <function><type><specifier>protected</specifier> <name>SftpProgressMonitor</name></type> <name>getProgressMonitor</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>monitor</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>monitor</name> = new <call><name>ProgressMonitor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>monitor</name></expr>;</return>
    }</block></function>

    <class><specifier>private</specifier> class <name>ProgressMonitor</name> <super><implements>implements <name>SftpProgressMonitor</name></implements></super> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>initFileSize</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>totalLength</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>percentTransmitted</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>init</name><parameter_list>(<param><decl><type><name>int</name></type> <name>op</name></decl></param>, <param><decl><type><name>String</name></type> <name>src</name></decl></param>, <param><decl><type><name>String</name></type> <name>dest</name></decl></param>, <param><decl><type><name>long</name></type> <name>max</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name>initFileSize</name> = <name>max</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>totalLength</name> = 0</expr>;</expr_stmt>
            <expr_stmt><expr><name>percentTransmitted</name> = 0</expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>count</name><parameter_list>(<param><decl><type><name>long</name></type> <name>len</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name>totalLength</name> += <name>len</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>percentTransmitted</name> = <call><name>trackProgress</name><argument_list>(<argument><expr><name>initFileSize</name></expr></argument>,
                                               <argument><expr><name>totalLength</name></expr></argument>,
                                               <argument><expr><name>percentTransmitted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>true</expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>end</name><parameter_list>()</parameter_list> <block>{
        }</block></function>

        <function><type><specifier>public</specifier> <name>long</name></type> <name>getTotalLength</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>totalLength</name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
