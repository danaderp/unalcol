<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\vss\MSVSSHISTORY.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>vss</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>SimpleDateFormat</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Commandline</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>EnumeratedAttribute</name></name>;</import>

<comment type="javadoc">/**
 * Performs History commands to Microsoft Visual SourceSafe.
 *
 * @ant.task name="vsshistory" category="scm"
 */</comment>
<class><specifier>public</specifier> class <name>MSVSSHISTORY</name> <super><extends>extends <name>MSVSS</name></extends></super> <block>{

    <comment type="javadoc">/**
     * Builds a command line to execute ss.
     * @return     The constructed commandline.
     */</comment>
    <function><type><name>Commandline</name></type> <name>buildCmdLine</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Commandline</name></type> <name>commandLine</name> =<init> <expr>new <call><name>Commandline</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// first off, make sure that we've got a command and a vssdir and a label ...</comment>
        <if>if <condition>(<expr><call><name>getVsspath</name><argument_list>()</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>msg</name> =<init> <expr>"vsspath attribute must be set!"</expr></init></decl>;</decl_stmt>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <comment type="line">// build the command line from what we got the format is</comment>
        <comment type="line">// ss History elements [-H] [-L] [-N] [-O] [-V] [-Y] [-#] [-?]</comment>
        <comment type="line">// as specified in the SS.EXE help</comment>
        <expr_stmt><expr><call><name><name>commandLine</name>.<name>setExecutable</name></name><argument_list>(<argument><expr><call><name>getSSCommand</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>commandLine</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>COMMAND_HISTORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// VSS items</comment>
        <expr_stmt><expr><call><name><name>commandLine</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name>getVsspath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// -I-</comment>
        <expr_stmt><expr><call><name><name>commandLine</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>FLAG_AUTORESPONSE_DEF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// ignore all errors</comment>
        <comment type="line">// -Vd</comment>
        <expr_stmt><expr><call><name><name>commandLine</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name>getVersionDate</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// -VL</comment>
        <expr_stmt><expr><call><name><name>commandLine</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name>getVersionLabel</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// -R</comment>
        <expr_stmt><expr><call><name><name>commandLine</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name>getRecursive</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// -B / -D / -F-</comment>
        <expr_stmt><expr><call><name><name>commandLine</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name>getStyle</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// -Y</comment>
        <expr_stmt><expr><call><name><name>commandLine</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name>getLogin</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// -O</comment>
        <expr_stmt><expr><call><name><name>commandLine</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name>getOutput</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>commandLine</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Retrieve history recursively. Defaults to false.
     *
     * @param recursive  The boolean value for recursive.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRecursive</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>recursive</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name>.<name>setInternalRecursive</name></name><argument_list>(<argument><expr><name>recursive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Name of the user whose change history is generated.
     *
     * @param   user The username.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUser</name><parameter_list>(<param><decl><type><name>String</name></type> <name>user</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name>.<name>setInternalUser</name></name><argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Date representing the 'start' of the range.
     *
     * @param   fromDate    The start date.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFromDate</name><parameter_list>(<param><decl><type><name>String</name></type> <name>fromDate</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name>.<name>setInternalFromDate</name></name><argument_list>(<argument><expr><name>fromDate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Date representing the 'end' of the range.
     *
     * @param   toDate    The end date.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setToDate</name><parameter_list>(<param><decl><type><name>String</name></type> <name>toDate</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name>.<name>setInternalToDate</name></name><argument_list>(<argument><expr><name>toDate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Label representing the 'start' of the range.
     *
     * @param   fromLabel    The start label.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFromLabel</name><parameter_list>(<param><decl><type><name>String</name></type> <name>fromLabel</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name>.<name>setInternalFromLabel</name></name><argument_list>(<argument><expr><name>fromLabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Label representing the 'end' of the range.
     *
     * @param   toLabel    The end label.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setToLabel</name><parameter_list>(<param><decl><type><name>String</name></type> <name>toLabel</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name>.<name>setInternalToLabel</name></name><argument_list>(<argument><expr><name>toLabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Number of days for comparison.
     * Defaults to 2 days.
     *
     * @param   numd    The number of days.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setNumdays</name><parameter_list>(<param><decl><type><name>int</name></type> <name>numd</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name>.<name>setInternalNumDays</name></name><argument_list>(<argument><expr><name>numd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Output file name for the history.
     *
     * @param   outfile The output file name.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOutput</name><parameter_list>(<param><decl><type><name>File</name></type> <name>outfile</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>outfile</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>super</name>.<name>setInternalOutputFilename</name></name><argument_list>(<argument><expr><call><name><name>outfile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Format of dates in &lt;code&gt;fromDate&lt;/code and &lt;code&gt;toDate&lt;/code&gt;.
     * Used when calculating dates with the numdays attribute.
     * This string uses the formatting rules of &lt;code&gt;SimpleDateFormat&lt;/code&gt;.
     * Defaults to &lt;code&gt;DateFormat.SHORT&lt;/code&gt;.
     *
     * @param   dateFormat  The date format.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDateFormat</name><parameter_list>(<param><decl><type><name>String</name></type> <name>dateFormat</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name>.<name>setInternalDateFormat</name></name><argument_list>(<argument><expr>new <call><name>SimpleDateFormat</name><argument_list>(<argument><expr><name>dateFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

   <comment type="javadoc">/**
     * Output style. Valid options are:
     * &lt;ul&gt;
     * &lt;li&gt;brief:    -B Display a brief history.
     * &lt;li&gt;codediff: -D Display line-by-line file changes.
     * &lt;li&gt;nofile:   -F- Do not display individual file updates in the project history.
     * &lt;li&gt;default:  No option specified. Display in Source Safe's default format.
     * &lt;/ul&gt;
     *
     * @param attr The history style:
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setStyle</name><parameter_list>(<param><decl><type><name>BriefCodediffNofile</name></type> <name>attr</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>option</name> =<init> <expr><call><name><name>attr</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>option</name>.<name>equals</name></name><argument_list>(<argument><expr><name>STYLE_BRIEF</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>super</name>.<name>setInternalStyle</name></name><argument_list>(<argument><expr><name>FLAG_BRIEF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>option</name>.<name>equals</name></name><argument_list>(<argument><expr><name>STYLE_CODEDIFF</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>super</name>.<name>setInternalStyle</name></name><argument_list>(<argument><expr><name>FLAG_CODEDIFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>option</name>.<name>equals</name></name><argument_list>(<argument><expr><name>STYLE_DEFAULT</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>super</name>.<name>setInternalStyle</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>option</name>.<name>equals</name></name><argument_list>(<argument><expr><name>STYLE_NOFILE</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>super</name>.<name>setInternalStyle</name></name><argument_list>(<argument><expr><name>FLAG_NO_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Style " + <name>attr</name> + " unknown."</expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></else></if></else></if></else></if></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Extention of EnumeratedAttribute to hold the values for style.
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>BriefCodediffNofile</name> <super><extends>extends <name>EnumeratedAttribute</name></extends></super> <block>{
        <comment type="javadoc">/**
         * Gets the list of allowable values.
         * @return The values.
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getValues</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr>new <name><name>String</name><index>[]</index></name> <block>{<expr><name>STYLE_BRIEF</name></expr>, <expr><name>STYLE_CODEDIFF</name></expr>, <expr><name>STYLE_NOFILE</name></expr>, <expr><name>STYLE_DEFAULT</name></expr>}</block></expr>;</return>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
