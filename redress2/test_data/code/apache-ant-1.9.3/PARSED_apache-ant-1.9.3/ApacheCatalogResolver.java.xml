<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\types\resolver\ApacheCatalogResolver.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resolver</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>

<import>import <name><name>java</name>.<name>net</name>.<name>MalformedURLException</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>URL</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>XMLCatalog</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>ResourceLocation</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>xml</name>.<name>resolver</name>.<name>Catalog</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>xml</name>.<name>resolver</name>.<name>CatalogManager</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>xml</name>.<name>resolver</name>.<name>tools</name>.<name>CatalogResolver</name></name>;</import>

<comment type="javadoc">/**
 * &lt;p&gt;This class extends the CatalogResolver class provided by Norman
 * Walsh's resolver library in xml-commons.  It provides the bridge
 * between the Ant XMLCatalog datatype and the xml-commons Catalog
 * class.  XMLCatalog calls methods in this class using Reflection in
 * order to avoid requiring the xml-commons resolver library in the
 * path.&lt;/p&gt;
 *
 * &lt;p&gt;The {@link org.apache.tools.ant.types.resolver.ApacheCatalog
 * ApacheCatalog} class is used to parse external catalog files, which
 * can be in either &lt;a
 * href="http://oasis-open.org/committees/entity/background/9401.html"&gt;
 * plain text format&lt;/a&gt; or &lt;a
 * href="http://www.oasis-open.org/committees/entity/spec-2001-08-06.html"&gt;
 * XML format&lt;/a&gt;.&lt;/p&gt;
 *
 * &lt;p&gt;For each entry found in an external catalog file, if any, an
 * instance of {@link org.apache.tools.ant.types.ResourceLocation
 * ResourceLocation} is created and added to the controlling
 * XMLCatalog datatype.  In this way, these entries will be included
 * in XMLCatalog's lookup algorithm.  See XMLCatalog.java for more
 * details.&lt;/p&gt;
 *
 * @see org.apache.tools.ant.types.XMLCatalog.CatalogResolver
 * @see org.apache.xml.resolver.CatalogManager
 * @since Ant 1.6
 */</comment>

<class><specifier>public</specifier> class <name>ApacheCatalogResolver</name> <super><extends>extends <name>CatalogResolver</name></extends></super> <block>{

    <comment type="javadoc">/** The XMLCatalog object to callback. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>XMLCatalog</name></type> <name>xmlCatalog</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    static <block>{
        <comment type="line">//</comment>
        <comment type="line">// If you don't do this, you get all sorts of annoying</comment>
        <comment type="line">// warnings about a missing properties file.  However, it</comment>
        <comment type="line">// seems to work just fine with default values.  Ultimately,</comment>
        <comment type="line">// we should probably include a "CatalogManager.properties"</comment>
        <comment type="line">// file in the ant jarfile with some default property</comment>
        <comment type="line">// settings.  See CatalogManager.java for more details.</comment>
        <comment type="line">//</comment>
        <expr_stmt><expr><call><name><name>CatalogManager</name>.<name>getStaticManager</name></name><argument_list>()</argument_list></call>.<call><name>setIgnoreMissingProperties</name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//</comment>
        <comment type="line">// Make sure CatalogResolver instantiates ApacheCatalog,</comment>
        <comment type="line">// rather than a plain Catalog</comment>
        <comment type="line">//</comment>
        <expr_stmt><expr><call><name><name>System</name>.<name>getProperties</name></name><argument_list>()</argument_list></call>.<call><name>put</name><argument_list>(<argument><expr>"xml.catalog.className"</expr></argument>,
                                   <argument><expr><name><name>ApacheCatalog</name>.<name><name/></name></name>class.<call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>CatalogManager</name>.<name>getStaticManager</name></name><argument_list>()</argument_list></call>.<call><name>setUseStaticCatalog</name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// debug</comment>
        <comment type="line">// CatalogManager.getStaticManager().setVerbosity(4);</comment>
    }</block>

    <comment type="javadoc">/**
     * Set the XMLCatalog object to callback.
     * @param xmlCatalog the XMLCatalog to use.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setXMLCatalog</name><parameter_list>(<param><decl><type><name>XMLCatalog</name></type> <name>xmlCatalog</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>xmlCatalog</name></name> = <name>xmlCatalog</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * XMLCatalog calls this to add an external catalog file for each
     * file within a &lt;code&gt;&amp;lt;catalogfiles&amp;gt;&lt;/code&gt; fileset.
     * @param file the external catalog file.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>parseCatalog</name><parameter_list>(<param><decl><type><name>String</name></type> <name>file</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>Catalog</name></type> <name>catalog</name> =<init> <expr><call><name>getCatalog</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!(<name>catalog</name> <name>instanceof</name> <name>ApacheCatalog</name>)</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Wrong catalog type found: " + <call><name><name>catalog</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>ApacheCatalog</name></type> <name>apacheCatalog</name> =<init> <expr>(<name>ApacheCatalog</name>) <name>catalog</name></expr></init></decl>;</decl_stmt>

        <comment type="line">// Pass in reference to ourselves so we can be called back.</comment>
        <expr_stmt><expr><call><name><name>apacheCatalog</name>.<name>setResolver</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <try>try <block>{
            <expr_stmt><expr><call><name><name>apacheCatalog</name>.<name>parseCatalog</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>MalformedURLException</name></type> <name>ex</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ex</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * &lt;p&gt;Add a PUBLIC catalog entry to the controlling XMLCatalog instance.
     * ApacheCatalog calls this for each PUBLIC entry found in an external
     * catalog file.&lt;/p&gt;
     *
     * @param publicid The public ID of the resource
     * @param systemid The system ID (aka location) of the resource
     * @param base The base URL of the resource.  If the systemid
     * specifies a relative URL/pathname, it is resolved using the
     * base.  The default base for an external catalog file is the
     * directory in which the catalog is located.
     *
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addPublicEntry</name><parameter_list>(<param><decl><type><name>String</name></type> <name>publicid</name></decl></param>,
                               <param><decl><type><name>String</name></type> <name>systemid</name></decl></param>,
                               <param><decl><type><name>URL</name></type> <name>base</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>ResourceLocation</name></type> <name>dtd</name> =<init> <expr>new <call><name>ResourceLocation</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>dtd</name>.<name>setBase</name></name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dtd</name>.<name>setPublicId</name></name><argument_list>(<argument><expr><name>publicid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dtd</name>.<name>setLocation</name></name><argument_list>(<argument><expr><name>systemid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>xmlCatalog</name>.<name>addDTD</name></name><argument_list>(<argument><expr><name>dtd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * &lt;p&gt;Add a URI catalog entry to the controlling XMLCatalog instance.
     * ApacheCatalog calls this for each URI entry found in an external
     * catalog file.&lt;/p&gt;
     *
     * @param uri The URI of the resource
     * @param altURI The URI to which the resource should be mapped
     * (aka the location)
     * @param base The base URL of the resource.  If the altURI
     * specifies a relative URL/pathname, it is resolved using the
     * base.  The default base for an external catalog file is the
     * directory in which the catalog is located.
     *
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addURIEntry</name><parameter_list>(<param><decl><type><name>String</name></type> <name>uri</name></decl></param>,
                            <param><decl><type><name>String</name></type> <name>altURI</name></decl></param>,
                            <param><decl><type><name>URL</name></type> <name>base</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>ResourceLocation</name></type> <name>entity</name> =<init> <expr>new <call><name>ResourceLocation</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>entity</name>.<name>setBase</name></name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>entity</name>.<name>setPublicId</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>entity</name>.<name>setLocation</name></name><argument_list>(<argument><expr><name>altURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>xmlCatalog</name>.<name>addEntity</name></name><argument_list>(<argument><expr><name>entity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class> <comment type="line">//-- ApacheCatalogResolver</comment>
</unit>
