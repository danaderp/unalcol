<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\util\regexp\RegexpFactory.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>regexp</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>MagicNames</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>ClasspathUtils</name></name>;</import>

<comment type="javadoc">/***
 * Regular expression factory, which will create Regexp objects.  The
 * actual implementation class depends on the System or Ant Property:
 * &lt;code&gt;ant.regexp.regexpimpl&lt;/code&gt;.
 *
 */</comment>
<class><specifier>public</specifier> class <name>RegexpFactory</name> <super><extends>extends <name>RegexpMatcherFactory</name></extends></super> <block>{

    <comment type="javadoc">/** Constructor for RegexpFactory */</comment>
    <constructor><specifier>public</specifier> <name>RegexpFactory</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <comment type="javadoc">/***
     * Create a new regular expression matcher instance.
     * @return the matcher instance
     * @throws BuildException on error
     */</comment>
    <function><type><specifier>public</specifier> <name>Regexp</name></type> <name>newRegexp</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name>newRegexp</name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/***
     * Create a new regular expression matcher instance.
     *
     * @param p Project whose ant.regexp.regexpimpl property will be used.
     * @return the matcher instance
     * @throws BuildException on error
     */</comment>
    <function><type><specifier>public</specifier> <name>Regexp</name></type> <name>newRegexp</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>p</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>systemDefault</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>p</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>systemDefault</name> = <call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr><name><name>MagicNames</name>.<name>REGEXP_IMPL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>systemDefault</name> = <call><name><name>p</name>.<name>getProperty</name></name><argument_list>(<argument><expr><name><name>MagicNames</name>.<name>REGEXP_IMPL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <if>if <condition>(<expr><name>systemDefault</name> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name>createRegexpInstance</name><argument_list>(<argument><expr><name>systemDefault</name></expr></argument>)</argument_list></call></expr>;</return>
            <comment type="line">// TODO     should we silently catch possible exceptions and try to</comment>
            <comment type="line">//         load a different implementation?</comment>
        }</block></then></if>

        <return>return <expr>new <call><name>Jdk14RegexpRegexp</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Wrapper over RegexpMatcherFactory.createInstance that ensures that
     * we are dealing with a Regexp implementation.
     * @param classname the name of the class to use.
     * @return the instance.
     * @throws BuildException if there is a problem.
     * @since 1.3
     *
     * @see RegexpMatcherFactory#createInstance(String)
     */</comment>
    <function><type><specifier>protected</specifier> <name>Regexp</name></type> <name>createRegexpInstance</name><parameter_list>(<param><decl><type><name>String</name></type> <name>classname</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <return>return <expr>(<name>Regexp</name>) <call><name><name>ClasspathUtils</name>.<name>newInstance</name></name><argument_list>(<argument><expr><name>classname</name></expr></argument>, <argument><expr><name><name>RegexpFactory</name>.<name><name/></name></name>class.<call><name>getClassLoader</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><name><name>Regexp</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

}</block></class>
</unit>
