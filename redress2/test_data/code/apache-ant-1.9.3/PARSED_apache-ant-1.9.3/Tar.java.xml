<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\Tar.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>BufferedOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>OutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashSet</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>zip</name>.<name>GZIPOutputStream</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>DirectoryScanner</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>ArchiveFileSet</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>EnumeratedAttribute</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>FileSet</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Resource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>ResourceCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>ArchiveResource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>FileProvider</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>FileResource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>SelectorUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>TarResource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>MergingMapper</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>ResourceUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>SourceFileScanner</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>bzip2</name>.<name>CBZip2OutputStream</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>tar</name>.<name>TarConstants</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>tar</name>.<name>TarEntry</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>tar</name>.<name>TarOutputStream</name></name>;</import>

<comment type="javadoc">/**
 * Creates a tar archive.
 *
 * @since Ant 1.1
 *
 * @ant.task category="packaging"
 */</comment>
<class><specifier>public</specifier> class <name>Tar</name> <super><extends>extends <name>MatchingTask</name></extends></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>BUFFER_SIZE</name> =<init> <expr>8 * 1024</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * @deprecated since 1.5.x.
     *             Tar.WARN is deprecated and is replaced with
     *             Tar.TarLongFileMode.WARN
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>WARN</name> =<init> <expr>"warn"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * @deprecated since 1.5.x.
     *             Tar.FAIL is deprecated and is replaced with
     *             Tar.TarLongFileMode.FAIL
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FAIL</name> =<init> <expr>"fail"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * @deprecated since 1.5.x.
     *             Tar.TRUNCATE is deprecated and is replaced with
     *             Tar.TarLongFileMode.TRUNCATE
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TRUNCATE</name> =<init> <expr>"truncate"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * @deprecated since 1.5.x.
     *             Tar.GNU is deprecated and is replaced with
     *             Tar.TarLongFileMode.GNU
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>GNU</name> =<init> <expr>"gnu"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * @deprecated since 1.5.x.
     *             Tar.OMIT is deprecated and is replaced with
     *             Tar.TarLongFileMode.OMIT
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>OMIT</name> =<init> <expr>"omit"</expr></init></decl>;</decl_stmt>

    <comment type="line">// CheckStyle:VisibilityModifier OFF - bc</comment>
    <decl_stmt><decl><type><name>File</name></type> <name>tarFile</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>File</name></type> <name>baseDir</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>TarLongFileMode</name></type> <name>longFileMode</name> =<init> <expr>new <call><name>TarLongFileMode</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// need to keep the package private version for backwards compatibility</comment>
    <decl_stmt><decl><type><name>Vector</name></type> <name>filesets</name> =<init> <expr>new <call><name>Vector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// we must keep two lists since other classes may modify the</comment>
    <comment type="line">// filesets Vector (it is package private) without us noticing</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Vector</name></type> <name>resourceCollections</name> =<init> <expr>new <call><name>Vector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Vector</name></type> <name>fileSetFiles</name> =<init> <expr>new <call><name>Vector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// CheckStyle:VisibilityModifier ON</comment>

    <comment type="javadoc">/**
     * Indicates whether the user has been warned about long files already.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>longWarningGiven</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>TarCompressionMethod</name></type> <name>compression</name> =<init> <expr>new <call><name>TarCompressionMethod</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Add a new fileset with the option to specify permissions
     * @return the tar fileset to be used as the nested element.
     */</comment>
    <function><type><specifier>public</specifier> <name>TarFileSet</name></type> <name>createTarFileSet</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>TarFileSet</name></type> <name>fs</name> =<init> <expr>new <call><name>TarFileSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>fs</name>.<name>setProject</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>filesets</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>fs</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Add a collection of resources to archive.
     * @param res a resource collection to archive.
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>ResourceCollection</name></type> <name>res</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>resourceCollections</name>.<name>add</name></name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set is the name/location of where to create the tar file.
     * @param tarFile the location of the tar file.
     * @deprecated since 1.5.x.
     *             For consistency with other tasks, please use setDestFile().
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTarfile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>tarFile</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>tarFile</name></name> = <name>tarFile</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set is the name/location of where to create the tar file.
     * @since Ant 1.5
     * @param destFile The output of the tar
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDestFile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>destFile</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>tarFile</name></name> = <name>destFile</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * This is the base directory to look in for things to tar.
     * @param baseDir the base directory.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBasedir</name><parameter_list>(<param><decl><type><name>File</name></type> <name>baseDir</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>baseDir</name></name> = <name>baseDir</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set how to handle long files, those with a path&amp;gt;100 chars.
     * Optional, default=warn.
     * &lt;p&gt;
     * Allowable values are
     * &lt;ul&gt;
     * &lt;li&gt;  truncate - paths are truncated to the maximum length
     * &lt;li&gt;  fail - paths greater than the maximum cause a build exception
     * &lt;li&gt;  warn - paths greater than the maximum cause a warning and GNU is used
     * &lt;li&gt;  gnu - GNU extensions are used for any paths greater than the maximum.
     * &lt;li&gt;  omit - paths greater than the maximum are omitted from the archive
     * &lt;/ul&gt;
     * @param mode the mode string to handle long files.
     * @deprecated since 1.5.x.
     *             setLongFile(String) is deprecated and is replaced with
     *             setLongFile(Tar.TarLongFileMode) to make Ant's Introspection
     *             mechanism do the work and also to encapsulate operations on
     *             the mode in its own class.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLongfile</name><parameter_list>(<param><decl><type><name>String</name></type> <name>mode</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"DEPRECATED - The setLongfile(String) method has been deprecated."
            + " Use setLongfile(Tar.TarLongFileMode) instead."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>longFileMode</name></name> = new <call><name>TarLongFileMode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>longFileMode</name>.<name>setValue</name></name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set how to handle long files, those with a path&amp;gt;100 chars.
     * Optional, default=warn.
     * &lt;p&gt;
     * Allowable values are
     * &lt;ul&gt;
     * &lt;li&gt;  truncate - paths are truncated to the maximum length
     * &lt;li&gt;  fail - paths greater than the maximum cause a build exception
     * &lt;li&gt;  warn - paths greater than the maximum cause a warning and GNU is used
     * &lt;li&gt;  gnu - extensions used by older versions of GNU tar are used for any paths greater than the maximum.
     * &lt;li&gt;  posix - use POSIX PAX extension headers for any paths greater than the maximum.  Supported by all modern tar implementations.
     * &lt;li&gt;  omit - paths greater than the maximum are omitted from the archive
     * &lt;/ul&gt;
     * @param mode the mode to handle long file names.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLongfile</name><parameter_list>(<param><decl><type><name>TarLongFileMode</name></type> <name>mode</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>longFileMode</name></name> = <name>mode</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set compression method.
     * Allowable values are
     * &lt;ul&gt;
     * &lt;li&gt;  none - no compression
     * &lt;li&gt;  gzip - Gzip compression
     * &lt;li&gt;  bzip2 - Bzip2 compression
     * &lt;/ul&gt;
     * @param mode the compression method.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCompression</name><parameter_list>(<param><decl><type><name>TarCompressionMethod</name></type> <name>mode</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>compression</name></name> = <name>mode</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * do the business
     * @throws BuildException on error
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>tarFile</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"tarfile attribute must be set!"</expr></argument>,
                                     <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr><call><name><name>tarFile</name>.<name>exists</name></name><argument_list>()</argument_list></call> &amp;&amp; <call><name><name>tarFile</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"tarfile is a directory!"</expr></argument>,
                                     <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr><call><name><name>tarFile</name>.<name>exists</name></name><argument_list>()</argument_list></call> &amp;&amp; !<call><name><name>tarFile</name>.<name>canWrite</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Can not write to the specified tarfile!"</expr></argument>,
                                     <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <decl_stmt><decl><type><name>Vector</name></type> <name>savedFileSets</name> =<init> <expr>(<name>Vector</name>) <call><name><name>filesets</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <if>if <condition>(<expr><name>baseDir</name> != <name>null</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr>!<call><name><name>baseDir</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"basedir does not exist!"</expr></argument>,
                                             <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if>

                <comment type="line">// add the main fileset to the list of filesets to process.</comment>
                <decl_stmt><decl><type><name>TarFileSet</name></type> <name>mainFileSet</name> =<init> <expr>new <call><name>TarFileSet</name><argument_list>(<argument><expr><name>fileset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>mainFileSet</name>.<name>setDir</name></name><argument_list>(<argument><expr><name>baseDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>filesets</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>mainFileSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <if>if <condition>(<expr><call><name><name>filesets</name>.<name>size</name></name><argument_list>()</argument_list></call> == 0 &amp;&amp; <call><name><name>resourceCollections</name>.<name>size</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"You must supply either a basedir "
                                         + "attribute or some nested resource"
                                         + " collections."</expr></argument>,
                                         <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <comment type="line">// check if tar is out of date with respect to each</comment>
            <comment type="line">// fileset</comment>
            <decl_stmt><decl><type><name>boolean</name></type> <name>upToDate</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>Enumeration</name></type> <name>e</name> =<init> <expr><call><name><name>filesets</name>.<name>elements</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
                <expr_stmt><expr><name>upToDate</name> &amp;= <call><name>check</name><argument_list>(<argument><expr>(<name>TarFileSet</name>) <call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <for>for (<init><decl><type><name>Enumeration</name></type> <name>e</name> =<init> <expr><call><name><name>resourceCollections</name>.<name>elements</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init>
                 <condition><expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
                <expr_stmt><expr><name>upToDate</name> &amp;= <call><name>check</name><argument_list>(<argument><expr>(<name>ResourceCollection</name>) <call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>

            <if>if <condition>(<expr><name>upToDate</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Nothing to do: " + <call><name><name>tarFile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call>
                    + " is up to date."</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            }</block></then></if>

            <decl_stmt><decl><type><name>File</name></type> <name>parent</name> =<init> <expr><call><name><name>tarFile</name>.<name>getParentFile</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>parent</name> != <name>null</name> &amp;&amp; !<call><name><name>parent</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call> &amp;&amp; !<call><name><name>parent</name>.<name>mkdirs</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Failed to create missing parent"
                                         + " directory for " + <name>tarFile</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Building tar: " + <call><name><name>tarFile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>TarOutputStream</name></type> <name>tOut</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <try>try <block>{
                <expr_stmt><expr><name>tOut</name> = new <call><name>TarOutputStream</name><argument_list>(
                    <argument><expr><call><name><name>compression</name>.<name>compress</name></name><argument_list>(
                        <argument><expr>new <call><name>BufferedOutputStream</name><argument_list>(
                            <argument><expr>new <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>tarFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>tOut</name>.<name>setDebug</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><call><name><name>longFileMode</name>.<name>isTruncateMode</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>tOut</name>.<name>setLongFileMode</name></name><argument_list>(<argument><expr><name><name>TarOutputStream</name>.<name>LONGFILE_TRUNCATE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <if>if <condition>(<expr><call><name><name>longFileMode</name>.<name>isFailMode</name></name><argument_list>()</argument_list></call>
                            || <call><name><name>longFileMode</name>.<name>isOmitMode</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>tOut</name>.<name>setLongFileMode</name></name><argument_list>(<argument><expr><name><name>TarOutputStream</name>.<name>LONGFILE_ERROR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <if>if <condition>(<expr><call><name><name>longFileMode</name>.<name>isPosixMode</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>tOut</name>.<name>setLongFileMode</name></name><argument_list>(<argument><expr><name><name>TarOutputStream</name>.<name>LONGFILE_POSIX</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <comment type="line">// warn or GNU</comment>
                    <expr_stmt><expr><call><name><name>tOut</name>.<name>setLongFileMode</name></name><argument_list>(<argument><expr><name><name>TarOutputStream</name>.<name>LONGFILE_GNU</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if></else></if></else></if>

                <expr_stmt><expr><name>longWarningGiven</name> = false</expr>;</expr_stmt>
                <for>for (<init><decl><type><name>Enumeration</name></type> <name>e</name> =<init> <expr><call><name><name>filesets</name>.<name>elements</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init>
                     <condition><expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
                    <expr_stmt><expr><call><name>tar</name><argument_list>(<argument><expr>(<name>TarFileSet</name>) <call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>tOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
                <for>for (<init><decl><type><name>Enumeration</name></type> <name>e</name> =<init> <expr><call><name><name>resourceCollections</name>.<name>elements</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init>
                     <condition><expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
                    <expr_stmt><expr><call><name>tar</name><argument_list>(<argument><expr>(<name>ResourceCollection</name>) <call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>tOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
            }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ioe</name></decl></param>) <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>msg</name> =<init> <expr>"Problem creating TAR: " + <call><name><name>ioe</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>ioe</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch> <finally>finally <block>{
                <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>tOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></finally></try>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><name>filesets</name> = <name>savedFileSets</name></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <comment type="javadoc">/**
     * tar a file
     * @param file the file to tar
     * @param tOut the output stream
     * @param vPath the path name of the file to tar
     * @param tarFileSet the fileset that the file came from.
     * @throws IOException on error
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>tarFile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>file</name></decl></param>, <param><decl><type><name>TarOutputStream</name></type> <name>tOut</name></decl></param>, <param><decl><type><name>String</name></type> <name>vPath</name></decl></param>,
                           <param><decl><type><name>TarFileSet</name></type> <name>tarFileSet</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><call><name><name>file</name>.<name>equals</name></name><argument_list>(<argument><expr><name>tarFile</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">// If the archive is built for the first time and it is</comment>
            <comment type="line">// matched by a resource collection, then it hasn't been</comment>
            <comment type="line">// found in check (it hasn't been there) but will be</comment>
            <comment type="line">// included now.</comment>
            <comment type="line">//</comment>
            <comment type="line">// for some strange reason the old code would simply skip</comment>
            <comment type="line">// the entry and not fail, do the same now for backwards</comment>
            <comment type="line">// compatibility reasons.  Without this, the which4j build</comment>
            <comment type="line">// fails in Gump</comment>
            <return>return;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>tarResource</name><argument_list>(<argument><expr>new <call><name>FileResource</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tOut</name></expr></argument>, <argument><expr><name>vPath</name></expr></argument>, <argument><expr><name>tarFileSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * tar a resource
     * @param r the resource to tar
     * @param tOut the output stream
     * @param vPath the path name of the file to tar
     * @param tarFileSet the fileset that the file came from, may be null.
     * @throws IOException on error
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>tarResource</name><parameter_list>(<param><decl><type><name>Resource</name></type> <name>r</name></decl></param>, <param><decl><type><name>TarOutputStream</name></type> <name>tOut</name></decl></param>, <param><decl><type><name>String</name></type> <name>vPath</name></decl></param>,
                               <param><decl><type><name>TarFileSet</name></type> <name>tarFileSet</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{

        <if>if <condition>(<expr>!<call><name><name>r</name>.<name>isExists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>boolean</name></type> <name>preserveLeadingSlashes</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>tarFileSet</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>fullpath</name> =<init> <expr><call><name><name>tarFileSet</name>.<name>getFullpath</name></name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getProject</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>fullpath</name>.<name>length</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>vPath</name> = <name>fullpath</name></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <comment type="line">// don't add "" to the archive</comment>
                <if>if <condition>(<expr><call><name><name>vPath</name>.<name>length</name></name><argument_list>()</argument_list></call> &lt;= 0</expr>)</condition><then> <block>{
                    <return>return;</return>
                }</block></then></if>

                <decl_stmt><decl><type><name>String</name></type> <name>prefix</name> =<init> <expr><call><name><name>tarFileSet</name>.<name>getPrefix</name></name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getProject</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <comment type="line">// '/' is appended for compatibility with the zip task.</comment>
                <if>if <condition>(<expr><call><name><name>prefix</name>.<name>length</name></name><argument_list>()</argument_list></call> &gt; 0 &amp;&amp; !<call><name><name>prefix</name>.<name>endsWith</name></name><argument_list>(<argument><expr>"/"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>prefix</name> = <name>prefix</name> + "/"</expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name>vPath</name> = <name>prefix</name> + <name>vPath</name></expr>;</expr_stmt>
            }</block></else></if>

            <expr_stmt><expr><name>preserveLeadingSlashes</name> = <call><name><name>tarFileSet</name>.<name>getPreserveLeadingSlashes</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><call><name><name>vPath</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"/"</expr></argument>)</argument_list></call> &amp;&amp; !<name>preserveLeadingSlashes</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>l</name> =<init> <expr><call><name><name>vPath</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>l</name> &lt;= 1</expr>)</condition><then> <block>{
                    <comment type="line">// we would end up adding "" to the archive</comment>
                    <return>return;</return>
                }</block></then></if>
                <expr_stmt><expr><name>vPath</name> = <call><name><name>vPath</name>.<name>substring</name></name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>

        <if>if <condition>(<expr><call><name><name>r</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call> &amp;&amp; !<call><name><name>vPath</name>.<name>endsWith</name></name><argument_list>(<argument><expr>"/"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>vPath</name> += "/"</expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><call><name><name>vPath</name>.<name>length</name></name><argument_list>()</argument_list></call> &gt;= <name><name>TarConstants</name>.<name>NAMELEN</name></name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name><name>longFileMode</name>.<name>isOmitMode</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Omitting: " + <name>vPath</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            }</block></then> <else>else <if>if <condition>(<expr><call><name><name>longFileMode</name>.<name>isWarnMode</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Entry: " + <name>vPath</name> + " longer than "
                    + <name><name>TarConstants</name>.<name>NAMELEN</name></name> + " characters."</expr></argument>,
                    <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>longWarningGiven</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Resulting tar file can only be processed "
                        + "successfully by GNU compatible tar commands"</expr></argument>,
                        <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>longWarningGiven</name> = true</expr>;</expr_stmt>
                }</block></then></if>
            }</block></then> <else>else <if>if <condition>(<expr><call><name><name>longFileMode</name>.<name>isFailMode</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Entry: " + <name>vPath</name>
                        + " longer than " + <name><name>TarConstants</name>.<name>NAMELEN</name></name>
                        + "characters."</expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if></else></if></else></if>
        }</block></then></if>

        <decl_stmt><decl><type><name>TarEntry</name></type> <name>te</name> =<init> <expr>new <call><name>TarEntry</name><argument_list>(<argument><expr><name>vPath</name></expr></argument>, <argument><expr><name>preserveLeadingSlashes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>te</name>.<name>setModTime</name></name><argument_list>(<argument><expr><call><name><name>r</name>.<name>getLastModified</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// preserve permissions</comment>
        <if>if <condition>(<expr><name>r</name> <name>instanceof</name> <name>ArchiveResource</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>ArchiveResource</name></type> <name>ar</name> =<init> <expr>(<name>ArchiveResource</name>) <name>r</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>te</name>.<name>setMode</name></name><argument_list>(<argument><expr><call><name><name>ar</name>.<name>getMode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>r</name> <name>instanceof</name> <name>TarResource</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>TarResource</name></type> <name>tr</name> =<init> <expr>(<name>TarResource</name>) <name>r</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>te</name>.<name>setUserName</name></name><argument_list>(<argument><expr><call><name><name>tr</name>.<name>getUserName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>te</name>.<name>setUserId</name></name><argument_list>(<argument><expr><call><name><name>tr</name>.<name>getUid</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>te</name>.<name>setGroupName</name></name><argument_list>(<argument><expr><call><name><name>tr</name>.<name>getGroup</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>te</name>.<name>setGroupId</name></name><argument_list>(<argument><expr><call><name><name>tr</name>.<name>getGid</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>

        <if>if <condition>(<expr>!<call><name><name>r</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name><name>r</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; <name><name>TarConstants</name>.<name>MAXSIZE</name></name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                    <argument><expr>"Resource: " + <name>r</name> + " larger than "
                    + <name><name>TarConstants</name>.<name>MAXSIZE</name></name> + " bytes."</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>te</name>.<name>setSize</name></name><argument_list>(<argument><expr><call><name><name>r</name>.<name>getSize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// override permissions if set explicitly</comment>
            <if>if <condition>(<expr><name>tarFileSet</name> != <name>null</name> &amp;&amp; <call><name><name>tarFileSet</name>.<name>hasFileModeBeenSet</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>te</name>.<name>setMode</name></name><argument_list>(<argument><expr><call><name><name>tarFileSet</name>.<name>getMode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then> <else>else <if>if <condition>(<expr><name>tarFileSet</name> != <name>null</name> &amp;&amp; <call><name><name>tarFileSet</name>.<name>hasDirModeBeenSet</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">// override permissions if set explicitly</comment>
            <expr_stmt><expr><call><name><name>te</name>.<name>setMode</name></name><argument_list>(<argument><expr><call><name><name>tarFileSet</name>.<name>getDirMode</name></name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getProject</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>

        <if>if <condition>(<expr><name>tarFileSet</name> != <name>null</name></expr>)</condition><then> <block>{
            <comment type="line">// only override permissions if set explicitly</comment>
            <if>if <condition>(<expr><call><name><name>tarFileSet</name>.<name>hasUserNameBeenSet</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>te</name>.<name>setUserName</name></name><argument_list>(<argument><expr><call><name><name>tarFileSet</name>.<name>getUserName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><call><name><name>tarFileSet</name>.<name>hasGroupBeenSet</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>te</name>.<name>setGroupName</name></name><argument_list>(<argument><expr><call><name><name>tarFileSet</name>.<name>getGroup</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><call><name><name>tarFileSet</name>.<name>hasUserIdBeenSet</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>te</name>.<name>setUserId</name></name><argument_list>(<argument><expr><call><name><name>tarFileSet</name>.<name>getUid</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><call><name><name>tarFileSet</name>.<name>hasGroupIdBeenSet</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>te</name>.<name>setGroupId</name></name><argument_list>(<argument><expr><call><name><name>tarFileSet</name>.<name>getGid</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>

        <decl_stmt><decl><type><name>InputStream</name></type> <name>in</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>tOut</name>.<name>putNextEntry</name></name><argument_list>(<argument><expr><name>te</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr>!<call><name><name>r</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>in</name> = <call><name><name>r</name>.<name>getInputStream</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>buffer</name> =<init> <expr>new <name><name>byte</name><index>[<expr><name>BUFFER_SIZE</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>count</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
                <do>do <block>{
                    <expr_stmt><expr><call><name><name>tOut</name>.<name>write</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>count</name> = <call><name><name>in</name>.<name>read</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>buffer</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> while <condition>(<expr><name>count</name> != -1</expr>)</condition>;</do>
            }</block></then></if>

            <expr_stmt><expr><call><name><name>tOut</name>.<name>closeEntry</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <comment type="javadoc">/**
     * Is the archive up to date in relationship to a list of files.
     * @param files the files to check
     * @return true if the archive is up to date.
     * @deprecated since 1.5.x.
     *             use the two-arg version instead.
     */</comment>
    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>archiveIsUpToDate</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>files</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>archiveIsUpToDate</name><argument_list>(<argument><expr><name>files</name></expr></argument>, <argument><expr><name>baseDir</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Is the archive up to date in relationship to a list of files.
     * @param files the files to check
     * @param dir   the base directory for the files.
     * @return true if the archive is up to date.
     * @since Ant 1.5.2
     */</comment>
    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>archiveIsUpToDate</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>files</name></decl></param>, <param><decl><type><name>File</name></type> <name>dir</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>SourceFileScanner</name></type> <name>sfs</name> =<init> <expr>new <call><name>SourceFileScanner</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>MergingMapper</name></type> <name>mm</name> =<init> <expr>new <call><name>MergingMapper</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>mm</name>.<name>setTo</name></name><argument_list>(<argument><expr><call><name><name>tarFile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>sfs</name>.<name>restrict</name></name><argument_list>(<argument><expr><name>files</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>)</argument_list></call>.<name>length</name> == 0</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Is the archive up to date in relationship to a list of files.
     * @param r the files to check
     * @return true if the archive is up to date.
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>archiveIsUpToDate</name><parameter_list>(<param><decl><type><name>Resource</name></type> <name>r</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>SelectorUtils</name>.<name>isOutOfDate</name></name><argument_list>(<argument><expr>new <call><name>FileResource</name><argument_list>(<argument><expr><name>tarFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>r</name></expr></argument>,
                                         <argument><expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call>
                                         .<call><name>getFileTimestampGranularity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Whether this task can deal with non-file resources.
     *
     * &lt;p&gt;This implementation returns true only if this task is
     * &amp;lt;tar&amp;gt;.  Any subclass of this class that also wants to
     * support non-file resources needs to override this method.  We
     * need to do so for backwards compatibility reasons since we
     * can't expect subclasses to support resources.&lt;/p&gt;
     * @return true for this task.
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>supportsNonFileResources</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getClass</name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><name><name>Tar</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Checks whether the archive is out-of-date with respect to the resources
     * of the given collection.
     *
     * &lt;p&gt;Also checks that either all collections only contain file
     * resources or this class supports non-file collections.&lt;/p&gt;
     *
     * &lt;p&gt;And - in case of file-collections - ensures that the archive won't
     * contain itself.&lt;/p&gt;
     *
     * @param rc the resource collection to check
     * @return whether the archive is up-to-date
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>check</name><parameter_list>(<param><decl><type><name>ResourceCollection</name></type> <name>rc</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>upToDate</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>isFileFileSet</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>FileSet</name></type> <name>fs</name> =<init> <expr>(<name>FileSet</name>) <name>rc</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>upToDate</name> = <call><name>check</name><argument_list>(<argument><expr><call><name><name>fs</name>.<name>getDir</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getFileNames</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr>!<call><name><name>rc</name>.<name>isFilesystemOnly</name></name><argument_list>()</argument_list></call> &amp;&amp; !<call><name>supportsNonFileResources</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"only filesystem resources are supported"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>rc</name>.<name>isFilesystemOnly</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>HashSet</name></type> <name>basedirs</name> =<init> <expr>new <call><name>HashSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>HashMap</name></type> <name>basedirToFilesMap</name> =<init> <expr>new <call><name>HashMap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>Resource</name></type> <name>res</name> :<range> <expr><name>rc</name></expr></range></decl></init>) <block>{
                <decl_stmt><decl><type><name>FileResource</name></type> <name>r</name> =<init> <expr><call><name><name>ResourceUtils</name>
                    .<name>asFileResource</name></name><argument_list>(<argument><expr><call><name><name>res</name>.<name>as</name></name><argument_list>(<argument><expr><name><name>FileProvider</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>File</name></type> <name>base</name> =<init> <expr><call><name><name>r</name>.<name>getBaseDir</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>base</name> == <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>base</name> = <name><name>Copy</name>.<name>NULL_FILE_PLACEHOLDER</name></name></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><call><name><name>basedirs</name>.<name>add</name></name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>Vector</name></type> <name>files</name> =<init> <expr>(<name>Vector</name>) <call><name><name>basedirToFilesMap</name>.<name>get</name></name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>files</name> == <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>files</name> = new <call><name>Vector</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>basedirToFilesMap</name>.<name>put</name></name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <if>if <condition>(<expr><name>base</name> == <name><name>Copy</name>.<name>NULL_FILE_PLACEHOLDER</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>files</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>r</name>.<name>getFile</name></name><argument_list>()</argument_list></call>.<call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name><name>files</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>r</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></for>
            <decl_stmt><decl><type><name>Iterator</name></type> <name>iter</name> =<init> <expr><call><name><name>basedirs</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>iter</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <decl_stmt><decl><type><name>File</name></type> <name>base</name> =<init> <expr>(<name>File</name>) <call><name><name>iter</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Vector</name></type> <name>f</name> =<init> <expr>(<name>Vector</name>) <call><name><name>basedirToFilesMap</name>.<name>get</name></name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>files</name> =<init> <expr>(<name><name>String</name><index>[]</index></name>) <call><name><name>f</name>.<name>toArray</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[<expr><call><name><name>f</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>upToDate</name> &amp;=
                    <call><name>check</name><argument_list>(<argument><expr><name>base</name> == <name><name>Copy</name>.<name>NULL_FILE_PLACEHOLDER</name></name> ? <name>null</name> : <name>base</name></expr></argument>,
                          <argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
        }</block></then> <else>else <block>{ <comment type="line">// non-file resources</comment>
            <decl_stmt><decl><type><name><name>Iterator</name><argument_list>&lt;<argument><name>Resource</name></argument>&gt;</argument_list></name></type> <name>iter</name> =<init> <expr><call><name><name>rc</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>upToDate</name> &amp;&amp; <call><name><name>iter</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <decl_stmt><decl><type><name>Resource</name></type> <name>r</name> =<init> <expr><call><name><name>iter</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>upToDate</name> = <call><name>archiveIsUpToDate</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
        }</block></else></if></else></if></else></if>
        <return>return <expr><name>upToDate</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Checks whether the archive is out-of-date with respect to the
     * given files, ensures that the archive won't contain itself.&lt;/p&gt;
     *
     * @param basedir base directory for file names
     * @param files array of relative file names
     * @return whether the archive is up-to-date
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>check</name><parameter_list>(<param><decl><type><name>File</name></type> <name>basedir</name></decl></param>, <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>files</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>upToDate</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name>archiveIsUpToDate</name><argument_list>(<argument><expr><name>files</name></expr></argument>, <argument><expr><name>basedir</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>upToDate</name> = false</expr>;</expr_stmt>
        }</block></then></if>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>files</name>.<name>length</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
            <if>if <condition>(<expr><call><name><name>tarFile</name>.<name>equals</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><name>basedir</name></expr></argument>, <argument><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"A tar file cannot include "
                                         + "itself"</expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
        }</block></for>
        <return>return <expr><name>upToDate</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Adds the resources contained in this collection to the archive.
     *
     * &lt;p&gt;Uses the file based methods for file resources for backwards
     * compatibility.&lt;/p&gt;
     *
     * @param rc the collection containing resources to add
     * @param tOut stream writing to the archive.
     * @throws IOException on error.
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>tar</name><parameter_list>(<param><decl><type><name>ResourceCollection</name></type> <name>rc</name></decl></param>, <param><decl><type><name>TarOutputStream</name></type> <name>tOut</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>ArchiveFileSet</name></type> <name>afs</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>rc</name> <name>instanceof</name> <name>ArchiveFileSet</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>afs</name> = (<name>ArchiveFileSet</name>) <name>rc</name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>afs</name> != <name>null</name> &amp;&amp; <call><name><name>afs</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 1
            &amp;&amp; <call><name><name>afs</name>.<name>getFullpath</name></name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getProject</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>length</name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"fullpath attribute may only "
                                     + "be specified for "
                                     + "filesets that specify a "
                                     + "single file."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>TarFileSet</name></type> <name>tfs</name> =<init> <expr><call><name>asTarFileSet</name><argument_list>(<argument><expr><name>afs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name>isFileFileSet</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>FileSet</name></type> <name>fs</name> =<init> <expr>(<name>FileSet</name>) <name>rc</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>files</name> =<init> <expr><call><name>getFileNames</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>files</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>File</name></type> <name>f</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>fs</name>.<name>getDir</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>name</name> =<init> <expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>replace</name><argument_list>(<argument><expr><name><name>File</name>.<name>separatorChar</name></name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>tarFile</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>tOut</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>tfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>rc</name>.<name>isFilesystemOnly</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <for>for (<init><decl><type><name>Resource</name></type> <name>r</name> :<range> <expr><name>rc</name></expr></range></decl></init>) <block>{
                <decl_stmt><decl><type><name>File</name></type> <name>f</name> =<init> <expr><call><name><name>r</name>.<name>as</name></name><argument_list>(<argument><expr><name><name>FileProvider</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call>.<call><name>getFile</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>tarFile</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>tOut</name></expr></argument>, <argument><expr><call><name><name>f</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>tfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></then> <else>else <block>{ <comment type="line">// non-file resources</comment>
            <for>for (<init><decl><type><name>Resource</name></type> <name>r</name> :<range> <expr><name>rc</name></expr></range></decl></init>) <block>{
                <expr_stmt><expr><call><name>tarResource</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>tOut</name></expr></argument>, <argument><expr><call><name><name>r</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>tfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></else></if></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * whether the given resource collection is a (subclass of)
     * FileSet that only contains file system resources.
     * @param rc the resource collection to check.
     * @return true if the collection is a fileset.
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>protected</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isFileFileSet</name><parameter_list>(<param><decl><type><name>ResourceCollection</name></type> <name>rc</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name>rc</name> <name>instanceof</name> <name>FileSet</name> &amp;&amp; <call><name><name>rc</name>.<name>isFilesystemOnly</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Grabs all included files and directors from the FileSet and
     * returns them as an array of (relative) file names.
     * @param fs the fileset to operate on.
     * @return a list of the filenames.
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>protected</specifier> <specifier>static</specifier> <name>String</name><index>[]</index></type> <name>getFileNames</name><parameter_list>(<param><decl><type><name>FileSet</name></type> <name>fs</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>DirectoryScanner</name></type> <name>ds</name> =<init> <expr><call><name><name>fs</name>.<name>getDirectoryScanner</name></name><argument_list>(<argument><expr><call><name><name>fs</name>.<name>getProject</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>directories</name> =<init> <expr><call><name><name>ds</name>.<name>getIncludedDirectories</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>filesPerSe</name> =<init> <expr><call><name><name>ds</name>.<name>getIncludedFiles</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>files</name> =<init> <expr>new <name><name>String</name> <index>[<expr><name><name>directories</name>.<name>length</name></name> + <name><name>filesPerSe</name>.<name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>directories</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>files</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>directories</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>filesPerSe</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>files</name></expr></argument>, <argument><expr><name><name>directories</name>.<name>length</name></name></expr></argument>,
                         <argument><expr><name><name>filesPerSe</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>files</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Copies fullpath, prefix and permission attributes from the
     * ArchiveFileSet to a new TarFileSet (or returns it unchanged if
     * it already is a TarFileSet).
     *
     * @param archiveFileSet fileset to copy attributes from, may be null
     * @return a new TarFileSet.
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>protected</specifier> <name>TarFileSet</name></type> <name>asTarFileSet</name><parameter_list>(<param><decl><type><name>ArchiveFileSet</name></type> <name>archiveFileSet</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>TarFileSet</name></type> <name>tfs</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>archiveFileSet</name> != <name>null</name> &amp;&amp; <name>archiveFileSet</name> <name>instanceof</name> <name>TarFileSet</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>tfs</name> = (<name>TarFileSet</name>) <name>archiveFileSet</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>tfs</name> = new <call><name>TarFileSet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>tfs</name>.<name>setProject</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>archiveFileSet</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>tfs</name>.<name>setPrefix</name></name><argument_list>(<argument><expr><call><name><name>archiveFileSet</name>.<name>getPrefix</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>tfs</name>.<name>setFullpath</name></name><argument_list>(<argument><expr><call><name><name>archiveFileSet</name>.<name>getFullpath</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><call><name><name>archiveFileSet</name>.<name>hasFileModeBeenSet</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>tfs</name>.<name>integerSetFileMode</name></name><argument_list>(<argument><expr><call><name><name>archiveFileSet</name>
                                           .<name>getFileMode</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <if>if <condition>(<expr><call><name><name>archiveFileSet</name>.<name>hasDirModeBeenSet</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>tfs</name>.<name>integerSetDirMode</name></name><argument_list>(<argument><expr><call><name><name>archiveFileSet</name>
                                          .<name>getDirMode</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <if>if <condition>(<expr><name>archiveFileSet</name>
                    <name>instanceof</name> <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>TarFileSet</name></name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>TarFileSet</name></name></type> <name>t</name> =<init>
                        <expr>(<name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>TarFileSet</name></name>) <name>archiveFileSet</name></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><call><name><name>t</name>.<name>hasUserNameBeenSet</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>tfs</name>.<name>setUserName</name></name><argument_list>(<argument><expr><call><name><name>t</name>.<name>getUserName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <if>if <condition>(<expr><call><name><name>t</name>.<name>hasGroupBeenSet</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>tfs</name>.<name>setGroup</name></name><argument_list>(<argument><expr><call><name><name>t</name>.<name>getGroup</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <if>if <condition>(<expr><call><name><name>t</name>.<name>hasUserIdBeenSet</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>tfs</name>.<name>setUid</name></name><argument_list>(<argument><expr><call><name><name>t</name>.<name>getUid</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <if>if <condition>(<expr><call><name><name>t</name>.<name>hasGroupIdBeenSet</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>tfs</name>.<name>setGid</name></name><argument_list>(<argument><expr><call><name><name>t</name>.<name>getGid</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then></if>
            }</block></then></if>
        }</block></else></if>
        <return>return <expr><name>tfs</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * This is a FileSet with the option to specify permissions
     * and other attributes.
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>TarFileSet</name>
        <super><extends>extends <name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>TarFileSet</name></extends></super> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name><index>[]</index></type> <name>files</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>preserveLeadingSlashes</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * Creates a new &lt;code&gt;TarFileSet&lt;/code&gt; instance.
         * Using a fileset as a constructor argument.
         *
         * @param fileset a &lt;code&gt;FileSet&lt;/code&gt; value
         */</comment>
        <constructor><specifier>public</specifier> <name>TarFileSet</name><parameter_list>(<param><decl><type><name>FileSet</name></type> <name>fileset</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>fileset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="javadoc">/**
         * Creates a new &lt;code&gt;TarFileSet&lt;/code&gt; instance.
         *
         */</comment>
        <constructor><specifier>public</specifier> <name>TarFileSet</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="javadoc">/**
         *  Get a list of files and directories specified in the fileset.
         * @param p the current project.
         * @return a list of file and directory names, relative to
         *    the baseDir for the project.
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getFiles</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>p</name></decl></param>)</parameter_list> <block>{
            <if>if <condition>(<expr><name>files</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>files</name> = <call><name>getFileNames</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <return>return <expr><name>files</name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * A 3 digit octal string, specify the user, group and
         * other modes in the standard Unix fashion;
         * optional, default=0644
         * @param octalString a 3 digit octal string.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setMode</name><parameter_list>(<param><decl><type><name>String</name></type> <name>octalString</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>setFileMode</name><argument_list>(<argument><expr><name>octalString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * @return the current mode.
         */</comment>
        <function><type><specifier>public</specifier> <name>int</name></type> <name>getMode</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><call><name>getFileMode</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getProject</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Flag to indicates whether leading `/'s should
         * be preserved in the file names.
         * Optional, default is &lt;code&gt;false&lt;/code&gt;.
         * @param b the leading slashes flag.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setPreserveLeadingSlashes</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>preserveLeadingSlashes</name></name> = <name>b</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * @return the leading slashes flag.
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getPreserveLeadingSlashes</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>preserveLeadingSlashes</name></expr>;</return>
        }</block></function>
    }</block></class>

    <comment type="javadoc">/**
     * Set of options for long file handling in the task.
     *
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>TarLongFileMode</name> <super><extends>extends <name>EnumeratedAttribute</name></extends></super> <block>{

        <comment type="javadoc">/** permissible values for longfile attribute */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type>
            <name>WARN</name> =<init> <expr>"warn"</expr></init>,
            <name>FAIL</name> =<init> <expr>"fail"</expr></init>,
            <name>TRUNCATE</name> =<init> <expr>"truncate"</expr></init>,
            <name>GNU</name> =<init> <expr>"gnu"</expr></init>,
            <name>POSIX</name> =<init> <expr>"posix"</expr></init>,
            <name>OMIT</name> =<init> <expr>"omit"</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name><index>[]</index></type> <name>validModes</name> =<init> <expr><block>{
            <expr><name>WARN</name></expr>, <expr><name>FAIL</name></expr>, <expr><name>TRUNCATE</name></expr>, <expr><name>GNU</name></expr>, <expr><name>POSIX</name></expr>, <expr><name>OMIT</name></expr>
        }</block></expr></init></decl>;</decl_stmt>

        <comment type="javadoc">/** Constructor, defaults to "warn" */</comment>
        <constructor><specifier>public</specifier> <name>TarLongFileMode</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setValue</name><argument_list>(<argument><expr><name>WARN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="javadoc">/**
         * @return the possible values for this enumerated type.
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getValues</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>validModes</name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * @return true if value is "truncate".
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isTruncateMode</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><call><name><name>TRUNCATE</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * @return true if value is "warn".
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isWarnMode</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><call><name><name>WARN</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * @return true if value is "gnu".
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isGnuMode</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><call><name><name>GNU</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * @return true if value is "fail".
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isFailMode</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><call><name><name>FAIL</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * @return true if value is "omit".
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isOmitMode</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><call><name><name>OMIT</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * @return true if value is "posix".
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isPosixMode</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><call><name><name>POSIX</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>

    <comment type="javadoc">/**
     * Valid Modes for Compression attribute to Tar Task
     *
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>TarCompressionMethod</name> <super><extends>extends <name>EnumeratedAttribute</name></extends></super> <block>{

        <comment type="line">// permissible values for compression attribute</comment>
        <comment type="javadoc">/**
         *    No compression
         */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>NONE</name> =<init> <expr>"none"</expr></init></decl>;</decl_stmt>
        <comment type="javadoc">/**
         *    GZIP compression
         */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>GZIP</name> =<init> <expr>"gzip"</expr></init></decl>;</decl_stmt>
        <comment type="javadoc">/**
         *    BZIP2 compression
         */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>BZIP2</name> =<init> <expr>"bzip2"</expr></init></decl>;</decl_stmt>


        <comment type="javadoc">/**
         * Default constructor
         */</comment>
        <constructor><specifier>public</specifier> <name>TarCompressionMethod</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setValue</name><argument_list>(<argument><expr><name>NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="javadoc">/**
         *  Get valid enumeration values.
         *  @return valid enumeration values
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getValues</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr>new <name><name>String</name><index>[]</index></name> <block>{<expr><name>NONE</name></expr>, <expr><name>GZIP</name></expr>, <expr><name>BZIP2</name></expr> }</block></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         *  This method wraps the output stream with the
         *     corresponding compression method
         *
         *  @param ostream output stream
         *  @return output stream with on-the-fly compression
         *  @exception IOException thrown if file is not writable
         */</comment>
        <function><type><specifier>private</specifier> <name>OutputStream</name></type> <name>compress</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>OutputStream</name></type> <name>ostream</name></decl></param>)</parameter_list>
            <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>v</name> =<init> <expr><call><name>getValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>GZIP</name>.<name>equals</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>new <call><name>GZIPOutputStream</name><argument_list>(<argument><expr><name>ostream</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then> <else>else <block>{
                <if>if <condition>(<expr><call><name><name>BZIP2</name>.<name>equals</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>ostream</name>.<name>write</name></name><argument_list>(<argument><expr>'B'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>ostream</name>.<name>write</name></name><argument_list>(<argument><expr>'Z'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr>new <call><name>CBZip2OutputStream</name><argument_list>(<argument><expr><name>ostream</name></expr></argument>)</argument_list></call></expr>;</return>
                }</block></then></if>
            }</block></else></if>
            <return>return <expr><name>ostream</name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
