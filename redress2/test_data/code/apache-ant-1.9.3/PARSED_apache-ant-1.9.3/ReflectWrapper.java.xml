<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\util\ReflectWrapper.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name></name>;</package>

<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name>.<name>Constructor</name></name>;</import>

<comment type="javadoc">/**
 * Utility class to handle reflection on java objects.
 * The class is a holder class for an object and
 * uses java reflection to call methods on the objects.
 * If things go wrong, BuildExceptions are thrown.
 */</comment>

<class><specifier>public</specifier> class <name>ReflectWrapper</name> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>Object</name></type> <name>obj</name></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * Construct a wrapped object using the no arg constructor.
     * @param loader the classloader to use to construct the class.
     * @param name the classname of the object to construct.
     */</comment>
    <constructor><specifier>public</specifier> <name>ReflectWrapper</name><parameter_list>(<param><decl><type><name>ClassLoader</name></type> <name>loader</name></decl></param>, <param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <try>try <block>{
            <decl_stmt><decl><type><name>Class</name></type> <name>clazz</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>clazz</name> = <call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr><name>loader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Constructor</name></type> <name>constructor</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>constructor</name> = <call><name><name>clazz</name>.<name>getConstructor</name></name><argument_list>(<argument><expr>(<name><name>Class</name><index>[]</index></name>) <name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>obj</name> = <call><name><name>constructor</name>.<name>newInstance</name></name><argument_list>(<argument><expr>(<name><name>Object</name><index>[]</index></name>) <name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>t</name></decl></param>) <block>{
            <expr_stmt><expr><call><name><name>ReflectUtil</name>.<name>throwBuildException</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructor using a passed in object.
     * @param obj the object to wrap.
     */</comment>
    <constructor><specifier>public</specifier> <name>ReflectWrapper</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>obj</name></name> = <name>obj</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * @return the wrapped object.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>getObject</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>obj</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Call a method on the object with no parameters.
     * @param methodName the name of the method to call
     * @return the object returned by the method
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>invoke</name><parameter_list>(<param><decl><type><name>String</name></type> <name>methodName</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>ReflectUtil</name>.<name>invoke</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>methodName</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Call a method on the object with one argument.
     * @param methodName the name of the method to call
     * @param argType    the type of argument.
     * @param arg        the value of the argument.
     * @return the object returned by the method
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>invoke</name><parameter_list>(
        <param><decl><type><name>String</name></type> <name>methodName</name></decl></param>, <param><decl><type><name>Class</name></type> <name>argType</name></decl></param>, <param><decl><type><name>Object</name></type> <name>arg</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>ReflectUtil</name>.<name>invoke</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>methodName</name></expr></argument>, <argument><expr><name>argType</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Call a method on the object with one argument.
     * @param methodName the name of the method to call
     * @param argType1   the type of the first argument.
     * @param arg1       the value of the first argument.
     * @param argType2   the type of the second argument.
     * @param arg2       the value of the second argument.
     * @return the object returned by the method
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>invoke</name><parameter_list>(
        <param><decl><type><name>String</name></type> <name>methodName</name></decl></param>, <param><decl><type><name>Class</name></type> <name>argType1</name></decl></param>, <param><decl><type><name>Object</name></type> <name>arg1</name></decl></param>,
        <param><decl><type><name>Class</name></type> <name>argType2</name></decl></param>, <param><decl><type><name>Object</name></type> <name>arg2</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>ReflectUtil</name>.<name>invoke</name></name><argument_list>(
            <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>methodName</name></expr></argument>, <argument><expr><name>argType1</name></expr></argument>, <argument><expr><name>arg1</name></expr></argument>, <argument><expr><name>argType2</name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
