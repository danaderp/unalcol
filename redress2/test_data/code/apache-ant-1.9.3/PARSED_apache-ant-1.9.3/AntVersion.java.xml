<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\condition\AntVersion.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>condition</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>DeweyDecimal</name></name>;</import>

<comment type="javadoc">/**
 * An Ant version condition.
 * @since Ant 1.7
 */</comment>
<class><specifier>public</specifier> class <name>AntVersion</name> <super><extends>extends <name>Task</name></extends> <implements>implements <name>Condition</name></implements></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>atLeast</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>exactly</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>propertyname</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Run as a task.
     * @throws BuildException if an error occurs.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>propertyname</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"'property' must be set."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>atLeast</name> != <name>null</name> || <name>exactly</name> != <name>null</name></expr>)</condition><then> <block>{
            <comment type="line">// If condition values are set, evaluate the condition</comment>
            <if>if <condition>(<expr><call><name>eval</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>setNewProperty</name><argument_list>(<argument><expr><name>propertyname</name></expr></argument>, <argument><expr><call><name>getVersion</name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then> <else>else <block>{
            <comment type="line">// Raw task</comment>
            <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>setNewProperty</name><argument_list>(<argument><expr><name>propertyname</name></expr></argument>, <argument><expr><call><name>getVersion</name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Evaluate the condition.
     * @return true if the condition is true.
     * @throws BuildException if an error occurs.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>eval</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>validate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>DeweyDecimal</name></type> <name>actual</name> =<init> <expr><call><name>getVersion</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>null</name> != <name>atLeast</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>actual</name>.<name>isGreaterThanOrEqual</name></name><argument_list>(<argument><expr>new <call><name>DeweyDecimal</name><argument_list>(<argument><expr><name>atLeast</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>null</name> != <name>exactly</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>actual</name>.<name>isEqual</name></name><argument_list>(<argument><expr>new <call><name>DeweyDecimal</name><argument_list>(<argument><expr><name>exactly</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <comment type="line">//default</comment>
        <return>return <expr>false</expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>validate</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>atLeast</name> != <name>null</name> &amp;&amp; <name>exactly</name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Only one of atleast or exactly may be set."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>null</name> == <name>atLeast</name> &amp;&amp; <name>null</name> == <name>exactly</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"One of atleast or exactly must be set."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>atLeast</name> != <name>null</name></expr>)</condition><then> <block>{
            <try>try <block>{
                <expr_stmt><expr>new <call><name>DeweyDecimal</name><argument_list>(<argument><expr><name>atLeast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></param>) <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                    <argument><expr>"The 'atleast' attribute is not a Dewey Decimal eg 1.1.0 : "
                    + <name>atLeast</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></then> <else>else <block>{
            <try>try <block>{
                <expr_stmt><expr>new <call><name>DeweyDecimal</name><argument_list>(<argument><expr><name>exactly</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></param>) <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                    <argument><expr>"The 'exactly' attribute is not a Dewey Decimal eg 1.1.0 : "
                    + <name>exactly</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></else></if>
    }</block></function>

    <function><type><specifier>private</specifier> <name>DeweyDecimal</name></type> <name>getVersion</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Project</name></type> <name>p</name> =<init> <expr>new <call><name>Project</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>char</name><index>[]</index></type> <name>versionString</name> =<init> <expr><call><name><name>p</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"ant.version"</expr></argument>)</argument_list></call>.<call><name>toCharArray</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>sb</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>foundFirstDigit</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>versionString</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <if>if <condition>(<expr><call><name><name>Character</name>.<name>isDigit</name></name><argument_list>(<argument><expr><name><name>versionString</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name><name>versionString</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>foundFirstDigit</name> = true</expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name><name>versionString</name><index>[<expr><name>i</name></expr>]</index></name> == '.' &amp;&amp; <name>foundFirstDigit</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name><name>versionString</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><call><name><name>Character</name>.<name>isLetter</name></name><argument_list>(<argument><expr><name><name>versionString</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> &amp;&amp; <name>foundFirstDigit</name></expr>)</condition><then> <block>{
                <break>break;</break>
            }</block></then></if>
        }</block></for>
        <return>return <expr>new <call><name>DeweyDecimal</name><argument_list>(<argument><expr><call><name><name>sb</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the atleast attribute.
     * @return the atleast attribute.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getAtLeast</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>atLeast</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the atleast attribute.
     * This is of the form major.minor.point.
     * For example 1.7.0.
     * @param atLeast the version to check against.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAtLeast</name><parameter_list>(<param><decl><type><name>String</name></type> <name>atLeast</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>atLeast</name></name> = <name>atLeast</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the exactly attribute.
     * @return the exactly attribute.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getExactly</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>exactly</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the exactly attribute.
     * This is of the form major.minor.point.
     * For example 1.7.0.
     * @param exactly the version to check against.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setExactly</name><parameter_list>(<param><decl><type><name>String</name></type> <name>exactly</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>exactly</name></name> = <name>exactly</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the name of the property to hold the ant version.
     * @return the name of the property.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getProperty</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>propertyname</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the name of the property to hold the ant version.
     * @param propertyname the name of the property.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setProperty</name><parameter_list>(<param><decl><type><name>String</name></type> <name>propertyname</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>propertyname</name></name> = <name>propertyname</name></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
