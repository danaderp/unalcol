<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\RecorderEntry.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>FileOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>PrintStream</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildLogger</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>DefaultLogger</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>SubBuildListener</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>StringUtils</name></name>;</import>

<comment type="javadoc">/**
 * This is a class that represents a recorder. This is the listener to the
 * build process.
 *
 * @since Ant 1.4
 */</comment>
<class><specifier>public</specifier> class <name>RecorderEntry</name> <super><implements>implements <name>BuildLogger</name>, <name>SubBuildListener</name></implements></super> <block>{

    <comment type="line">//////////////////////////////////////////////////////////////////////</comment>
    <comment type="line">// ATTRIBUTES</comment>

    <comment type="javadoc">/** The name of the file associated with this recorder entry.  */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>filename</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** The state of the recorder (recorder on or off).  */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>record</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** The current verbosity level to record at.  */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>loglevel</name> =<init> <expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** The output PrintStream to record to.  */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>PrintStream</name></type> <name>out</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** The start time of the last know target.  */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>targetStartTime</name> =<init> <expr>0L</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** Strip task banners if true.  */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>emacsMode</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** project instance the recorder is associated with */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Project</name></type> <name>project</name></decl>;</decl_stmt>

    <comment type="line">//////////////////////////////////////////////////////////////////////</comment>
    <comment type="line">// CONSTRUCTORS / INITIALIZERS</comment>

    <comment type="javadoc">/**
     * @param name The name of this recorder (used as the filename).
     */</comment>
    <constructor><specifier>protected</specifier> <name>RecorderEntry</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>targetStartTime</name> = <call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>filename</name> = <name>name</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="line">//////////////////////////////////////////////////////////////////////</comment>
    <comment type="line">// ACCESSOR METHODS</comment>

    <comment type="javadoc">/**
     * @return the name of the file the output is sent to.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getFilename</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>filename</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Turns off or on this recorder.
     *
     * @param state true for on, false for off, null for no change.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRecordState</name><parameter_list>(<param><decl><type><name>Boolean</name></type> <name>state</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>state</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>record</name> = <call><name><name>state</name>.<name>booleanValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * @see org.apache.tools.ant.BuildListener#buildStarted(BuildEvent)
     */</comment>
    <comment type="javadoc">/** {@inheritDoc}. */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>buildStarted</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"&gt; BUILD STARTED"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * @see org.apache.tools.ant.BuildListener#buildFinished(BuildEvent)
     */</comment>
    <comment type="javadoc">/** {@inheritDoc}. */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>buildFinished</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"&lt; BUILD FINISHED"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>record</name> &amp;&amp; <name>out</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Throwable</name></type> <name>error</name> =<init> <expr><call><name><name>event</name>.<name>getException</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>error</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>out</name>.<name>println</name></name><argument_list>(<argument><expr><name><name>StringUtils</name>.<name>LINE_SEP</name></name> + "BUILD SUCCESSFUL"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>out</name>.<name>println</name></name><argument_list>(<argument><expr><name><name>StringUtils</name>.<name>LINE_SEP</name></name> + "BUILD FAILED"
                            + <name><name>StringUtils</name>.<name>LINE_SEP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>error</name>.<name>printStackTrace</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if>
        <expr_stmt><expr><call><name>cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Cleans up any resources held by this recorder entry at the end
     * of a subbuild if it has been created for the subbuild's project
     * instance.
     *
     * @param event the buildFinished event
     *
     * @since Ant 1.6.2
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>subBuildFinished</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>event</name>.<name>getProject</name></name><argument_list>()</argument_list></call> == <name>project</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Empty implementation to satisfy the BuildListener interface.
     *
     * @param event the buildStarted event
     *
     * @since Ant 1.6.2
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>subBuildStarted</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
    }</block></function>

    <comment type="javadoc">/**
     * @see org.apache.tools.ant.BuildListener#targetStarted(BuildEvent)
     */</comment>
    <comment type="javadoc">/** {@inheritDoc}. */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>targetStarted</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"&gt;&gt; TARGET STARTED -- " + <call><name><name>event</name>.<name>getTarget</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name><name>StringUtils</name>.<name>LINE_SEP</name></name> + <call><name><name>event</name>.<name>getTarget</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call> + ":"</expr></argument>,
            <argument><expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>targetStartTime</name> = <call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * @see org.apache.tools.ant.BuildListener#targetFinished(BuildEvent)
     */</comment>
    <comment type="javadoc">/** {@inheritDoc}. */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>targetFinished</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"&lt;&lt; TARGET FINISHED -- " + <call><name><name>event</name>.<name>getTarget</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>time</name> =<init> <expr><call><name>formatTime</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call> - <name>targetStartTime</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><call><name><name>event</name>.<name>getTarget</name></name><argument_list>()</argument_list></call> + ":  duration " + <name>time</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * @see org.apache.tools.ant.BuildListener#taskStarted(BuildEvent)
     */</comment>
    <comment type="javadoc">/** {@inheritDoc}. */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>taskStarted</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"&gt;&gt;&gt; TASK STARTED -- " + <call><name><name>event</name>.<name>getTask</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * @see org.apache.tools.ant.BuildListener#taskFinished(BuildEvent)
     */</comment>
    <comment type="javadoc">/** {@inheritDoc}. */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>taskFinished</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"&lt;&lt;&lt; TASK FINISHED -- " + <call><name><name>event</name>.<name>getTask</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * @see org.apache.tools.ant.BuildListener#messageLogged(BuildEvent)
     */</comment>
    <comment type="javadoc">/** {@inheritDoc}. */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>messageLogged</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"--- MESSAGE LOGGED"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>buf</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name><name>event</name>.<name>getTask</name></name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>name</name> =<init> <expr><call><name><name>event</name>.<name>getTask</name></name><argument_list>()</argument_list></call>.<call><name>getTaskName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr>!<name>emacsMode</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>label</name> =<init> <expr>"[" + <name>name</name> + "] "</expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>size</name> =<init> <expr><name><name>DefaultLogger</name>.<name>LEFT_COLUMN_SIZE</name></name> - <call><name><name>label</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>size</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                    <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr>" "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
                <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>event</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><call><name><name>buf</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>event</name>.<name>getPriority</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * The thing that actually sends the information to the output.
     *
     * @param mesg The message to log.
     * @param level The verbosity level of the message.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>log</name><parameter_list>(<param><decl><type><name>String</name></type> <name>mesg</name></decl></param>, <param><decl><type><name>int</name></type> <name>level</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>record</name> &amp;&amp; (<name>level</name> &lt;= <name>loglevel</name>) &amp;&amp; <name>out</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>out</name>.<name>println</name></name><argument_list>(<argument><expr><name>mesg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>flush</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>record</name> &amp;&amp; <name>out</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>out</name>.<name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * @see BuildLogger#setMessageOutputLevel(int)
     */</comment>
    <comment type="javadoc">/** {@inheritDoc}. */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMessageOutputLevel</name><parameter_list>(<param><decl><type><name>int</name></type> <name>level</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>level</name> &gt;= <name><name>Project</name>.<name>MSG_ERR</name></name> &amp;&amp; <name>level</name> &lt;= <name><name>Project</name>.<name>MSG_DEBUG</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>loglevel</name> = <name>level</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * @see BuildLogger#setOutputPrintStream(PrintStream)
     */</comment>
    <comment type="javadoc">/** {@inheritDoc}. */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOutputPrintStream</name><parameter_list>(<param><decl><type><name>PrintStream</name></type> <name>output</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>closeFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>out</name> = <name>output</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * @see BuildLogger#setEmacsMode(boolean)
     */</comment>
    <comment type="javadoc">/** {@inheritDoc}. */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setEmacsMode</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>emacsMode</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>emacsMode</name></name> = <name>emacsMode</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * @see BuildLogger#setErrorPrintStream(PrintStream)
     */</comment>
    <comment type="javadoc">/** {@inheritDoc}. */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setErrorPrintStream</name><parameter_list>(<param><decl><type><name>PrintStream</name></type> <name>err</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setOutputPrintStream</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>formatTime</name><parameter_list>(<param><decl><type><name>long</name></type> <name>millis</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// CheckStyle:MagicNumber OFF</comment>
        <decl_stmt><decl><type><name>long</name></type> <name>seconds</name> =<init> <expr><name>millis</name> / 1000</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>minutes</name> =<init> <expr><name>seconds</name> / 60</expr></init></decl>;</decl_stmt>


        <if>if <condition>(<expr><name>minutes</name> &gt; 0</expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>Long</name>.<name>toString</name></name><argument_list>(<argument><expr><name>minutes</name></expr></argument>)</argument_list></call> + " minute"
                 + (<name>minutes</name> == 1 ? " " : "s ")
                 + <call><name><name>Long</name>.<name>toString</name></name><argument_list>(<argument><expr><name>seconds</name> % 60</expr></argument>)</argument_list></call> + " second"
                 + (<name>seconds</name> % 60 == 1 ? "" : "s")</expr>;</return>
        }</block></then> <else>else <block>{
            <return>return <expr><call><name><name>Long</name>.<name>toString</name></name><argument_list>(<argument><expr><name>seconds</name></expr></argument>)</argument_list></call> + " second"
                 + (<name>seconds</name> % 60 == 1 ? "" : "s")</expr>;</return>
        }</block></else></if>
        <comment type="line">// CheckStyle:MagicNumber ON</comment>
    }</block></function>

    <comment type="javadoc">/**
     * Set the project associated with this recorder entry.
     *
     * @param project the project instance
     *
     * @since 1.6.2
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setProject</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>project</name></name> = <name>project</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>project</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>project</name>.<name>addBuildListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Get the project associated with this recorder entry.
     *
     * @since 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>Project</name></type> <name>getProject</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>project</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * @since 1.6.2
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>cleanup</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>closeFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>project</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>project</name>.<name>removeBuildListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>project</name> = <name>null</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Initially opens the file associated with this recorder.
     * Used by Recorder.
     * @param append Indicates if output must be appended to the logfile or that
     * the logfile should be overwritten.
     * @throws BuildException
     * @since 1.6.3
     */</comment>
    <function><type><name>void</name></type> <name>openFile</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>append</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>openFileImpl</name><argument_list>(<argument><expr><name>append</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Closes the file associated with this recorder.
     * Used by Recorder.
     * @since 1.6.3
     */</comment>
    <function><type><name>void</name></type> <name>closeFile</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>out</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>out</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>out</name> = <name>null</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Re-opens the file associated with this recorder.
     * Used by Recorder.
     * @throws BuildException
     * @since 1.6.3
     */</comment>
    <function><type><name>void</name></type> <name>reopenFile</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>openFileImpl</name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>openFileImpl</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>append</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>out</name> == <name>null</name></expr>)</condition><then> <block>{
            <try>try <block>{
                <expr_stmt><expr><name>out</name> = new <call><name>PrintStream</name><argument_list>(<argument><expr>new <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>append</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ioe</name></decl></param>) <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Problems opening file using a "
                                         + "recorder entry"</expr></argument>, <argument><expr><name>ioe</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></then></if>
    }</block></function>

}</block></class>
</unit>
