<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\Rpm.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>BufferedOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>OutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>PrintStream</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>Execute</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>ExecuteStreamHandler</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>LogOutputStream</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>LogStreamHandler</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>PumpStreamHandler</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>condition</name>.<name>Os</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Commandline</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Path</name></name>;</import>

<comment type="javadoc">/**
 * Invokes the rpm tool to build a Linux installation file.
 *
 */</comment>
<class><specifier>public</specifier> class <name>Rpm</name> <super><extends>extends <name>Task</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PATH1</name> =<init> <expr>"PATH"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PATH2</name> =<init> <expr>"Path"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PATH3</name> =<init> <expr>"path"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * the spec file
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>specFile</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * the rpm top dir
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>topDir</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * the rpm command to use
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>command</name> =<init> <expr>"-bb"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The executable to use for building the packages.
     * @since Ant 1.6
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>rpmBuildCommand</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * clean BUILD directory
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>cleanBuildDir</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * remove spec file
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>removeSpec</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * remove sources
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>removeSource</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * the file to direct standard output from the command
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>output</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * the file to direct standard error from the command
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>error</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Halt on error return value from rpm build.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>failOnError</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Don't show output of RPM build command on console. This does not affect
     * the printing of output and error messages to files.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>quiet</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Execute the task
     *
     * @throws BuildException is there is a problem in the task execution.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{

        <decl_stmt><decl><type><name>Commandline</name></type> <name>toExecute</name> =<init> <expr>new <call><name>Commandline</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>toExecute</name>.<name>setExecutable</name></name><argument_list>(<argument><expr><name>rpmBuildCommand</name> == <name>null</name>
                                ? <call><name>guessRpmBuildCommand</name><argument_list>()</argument_list></call>
                                : <name>rpmBuildCommand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>topDir</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"--define"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"_topdir " + <name>topDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setLine</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>cleanBuildDir</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"--clean"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>removeSpec</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"--rmspec"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>removeSource</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"--rmsource"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"SPECS/" + <name>specFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ExecuteStreamHandler</name></type> <name>streamhandler</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>OutputStream</name></type> <name>outputstream</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>OutputStream</name></type> <name>errorstream</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>error</name> == <name>null</name> &amp;&amp; <name>output</name> == <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr>!<name>quiet</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>streamhandler</name> = new <call><name>LogStreamHandler</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></argument>,
                                                     <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>streamhandler</name> = new <call><name>LogStreamHandler</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>,
                                                     <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then> <else>else <block>{
            <if>if <condition>(<expr><name>output</name> != <name>null</name></expr>)</condition><then> <block>{
                <try>try <block>{
                    <decl_stmt><decl><type><name>BufferedOutputStream</name></type> <name>bos</name>
                        =<init> <expr>new <call><name>BufferedOutputStream</name><argument_list>(<argument><expr>new <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>outputstream</name> = new <call><name>PrintStream</name><argument_list>(<argument><expr><name>bos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></catch></try>
            }</block></then> <else>else <if>if <condition>(<expr>!<name>quiet</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>outputstream</name> = new <call><name>LogOutputStream</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>outputstream</name> = new <call><name>LogOutputStream</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if></else></if>
            <if>if <condition>(<expr><name>error</name> != <name>null</name></expr>)</condition><then> <block>{
                <try>try <block>{
                    <decl_stmt><decl><type><name>BufferedOutputStream</name></type> <name>bos</name>
                        =<init> <expr>new <call><name>BufferedOutputStream</name><argument_list>(<argument><expr>new <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>errorstream</name> = new <call><name>PrintStream</name><argument_list>(<argument><expr><name>bos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block>  <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></catch></try>
            }</block></then> <else>else <if>if <condition>(<expr>!<name>quiet</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>errorstream</name> = new <call><name>LogOutputStream</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>errorstream</name> = new <call><name>LogOutputStream</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if></else></if>
            <expr_stmt><expr><name>streamhandler</name> = new <call><name>PumpStreamHandler</name><argument_list>(<argument><expr><name>outputstream</name></expr></argument>, <argument><expr><name>errorstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <decl_stmt><decl><type><name>Execute</name></type> <name>exe</name> =<init> <expr><call><name>getExecute</name><argument_list>(<argument><expr><name>toExecute</name></expr></argument>, <argument><expr><name>streamhandler</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Building the RPM based on the " + <name>specFile</name> + " file"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>returncode</name> =<init> <expr><call><name><name>exe</name>.<name>execute</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>Execute</name>.<name>isFailure</name></name><argument_list>(<argument><expr><name>returncode</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>msg</name> =<init> <expr>"'" + <call><name><name>toExecute</name>.<name>getExecutable</name></name><argument_list>()</argument_list></call>
                    + "' failed with exit code " + <name>returncode</name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>failOnError</name></expr>)</condition><then> <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if>
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_ERR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>outputstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>errorstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <comment type="javadoc">/**
     * The directory which will have the expected
     * subdirectories, SPECS, SOURCES, BUILD, SRPMS ; optional.
     * If this isn't specified,
     * the &lt;tt&gt;baseDir&lt;/tt&gt; value is used
     *
     * @param td the directory containing the normal RPM directories.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTopDir</name><parameter_list>(<param><decl><type><name>File</name></type> <name>td</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>topDir</name></name> = <name>td</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * What command to issue to the rpm build tool; optional.
     * The default is "-bb"
     * @param c the command to use.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCommand</name><parameter_list>(<param><decl><type><name>String</name></type> <name>c</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>command</name></name> = <name>c</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The name of the spec File to use; required.
     * @param sf the spec file name to use.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSpecFile</name><parameter_list>(<param><decl><type><name>String</name></type> <name>sf</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr>(<name>sf</name> == <name>null</name>) || (<call><name><name>sf</name>.<name>trim</name></name><argument_list>()</argument_list></call>.<call><name>length</name><argument_list>()</argument_list></call> == 0)</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"You must specify a spec file"</expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>specFile</name></name> = <name>sf</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Flag (optional, default=false) to remove
     * the generated files in the BUILD directory
     * @param cbd a &lt;code&gt;boolean&lt;/code&gt; value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCleanBuildDir</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>cbd</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>cleanBuildDir</name> = <name>cbd</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Flag (optional, default=false) to remove the spec file from SPECS
     * @param rs a &lt;code&gt;boolean&lt;/code&gt; value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRemoveSpec</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>rs</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>removeSpec</name> = <name>rs</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Flag (optional, default=false)
     * to remove the sources after the build.
     * See the &lt;tt&gt;--rmsource&lt;/tt&gt;  option of rpmbuild.
     * @param rs a &lt;code&gt;boolean&lt;/code&gt; value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRemoveSource</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>rs</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>removeSource</name> = <name>rs</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Optional file to save stdout to.
     * @param output the file to save stdout to.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOutput</name><parameter_list>(<param><decl><type><name>File</name></type> <name>output</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>output</name></name> = <name>output</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Optional file to save stderr to
     * @param error the file to save error output to.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setError</name><parameter_list>(<param><decl><type><name>File</name></type> <name>error</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>error</name></name> = <name>error</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The executable to run when building; optional.
     * The default is &lt;code&gt;rpmbuild&lt;/code&gt;.
     *
     * @since Ant 1.6
     * @param c the rpm build executable
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRpmBuildCommand</name><parameter_list>(<param><decl><type><name>String</name></type> <name>c</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>rpmBuildCommand</name></name> = <name>c</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * If &lt;code&gt;true&lt;/code&gt;, stop the build process when the rpmbuild command
     * exits with an error status.
     * @param value &lt;code&gt;true&lt;/code&gt; if it should halt, otherwise
     * &lt;code&gt;false&lt;/code&gt;. The default is &lt;code&gt;false&lt;/code&gt;.
     *
     * @since Ant 1.6.3
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFailOnError</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>failOnError</name> = <name>value</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * If true, output from the RPM build command will only be logged to DEBUG.
     * @param value &lt;code&gt;false&lt;/code&gt; if output should be logged, otherwise
     * &lt;code&gt;true&lt;/code&gt;. The default is &lt;code&gt;false&lt;/code&gt;.
     *
     * @since Ant 1.6.3
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setQuiet</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>quiet</name> = <name>value</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Checks whether &lt;code&gt;rpmbuild&lt;/code&gt; is on the PATH and returns
     * the absolute path to it - falls back to &lt;code&gt;rpm&lt;/code&gt;
     * otherwise.
     *
     * @return the command used to build RPM's
     *
     * @since 1.6
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>guessRpmBuildCommand</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Map</name></type><comment type="block">/*&lt;String, String&gt;*/</comment> <name>env</name> =<init> <expr><call><name><name>Execute</name>.<name>getEnvironmentVariables</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>path</name> =<init> <expr>(<name>String</name>) <call><name><name>env</name>.<name>get</name></name><argument_list>(<argument><expr><name>PATH1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>path</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>path</name> = (<name>String</name>) <call><name><name>env</name>.<name>get</name></name><argument_list>(<argument><expr><name>PATH2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>path</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>path</name> = (<name>String</name>) <call><name><name>env</name>.<name>get</name></name><argument_list>(<argument><expr><name>PATH3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>

        <if>if <condition>(<expr><name>path</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Path</name></type> <name>p</name> =<init> <expr>new <call><name>Path</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>pElements</name> =<init> <expr><call><name><name>p</name>.<name>list</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>pElements</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>File</name></type> <name>f</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name><name>pElements</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
                                  <argument><expr>"rpmbuild"
                                  + (<call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr>"dos"</expr></argument>)</argument_list></call> ? ".exe" : "")</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>f</name>.<name>canRead</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <return>return <expr><call><name><name>f</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr>;</return>
                }</block></then></if>
            }</block></for>
        }</block></then></if>

        <return>return <expr>"rpm"</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the execute object.
     * @param toExecute the command line to use.
     * @param streamhandler the stream handler to use.
     * @return the execute object.
     * @since Ant 1.6.3
     */</comment>
    <function><type><specifier>protected</specifier> <name>Execute</name></type> <name>getExecute</name><parameter_list>(<param><decl><type><name>Commandline</name></type> <name>toExecute</name></decl></param>,
                                 <param><decl><type><name>ExecuteStreamHandler</name></type> <name>streamhandler</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Execute</name></type> <name>exe</name> =<init> <expr>new <call><name>Execute</name><argument_list>(<argument><expr><name>streamhandler</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>exe</name>.<name>setAntRun</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>topDir</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>topDir</name> = <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>exe</name>.<name>setWorkingDirectory</name></name><argument_list>(<argument><expr><name>topDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>exe</name>.<name>setCommandline</name></name><argument_list>(<argument><expr><call><name><name>toExecute</name>.<name>getCommandline</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>exe</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
