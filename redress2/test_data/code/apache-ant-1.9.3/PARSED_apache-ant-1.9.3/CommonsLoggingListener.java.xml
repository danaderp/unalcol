<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\listener\CommonsLoggingListener.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>listener</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>logging</name>.<name>Log</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>logging</name>.<name>LogConfigurationException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>logging</name>.<name>LogFactory</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildListener</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildLogger</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>UnknownElement</name></name>;</import>

<import>import <name><name>java</name>.<name>io</name>.<name>PrintStream</name></name>;</import>

<comment type="javadoc">/**
 * Jakarta Commons Logging listener.
 * Note: do not use the SimpleLog as your logger implementation as it
 * causes an infinite loop since it writes to System.err, which Ant traps
 * and reroutes to the logger/listener layer.
 *
 * The following names are used for the log:
 *  org.apache.tools.ant.Project.PROJECT_NAME  - for project events
 *  org.apache.tools.ant.Target.TARGET_NAME - for target events
 *  TASK_CLASS_NAME.TARGET_NAME - for events in individual targets.
 *
 * In all target and project names we replace "." and " " with "-".
 *
 * TODO: we should use the advanced context logging features (and expose them
 * in c-l first :-)
 * TODO: this is _very_ inefficient. Switching the out and tracking the logs
 * can be optimized a lot - but may require few more changes to the core.
 *
 * @since Ant 1.5
 */</comment>
<class><specifier>public</specifier> class <name>CommonsLoggingListener</name> <super><implements>implements <name>BuildListener</name>, <name>BuildLogger</name></implements></super> <block>{

    <comment type="javadoc">/** Indicates if the listener was initialized. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>initialized</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>LogFactory</name></type> <name>logFactory</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * name of the category under which target events are logged
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TARGET_LOG</name> =<init> <expr>"org.apache.tools.ant.Target"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * name of the category under which project events are logged
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PROJECT_LOG</name> =<init> <expr>"org.apache.tools.ant.Project"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Construct the listener and make sure that a LogFactory
     * can be obtained.
     */</comment>
    <constructor><specifier>public</specifier> <name>CommonsLoggingListener</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <function><type><specifier>private</specifier> <name>Log</name></type> <name>getLog</name><parameter_list>(<param><decl><type><name>String</name></type> <name>cat</name></decl></param>, <param><decl><type><name>String</name></type> <name>suffix</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>suffix</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>suffix</name> = <call><name><name>suffix</name>.<name>replace</name></name><argument_list>(<argument><expr>'.'</expr></argument>, <argument><expr>'-'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>suffix</name> = <call><name><name>suffix</name>.<name>replace</name></name><argument_list>(<argument><expr>' '</expr></argument>, <argument><expr>'-'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cat</name> = <name>cat</name> + "." + <name>suffix</name></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>PrintStream</name></type> <name>tmpOut</name> =<init> <expr><name><name>System</name>.<name>out</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PrintStream</name></type> <name>tmpErr</name> =<init> <expr><name><name>System</name>.<name>err</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>setOut</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>setErr</name></name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr>!<name>initialized</name></expr>)</condition><then> <block>{
            <try>try <block>{
                <expr_stmt><expr><name>logFactory</name> = <call><name><name>LogFactory</name>.<name>getFactory</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>LogConfigurationException</name></type> <name>e</name></decl></param>) <block>{
                <expr_stmt><expr><call><name><name>e</name>.<name>printStackTrace</name></name><argument_list>(<argument><expr><name><name>System</name>.<name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>null</name></expr>;</return>
            }</block></catch></try>
        }</block></then></if>

        <expr_stmt><expr><name>initialized</name> = true</expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Log</name></type> <name>log</name> =<init> <expr><call><name><name>logFactory</name>.<name>getInstance</name></name><argument_list>(<argument><expr><name>cat</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>setOut</name></name><argument_list>(<argument><expr><name>tmpOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>setErr</name></name><argument_list>(<argument><expr><name>tmpErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>log</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/** {@inheritDoc}. */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>buildStarted</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>categoryString</name> =<init> <expr><name>PROJECT_LOG</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Log</name></type> <name>log</name> =<init> <expr><call><name>getLog</name><argument_list>(<argument><expr><name>categoryString</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>initialized</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>realLog</name><argument_list>(<argument><expr><name>log</name></expr></argument>, <argument><expr>"Build started."</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/** {@inheritDoc}. */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>buildFinished</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>initialized</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>categoryString</name> =<init> <expr><name>PROJECT_LOG</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Log</name></type> <name>log</name> =<init> <expr><call><name>getLog</name><argument_list>(<argument><expr><name>categoryString</name></expr></argument>, <argument><expr><call><name><name>event</name>.<name>getProject</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><call><name><name>event</name>.<name>getException</name></name><argument_list>()</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>realLog</name><argument_list>(<argument><expr><name>log</name></expr></argument>, <argument><expr>"Build finished."</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>realLog</name><argument_list>(<argument><expr><name>log</name></expr></argument>, <argument><expr>"Build finished with error."</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_ERR</name></name></expr></argument>,
                        <argument><expr><call><name><name>event</name>.<name>getException</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * @see BuildListener#targetStarted
     */</comment>
    <comment type="javadoc">/** {@inheritDoc}. */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>targetStarted</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>initialized</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Log</name></type> <name>log</name> =<init> <expr><call><name>getLog</name><argument_list>(<argument><expr><name>TARGET_LOG</name></expr></argument>,
                    <argument><expr><call><name><name>event</name>.<name>getTarget</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// Since task log category includes target, we don't really</comment>
            <comment type="line">// need this message</comment>
            <expr_stmt><expr><call><name>realLog</name><argument_list>(<argument><expr><name>log</name></expr></argument>, <argument><expr>"Start: " + <call><name><name>event</name>.<name>getTarget</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * @see BuildListener#targetFinished
     */</comment>
    <comment type="javadoc">/** {@inheritDoc}. */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>targetFinished</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>initialized</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>targetName</name> =<init> <expr><call><name><name>event</name>.<name>getTarget</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Log</name></type> <name>log</name> =<init> <expr><call><name>getLog</name><argument_list>(<argument><expr><name>TARGET_LOG</name></expr></argument>,
                    <argument><expr><call><name><name>event</name>.<name>getTarget</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>event</name>.<name>getException</name></name><argument_list>()</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>realLog</name><argument_list>(<argument><expr><name>log</name></expr></argument>, <argument><expr>"Target end: " + <name>targetName</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>realLog</name><argument_list>(<argument><expr><name>log</name></expr></argument>, <argument><expr>"Target \"" + <name>targetName</name>
                        + "\" finished with error."</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_ERR</name></name></expr></argument>,
                        <argument><expr><call><name><name>event</name>.<name>getException</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * @see BuildListener#taskStarted
     */</comment>
    <comment type="javadoc">/** {@inheritDoc}. */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>taskStarted</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>initialized</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Task</name></type> <name>task</name> =<init> <expr><call><name><name>event</name>.<name>getTask</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Object</name></type> <name>real</name> =<init> <expr><name>task</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>task</name> <name>instanceof</name> <name>UnknownElement</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>Object</name></type> <name>realObj</name> =<init> <expr>((<name>UnknownElement</name>) <name>task</name>).<call><name>getTask</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>realObj</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>real</name> = <name>realObj</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
            <decl_stmt><decl><type><name>Log</name></type> <name>log</name> =<init> <expr><call><name>getLog</name><argument_list>(<argument><expr><call><name><name>real</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>log</name>.<name>isTraceEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>realLog</name><argument_list>(<argument><expr><name>log</name></expr></argument>, <argument><expr>"Task \"" + <call><name><name>task</name>.<name>getTaskName</name></name><argument_list>()</argument_list></call> + "\" started "</expr></argument>,
                        <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * @see BuildListener#taskFinished
     */</comment>
    <comment type="javadoc">/** {@inheritDoc}. */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>taskFinished</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>initialized</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Task</name></type> <name>task</name> =<init> <expr><call><name><name>event</name>.<name>getTask</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Object</name></type> <name>real</name> =<init> <expr><name>task</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>task</name> <name>instanceof</name> <name>UnknownElement</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>Object</name></type> <name>realObj</name> =<init> <expr>((<name>UnknownElement</name>) <name>task</name>).<call><name>getTask</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>realObj</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>real</name> = <name>realObj</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
            <decl_stmt><decl><type><name>Log</name></type> <name>log</name> =<init> <expr><call><name>getLog</name><argument_list>(<argument><expr><call><name><name>real</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>event</name>.<name>getException</name></name><argument_list>()</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><call><name><name>log</name>.<name>isTraceEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>realLog</name><argument_list>(<argument><expr><name>log</name></expr></argument>, <argument><expr>"Task \"" + <call><name><name>task</name>.<name>getTaskName</name></name><argument_list>()</argument_list></call> + "\" finished."</expr></argument>,
                            <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>realLog</name><argument_list>(<argument><expr><name>log</name></expr></argument>, <argument><expr>"Task \"" + <call><name><name>task</name>.<name>getTaskName</name></name><argument_list>()</argument_list></call>
                        + "\" finished with error."</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_ERR</name></name></expr></argument>,
                        <argument><expr><call><name><name>event</name>.<name>getException</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if>
    }</block></function>


    <comment type="javadoc">/**
     * @see BuildListener#messageLogged
     */</comment>
    <comment type="javadoc">/** {@inheritDoc}. */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>messageLogged</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>initialized</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Object</name></type> <name>categoryObject</name> =<init> <expr><call><name><name>event</name>.<name>getTask</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>categoryString</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>categoryDetail</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>categoryObject</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>categoryObject</name> = <call><name><name>event</name>.<name>getTarget</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>categoryObject</name> == <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>categoryObject</name> = <call><name><name>event</name>.<name>getProject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>categoryString</name> = <name>PROJECT_LOG</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>categoryDetail</name> = <call><name><name>event</name>.<name>getProject</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><name>categoryString</name> = <name>TARGET_LOG</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>categoryDetail</name> = <call><name><name>event</name>.<name>getTarget</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then> <else>else <block>{
                <comment type="line">// It's a task - append the target</comment>
                <if>if <condition>(<expr><call><name><name>event</name>.<name>getTarget</name></name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>categoryString</name> = <call><name><name>categoryObject</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>categoryDetail</name> = <call><name><name>event</name>.<name>getTarget</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><name>categoryString</name> = <call><name><name>categoryObject</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>

            }</block></else></if>

            <decl_stmt><decl><type><name>Log</name></type> <name>log</name> =<init> <expr><call><name>getLog</name><argument_list>(<argument><expr><name>categoryString</name></expr></argument>, <argument><expr><name>categoryDetail</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>priority</name> =<init> <expr><call><name><name>event</name>.<name>getPriority</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>message</name> =<init> <expr><call><name><name>event</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>realLog</name><argument_list>(<argument><expr><name>log</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>priority</name></expr></argument> , <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>realLog</name><parameter_list>(<param><decl><type><name>Log</name></type> <name>log</name></decl></param>, <param><decl><type><name>String</name></type> <name>message</name></decl></param>, <param><decl><type><name>int</name></type> <name>priority</name></decl></param>, <param><decl><type><name>Throwable</name></type> <name>t</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>PrintStream</name></type> <name>tmpOut</name> =<init> <expr><name><name>System</name>.<name>out</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PrintStream</name></type> <name>tmpErr</name> =<init> <expr><name><name>System</name>.<name>err</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>setOut</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>setErr</name></name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <switch>switch <condition>(<expr><name>priority</name></expr>)</condition> <block>{
            <case>case <expr><name><name>Project</name>.<name>MSG_ERR</name></name></expr>:
                <if>if <condition>(<expr><name>t</name> == <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>log</name>.<name>error</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name><name>log</name>.<name>error</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <break>break;</break>
            </case><case>case <expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr>:
                <if>if <condition>(<expr><name>t</name> == <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>log</name>.<name>warn</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name><name>log</name>.<name>warn</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <break>break;</break>
            </case><case>case <expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr>:
                <if>if <condition>(<expr><name>t</name> == <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>log</name>.<name>info</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name><name>log</name>.<name>info</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <break>break;</break>
            </case><case>case <expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr>:
                <expr_stmt><expr><call><name><name>log</name>.<name>debug</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr>:
                <expr_stmt><expr><call><name><name>log</name>.<name>debug</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><default>default:
                <expr_stmt><expr><call><name><name>log</name>.<name>error</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </default>}</block></switch>
        <expr_stmt><expr><call><name><name>System</name>.<name>setOut</name></name><argument_list>(<argument><expr><name>tmpOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>setErr</name></name><argument_list>(<argument><expr><name>tmpErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// CheckStyle:VisibilityModifier OFF - bc</comment>
    <decl_stmt><decl><type><name>PrintStream</name></type> <name>out</name> =<init> <expr><name><name>System</name>.<name>out</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PrintStream</name></type> <name>err</name> =<init> <expr><name><name>System</name>.<name>err</name></name></expr></init></decl>;</decl_stmt>
    <comment type="line">// CheckStyle:VisibilityModifier ON</comment>

    <comment type="javadoc">/**
     * Set the the output level.
     * This is not used, the logger config is used instead.
     * @param level ignored
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMessageOutputLevel</name><parameter_list>(<param><decl><type><name>int</name></type> <name>level</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// Use the logger config</comment>
    }</block></function>

    <comment type="javadoc">/**
     * Set the output print stream.
     * @param output the output stream
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOutputPrintStream</name><parameter_list>(<param><decl><type><name>PrintStream</name></type> <name>output</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>out</name></name> = <name>output</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set emacs mode.
     * This is ignored.
     * @param emacsMode ignored
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setEmacsMode</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>emacsMode</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// Doesn't make sense for c-l. Use the logger config</comment>
    }</block></function>

    <comment type="javadoc">/**
     * Set the error print stream.
     * @param err the error stream
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setErrorPrintStream</name><parameter_list>(<param><decl><type><name>PrintStream</name></type> <name>err</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>err</name></name> = <name>err</name></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
