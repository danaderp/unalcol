<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\ssh\ScpToMessage.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>ssh</name></name>;</package>

<import>import <name><name>com</name>.<name>jcraft</name>.<name>jsch</name>.<name>Channel</name></name>;</import>
<import>import <name><name>com</name>.<name>jcraft</name>.<name>jsch</name>.<name>Session</name></name>;</import>
<import>import <name><name>com</name>.<name>jcraft</name>.<name>jsch</name>.<name>JSchException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>OutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>

<comment type="javadoc">/**
 * Utility class to carry out an upload scp transfer.
 */</comment>
<class><specifier>public</specifier> class <name>ScpToMessage</name> <super><extends>extends <name>AbstractSshMessage</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>HUNDRED_KILOBYTES</name> =<init> <expr>102400</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>BUFFER_SIZE</name> =<init> <expr>1024</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>localFile</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>remotePath</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>List</name></type> <name>directoryList</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructor for ScpToMessage
     * @param session the ssh session to use
     */</comment>
    <constructor><specifier>public</specifier> <name>ScpToMessage</name><parameter_list>(<param><decl><type><name>Session</name></type> <name>session</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructor for ScpToMessage
     * @param verbose if true do verbose logging
     * @param session the ssh session to use
     * @since Ant 1.7
     */</comment>
    <constructor><specifier>public</specifier> <name>ScpToMessage</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>verbose</name></decl></param>, <param><decl><type><name>Session</name></type> <name>session</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>verbose</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructor for a local file to remote.
     * @param verbose if true do verbose logging
     * @param session the scp session to use
     * @param aLocalFile the local file
     * @param aRemotePath the remote path
     * @since Ant 1.6.2
     */</comment>
    <constructor><specifier>public</specifier> <name>ScpToMessage</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>verbose</name></decl></param>,
                        <param><decl><type><name>Session</name></type> <name>session</name></decl></param>,
                        <param><decl><type><name>File</name></type> <name>aLocalFile</name></decl></param>,
                        <param><decl><type><name>String</name></type> <name>aRemotePath</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>verbose</name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><name>aRemotePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name>.<name>localFile</name></name> = <name>aLocalFile</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructor for a local directories to remote.
     * @param verbose if true do verbose logging
     * @param session the scp session to use
     * @param aDirectoryList a list of directories
     * @param aRemotePath the remote path
     * @since Ant 1.6.2
     */</comment>
    <constructor><specifier>public</specifier> <name>ScpToMessage</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>verbose</name></decl></param>,
                        <param><decl><type><name>Session</name></type> <name>session</name></decl></param>,
                        <param><decl><type><name>List</name></type> <name>aDirectoryList</name></decl></param>,
                        <param><decl><type><name>String</name></type> <name>aRemotePath</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>verbose</name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><name>aRemotePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name>.<name>directoryList</name></name> = <name>aDirectoryList</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructor for ScpToMessage.
     * @param verbose if true do verbose logging
     * @param session the scp session to use
     * @param aRemotePath the remote path
     * @since Ant 1.6.2
     */</comment>
    <constructor><specifier>private</specifier> <name>ScpToMessage</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>verbose</name></decl></param>,
                         <param><decl><type><name>Session</name></type> <name>session</name></decl></param>,
                         <param><decl><type><name>String</name></type> <name>aRemotePath</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>verbose</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>remotePath</name></name> = <name>aRemotePath</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructor for ScpToMessage.
     * @param session the scp session to use
     * @param aLocalFile the local file
     * @param aRemotePath the remote path
     */</comment>
    <constructor><specifier>public</specifier> <name>ScpToMessage</name><parameter_list>(<param><decl><type><name>Session</name></type> <name>session</name></decl></param>,
                        <param><decl><type><name>File</name></type> <name>aLocalFile</name></decl></param>,
                        <param><decl><type><name>String</name></type> <name>aRemotePath</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>false</expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><name>aLocalFile</name></expr></argument>, <argument><expr><name>aRemotePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructor for ScpToMessage.
     * @param session the scp session to use
     * @param aDirectoryList a list of directories
     * @param aRemotePath the remote path
     */</comment>
    <constructor><specifier>public</specifier> <name>ScpToMessage</name><parameter_list>(<param><decl><type><name>Session</name></type> <name>session</name></decl></param>,
                         <param><decl><type><name>List</name></type> <name>aDirectoryList</name></decl></param>,
                         <param><decl><type><name>String</name></type> <name>aRemotePath</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>false</expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><name>aDirectoryList</name></expr></argument>, <argument><expr><name>aRemotePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Carry out the transfer.
     * @throws IOException on i/o errors
     * @throws JSchException on errors detected by scp
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>JSchException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>directoryList</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>doMultipleTransfer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>localFile</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>doSingleTransfer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"done.\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>doSingleTransfer</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>JSchException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>cmd</name> =<init> <expr>"scp -t " + <name>remotePath</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Channel</name></type> <name>channel</name> =<init> <expr><call><name>openExecChannel</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{

            <decl_stmt><decl><type><name>OutputStream</name></type> <name>out</name> =<init> <expr><call><name><name>channel</name>.<name>getOutputStream</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>InputStream</name></type> <name>in</name> =<init> <expr><call><name><name>channel</name>.<name>getInputStream</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>channel</name>.<name>connect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>waitForAck</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sendFileToRemote</name><argument_list>(<argument><expr><name>localFile</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
            <if>if <condition>(<expr><name>channel</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>channel</name>.<name>disconnect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></finally></try>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>doMultipleTransfer</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>JSchException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>Channel</name></type> <name>channel</name> =<init> <expr><call><name>openExecChannel</name><argument_list>(<argument><expr>"scp -r -d -t " + <name>remotePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <decl_stmt><decl><type><name>OutputStream</name></type> <name>out</name> =<init> <expr><call><name><name>channel</name>.<name>getOutputStream</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>InputStream</name></type> <name>in</name> =<init> <expr><call><name><name>channel</name>.<name>getInputStream</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>channel</name>.<name>connect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>waitForAck</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for (<init><decl><type><name>Iterator</name></type> <name>i</name> =<init> <expr><call><name><name>directoryList</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>i</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
                <decl_stmt><decl><type><name>Directory</name></type> <name>current</name> =<init> <expr>(<name>Directory</name>) <call><name><name>i</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>sendDirectory</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block> <finally>finally <block>{
            <if>if <condition>(<expr><name>channel</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>channel</name>.<name>disconnect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></finally></try>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>sendDirectory</name><parameter_list>(<param><decl><type><name>Directory</name></type> <name>current</name></decl></param>,
                               <param><decl><type><name>InputStream</name></type> <name>in</name></decl></param>,
                               <param><decl><type><name>OutputStream</name></type> <name>out</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <for>for (<init><decl><type><name>Iterator</name></type> <name>fileIt</name> =<init> <expr><call><name><name>current</name>.<name>filesIterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>fileIt</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
            <expr_stmt><expr><call><name>sendFileToRemote</name><argument_list>(<argument><expr>(<name>File</name>) <call><name><name>fileIt</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <for>for (<init><decl><type><name>Iterator</name></type> <name>dirIt</name> =<init> <expr><call><name><name>current</name>.<name>directoryIterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>dirIt</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
            <decl_stmt><decl><type><name>Directory</name></type> <name>dir</name> =<init> <expr>(<name>Directory</name>) <call><name><name>dirIt</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>sendDirectoryToRemote</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>sendDirectoryToRemote</name><parameter_list>(<param><decl><type><name>Directory</name></type> <name>directory</name></decl></param>,
                                        <param><decl><type><name>InputStream</name></type> <name>in</name></decl></param>,
                                        <param><decl><type><name>OutputStream</name></type> <name>out</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>command</name> =<init> <expr>"D0755 0 "</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>command</name> += <call><name><name>directory</name>.<name>getDirectory</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>command</name> += "\n"</expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr><call><name><name>command</name>.<name>getBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>out</name>.<name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>waitForAck</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sendDirectory</name><argument_list>(<argument><expr><name>directory</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr>"E\n".<call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>out</name>.<name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>waitForAck</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>sendFileToRemote</name><parameter_list>(<param><decl><type><name>File</name></type> <name>localFile</name></decl></param>,
                                   <param><decl><type><name>InputStream</name></type> <name>in</name></decl></param>,
                                   <param><decl><type><name>OutputStream</name></type> <name>out</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <comment type="line">// send "C0644 filesize filename", where filename should not include '/'</comment>
        <decl_stmt><decl><type><name>long</name></type> <name>filesize</name> =<init> <expr><call><name><name>localFile</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>command</name> =<init> <expr>"C0644 " + <name>filesize</name> + " "</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>command</name> += <call><name><name>localFile</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>command</name> += "\n"</expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr><call><name><name>command</name>.<name>getBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>out</name>.<name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>waitForAck</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// send a content of lfile</comment>
        <decl_stmt><decl><type><name>FileInputStream</name></type> <name>fis</name> =<init> <expr>new <call><name>FileInputStream</name><argument_list>(<argument><expr><name>localFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>buf</name> =<init> <expr>new <name><name>byte</name><index>[<expr><name>BUFFER_SIZE</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>startTime</name> =<init> <expr><call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>totalLength</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

        <comment type="line">// only track progress for files larger than 100kb in verbose mode</comment>
        <decl_stmt><decl><type><name>boolean</name></type> <name>trackProgress</name> =<init> <expr><call><name>getVerbose</name><argument_list>()</argument_list></call> &amp;&amp; <name>filesize</name> &gt; <name>HUNDRED_KILOBYTES</name></expr></init></decl>;</decl_stmt>
        <comment type="line">// since filesize keeps on decreasing we have to store the</comment>
        <comment type="line">// initial filesize</comment>
        <decl_stmt><decl><type><name>long</name></type> <name>initFilesize</name> =<init> <expr><name>filesize</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>percentTransmitted</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

        <try>try <block>{
            <if>if <condition>(<expr><call><name><name>this</name>.<name>getVerbose</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Sending: " + <call><name><name>localFile</name>.<name>getName</name></name><argument_list>()</argument_list></call> + " : " + <call><name><name>localFile</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <while>while <condition>(<expr>true</expr>)</condition> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>len</name> =<init> <expr><call><name><name>fis</name>.<name>read</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>buf</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>len</name> &lt;= 0</expr>)</condition><then> <block>{
                    <break>break;</break>
                }</block></then></if>
                <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>totalLength</name> += <name>len</name></expr>;</expr_stmt>

                <if>if <condition>(<expr><name>trackProgress</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>percentTransmitted</name> = <call><name>trackProgress</name><argument_list>(<argument><expr><name>initFilesize</name></expr></argument>,
                                                       <argument><expr><name>totalLength</name></expr></argument>,
                                                       <argument><expr><name>percentTransmitted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></while>
            <expr_stmt><expr><call><name><name>out</name>.<name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sendAck</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>waitForAck</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
            <if>if <condition>(<expr><call><name><name>this</name>.<name>getVerbose</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>long</name></type> <name>endTime</name> =<init> <expr><call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>logStats</name><argument_list>(<argument><expr><name>startTime</name></expr></argument>, <argument><expr><name>endTime</name></expr></argument>, <argument><expr><name>totalLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>fis</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <comment type="javadoc">/**
     * Get the local file
     * @return the local file
     */</comment>
    <function><type><specifier>public</specifier> <name>File</name></type> <name>getLocalFile</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>localFile</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the remote path
     * @return the remote path
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getRemotePath</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>remotePath</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
