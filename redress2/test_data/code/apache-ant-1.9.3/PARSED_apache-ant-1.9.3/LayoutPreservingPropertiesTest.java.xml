<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\util\LayoutPreservingPropertiesTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStreamReader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Properties</name></name>;</import>

<import>import <name><name>junit</name>.<name>framework</name>.<name>TestCase</name></name>;</import>

<class><specifier>public</specifier> class <name>LayoutPreservingPropertiesTest</name> <super><extends>extends <name>TestCase</name></extends></super> <block>{
    <constructor><specifier>public</specifier> <name>LayoutPreservingPropertiesTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Tests that a properties file read by the
     * LayoutPreservingPropertiesFile and then saves the properties in
     * it.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testPreserve</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>simple</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr>"src/etc/testcases/util/simple.properties"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FileInputStream</name></type> <name>fis</name> =<init> <expr>new <call><name>FileInputStream</name><argument_list>(<argument><expr><name>simple</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LayoutPreservingProperties</name></type> <name>lpf</name> =<init> <expr>new <call><name>LayoutPreservingProperties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>lpf</name>.<name>load</name></name><argument_list>(<argument><expr><name>fis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>File</name></type> <name>tmp</name> =<init> <expr><call><name><name>File</name>.<name>createTempFile</name></name><argument_list>(<argument><expr>"tmp"</expr></argument>, <argument><expr>"props"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>tmp</name>.<name>deleteOnExit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>lpf</name>.<name>saveAs</name></name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// now compare original and tmp for property equivalence</comment>
        <decl_stmt><decl><type><name>Properties</name></type> <name>originalProps</name> =<init> <expr>new <call><name>Properties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>originalProps</name>.<name>load</name></name><argument_list>(<argument><expr>new <call><name>FileInputStream</name><argument_list>(<argument><expr><name>simple</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Properties</name></type> <name>tmpProps</name> =<init> <expr>new <call><name>Properties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>tmpProps</name>.<name>load</name></name><argument_list>(<argument><expr>new <call><name>FileInputStream</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"properties corrupted"</expr></argument>, <argument><expr><name>originalProps</name></expr></argument>, <argument><expr><name>tmpProps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// and now make sure that the comments made it into the new file</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>s</name> =<init> <expr><call><name>readFile</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"missing comment"</expr></argument>, <argument><expr><call><name><name>s</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"# a comment"</expr></argument>)</argument_list></call> &gt; -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"missing comment"</expr></argument>, <argument><expr><call><name><name>s</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"! more comment"</expr></argument>)</argument_list></call> &gt; -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Tests that names and value are properly escaped when being
     * written out.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testEscaping</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>LayoutPreservingProperties</name></type> <name>lpf</name> =<init> <expr>new <call><name>LayoutPreservingProperties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>lpf</name>.<name>setProperty</name></name><argument_list>(<argument><expr>" prop one "</expr></argument>, <argument><expr>"  leading and trailing spaces "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>lpf</name>.<name>setProperty</name></name><argument_list>(<argument><expr>"prop\ttwo"</expr></argument>, <argument><expr>"contains\ttab"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>lpf</name>.<name>setProperty</name></name><argument_list>(<argument><expr>"prop\nthree"</expr></argument>, <argument><expr>"contains\nnewline"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>lpf</name>.<name>setProperty</name></name><argument_list>(<argument><expr>"prop\rfour"</expr></argument>, <argument><expr>"contains\rcarraige return"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>lpf</name>.<name>setProperty</name></name><argument_list>(<argument><expr>"prop\ffive"</expr></argument>, <argument><expr>"contains\fform feed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>lpf</name>.<name>setProperty</name></name><argument_list>(<argument><expr>"prop\\six"</expr></argument>, <argument><expr>"contains\\backslash"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>lpf</name>.<name>setProperty</name></name><argument_list>(<argument><expr>"prop:seven"</expr></argument>, <argument><expr>"contains:colon"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>lpf</name>.<name>setProperty</name></name><argument_list>(<argument><expr>"prop=eight"</expr></argument>, <argument><expr>"contains=equals"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>lpf</name>.<name>setProperty</name></name><argument_list>(<argument><expr>"prop#nine"</expr></argument>, <argument><expr>"contains#hash"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>lpf</name>.<name>setProperty</name></name><argument_list>(<argument><expr>"prop!ten"</expr></argument>, <argument><expr>"contains!exclamation"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>File</name></type> <name>tmp</name> =<init> <expr><call><name><name>File</name>.<name>createTempFile</name></name><argument_list>(<argument><expr>"tmp"</expr></argument>, <argument><expr>"props"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>tmp</name>.<name>deleteOnExit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>lpf</name>.<name>saveAs</name></name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// and check that the resulting file looks okay</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>s</name> =<init> <expr><call><name>readFile</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>s</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"\\ prop\\ one\\ =\\ \\ leading and trailing"
                             + " spaces "</expr></argument>)</argument_list></call> &gt; -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>s</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"prop\\ttwo=contains\\ttab"</expr></argument>)</argument_list></call> &gt; -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>s</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"prop\\nthree=contains\\nnewline"</expr></argument>)</argument_list></call> &gt; -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>s</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"prop\\rfour=contains\\rcarraige return"</expr></argument>)</argument_list></call> &gt; -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>s</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"prop\\\\six=contains\\\\backslash"</expr></argument>)</argument_list></call> &gt; -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>s</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"prop\\:seven=contains\\:colon"</expr></argument>)</argument_list></call> &gt; -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>s</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"prop\\=eight=contains\\=equals"</expr></argument>)</argument_list></call> &gt; -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>s</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"prop\\#nine=contains\\#hash"</expr></argument>)</argument_list></call> &gt; -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>s</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"prop\\!ten=contains\\!exclamation"</expr></argument>)</argument_list></call> &gt; -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Tests that properties are correctly indexed, so that when we set
     * an existing property, it updates the logical line, and it doesn't
     * append a new one.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testOverwrite</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>unusual</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr>"src/etc/testcases/util/unusual.properties"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FileInputStream</name></type> <name>fis</name> =<init> <expr>new <call><name>FileInputStream</name><argument_list>(<argument><expr><name>unusual</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LayoutPreservingProperties</name></type> <name>lpf</name> =<init> <expr>new <call><name>LayoutPreservingProperties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>lpf</name>.<name>load</name></name><argument_list>(<argument><expr><name>fis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>lpf</name>.<name>setProperty</name></name><argument_list>(<argument><expr>" prop one "</expr></argument>, <argument><expr>"new one"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>lpf</name>.<name>setProperty</name></name><argument_list>(<argument><expr>"prop\ttwo"</expr></argument>, <argument><expr>"new two"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>lpf</name>.<name>setProperty</name></name><argument_list>(<argument><expr>"prop\nthree"</expr></argument>, <argument><expr>"new three"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>File</name></type> <name>tmp</name> =<init> <expr><call><name><name>File</name>.<name>createTempFile</name></name><argument_list>(<argument><expr>"tmp"</expr></argument>, <argument><expr>"props"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>tmp</name>.<name>deleteOnExit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>lpf</name>.<name>saveAs</name></name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// and check that the resulting file looks okay</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>s</name> =<init> <expr><call><name>readFile</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>s</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"\\ prop\\ one\\ =\\ \\ leading and"
                             + " trailing spaces "</expr></argument>)</argument_list></call> == -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>s</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"\\ prop\\ one\\ =new one"</expr></argument>)</argument_list></call> &gt; -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>s</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"prop\\ttwo=contains\\ttab"</expr></argument>)</argument_list></call> == -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>s</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"prop\\ttwo=new two"</expr></argument>)</argument_list></call> &gt; -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>s</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"prop\\nthree=contains\\nnewline"</expr></argument>)</argument_list></call> == -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>s</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"prop\\nthree=new three"</expr></argument>)</argument_list></call> &gt; -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testStoreWithHeader</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>simple</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr>"src/etc/testcases/util/simple.properties"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FileInputStream</name></type> <name>fis</name> =<init> <expr>new <call><name>FileInputStream</name><argument_list>(<argument><expr><name>simple</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LayoutPreservingProperties</name></type> <name>lpf</name> =<init> <expr>new <call><name>LayoutPreservingProperties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>lpf</name>.<name>load</name></name><argument_list>(<argument><expr><name>fis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>File</name></type> <name>tmp</name> =<init> <expr><call><name><name>File</name>.<name>createTempFile</name></name><argument_list>(<argument><expr>"tmp"</expr></argument>, <argument><expr>"props"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>tmp</name>.<name>deleteOnExit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>FileOutputStream</name></type> <name>fos</name> =<init> <expr>new <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>lpf</name>.<name>store</name></name><argument_list>(<argument><expr><name>fos</name></expr></argument>, <argument><expr>"file-header"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>fos</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// and check that the resulting file looks okay</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>s</name> =<init> <expr><call><name>readFile</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"should have had header "</expr></argument>, <argument><expr><call><name><name>s</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"#file-header"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testClear</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>simple</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr>"src/etc/testcases/util/simple.properties"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FileInputStream</name></type> <name>fis</name> =<init> <expr>new <call><name>FileInputStream</name><argument_list>(<argument><expr><name>simple</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LayoutPreservingProperties</name></type> <name>lpf</name> =<init> <expr>new <call><name>LayoutPreservingProperties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>lpf</name>.<name>load</name></name><argument_list>(<argument><expr><name>fis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>lpf</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>File</name></type> <name>tmp</name> =<init> <expr><call><name><name>File</name>.<name>createTempFile</name></name><argument_list>(<argument><expr>"tmp"</expr></argument>, <argument><expr>"props"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>tmp</name>.<name>deleteOnExit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>lpf</name>.<name>saveAs</name></name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// and check that the resulting file looks okay</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>s</name> =<init> <expr><call><name>readFile</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"should have had no properties "</expr></argument>,
                   <argument><expr><call><name><name>s</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"prop.alpha"</expr></argument>)</argument_list></call> == -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"should have had no properties "</expr></argument>,
                   <argument><expr><call><name><name>s</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"prop.beta"</expr></argument>)</argument_list></call> == -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"should have had no properties "</expr></argument>,
                   <argument><expr><call><name><name>s</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"prop.gamma"</expr></argument>)</argument_list></call> == -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"should have had no comments"</expr></argument>,
                   <argument><expr><call><name><name>s</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"# a comment"</expr></argument>)</argument_list></call> == -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"should have had no comments"</expr></argument>,
                   <argument><expr><call><name><name>s</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"! more comment"</expr></argument>)</argument_list></call> == -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"should have had no comments"</expr></argument>,
                   <argument><expr><call><name><name>s</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"# now a line wrapping one"</expr></argument>)</argument_list></call> == -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testRemove</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>simple</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr>"src/etc/testcases/util/simple.properties"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FileInputStream</name></type> <name>fis</name> =<init> <expr>new <call><name>FileInputStream</name><argument_list>(<argument><expr><name>simple</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LayoutPreservingProperties</name></type> <name>lpf</name> =<init> <expr>new <call><name>LayoutPreservingProperties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>lpf</name>.<name>load</name></name><argument_list>(<argument><expr><name>fis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>lpf</name>.<name>remove</name></name><argument_list>(<argument><expr>"prop.beta"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>File</name></type> <name>tmp</name> =<init> <expr><call><name><name>File</name>.<name>createTempFile</name></name><argument_list>(<argument><expr>"tmp"</expr></argument>, <argument><expr>"props"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>tmp</name>.<name>deleteOnExit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>lpf</name>.<name>saveAs</name></name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// and check that the resulting file looks okay</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>s</name> =<init> <expr><call><name>readFile</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"should not have had prop.beta"</expr></argument>,
                   <argument><expr><call><name><name>s</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"prop.beta"</expr></argument>)</argument_list></call> == -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"should have had prop.beta's comment"</expr></argument>,
                   <argument><expr><call><name><name>s</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"! more comment"</expr></argument>)</argument_list></call> &gt; -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testRemoveWithComment</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>simple</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr>"src/etc/testcases/util/simple.properties"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FileInputStream</name></type> <name>fis</name> =<init> <expr>new <call><name>FileInputStream</name><argument_list>(<argument><expr><name>simple</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LayoutPreservingProperties</name></type> <name>lpf</name> =<init> <expr>new <call><name>LayoutPreservingProperties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>lpf</name>.<name>load</name></name><argument_list>(<argument><expr><name>fis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>lpf</name>.<name>setRemoveComments</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>lpf</name>.<name>remove</name></name><argument_list>(<argument><expr>"prop.beta"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>File</name></type> <name>tmp</name> =<init> <expr><call><name><name>File</name>.<name>createTempFile</name></name><argument_list>(<argument><expr>"tmp"</expr></argument>, <argument><expr>"props"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>tmp</name>.<name>deleteOnExit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>lpf</name>.<name>saveAs</name></name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// and check that the resulting file looks okay</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>s</name> =<init> <expr><call><name>readFile</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"should not have had prop.beta"</expr></argument>,
                   <argument><expr><call><name><name>s</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"prop.beta"</expr></argument>)</argument_list></call> == -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"should not have had prop.beta's comment"</expr></argument>,
                   <argument><expr><call><name><name>s</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"! more comment"</expr></argument>)</argument_list></call> == -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testClone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>simple</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr>"src/etc/testcases/util/simple.properties"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FileInputStream</name></type> <name>fis</name> =<init> <expr>new <call><name>FileInputStream</name><argument_list>(<argument><expr><name>simple</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LayoutPreservingProperties</name></type> <name>lpf1</name> =<init> <expr>new <call><name>LayoutPreservingProperties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>lpf1</name>.<name>load</name></name><argument_list>(<argument><expr><name>fis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>LayoutPreservingProperties</name></type> <name>lpf2</name> =<init>
            <expr>(<name>LayoutPreservingProperties</name>) <call><name><name>lpf1</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>lpf2</name>.<name>setProperty</name></name><argument_list>(<argument><expr>"prop.new"</expr></argument>, <argument><expr>"a new property"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>lpf2</name>.<name>setProperty</name></name><argument_list>(<argument><expr>"prop.beta"</expr></argument>, <argument><expr>"a new value for beta"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"size of original is wrong"</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr><call><name><name>lpf1</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"size of clone is wrong"</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><call><name><name>lpf2</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>File</name></type> <name>tmp1</name> =<init> <expr><call><name><name>File</name>.<name>createTempFile</name></name><argument_list>(<argument><expr>"tmp"</expr></argument>, <argument><expr>"props"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>tmp1</name>.<name>deleteOnExit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>lpf1</name>.<name>saveAs</name></name><argument_list>(<argument><expr><name>tmp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>s1</name> =<init> <expr><call><name>readFile</name><argument_list>(<argument><expr><name>tmp1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>File</name></type> <name>tmp2</name> =<init> <expr><call><name><name>File</name>.<name>createTempFile</name></name><argument_list>(<argument><expr>"tmp"</expr></argument>, <argument><expr>"props"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>tmp2</name>.<name>deleteOnExit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>lpf2</name>.<name>saveAs</name></name><argument_list>(<argument><expr><name>tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>s2</name> =<init> <expr><call><name>readFile</name><argument_list>(<argument><expr><name>tmp2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// check original is untouched</comment>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"should have had 'simple'"</expr></argument>, <argument><expr><call><name><name>s1</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"simple"</expr></argument>)</argument_list></call> &gt; -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"should not have had prop.new"</expr></argument>, <argument><expr><call><name><name>s1</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"prop.new"</expr></argument>)</argument_list></call> == -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// check clone has the changes</comment>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"should have had 'a new value for beta'"</expr></argument>,
                   <argument><expr><call><name><name>s2</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"a new value for beta"</expr></argument>)</argument_list></call> &gt; -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"should have had prop.new"</expr></argument>, <argument><expr><call><name><name>s2</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"prop.new"</expr></argument>)</argument_list></call> &gt; -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testPreserveEscapeName</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>LayoutPreservingProperties</name></type> <name>lpf</name> =<init> <expr>new <call><name>LayoutPreservingProperties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>unusual</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr>"src/etc/testcases/util/unusual.properties"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FileInputStream</name></type> <name>fis</name> =<init> <expr>new <call><name>FileInputStream</name><argument_list>(<argument><expr><name>unusual</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>lpf</name>.<name>load</name></name><argument_list>(<argument><expr><name>fis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>lpf</name>.<name>setProperty</name></name><argument_list>(<argument><expr>"prop:seven"</expr></argument>, <argument><expr>"new value for seven"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>lpf</name>.<name>setProperty</name></name><argument_list>(<argument><expr>"prop=eight"</expr></argument>, <argument><expr>"new value for eight"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>lpf</name>.<name>setProperty</name></name><argument_list>(<argument><expr>"prop eleven"</expr></argument>, <argument><expr>"new value for eleven"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>lpf</name>.<name>setProperty</name></name><argument_list>(<argument><expr>"alpha"</expr></argument>, <argument><expr>"new value for alpha"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>lpf</name>.<name>setProperty</name></name><argument_list>(<argument><expr>"beta"</expr></argument>, <argument><expr>"new value for beta"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>File</name></type> <name>tmp</name> =<init> <expr><call><name><name>File</name>.<name>createTempFile</name></name><argument_list>(<argument><expr>"tmp"</expr></argument>, <argument><expr>"props"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>tmp</name>.<name>deleteOnExit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>lpf</name>.<name>saveAs</name></name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// and check that the resulting file looks okay</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>s</name> =<init> <expr><call><name>readFile</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>s</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"prop\\:seven=new value for seven"</expr></argument>)</argument_list></call> &gt; -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>s</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"prop\\=eight=new value for eight"</expr></argument>)</argument_list></call> &gt; -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>s</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"prop\\ eleven=new value for eleven"</expr></argument>)</argument_list></call> &gt; -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>s</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"alpha=new value for alpha"</expr></argument>)</argument_list></call> &gt; -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>s</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"beta=new value for beta"</expr></argument>)</argument_list></call> &gt; -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>s</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"prop\\:seven=contains\\:colon"</expr></argument>)</argument_list></call> == -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>s</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"prop\\=eight=contains\\=equals"</expr></argument>)</argument_list></call> == -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>s</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"alpha:set with a colon"</expr></argument>)</argument_list></call> == -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>s</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"beta set with a space"</expr></argument>)</argument_list></call> == -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>readFile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>f</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>FileInputStream</name></type> <name>fis</name> =<init> <expr>new <call><name>FileInputStream</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>InputStreamReader</name></type> <name>isr</name> =<init> <expr>new <call><name>InputStreamReader</name><argument_list>(<argument><expr><name>fis</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>s</name> =<init> <expr><call><name><name>FileUtils</name>.<name>readFully</name></name><argument_list>(<argument><expr><name>isr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>isr</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>fis</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>s</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
