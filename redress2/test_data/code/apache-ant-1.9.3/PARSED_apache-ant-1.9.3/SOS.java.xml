<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\sos\SOS.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>sos</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>Execute</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>LogStreamHandler</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Commandline</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Path</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>

<comment type="javadoc">/**
 * A base class for creating tasks for executing commands on SourceOffSite.
 *
 *  These tasks were inspired by the VSS tasks.
 *
 */</comment>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>SOS</name> <super><extends>extends <name>Task</name></extends> <implements>implements <name>SOSCmd</name></implements></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>ERROR_EXIT_STATUS</name> =<init> <expr>255</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>sosCmdDir</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>sosUsername</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>sosPassword</name> =<init> <expr>""</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>projectPath</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>vssServerPath</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>sosServerPath</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>sosHome</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>localPath</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>version</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>label</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>comment</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>filename</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>noCompress</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>noCache</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>recursive</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>verbose</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="line">// CheckStyle:VisibilityModifier OFF - bc</comment>
    <comment type="javadoc">/** Commandline to be executed. */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Commandline</name></type> <name>commandLine</name></decl>;</decl_stmt>
    <comment type="line">// CheckStyle:VisibilityModifier ON</comment>

    <comment type="javadoc">/**
     * Flag to disable the cache when set.
     * Required if SOSHOME is set as an environment variable.
     * Defaults to false.
     *
     * @param  nocache  True to disable caching.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>setNoCache</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>nocache</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>noCache</name> = <name>nocache</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Flag to disable compression when set. Defaults to false.
     *
     * @param  nocompress  True to disable compression.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>setNoCompress</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>nocompress</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>noCompress</name> = <name>nocompress</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The directory where soscmd(.exe) is located.
     * soscmd must be on the path if omitted.
     *
     * @param  dir  The new sosCmd value.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>setSosCmd</name><parameter_list>(<param><decl><type><name>String</name></type> <name>dir</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>sosCmdDir</name> = <call><name><name>FileUtils</name>.<name>translatePath</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The SourceSafe username.
     *
     * @param  username  The new username value.
     *
     * @ant.attribute group="required"
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>setUsername</name><parameter_list>(<param><decl><type><name>String</name></type> <name>username</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>sosUsername</name> = <name>username</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The SourceSafe password.
     *
     * @param  password  The new password value.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>setPassword</name><parameter_list>(<param><decl><type><name>String</name></type> <name>password</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>sosPassword</name> = <name>password</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The SourceSafe project path.
     *
     * @param  projectpath  The new projectpath value.
     *
     * @ant.attribute group="required"
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>setProjectPath</name><parameter_list>(<param><decl><type><name>String</name></type> <name>projectpath</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>projectpath</name>.<name>startsWith</name></name><argument_list>(<argument><expr><name><name>SOSCmd</name>.<name>PROJECT_PREFIX</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>projectPath</name> = <name>projectpath</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>projectPath</name> = <name><name>SOSCmd</name>.<name>PROJECT_PREFIX</name></name> + <name>projectpath</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * The path to the location of the ss.ini file.
     *
     * @param  vssServerPath  The new vssServerPath value.
     *
     * @ant.attribute group="required"
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>setVssServerPath</name><parameter_list>(<param><decl><type><name>String</name></type> <name>vssServerPath</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>vssServerPath</name></name> = <name>vssServerPath</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Path to the SourceOffSite home directory.
     *
     * @param  sosHome  The new sosHome value.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>setSosHome</name><parameter_list>(<param><decl><type><name>String</name></type> <name>sosHome</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>sosHome</name></name> = <name>sosHome</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The address and port of SourceOffSite Server,
     * for example 192.168.0.1:8888.
     *
     * @param  sosServerPath  The new sosServerPath value.
     *
     * @ant.attribute group="required"
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>setSosServerPath</name><parameter_list>(<param><decl><type><name>String</name></type> <name>sosServerPath</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>sosServerPath</name></name> = <name>sosServerPath</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Override the working directory and get to the specified path.
     *
     * @param  path  The new localPath value.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>setLocalPath</name><parameter_list>(<param><decl><type><name>Path</name></type> <name>path</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>localPath</name> = <call><name><name>path</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Enable verbose output. Defaults to false.
     *
     * @param  verbose  True for verbose output.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setVerbose</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>verbose</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>verbose</name></name> = <name>verbose</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// Special setters for the sub-classes</comment>

    <comment type="javadoc">/**
     * Set the file name.
     * @param file the filename to use.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setInternalFilename</name><parameter_list>(<param><decl><type><name>String</name></type> <name>file</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>filename</name> = <name>file</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the recursive flag.
     * @param recurse if true use the recursive flag on the command line.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setInternalRecursive</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>recurse</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>recursive</name> = <name>recurse</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the comment text.
     * @param text the comment text to use.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setInternalComment</name><parameter_list>(<param><decl><type><name>String</name></type> <name>text</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>comment</name> = <name>text</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the label.
     * @param text the label to use.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setInternalLabel</name><parameter_list>(<param><decl><type><name>String</name></type> <name>text</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>label</name> = <name>text</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the version.
     * @param text the version to use.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setInternalVersion</name><parameter_list>(<param><decl><type><name>String</name></type> <name>text</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>version</name> = <name>text</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the executable to run. Add the path if it was specified in the build file
     *
     * @return the executable to run.
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>getSosCommand</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>sosCmdDir</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>COMMAND_SOS_EXE</name></expr>;</return>
        }</block></then> <else>else <block>{
            <return>return <expr><name>sosCmdDir</name> + <name><name>File</name>.<name>separator</name></name> + <name>COMMAND_SOS_EXE</name></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Get the comment
     * @return if it was set, null if not.
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>getComment</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>comment</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the version
     * @return if it was set, null if not.
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>getVersion</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>version</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the label
     * @return if it was set, null if not.
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>getLabel</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>label</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the username
     * @return if it was set, null if not.
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>getUsername</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>sosUsername</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the password
     * @return empty string if it wasn't set.
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>getPassword</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>sosPassword</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the project path
     * @return if it was set, null if not.
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>getProjectPath</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>projectPath</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the VSS server path
     * @return if it was set, null if not.
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>getVssServerPath</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>vssServerPath</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the SOS home directory.
     * @return if it was set, null if not.
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>getSosHome</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>sosHome</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the SOS serve path.
     * @return if it was set, null if not.
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>getSosServerPath</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>sosServerPath</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the filename to be acted upon.
     * @return if it was set, null if not.
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>getFilename</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>filename</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the NoCompress flag.
     *
     * @return the 'nocompress' Flag if the attribute was 'true',
     *         otherwise an empty string.
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>getNoCompress</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>noCompress</name> ? <name>FLAG_NO_COMPRESSION</name> : ""</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the NoCache flag.
     *
     * @return the 'nocache' Flag if the attribute was 'true', otherwise an empty string.
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>getNoCache</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>noCache</name> ? <name>FLAG_NO_CACHE</name> : ""</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the 'verbose' Flag.
     *
     * @return the 'verbose' Flag if the attribute was 'true', otherwise an empty string.
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>getVerbose</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>verbose</name> ? <name>FLAG_VERBOSE</name> : ""</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the 'recursive' Flag.
     *
     * @return the 'recursive' Flag if the attribute was 'true', otherwise an empty string.
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>getRecursive</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>recursive</name> ? <name>FLAG_RECURSION</name> : ""</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Builds and returns the working directory.
     * &lt;p&gt;
     * The localpath is created if it didn't exist.
     *
     * @return the absolute path of the working directory.
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>getLocalPath</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>localPath</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call>.<call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
            <comment type="line">// make sure localDir exists, create it if it doesn't</comment>
            <decl_stmt><decl><type><name>File</name></type> <name>dir</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>resolveFile</name><argument_list>(<argument><expr><name>localPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<call><name><name>dir</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>boolean</name></type> <name>done</name> =<init> <expr><call><name><name>dir</name>.<name>mkdirs</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr>!<name>done</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>String</name></type> <name>msg</name> =<init> <expr>"Directory " + <name>localPath</name> + " creation was not "
                        + "successful for an unknown reason"</expr></init></decl>;</decl_stmt>
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if>
                <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>log</name><argument_list>(<argument><expr>"Created dir: " + <call><name><name>dir</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <return>return <expr><call><name><name>dir</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Subclasses implement the logic required to construct the command line.
     *
     * @return   The command line to execute.
     */</comment>
    <function_decl><type><specifier>abstract</specifier> <name>Commandline</name></type> <name>buildCmdLine</name><parameter_list>()</parameter_list>;</function_decl>


    <comment type="javadoc">/**
     * Execute the created command line.
     *
     * @throws BuildException on error.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list>
        <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>buildCmdLine</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = <call><name>run</name><argument_list>(<argument><expr><name>commandLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>result</name> == <name>ERROR_EXIT_STATUS</name></expr>)</condition><then> <block>{  <comment type="line">// This is the exit status</comment>
            <decl_stmt><decl><type><name>String</name></type> <name>msg</name> =<init> <expr>"Failed executing: " + <call><name><name>commandLine</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Execute the created command line.
     *
     * @param  cmd              The command line to run.
     * @return                  int the exit code.
     * @throws  BuildException
     */</comment>
    <function><type><specifier>protected</specifier> <name>int</name></type> <name>run</name><parameter_list>(<param><decl><type><name>Commandline</name></type> <name>cmd</name></decl></param>)</parameter_list> <block>{
        <try>try <block>{
            <decl_stmt><decl><type><name>Execute</name></type> <name>exe</name> =<init> <expr>new <call><name>Execute</name><argument_list>(<argument><expr>new <call><name>LogStreamHandler</name><argument_list>(<argument><expr><name>this</name></expr></argument>,
                    <argument><expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></argument>,
                    <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>exe</name>.<name>setAntRun</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>exe</name>.<name>setWorkingDirectory</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>exe</name>.<name>setCommandline</name></name><argument_list>(<argument><expr><call><name><name>cmd</name>.<name>getCommandline</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>exe</name>.<name>setVMLauncher</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// Use the OS VM launcher so we get environment variables</comment>
            <return>return <expr><call><name><name>exe</name>.<name>execute</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block> <catch>catch (<param><decl><type><name><name>java</name>.<name>io</name>.<name>IOException</name></name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/** Sets the executable and add the required attributes to the command line. */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>getRequiredAttributes</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// Get the path to the soscmd(.exe)</comment>
        <expr_stmt><expr><call><name><name>commandLine</name>.<name>setExecutable</name></name><argument_list>(<argument><expr><call><name>getSosCommand</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// SOS server address is required</comment>
        <if>if <condition>(<expr><call><name>getSosServerPath</name><argument_list>()</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"sosserverpath attribute must be set!"</expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>commandLine</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>FLAG_SOS_SERVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>commandLine</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name>getSosServerPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Login info is required</comment>
        <if>if <condition>(<expr><call><name>getUsername</name><argument_list>()</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"username attribute must be set!"</expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>commandLine</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>FLAG_USERNAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>commandLine</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name>getUsername</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// The SOS class knows that the SOS server needs the password flag,</comment>
        <comment type="line">// even if there is no password ,so we send a " "</comment>
        <expr_stmt><expr><call><name><name>commandLine</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>FLAG_PASSWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>commandLine</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name>getPassword</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// VSS Info is required</comment>
        <if>if <condition>(<expr><call><name>getVssServerPath</name><argument_list>()</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"vssserverpath attribute must be set!"</expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>commandLine</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>FLAG_VSS_SERVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>commandLine</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name>getVssServerPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// VSS project is required</comment>
        <if>if <condition>(<expr><call><name>getProjectPath</name><argument_list>()</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"projectpath attribute must be set!"</expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>commandLine</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>FLAG_PROJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>commandLine</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name>getProjectPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/** Adds the optional attributes to the command line. */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>getOptionalAttributes</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// -verbose</comment>
        <expr_stmt><expr><call><name><name>commandLine</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name>getVerbose</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Disable Compression</comment>
        <expr_stmt><expr><call><name><name>commandLine</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name>getNoCompress</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Path to the SourceOffSite home directory /home/user/.sos</comment>
        <if>if <condition>(<expr><call><name>getSosHome</name><argument_list>()</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
            <comment type="line">// If -soshome was not specified then we can look for nocache</comment>
            <expr_stmt><expr><call><name><name>commandLine</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name>getNoCache</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>commandLine</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>FLAG_SOS_HOME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>commandLine</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name>getSosHome</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <comment type="line">//If a working directory was specified then add it to the command line</comment>
        <if>if <condition>(<expr><call><name>getLocalPath</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>commandLine</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>FLAG_WORKING_DIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>commandLine</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name>getLocalPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>
}</block></class>
</unit>
