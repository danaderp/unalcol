<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\javah\SunJavah.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>javah</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>launch</name>.<name>Locator</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>ExecuteJava</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>Javah</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Commandline</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Path</name></name>;</import>


<comment type="javadoc">/**
 * Adapter to com.sun.tools.javah.oldjavah.Main or com.sun.tools.javah.Main.
 *
 * @since Ant 1.6.3
 */</comment>
<class><specifier>public</specifier> class <name>SunJavah</name> <super><implements>implements <name>JavahAdapter</name></implements></super> <block>{

    <comment type="javadoc">/** the name of the javah adapter - sun */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>IMPLEMENTATION_NAME</name> =<init> <expr>"sun"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Performs the actual compilation.
     * @param javah the calling javah task.
     * @return true if the compilation was successful.
     * @throws BuildException if there is an error.
     * @since Ant 1.6.3
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>compile</name><parameter_list>(<param><decl><type><name>Javah</name></type> <name>javah</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>Commandline</name></type> <name>cmd</name> =<init> <expr><call><name>setupJavahCommand</name><argument_list>(<argument><expr><name>javah</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ExecuteJava</name></type> <name>ej</name> =<init> <expr>new <call><name>ExecuteJava</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Class</name></type> <name>c</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <try>try <block>{
                <comment type="line">// first search for the "old" javah class in 1.4.2 tools.jar</comment>
                <expr_stmt><expr><name>c</name> = <call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr>"com.sun.tools.javah.oldjavah.Main"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>ClassNotFoundException</name></type> <name>cnfe</name></decl></param>) <block>{
                <comment type="line">// assume older than 1.4.2 tools.jar</comment>
                <expr_stmt><expr><name>c</name> = <call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr>"com.sun.tools.javah.Main"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block> <catch>catch (<param><decl><type><name>ClassNotFoundException</name></type> <name>ex</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                <argument><expr>"Can't load javah"</expr></argument>, <argument><expr><name>ex</name></expr></argument>, <argument><expr><call><name><name>javah</name>.<name>getLocation</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
        <expr_stmt><expr><call><name><name>cmd</name>.<name>setExecutable</name></name><argument_list>(<argument><expr><call><name><name>c</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ej</name>.<name>setJavaCommand</name></name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>f</name> =<init> <expr><call><name><name>Locator</name>.<name>getClassSource</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>f</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>ej</name>.<name>setClasspath</name></name><argument_list>(<argument><expr>new <call><name>Path</name><argument_list>(<argument><expr><call><name><name>javah</name>.<name>getProject</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>f</name>.<name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><call><name><name>ej</name>.<name>fork</name></name><argument_list>(<argument><expr><name>javah</name></expr></argument>)</argument_list></call> == 0</expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>Commandline</name></type> <name>setupJavahCommand</name><parameter_list>(<param><decl><type><name>Javah</name></type> <name>javah</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Commandline</name></type> <name>cmd</name> =<init> <expr>new <call><name>Commandline</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name><name>javah</name>.<name>getDestdir</name></name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-d"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setFile</name><argument_list>(<argument><expr><call><name><name>javah</name>.<name>getDestdir</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><call><name><name>javah</name>.<name>getOutputfile</name></name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-o"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setFile</name><argument_list>(<argument><expr><call><name><name>javah</name>.<name>getOutputfile</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><call><name><name>javah</name>.<name>getClasspath</name></name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-classpath"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setPath</name><argument_list>(<argument><expr><call><name><name>javah</name>.<name>getClasspath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><call><name><name>javah</name>.<name>getVerbose</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-verbose"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>javah</name>.<name>getOld</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-old"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>javah</name>.<name>getForce</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-force"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>javah</name>.<name>getStubs</name></name><argument_list>()</argument_list></call> &amp;&amp; !<call><name><name>javah</name>.<name>getOld</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                <argument><expr>"stubs only available in old mode."</expr></argument>, <argument><expr><call><name><name>javah</name>.<name>getLocation</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr><call><name><name>javah</name>.<name>getStubs</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-stubs"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>Path</name></type> <name>bcp</name> =<init> <expr>new <call><name>Path</name><argument_list>(<argument><expr><call><name><name>javah</name>.<name>getProject</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>javah</name>.<name>getBootclasspath</name></name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>bcp</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>javah</name>.<name>getBootclasspath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>bcp</name> = <call><name><name>bcp</name>.<name>concatSystemBootClasspath</name></name><argument_list>(<argument><expr>"ignore"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>bcp</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-bootclasspath"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setPath</name><argument_list>(<argument><expr><name>bcp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>cmd</name>.<name>addArguments</name></name><argument_list>(<argument><expr><call><name><name>javah</name>.<name>getCurrentArgs</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>javah</name>.<name>logAndAddFiles</name></name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>cmd</name></expr>;</return>
    }</block></function>

}</block></class>
</unit>
