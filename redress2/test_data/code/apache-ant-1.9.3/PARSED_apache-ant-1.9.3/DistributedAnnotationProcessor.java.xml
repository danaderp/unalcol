<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\antunit\taskdefs\apt\DistributedAnnotationProcessor.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<comment type="line">//found in tools.jar, not the JRE runtime.</comment>
<import>import <name><name>com</name>.<name>sun</name>.<name>mirror</name>.<name>apt</name>.<name>AnnotationProcessor</name></name>;</import>
<import>import <name><name>com</name>.<name>sun</name>.<name>mirror</name>.<name>apt</name>.<name>AnnotationProcessorEnvironment</name></name>;</import>
<import>import <name><name>com</name>.<name>sun</name>.<name>mirror</name>.<name>declaration</name>.<name>TypeDeclaration</name></name>;</import>
<import>import <name><name>com</name>.<name>sun</name>.<name>mirror</name>.<name>declaration</name>.<name>ClassDeclaration</name></name>;</import>
<import>import <name><name>com</name>.<name>sun</name>.<name>mirror</name>.<name>util</name>.<name>SimpleDeclarationVisitor</name></name>;</import>
<import>import static <name><name>com</name>.<name>sun</name>.<name>mirror</name>.<name>util</name>.<name>DeclarationVisitors</name></name>.*;</import>

<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>

<comment type="javadoc">/**
 * Annotation processor outputs stuff
 */</comment>

<class><specifier>public</specifier> class <name>DistributedAnnotationProcessor</name> <super><implements>implements <name>AnnotationProcessor</name></implements></super> <block>{

    <decl_stmt><decl><type><specifier>public</specifier> <name>AnnotationProcessorEnvironment</name></type> <name>env</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>DistributedAnnotationProcessor</name><parameter_list>(<param><decl><type><name>AnnotationProcessorEnvironment</name></type> <name>env</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>env</name></name> = <name>env</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>echo</name><parameter_list>(<param><decl><type><name>String</name></type> <name>text</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>env</name>.<name>getMessager</name></name><argument_list>()</argument_list></call>.<call><name>printNotice</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>process</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>echo</name><argument_list>(<argument><expr>"DistributedAnnotationProcessor-is-go"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name>=<init><expr><call><name><name>env</name>.<name>getOptions</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for(<init><decl><type><name>String</name></type> <name>key</name>:<range><expr><call><name><name>options</name>.<name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>) <block>{
            <expr_stmt><expr><call><name>echo</name><argument_list>(<argument><expr>"Option ["+<name>key</name>+"] = "+<call><name><name>options</name>.<name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <comment type="line">//work time</comment>
        <for>for (<init><decl><type><name>TypeDeclaration</name></type> <name>typeDecl</name> :<range> <expr><call><name><name>env</name>.<name>getSpecifiedTypeDeclarations</name></name><argument_list>()</argument_list></call></expr></range></decl></init>) <block>{
            <expr_stmt><expr><call><name><name>typeDecl</name>.<name>accept</name></name><argument_list>(<argument><expr><call><name>getDeclarationScanner</name><argument_list>(<argument><expr>new <call><name>ClassVisitor</name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><name>NO_OP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <class><specifier>private</specifier> class <name>ClassVisitor</name> <super><extends>extends <name>SimpleDeclarationVisitor</name></extends></super> <block>{
        <function><type><specifier>public</specifier> <name>void</name></type> <name>visitClassDeclaration</name><parameter_list>(<param><decl><type><name>ClassDeclaration</name></type> <name>d</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>echo</name><argument_list>(<argument><expr>"visiting "+ <call><name><name>d</name>.<name>getQualifiedName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
