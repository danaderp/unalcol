<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\input\GreedyInputHandler.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>input</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ByteArrayOutputStream</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>StreamPumper</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>

<comment type="javadoc">/**
 * Prompts on System.err, reads input from System.in until EOF
 *
 * @since Ant 1.7
 */</comment>
<class><specifier>public</specifier> class <name>GreedyInputHandler</name> <super><extends>extends <name>DefaultInputHandler</name></extends></super> <block>{

    <comment type="javadoc">/**
     * Empty no-arg constructor
     */</comment>
    <constructor><specifier>public</specifier> <name>GreedyInputHandler</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <comment type="javadoc">/**
     * Prompts and requests input.
     * @param request the request to handle
     * @throws BuildException if not possible to read from console,
     *         or if input is invalid.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>handleInput</name><parameter_list>(<param><decl><type><name>InputRequest</name></type> <name>request</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>prompt</name> =<init> <expr><call><name>getPrompt</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>InputStream</name></type> <name>in</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>in</name> = <call><name>getInputStream</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr><name>prompt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>baos</name> =<init> <expr>new <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>StreamPumper</name></type> <name>p</name> =<init> <expr>new <call><name>StreamPumper</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>baos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Thread</name></type> <name>t</name> =<init> <expr>new <call><name>Thread</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>t</name>.<name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <try>try <block>{
                <expr_stmt><expr><call><name><name>t</name>.<name>join</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>InterruptedException</name></type> <name>e</name></decl></param>) <block>{
                <try>try <block>{
                    <expr_stmt><expr><call><name><name>t</name>.<name>join</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>InterruptedException</name></type> <name>e2</name></decl></param>) <block>{
                    <comment type="line">// Ignore</comment>
                }</block></catch></try>
            }</block></catch></try>
            <expr_stmt><expr><call><name><name>request</name>.<name>setInput</name></name><argument_list>(<argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>baos</name>.<name>toByteArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!(<call><name><name>request</name>.<name>isInputValid</name></name><argument_list>()</argument_list></call>)</expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                    <argument><expr>"Received invalid console input"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <if>if <condition>(<expr><call><name><name>p</name>.<name>getException</name></name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                    <argument><expr>"Failed to read input from console"</expr></argument>, <argument><expr><call><name><name>p</name>.<name>getException</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>
}</block></class>
</unit>
