<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\taskdefs\optional\TraXLiaisonTest.java"><package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>XSLTLiaison</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>XSLTLogger</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>JAXPUtils</name></name>;</import>

<import>import <name><name>java</name>.<name>io</name>.<name>ByteArrayInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>security</name>.<name>Permission</name></name>;</import>

<import>import <name><name>junit</name>.<name>framework</name>.<name>AssertionFailedError</name></name>;</import>

<comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<comment type="javadoc">/**
 * TraX XSLTLiaison testcase
 */</comment>
<class><specifier>public</specifier> class <name>TraXLiaisonTest</name> <super><extends>extends <name>AbstractXSLTLiaisonTest</name></extends>
    <implements>implements <name>XSLTLogger</name></implements></super> <block>{

    <constructor><specifier>public</specifier> <name>TraXLiaisonTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list><block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>f</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr>"xalan2-redirect-out.tmp"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>f</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>f</name>.<name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>XSLTLiaison</name></type> <name>createLiaison</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>TraXLiaison</name></type> <name>l</name> =<init> <expr>new <call><name>TraXLiaison</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>l</name>.<name>setLogger</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>l</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testXalan2Redirect</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
    	<decl_stmt><decl><type><name>Class</name></type> <name>clazz</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    	<try>try <block>{
    		<expr_stmt><expr><name>clazz</name> = <call><name>getClass</name><argument_list>()</argument_list></call>.<call><name>getClassLoader</name><argument_list>()</argument_list></call>.<call><name>loadClass</name><argument_list>(<argument><expr>"org.apache.xalan.lib.Redirect"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	}</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>exc</name></decl></param>) <block>{
    		<comment type="line">// ignore</comment>
    	}</block></catch></try>
    	<if>if <condition>(<expr><name>clazz</name> == <name>null</name></expr>)</condition><then> <block>{
    		<expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"xalan redirect is not on the classpath"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    		<return>return;</return>
    	}</block></then></if>
        <decl_stmt><decl><type><name>File</name></type> <name>xsl</name> =<init> <expr><call><name>getFile</name><argument_list>(<argument><expr>"/taskdefs/optional/xalan-redirect-in.xsl"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>liaison</name>.<name>setStylesheet</name></name><argument_list>(<argument><expr><name>xsl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>out</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr>"xalan2-redirect-out-dummy.tmp"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>in</name> =<init> <expr><call><name>getFile</name><argument_list>(<argument><expr>"/taskdefs/optional/xsltliaison-in.xsl"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ClassLoader</name></type> <name>orig</name> =<init> <expr><call><name><name>Thread</name>.<name>currentThread</name></name><argument_list>()</argument_list></call>.<call><name>getContextClassLoader</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>liaison</name>.<name>addParam</name></name><argument_list>(<argument><expr>"xalan-version"</expr></argument>, <argument><expr>"2"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// Use the JRE's Xerces, not lib/optional/xerces.jar:</comment>
            <expr_stmt><expr><call><name><name>Thread</name>.<name>currentThread</name></name><argument_list>()</argument_list></call>.<call><name>setContextClassLoader</name><argument_list>(<argument><expr>new <class><super><name>ClassLoader</name></super><argument_list>(<argument><expr><call><name><name>ClassLoader</name>.<name>getSystemClassLoader</name></name><argument_list>()</argument_list></call>.<call><name>getParent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list> <block>{
                <function><type><specifier>public</specifier> <name>InputStream</name></type> <name>getResourceAsStream</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
                    <if>if <condition>(<expr><call><name><name>name</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"META-INF/services/"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <comment type="line">// work around JAXP #6723276 in JDK 6</comment>
                        <return>return <expr>new <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr>new <name><name>byte</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
                    }</block></then></if>
                    <return>return <expr><call><name><name>super</name>.<name>getResourceAsStream</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// Tickle #52382:</comment>
            <expr_stmt><expr><call><name><name>System</name>.<name>setSecurityManager</name></name><argument_list>(<argument><expr>new <class><super><name>SecurityManager</name></super><argument_list>()</argument_list> <block>{<function><type><specifier>public</specifier> <name>void</name></type> <name>checkPermission</name><parameter_list>(<param><decl><type><name>Permission</name></type> <name>perm</name></decl></param>)</parameter_list> <block>{}</block></function>}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>liaison</name>.<name>transform</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>out</name>.<name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Thread</name>.<name>currentThread</name></name><argument_list>()</argument_list></call>.<call><name>setContextClassLoader</name><argument_list>(<argument><expr><name>orig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>setSecurityManager</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testMultipleTransform</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>xsl</name> =<init> <expr><call><name>getFile</name><argument_list>(<argument><expr>"/taskdefs/optional/xsltliaison-in.xsl"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>liaison</name>.<name>setStylesheet</name></name><argument_list>(<argument><expr><name>xsl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>liaison</name>.<name>addParam</name></name><argument_list>(<argument><expr>"param"</expr></argument>, <argument><expr>"value"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>in</name> =<init> <expr><call><name>getFile</name><argument_list>(<argument><expr>"/taskdefs/optional/xsltliaison-in.xml"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// test for 10 consecutives transform</comment>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; 50</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{
            <decl_stmt><decl><type><name>File</name></type> <name>out</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr>"xsltliaison" + <name>i</name> + ".tmp"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <try>try <block>{
                <expr_stmt><expr><call><name><name>liaison</name>.<name>transform</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)<block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"failed in transform " + <name>i</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch> <finally>finally <block>{
                <expr_stmt><expr><call><name><name>out</name>.<name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></finally></try>
        }</block></for>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testSystemId</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name>File</name></type> <name>file</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>( <expr><name><name>File</name>.<name>separatorChar</name></name> == '\\'</expr> )</condition><then><block>{
            <expr_stmt><expr><name>file</name> = new <call><name>File</name><argument_list>(<argument><expr>"d:\\jdk"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>file</name> = new <call><name>File</name><argument_list>(<argument><expr>"/user/local/bin"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <decl_stmt><decl><type><name>String</name></type> <name>systemid</name> =<init> <expr><call><name><name>JAXPUtils</name>.<name>getSystemId</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"SystemIDs should start by file:/"</expr></argument>, <argument><expr><call><name><name>systemid</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"file:/"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"SystemIDs should not start with file:////"</expr></argument>, <argument><expr>!<call><name><name>systemid</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"file:////"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>log</name><parameter_list>(<param><decl><type><name>String</name></type> <name>message</name></decl></param>)</parameter_list> <block>{
        <throw>throw <expr>new <call><name>AssertionFailedError</name><argument_list>(<argument><expr>"Liaison sent message: "+<name>message</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>

}</block></class>
</unit>
