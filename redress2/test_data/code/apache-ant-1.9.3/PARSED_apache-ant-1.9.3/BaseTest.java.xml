<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\junit\BaseTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>junit</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>

<comment type="javadoc">/**
 * Baseclass for BatchTest and JUnitTest.
 *
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>BaseTest</name> <block>{
    <comment type="line">// CheckStyle:VisibilityModifier OFF - bc</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>haltOnError</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>haltOnFail</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>filtertrace</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>fork</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>ifProperty</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>unlessProperty</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Vector</name></type> <name>formatters</name> =<init> <expr>new <call><name>Vector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** destination directory */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>File</name></type> <name>destDir</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>failureProperty</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>errorProperty</name></decl>;</decl_stmt>
    <comment type="line">// CheckStyle:VisibilityModifier ON</comment>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Object</name></type> <name>ifCond</name>, <name>unlessCond</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>skipNonTests</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Set the filtertrace attribute.
     * @param value a &lt;code&gt;boolean&lt;/code&gt; value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFiltertrace</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>filtertrace</name> = <name>value</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the filtertrace attribute.
     * @return the attribute.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getFiltertrace</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>filtertrace</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the fork attribute.
     * @param value a &lt;code&gt;boolean&lt;/code&gt; value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFork</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>fork</name> = <name>value</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the fork attribute.
     * @return the attribute.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getFork</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>fork</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the haltonerror attribute.
     * @param value a &lt;code&gt;boolean&lt;/code&gt; value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setHaltonerror</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>haltOnError</name> = <name>value</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the haltonfailure attribute.
     * @param value a &lt;code&gt;boolean&lt;/code&gt; value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setHaltonfailure</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>haltOnFail</name> = <name>value</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the haltonerror attribute.
     * @return the attribute.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getHaltonerror</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>haltOnError</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the haltonfailure attribute.
     * @return the attribute.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getHaltonfailure</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>haltOnFail</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the if attribute.
     * If this expression evaluates to true or the name of a property
     * which is present in project, the test will be run.
     * @param ifCondition the expression to evaluate
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setIf</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>ifCondition</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>ifCond</name> = <name>ifCondition</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ifProperty</name> = <name>ifCondition</name> != <name>null</name> ? <call><name><name>String</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name>ifCondition</name></expr></argument>)</argument_list></call> : <name>null</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the if attribute.
     * If this expression evaluates to true or the name of a property
     * which is present in project, the test will be run.
     * @param propertyName the expression to evaluate
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setIf</name><parameter_list>(<param><decl><type><name>String</name></type> <name>propertyName</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setIf</name><argument_list>(<argument><expr>(<name>Object</name>) <name>propertyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The if expression
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>getIfCondition</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>ifCond</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the unless attribute.  If this expression evaluates to
     * false or the name of a property which is not present in
     * project, the test will be run.
     * @param unlessCondition the expression to evaluate
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUnless</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>unlessCondition</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>unlessCond</name> = <name>unlessCondition</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>unlessProperty</name> = <name>unlessCondition</name> != <name>null</name>
            ? <call><name><name>String</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name>unlessCondition</name></expr></argument>)</argument_list></call> : <name>null</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the unless attribute.  If this expression evaluates to
     * false or the name of a property which is not present in
     * project, the test will be run.
     * @param propertyName the expression to evaluate
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUnless</name><parameter_list>(<param><decl><type><name>String</name></type> <name>propertyName</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setUnless</name><argument_list>(<argument><expr>(<name>Object</name>) <name>propertyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The unless expression
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>getUnlessCondition</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>unlessCond</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Allow a formatter nested element.
     * @param elem a formatter nested element.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addFormatter</name><parameter_list>(<param><decl><type><name>FormatterElement</name></type> <name>elem</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>formatters</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the destination directory.
     * @param destDir the destination directory.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTodir</name><parameter_list>(<param><decl><type><name>File</name></type> <name>destDir</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>destDir</name></name> = <name>destDir</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the destination directory.
     * @return the destination directory as an absolute path if it exists
     *         otherwise return &lt;tt&gt;null&lt;/tt&gt;
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getTodir</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>destDir</name> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>destDir</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <return>return <expr><name>null</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the failure property name.
     * @return the name of the property to set on failure.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getFailureProperty</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>failureProperty</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the name of the failure property.
     * @param failureProperty the name of the property to set if
     *                        the test fails.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFailureProperty</name><parameter_list>(<param><decl><type><name>String</name></type> <name>failureProperty</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>failureProperty</name></name> = <name>failureProperty</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the failure property name.
     * @return the name of the property to set on failure.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getErrorProperty</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>errorProperty</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the name of the error property.
     * @param errorProperty the name of the property to set if
     *                      the test has an error.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setErrorProperty</name><parameter_list>(<param><decl><type><name>String</name></type> <name>errorProperty</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>errorProperty</name></name> = <name>errorProperty</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSkipNonTests</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>skipNonTests</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>skipNonTests</name></name> = <name>skipNonTests</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSkipNonTests</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>skipNonTests</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
