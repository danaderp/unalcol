<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\types\LogLevel.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>

<comment type="javadoc">/**
 * The enumerated values for Ant's log level.
 */</comment>
<class><specifier>public</specifier> class <name>LogLevel</name> <super><extends>extends <name>EnumeratedAttribute</name></extends></super> <block>{

    <comment type="javadoc">/** ERR loglevel constant. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>LogLevel</name></type> <name>ERR</name> =<init> <expr>new <call><name>LogLevel</name><argument_list>(<argument><expr>"error"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** WARN loglevel constant. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>LogLevel</name></type> <name>WARN</name> =<init> <expr>new <call><name>LogLevel</name><argument_list>(<argument><expr>"warn"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** INFO loglevel constant. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>LogLevel</name></type> <name>INFO</name> =<init> <expr>new <call><name>LogLevel</name><argument_list>(<argument><expr>"info"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** VERBOSE loglevel constant. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>LogLevel</name></type> <name>VERBOSE</name> =<init> <expr>new <call><name>LogLevel</name><argument_list>(<argument><expr>"verbose"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** DEBUG loglevel constant. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>LogLevel</name></type> <name>DEBUG</name> =<init> <expr>new <call><name>LogLevel</name><argument_list>(<argument><expr>"debug"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Public constructor.
     */</comment>
    <constructor><specifier>public</specifier> <name>LogLevel</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <constructor><specifier>private</specifier> <name>LogLevel</name><parameter_list>(<param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setValue</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * @see EnumeratedAttribute#getValues
     * @return the strings allowed for the level attribute
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getValues</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>new <name><name>String</name><index>[]</index></name> <block>{
            <expr>"error"</expr>,
            <expr>"warn"</expr>,
            <expr>"warning"</expr>,
            <expr>"info"</expr>,
            <expr>"verbose"</expr>,
            <expr>"debug"</expr>}</block></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * mapping of enumerated values to log levels
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name><index>[]</index></type> <name>levels</name> =<init> <expr><block>{
        <expr><name><name>Project</name>.<name>MSG_ERR</name></name></expr>,
        <expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr>,
        <expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr>,
        <expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr>,
        <expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr>,
        <expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr>
    }</block></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * get the level of the echo of the current value
     * @return the level
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getLevel</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>levels</name><index>[<expr><call><name>getIndex</name><argument_list>()</argument_list></call></expr>]</index></name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
