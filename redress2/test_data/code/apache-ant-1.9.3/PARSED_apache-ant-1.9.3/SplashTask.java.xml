<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\splash\SplashTask.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>splash</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>ByteArrayOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>DataInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>URL</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>URLConnection</name></name>;</import>
<import>import <name><name>javax</name>.<name>swing</name>.<name>ImageIcon</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>Base64Converter</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>net</name>.<name>SetProxy</name></name>;</import>

<comment type="javadoc">/**
 * Creates a splash screen. The splash screen is displayed
 * for the duration of the build and includes a handy progress bar as
 * well. Use in conjunction with the sound task to provide interest
 * whilst waiting for your builds to complete...
 * @since Ant1.5
 */</comment>
<class><specifier>public</specifier> class <name>SplashTask</name> <super><extends>extends <name>Task</name></extends></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DEFAULT_SHOW_DURATION</name> =<init> <expr>5000</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>imgurl</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>proxy</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>user</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>password</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>port</name> =<init> <expr>"80"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>showDuration</name> =<init> <expr><name>DEFAULT_SHOW_DURATION</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>useProxy</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>progressRegExp</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>displayText</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>SplashScreen</name></type> <name>splash</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * A URL pointing to an image to display; optional, default antlogo.gif
     * from the classpath.
     * @param imgurl the url string pointing to the image
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setImageURL</name><parameter_list>(<param><decl><type><name>String</name></type> <name>imgurl</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>imgurl</name></name> = <name>imgurl</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * flag to enable proxy settings; optional, deprecated : consider
     * using &amp;lt;setproxy&amp;gt; instead
     * @param useProxy if ture, enable proxy settings
     * @deprecated since 1.5.x.
     *             Use org.apache.tools.ant.taskdefs.optional.net.SetProxy
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUseproxy</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>useProxy</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>useProxy</name></name> = <name>useProxy</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * name of proxy; optional.
     * @param proxy the name of the proxy host
     * @deprecated since 1.5.x.
     *             Use org.apache.tools.ant.taskdefs.optional.net.SetProxy
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setProxy</name><parameter_list>(<param><decl><type><name>String</name></type> <name>proxy</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>proxy</name></name> = <name>proxy</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Proxy port; optional, default 80.
     * @param port the proxy port
     * @deprecated since 1.5.x.
     *             Use org.apache.tools.ant.taskdefs.optional.net.SetProxy
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPort</name><parameter_list>(<param><decl><type><name>String</name></type> <name>port</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>port</name></name> = <name>port</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Proxy user; optional, default =none.
     * @param user the proxy user
     * @deprecated since 1.5.x.
     *             Use org.apache.tools.ant.taskdefs.optional.net.SetProxy
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUser</name><parameter_list>(<param><decl><type><name>String</name></type> <name>user</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>user</name></name> = <name>user</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Proxy password; required if &lt;tt&gt;user&lt;/tt&gt; is set.
     * @param password the proxy password
     * @deprecated since 1.5.x.
     *             Use org.apache.tools.ant.taskdefs.optional.net.SetProxy
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPassword</name><parameter_list>(<param><decl><type><name>String</name></type> <name>password</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>password</name></name> = <name>password</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * how long to show the splash screen in milliseconds,
     * optional; default 5000 ms.
     * @param duration the splash duration in milliseconds
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setShowduration</name><parameter_list>(<param><decl><type><name>int</name></type> <name>duration</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>showDuration</name></name> = <name>duration</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Progress regular expression which is used to parse the output
     * and dig out current progress optional; if not provided,
     * progress is increased every action and log output line
     * @param progressRegExp Progress regular expression, exactly one
     * group pattern must exists, and it represents the progress
     * number (0-100) (i.e "Progress: (.*)%")
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setProgressRegExp</name><parameter_list>(<param><decl><type><name>String</name></type> <name>progressRegExp</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>progressRegExp</name></name> = <name>progressRegExp</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the display text presented in the splash window.
     * optional; defaults to "Building ..." 
     * @param displayText the display text presented the splash window
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDisplayText</name><parameter_list>(<param><decl><type><name>String</name></type> <name>displayText</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>displayText</name></name> = <name>displayText</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Execute the task.
     * @throws BuildException on error
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>splash</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>splash</name>.<name>setVisible</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>removeBuildListener</name><argument_list>(<argument><expr><name>splash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>splash</name>.<name>dispose</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>splash</name> = <name>null</name></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Creating new SplashScreen"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>InputStream</name></type> <name>in</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>imgurl</name> != <name>null</name></expr>)</condition><then> <block>{
            <try>try <block>{
                <decl_stmt><decl><type><name>URLConnection</name></type> <name>conn</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name>SetProxy</name></type> <name>sp</name> =<init> <expr>new <call><name>SetProxy</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>sp</name>.<name>setProxyHost</name></name><argument_list>(<argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>port</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>sp</name>.<name>setProxyPort</name></name><argument_list>(<argument><expr><call><name><name>Integer</name>.<name>parseInt</name></name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><call><name><name>sp</name>.<name>setProxyUser</name></name><argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>sp</name>.<name>setProxyPassword</name></name><argument_list>(<argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>sp</name>.<name>applyWebProxySettings</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <if>if <condition>(<expr><name>useProxy</name> &amp;&amp; (<name>proxy</name> != <name>null</name> &amp;&amp; <call><name><name>proxy</name>.<name>length</name></name><argument_list>()</argument_list></call> &gt; 0)
                    &amp;&amp; (<name>port</name> != <name>null</name> &amp;&amp; <call><name><name>port</name>.<name>length</name></name><argument_list>()</argument_list></call> &gt; 0)</expr>)</condition><then> <block>{

                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Using proxied Connection"</expr></argument>,  <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>System</name>.<name>getProperties</name></name><argument_list>()</argument_list></call>.<call><name>put</name><argument_list>(<argument><expr>"http.proxySet"</expr></argument>, <argument><expr>"true"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <decl_stmt><decl><type><name>URL</name></type> <name>url</name> =<init> <expr>new <call><name>URL</name><argument_list>(<argument><expr><name>imgurl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt><expr><name>conn</name> = <call><name><name>url</name>.<name>openConnection</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>user</name> != <name>null</name> &amp;&amp; <call><name><name>user</name>.<name>length</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
                        <comment type="line">// converted from sun internal classes to</comment>
                        <comment type="line">// new Base64Converter</comment>
                        <comment type="line">// utility class extracted from Get task</comment>
                        <decl_stmt><decl><type><name>String</name></type> <name>encodedcreds</name> =<init>
                            <expr>new <call><name>Base64Converter</name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr><name>user</name> + ":" + <name>password</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>conn</name>.<name>setRequestProperty</name></name><argument_list>(<argument><expr>"Proxy-Authorization"</expr></argument>,
                                                <argument><expr><name>encodedcreds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>

                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name><name>System</name>.<name>getProperties</name></name><argument_list>()</argument_list></call>.<call><name>put</name><argument_list>(<argument><expr>"http.proxySet"</expr></argument>, <argument><expr>"false"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Using Direction HTTP Connection"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>URL</name></type> <name>url</name> =<init> <expr>new <call><name>URL</name><argument_list>(<argument><expr><name>imgurl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>conn</name> = <call><name><name>url</name>.<name>openConnection</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr><call><name><name>conn</name>.<name>setDoInput</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>conn</name>.<name>setDoOutput</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>in</name> = <call><name><name>conn</name>.<name>getInputStream</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Catch everything - some of the above return nulls,</comment>
                <comment type="line">// throw exceptions or generally misbehave</comment>
                <comment type="line">// in the event of a problem etc</comment>

            }</block> <catch>catch (<param><decl><type><name>Throwable</name></type> <name>ioe</name></decl></param>) <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Unable to download image, trying default Ant Logo"</expr></argument>,
                    <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"(Exception was \"" + <call><name><name>ioe</name>.<name>getMessage</name></name><argument_list>()</argument_list></call> + "\""</expr></argument>,
                    <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></then></if>

        <if>if <condition>(<expr><name>in</name> == <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>ClassLoader</name></type> <name>cl</name> =<init> <expr><name><name>SplashTask</name>.<name><name/></name></name>class.<call><name>getClassLoader</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>cl</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>in</name> = <call><name><name>cl</name>.<name>getResourceAsStream</name></name><argument_list>(<argument><expr>"images/ant_logo_large.gif"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>in</name> = <call><name><name>ClassLoader</name>
                    .<name>getSystemResourceAsStream</name></name><argument_list>(<argument><expr>"images/ant_logo_large.gif"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if>

        <decl_stmt><decl><type><name>boolean</name></type> <name>success</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>in</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>DataInputStream</name></type> <name>din</name> =<init> <expr>new <call><name>DataInputStream</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <try>try <block>{
                <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>bout</name> =<init> <expr>new <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>data</name></decl>;</decl_stmt>
                <while>while <condition>(<expr>(<name>data</name> = <call><name><name>din</name>.<name>read</name></name><argument_list>()</argument_list></call>) != -1</expr>)</condition> <block>{
                    <expr_stmt><expr><call><name><name>bout</name>.<name>write</name></name><argument_list>(<argument><expr>(<name>byte</name>) <name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></while>

                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Got ByteArray, creating splash"</expr></argument>,  <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <try>try <block>{
                    <decl_stmt><decl><type><name>ImageIcon</name></type> <name>img</name> =<init> <expr>new <call><name>ImageIcon</name><argument_list>(<argument><expr><call><name><name>bout</name>.<name>toByteArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>splash</name> = new <call><name>SplashScreen</name><argument_list>(<argument><expr><name>img</name></expr></argument>, <argument><expr><name>progressRegExp</name></expr></argument>, <argument><expr><name>displayText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>success</name> = true</expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>Throwable</name></type> <name>e</name></decl></param>) <block>{
                    <expr_stmt><expr><call><name>logHeadless</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>
            }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch> <finally>finally <block>{
                <try>try <block>{
                    <expr_stmt><expr><call><name><name>din</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ioe</name></decl></param>) <block>{
                    <comment type="line">// swallow if there was an error before so that</comment>
                    <comment type="line">// original error will be passed up</comment>
                    <if>if <condition>(<expr><name>success</name></expr>)</condition><then> <block>{
                        <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>ioe</name></expr></argument>)</argument_list></call></expr>;</throw>
                    }</block></then></if>
                }</block></catch></try>
            }</block></finally></try>
        }</block></then> <else>else <block>{
            <try>try <block>{
                <expr_stmt><expr><name>splash</name> = new <call><name>SplashScreen</name><argument_list>(<argument><expr>"Image Unavailable."</expr></argument>, <argument><expr><name>progressRegExp</name></expr></argument>,
                                          <argument><expr><name>displayText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>success</name> = true</expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>Throwable</name></type> <name>e</name></decl></param>) <block>{
                <expr_stmt><expr><call><name>logHeadless</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></else></if>

        <if>if <condition>(<expr><name>success</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>splash</name>.<name>setVisible</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>splash</name>.<name>toFront</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>addBuildListener</name><argument_list>(<argument><expr><name>splash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <try>try <block>{
                <expr_stmt><expr><call><name><name>Thread</name>.<name>sleep</name></name><argument_list>(<argument><expr><name>showDuration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>InterruptedException</name></type> <name>e</name></decl></param>) <block>{
                <comment type="line">// Ignore Exception</comment>
            }</block></catch></try>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>logHeadless</name><parameter_list>(<param><decl><type><name>Throwable</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"failed to display SplashScreen, caught "
            + <call><name><name>e</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call> + " with message: " + <call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>,
            <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
