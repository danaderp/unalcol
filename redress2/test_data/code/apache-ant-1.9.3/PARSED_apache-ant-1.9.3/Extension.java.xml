<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\extension\Extension.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>extension</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>StringTokenizer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>jar</name>.<name>Attributes</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>jar</name>.<name>Manifest</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>DeweyDecimal</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>StringUtils</name></name>;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Utility class that represents either an available "Optional Package"
 * (formerly known as "Standard Extension") as described in the manifest
 * of a JAR file, or the requirement for such an optional package.&lt;/p&gt;
 *
 * &lt;p&gt;For more information about optional packages, see the document
 * &lt;em&gt;Optional Package Versioning&lt;/em&gt; in the documentation bundle for your
 * Java2 Standard Edition package, in file
 * &lt;code&gt;guide/extensions/versioning.html&lt;/code&gt;.&lt;/p&gt;
 *
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>Extension</name> <block>{
    <comment type="javadoc">/**
     * Manifest Attribute Name object for EXTENSION_LIST.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Attributes</name>.<name>Name</name></name></type> <name>EXTENSION_LIST</name>
        =<init> <expr>new <call><name><name>Attributes</name>.<name>Name</name></name><argument_list>(<argument><expr>"Extension-List"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * &lt;code&gt;Name&lt;/code&gt; object for &lt;code&gt;Optional-Extension-List&lt;/code&gt;
     * manifest attribute used for declaring optional dependencies on
     * installed extensions. Note that the dependencies declared by this method
     * are not required for the library to operate but if present will be used.
     * It is NOT part of the official "Optional Package" specification.
     *
     * @see &lt;a href="http://java.sun.com/j2se/1.3/docs/guide/extensions/spec.html#dependency"&gt;
     *      Installed extension dependency&lt;/a&gt;
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Attributes</name>.<name>Name</name></name></type> <name>OPTIONAL_EXTENSION_LIST</name>
        =<init> <expr>new <call><name><name>Attributes</name>.<name>Name</name></name><argument_list>(<argument><expr>"Optional-Extension-List"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Manifest Attribute Name object for EXTENSION_NAME.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Attributes</name>.<name>Name</name></name></type> <name>EXTENSION_NAME</name> =<init>
        <expr>new <call><name><name>Attributes</name>.<name>Name</name></name><argument_list>(<argument><expr>"Extension-Name"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * Manifest Attribute Name object for SPECIFICATION_VERSION.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Attributes</name>.<name>Name</name></name></type> <name>SPECIFICATION_VERSION</name>
        =<init> <expr><name><name>Attributes</name>.<name>Name</name>.<name>SPECIFICATION_VERSION</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Manifest Attribute Name object for SPECIFICATION_VENDOR.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Attributes</name>.<name>Name</name></name></type> <name>SPECIFICATION_VENDOR</name>
        =<init> <expr><name><name>Attributes</name>.<name>Name</name>.<name>SPECIFICATION_VENDOR</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Manifest Attribute Name object for IMPLEMENTATION_VERSION.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Attributes</name>.<name>Name</name></name></type> <name>IMPLEMENTATION_VERSION</name>
        =<init> <expr><name><name>Attributes</name>.<name>Name</name>.<name>IMPLEMENTATION_VERSION</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Manifest Attribute Name object for IMPLEMENTATION_VENDOR.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Attributes</name>.<name>Name</name></name></type> <name>IMPLEMENTATION_VENDOR</name>
        =<init> <expr><name><name>Attributes</name>.<name>Name</name>.<name>IMPLEMENTATION_VENDOR</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Manifest Attribute Name object for IMPLEMENTATION_URL.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Attributes</name>.<name>Name</name></name></type> <name>IMPLEMENTATION_URL</name>
        =<init> <expr>new <call><name><name>Attributes</name>.<name>Name</name></name><argument_list>(<argument><expr>"Implementation-URL"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Manifest Attribute Name object for IMPLEMENTATION_VENDOR_ID.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Attributes</name>.<name>Name</name></name></type> <name>IMPLEMENTATION_VENDOR_ID</name>
        =<init> <expr>new <call><name><name>Attributes</name>.<name>Name</name></name><argument_list>(<argument><expr>"Implementation-Vendor-Id"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Enum indicating that extension is compatible with other extension.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Compatibility</name></type> <name>COMPATIBLE</name>
        =<init> <expr>new <call><name>Compatibility</name><argument_list>(<argument><expr>"COMPATIBLE"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Enum indicating that extension requires an upgrade
     * of specification to be compatible with other extension.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Compatibility</name></type> <name>REQUIRE_SPECIFICATION_UPGRADE</name>
        =<init> <expr>new <call><name>Compatibility</name><argument_list>(<argument><expr>"REQUIRE_SPECIFICATION_UPGRADE"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Enum indicating that extension requires a vendor
     * switch to be compatible with other extension.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Compatibility</name></type> <name>REQUIRE_VENDOR_SWITCH</name>
        =<init> <expr>new <call><name>Compatibility</name><argument_list>(<argument><expr>"REQUIRE_VENDOR_SWITCH"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Enum indicating that extension requires an upgrade
     * of implementation to be compatible with other extension.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Compatibility</name></type> <name>REQUIRE_IMPLEMENTATION_UPGRADE</name>
        =<init> <expr>new <call><name>Compatibility</name><argument_list>(<argument><expr>"REQUIRE_IMPLEMENTATION_UPGRADE"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Enum indicating that extension is incompatible with
     * other extension in ways other than other enums
     * indicate). For example the other extension may have
     * a different ID.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Compatibility</name></type> <name>INCOMPATIBLE</name>
        =<init> <expr>new <call><name>Compatibility</name><argument_list>(<argument><expr>"INCOMPATIBLE"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The name of the optional package being made available, or required.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>extensionName</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The version number (dotted decimal notation) of the specification
     * to which this optional package conforms.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>DeweyDecimal</name></type> <name>specificationVersion</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The name of the company or organization that originated the
     * specification to which this optional package conforms.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>specificationVendor</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The unique identifier of the company that produced the optional
     * package contained in this JAR file.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>implementationVendorID</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The name of the company or organization that produced this
     * implementation of this optional package.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>implementationVendor</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The version number (dotted decimal notation) for this implementation
     * of the optional package.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>DeweyDecimal</name></type> <name>implementationVersion</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The URL from which the most recent version of this optional package
     * can be obtained if it is not already installed.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>implementationURL</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Return an array of &lt;code&gt;Extension&lt;/code&gt; objects representing optional
     * packages that are available in the JAR file associated with the
     * specified &lt;code&gt;Manifest&lt;/code&gt;.  If there are no such optional
     * packages, a zero-length array is returned.
     *
     * @param manifest Manifest to be parsed
     * @return the "available" extensions in specified manifest
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Extension</name><index>[]</index></type> <name>getAvailable</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Manifest</name></type> <name>manifest</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>null</name> == <name>manifest</name></expr>)</condition><then> <block>{
            <return>return <expr>new <name><name>Extension</name><index>[ <expr>0</expr> ]</index></name></expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>ArrayList</name></type> <name>results</name> =<init> <expr>new <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Attributes</name></type> <name>mainAttributes</name> =<init> <expr><call><name><name>manifest</name>.<name>getMainAttributes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>null</name> != <name>mainAttributes</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>Extension</name></type> <name>extension</name> =<init> <expr><call><name>getExtension</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>mainAttributes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>null</name> != <name>extension</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>results</name>.<name>add</name></name><argument_list>(<argument><expr><name>extension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Map</name></type> <name>entries</name> =<init> <expr><call><name><name>manifest</name>.<name>getEntries</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Iterator</name></type> <name>keys</name> =<init> <expr><call><name><name>entries</name>.<name>keySet</name></name><argument_list>()</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>keys</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>key</name> =<init> <expr>(<name>String</name>) <call><name><name>keys</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>Attributes</name></type> <name>attributes</name> =<init> <expr>(<name>Attributes</name>) <call><name><name>entries</name>.<name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>Extension</name></type> <name>extension</name> =<init> <expr><call><name>getExtension</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>attributes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>null</name> != <name>extension</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>results</name>.<name>add</name></name><argument_list>(<argument><expr><name>extension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></while>

        <return>return <expr>(<name><name>Extension</name><index>[]</index></name>) <call><name><name>results</name>.<name>toArray</name></name><argument_list>(<argument><expr>new <name><name>Extension</name><index>[<expr><call><name><name>results</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Return the set of &lt;code&gt;Extension&lt;/code&gt; objects representing optional
     * packages that are required by the application contained in the JAR
     * file associated with the specified &lt;code&gt;Manifest&lt;/code&gt;.  If there
     * are no such optional packages, a zero-length list is returned.
     *
     * @param manifest Manifest to be parsed
     * @return the dependencies that are specified in manifest
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Extension</name><index>[]</index></type> <name>getRequired</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Manifest</name></type> <name>manifest</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>getListed</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><name><name>Attributes</name>.<name>Name</name>.<name>EXTENSION_LIST</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Return the set of &lt;code&gt;Extension&lt;/code&gt; objects representing "Optional
     * Packages" that the application declares they will use if present. If
     * there are no such optional packages, a zero-length list is returned.
     *
     * @param manifest Manifest to be parsed
     * @return the optional dependencies that are specified in manifest
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Extension</name><index>[]</index></type> <name>getOptions</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Manifest</name></type> <name>manifest</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>getListed</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><name>OPTIONAL_EXTENSION_LIST</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Add Extension to the specified manifest Attributes.
     *
     * @param attributes the attributes of manifest to add to
     * @param extension the extension
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>addExtension</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Extension</name></type> <name>extension</name></decl></param>,
                                     <param><decl><type><specifier>final</specifier> <name>Attributes</name></type> <name>attributes</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>addExtension</name><argument_list>(<argument><expr><name>extension</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>attributes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add Extension to the specified manifest Attributes.
     * Use the specified prefix so that dependencies can added
     * with a prefix such as "java3d-" etc.
     *
     * @param attributes the attributes of manifest to add to
     * @param extension the extension
     * @param prefix the name to prefix to extension
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>addExtension</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Extension</name></type> <name>extension</name></decl></param>,
                                     <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>prefix</name></decl></param>,
                                     <param><decl><type><specifier>final</specifier> <name>Attributes</name></type> <name>attributes</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>attributes</name>.<name>putValue</name></name><argument_list>(<argument><expr><name>prefix</name> + <name>EXTENSION_NAME</name></expr></argument>,
                             <argument><expr><call><name><name>extension</name>.<name>getExtensionName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>specificationVendor</name> =<init> <expr><call><name><name>extension</name>.<name>getSpecificationVendor</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>null</name> != <name>specificationVendor</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>attributes</name>.<name>putValue</name></name><argument_list>(<argument><expr><name>prefix</name> + <name>SPECIFICATION_VENDOR</name></expr></argument>,
                                 <argument><expr><name>specificationVendor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>DeweyDecimal</name></type> <name>specificationVersion</name>
            =<init> <expr><call><name><name>extension</name>.<name>getSpecificationVersion</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>null</name> != <name>specificationVersion</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>attributes</name>.<name>putValue</name></name><argument_list>(<argument><expr><name>prefix</name> + <name>SPECIFICATION_VERSION</name></expr></argument>,
                                 <argument><expr><call><name><name>specificationVersion</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>implementationVendorID</name>
            =<init> <expr><call><name><name>extension</name>.<name>getImplementationVendorID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>null</name> != <name>implementationVendorID</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>attributes</name>.<name>putValue</name></name><argument_list>(<argument><expr><name>prefix</name> + <name>IMPLEMENTATION_VENDOR_ID</name></expr></argument>,
                                 <argument><expr><name>implementationVendorID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>implementationVendor</name> =<init> <expr><call><name><name>extension</name>.<name>getImplementationVendor</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>null</name> != <name>implementationVendor</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>attributes</name>.<name>putValue</name></name><argument_list>(<argument><expr><name>prefix</name> + <name>IMPLEMENTATION_VENDOR</name></expr></argument>,
                                 <argument><expr><name>implementationVendor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>DeweyDecimal</name></type> <name>implementationVersion</name>
            =<init> <expr><call><name><name>extension</name>.<name>getImplementationVersion</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>null</name> != <name>implementationVersion</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>attributes</name>.<name>putValue</name></name><argument_list>(<argument><expr><name>prefix</name> + <name>IMPLEMENTATION_VERSION</name></expr></argument>,
                                 <argument><expr><call><name><name>implementationVersion</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>implementationURL</name> =<init> <expr><call><name><name>extension</name>.<name>getImplementationURL</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>null</name> != <name>implementationURL</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>attributes</name>.<name>putValue</name></name><argument_list>(<argument><expr><name>prefix</name> + <name>IMPLEMENTATION_URL</name></expr></argument>,
                                 <argument><expr><name>implementationURL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * The constructor to create Extension object.
     * Note that every component is allowed to be specified
     * but only the extensionName is mandatory.
     *
     * @param extensionName the name of extension.
     * @param specificationVersion the specification Version of extension.
     * @param specificationVendor the specification Vendor of extension.
     * @param implementationVersion the implementation Version of extension.
     * @param implementationVendor the implementation Vendor of extension.
     * @param implementationVendorId the implementation VendorId of extension.
     * @param implementationURL the implementation URL of extension.
     */</comment>
    <constructor><specifier>public</specifier> <name>Extension</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>extensionName</name></decl></param>,
                      <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>specificationVersion</name></decl></param>,
                      <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>specificationVendor</name></decl></param>,
                      <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>implementationVersion</name></decl></param>,
                      <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>implementationVendor</name></decl></param>,
                      <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>implementationVendorId</name></decl></param>,
                      <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>implementationURL</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>extensionName</name></name> = <name>extensionName</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>specificationVendor</name></name> = <name>specificationVendor</name></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>null</name> != <name>specificationVersion</name></expr>)</condition><then> <block>{
            <try>try <block>{
                <expr_stmt><expr><name><name>this</name>.<name>specificationVersion</name></name>
                    = new <call><name>DeweyDecimal</name><argument_list>(<argument><expr><name>specificationVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><specifier>final</specifier> <name>NumberFormatException</name></type> <name>nfe</name></decl></param>) <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>error</name> =<init> <expr>"Bad specification version format '"
                    + <name>specificationVersion</name> + "' in '" + <name>extensionName</name>
                    + "'. (Reason: " + <name>nfe</name> + ")"</expr></init></decl>;</decl_stmt>
                <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></then></if>

        <expr_stmt><expr><name><name>this</name>.<name>implementationURL</name></name> = <name>implementationURL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>implementationVendor</name></name> = <name>implementationVendor</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>implementationVendorID</name></name> = <name>implementationVendorId</name></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>null</name> != <name>implementationVersion</name></expr>)</condition><then> <block>{
            <try>try <block>{
                <expr_stmt><expr><name><name>this</name>.<name>implementationVersion</name></name>
                    = new <call><name>DeweyDecimal</name><argument_list>(<argument><expr><name>implementationVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><specifier>final</specifier> <name>NumberFormatException</name></type> <name>nfe</name></decl></param>) <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>error</name> =<init> <expr>"Bad implementation version format '"
                    + <name>implementationVersion</name> + "' in '" + <name>extensionName</name>
                    + "'. (Reason: " + <name>nfe</name> + ")"</expr></init></decl>;</decl_stmt>
                <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></then></if>

        <if>if <condition>(<expr><name>null</name> == <name><name>this</name>.<name>extensionName</name></name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>NullPointerException</name><argument_list>(<argument><expr>"extensionName property is null"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
    }</block></constructor>

    <comment type="javadoc">/**
     * Get the name of the extension.
     *
     * @return the name of the extension
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getExtensionName</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>extensionName</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the vendor of the extensions specification.
     *
     * @return the vendor of the extensions specification.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getSpecificationVendor</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>specificationVendor</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the version of the extensions specification.
     *
     * @return the version of the extensions specification.
     */</comment>
    <function><type><specifier>public</specifier> <name>DeweyDecimal</name></type> <name>getSpecificationVersion</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>specificationVersion</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the url of the extensions implementation.
     *
     * @return the url of the extensions implementation.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getImplementationURL</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>implementationURL</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the vendor of the extensions implementation.
     *
     * @return the vendor of the extensions implementation.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getImplementationVendor</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>implementationVendor</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the vendorID of the extensions implementation.
     *
     * @return the vendorID of the extensions implementation.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getImplementationVendorID</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>implementationVendorID</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the version of the extensions implementation.
     *
     * @return the version of the extensions implementation.
     */</comment>
    <function><type><specifier>public</specifier> <name>DeweyDecimal</name></type> <name>getImplementationVersion</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>implementationVersion</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Return a Compatibility enum indicating the relationship of this
     * &lt;code&gt;Extension&lt;/code&gt; with the specified &lt;code&gt;Extension&lt;/code&gt;.
     *
     * @param required Description of the required optional package
     * @return the enum indicating the compatibility (or lack thereof)
     *         of specified extension
     */</comment>
    <function><type><specifier>public</specifier> <name>Compatibility</name></type> <name>getCompatibilityWith</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Extension</name></type> <name>required</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// Extension Name must match</comment>
        <if>if <condition>(<expr>!<call><name><name>extensionName</name>.<name>equals</name></name><argument_list>(<argument><expr><call><name><name>required</name>.<name>getExtensionName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name>INCOMPATIBLE</name></expr>;</return>
        }</block></then></if>

        <comment type="line">// Available specification version must be &gt;= required</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>DeweyDecimal</name></type> <name>requiredSpecificationVersion</name>
            =<init> <expr><call><name><name>required</name>.<name>getSpecificationVersion</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>null</name> != <name>requiredSpecificationVersion</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>null</name> == <name>specificationVersion</name>
                || !<call><name>isCompatible</name><argument_list>(<argument><expr><name>specificationVersion</name></expr></argument>, <argument><expr><name>requiredSpecificationVersion</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><name>REQUIRE_SPECIFICATION_UPGRADE</name></expr>;</return>
            }</block></then></if>
        }</block></then></if>

        <comment type="line">// Implementation Vendor ID must match</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>requiredImplementationVendorID</name>
            =<init> <expr><call><name><name>required</name>.<name>getImplementationVendorID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>null</name> != <name>requiredImplementationVendorID</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>null</name> == <name>implementationVendorID</name>
                || !<call><name><name>implementationVendorID</name>.<name>equals</name></name><argument_list>(<argument><expr><name>requiredImplementationVendorID</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><name>REQUIRE_VENDOR_SWITCH</name></expr>;</return>
            }</block></then></if>
        }</block></then></if>

        <comment type="line">// Implementation version must be &gt;= required</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>DeweyDecimal</name></type> <name>requiredImplementationVersion</name>
            =<init> <expr><call><name><name>required</name>.<name>getImplementationVersion</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>null</name> != <name>requiredImplementationVersion</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>null</name> == <name>implementationVersion</name>
                || !<call><name>isCompatible</name><argument_list>(<argument><expr><name>implementationVersion</name></expr></argument>, <argument><expr><name>requiredImplementationVersion</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><name>REQUIRE_IMPLEMENTATION_UPGRADE</name></expr>;</return>
            }</block></then></if>
        }</block></then></if>

        <comment type="line">// This available optional package satisfies the requirements</comment>
        <return>return <expr><name>COMPATIBLE</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Return &lt;code&gt;true&lt;/code&gt; if the specified &lt;code&gt;Extension&lt;/code&gt;
     * (which represents an optional package required by an application)
     * is satisfied by this &lt;code&gt;Extension&lt;/code&gt; (which represents an
     * optional package that is already installed.  Otherwise, return
     * &lt;code&gt;false&lt;/code&gt;.
     *
     * @param required Description of the required optional package
     * @return true if the specified extension is compatible with this extension
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isCompatibleWith</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Extension</name></type> <name>required</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>(<name>COMPATIBLE</name> == <call><name>getCompatibilityWith</name><argument_list>(<argument><expr><name>required</name></expr></argument>)</argument_list></call>)</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Return a String representation of this object.
     *
     * @return string representation of object.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>brace</name> =<init> <expr>": "</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuffer</name></type> <name>sb</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>(<argument><expr><call><name><name>EXTENSION_NAME</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>brace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>extensionName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name><name>StringUtils</name>.<name>LINE_SEP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>null</name> != <name>specificationVersion</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>SPECIFICATION_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>brace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>specificationVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name><name>StringUtils</name>.<name>LINE_SEP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>null</name> != <name>specificationVendor</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>SPECIFICATION_VENDOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>brace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>specificationVendor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name><name>StringUtils</name>.<name>LINE_SEP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>null</name> != <name>implementationVersion</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>IMPLEMENTATION_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>brace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>implementationVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name><name>StringUtils</name>.<name>LINE_SEP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>null</name> != <name>implementationVendorID</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>IMPLEMENTATION_VENDOR_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>brace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>implementationVendorID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name><name>StringUtils</name>.<name>LINE_SEP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>null</name> != <name>implementationVendor</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>IMPLEMENTATION_VENDOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>brace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>implementationVendor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name><name>StringUtils</name>.<name>LINE_SEP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>null</name> != <name>implementationURL</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>IMPLEMENTATION_URL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>brace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>implementationURL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name><name>StringUtils</name>.<name>LINE_SEP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <return>return <expr><call><name><name>sb</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Return &lt;code&gt;true&lt;/code&gt; if the first version number is greater than
     * or equal to the second; otherwise return &lt;code&gt;false&lt;/code&gt;.
     *
     * @param first First version number (dotted decimal)
     * @param second Second version number (dotted decimal)
     */</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>isCompatible</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>DeweyDecimal</name></type> <name>first</name></decl></param>,
                                 <param><decl><type><specifier>final</specifier> <name>DeweyDecimal</name></type> <name>second</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>first</name>.<name>isGreaterThanOrEqual</name></name><argument_list>(<argument><expr><name>second</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Retrieve all the extensions listed under a particular key
     * (Usually EXTENSION_LIST or OPTIONAL_EXTENSION_LIST).
     *
     * @param manifest the manifest to extract extensions from
     * @param listKey the key used to get list (Usually
     *        EXTENSION_LIST or OPTIONAL_EXTENSION_LIST)
     * @return the list of listed extensions
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>Extension</name><index>[]</index></type> <name>getListed</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Manifest</name></type> <name>manifest</name></decl></param>,
                                          <param><decl><type><specifier>final</specifier> <name><name>Attributes</name>.<name>Name</name></name></type> <name>listKey</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>ArrayList</name></type> <name>results</name> =<init> <expr>new <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Attributes</name></type> <name>mainAttributes</name> =<init> <expr><call><name><name>manifest</name>.<name>getMainAttributes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>null</name> != <name>mainAttributes</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>getExtension</name><argument_list>(<argument><expr><name>mainAttributes</name></expr></argument>, <argument><expr><name>results</name></expr></argument>, <argument><expr><name>listKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Map</name></type> <name>entries</name> =<init> <expr><call><name><name>manifest</name>.<name>getEntries</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Iterator</name></type> <name>keys</name> =<init> <expr><call><name><name>entries</name>.<name>keySet</name></name><argument_list>()</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>keys</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>key</name> =<init> <expr>(<name>String</name>) <call><name><name>keys</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>Attributes</name></type> <name>attributes</name> =<init> <expr>(<name>Attributes</name>) <call><name><name>entries</name>.<name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>getExtension</name><argument_list>(<argument><expr><name>attributes</name></expr></argument>, <argument><expr><name>results</name></expr></argument>, <argument><expr><name>listKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>

        <return>return <expr>(<name><name>Extension</name><index>[]</index></name>) <call><name><name>results</name>.<name>toArray</name></name><argument_list>(<argument><expr>new <name><name>Extension</name><index>[<expr><call><name><name>results</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Add required optional packages defined in the specified
     * attributes entry, if any.
     *
     * @param attributes Attributes to be parsed
     * @param required list to add required optional packages to
     * @param listKey the key to use to lookup list, usually EXTENSION_LIST
     *    or OPTIONAL_EXTENSION_LIST
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>getExtension</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Attributes</name></type> <name>attributes</name></decl></param>,
                                     <param><decl><type><specifier>final</specifier> <name>ArrayList</name></type> <name>required</name></decl></param>,
                                     <param><decl><type><specifier>final</specifier> <name><name>Attributes</name>.<name>Name</name></name></type> <name>listKey</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>names</name> =<init> <expr><call><name><name>attributes</name>.<name>getValue</name></name><argument_list>(<argument><expr><name>listKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>null</name> == <name>names</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name><index>[]</index></type> <name>extentions</name> =<init> <expr><call><name>split</name><argument_list>(<argument><expr><name>names</name></expr></argument>, <argument><expr>" "</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>extentions</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>prefix</name> =<init> <expr><name><name>extentions</name><index>[ <expr><name>i</name></expr> ]</index></name> + "-"</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>Extension</name></type> <name>extension</name> =<init> <expr><call><name>getExtension</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>attributes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>null</name> != <name>extension</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>required</name>.<name>add</name></name><argument_list>(<argument><expr><name>extension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Splits the string on every token into an array of strings.
     *
     * @param string the string
     * @param onToken the token
     * @return the resultant array
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name><index>[]</index></type> <name>split</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>string</name></decl></param>,
                                        <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>onToken</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>StringTokenizer</name></type> <name>tokenizer</name> =<init> <expr>new <call><name>StringTokenizer</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>onToken</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name><index>[]</index></type> <name>result</name> =<init> <expr>new <name><name>String</name><index>[ <expr><call><name><name>tokenizer</name>.<name>countTokens</name></name><argument_list>()</argument_list></call></expr> ]</index></name></expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>result</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name><name>result</name><index>[ <expr><name>i</name></expr> ]</index></name> = <call><name><name>tokenizer</name>.<name>nextToken</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Extract an Extension from Attributes.
     * Prefix indicates the prefix checked for each string.
     * Usually the prefix is &lt;em&gt;"&amp;lt;extension&amp;gt;-"&lt;/em&gt; if looking for a
     * &lt;b&gt;Required&lt;/b&gt; extension. If you are looking for an
     * &lt;b&gt;Available&lt;/b&gt; extension
     * then the prefix is &lt;em&gt;""&lt;/em&gt;.
     *
     * @param prefix the prefix for each attribute name
     * @param attributes Attributes to searched
     * @return the new Extension object, or null
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>Extension</name></type> <name>getExtension</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>prefix</name></decl></param>,
                                          <param><decl><type><specifier>final</specifier> <name>Attributes</name></type> <name>attributes</name></decl></param>)</parameter_list> <block>{
        <comment type="line">//WARNING: We trim the values of all the attributes because</comment>
        <comment type="line">//Some extension declarations are badly defined (ie have spaces</comment>
        <comment type="line">//after version or vendorID)</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>nameKey</name> =<init> <expr><name>prefix</name> + <name>EXTENSION_NAME</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>name</name> =<init> <expr><call><name>getTrimmedString</name><argument_list>(<argument><expr><call><name><name>attributes</name>.<name>getValue</name></name><argument_list>(<argument><expr><name>nameKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>null</name> == <name>name</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>specVendorKey</name> =<init> <expr><name>prefix</name> + <name>SPECIFICATION_VENDOR</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>specVendor</name>
            =<init> <expr><call><name>getTrimmedString</name><argument_list>(<argument><expr><call><name><name>attributes</name>.<name>getValue</name></name><argument_list>(<argument><expr><name>specVendorKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>specVersionKey</name> =<init> <expr><name>prefix</name> + <name>SPECIFICATION_VERSION</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>specVersion</name>
            =<init> <expr><call><name>getTrimmedString</name><argument_list>(<argument><expr><call><name><name>attributes</name>.<name>getValue</name></name><argument_list>(<argument><expr><name>specVersionKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>impVersionKey</name> =<init> <expr><name>prefix</name> + <name>IMPLEMENTATION_VERSION</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>impVersion</name>
            =<init> <expr><call><name>getTrimmedString</name><argument_list>(<argument><expr><call><name><name>attributes</name>.<name>getValue</name></name><argument_list>(<argument><expr><name>impVersionKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>impVendorKey</name> =<init> <expr><name>prefix</name> + <name>IMPLEMENTATION_VENDOR</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>impVendor</name>
            =<init> <expr><call><name>getTrimmedString</name><argument_list>(<argument><expr><call><name><name>attributes</name>.<name>getValue</name></name><argument_list>(<argument><expr><name>impVendorKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>impVendorIDKey</name> =<init> <expr><name>prefix</name> + <name>IMPLEMENTATION_VENDOR_ID</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>impVendorId</name>
            =<init> <expr><call><name>getTrimmedString</name><argument_list>(<argument><expr><call><name><name>attributes</name>.<name>getValue</name></name><argument_list>(<argument><expr><name>impVendorIDKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>impURLKey</name> =<init> <expr><name>prefix</name> + <name>IMPLEMENTATION_URL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>impURL</name> =<init> <expr><call><name>getTrimmedString</name><argument_list>(<argument><expr><call><name><name>attributes</name>.<name>getValue</name></name><argument_list>(<argument><expr><name>impURLKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr>new <call><name>Extension</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>specVersion</name></expr></argument>, <argument><expr><name>specVendor</name></expr></argument>, <argument><expr><name>impVersion</name></expr></argument>,
                              <argument><expr><name>impVendor</name></expr></argument>, <argument><expr><name>impVendorId</name></expr></argument>, <argument><expr><name>impURL</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Trim the supplied string if the string is non-null
     *
     * @param value the string to trim or null
     * @return the trimmed string or null
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>getTrimmedString</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name>null</name> == <name>value</name> ? <name>null</name> : <call><name><name>value</name>.<name>trim</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
