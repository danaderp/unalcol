<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\CommandLauncherTask.java"><package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>launcher</name>.<name>CommandLauncher</name></name>;</import>

<comment type="javadoc">/**
 * Task that configures the {@link
 * org.apache.tools.ant.taskdefs.launcher.CommandLauncher} to used
 * when starting external processes.
 * @since Ant 1.9.0
 */</comment>
<class><specifier>public</specifier> class <name>CommandLauncherTask</name> <super><extends>extends <name>Task</name></extends></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>vmLauncher</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>CommandLauncher</name></type> <name>commandLauncher</name></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>addConfigured</name><parameter_list>(<param><decl><type><name>CommandLauncher</name></type> <name>commandLauncher</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>commandLauncher</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Only one CommandLauncher can be installed"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>commandLauncher</name></name> = <name>commandLauncher</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>commandLauncher</name> != <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>vmLauncher</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>CommandLauncher</name>.<name>setVMLauncher</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>commandLauncher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>CommandLauncher</name>.<name>setShellLauncher</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>commandLauncher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setVmLauncher</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>vmLauncher</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>vmLauncher</name></name> = <name>vmLauncher</name></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
