<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\script\ScriptDefBase.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>script</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>MagicNames</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>DynamicConfigurator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>

<comment type="javadoc">/**
 * The script execution class. This class finds the defining script task
 * and passes control to that task's executeScript method.
 *
 * @since Ant 1.6
 */</comment>
<class><specifier>public</specifier> class <name>ScriptDefBase</name> <super><extends>extends <name>Task</name></extends> <implements>implements <name>DynamicConfigurator</name></implements></super> <block>{

    <comment type="javadoc">/** Nested elements */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Map</name></type> <name>nestedElementMap</name> =<init> <expr>new <call><name>HashMap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Attributes */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Map</name></type> <name>attributes</name> =<init> <expr>new <call><name>HashMap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>text</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Locate the script defining task and execute the script by passing
     * control to it
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>getScript</name><argument_list>()</argument_list></call>.<call><name>executeScript</name><argument_list>(<argument><expr><name>attributes</name></expr></argument>, <argument><expr><name>nestedElementMap</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>ScriptDef</name></type> <name>getScript</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> =<init> <expr><call><name>getTaskType</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Map</name></type> <name>scriptRepository</name>
            =<init> <expr>(<name>Map</name>) <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getReference</name><argument_list>(<argument><expr><name><name>MagicNames</name>.<name>SCRIPT_REPOSITORY</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>scriptRepository</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Script repository not found for " + <name>name</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <decl_stmt><decl><type><name>ScriptDef</name></type> <name>definition</name> =<init> <expr>(<name>ScriptDef</name>) <call><name><name>scriptRepository</name>.<name>get</name></name><argument_list>(<argument><expr><call><name>getTaskType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>definition</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Script definition not found for " + <name>name</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr><name>definition</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Create a nested element
     *
     * @param name the nested element name
     * @return the element to be configured
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>createDynamicElement</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list>  <block>{
        <decl_stmt><decl><type><name>List</name></type> <name>nestedElementList</name> =<init> <expr>(<name>List</name>) <call><name><name>nestedElementMap</name>.<name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>nestedElementList</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>nestedElementList</name> = new <call><name>ArrayList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>nestedElementMap</name>.<name>put</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>nestedElementList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>Object</name></type> <name>element</name> =<init> <expr><call><name>getScript</name><argument_list>()</argument_list></call>.<call><name>createNestedElement</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>nestedElementList</name>.<name>add</name></name><argument_list>(<argument><expr><name>element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>element</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set a task attribute
     *
     * @param name the attribute name.
     * @param value the attribute's string value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDynamicAttribute</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>, <param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>ScriptDef</name></type> <name>definition</name> =<init> <expr><call><name>getScript</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>definition</name>.<name>isAttributeSupported</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"&lt;" + <call><name>getTaskType</name><argument_list>()</argument_list></call>
                    + "&gt; does not support the \"" + <name>name</name> + "\" attribute"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>attributes</name>.<name>put</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the script text.
     *
     * @param text a component of the script text to be added.
     * @since ant1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addText</name><parameter_list>(<param><decl><type><name>String</name></type> <name>text</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>text</name></name> = <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>replaceProperties</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * get the text of this element; may be null
     * @return text or null for no nested text
     * @since ant1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getText</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>text</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Utility method for nested scripts; throws a BuildException
     * with the given message.
     * @param message text to pass to the BuildException
     * @throws BuildException always.
     * @since ant1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>fail</name><parameter_list>(<param><decl><type><name>String</name></type> <name>message</name></decl></param>)</parameter_list> <block>{
        <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>
}</block></class>

</unit>
