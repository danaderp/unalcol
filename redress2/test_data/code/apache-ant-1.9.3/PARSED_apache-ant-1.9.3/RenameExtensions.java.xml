<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\RenameExtensions.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<comment type="block">/*
 * Task to rename files based on extension. This task has the following
 * properties which can be set:
 * &lt;ul&gt;
 * &lt;li&gt;fromExtension: &lt;/li&gt;
 * &lt;li&gt;toExtension: &lt;/li&gt;
 * &lt;li&gt;srcDir: &lt;/li&gt;
 * &lt;li&gt;replace: &lt;/li&gt;
 * &lt;/ul&gt;
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>MatchingTask</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>Move</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Mapper</name></name>;</import>

<comment type="javadoc">/**
 *
 * @version 1.2
 *
 * @deprecated since 1.5.x.
 *             Use &amp;lt;move&amp;gt; instead
 */</comment>
<class><specifier>public</specifier> class <name>RenameExtensions</name> <super><extends>extends <name>MatchingTask</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>fromExtension</name> =<init> <expr>""</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>toExtension</name> =<init> <expr>""</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>replace</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>srcDir</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Mapper</name>.<name>MapperType</name></name></type> <name>globType</name></decl>;</decl_stmt>


    <comment type="javadoc">/** Creates new RenameExtensions */</comment>
    <constructor><specifier>public</specifier> <name>RenameExtensions</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>globType</name> = new <call><name><name>Mapper</name>.<name>MapperType</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>globType</name>.<name>setValue</name></name><argument_list>(<argument><expr>"glob"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * The string that files must end in to be renamed
     *
     * @param from the extension of files being renamed.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFromExtension</name><parameter_list>(<param><decl><type><name>String</name></type> <name>from</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>fromExtension</name> = <name>from</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The string that renamed files will end with on
     * completion
     *
     * @param to the extension of the renamed files.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setToExtension</name><parameter_list>(<param><decl><type><name>String</name></type> <name>to</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>toExtension</name> = <name>to</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * store replace attribute - this determines whether the target file
     * should be overwritten if present
     *
     * @param replace if true overwrite any target files that exist.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setReplace</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>replace</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>replace</name></name> = <name>replace</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the source dir to find the files to be renamed.
     *
     * @param srcDir the source directory.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSrcDir</name><parameter_list>(<param><decl><type><name>File</name></type> <name>srcDir</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>srcDir</name></name> = <name>srcDir</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Executes the task.
     *
     * @throws BuildException is there is a problem in the task execution.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{

        <comment type="line">// first off, make sure that we've got a from and to extension</comment>
        <if>if <condition>(<expr><name>fromExtension</name> == <name>null</name> || <name>toExtension</name> == <name>null</name> || <name>srcDir</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"srcDir, fromExtension and toExtension "
                + "attributes must be set!"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"DEPRECATED - The renameext task is deprecated.  Use move instead."</expr></argument>,
            <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Replace this with:"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"&lt;move todir=\"" + <name>srcDir</name> + "\" overwrite=\"" + <name>replace</name> + "\"&gt;"</expr></argument>,
            <argument><expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"  &lt;fileset dir=\"" + <name>srcDir</name> + "\" /&gt;"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"  &lt;mapper type=\"glob\""</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"          from=\"*" + <name>fromExtension</name> + "\""</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"          to=\"*" + <name>toExtension</name> + "\" /&gt;"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"&lt;/move&gt;"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"using the same patterns on &lt;fileset&gt; as you\'ve used here"</expr></argument>,
            <argument><expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Move</name></type> <name>move</name> =<init> <expr>new <call><name>Move</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>move</name>.<name>bindToOwner</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>move</name>.<name>setOwningTarget</name></name><argument_list>(<argument><expr><call><name>getOwningTarget</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>move</name>.<name>setTaskName</name></name><argument_list>(<argument><expr><call><name>getTaskName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>move</name>.<name>setLocation</name></name><argument_list>(<argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>move</name>.<name>setTodir</name></name><argument_list>(<argument><expr><name>srcDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>move</name>.<name>setOverwrite</name></name><argument_list>(<argument><expr><name>replace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>fileset</name>.<name>setDir</name></name><argument_list>(<argument><expr><name>srcDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>move</name>.<name>addFileset</name></name><argument_list>(<argument><expr><name>fileset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Mapper</name></type> <name>me</name> =<init> <expr><call><name><name>move</name>.<name>createMapper</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>me</name>.<name>setType</name></name><argument_list>(<argument><expr><name>globType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>me</name>.<name>setFrom</name></name><argument_list>(<argument><expr>"*" + <name>fromExtension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>me</name>.<name>setTo</name></name><argument_list>(<argument><expr>"*" + <name>toExtension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>move</name>.<name>execute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
