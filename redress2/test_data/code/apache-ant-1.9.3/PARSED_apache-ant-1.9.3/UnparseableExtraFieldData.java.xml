<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\zip\UnparseableExtraFieldData.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>zip</name></name>;</package>

<comment type="javadoc">/**
 * Wrapper for extra field data that doesn't conform to the recommended format of header-tag + size + data.
 *
 * &lt;p&gt;The header-id is artificial (and not listed as a known ID in
 * {@link &lt;a href="http://www.pkware.com/documents/casestudies/APPNOTE.TXT"&gt;
 * APPNOTE.TXT&lt;/a&gt;}).  Since it isn't used anywhere except to satisfy the
 * ZipExtraField contract it shouldn't matter anyway.&lt;/p&gt;
 *
 * @since Ant 1.8.1
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>UnparseableExtraFieldData</name>
    <super><implements>implements <name>CentralDirectoryParsingZipExtraField</name></implements></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ZipShort</name></type> <name>HEADER_ID</name> =<init> <expr>new <call><name>ZipShort</name><argument_list>(<argument><expr>0xACC1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>byte</name><index>[]</index></type> <name>localFileData</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>byte</name><index>[]</index></type> <name>centralDirectoryData</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The Header-ID.
     *
     * @return a completely arbitrary value that should be ignored.
     */</comment>
    <function><type><specifier>public</specifier> <name>ZipShort</name></type> <name>getHeaderId</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>HEADER_ID</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Length of the complete extra field in the local file data.
     *
     * @return The LocalFileDataLength value
     */</comment>
    <function><type><specifier>public</specifier> <name>ZipShort</name></type> <name>getLocalFileDataLength</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>new <call><name>ZipShort</name><argument_list>(<argument><expr><name>localFileData</name> == <name>null</name> ? 0 : <name><name>localFileData</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Length of the complete extra field in the central directory.
     *
     * @return The CentralDirectoryLength value
     */</comment>
    <function><type><specifier>public</specifier> <name>ZipShort</name></type> <name>getCentralDirectoryLength</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>centralDirectoryData</name> == <name>null</name>
            ? <call><name>getLocalFileDataLength</name><argument_list>()</argument_list></call>
            : new <call><name>ZipShort</name><argument_list>(<argument><expr><name><name>centralDirectoryData</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * The actual data to put into local file data.
     *
     * @return The LocalFileDataData value
     */</comment>
    <function><type><specifier>public</specifier> <name>byte</name><index>[]</index></type> <name>getLocalFileDataData</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>ZipUtil</name>.<name>copy</name></name><argument_list>(<argument><expr><name>localFileData</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * The actual data to put into central directory.
     *
     * @return The CentralDirectoryData value
     */</comment>
    <function><type><specifier>public</specifier> <name>byte</name><index>[]</index></type> <name>getCentralDirectoryData</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>centralDirectoryData</name> == <name>null</name>
            ? <call><name>getLocalFileDataData</name><argument_list>()</argument_list></call> : <call><name><name>ZipUtil</name>.<name>copy</name></name><argument_list>(<argument><expr><name>centralDirectoryData</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Populate data from this array as if it was in local file data.
     *
     * @param buffer the buffer to read data from
     * @param offset offset into buffer to read data
     * @param length the length of data
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>parseFromLocalFileData</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buffer</name></decl></param>, <param><decl><type><name>int</name></type> <name>offset</name></decl></param>, <param><decl><type><name>int</name></type> <name>length</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>localFileData</name> = new <name><name>byte</name><index>[<expr><name>length</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>localFileData</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Populate data from this array as if it was in central directory data.
     *
     * @param buffer the buffer to read data from
     * @param offset offset into buffer to read data
     * @param length the length of data
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>parseFromCentralDirectoryData</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buffer</name></decl></param>, <param><decl><type><name>int</name></type> <name>offset</name></decl></param>,
                                              <param><decl><type><name>int</name></type> <name>length</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>centralDirectoryData</name> = new <name><name>byte</name><index>[<expr><name>length</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>centralDirectoryData</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>localFileData</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>parseFromLocalFileData</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

}</block></class>
</unit>
