<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\taskdefs\optional\JspcTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildFileTest</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>jsp</name>.<name>Jasper41Mangler</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>jsp</name>.<name>JspMangler</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>jsp</name>.<name>JspNameMangler</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>jsp</name>.<name>compilers</name>.<name>JspCompilerAdapter</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>jsp</name>.<name>compilers</name>.<name>JspCompilerAdapterFactory</name></name>;</import>

<comment type="javadoc">/**
 * Tests the Jspc task.
 *
 * @created 07 March 2002
 * @since Ant 1.5
 */</comment>
<class><specifier>public</specifier> class <name>JspcTest</name> <super><extends>extends <name>BuildFileTest</name></extends></super> <block>{
    <comment type="javadoc">/**
     * Description of the Field
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>baseDir</name></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * Description of the Field
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>outDir</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Description of the Field
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>TASKDEFS_DIR</name> =<init> <expr>"src/etc/testcases/taskdefs/optional/"</expr></init></decl>;</decl_stmt>


    <comment type="javadoc">/**
     * Constructor for the JspcTest object
     *
     * @param name Description of Parameter
     */</comment>
    <constructor><specifier>public</specifier> <name>JspcTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <comment type="javadoc">/**
     * The JUnit setup method
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr><name>TASKDEFS_DIR</name> + "jspc.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>baseDir</name> = new <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TASKDEFS_DIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>outDir</name> = new <call><name>File</name><argument_list>(<argument><expr><name>baseDir</name></expr></argument>, <argument><expr>"jsp/java"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * The teardown method for JUnit
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"cleanup"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * A unit test for JUnit
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testSimple</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeJspCompile</name><argument_list>(<argument><expr>"testSimple"</expr></argument>, <argument><expr>"simple_jsp.java"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * A unit test for JUnit
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testUriroot</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeJspCompile</name><argument_list>(<argument><expr>"testUriroot"</expr></argument>, <argument><expr>"uriroot_jsp.java"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * A unit test for JUnit
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testXml</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeJspCompile</name><argument_list>(<argument><expr>"testXml"</expr></argument>, <argument><expr>"xml_jsp.java"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * try a keyword in a file
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testKeyword</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeJspCompile</name><argument_list>(<argument><expr>"testKeyword"</expr></argument>, <argument><expr>"default_jsp.java"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * what happens to 1nvalid-classname
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testInvalidClassname</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeJspCompile</name><argument_list>(<argument><expr>"testInvalidClassname"</expr></argument>,
                <argument><expr>"_1nvalid_0002dclassname_jsp.java"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * A unit test for JUnit
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNoTld</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
<comment type="line">//         expectBuildExceptionContaining("testNoTld",</comment>
<comment type="line">//                 "Jasper found an error in a file",</comment>
<comment type="line">//                 "Java returned: 9");</comment>
         <expr_stmt><expr><call><name>expectBuildExceptionContaining</name><argument_list>(<argument><expr>"testNoTld"</expr></argument>,
                 <argument><expr>"not found"</expr></argument>,
                 <argument><expr>"Java returned: 9"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * A unit test for JUnit
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNotAJspFile</name><parameter_list>()</parameter_list>  <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testNotAJspFile"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * webapp test is currently broken, because it picks up
     * on the missing_tld file, and bails.
     */</comment>
<comment type="block">/*
    public void testWebapp()  throws Exception {
        executeTarget("testWebapp");
    }
*/</comment>
    <comment type="javadoc">/**
     * run a target then verify the named file gets created
     *
     * @param target Description of Parameter
     * @param javafile Description of Parameter
     * @exception Exception trouble
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>executeJspCompile</name><parameter_list>(<param><decl><type><name>String</name></type> <name>target</name></decl></param>, <param><decl><type><name>String</name></type> <name>javafile</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertJavaFileCreated</name><argument_list>(<argument><expr><name>javafile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * verify that a named file was created
     *
     * @param filename Description of Parameter
     * @exception Exception trouble
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>assertJavaFileCreated</name><parameter_list>(<param><decl><type><name>String</name></type> <name>filename</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>file</name> =<init> <expr><call><name>getOutputFile</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"file " + <name>filename</name> + " not found"</expr></argument>, <argument><expr><call><name><name>file</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"file " + <name>filename</name> + " is empty"</expr></argument>, <argument><expr><call><name><name>file</name>.<name>length</name></name><argument_list>()</argument_list></call> &gt; 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Gets the OutputFile attribute of the JspcTest object
     *
     * @param subpath Description of Parameter
     * @return The OutputFile value
     */</comment>
    <function><type><specifier>protected</specifier> <name>File</name></type> <name>getOutputFile</name><parameter_list>(<param><decl><type><name>String</name></type> <name>subpath</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>new <call><name>File</name><argument_list>(<argument><expr><name>outDir</name></expr></argument>, <argument><expr><name>subpath</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * verify that we select the appropriate mangler
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testJasperNameManglerSelection</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>JspCompilerAdapter</name></type> <name>adapter</name>=<init>
                <expr><call><name><name>JspCompilerAdapterFactory</name>.<name>getCompiler</name></name><argument_list>(<argument><expr>"jasper"</expr></argument>, <argument><expr><name>null</name></expr></argument>,<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>JspMangler</name></type> <name>mangler</name>=<init><expr><call><name><name>adapter</name>.<name>createMangler</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>mangler</name> <name>instanceof</name> <name>JspNameMangler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>adapter</name>= <call><name><name>JspCompilerAdapterFactory</name>.<name>getCompiler</name></name><argument_list>(<argument><expr>"jasper41"</expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mangler</name> = <call><name><name>adapter</name>.<name>createMangler</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>mangler</name> <name>instanceof</name> <name>Jasper41Mangler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testJasper41</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>JspMangler</name></type> <name>mangler</name> =<init> <expr>new <call><name>Jasper41Mangler</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">//java keywords are not special</comment>
        <expr_stmt><expr><call><name>assertMapped</name><argument_list>(<argument><expr><name>mangler</name></expr></argument>, <argument><expr>"for.jsp"</expr></argument>, <argument><expr>"for_jsp"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//underscores go in front of invalid start chars</comment>
        <expr_stmt><expr><call><name>assertMapped</name><argument_list>(<argument><expr><name>mangler</name></expr></argument>, <argument><expr>"0.jsp"</expr></argument>, <argument><expr>"_0_jsp"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//underscores at the front get an underscore too</comment>
        <expr_stmt><expr><call><name>assertMapped</name><argument_list>(<argument><expr><name>mangler</name></expr></argument>, <argument><expr>"_.jsp"</expr></argument>, <argument><expr>"___jsp"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//non java char at start =&gt; underscore then the the _hex value</comment>
        <expr_stmt><expr><call><name>assertMapped</name><argument_list>(<argument><expr><name>mangler</name></expr></argument>, <argument><expr>"-.jsp"</expr></argument>, <argument><expr>"__0002d_jsp"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//and paths are stripped</comment>
        <decl_stmt><decl><type><name>char</name></type> <name>s</name> =<init> <expr><name><name>File</name>.<name>separatorChar</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertMapped</name><argument_list>(<argument><expr><name>mangler</name></expr></argument>, <argument><expr>"" + <name>s</name> + <name>s</name> + "somewhere" + <name>s</name> + "file" + <name>s</name> + "index.jsp"</expr></argument>, <argument><expr>"index_jsp"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * assert our mapping rules
     * @param mangler
     * @param filename
     * @param classname
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>assertMapped</name><parameter_list>(<param><decl><type><name>JspMangler</name></type> <name>mangler</name></decl></param>, <param><decl><type><name>String</name></type> <name>filename</name></decl></param>, <param><decl><type><name>String</name></type> <name>classname</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>mappedname</name> =<init> <expr><call><name><name>mangler</name>.<name>mapJspToJavaName</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>filename</name>+" should have mapped to "+<name>classname</name>
                    +" but instead mapped to "+<name>mappedname</name></expr></argument>,
                    <argument><expr><call><name><name>classname</name>.<name>equals</name></name><argument_list>(<argument><expr><name>mappedname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


}</block></class>

</unit>
