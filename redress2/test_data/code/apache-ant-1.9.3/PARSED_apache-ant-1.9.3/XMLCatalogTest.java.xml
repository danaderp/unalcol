<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\types\XMLCatalogTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>MalformedURLException</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>URL</name></name>;</import>

<import>import <name><name>javax</name>.<name>xml</name>.<name>transform</name>.<name>Source</name></name>;</import>
<import>import <name><name>javax</name>.<name>xml</name>.<name>transform</name>.<name>sax</name>.<name>SAXSource</name></name>;</import>

<import>import <name><name>junit</name>.<name>framework</name>.<name>TestCase</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>JAXPUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>xml</name>.<name>sax</name>.<name>InputSource</name></name>;</import>

<comment type="javadoc">/**
 * JUnit testcases for org.apache.tools.ant.types.XMLCatalog
 *
 */</comment>
<class><specifier>public</specifier> class <name>XMLCatalogTest</name> <super><extends>extends <name>TestCase</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>Project</name></type> <name>project</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>XMLCatalog</name></type> <name>catalog</name></decl>;</decl_stmt>

    <function><type><specifier>private</specifier> <name>XMLCatalog</name></type> <name>newCatalog</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>XMLCatalog</name></type> <name>cat</name> =<init> <expr>new <call><name>XMLCatalog</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>cat</name>.<name>setProject</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>cat</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>toURLString</name><parameter_list>(<param><decl><type><name>File</name></type> <name>file</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>MalformedURLException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name><name>JAXPUtils</name>.<name>getSystemId</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <constructor><specifier>public</specifier> <name>XMLCatalogTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>project</name> = new <call><name>Project</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>setBasedir</name></name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// This causes XMLCatalog to print out detailed logging</comment>
        <comment type="line">// messages for debugging</comment>
        <comment type="line">//</comment>
        <comment type="line">// DefaultLogger logger = new DefaultLogger();</comment>
        <comment type="line">// logger.setMessageOutputLevel(Project.MSG_DEBUG);</comment>
        <comment type="line">// logger.setOutputPrintStream(System.out);</comment>
        <comment type="line">// logger.setErrorPrintStream(System.err);</comment>
        <comment type="line">// project.addBuildListener(logger);</comment>

        <expr_stmt><expr><name>catalog</name> = <call><name>newCatalog</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>project</name> = <name>null</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>catalog</name> = <name>null</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testEmptyCatalog</name><parameter_list>()</parameter_list> <block>{
        <try>try <block>{
            <decl_stmt><decl><type><name>InputSource</name></type> <name>result</name> =<init> <expr><call><name><name>catalog</name>.<name>resolveEntity</name></name><argument_list>(<argument><expr>"PUBLIC ID ONE"</expr></argument>,
                                                       <argument><expr>"i/dont/exist.dtd"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr>"Empty catalog should return null"</expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"resolveEntity() failed!" + <call><name><name>e</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <try>try <block>{
            <decl_stmt><decl><type><name>Source</name></type> <name>result</name> =<init> <expr><call><name><name>catalog</name>.<name>resolve</name></name><argument_list>(<argument><expr>"i/dont/exist.dtd"</expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>expected</name> =<init> <expr><call><name>toURLString</name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>project</name>.<name>getBaseDir</name></name><argument_list>()</argument_list></call> +
                                                   "/i/dont/exist.dtd"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>resultStr</name> =<init>
                <expr><call><name>fileURLPartWithoutLeadingSlashes</name><argument_list>(<argument><expr>(<name>SAXSource</name>)<name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Empty catalog should return input with a system ID like "
                       + <name>expected</name> + " but was " + <name>resultStr</name></expr></argument>,
                       <argument><expr><call><name><name>expected</name>.<name>endsWith</name></name><argument_list>(<argument><expr><name>resultStr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"resolve() failed!" + <call><name><name>e</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>fileURLPartWithoutLeadingSlashes</name><parameter_list>(<param><decl><type><name>SAXSource</name></type> <name>result</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>MalformedURLException</name></expr></argument></throws> <block>{
        <comment type="line">//</comment>
        <comment type="line">// These shenanigans are necessary b/c Norm Walsh's resolver</comment>
        <comment type="line">// has a different idea of how file URLs are created on windoze</comment>
        <comment type="line">// ie file://c:/foo instead of file:///c:/foo</comment>
        <comment type="line">//</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>resultStr</name> =<init>
            <expr>new <call><name>URL</name><argument_list>(<argument><expr><call><name><name>result</name>.<name>getInputSource</name></name><argument_list>()</argument_list></call>.<call><name>getSystemId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>getFile</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// on Sun's Java6 this returns an unexpected number of four</comment>
        <comment type="line">// leading slashes, at least on Linux - strip all of them</comment>
        <while>while <condition>(<expr><call><name><name>resultStr</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"/"</expr></argument>)</argument_list></call></expr>)</condition> <block>{
            <expr_stmt><expr><name>resultStr</name> = <call><name><name>resultStr</name>.<name>substring</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <return>return <expr><name>resultStr</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNonExistentEntry</name><parameter_list>()</parameter_list> <block>{

        <decl_stmt><decl><type><name>ResourceLocation</name></type> <name>dtd</name> =<init> <expr>new <call><name>ResourceLocation</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>dtd</name>.<name>setPublicId</name></name><argument_list>(<argument><expr>"PUBLIC ID ONE"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dtd</name>.<name>setLocation</name></name><argument_list>(<argument><expr>"i/dont/exist.dtd"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <try>try <block>{
            <decl_stmt><decl><type><name>InputSource</name></type> <name>result</name> =<init> <expr><call><name><name>catalog</name>.<name>resolveEntity</name></name><argument_list>(<argument><expr>"PUBLIC ID ONE"</expr></argument>,
                                                       <argument><expr>"i/dont/exist.dtd"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr>"Nonexistent Catalog entry should not be returned"</expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"resolveEntity() failed!" + <call><name><name>e</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <try>try <block>{
            <decl_stmt><decl><type><name>Source</name></type> <name>result</name> =<init> <expr><call><name><name>catalog</name>.<name>resolve</name></name><argument_list>(<argument><expr>"i/dont/exist.dtd"</expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>expected</name> =<init> <expr><call><name>toURLString</name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>project</name>.<name>getBaseDir</name></name><argument_list>()</argument_list></call>.<call><name>toURL</name><argument_list>()</argument_list></call> +
                                                   "/i/dont/exist.dtd"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>resultStr</name> =<init>
                <expr><call><name>fileURLPartWithoutLeadingSlashes</name><argument_list>(<argument><expr>(<name>SAXSource</name>)<name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Nonexistent Catalog entry return input with a system ID like "
                       + <name>expected</name> + " but was " + <name>resultStr</name></expr></argument>,
                       <argument><expr><call><name><name>expected</name>.<name>endsWith</name></name><argument_list>(<argument><expr><name>resultStr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"resolve() failed!" + <call><name><name>e</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testEmptyElementIfIsReference</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>ResourceLocation</name></type> <name>dtd</name> =<init> <expr>new <call><name>ResourceLocation</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>dtd</name>.<name>setPublicId</name></name><argument_list>(<argument><expr>"PUBLIC ID ONE"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dtd</name>.<name>setLocation</name></name><argument_list>(<argument><expr>"i/dont/exist.dtd"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>catalog</name>.<name>addDTD</name></name><argument_list>(<argument><expr><name>dtd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>addReference</name></name><argument_list>(<argument><expr>"catalog"</expr></argument>, <argument><expr><name>catalog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <try>try <block>{
            <expr_stmt><expr><call><name><name>catalog</name>.<name>setRefid</name></name><argument_list>(<argument><expr>new <call><name>Reference</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr>"dummyref"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Can add reference to nonexistent XMLCatalog"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"You must not specify more than one "
                         + "attribute when using refid"</expr></argument>, <argument><expr><call><name><name>be</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <decl_stmt><decl><type><name>XMLCatalog</name></type> <name>catalog2</name> =<init> <expr><call><name>newCatalog</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>catalog2</name>.<name>setRefid</name></name><argument_list>(<argument><expr>new <call><name>Reference</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr>"catalog"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <try>try <block>{
            <expr_stmt><expr><call><name><name>catalog2</name>.<name>addConfiguredXMLCatalog</name></name><argument_list>(<argument><expr><name>catalog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Can add nested XMLCatalog to XMLCatalog that is a reference"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"You must not specify nested elements when using refid"</expr></argument>,
                         <argument><expr><call><name><name>be</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testCircularReferenceCheck</name><parameter_list>()</parameter_list> <block>{

        <comment type="line">// catalog &lt;--&gt; catalog</comment>
        <expr_stmt><expr><call><name><name>project</name>.<name>addReference</name></name><argument_list>(<argument><expr>"catalog"</expr></argument>, <argument><expr><name>catalog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>catalog</name>.<name>setRefid</name></name><argument_list>(<argument><expr>new <call><name>Reference</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr>"catalog"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <try>try <block>{
            <decl_stmt><decl><type><name>InputSource</name></type> <name>result</name> =<init> <expr><call><name><name>catalog</name>.<name>resolveEntity</name></name><argument_list>(<argument><expr>"PUBLIC ID ONE"</expr></argument>,
                                                       <argument><expr>"i/dont/exist.dtd"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Can make XMLCatalog a Reference to itself."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"This data type contains a circular reference."</expr></argument>,
                         <argument><expr><call><name><name>be</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"resolveEntity() failed!" + <call><name><name>e</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <comment type="line">// catalog1 --&gt; catalog2 --&gt; catalog3 --&gt; catalog1</comment>
        <decl_stmt><decl><type><name>XMLCatalog</name></type> <name>catalog1</name> =<init> <expr><call><name>newCatalog</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>addReference</name></name><argument_list>(<argument><expr>"catalog1"</expr></argument>, <argument><expr><name>catalog1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>XMLCatalog</name></type> <name>catalog2</name> =<init> <expr><call><name>newCatalog</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>addReference</name></name><argument_list>(<argument><expr>"catalog2"</expr></argument>, <argument><expr><name>catalog2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>XMLCatalog</name></type> <name>catalog3</name> =<init> <expr><call><name>newCatalog</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>addReference</name></name><argument_list>(<argument><expr>"catalog3"</expr></argument>, <argument><expr><name>catalog3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>catalog3</name>.<name>setRefid</name></name><argument_list>(<argument><expr>new <call><name>Reference</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr>"catalog1"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>catalog2</name>.<name>setRefid</name></name><argument_list>(<argument><expr>new <call><name>Reference</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr>"catalog3"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>catalog1</name>.<name>setRefid</name></name><argument_list>(<argument><expr>new <call><name>Reference</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr>"catalog2"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <try>try <block>{
            <decl_stmt><decl><type><name>InputSource</name></type> <name>result</name> =<init> <expr><call><name><name>catalog1</name>.<name>resolveEntity</name></name><argument_list>(<argument><expr>"PUBLIC ID ONE"</expr></argument>,
                                                        <argument><expr>"i/dont/exist.dtd"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Can make circular reference"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"This data type contains a circular reference."</expr></argument>,
                         <argument><expr><call><name><name>be</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"resolveEntity() failed!" + <call><name><name>e</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>
    <comment type="line">// inspired by Bugzilla Report 23913</comment>
    <comment type="line">// a problem used to happen under Windows when the location of the DTD was given as an absolute path</comment>
    <comment type="line">// possibly with a mixture of file separators</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testAbsolutePath</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>ResourceLocation</name></type> <name>dtd</name> =<init> <expr>new <call><name>ResourceLocation</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>dtd</name>.<name>setPublicId</name></name><argument_list>(<argument><expr>"-//stevo//DTD doc 1.0//EN"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>sysid</name> =<init> <expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call> + <name><name>File</name>.<name>separator</name></name> + "src/etc/testcases/taskdefs/optional/xml/doc.dtd"</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>dtd</name>.<name>setLocation</name></name><argument_list>(<argument><expr><name>sysid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>catalog</name>.<name>addDTD</name></name><argument_list>(<argument><expr><name>dtd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>dtdFile</name> =<init> <expr><call><name><name>project</name>.<name>resolveFile</name></name><argument_list>(<argument><expr><name>sysid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <try>try <block>{
            <decl_stmt><decl><type><name>InputSource</name></type> <name>result</name> =<init> <expr><call><name><name>catalog</name>.<name>resolveEntity</name></name><argument_list>(<argument><expr>"-//stevo//DTD doc 1.0//EN"</expr></argument>,
                                                       <argument><expr>"nap:chemical+brothers"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>toURLString</name><argument_list>(<argument><expr><name>dtdFile</name></expr></argument>)</argument_list></call></expr></argument>,
                         <argument><expr><call><name><name>result</name>.<name>getSystemId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"resolveEntity() failed!" + <call><name><name>e</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testSimpleEntry</name><parameter_list>()</parameter_list> <block>{

        <decl_stmt><decl><type><name>ResourceLocation</name></type> <name>dtd</name> =<init> <expr>new <call><name>ResourceLocation</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>dtd</name>.<name>setPublicId</name></name><argument_list>(<argument><expr>"-//stevo//DTD doc 1.0//EN"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>sysid</name> =<init> <expr>"src/etc/testcases/taskdefs/optional/xml/doc.dtd"</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>dtd</name>.<name>setLocation</name></name><argument_list>(<argument><expr><name>sysid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>catalog</name>.<name>addDTD</name></name><argument_list>(<argument><expr><name>dtd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>dtdFile</name> =<init> <expr><call><name><name>project</name>.<name>resolveFile</name></name><argument_list>(<argument><expr><name>sysid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <try>try <block>{
            <decl_stmt><decl><type><name>InputSource</name></type> <name>result</name> =<init> <expr><call><name><name>catalog</name>.<name>resolveEntity</name></name><argument_list>(<argument><expr>"-//stevo//DTD doc 1.0//EN"</expr></argument>,
                                                       <argument><expr>"nap:chemical+brothers"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>toURLString</name><argument_list>(<argument><expr><name>dtdFile</name></expr></argument>)</argument_list></call></expr></argument>,
                         <argument><expr><call><name><name>result</name>.<name>getSystemId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"resolveEntity() failed!" + <call><name><name>e</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testEntryReference</name><parameter_list>()</parameter_list> <block>{

        <decl_stmt><decl><type><name>String</name></type> <name>publicId</name> =<init> <expr>"-//stevo//DTD doc 1.0//EN"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>sysid</name> =<init> <expr>"src/etc/testcases/taskdefs/optional/xml/doc.dtd"</expr></init></decl>;</decl_stmt>

        <comment type="line">// catalog2 --&gt; catalog1 --&gt; catalog</comment>
        <decl_stmt><decl><type><name>ResourceLocation</name></type> <name>dtd</name> =<init> <expr>new <call><name>ResourceLocation</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>dtd</name>.<name>setPublicId</name></name><argument_list>(<argument><expr><name>publicId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dtd</name>.<name>setLocation</name></name><argument_list>(<argument><expr><name>sysid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>catalog</name>.<name>addDTD</name></name><argument_list>(<argument><expr><name>dtd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>dtdFile</name> =<init> <expr><call><name><name>project</name>.<name>resolveFile</name></name><argument_list>(<argument><expr><name>sysid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>uri</name> =<init> <expr>"http://foo.com/bar/blah.xml"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>uriLoc</name> =<init> <expr>"src/etc/testcases/taskdefs/optional/xml/about.xml"</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>ResourceLocation</name></type> <name>entity</name> =<init> <expr>new <call><name>ResourceLocation</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>entity</name>.<name>setPublicId</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>entity</name>.<name>setLocation</name></name><argument_list>(<argument><expr><name>uriLoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>catalog</name>.<name>addEntity</name></name><argument_list>(<argument><expr><name>entity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>xmlFile</name> =<init> <expr><call><name><name>project</name>.<name>resolveFile</name></name><argument_list>(<argument><expr><name>uriLoc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>project</name>.<name>addReference</name></name><argument_list>(<argument><expr>"catalog"</expr></argument>, <argument><expr><name>catalog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>XMLCatalog</name></type> <name>catalog1</name> =<init> <expr><call><name>newCatalog</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>addReference</name></name><argument_list>(<argument><expr>"catalog1"</expr></argument>, <argument><expr><name>catalog1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>XMLCatalog</name></type> <name>catalog2</name> =<init> <expr><call><name>newCatalog</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>addReference</name></name><argument_list>(<argument><expr>"catalog2"</expr></argument>, <argument><expr><name>catalog1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>catalog1</name>.<name>setRefid</name></name><argument_list>(<argument><expr>new <call><name>Reference</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr>"catalog"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>catalog2</name>.<name>setRefid</name></name><argument_list>(<argument><expr>new <call><name>Reference</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr>"catalog1"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <try>try <block>{
            <decl_stmt><decl><type><name>InputSource</name></type> <name>result</name> =<init> <expr><call><name><name>catalog2</name>.<name>resolveEntity</name></name><argument_list>(<argument><expr><name>publicId</name></expr></argument>,
                                                        <argument><expr>"nap:chemical+brothers"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>toURLString</name><argument_list>(<argument><expr><name>dtdFile</name></expr></argument>)</argument_list></call></expr></argument>,
                         <argument><expr><call><name><name>result</name>.<name>getSystemId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"resolveEntity() failed!" + <call><name><name>e</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <try>try <block>{
            <decl_stmt><decl><type><name>Source</name></type> <name>result</name> =<init> <expr><call><name><name>catalog</name>.<name>resolve</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>toURLString</name><argument_list>(<argument><expr><name>xmlFile</name></expr></argument>)</argument_list></call></expr></argument>,
                         <argument><expr><call><name><name>result</name>.<name>getSystemId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"resolve() failed!" + <call><name><name>e</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNestedCatalog</name><parameter_list>()</parameter_list> <block>{

        <decl_stmt><decl><type><name>String</name></type> <name>publicId</name> =<init> <expr>"-//stevo//DTD doc 1.0//EN"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>dtdLoc</name> =<init> <expr>"src/etc/testcases/taskdefs/optional/xml/doc.dtd"</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>ResourceLocation</name></type> <name>dtd</name> =<init> <expr>new <call><name>ResourceLocation</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>dtd</name>.<name>setPublicId</name></name><argument_list>(<argument><expr><name>publicId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dtd</name>.<name>setLocation</name></name><argument_list>(<argument><expr><name>dtdLoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>catalog</name>.<name>addDTD</name></name><argument_list>(<argument><expr><name>dtd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>dtdFile</name> =<init> <expr><call><name><name>project</name>.<name>resolveFile</name></name><argument_list>(<argument><expr><name>dtdLoc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>uri</name> =<init> <expr>"http://foo.com/bar/blah.xml"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>uriLoc</name> =<init> <expr>"src/etc/testcases/taskdefs/optional/xml/about.xml"</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>ResourceLocation</name></type> <name>entity</name> =<init> <expr>new <call><name>ResourceLocation</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>entity</name>.<name>setPublicId</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>entity</name>.<name>setLocation</name></name><argument_list>(<argument><expr><name>uriLoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>catalog</name>.<name>addEntity</name></name><argument_list>(<argument><expr><name>entity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>xmlFile</name> =<init> <expr><call><name><name>project</name>.<name>resolveFile</name></name><argument_list>(<argument><expr><name>uriLoc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>XMLCatalog</name></type> <name>catalog1</name> =<init> <expr><call><name>newCatalog</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>catalog1</name>.<name>addConfiguredXMLCatalog</name></name><argument_list>(<argument><expr><name>catalog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <try>try <block>{
            <decl_stmt><decl><type><name>InputSource</name></type> <name>result</name> =<init> <expr><call><name><name>catalog1</name>.<name>resolveEntity</name></name><argument_list>(<argument><expr><name>publicId</name></expr></argument>,
                                                        <argument><expr>"nap:chemical+brothers"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>toURLString</name><argument_list>(<argument><expr><name>dtdFile</name></expr></argument>)</argument_list></call></expr></argument>,
                         <argument><expr><call><name><name>result</name>.<name>getSystemId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"resolveEntity() failed!" + <call><name><name>e</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <try>try <block>{
            <decl_stmt><decl><type><name>Source</name></type> <name>result</name> =<init> <expr><call><name><name>catalog</name>.<name>resolve</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>toURLString</name><argument_list>(<argument><expr><name>xmlFile</name></expr></argument>)</argument_list></call></expr></argument>,
                         <argument><expr><call><name><name>result</name>.<name>getSystemId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"resolve() failed!" + <call><name><name>e</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testResolverBase</name><parameter_list>()</parameter_list> <block>{

        <decl_stmt><decl><type><name>String</name></type> <name>uri</name> =<init> <expr>"http://foo.com/bar/blah.xml"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>uriLoc</name> =<init> <expr>"etc/testcases/taskdefs/optional/xml/about.xml"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>base</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>base</name> = <call><name>toURLString</name><argument_list>(<argument><expr><call><name><name>project</name>.<name>getBaseDir</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> + "/src/"</expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>MalformedURLException</name></type> <name>ex</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>fail</name> <argument_list>(<argument><expr><call><name><name>ex</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <decl_stmt><decl><type><name>ResourceLocation</name></type> <name>entity</name> =<init> <expr>new <call><name>ResourceLocation</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>entity</name>.<name>setPublicId</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>entity</name>.<name>setLocation</name></name><argument_list>(<argument><expr><name>uriLoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>catalog</name>.<name>addEntity</name></name><argument_list>(<argument><expr><name>entity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>xmlFile</name> =<init> <expr><call><name><name>project</name>.<name>resolveFile</name></name><argument_list>(<argument><expr>"src/" + <name>uriLoc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <try>try <block>{
            <decl_stmt><decl><type><name>Source</name></type> <name>result</name> =<init> <expr><call><name><name>catalog</name>.<name>resolve</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>toURLString</name><argument_list>(<argument><expr><name>xmlFile</name></expr></argument>)</argument_list></call></expr></argument>,
                         <argument><expr><call><name><name>result</name>.<name>getSystemId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"resolve() failed!" + <call><name><name>e</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testClasspath</name><parameter_list>()</parameter_list> <block>{


        <decl_stmt><decl><type><name>String</name></type> <name>publicId</name> =<init> <expr>"-//stevo//DTD doc 1.0//EN"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>dtdLoc</name> =<init> <expr>"testcases/taskdefs/optional/xml/doc.dtd"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>path1</name> =<init> <expr><call><name><name>project</name>.<name>getBaseDir</name></name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call> + "/src/etc"</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>ResourceLocation</name></type> <name>dtd</name> =<init> <expr>new <call><name>ResourceLocation</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>dtd</name>.<name>setPublicId</name></name><argument_list>(<argument><expr><name>publicId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dtd</name>.<name>setLocation</name></name><argument_list>(<argument><expr><name>dtdLoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>catalog</name>.<name>addDTD</name></name><argument_list>(<argument><expr><name>dtd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>dtdFile</name> =<init> <expr><call><name><name>project</name>.<name>resolveFile</name></name><argument_list>(<argument><expr>"src/etc/" + <name>dtdLoc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>uri</name> =<init> <expr>"http://foo.com/bar/blah.xml"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>uriLoc</name> =<init> <expr>"etc/testcases/taskdefs/optional/xml/about.xml"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>path2</name> =<init> <expr><call><name><name>project</name>.<name>getBaseDir</name></name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call> + "/src"</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>ResourceLocation</name></type> <name>entity</name> =<init> <expr>new <call><name>ResourceLocation</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>entity</name>.<name>setPublicId</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>entity</name>.<name>setLocation</name></name><argument_list>(<argument><expr><name>uriLoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>catalog</name>.<name>addEntity</name></name><argument_list>(<argument><expr><name>entity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>xmlFile</name> =<init> <expr><call><name><name>project</name>.<name>resolveFile</name></name><argument_list>(<argument><expr>"src/" + <name>uriLoc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Path</name></type> <name>aPath</name> =<init> <expr>new <call><name>Path</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr><name>path1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>aPath</name>.<name>append</name></name><argument_list>(<argument><expr>new <call><name>Path</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr><name>path2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>catalog</name>.<name>setClasspath</name></name><argument_list>(<argument><expr><name>aPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <try>try <block>{
            <decl_stmt><decl><type><name>InputSource</name></type> <name>result</name> =<init> <expr><call><name><name>catalog</name>.<name>resolveEntity</name></name><argument_list>(<argument><expr><name>publicId</name></expr></argument>,
                                                       <argument><expr>"nap:chemical+brothers"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>resultStr</name> =<init> <expr>new <call><name>URL</name><argument_list>(<argument><expr><call><name><name>result</name>.<name>getSystemId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>getFile</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name>toURLString</name><argument_list>(<argument><expr><name>dtdFile</name></expr></argument>)</argument_list></call>.<call><name>endsWith</name><argument_list>(<argument><expr><name>resultStr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"resolveEntity() failed!" + <call><name><name>e</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <try>try <block>{
            <decl_stmt><decl><type><name>Source</name></type> <name>result</name> =<init> <expr><call><name><name>catalog</name>.<name>resolve</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>resultStr</name> =<init> <expr>new <call><name>URL</name><argument_list>(<argument><expr><call><name><name>result</name>.<name>getSystemId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>getFile</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name>toURLString</name><argument_list>(<argument><expr><name>xmlFile</name></expr></argument>)</argument_list></call>.<call><name>endsWith</name><argument_list>(<argument><expr><name>resultStr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"resolve() failed!" + <call><name><name>e</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>
}</block></class>
</unit>
