<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\Chmod.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>condition</name>.<name>Os</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Commandline</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>FileSet</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>PatternSet</name></name>;</import>

<comment type="javadoc">/**
 * Chmod equivalent for unix-like environments.
 *
 * @since Ant 1.1
 *
 * @ant.task category="filesystem"
 * @todo Refactor so it does not extend from ExecuteOn and then turn around
 *       and unsupport several attributes.
 */</comment>
<class><specifier>public</specifier> class <name>Chmod</name> <super><extends>extends <name>ExecuteOn</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>FileSet</name></type> <name>defaultSet</name> =<init> <expr>new <call><name>FileSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>defaultSetDefined</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>havePerm</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Chmod task for setting file and directory permissions.
     */</comment>
    <constructor><specifier>public</specifier> <name>Chmod</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name>.<name>setExecutable</name></name><argument_list>(<argument><expr>"chmod"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name>.<name>setParallel</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name>.<name>setSkipEmptyFilesets</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Set the project of this task.
     * Calls the super class and sets the project on dhe default FileSet.
     * @param project the project for this task.
     * @see org.apache.tools.ant.ProjectComponent#setProject
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setProject</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name>.<name>setProject</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>defaultSet</name>.<name>setProject</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The file or single directory of which the permissions must be changed.
     * @param src the source file or directory.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>src</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>FileSet</name></type> <name>fs</name> =<init> <expr>new <call><name>FileSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>fs</name>.<name>setFile</name></name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addFileset</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The directory which holds the files whose permissions must be changed.
     * @param src the directory.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDir</name><parameter_list>(<param><decl><type><name>File</name></type> <name>src</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>defaultSet</name>.<name>setDir</name></name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the new permissions.
     * @param perm the new permissions.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPerm</name><parameter_list>(<param><decl><type><name>String</name></type> <name>perm</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>createArg</name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>havePerm</name> = true</expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a name entry on the include list.
     * @return a NameEntry to be configured.
     */</comment>
    <function><type><specifier>public</specifier> <name><name>PatternSet</name>.<name>NameEntry</name></name></type> <name>createInclude</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>defaultSetDefined</name> = true</expr>;</expr_stmt>
        <return>return <expr><call><name><name>defaultSet</name>.<name>createInclude</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Add a name entry on the exclude list.
     * @return a nameentry to be configured.
     */</comment>
    <function><type><specifier>public</specifier> <name><name>PatternSet</name>.<name>NameEntry</name></name></type> <name>createExclude</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>defaultSetDefined</name> = true</expr>;</expr_stmt>
        <return>return <expr><call><name><name>defaultSet</name>.<name>createExclude</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Add a set of patterns.
     * @return a patternset to be configured.
     */</comment>
    <function><type><specifier>public</specifier> <name>PatternSet</name></type> <name>createPatternSet</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>defaultSetDefined</name> = true</expr>;</expr_stmt>
        <return>return <expr><call><name><name>defaultSet</name>.<name>createPatternSet</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the set of include patterns. Patterns may be separated by a comma
     * or a space.
     *
     * @param includes the string containing the include patterns.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setIncludes</name><parameter_list>(<param><decl><type><name>String</name></type> <name>includes</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>defaultSetDefined</name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>defaultSet</name>.<name>setIncludes</name></name><argument_list>(<argument><expr><name>includes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the set of exclude patterns. Patterns may be separated by a comma
     * or a space.
     *
     * @param excludes the string containing the exclude patterns.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setExcludes</name><parameter_list>(<param><decl><type><name>String</name></type> <name>excludes</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>defaultSetDefined</name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>defaultSet</name>.<name>setExcludes</name></name><argument_list>(<argument><expr><name>excludes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets whether default exclusions should be used or not.
     *
     * @param useDefaultExcludes "true"|"on"|"yes" when default exclusions
     *                           should be used, "false"|"off"|"no" when they
     *                           shouldn't be used.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDefaultexcludes</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>useDefaultExcludes</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>defaultSetDefined</name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>defaultSet</name>.<name>setDefaultexcludes</name></name><argument_list>(<argument><expr><name>useDefaultExcludes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Check the attributes and nested elements.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>checkConfiguration</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr>!<name>havePerm</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Required attribute perm not set in chmod"</expr></argument>,
                                     <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr><name>defaultSetDefined</name> &amp;&amp; <call><name><name>defaultSet</name>.<name>getDir</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>addFileset</name><argument_list>(<argument><expr><name>defaultSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>super</name>.<name>checkConfiguration</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Carry out the chmoding.
     * @throws BuildException on error.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <comment type="block">/*
         * In Ant 1.1, &lt;chmod dir="foo" /&gt; means, change the permissions
         * of directory foo, not anything inside of it.  This is the case the
         * second branch of the if statement below catches for backwards
         * compatibility.
         */</comment>
        <if>if <condition>(<expr><name>defaultSetDefined</name> || <call><name><name>defaultSet</name>.<name>getDir</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
            <try>try <block>{
                <expr_stmt><expr><call><name><name>super</name>.<name>execute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block> <finally>finally <block>{
                <if>if <condition>(<expr><name>defaultSetDefined</name> &amp;&amp; <call><name><name>defaultSet</name>.<name>getDir</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>filesets</name>.<name>removeElement</name></name><argument_list>(<argument><expr><name>defaultSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></finally></try>
        }</block></then> <else>else <if>if <condition>(<expr><call><name>isValidOs</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">// we are chmodding the given directory</comment>
            <decl_stmt><decl><type><name>Execute</name></type> <name>execute</name> =<init> <expr><call><name>prepareExec</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Commandline</name></type> <name>cloned</name> =<init> <expr>(<name>Commandline</name>) <call><name><name>cmdl</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>cloned</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name><name>defaultSet</name>.<name>getDir</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                                             .<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <try>try <block>{
                <expr_stmt><expr><call><name><name>execute</name>.<name>setCommandline</name></name><argument_list>(<argument><expr><call><name><name>cloned</name>.<name>getCommandline</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>runExecute</name><argument_list>(<argument><expr><name>execute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Execute failed: " + <name>e</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch> <finally>finally <block>{
                <comment type="line">// close the output file if required</comment>
                <expr_stmt><expr><call><name>logFlush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></finally></try>
        }</block></then></if></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Set the executable.
     * This is not allowed for Chmod.
     * @param e ignored.
     * @throws BuildException always.
     * @ant.attribute ignore="true"
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setExecutable</name><parameter_list>(<param><decl><type><name>String</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
        <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><call><name>getTaskType</name><argument_list>()</argument_list></call>
            + " doesn\'t support the executable attribute"</expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>

    <comment type="javadoc">/**
     * Set the command.
     * This is not allowed for Chmod.
     * @param cmdl ignored.
     * @throws BuildException always.
     * @ant.attribute ignore="true"
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCommand</name><parameter_list>(<param><decl><type><name>Commandline</name></type> <name>cmdl</name></decl></param>)</parameter_list> <block>{
        <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><call><name>getTaskType</name><argument_list>()</argument_list></call>
            + " doesn\'t support the command attribute"</expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>

    <comment type="javadoc">/**
     * This is not allowed for Chmod.
     * @param skip ignored.
     * @throws BuildException always.
     * @ant.attribute ignore="true"
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSkipEmptyFilesets</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>skip</name></decl></param>)</parameter_list> <block>{
        <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><call><name>getTaskType</name><argument_list>()</argument_list></call>
            + " doesn\'t support the skipemptyfileset attribute"</expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>

    <comment type="javadoc">/**
     * This is not allowed for Chmod.
     * @param b ignored.
     * @throws BuildException always.
     * @ant.attribute ignore="true"
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAddsourcefile</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><call><name>getTaskType</name><argument_list>()</argument_list></call>
            + " doesn\'t support the addsourcefile attribute"</expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>

    <comment type="javadoc">/**
     * Check if the os is valid.
     * Always include unix.
     * @return true if the os is valid.
     */</comment>
    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>isValidOs</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getOs</name><argument_list>()</argument_list></call> == <name>null</name> &amp;&amp; <call><name>getOsFamily</name><argument_list>()</argument_list></call> == <name>null</name>
            ? <call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr><name><name>Os</name>.<name>FAMILY_UNIX</name></name></expr></argument>)</argument_list></call> : <call><name><name>super</name>.<name>isValidOs</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
