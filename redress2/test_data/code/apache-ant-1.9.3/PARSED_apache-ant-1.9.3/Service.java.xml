<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\types\spi\Service.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>spi</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>ByteArrayInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ByteArrayOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>OutputStreamWriter</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Writer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>ProjectComponent</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>

<comment type="javadoc">/**
 * ANT Jar-Task SPI extension
 *
 * @see &lt;a href="http://issues.apache.org/bugzilla/show_bug.cgi?id=31520"&gt;
 * http://issues.apache.org/bugzilla/show_bug.cgi?id=31520&lt;/a&gt;
 */</comment>
<class><specifier>public</specifier> class <name>Service</name> <super><extends>extends <name>ProjectComponent</name></extends></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>List</name><argument_list>&lt;<argument><name>Provider</name></argument>&gt;</argument_list></name></type> <name>providerList</name> =<init> <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>Provider</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>type</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Set the provider classname.
     * @param className the classname of a provider of this service.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setProvider</name><parameter_list>(<param><decl><type><name>String</name></type> <name>className</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Provider</name></type> <name>provider</name> =<init> <expr>new <call><name>Provider</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>provider</name>.<name>setClassName</name></name><argument_list>(<argument><expr><name>className</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>providerList</name>.<name>add</name></name><argument_list>(<argument><expr><name>provider</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a nested provider element.
     * @param provider a provider element.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addConfiguredProvider</name><parameter_list>(<param><decl><type><name>Provider</name></type> <name>provider</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>provider</name>.<name>check</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>providerList</name>.<name>add</name></name><argument_list>(<argument><expr><name>provider</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * @return the service type.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getType</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>type</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the service type.
     * @param type the service type, a classname of
     *             an interface or a class (normally
     *             abstract).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setType</name><parameter_list>(<param><decl><type><name>String</name></type> <name>type</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>type</name></name> = <name>type</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Return the implementations of this
     * services as an inputstream.
     * @return an inputstream of the classname names
     *         encoded as UTF-8.
     * @throws IOException if there is an error.
     */</comment>
    <function><type><specifier>public</specifier> <name>InputStream</name></type> <name>getAsStream</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>arrayOut</name> =<init> <expr>new <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Writer</name></type> <name>writer</name> =<init> <expr>new <call><name>OutputStreamWriter</name><argument_list>(<argument><expr><name>arrayOut</name></expr></argument>, <argument><expr>"UTF-8"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>Provider</name></type> <name>provider</name> :<range> <expr><name>providerList</name></expr></range></decl></init>) <block>{
            <expr_stmt><expr><call><name><name>writer</name>.<name>write</name></name><argument_list>(<argument><expr><call><name><name>provider</name>.<name>getClassName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>writer</name>.<name>write</name></name><argument_list>(<argument><expr>"\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name><name>writer</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>new <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><call><name><name>arrayOut</name>.<name>toByteArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Check if this object is configured correctly as a nested
     * element.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>check</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>type</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                <argument><expr>"type attribute must be set for service element"</expr></argument>,
                <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>type</name>.<name>length</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                <argument><expr>"Invalid empty type classname"</expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>providerList</name>.<name>size</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                <argument><expr>"provider attribute or nested provider element must be set!"</expr></argument>,
                <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
    }</block></function>
}</block></class>
</unit>
