<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\ProjectHelperRepositoryTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>

<import>import <name><name>junit</name>.<name>framework</name>.<name>TestCase</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>helper</name>.<name>ProjectHelper2</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Resource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>FileResource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>StringResource</name></name>;</import>

<comment type="javadoc">/**
 * Testing around the management of the project helpers
 */</comment>
<class><specifier>public</specifier> class <name>ProjectHelperRepositoryTest</name> <super><extends>extends <name>TestCase</name></extends></super> <block>{

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>SomeHelper</name> <super><extends>extends <name>ProjectHelper</name></extends></super> <block>{
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>canParseBuildFile</name><parameter_list>(<param><decl><type><name>Resource</name></type> <name>buildFile</name></decl></param>)</parameter_list> <block>{
            <return>return <expr><name>buildFile</name> <name>instanceof</name> <name>FileResource</name>
                    &amp;&amp; <call><name><name>buildFile</name>.<name>getName</name></name><argument_list>()</argument_list></call>.<call><name>endsWith</name><argument_list>(<argument><expr>".myext"</expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>canParseAntlibDescriptor</name><parameter_list>(<param><decl><type><name>Resource</name></type> <name>r</name></decl></param>)</parameter_list> <block>{
            <return>return <expr><name>r</name> <name>instanceof</name> <name>FileResource</name> &amp;&amp; <call><name><name>r</name>.<name>getName</name></name><argument_list>()</argument_list></call>.<call><name>endsWith</name><argument_list>(<argument><expr>".myext"</expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFind</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>ProjectHelperRepository</name></type> <name>repo</name> =<init> <expr><call><name><name>ProjectHelperRepository</name>.<name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>repo</name>.<name>registerProjectHelper</name></name><argument_list>(<argument><expr><name><name>SomeHelper</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Resource</name></type> <name>r</name> =<init> <expr>new <call><name>FileResource</name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr>"test.xml"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ProjectHelper</name></type> <name>helper</name> =<init> <expr><call><name><name>repo</name>.<name>getProjectHelperForBuildFile</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>helper</name> <name>instanceof</name> <name>ProjectHelper2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>helper</name> = <call><name><name>repo</name>.<name>getProjectHelperForAntlib</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>helper</name> <name>instanceof</name> <name>ProjectHelper2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>r</name> = new <call><name>FileResource</name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr>"test.myext"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>helper</name> = <call><name><name>repo</name>.<name>getProjectHelperForBuildFile</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>helper</name> <name>instanceof</name> <name>SomeHelper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>helper</name> = <call><name><name>repo</name>.<name>getProjectHelperForAntlib</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>helper</name> <name>instanceof</name> <name>SomeHelper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>r</name> = new <call><name>StringResource</name><argument_list>(<argument><expr>"test.myext"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>helper</name> = <call><name><name>repo</name>.<name>getProjectHelperForBuildFile</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>helper</name> <name>instanceof</name> <name>ProjectHelper2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>helper</name> = <call><name><name>repo</name>.<name>getProjectHelperForAntlib</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>helper</name> <name>instanceof</name> <name>ProjectHelper2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>r</name> = new <call><name>StringResource</name><argument_list>(<argument><expr>"test.other"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>helper</name> = <call><name><name>repo</name>.<name>getProjectHelperForBuildFile</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>helper</name> <name>instanceof</name> <name>ProjectHelper2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>helper</name> = <call><name><name>repo</name>.<name>getProjectHelperForAntlib</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>helper</name> <name>instanceof</name> <name>ProjectHelper2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNoDefaultContructor</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <class>class <name>IncrrectHelper</name> <super><extends>extends <name>ProjectHelper</name></extends></super> <block>{
            <comment type="line">// the default constructor is not visible to ant here </comment>
        }</block></class>

        <decl_stmt><decl><type><name>ProjectHelperRepository</name></type> <name>repo</name> =<init> <expr><call><name><name>ProjectHelperRepository</name>.<name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>repo</name>.<name>registerProjectHelper</name></name><argument_list>(<argument><expr><name><name>IncrrectHelper</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Registring an helper with no default constructor should fail"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>e</name></decl></param>) <block>{
            <comment type="line">// ok</comment>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testUnkwnowHelper</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>ProjectHelperRepository</name></type> <name>repo</name> =<init> <expr><call><name><name>ProjectHelperRepository</name>.<name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>repo</name>.<name>registerProjectHelper</name></name><argument_list>(<argument><expr>"xxx.yyy.zzz.UnknownHelper"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Registring an unknwon helper should fail"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>e</name></decl></param>) <block>{
            <comment type="line">// ok</comment>
        }</block></catch></try>
    }</block></function>
}</block></class>
</unit>
