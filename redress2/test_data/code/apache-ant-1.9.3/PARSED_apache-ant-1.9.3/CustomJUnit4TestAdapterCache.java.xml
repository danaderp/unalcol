<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\junit\CustomJUnit4TestAdapterCache.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>junit</name></name>;</package>

<import>import <name><name>junit</name>.<name>framework</name>.<name>JUnit4TestAdapter</name></name>;</import>
<import>import <name><name>junit</name>.<name>framework</name>.<name>JUnit4TestAdapterCache</name></name>;</import>
<import>import <name><name>junit</name>.<name>framework</name>.<name>TestResult</name></name>;</import>
<import>import <name><name>org</name>.<name>junit</name>.<name>runner</name>.<name>Description</name></name>;</import>
<import>import <name><name>org</name>.<name>junit</name>.<name>runner</name>.<name>notification</name>.<name>Failure</name></name>;</import>
<import>import <name><name>org</name>.<name>junit</name>.<name>runner</name>.<name>notification</name>.<name>RunListener</name></name>;</import>
<import>import <name><name>org</name>.<name>junit</name>.<name>runner</name>.<name>notification</name>.<name>RunNotifier</name></name>;</import>

<comment type="javadoc">/**
 * Provides a custom implementation of the notifier for a JUnit4TestAdapter
 * so that skipped and ignored tests can be reported to the existing
 * &lt;tt&gt;TestListener&lt;/tt&gt;s.
 *
 */</comment>
<class><specifier>public</specifier> class <name>CustomJUnit4TestAdapterCache</name> <super><extends>extends <name>JUnit4TestAdapterCache</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>CustomJUnit4TestAdapterCache</name></type> <name>INSTANCE</name> =<init> <expr>new <call><name>CustomJUnit4TestAdapterCache</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>CustomJUnit4TestAdapterCache</name></type> <name>getInstance</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>INSTANCE</name></expr>;</return>
    }</block></function>

    <constructor><specifier>private</specifier> <name>CustomJUnit4TestAdapterCache</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>RunNotifier</name></type> <name>getNotifier</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>TestResult</name></type> <name>result</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>JUnit4TestAdapter</name></type> <name>adapter</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>getNotifier</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>RunNotifier</name></type> <name>getNotifier</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>TestResult</name></type> <name>result</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><specifier>final</specifier> <name>IgnoredTestResult</name></type> <name>resultWrapper</name> =<init> <expr>(<name>IgnoredTestResult</name>) <name>result</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>RunNotifier</name></type> <name>notifier</name> =<init> <expr>new <call><name>RunNotifier</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>notifier</name>.<name>addListener</name></name><argument_list>(<argument><expr>new <class><super><name>RunListener</name></super><argument_list>()</argument_list> <block>{
            <function><type><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <name>void</name></type> <name>testFailure</name><parameter_list>(<param><decl><type><name>Failure</name></type> <name>failure</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
                <expr_stmt><expr><call><name><name>result</name>.<name>addError</name></name><argument_list>(<argument><expr><call><name>asTest</name><argument_list>(<argument><expr><call><name><name>failure</name>.<name>getDescription</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>failure</name>.<name>getException</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>

            <function><type><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <name>void</name></type> <name>testFinished</name><parameter_list>(<param><decl><type><name>Description</name></type> <name>description</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
                <expr_stmt><expr><call><name><name>result</name>.<name>endTest</name></name><argument_list>(<argument><expr><call><name>asTest</name><argument_list>(<argument><expr><name>description</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>

            <function><type><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <name>void</name></type> <name>testStarted</name><parameter_list>(<param><decl><type><name>Description</name></type> <name>description</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
                <expr_stmt><expr><call><name><name>result</name>.<name>startTest</name></name><argument_list>(<argument><expr><call><name>asTest</name><argument_list>(<argument><expr><name>description</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>

            <function><type><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <name>void</name></type> <name>testIgnored</name><parameter_list>(<param><decl><type><name>Description</name></type> <name>description</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
                <if>if <condition>(<expr><name>resultWrapper</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>resultWrapper</name>.<name>testIgnored</name></name><argument_list>(<argument><expr><call><name>asTest</name><argument_list>(<argument><expr><name>description</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></function>

            <function><type><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <name>void</name></type> <name>testAssumptionFailure</name><parameter_list>(<param><decl><type><name>Failure</name></type> <name>failure</name></decl></param>)</parameter_list> <block>{
                <if>if <condition>(<expr><name>resultWrapper</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>resultWrapper</name>.<name>testAssumptionFailure</name></name><argument_list>(<argument><expr><call><name>asTest</name><argument_list>(<argument><expr><call><name><name>failure</name>.<name>getDescription</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>failure</name>.<name>getException</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>notifier</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
