<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\types\Description.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>ProjectHelper</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>helper</name>.<name>ProjectHelper2</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>UnknownElement</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Target</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>helper</name>.<name>ProjectHelperImpl</name></name>;</import>

<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>


<comment type="javadoc">/**
 * Description is used to provide a project-wide description element
 * (that is, a description that applies to a buildfile as a whole).
 * If present, the &amp;lt;description&amp;gt; element is printed out before the
 * target descriptions.
 *
 * Description has no attributes, only text.  There can only be one
 * project description per project.  A second description element will
 * overwrite the first.
 *
 *
 * @ant.datatype ignore="true"
 */</comment>
<class><specifier>public</specifier> class <name>Description</name> <super><extends>extends <name>DataType</name></extends></super> <block>{

    <comment type="javadoc">/**
     * Adds descriptive text to the project.
     *
     * @param text the descriptive text
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addText</name><parameter_list>(<param><decl><type><name>String</name></type> <name>text</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>ProjectHelper</name></type> <name>ph</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getReference</name><argument_list>(<argument><expr><name><name>ProjectHelper</name>.<name>PROJECTHELPER_REFERENCE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!(<name>ph</name> <name>instanceof</name> <name>ProjectHelperImpl</name>)</expr>)</condition><then> <block>{
            <comment type="line">// New behavior for delayed task creation. Description</comment>
            <comment type="line">// will be evaluated in Project.getDescription()</comment>
            <return>return;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>String</name></type> <name>currentDescription</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getDescription</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>currentDescription</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>setDescription</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>setDescription</name><argument_list>(<argument><expr><name>currentDescription</name> + <name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Return the descriptions from all the targets of
     * a project.
     *
     * @param project the project to get the descriptions for.
     * @return a string containing the concatenated descriptions of
     *         the targets.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getDescription</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>Target</name></argument>&gt;</argument_list></name></type> <name>targets</name> =<init> <expr><call><name><name>project</name>.<name>getReference</name></name><argument_list>(<argument><expr><name><name>ProjectHelper2</name>.<name>REFID_TARGETS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>targets</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>description</name> =<init> <expr>new <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>Target</name></type> <name>t</name> :<range> <expr><name>targets</name></expr></range></decl></init>) <block>{
            <expr_stmt><expr><call><name>concatDescriptions</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>description</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><call><name><name>description</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>concatDescriptions</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>, <param><decl><type><name>Target</name></type> <name>t</name></decl></param>,
                                           <param><decl><type><name>StringBuilder</name></type> <name>description</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>t</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <for>for (<init><decl><type><name>Task</name></type> <name>task</name> :<range> <expr><call><name>findElementInTarget</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr>"description"</expr></argument>)</argument_list></call></expr></range></decl></init>) <block>{
            <if>if <condition>(<expr>!(<name>task</name> <name>instanceof</name> <name>UnknownElement</name>)</expr>)</condition><then> <block>{
                <continue>continue;</continue>
            }</block></then></if>
            <decl_stmt><decl><type><name>UnknownElement</name></type> <name>ue</name> =<init> <expr>((<name>UnknownElement</name>) <name>task</name>)</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>descComp</name> =<init> <expr><call><name><name>ue</name>.<name>getWrapper</name></name><argument_list>()</argument_list></call>.<call><name>getText</name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>descComp</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>description</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>project</name>.<name>replaceProperties</name></name><argument_list>(<argument><expr><name>descComp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>List</name><argument_list>&lt;<argument><name>Task</name></argument>&gt;</argument_list></name></type> <name>findElementInTarget</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>,
                                              <param><decl><type><name>Target</name></type> <name>t</name></decl></param>, <param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list>&lt;<argument><name>Task</name></argument>&gt;</argument_list></name></type> <name>elems</name> =<init> <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>Task</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>Task</name></type> <name>task</name> :<range> <expr><call><name><name>t</name>.<name>getTasks</name></name><argument_list>()</argument_list></call></expr></range></decl></init>) <block>{
            <if>if <condition>(<expr><call><name><name>name</name>.<name>equals</name></name><argument_list>(<argument><expr><call><name><name>task</name>.<name>getTaskName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>elems</name>.<name>add</name></name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <return>return <expr><name>elems</name></expr>;</return>
    }</block></function>

}</block></class>
</unit>
