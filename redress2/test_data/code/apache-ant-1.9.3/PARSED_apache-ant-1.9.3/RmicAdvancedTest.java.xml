<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\taskdefs\RmicAdvancedTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>


<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildFileTest</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>rmic</name>.<name>RmicAdapterFactory</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>rmic</name>.<name>DefaultRmicAdapter</name></name>;</import>

<comment type="javadoc">/**
 * Date: 04-Aug-2004
 * Time: 22:15:46
 */</comment>
<class><specifier>public</specifier> class <name>RmicAdvancedTest</name> <super><extends>extends <name>BuildFileTest</name></extends></super> <block>{

    <constructor><specifier>public</specifier> <name>RmicAdvancedTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>TASKDEFS_DIR</name> =<init> <expr>"src/etc/testcases/taskdefs/rmic/"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The JUnit setup method
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>super</name>.<name>setUp</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr><name>TASKDEFS_DIR</name> + "rmic.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The teardown method for JUnit
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"teardown"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * verify that "default" binds us to the default compiler
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testDefault</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testDefault"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * verify that "default" binds us to the default compiler
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testDefaultDest</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testDefaultDest"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * verify that "" binds us to the default compiler
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testEmpty</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testEmpty"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * verify that "" binds us to the default compiler
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testEmptyDest</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testEmptyDest"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * test sun's rmic compiler
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testRmic</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testRmic"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * test sun's rmic compiler
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testRmicDest</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testRmicDest"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * test sun's rmic compiler strips
     * out -J arguments when not forking
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testRmicJArg</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testRmicJArg"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * test sun's rmic compiler strips
     * out -J arguments when not forking
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testRmicJArgDest</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testRmicJArgDest"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * A unit test for JUnit
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testKaffe</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testKaffe"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * A unit test for JUnit
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testKaffeDest</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testKaffeDest"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// WLrmic tests don't work</comment>
    <comment type="javadoc">/**
     * test weblogic
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>XtestWlrmic</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testWlrmic"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     *  test weblogic's stripping of -J args
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>XtestWlrmicJArg</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testWlrmicJArg"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * test the forking compiler
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>NotestForking</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testForking"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * test the forking compiler
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testForkingAntClasspath</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testForkingAntClasspath"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * test the forking compiler
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testForkingAntClasspathDest</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testForkingAntClasspathDest"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * test the forking compiler
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testAntClasspath</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testAntClasspath"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * test the forking compiler
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testAntClasspathDest</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testAntClasspathDest"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * A unit test for JUnit
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testBadName</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>expectBuildExceptionContaining</name><argument_list>(<argument><expr>"testBadName"</expr></argument>,
                <argument><expr>"compiler not known"</expr></argument>,
                <argument><expr><name><name>RmicAdapterFactory</name>.<name>ERROR_UNKNOWN_COMPILER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * load an adapter by name
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testExplicitClass</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testExplicitClass"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * A unit test for JUnit
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testWrongClass</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>expectBuildExceptionContaining</name><argument_list>(<argument><expr>"testWrongClass"</expr></argument>,
                <argument><expr>"class not an RMIC adapter"</expr></argument>,
                <argument><expr><name><name>RmicAdapterFactory</name>.<name>ERROR_NOT_RMIC_ADAPTER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * A unit test for JUnit
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testDefaultBadClass</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>expectBuildExceptionContaining</name><argument_list>(<argument><expr>"testDefaultBadClass"</expr></argument>,
                <argument><expr>"expected the class to fail"</expr></argument>,
                <argument><expr><name><name>Rmic</name>.<name>ERROR_RMIC_FAILED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//dont look for much text here as it is vendor and version dependent</comment>
        <expr_stmt><expr><call><name>assertLogContaining</name><argument_list>(<argument><expr>"unimplemented.class"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * A unit test for JUnit
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testMagicProperty</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>expectBuildExceptionContaining</name><argument_list>(<argument><expr>"testMagicProperty"</expr></argument>,
                <argument><expr>"magic property not working"</expr></argument>,
                <argument><expr><name><name>RmicAdapterFactory</name>.<name>ERROR_UNKNOWN_COMPILER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * A unit test for JUnit
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testMagicPropertyOverridesEmptyString</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>expectBuildExceptionContaining</name><argument_list>(<argument><expr>"testMagicPropertyOverridesEmptyString"</expr></argument>,
                <argument><expr>"magic property not working"</expr></argument>,
                <argument><expr><name><name>RmicAdapterFactory</name>.<name>ERROR_UNKNOWN_COMPILER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     *
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testMagicPropertyIsEmptyString</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testMagicPropertyIsEmptyString"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>NotestFailingAdapter</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>expectBuildExceptionContaining</name><argument_list>(<argument><expr>"testFailingAdapter"</expr></argument>,
                <argument><expr>"expected failures to propagate"</expr></argument>,
                <argument><expr><name><name>Rmic</name>.<name>ERROR_RMIC_FAILED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * test that version 1.1 stubs are good
     * @throws Exception
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testVersion11</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testVersion11"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * test that version 1.1 stubs are good
     * @throws Exception
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testVersion11Dest</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testVersion11Dest"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * test that version 1.2 stubs are good
     *
     * @throws Exception
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testVersion12</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testVersion12"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * test that version 1.2 stubs are good
     *
     * @throws Exception
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testVersion12Dest</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testVersion12Dest"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * test that version compat stubs are good
     *
     * @throws Exception
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testVersionCompat</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testVersionCompat"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * test that version compat stubs are good
     *
     * @throws Exception
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testVersionCompatDest</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testVersionCompatDest"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * test that passes -Xnew to sun's rmic.
     *
     * @throws Exception
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testXnew</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testXnew"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * test that passes -Xnew to sun's rmic.
     *
     * @throws Exception
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testXnewDest</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testXnewDest"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * test that passes -Xnew to sun's rmic running in a different VM.
     *
     * @throws Exception
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testXnewForked</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testXnewForked"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * test that passes -Xnew to sun's rmic running in a different VM.
     *
     * @throws Exception
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testXnewForkedDest</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testXnewForkedDest"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * test that runs the new xnew compiler adapter.
     *
     * @throws Exception
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testXnewCompiler</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testXnewCompiler"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * test that runs the new xnew compiler adapter.
     *
     * @throws Exception
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testXnewCompilerDest</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testXnewCompilerDest"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * test that verifies that IDL compiles.
     *
     * @throws Exception
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testIDL</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testIDL"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * test that verifies that IDL compiles.
     *
     * @throws Exception
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testIDLDest</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testIDLDest"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * test that verifies that IIOP compiles.
     *
     * @throws Exception
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testIIOP</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testIIOP"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * test that verifies that IIOP compiles.
     *
     * @throws Exception
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testIIOPDest</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testIIOPDest"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * this little bunny verifies that we can load stuff, and that
     * a failure to execute is turned into a fault
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>FailingRmicAdapter</name> <super><extends>extends <name>DefaultRmicAdapter</name></extends></super> <block>{
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>LOG_MESSAGE</name> =<init> <expr>"hello from FailingRmicAdapter"</expr></init></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * Executes the task.
         *
         * @return false -always
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
            <expr_stmt><expr><call><name>getRmic</name><argument_list>()</argument_list></call>.<call><name>log</name><argument_list>(<argument><expr><name>LOG_MESSAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>false</expr>;</return>
        }</block></function>
    }</block></class>
}</block></class>

</unit>
