<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\depend\constantpool\ConstantPoolEntry.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>depend</name>.<name>constantpool</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>DataInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>

<comment type="javadoc">/**
 * An entry in the constant pool. This class contains a representation of the
 * constant pool entries. It is an abstract base class for all the different
 * forms of constant pool entry.
 *
 * @see ConstantPool
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>ConstantPoolEntry</name> <block>{

    <comment type="javadoc">/** Tag value for UTF8 entries. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>CONSTANT_UTF8</name> =<init> <expr>1</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Tag value for Integer entries. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>CONSTANT_INTEGER</name> =<init> <expr>3</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Tag value for Float entries. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>CONSTANT_FLOAT</name> =<init> <expr>4</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Tag value for Long entries. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>CONSTANT_LONG</name> =<init> <expr>5</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Tag value for Double entries. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>CONSTANT_DOUBLE</name> =<init> <expr>6</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Tag value for Class entries. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>CONSTANT_CLASS</name> =<init> <expr>7</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Tag value for String entries. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>CONSTANT_STRING</name> =<init> <expr>8</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Tag value for Field Reference entries. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>CONSTANT_FIELDREF</name> =<init> <expr>9</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Tag value for Method Reference entries. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>CONSTANT_METHODREF</name> =<init> <expr>10</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Tag value for Interface Method Reference entries. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>CONSTANT_INTERFACEMETHODREF</name> =<init> <expr>11</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Tag value for Name and Type entries. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>CONSTANT_NAMEANDTYPE</name> =<init> <expr>12</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Tag value for Method Handle entries */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>CONSTANT_METHODHANDLE</name>  =<init> <expr>15</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Tag value for Method Type entries */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>CONSTANT_METHODTYPE</name> =<init> <expr>16</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Tag value for InvokeDynamic entries*/</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>CONSTANT_INVOKEDYNAMIC</name> =<init> <expr>18</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * This entry's tag which identifies the type of this constant pool
     * entry.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>tag</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The number of slots in the constant pool, occupied by this entry.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>numEntries</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * A flag which indicates if this entry has been resolved or not.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>resolved</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Initialise the constant pool entry.
     *
     * @param tagValue the tag value which identifies which type of constant
     *      pool entry this is.
     * @param entries the number of constant pool entry slots this entry
     *      occupies.
     */</comment>
    <constructor><specifier>public</specifier> <name>ConstantPoolEntry</name><parameter_list>(<param><decl><type><name>int</name></type> <name>tagValue</name></decl></param>, <param><decl><type><name>int</name></type> <name>entries</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>tag</name> = <name>tagValue</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>numEntries</name> = <name>entries</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>resolved</name> = false</expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Read a constant pool entry from a stream. This is a factory method
     * which reads a constant pool entry form a stream and returns the
     * appropriate subclass for the entry.
     *
     * @param cpStream the stream from which the constant pool entry is to
     *      be read.
     * @return the appropriate ConstantPoolEntry subclass representing the
     *      constant pool entry from the stream.
     * @exception IOException if the constant pool entry cannot be read
     *      from the stream
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ConstantPoolEntry</name></type> <name>readEntry</name><parameter_list>(<param><decl><type><name>DataInputStream</name></type> <name>cpStream</name></decl></param>)</parameter_list>
         <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>ConstantPoolEntry</name></type> <name>cpInfo</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>cpTag</name> =<init> <expr><call><name><name>cpStream</name>.<name>readUnsignedByte</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <switch>switch <condition>(<expr><name>cpTag</name></expr>)</condition> <block>{

            <case>case <expr><name>CONSTANT_UTF8</name></expr>:
                <expr_stmt><expr><name>cpInfo</name> = new <call><name>Utf8CPInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <break>break;</break>
            </case><case>case <expr><name>CONSTANT_INTEGER</name></expr>:
                <expr_stmt><expr><name>cpInfo</name> = new <call><name>IntegerCPInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <break>break;</break>
            </case><case>case <expr><name>CONSTANT_FLOAT</name></expr>:
                <expr_stmt><expr><name>cpInfo</name> = new <call><name>FloatCPInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <break>break;</break>
            </case><case>case <expr><name>CONSTANT_LONG</name></expr>:
                <expr_stmt><expr><name>cpInfo</name> = new <call><name>LongCPInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <break>break;</break>
            </case><case>case <expr><name>CONSTANT_DOUBLE</name></expr>:
                <expr_stmt><expr><name>cpInfo</name> = new <call><name>DoubleCPInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <break>break;</break>
            </case><case>case <expr><name>CONSTANT_CLASS</name></expr>:
                <expr_stmt><expr><name>cpInfo</name> = new <call><name>ClassCPInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <break>break;</break>
            </case><case>case <expr><name>CONSTANT_STRING</name></expr>:
                <expr_stmt><expr><name>cpInfo</name> = new <call><name>StringCPInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <break>break;</break>
            </case><case>case <expr><name>CONSTANT_FIELDREF</name></expr>:
                <expr_stmt><expr><name>cpInfo</name> = new <call><name>FieldRefCPInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <break>break;</break>
            </case><case>case <expr><name>CONSTANT_METHODREF</name></expr>:
                <expr_stmt><expr><name>cpInfo</name> = new <call><name>MethodRefCPInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <break>break;</break>
            </case><case>case <expr><name>CONSTANT_INTERFACEMETHODREF</name></expr>:
                <expr_stmt><expr><name>cpInfo</name> = new <call><name>InterfaceMethodRefCPInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <break>break;</break>
            </case><case>case <expr><name>CONSTANT_NAMEANDTYPE</name></expr>:
                <expr_stmt><expr><name>cpInfo</name> = new <call><name>NameAndTypeCPInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <break>break;</break>
            </case><case>case <expr><name>CONSTANT_METHODHANDLE</name></expr>:
                <expr_stmt><expr><name>cpInfo</name> = new <call><name>MethodHandleCPInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <break>break;</break>
            </case><case>case <expr><name>CONSTANT_METHODTYPE</name></expr>:
                <expr_stmt><expr><name>cpInfo</name> = new <call><name>MethodTypeCPInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <break>break;</break>
            </case><case>case <expr><name>CONSTANT_INVOKEDYNAMIC</name></expr>:
                <expr_stmt><expr><name>cpInfo</name> = new <call><name>InvokeDynamicCPInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <break>break;</break>
            </case><default>default:
                <throw>throw <expr>new <call><name>ClassFormatError</name><argument_list>(<argument><expr>"Invalid Constant Pool entry Type "
                     + <name>cpTag</name></expr></argument>)</argument_list></call></expr>;</throw>
        </default>}</block></switch>

        <expr_stmt><expr><call><name><name>cpInfo</name>.<name>read</name></name><argument_list>(<argument><expr><name>cpStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>cpInfo</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Indicates whether this entry has been resolved. In general a constant
     * pool entry can reference another constant pool entry by its index
     * value. Resolution involves replacing this index value with the
     * constant pool entry at that index.
     *
     * @return true if this entry has been resolved.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isResolved</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>resolved</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Resolve this constant pool entry with respect to its dependents in
     * the constant pool.
     *
     * @param constantPool the constant pool of which this entry is a member
     *      and against which this entry is to be resolved.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>resolve</name><parameter_list>(<param><decl><type><name>ConstantPool</name></type> <name>constantPool</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>resolved</name> = true</expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * read a constant pool entry from a class stream.
     *
     * @param cpStream the DataInputStream which contains the constant pool
     *      entry to be read.
     * @exception IOException if there is a problem reading the entry from
     *      the stream.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>read</name><parameter_list>(<param><decl><type><name>DataInputStream</name></type> <name>cpStream</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>;</function_decl>

    <comment type="javadoc">/**
     * Get the Entry's type tag.
     *
     * @return The Tag value of this entry
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getTag</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>tag</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the number of Constant Pool Entry slots within the constant pool
     * occupied by this entry.
     *
     * @return the number of slots used.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>getNumEntries</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>numEntries</name></expr>;</return>
    }</block></function>

}</block></class>

</unit>
