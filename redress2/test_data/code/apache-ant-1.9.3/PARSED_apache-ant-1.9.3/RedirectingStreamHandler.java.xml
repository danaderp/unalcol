<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\cvslib\RedirectingStreamHandler.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>cvslib</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>ByteArrayOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>PumpStreamHandler</name></name>;</import>

<comment type="javadoc">/**
 * A dummy stream handler that just passes stuff to the parser.
 *
 */</comment>
<class>class <name>RedirectingStreamHandler</name>
     <super><extends>extends <name>PumpStreamHandler</name></extends></super> <block>{
    <constructor><name>RedirectingStreamHandler</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>ChangeLogParser</name></type> <name>parser</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr>new <call><name>RedirectingOutputStream</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr>new <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <function><type><name>String</name></type> <name>getErrors</name><parameter_list>()</parameter_list> <block>{
        <try>try <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>ByteArrayOutputStream</name></type> <name>error</name>
                =<init> <expr>(<name>ByteArrayOutputStream</name>) <call><name>getErr</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <return>return <expr><call><name><name>error</name>.<name>toString</name></name><argument_list>(<argument><expr>"ASCII"</expr></argument>)</argument_list></call></expr>;</return>
        }</block> <catch>catch (<param><decl><type><specifier>final</specifier> <name>Exception</name></type> <name>e</name></decl></param>) <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></catch></try>
    }</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>stop</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name>.<name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name>getErr</name><argument_list>()</argument_list></call>.<call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>getOut</name><argument_list>()</argument_list></call>.<call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><specifier>final</specifier> <name>IOException</name></type> <name>e</name></decl></param>) <block>{
            <comment type="line">// plain impossible</comment>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>
}</block></class>

</unit>
