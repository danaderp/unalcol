<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\util\PropertyOutputStream.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>ByteArrayOutputStream</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>

<comment type="javadoc">/**
 * Exception thrown when an attempt is made to get an OutputStream
 * from an immutable Resource.
 * @since Ant 1.7
 */</comment>
<class><specifier>public</specifier> class <name>PropertyOutputStream</name> <super><extends>extends <name>ByteArrayOutputStream</name></extends></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>Project</name></type> <name>project</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>property</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>trim</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Construct a new PropertyOutputStream for the specified Project
     * and property name, trimming the property value.
     * @param p the associated Ant Project.
     * @param s the String property name.
     */</comment>
    <constructor><specifier>public</specifier> <name>PropertyOutputStream</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>p</name></decl></param>, <param><decl><type><name>String</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Construct a new PropertyOutputStream for
     * the specified Project, property name, and trim mode.
     * @param p the associated Ant Project.
     * @param s the String property name.
     * @param b the boolean trim mode.
     */</comment>
    <constructor><specifier>public</specifier> <name>PropertyOutputStream</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>p</name></decl></param>, <param><decl><type><name>String</name></type> <name>s</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>project</name> = <name>p</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>property</name> = <name>s</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>trim</name> = <name>b</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Close the PropertyOutputStream, storing the property.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>project</name> != <name>null</name> &amp;&amp; <name>property</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>s</name> =<init> <expr>new <call><name>String</name><argument_list>(<argument><expr><call><name>toByteArray</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>project</name>.<name>setNewProperty</name></name><argument_list>(<argument><expr><name>property</name></expr></argument>, <argument><expr><name>trim</name> ? <call><name><name>s</name>.<name>trim</name></name><argument_list>()</argument_list></call> : <name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

}</block></class>

</unit>
