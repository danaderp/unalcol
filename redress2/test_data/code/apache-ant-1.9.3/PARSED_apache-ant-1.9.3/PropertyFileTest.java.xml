<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\taskdefs\optional\PropertyFileTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Properties</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildFileTest</name></name>;</import>

<comment type="javadoc">/**
 *  JUnit testcase that excercises the optional PropertyFile task in ant.
 *  (this is really more of a functional test so far.., but it's enough to let
 *   me start refactoring...)
 *
 *@created    October 2, 2001
 */</comment>

<class><specifier>public</specifier> class <name>PropertyFileTest</name> <super><extends>extends <name>BuildFileTest</name></extends></super> <block>{

    <constructor><specifier>public</specifier> <name>PropertyFileTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <comment type="javadoc">/**
     *  The JUnit setup method
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>destroyTempFiles</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>initTestPropFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>initBuildPropFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr><name>projectFilePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>setProperty</name></name><argument_list>(<argument><expr><name>valueDoesNotGetOverwrittenPropertyFileKey</name></expr></argument>,<argument><expr><name>valueDoesNotGetOverwrittenPropertyFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     *  The JUnit tearDown method
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>destroyTempFiles</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNonExistingFile</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>PropertyFile</name></type> <name>props</name> =<init> <expr>new <call><name>PropertyFile</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>props</name>.<name>setProject</name></name><argument_list>( <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>file</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr>"this-file-does-not-exist.properties"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>props</name>.<name>setFile</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr>"Properties file exists before test."</expr></argument>, <argument><expr><call><name><name>file</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>props</name>.<name>execute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Properties file does not exist after test."</expr></argument>, <argument><expr><call><name><name>file</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>file</name>.<name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     *  A unit test for JUnit- Excercises the propertyfile tasks ability to
     *  update properties that are already defined-
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testUpdatesExistingProperties</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>Properties</name></type> <name>beforeUpdate</name> =<init> <expr><call><name>getTestProperties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>FNAME</name></expr></argument>, <argument><expr><call><name><name>beforeUpdate</name>.<name>getProperty</name></name><argument_list>(<argument><expr><name>FNAME_KEY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>LNAME</name></expr></argument>, <argument><expr><call><name><name>beforeUpdate</name>.<name>getProperty</name></name><argument_list>(<argument><expr><name>LNAME_KEY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>EMAIL</name></expr></argument>, <argument><expr><call><name><name>beforeUpdate</name>.<name>getProperty</name></name><argument_list>(<argument><expr><name>EMAIL_KEY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr><call><name><name>beforeUpdate</name>.<name>getProperty</name></name><argument_list>(<argument><expr><name>PHONE_KEY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr><call><name><name>beforeUpdate</name>.<name>getProperty</name></name><argument_list>(<argument><expr><name>AGE_KEY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr><call><name><name>beforeUpdate</name>.<name>getProperty</name></name><argument_list>(<argument><expr><name>DATE_KEY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// ask ant to update the properties...</comment>
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"update-existing-properties"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Properties</name></type> <name>afterUpdate</name> =<init> <expr><call><name>getTestProperties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>NEW_FNAME</name></expr></argument>, <argument><expr><call><name><name>afterUpdate</name>.<name>getProperty</name></name><argument_list>(<argument><expr><name>FNAME_KEY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>NEW_LNAME</name></expr></argument>, <argument><expr><call><name><name>afterUpdate</name>.<name>getProperty</name></name><argument_list>(<argument><expr><name>LNAME_KEY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>NEW_EMAIL</name></expr></argument>, <argument><expr><call><name><name>afterUpdate</name>.<name>getProperty</name></name><argument_list>(<argument><expr><name>EMAIL_KEY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>NEW_PHONE</name></expr></argument>, <argument><expr><call><name><name>afterUpdate</name>.<name>getProperty</name></name><argument_list>(<argument><expr><name>PHONE_KEY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>NEW_AGE</name></expr></argument>, <argument><expr><call><name><name>afterUpdate</name>.<name>getProperty</name></name><argument_list>(<argument><expr><name>AGE_KEY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>NEW_DATE</name></expr></argument>, <argument><expr><call><name><name>afterUpdate</name>.<name>getProperty</name></name><argument_list>(<argument><expr><name>DATE_KEY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testDeleteProperties</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>Properties</name></type> <name>beforeUpdate</name> =<init> <expr><call><name>getTestProperties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Property '" + <name>FNAME_KEY</name> + "' should exist before deleting"</expr></argument>,
            <argument><expr><name>FNAME</name></expr></argument>, <argument><expr><call><name><name>beforeUpdate</name>.<name>getProperty</name></name><argument_list>(<argument><expr><name>FNAME_KEY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Property '" + <name>LNAME_KEY</name> + "' should exist before deleting"</expr></argument>,
            <argument><expr><name>LNAME</name></expr></argument>, <argument><expr><call><name><name>beforeUpdate</name>.<name>getProperty</name></name><argument_list>(<argument><expr><name>LNAME_KEY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"delete-properties"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Properties</name></type> <name>afterUpdate</name> =<init> <expr><call><name>getTestProperties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Property '" + <name>LNAME_KEY</name> + "' should exist after deleting"</expr></argument>,
            <argument><expr><name>LNAME</name></expr></argument>, <argument><expr><call><name><name>afterUpdate</name>.<name>getProperty</name></name><argument_list>(<argument><expr><name>LNAME_KEY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr>"Property '" + <name>FNAME_KEY</name> + "' should be deleted"</expr></argument>,
            <argument><expr><call><name><name>afterUpdate</name>.<name>getProperty</name></name><argument_list>(<argument><expr><name>FNAME_KEY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testExerciseDefaultAndIncrement</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"exercise"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"3"</expr></argument>,<argument><expr><call><name><name>project</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"int.with.default"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"1"</expr></argument>,<argument><expr><call><name><name>project</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"int.without.default"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"--&gt;"</expr></argument>,<argument><expr><call><name><name>project</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"string.with.default"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"."</expr></argument>,<argument><expr><call><name><name>project</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"string.without.default"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"2002/01/21 12:18"</expr></argument>, <argument><expr><call><name><name>project</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"ethans.birth"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"2003/01/21"</expr></argument>, <argument><expr><call><name><name>project</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"first.birthday"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"0124"</expr></argument>, <argument><expr><call><name><name>project</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"olderThanAWeek"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"37"</expr></argument>, <argument><expr><call><name><name>project</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"existing.prop"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"6"</expr></argument>,<argument><expr><call><name><name>project</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"int.without.value"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testValueDoesNotGetOverwritten</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// this test shows that the bug report 21505 is fixed</comment>
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"bugDemo1"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"bugDemo2"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"5"</expr></argument>, <argument><expr><call><name><name>project</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"foo"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
<comment type="block">/*
    public void testDirect() throws Exception {
        PropertyFile pf = new PropertyFile();
        pf.setProject(project);
        pf.setFile(new File(System.getProperty("root"), testPropsFilePath));
        PropertyFile.Entry entry = pf.createEntry();

        entry.setKey("date");
        entry.setValue("123");
        PropertyFile.Entry.Type type = new PropertyFile.Entry.Type();
        type.setValue("date");
        entry.setType(type);

        entry.setPattern("yyyy/MM/dd");

        PropertyFile.Entry.Operation operation = new PropertyFile.Entry.Operation();
        operation.setValue("+");
        pf.execute();

        Properties props = getTestProperties();
        assertEquals("yeehaw", props.getProperty("date"));
    }
*/</comment>

    <function><type><specifier>private</specifier> <name>Properties</name></type> <name>getTestProperties</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>Properties</name></type> <name>testProps</name> =<init> <expr>new <call><name>Properties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FileInputStream</name></type> <name>propsFile</name> =<init> <expr>new <call><name>FileInputStream</name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>testPropsFilePath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>testProps</name>.<name>load</name></name><argument_list>(<argument><expr><name>propsFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>propsFile</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>testProps</name></expr>;</return>
    }</block></function>


    <function><type><specifier>private</specifier> <name>void</name></type> <name>initTestPropFile</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>Properties</name></type> <name>testProps</name> =<init> <expr>new <call><name>Properties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>testProps</name>.<name>put</name></name><argument_list>(<argument><expr><name>FNAME_KEY</name></expr></argument>, <argument><expr><name>FNAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>testProps</name>.<name>put</name></name><argument_list>(<argument><expr><name>LNAME_KEY</name></expr></argument>, <argument><expr><name>LNAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>testProps</name>.<name>put</name></name><argument_list>(<argument><expr><name>EMAIL_KEY</name></expr></argument>, <argument><expr><name>EMAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>testProps</name>.<name>put</name></name><argument_list>(<argument><expr>"existing.prop"</expr></argument>, <argument><expr>"37"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>FileOutputStream</name></type> <name>fos</name> =<init> <expr>new <call><name>FileOutputStream</name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>testPropsFilePath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>testProps</name>.<name>store</name></name><argument_list>(<argument><expr><name>fos</name></expr></argument>, <argument><expr>"defaults"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>fos</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><type><specifier>private</specifier> <name>void</name></type> <name>initBuildPropFile</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>Properties</name></type> <name>buildProps</name> =<init> <expr>new <call><name>Properties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>buildProps</name>.<name>put</name></name><argument_list>(<argument><expr><name>testPropertyFileKey</name></expr></argument>, <argument><expr><name>testPropertyFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>buildProps</name>.<name>put</name></name><argument_list>(<argument><expr><name>FNAME_KEY</name></expr></argument>, <argument><expr><name>NEW_FNAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>buildProps</name>.<name>put</name></name><argument_list>(<argument><expr><name>LNAME_KEY</name></expr></argument>, <argument><expr><name>NEW_LNAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>buildProps</name>.<name>put</name></name><argument_list>(<argument><expr><name>EMAIL_KEY</name></expr></argument>, <argument><expr><name>NEW_EMAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>buildProps</name>.<name>put</name></name><argument_list>(<argument><expr><name>PHONE_KEY</name></expr></argument>, <argument><expr><name>NEW_PHONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>buildProps</name>.<name>put</name></name><argument_list>(<argument><expr><name>AGE_KEY</name></expr></argument>, <argument><expr><name>NEW_AGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>buildProps</name>.<name>put</name></name><argument_list>(<argument><expr><name>DATE_KEY</name></expr></argument>, <argument><expr><name>NEW_DATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>FileOutputStream</name></type> <name>fos</name> =<init> <expr>new <call><name>FileOutputStream</name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buildPropsFilePath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>buildProps</name>.<name>store</name></name><argument_list>(<argument><expr><name>fos</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>fos</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><type><specifier>private</specifier> <name>void</name></type> <name>destroyTempFiles</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>tempFile</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>testPropsFilePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>tempFile</name>.<name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tempFile</name> = <name>null</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>tempFile</name> = new <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buildPropsFilePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>tempFile</name>.<name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tempFile</name> = <name>null</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>tempFile</name> = new <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>valueDoesNotGetOverwrittenPropsFilePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>tempFile</name>.<name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tempFile</name> = <name>null</name></expr>;</expr_stmt>
    }</block></function>



    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type>
        <name>projectFilePath</name>     =<init> <expr>"src/etc/testcases/taskdefs/optional/propertyfile.xml"</expr></init>,

        <name>testPropertyFile</name>    =<init> <expr>"propertyfile.test.properties"</expr></init>,
        <name>testPropertyFileKey</name> =<init> <expr>"test.propertyfile"</expr></init>,
        <name>testPropsFilePath</name>   =<init> <expr>"src/etc/testcases/taskdefs/optional/" + <name>testPropertyFile</name></expr></init>,

        <name>valueDoesNotGetOverwrittenPropertyFile</name>    =<init> <expr>"overwrite.test.properties"</expr></init>,
        <name>valueDoesNotGetOverwrittenPropertyFileKey</name> =<init> <expr>"overwrite.test.propertyfile"</expr></init>,
        <name>valueDoesNotGetOverwrittenPropsFilePath</name>   =<init> <expr>"src/etc/testcases/taskdefs/optional/" + <name>valueDoesNotGetOverwrittenPropertyFile</name></expr></init>,

        <name>buildPropsFilePath</name>  =<init> <expr>"src/etc/testcases/taskdefs/optional/propertyfile.build.properties"</expr></init>,

        <name>FNAME</name>     =<init> <expr>"Bruce"</expr></init>,
        <name>NEW_FNAME</name> =<init> <expr>"Clark"</expr></init>,
        <name>FNAME_KEY</name> =<init> <expr>"firstname"</expr></init>,

        <name>LNAME</name>     =<init> <expr>"Banner"</expr></init>,
        <name>NEW_LNAME</name> =<init> <expr>"Kent"</expr></init>,
        <name>LNAME_KEY</name> =<init> <expr>"lastname"</expr></init>,

        <name>EMAIL</name>     =<init> <expr>"incredible@hulk.com"</expr></init>,
        <name>NEW_EMAIL</name> =<init> <expr>"kc@superman.com"</expr></init>,
        <name>EMAIL_KEY</name> =<init> <expr>"email"</expr></init>,

        <name>NEW_PHONE</name> =<init> <expr>"(520) 555-1212"</expr></init>,
        <name>PHONE_KEY</name> =<init> <expr>"phone"</expr></init>,

        <name>NEW_AGE</name> =<init> <expr>"30"</expr></init>,
        <name>AGE_KEY</name> =<init> <expr>"age"</expr></init>,

        <name>NEW_DATE</name> =<init> <expr>"2001/01/01 12:45"</expr></init>,
        <name>DATE_KEY</name> =<init> <expr>"date"</expr></init></decl>;</decl_stmt>
}</block></class>
</unit>
