<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\condition\IsReference.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>condition</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>ProjectComponent</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Reference</name></name>;</import>

<comment type="javadoc">/**
 * Condition that tests whether a given reference has been defined.
 *
 * &lt;p&gt;Optionally tests whether it is of a given type/class.&lt;/p&gt;
 *
 * @since Ant 1.6
 */</comment>
<class><specifier>public</specifier> class <name>IsReference</name> <super><extends>extends <name>ProjectComponent</name></extends> <implements>implements <name>Condition</name></implements></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>Reference</name></type> <name>ref</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>type</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Set the refid attribute.
     *
     * @param r a Reference value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRefid</name><parameter_list>(<param><decl><type><name>Reference</name></type> <name>r</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>ref</name> = <name>r</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the type attribute. This is optional attribute.
     *
     * @param type an ant component type name
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setType</name><parameter_list>(<param><decl><type><name>String</name></type> <name>type</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>type</name></name> = <name>type</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * @return true if the reference exists and if type is set, if
     *              the reference is the same type
     * @exception BuildException if an error occurs
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>eval</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>ref</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"No reference specified for isreference "
                                     + "condition"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <decl_stmt><decl><type><name>String</name></type> <name>key</name> =<init> <expr><call><name><name>ref</name>.<name>getRefId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>hasReference</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr><name>type</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then> <else>else <block>{
            <decl_stmt><decl><type><name>Object</name></type> <name>o</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getReference</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Class</name></type> <name>typeClass</name> =<init>
                <expr>(<name>Class</name>) <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getDataTypeDefinitions</name><argument_list>()</argument_list></call>.<call><name>get</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>typeClass</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>typeClass</name> =
                    (<name>Class</name>) <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getTaskDefinitions</name><argument_list>()</argument_list></call>.<call><name>get</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <if>if <condition>(<expr><name>typeClass</name> == <name>null</name></expr>)</condition><then> <block>{
                <comment type="line">// don't know the type, should throw exception instead?</comment>
                <return>return <expr>false</expr>;</return>
            }</block></then></if>

            <return>return <expr><call><name><name>typeClass</name>.<name>isAssignableFrom</name></name><argument_list>(<argument><expr><call><name><name>o</name>.<name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if></else></if>
    }</block></function>

}</block></class>
</unit>
