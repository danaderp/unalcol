<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\cvslib\ChangeLogWriter.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>cvslib</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>PrintWriter</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>SimpleDateFormat</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>TimeZone</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>DOMElementWriter</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>DOMUtils</name></name>;</import>

<import>import <name><name>org</name>.<name>w3c</name>.<name>dom</name>.<name>Document</name></name>;</import>
<import>import <name><name>org</name>.<name>w3c</name>.<name>dom</name>.<name>Element</name></name>;</import>

<comment type="javadoc">/**
 * Class used to generate an XML changelog.
 *
 */</comment>
<class><specifier>public</specifier> class <name>ChangeLogWriter</name> <block>{
    <comment type="javadoc">/** output format for dates written to xml file */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>SimpleDateFormat</name></type> <name>OUTPUT_DATE</name>
        =<init> <expr>new <call><name>SimpleDateFormat</name><argument_list>(<argument><expr>"yyyy-MM-dd"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** output format for times written to xml file */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>SimpleDateFormat</name></type> <name>OUTPUT_TIME</name>
        =<init> <expr>new <call><name>SimpleDateFormat</name><argument_list>(<argument><expr>"HH:mm"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** stateless helper for writing the XML document */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>DOMElementWriter</name></type> <name>DOM_WRITER</name> =<init> <expr>new <call><name>DOMElementWriter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    static <block>{
        <decl_stmt><decl><type><name>TimeZone</name></type> <name>utc</name> =<init> <expr><call><name><name>TimeZone</name>.<name>getTimeZone</name></name><argument_list>(<argument><expr>"UTC"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <constructor_decl><name><name>OUTPUT_DATE</name>.<name>setTimeZone</name></name><parameter_list>(<param><decl><type><name>utc</name></type></decl></param>)</parameter_list>;</constructor_decl>
        <constructor_decl><name><name>OUTPUT_TIME</name>.<name>setTimeZone</name></name><parameter_list>(<param><decl><type><name>utc</name></type></decl></param>)</parameter_list>;</constructor_decl>
    }</block>

    <comment type="javadoc">/**
     * Print out the specified entries.
     *
     * @param output writer to which to send output.
     * @param entries the entries to be written.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>printChangeLog</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>PrintWriter</name></type> <name>output</name></decl></param>,
                               <param><decl><type><specifier>final</specifier> <name><name>CVSEntry</name><index>[]</index></name></type> <name>entries</name></decl></param>)</parameter_list> <block>{
        <try>try <block>{
            <expr_stmt><expr><call><name><name>output</name>.<name>println</name></name><argument_list>(<argument><expr>"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Document</name></type> <name>doc</name> =<init> <expr><call><name><name>DOMUtils</name>.<name>newDocument</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Element</name></type> <name>root</name> =<init> <expr><call><name><name>doc</name>.<name>createElement</name></name><argument_list>(<argument><expr>"changelog"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>DOM_WRITER</name>.<name>openElement</name></name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>"\t"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>output</name>.<name>println</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>entries</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>CVSEntry</name></type> <name>entry</name> =<init> <expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name>printEntry</name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><call><name><name>DOM_WRITER</name>.<name>closeElement</name></name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>"\t"</expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>output</name>.<name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>output</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>


    <comment type="javadoc">/**
     * Print out an individual entry in changelog.
     *
     * @param doc Document used to create elements.
     * @param entry the entry to print
     * @param output writer to which to send output.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>printEntry</name><parameter_list>(<param><decl><type><name>Document</name></type> <name>doc</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>PrintWriter</name></type> <name>output</name></decl></param>,
                            <param><decl><type><specifier>final</specifier> <name>CVSEntry</name></type> <name>entry</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>Element</name></type> <name>ent</name> =<init> <expr><call><name><name>doc</name>.<name>createElement</name></name><argument_list>(<argument><expr>"entry"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>DOMUtils</name>.<name>appendTextElement</name></name><argument_list>(<argument><expr><name>ent</name></expr></argument>, <argument><expr>"date"</expr></argument>,
                                   <argument><expr><call><name><name>OUTPUT_DATE</name>.<name>format</name></name><argument_list>(<argument><expr><call><name><name>entry</name>.<name>getDate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>DOMUtils</name>.<name>appendTextElement</name></name><argument_list>(<argument><expr><name>ent</name></expr></argument>, <argument><expr>"time"</expr></argument>,
                                   <argument><expr><call><name><name>OUTPUT_TIME</name>.<name>format</name></name><argument_list>(<argument><expr><call><name><name>entry</name>.<name>getDate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>DOMUtils</name>.<name>appendCDATAElement</name></name><argument_list>(<argument><expr><name>ent</name></expr></argument>, <argument><expr>"author"</expr></argument>, <argument><expr><call><name><name>entry</name>.<name>getAuthor</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Enumeration</name></type> <name>enumeration</name> =<init> <expr><call><name><name>entry</name>.<name>getFiles</name></name><argument_list>()</argument_list></call>.<call><name>elements</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <while>while <condition>(<expr><call><name><name>enumeration</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>RCSFile</name></type> <name>file</name> =<init> <expr>(<name>RCSFile</name>) <call><name><name>enumeration</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>Element</name></type> <name>f</name> =<init> <expr><call><name><name>DOMUtils</name>.<name>createChildElement</name></name><argument_list>(<argument><expr><name>ent</name></expr></argument>, <argument><expr>"file"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>DOMUtils</name>.<name>appendCDATAElement</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr>"name"</expr></argument>, <argument><expr><call><name><name>file</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>DOMUtils</name>.<name>appendTextElement</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr>"revision"</expr></argument>, <argument><expr><call><name><name>file</name>.<name>getRevision</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>previousRevision</name> =<init> <expr><call><name><name>file</name>.<name>getPreviousRevision</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>previousRevision</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>DOMUtils</name>.<name>appendTextElement</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr>"prevrevision"</expr></argument>,
                                           <argument><expr><name>previousRevision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></while>
        <expr_stmt><expr><call><name><name>DOMUtils</name>.<name>appendCDATAElement</name></name><argument_list>(<argument><expr><name>ent</name></expr></argument>, <argument><expr>"msg"</expr></argument>, <argument><expr><call><name><name>entry</name>.<name>getComment</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>DOM_WRITER</name>.<name>write</name></name><argument_list>(<argument><expr><name>ent</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>"\t"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>

</unit>
