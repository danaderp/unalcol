<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\util\RetryHandler.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>

<comment type="javadoc">/**
 * A simple utility class to take a piece of code (that implements
 * &lt;code&gt;Retryable&lt;/code&gt; interface) and executes that with possibility to
 * retry the execution in case of IOException.
 */</comment>
<class><specifier>public</specifier> class <name>RetryHandler</name> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>retriesAllowed</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Task</name></type> <name>task</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Create a new RetryingHandler.
     *
     * @param retriesAllowed how many times to retry
     * @param task the Ant task that is is executed from, used for logging only
     */</comment>
    <constructor><specifier>public</specifier> <name>RetryHandler</name><parameter_list>(<param><decl><type><name>int</name></type> <name>retriesAllowed</name></decl></param>, <param><decl><type><name>Task</name></type> <name>task</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>retriesAllowed</name></name> = <name>retriesAllowed</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>task</name></name> = <name>task</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Execute the &lt;code&gt;Retryable&lt;/code&gt; code with specified number of retries.
     *
     * @param exe the code to execute
     * @param desc some descriptive text for this piece of code, used for logging
     * @throws IOException if the number of retries has exceeded the allowed limit
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>(<param><decl><type><name>Retryable</name></type> <name>exe</name></decl></param>, <param><decl><type><name>String</name></type> <name>desc</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>retries</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr>true</expr>)</condition> <block>{
            <try>try <block>{
                <expr_stmt><expr><call><name><name>exe</name>.<name>execute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
                <expr_stmt><expr><name>retries</name>++</expr>;</expr_stmt>
                <if>if <condition>(<expr><name>retries</name> &gt; <name><name>this</name>.<name>retriesAllowed</name></name> &amp;&amp; <name><name>this</name>.<name>retriesAllowed</name></name> &gt; -1</expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>task</name>.<name>log</name></name><argument_list>(<argument><expr>"try #" + <name>retries</name> + ": IO error ("
                            + <name>desc</name> + "), number of maximum retries reached ("
                            + <name><name>this</name>.<name>retriesAllowed</name></name> + "), giving up"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <throw>throw <expr><name>e</name></expr>;</throw>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name><name>task</name>.<name>log</name></name><argument_list>(<argument><expr>"try #" + <name>retries</name> + ": IO error (" + <name>desc</name>
                             + "), retrying"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></catch></try>
        }</block></while>
    }</block></function>

}</block></class>
</unit>
