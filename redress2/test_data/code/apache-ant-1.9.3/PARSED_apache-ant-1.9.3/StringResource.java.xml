<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\types\resources\StringResource.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>OutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FilterOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ByteArrayInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ByteArrayOutputStream</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Resource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Reference</name></name>;</import>

<comment type="javadoc">/**
 * Exposes a string as a Resource.
 * @since Ant 1.7
 */</comment>
<class><specifier>public</specifier> class <name>StringResource</name> <super><extends>extends <name>Resource</name></extends></super> <block>{

    <comment type="javadoc">/** Magic number */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>STRING_MAGIC</name>
        =<init> <expr><call><name><name>Resource</name>.<name>getMagicNumber</name></name><argument_list>(<argument><expr>"StringResource".<call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEFAULT_ENCODING</name> =<init> <expr>"UTF-8"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>encoding</name> =<init> <expr><name>DEFAULT_ENCODING</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Default constructor.
     */</comment>
    <constructor><specifier>public</specifier> <name>StringResource</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <comment type="javadoc">/**
     * Construct a StringResource with the supplied value.
     * @param value the value of this StringResource.
     */</comment>
    <constructor><specifier>public</specifier> <name>StringResource</name><parameter_list>(<param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Construct a StringResource with the supplied project and value,
     * doing property replacement against the project if non-null.
     * @param project the owning Project.
     * @param value the value of this StringResource.
     */</comment>
    <constructor><specifier>public</specifier> <name>StringResource</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>, <param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setProject</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setValue</name><argument_list>(<argument><expr><name>project</name> == <name>null</name> ? <name>value</name> : <call><name><name>project</name>.<name>replaceProperties</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Enforce String immutability.
     * @param s the new name/value for this StringResource.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>setName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>getName</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>new <call><name>ImmutableResourceException</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>super</name>.<name>setName</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The value attribute is a semantically superior alias for the name attribute.
     * @param s the String's value.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>setValue</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setName</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Synchronize access.
     * @return the name/value of this StringResource.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>super</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the value of this StringResource, resolving to the root reference if needed.
     * @return the represented String.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>String</name></type> <name>getValue</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getName</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * The exists attribute tells whether a resource exists.
     *
     * @return true if this resource exists.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isExists</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getValue</name><argument_list>()</argument_list></call> != <name>null</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Add nested text to this resource.
     * Properties will be expanded during this process.
     * @since Ant 1.7.1
     * @param text text to use as the string resource
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addText</name><parameter_list>(<param><decl><type><name>String</name></type> <name>text</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>checkChildrenAllowed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setValue</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>replaceProperties</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the encoding to be used for this StringResource.
     * @param s the encoding name.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>setEncoding</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>checkAttributesAllowed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>encoding</name> = <name>s</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the encoding used by this StringResource.
     * @return the encoding name.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>String</name></type> <name>getEncoding</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>encoding</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the size of this Resource.
     * @return the size, as a long, 0 if the Resource does not exist (for
     *         compatibility with java.io.File), or UNKNOWN_SIZE if not known.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>long</name></type> <name>getSize</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>isReference</name><argument_list>()</argument_list></call> ? ((<name>Resource</name>) <call><name>getCheckedRef</name><argument_list>()</argument_list></call>).<call><name>getSize</name><argument_list>()</argument_list></call>
                : <call><name>getContent</name><argument_list>()</argument_list></call>.<call><name>length</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the hash code for this Resource.
     * @return hash code as int.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name>getCheckedRef</name><argument_list>()</argument_list></call>.<call><name>hashCode</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name><name>super</name>.<name>hashCode</name></name><argument_list>()</argument_list></call> * <name>STRING_MAGIC</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the string. See {@link #getContent()}
     *
     * @return the string contents of the resource.
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>String</name>.<name>valueOf</name></name><argument_list>(<argument><expr><call><name>getContent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get an InputStream for the Resource.
     * @return an InputStream containing this Resource's content.
     * @throws IOException if unable to provide the content of this
     *         Resource as a stream.
     * @throws UnsupportedOperationException if InputStreams are not
     *         supported for this Resource type.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>InputStream</name></type> <name>getInputStream</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>((<name>Resource</name>) <call><name>getCheckedRef</name><argument_list>()</argument_list></call>).<call><name>getInputStream</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>String</name></type> <name>content</name> =<init> <expr><call><name>getContent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>content</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalStateException</name><argument_list>(<argument><expr>"unset string value"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr>new <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><name>encoding</name> == <name>null</name>
                ? <call><name><name>content</name>.<name>getBytes</name></name><argument_list>()</argument_list></call> : <call><name><name>content</name>.<name>getBytes</name></name><argument_list>(<argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get an OutputStream for the Resource.
     * @return an OutputStream to which content can be written.
     * @throws IOException if unable to provide the content of this
     *         Resource as a stream.
     * @throws UnsupportedOperationException if OutputStreams are not
     *         supported for this Resource type.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>OutputStream</name></type> <name>getOutputStream</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>((<name>Resource</name>) <call><name>getCheckedRef</name><argument_list>()</argument_list></call>).<call><name>getOutputStream</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>getValue</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>ImmutableResourceException</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr>new <call><name>StringResourceFilterOutputStream</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Overrides the super version.
     * @param r the Reference to set.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRefid</name><parameter_list>(<param><decl><type><name>Reference</name></type> <name>r</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>encoding</name> != <name>DEFAULT_ENCODING</name></expr>)</condition><then> <block>{
            <throw>throw <expr><call><name>tooManyAttributes</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>super</name>.<name>setRefid</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the content of this StringResource. See {@link #getValue()}
     * @return a String or null if there is no value.
     */</comment>
    <function><type><specifier>protected</specifier> <specifier>synchronized</specifier> <name>String</name></type> <name>getContent</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getValue</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * This method is only for use by our private helper output stream.
     * It contains specific logic for expanding properties.
     * @param output the output
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>setValueFromOutputStream</name><parameter_list>(<param><decl><type><name>String</name></type> <name>output</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>value</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>getProject</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>value</name> = <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>replaceProperties</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>value</name> = <name>output</name></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><call><name>setValue</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <class><specifier>private</specifier> class <name>StringResourceFilterOutputStream</name> <super><extends>extends <name>FilterOutputStream</name></extends></super> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ByteArrayOutputStream</name></type> <name>baos</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>StringResourceFilterOutputStream</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr>new <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>baos</name> = (<name>ByteArrayOutputStream</name>) <name>out</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
            <expr_stmt><expr><call><name><name>super</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>result</name> =<init> <expr><name>encoding</name> == <name>null</name>
                    ? <call><name><name>baos</name>.<name>toString</name></name><argument_list>()</argument_list></call> : <call><name><name>baos</name>.<name>toString</name></name><argument_list>(<argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>StringResource</name>.<name>this</name>.<name>setValueFromOutputStream</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
