<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\filters\StripJavaComments.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>filters</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Reader</name></name>;</import>

<comment type="javadoc">/**
 * This is a Java comment and string stripper reader that filters
 * those lexical tokens out for purposes of simple Java parsing.
 * (if you have more complex Java parsing needs, use a real lexer).
 * Since this class heavily relies on the single char read function,
 * you are recommended to make it work on top of a buffered reader.
 *
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>StripJavaComments</name>
    <super><extends>extends <name>BaseFilterReader</name></extends>
    <implements>implements <name>ChainableReader</name></implements></super> <block>{

    <comment type="javadoc">/**
     * The read-ahead character, used for effectively pushing a single
     * character back. A value of -1 indicates that no character is in the
     * buffer.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>readAheadCh</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Whether or not the parser is currently in the middle of a string
     * literal.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>inString</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Whether or not the last char has been a backslash.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>quoted</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructor for "dummy" instances.
     *
     * @see BaseFilterReader#BaseFilterReader()
     */</comment>
    <constructor><specifier>public</specifier> <name>StripJavaComments</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a new filtered reader.
     *
     * @param in A Reader object providing the underlying stream.
     *           Must not be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <constructor><specifier>public</specifier> <name>StripJavaComments</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Reader</name></type> <name>in</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the next character in the filtered stream, not including
     * Java comments.
     *
     * @return the next character in the resulting stream, or -1
     * if the end of the resulting stream has been reached
     *
     * @exception IOException if the underlying stream throws an IOException
     * during reading
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>read</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>ch</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>readAheadCh</name> != -1</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>ch</name> = <name>readAheadCh</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>readAheadCh</name> = -1</expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>ch</name> = <call><name><name>in</name>.<name>read</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>ch</name> == '"' &amp;&amp; !<name>quoted</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>inString</name> = !<name>inString</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>quoted</name> = false</expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><name>ch</name> == '\\'</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>quoted</name> = !<name>quoted</name></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>quoted</name> = false</expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>inString</name></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><name>ch</name> == '/'</expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>ch</name> = <call><name><name>in</name>.<name>read</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>ch</name> == '/'</expr>)</condition><then> <block>{
                            <while>while <condition>(<expr><name>ch</name> != '\n' &amp;&amp; <name>ch</name> != -1 &amp;&amp; <name>ch</name> != '\r'</expr>)</condition> <block>{
                                <expr_stmt><expr><name>ch</name> = <call><name><name>in</name>.<name>read</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                            }</block></while>
                        }</block></then> <else>else <if>if <condition>(<expr><name>ch</name> == '*'</expr>)</condition><then> <block>{
                            <while>while <condition>(<expr><name>ch</name> != -1</expr>)</condition> <block>{
                                <expr_stmt><expr><name>ch</name> = <call><name><name>in</name>.<name>read</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                                <if>if <condition>(<expr><name>ch</name> == '*'</expr>)</condition><then> <block>{
                                    <expr_stmt><expr><name>ch</name> = <call><name><name>in</name>.<name>read</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                                    <while>while <condition>(<expr><name>ch</name> == '*'</expr>)</condition> <block>{
                                        <expr_stmt><expr><name>ch</name> = <call><name><name>in</name>.<name>read</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                                    }</block></while>

                                    <if>if <condition>(<expr><name>ch</name> == '/'</expr>)</condition><then> <block>{
                                        <expr_stmt><expr><name>ch</name> = <call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                                        <break>break;</break>
                                    }</block></then></if>
                                }</block></then></if>
                            }</block></while>
                        }</block></then> <else>else <block>{
                            <expr_stmt><expr><name>readAheadCh</name> = <name>ch</name></expr>;</expr_stmt>
                            <expr_stmt><expr><name>ch</name> = '/'</expr>;</expr_stmt>
                        }</block></else></if></else></if>
                    }</block></then></if>
                }</block></then></if>
            }</block></else></if></else></if>
        }</block></else></if>

        <return>return <expr><name>ch</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Creates a new StripJavaComments using the passed in
     * Reader for instantiation.
     *
     * @param rdr A Reader object providing the underlying stream.
     *            Must not be &lt;code&gt;null&lt;/code&gt;.
     *
     * @return a new filter based on this configuration, but filtering
     *         the specified reader
     */</comment>

    <function><type><specifier>public</specifier> <name>Reader</name></type> <name>chain</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Reader</name></type> <name>rdr</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>StripJavaComments</name></type> <name>newFilter</name> =<init> <expr>new <call><name>StripJavaComments</name><argument_list>(<argument><expr><name>rdr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>newFilter</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
