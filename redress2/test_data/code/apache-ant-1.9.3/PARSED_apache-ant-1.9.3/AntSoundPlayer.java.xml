<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\sound\AntSoundPlayer.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>sound</name></name>;</package>

<comment type="line">// ant includes</comment>
<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>javax</name>.<name>sound</name>.<name>sampled</name>.<name>AudioFormat</name></name>;</import>
<import>import <name><name>javax</name>.<name>sound</name>.<name>sampled</name>.<name>AudioInputStream</name></name>;</import>
<import>import <name><name>javax</name>.<name>sound</name>.<name>sampled</name>.<name>AudioSystem</name></name>;</import>
<import>import <name><name>javax</name>.<name>sound</name>.<name>sampled</name>.<name>Clip</name></name>;</import>
<import>import <name><name>javax</name>.<name>sound</name>.<name>sampled</name>.<name>DataLine</name></name>;</import>
<import>import <name><name>javax</name>.<name>sound</name>.<name>sampled</name>.<name>Line</name></name>;</import>
<import>import <name><name>javax</name>.<name>sound</name>.<name>sampled</name>.<name>LineEvent</name></name>;</import>
<import>import <name><name>javax</name>.<name>sound</name>.<name>sampled</name>.<name>LineListener</name></name>;</import>
<import>import <name><name>javax</name>.<name>sound</name>.<name>sampled</name>.<name>LineUnavailableException</name></name>;</import>
<import>import <name><name>javax</name>.<name>sound</name>.<name>sampled</name>.<name>UnsupportedAudioFileException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildListener</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>



<comment type="javadoc">/**
 * This class is designed to be used by any AntTask that requires audio output.
 *
 * It implements the BuildListener interface to listen for BuildEvents
 * and could be easily extended to provide audio output upon any
 * specific build events occurring.
 *
 * I have only tested this with .WAV and .AIFF sound file formats. Both seem to work fine.
 *
 */</comment>

<class><specifier>public</specifier> class <name>AntSoundPlayer</name> <super><implements>implements <name>LineListener</name>, <name>BuildListener</name></implements></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>fileSuccess</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>loopsSuccess</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Long</name></type> <name>durationSuccess</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>fileFail</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>loopsFail</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Long</name></type> <name>durationFail</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Constructor for AntSoundPlayer. */</comment>
    <constructor><specifier>public</specifier> <name>AntSoundPlayer</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <comment type="javadoc">/**
     * @param file the location of the audio file to be played when the
     *        build is successful
     * @param loops the number of times the file should be played when
     *        the build is successful
     * @param duration the number of milliseconds the file should be
     *        played when the build is successful
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addBuildSuccessfulSound</name><parameter_list>(<param><decl><type><name>File</name></type> <name>file</name></decl></param>, <param><decl><type><name>int</name></type> <name>loops</name></decl></param>, <param><decl><type><name>Long</name></type> <name>duration</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>fileSuccess</name></name> = <name>file</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>loopsSuccess</name></name> = <name>loops</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>durationSuccess</name></name> = <name>duration</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * @param fileFail the location of the audio file to be played
     *        when the build fails
     * @param loopsFail the number of times the file should be played
     *        when the build is fails
     * @param durationFail the number of milliseconds the file should be
     *        played when the build fails
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addBuildFailedSound</name><parameter_list>(<param><decl><type><name>File</name></type> <name>fileFail</name></decl></param>, <param><decl><type><name>int</name></type> <name>loopsFail</name></decl></param>, <param><decl><type><name>Long</name></type> <name>durationFail</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>fileFail</name></name> = <name>fileFail</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>loopsFail</name></name> = <name>loopsFail</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>durationFail</name></name> = <name>durationFail</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Plays the file for duration milliseconds or loops.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>play</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>, <param><decl><type><name>File</name></type> <name>file</name></decl></param>, <param><decl><type><name>int</name></type> <name>loops</name></decl></param>, <param><decl><type><name>Long</name></type> <name>duration</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>Clip</name></type> <name>audioClip</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>AudioInputStream</name></type> <name>audioInputStream</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>


        <try>try <block>{
            <expr_stmt><expr><name>audioInputStream</name> = <call><name><name>AudioSystem</name>.<name>getAudioInputStream</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>UnsupportedAudioFileException</name></type> <name>uafe</name></decl></param>) <block>{
            <expr_stmt><expr><call><name><name>project</name>.<name>log</name></name><argument_list>(<argument><expr>"Audio format is not yet supported: "
                + <call><name><name>uafe</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ioe</name></decl></param>) <block>{
            <expr_stmt><expr><call><name><name>ioe</name>.<name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <if>if <condition>(<expr><name>audioInputStream</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>AudioFormat</name></type> <name>format</name> =<init> <expr><call><name><name>audioInputStream</name>.<name>getFormat</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>DataLine</name>.<name>Info</name></name></type>   <name>info</name> =<init> <expr>new <call><name><name>DataLine</name>.<name>Info</name></name><argument_list>(<argument><expr><name><name>Clip</name>.<name><name/></name></name>class</expr></argument>, <argument><expr><name>format</name></expr></argument>,
                                             <argument><expr><name><name>AudioSystem</name>.<name>NOT_SPECIFIED</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <try>try <block>{
                <expr_stmt><expr><name>audioClip</name> = (<name>Clip</name>) <call><name><name>AudioSystem</name>.<name>getLine</name></name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>audioClip</name>.<name>addLineListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>audioClip</name>.<name>open</name></name><argument_list>(<argument><expr><name>audioInputStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>LineUnavailableException</name></type> <name>e</name></decl></param>) <block>{
                <expr_stmt><expr><call><name><name>project</name>.<name>log</name></name><argument_list>(<argument><expr>"The sound device is currently unavailable"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            }</block></catch> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
                <expr_stmt><expr><call><name><name>e</name>.<name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>

            <if>if <condition>(<expr><name>duration</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>playClip</name><argument_list>(<argument><expr><name>audioClip</name></expr></argument>, <argument><expr><call><name><name>duration</name>.<name>longValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>playClip</name><argument_list>(<argument><expr><name>audioClip</name></expr></argument>, <argument><expr><name>loops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><call><name><name>audioClip</name>.<name>drain</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>audioClip</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>project</name>.<name>log</name></name><argument_list>(<argument><expr>"Can't get data from file " + <call><name><name>file</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>playClip</name><parameter_list>(<param><decl><type><name>Clip</name></type> <name>clip</name></decl></param>, <param><decl><type><name>int</name></type> <name>loops</name></decl></param>)</parameter_list> <block>{

        <expr_stmt><expr><call><name><name>clip</name>.<name>loop</name></name><argument_list>(<argument><expr><name>loops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <do>do <block>{
            <try>try <block>{
                <decl_stmt><decl><type><name>long</name></type> <name>timeLeft</name> =<init>
                    <expr>(<call><name><name>clip</name>.<name>getMicrosecondLength</name></name><argument_list>()</argument_list></call> - <call><name><name>clip</name>.<name>getMicrosecondPosition</name></name><argument_list>()</argument_list></call>)
                    / 1000</expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>timeLeft</name> &gt; 0</expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>Thread</name>.<name>sleep</name></name><argument_list>(<argument><expr><name>timeLeft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block> <catch>catch (<param><decl><type><name>InterruptedException</name></type> <name>e</name></decl></param>) <block>{
                <break>break;</break>
            }</block></catch></try>
        }</block> while <condition>(<expr><call><name><name>clip</name>.<name>isRunning</name></name><argument_list>()</argument_list></call></expr>)</condition>;</do>

        <if>if <condition>(<expr><call><name><name>clip</name>.<name>isRunning</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>clip</name>.<name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>playClip</name><parameter_list>(<param><decl><type><name>Clip</name></type> <name>clip</name></decl></param>, <param><decl><type><name>long</name></type> <name>duration</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>clip</name>.<name>loop</name></name><argument_list>(<argument><expr><name><name>Clip</name>.<name>LOOP_CONTINUOUSLY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>Thread</name>.<name>sleep</name></name><argument_list>(<argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>InterruptedException</name></type> <name>e</name></decl></param>) <block>{
            <comment type="line">// Ignore Exception</comment>
        }</block></catch></try>
        <expr_stmt><expr><call><name><name>clip</name>.<name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * This is implemented to listen for any line events and closes the
     * clip if required.
     * @param event the line event to follow
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>update</name><parameter_list>(<param><decl><type><name>LineEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>event</name>.<name>getType</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><name><name>LineEvent</name>.<name>Type</name>.<name>STOP</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Line</name></type> <name>line</name> =<init> <expr><call><name><name>event</name>.<name>getLine</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>line</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>


    <comment type="javadoc">/**
     *  Fired before any targets are started.
     * @param event ignored
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>buildStarted</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
    }</block></function>

    <comment type="javadoc">/**
     *  Fired after the last target has finished. This event
     *  will still be thrown if an error occurred during the build.
     * @param event the build finished event.
     *  @see BuildEvent#getException()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>buildFinished</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>event</name>.<name>getException</name></name><argument_list>()</argument_list></call> == <name>null</name> &amp;&amp; <name>fileSuccess</name> != <name>null</name></expr>)</condition><then> <block>{
            <comment type="line">// build successfull!</comment>
            <expr_stmt><expr><call><name>play</name><argument_list>(<argument><expr><call><name><name>event</name>.<name>getProject</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>fileSuccess</name></expr></argument>, <argument><expr><name>loopsSuccess</name></expr></argument>, <argument><expr><name>durationSuccess</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>event</name>.<name>getException</name></name><argument_list>()</argument_list></call> != <name>null</name> &amp;&amp; <name>fileFail</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>play</name><argument_list>(<argument><expr><call><name><name>event</name>.<name>getProject</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>fileFail</name></expr></argument>, <argument><expr><name>loopsFail</name></expr></argument>, <argument><expr><name>durationFail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>
    }</block></function>

    <comment type="javadoc">/**
     *  Fired when a target is started.
     * @param event ignored.
     *  @see BuildEvent#getTarget()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>targetStarted</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
    }</block></function>

    <comment type="javadoc">/**
     *  Fired when a target has finished. This event will
     *  still be thrown if an error occurred during the build.
     * @param event ignored.
     *  @see BuildEvent#getException()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>targetFinished</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
    }</block></function>

    <comment type="javadoc">/**
     *  Fired when a task is started.
     * @param event ignored.
     *  @see BuildEvent#getTask()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>taskStarted</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
    }</block></function>

    <comment type="javadoc">/**
     *  Fired when a task has finished. This event will still
     *  be throw if an error occurred during the build.
     * @param event ignored.
     *  @see BuildEvent#getException()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>taskFinished</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
    }</block></function>

    <comment type="javadoc">/**
     *  Fired whenever a message is logged.
     *  @param event the build event
     *  @see BuildEvent#getMessage()
     *  @see BuildEvent#getPriority()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>messageLogged</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
    }</block></function>
}</block></class>

</unit>
