<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\condition\Matches.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>condition</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>ProjectComponent</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>RegularExpression</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>regexp</name>.<name>Regexp</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>regexp</name>.<name>RegexpUtil</name></name>;</import>

<comment type="javadoc">/**
 * Simple regular expression condition.
 *
 * @since Ant 1.7
 */</comment>
<class><specifier>public</specifier> class <name>Matches</name> <super><extends>extends <name>ProjectComponent</name></extends> <implements>implements <name>Condition</name></implements></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type>  <name>string</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>caseSensitive</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>multiLine</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>singleLine</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>RegularExpression</name></type> <name>regularExpression</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Set the string
     *
     * @param string the string to match
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setString</name><parameter_list>(<param><decl><type><name>String</name></type> <name>string</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>string</name></name> = <name>string</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the regular expression to match against
     *
     * @param pattern the regular expression pattern
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPattern</name><parameter_list>(<param><decl><type><name>String</name></type> <name>pattern</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>regularExpression</name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                <argument><expr>"Only one regular expression is allowed."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name>regularExpression</name> = new <call><name>RegularExpression</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>regularExpression</name>.<name>setPattern</name></name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * A regular expression.
     * You can use this element to refer to a previously
     * defined regular expression datatype instance
     * @param regularExpression the regular expression object
     *                          to be configured as an element
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addRegexp</name><parameter_list>(<param><decl><type><name>RegularExpression</name></type> <name>regularExpression</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>regularExpression</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                <argument><expr>"Only one regular expression is allowed."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>regularExpression</name></name> = <name>regularExpression</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Whether to ignore case or not.
     * @param b if false, ignore case.
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCasesensitive</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>caseSensitive</name> = <name>b</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Whether to match should be multiline.
     * @param b the value to set.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMultiline</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>multiLine</name> = <name>b</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Whether to treat input as singleline ('.' matches newline).
     * Corresponds to java.util.regex.Pattern.DOTALL.
     * @param b the value to set.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSingleLine</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>singleLine</name> = <name>b</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * @return true if the string matches the regular expression pattern
     * @exception BuildException if the attributes are not set correctly
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>eval</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>string</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                <argument><expr>"Parameter string is required in matches."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>regularExpression</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Missing pattern in matches."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>options</name> =<init> <expr><call><name><name>RegexpUtil</name>.<name>asOptions</name></name><argument_list>(<argument><expr><name>caseSensitive</name></expr></argument>, <argument><expr><name>multiLine</name></expr></argument>, <argument><expr><name>singleLine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Regexp</name></type> <name>regexp</name> =<init> <expr><call><name><name>regularExpression</name>.<name>getRegexp</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>regexp</name>.<name>matches</name></name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
