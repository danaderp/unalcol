<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\j2ee\JonasHotDeploymentTool.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>j2ee</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>Java</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Path</name></name>;</import>

<comment type="javadoc">/**
 *  An Ant wrapper task for the weblogic.deploy tool. This is used
 *  to hot-deploy J2EE applications to a running WebLogic server.
 *  This is &lt;b&gt;not&lt;/b&gt; the same as creating the application
 *  archive. This task assumes the archive (EAR, JAR, or WAR) file
 *  has been assembled and is supplied as the "source" attribute.
 *  &lt;p&gt;
 *
 *  In the end, this task assembles the commandline parameters and
 *  runs the weblogic.deploy tool in a separate JVM.
 *
 *@see org.apache.tools.ant.taskdefs.optional.j2ee.HotDeploymentTool
 *@see org.apache.tools.ant.taskdefs.optional.j2ee.AbstractHotDeploymentTool
 *@see org.apache.tools.ant.taskdefs.optional.j2ee.ServerDeploy
 */</comment>
<class><specifier>public</specifier> class <name>JonasHotDeploymentTool</name> <super><extends>extends <name>GenericHotDeploymentTool</name></extends> <implements>implements <name>HotDeploymentTool</name></implements></super> <block>{

    <comment type="javadoc">/**
     *  Description of the Field
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEFAULT_ORB</name> =<init> <expr>"RMI"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     *  The classname of the tool to run *
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>JONAS_DEPLOY_CLASS_NAME</name> =<init> <expr>"org.objectweb.jonas.adm.JonasAdmin"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     *  All the valid actions that weblogic.deploy permits *
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name><index>[]</index></type> <name>VALID_ACTIONS</name>
        =<init> <expr><block>{<expr><name>ACTION_DELETE</name></expr>, <expr><name>ACTION_DEPLOY</name></expr>, <expr><name>ACTION_LIST</name></expr>, <expr><name>ACTION_UNDEPLOY</name></expr>, <expr><name>ACTION_UPDATE</name></expr>}</block></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     *  Description of the Field
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>jonasroot</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     *  Description of the Field
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>orb</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     *  Description of the Field
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>davidHost</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     *  Description of the Field
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>davidPort</name></decl>;</decl_stmt>


    <comment type="javadoc">/**
     *  Set the host for the David ORB; required if
     *  ORB==david.
     *
     *@param  inValue  The new davidhost value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDavidhost</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>inValue</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>davidHost</name> = <name>inValue</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     *  Set the port for the David ORB; required if
     *  ORB==david.
     *
     *@param  inValue  The new davidport value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDavidport</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>int</name></type> <name>inValue</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>davidPort</name> = <name>inValue</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     *  set the jonas root directory (-Dinstall.root=). This
     *  element is required.
     *
     *@param  inValue  The new jonasroot value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setJonasroot</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>File</name></type> <name>inValue</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>jonasroot</name> = <name>inValue</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     *
     * Choose your ORB : RMI, JEREMIE, DAVID, ...; optional.
     * If omitted, it defaults
     * to the one present in classpath. The corresponding JOnAS JAR is
     * automatically added to the classpath. If your orb is DAVID (RMI/IIOP) you must
     * specify davidhost and davidport properties.
     *
     *@param  inValue  RMI, JEREMIE, DAVID,...
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOrb</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>inValue</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>orb</name> = <name>inValue</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     *  gets the classpath field.
     *
     *@return    A Path representing the "classpath" attribute.
     */</comment>
    <function><type><specifier>public</specifier> <name>Path</name></type> <name>getClasspath</name><parameter_list>()</parameter_list> <block>{

        <decl_stmt><decl><type><name>Path</name></type> <name>aClassPath</name> =<init> <expr><call><name><name>super</name>.<name>getClasspath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>aClassPath</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>aClassPath</name> = new <call><name>Path</name><argument_list>(<argument><expr><call><name>getTask</name><argument_list>()</argument_list></call>.<call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>orb</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>aOrbJar</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name>jonasroot</name></expr></argument>, <argument><expr>"lib/" + <name>orb</name> + "_jonas.jar"</expr></argument>)</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>aConfigDir</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name>jonasroot</name></expr></argument>, <argument><expr>"config/"</expr></argument>)</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Path</name></type> <name>aJOnASOrbPath</name> =<init> <expr>new <call><name>Path</name><argument_list>(<argument><expr><call><name><name>aClassPath</name>.<name>getProject</name></name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><name>aOrbJar</name> + <name><name>File</name>.<name>pathSeparator</name></name> + <name>aConfigDir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>aClassPath</name>.<name>append</name></name><argument_list>(<argument><expr><name>aJOnASOrbPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>aClassPath</name></expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     *  Validates the passed in attributes. &lt;p&gt;
     *
     *  The rules are:
     *  &lt;ol&gt;
     *    &lt;li&gt; If action is "deploy" or "update" the "application"
     *    and "source" attributes must be supplied.
     *    &lt;li&gt; If action is "delete" or "undeploy" the
     *    "application" attribute must be supplied.
     *
     *@exception  BuildException                       Description
     *      of Exception
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>validateAttributes</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <comment type="line">// super.validateAttributes(); // don't want to call this method</comment>

        <decl_stmt><decl><type><name>Java</name></type> <name>java</name> =<init> <expr><call><name>getJava</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>action</name> =<init> <expr><call><name>getTask</name><argument_list>()</argument_list></call>.<call><name>getAction</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>action</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"The \"action\" attribute must be set"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr>!<call><name>isActionValid</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Invalid action \"" + <name>action</name> + "\" passed"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr><call><name>getClassName</name><argument_list>()</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>setClassName</name><argument_list>(<argument><expr><name>JONAS_DEPLOY_CLASS_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>jonasroot</name> == <name>null</name> || <call><name><name>jonasroot</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>java</name>.<name>createJvmarg</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-Dinstall.root=" + <name>jonasroot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>java</name>.<name>createJvmarg</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-Djava.security.policy=" + <name>jonasroot</name>
                + "/config/java.policy"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr>"DAVID".<call><name>equals</name><argument_list>(<argument><expr><name>orb</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>java</name>.<name>createJvmarg</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-Dorg.omg.CORBA.ORBClass"
                    + "=org.objectweb.david.libs.binding.orbs.iiop.IIOPORB"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>java</name>.<name>createJvmarg</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-Dorg.omg.CORBA.ORBSingletonClass="
                    + "org.objectweb.david.libs.binding.orbs.ORBSingletonClass"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>java</name>.<name>createJvmarg</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-Djavax.rmi.CORBA.StubClass="
                    + "org.objectweb.david.libs.stub_factories.rmi.StubDelegate"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>java</name>.<name>createJvmarg</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-Djavax.rmi.CORBA.PortableRemoteObjectClass="
                    + "org.objectweb.david.libs.binding.rmi.ORBPortableRemoteObjectDelegate"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>java</name>.<name>createJvmarg</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-Djavax.rmi.CORBA.UtilClass="
                    + "org.objectweb.david.libs.helpers.RMIUtilDelegate"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>java</name>.<name>createJvmarg</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-Ddavid.CosNaming.default_method=0"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>java</name>.<name>createJvmarg</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-Ddavid.rmi.ValueHandlerClass="
                    + "com.sun.corba.se.internal.io.ValueHandlerImpl"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>davidHost</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>java</name>.<name>createJvmarg</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-Ddavid.CosNaming.default_host="
                        + <name>davidHost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <if>if <condition>(<expr><name>davidPort</name> != 0</expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>java</name>.<name>createJvmarg</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-Ddavid.CosNaming.default_port="
                        + <name>davidPort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></then></if>

        <if>if <condition>(<expr><call><name>getServer</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>java</name>.<name>createArg</name></name><argument_list>()</argument_list></call>.<call><name>setLine</name><argument_list>(<argument><expr>"-n " + <call><name>getServer</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><call><name><name>action</name>.<name>equals</name></name><argument_list>(<argument><expr><name>ACTION_DEPLOY</name></expr></argument>)</argument_list></call>
            || <call><name><name>action</name>.<name>equals</name></name><argument_list>(<argument><expr><name>ACTION_UPDATE</name></expr></argument>)</argument_list></call>
            || <call><name><name>action</name>.<name>equals</name></name><argument_list>(<argument><expr>"redeploy"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>java</name>.<name>createArg</name></name><argument_list>()</argument_list></call>.<call><name>setLine</name><argument_list>(<argument><expr>"-a " + <call><name>getTask</name><argument_list>()</argument_list></call>.<call><name>getSource</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>action</name>.<name>equals</name></name><argument_list>(<argument><expr><name>ACTION_DELETE</name></expr></argument>)</argument_list></call> || <call><name><name>action</name>.<name>equals</name></name><argument_list>(<argument><expr><name>ACTION_UNDEPLOY</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>java</name>.<name>createArg</name></name><argument_list>()</argument_list></call>.<call><name>setLine</name><argument_list>(<argument><expr>"-r " + <call><name>getTask</name><argument_list>()</argument_list></call>.<call><name>getSource</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>action</name>.<name>equals</name></name><argument_list>(<argument><expr><name>ACTION_LIST</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>java</name>.<name>createArg</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-l"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if></else></if>
    }</block></function>


    <comment type="javadoc">/**
     *  Determines if the action supplied is valid. &lt;p&gt;
     *
     *  Valid actions are contained in the static array
     *  VALID_ACTIONS
     *
     *@return    true if the action attribute is valid, false if
     *      not.
     */</comment>
    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>isActionValid</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>valid</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>action</name> =<init> <expr><call><name>getTask</name><argument_list>()</argument_list></call>.<call><name>getAction</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>VALID_ACTIONS</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <if>if <condition>(<expr><call><name><name>action</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>VALID_ACTIONS</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>valid</name> = true</expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
        }</block></for>

        <return>return <expr><name>valid</name></expr>;</return>
    }</block></function>
}</block></class>

</unit>
