<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\IntrospectionHelperTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name></name>;</package>

<import>import <name><name>junit</name>.<name>framework</name>.<name>TestCase</name></name>;</import>
<import>import <name><name>junit</name>.<name>framework</name>.<name>AssertionFailedError</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name>.<name>Method</name></name>;</import>
<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name>.<name>InvocationTargetException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Hashtable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Locale</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>condition</name>.<name>Os</name></name>;</import>

<comment type="javadoc">/**
 * JUnit 3 testcases for org.apache.tools.ant.IntrospectionHelper.
 *
 */</comment>

<class><specifier>public</specifier> class <name>IntrospectionHelperTest</name> <super><extends>extends <name>TestCase</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>Project</name></type> <name>p</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>IntrospectionHelper</name></type> <name>ih</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>projectBasedir</name> =<init> <expr><name><name>File</name>.<name>separator</name></name></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>IntrospectionHelperTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>p</name> = new <call><name>Project</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>setBasedir</name></name><argument_list>(<argument><expr><name>projectBasedir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ih</name> = <call><name><name>IntrospectionHelper</name>.<name>getHelper</name></name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testIsDynamic</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Not dynamic"</expr></argument>, <argument><expr>false == <call><name><name>ih</name>.<name>isDynamic</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testIsContainer</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Not a container"</expr></argument>, <argument><expr>false == <call><name><name>ih</name>.<name>isContainer</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testAddText</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>ih</name>.<name>addText</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr>"test"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>ih</name>.<name>addText</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr>"test2"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"test2 shouldn\'t be equal to test"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>be</name>.<name>getCause</name></name><argument_list>()</argument_list></call> <name>instanceof</name> <name>AssertionFailedError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <expr_stmt><expr><name>ih</name> = <call><name><name>IntrospectionHelper</name>.<name>getHelper</name></name><argument_list>(<argument><expr><name><name>String</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>ih</name>.<name>addText</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr>"test"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"String doesn\'t support addText"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testGetAddTextMethod</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Method</name></type> <name>m</name> =<init> <expr><call><name><name>ih</name>.<name>getAddTextMethod</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertMethod</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr>"addText"</expr></argument>, <argument><expr><name><name>String</name>.<name><name/></name></name>class</expr></argument>, <argument><expr>"test"</expr></argument>, <argument><expr>"bing!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>ih</name> = <call><name><name>IntrospectionHelper</name>.<name>getHelper</name></name><argument_list>(<argument><expr><name><name>String</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>m</name> = <call><name><name>ih</name>.<name>getAddTextMethod</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>e</name></decl></param>) <block>{}</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testSupportsCharacters</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"IntrospectionHelperTest supports addText"</expr></argument>,
                   <argument><expr><call><name><name>ih</name>.<name>supportsCharacters</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>ih</name> = <call><name><name>IntrospectionHelper</name>.<name>getHelper</name></name><argument_list>(<argument><expr><name><name>String</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"String doesn\'t support addText"</expr></argument>, <argument><expr>!<call><name><name>ih</name>.<name>supportsCharacters</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addText</name><parameter_list>(<param><decl><type><name>String</name></type> <name>text</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"test"</expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testElementCreators</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <try>try <block>{
            <expr_stmt><expr><call><name><name>ih</name>.<name>getElementType</name></name><argument_list>(<argument><expr>"one"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"don't have element type one"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
        }</block></catch></try>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>ih</name>.<name>getElementType</name></name><argument_list>(<argument><expr>"two"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"createTwo takes arguments"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
        }</block></catch></try>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>ih</name>.<name>getElementType</name></name><argument_list>(<argument><expr>"three"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"createThree returns void"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
        }</block></catch></try>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>ih</name>.<name>getElementType</name></name><argument_list>(<argument><expr>"four"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"createFour returns array"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
        }</block></catch></try>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>ih</name>.<name>getElementType</name></name><argument_list>(<argument><expr>"five"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"createFive returns primitive type"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
        }</block></catch></try>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>String</name>.<name><name/></name></name>class</expr></argument>, <argument><expr><call><name><name>ih</name>.<name>getElementType</name></name><argument_list>(<argument><expr>"six"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"test"</expr></argument>, <argument><expr><call><name><name>ih</name>.<name>createElement</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr>"six"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <try>try <block>{
            <expr_stmt><expr><call><name><name>ih</name>.<name>getElementType</name></name><argument_list>(<argument><expr>"seven"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"addSeven takes two arguments"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
        }</block></catch></try>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>ih</name>.<name>getElementType</name></name><argument_list>(<argument><expr>"eight"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"addEight takes no arguments"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
        }</block></catch></try>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>ih</name>.<name>getElementType</name></name><argument_list>(<argument><expr>"nine"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"nine return non void"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
        }</block></catch></try>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>ih</name>.<name>getElementType</name></name><argument_list>(<argument><expr>"ten"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"addTen takes array argument"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
        }</block></catch></try>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>ih</name>.<name>getElementType</name></name><argument_list>(<argument><expr>"eleven"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"addEleven takes primitive argument"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
        }</block></catch></try>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>ih</name>.<name>getElementType</name></name><argument_list>(<argument><expr>"twelve"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"no primitive constructor for java.lang.Class"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
        }</block></catch></try>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>StringBuffer</name>.<name><name/></name></name>class</expr></argument>, <argument><expr><call><name><name>ih</name>.<name>getElementType</name></name><argument_list>(<argument><expr>"thirteen"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"test"</expr></argument>, <argument><expr><call><name><name>ih</name>.<name>createElement</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr>"thirteen"</expr></argument>)</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <try>try <block>{
            <expr_stmt><expr><call><name><name>ih</name>.<name>createElement</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr>"fourteen"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"fourteen throws NullPointerException"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>be</name>.<name>getCause</name></name><argument_list>()</argument_list></call> <name>instanceof</name> <name>NullPointerException</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <try>try <block>{
            <expr_stmt><expr><call><name><name>ih</name>.<name>createElement</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr>"fourteen"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"fifteen throws NullPointerException"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>be</name>.<name>getCause</name></name><argument_list>()</argument_list></call> <name>instanceof</name> <name>NullPointerException</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>private</specifier> <name>Map</name></type> <name>getExpectedNestedElements</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Map</name></type> <name>elemMap</name> =<init> <expr>new <call><name>Hashtable</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>elemMap</name>.<name>put</name></name><argument_list>(<argument><expr>"six"</expr></argument>, <argument><expr><name><name>String</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>elemMap</name>.<name>put</name></name><argument_list>(<argument><expr>"thirteen"</expr></argument>, <argument><expr><name><name>StringBuffer</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>elemMap</name>.<name>put</name></name><argument_list>(<argument><expr>"fourteen"</expr></argument>, <argument><expr><name><name>StringBuffer</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>elemMap</name>.<name>put</name></name><argument_list>(<argument><expr>"fifteen"</expr></argument>, <argument><expr><name><name>StringBuffer</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>elemMap</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testGetNestedElements</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Map</name></type> <name>elemMap</name> =<init> <expr><call><name>getExpectedNestedElements</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Enumeration</name></type> <name>e</name> =<init> <expr><call><name><name>ih</name>.<name>getNestedElements</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>name</name> =<init> <expr>(<name>String</name>) <call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Class</name></type> <name>expect</name> =<init> <expr>(<name>Class</name>) <call><name><name>elemMap</name>.<name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr>"Support for "+<name>name</name>+" in IntrospectioNHelperTest?"</expr></argument>,
                          <argument><expr><name>expect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Return type of "+<name>name</name></expr></argument>, <argument><expr><name>expect</name></expr></argument>, <argument><expr><call><name><name>ih</name>.<name>getElementType</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>elemMap</name>.<name>remove</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Found all"</expr></argument>, <argument><expr><call><name><name>elemMap</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testGetNestedElementMap</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Map</name></type> <name>elemMap</name> =<init> <expr><call><name>getExpectedNestedElements</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Map</name></type> <name>actualMap</name> =<init> <expr><call><name><name>ih</name>.<name>getNestedElementMap</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>Iterator</name></type> <name>i</name> =<init> <expr><call><name><name>actualMap</name>.<name>entrySet</name></name><argument_list>()</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>i</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
            <decl_stmt><decl><type><name><name>Map</name>.<name>Entry</name></name></type> <name>entry</name> =<init> <expr>(<name><name>Map</name>.<name>Entry</name></name>) <call><name><name>i</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>elemName</name> =<init> <expr>(<name>String</name>) <call><name><name>entry</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Class</name></type> <name>elemClass</name> =<init> <expr>(<name>Class</name>) <call><name><name>elemMap</name>.<name>get</name></name><argument_list>(<argument><expr><name>elemName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr>"Support for " + <name>elemName</name> +
                          " in IntrospectionHelperTest?"</expr></argument>, <argument><expr><name>elemClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Type of " + <name>elemName</name></expr></argument>, <argument><expr><name>elemClass</name></expr></argument>, <argument><expr><call><name><name>entry</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>elemMap</name>.<name>remove</name></name><argument_list>(<argument><expr><name>elemName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Found all"</expr></argument>, <argument><expr><call><name><name>elemMap</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Check it's a read-only map.</comment>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>actualMap</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>UnsupportedOperationException</name></type> <name>e</name></decl></param>) <block>{}</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testGetElementMethod</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertElemMethod</name><argument_list>(<argument><expr>"six"</expr></argument>, <argument><expr>"createSix"</expr></argument>, <argument><expr><name><name>String</name>.<name><name/></name></name>class</expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertElemMethod</name><argument_list>(<argument><expr>"thirteen"</expr></argument>, <argument><expr>"addThirteen"</expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name><name>StringBuffer</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertElemMethod</name><argument_list>(<argument><expr>"fourteen"</expr></argument>, <argument><expr>"addFourteen"</expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name><name>StringBuffer</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertElemMethod</name><argument_list>(<argument><expr>"fifteen"</expr></argument>, <argument><expr>"createFifteen"</expr></argument>, <argument><expr><name><name>StringBuffer</name>.<name><name/></name></name>class</expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>assertElemMethod</name><parameter_list>(<param><decl><type><name>String</name></type> <name>elemName</name></decl></param>, <param><decl><type><name>String</name></type> <name>methodName</name></decl></param>,
                                  <param><decl><type><name>Class</name></type> <name>returnType</name></decl></param>, <param><decl><type><name>Class</name></type> <name>methodArg</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Method</name></type> <name>m</name> =<init> <expr><call><name><name>ih</name>.<name>getElementMethod</name></name><argument_list>(<argument><expr><name>elemName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Method name"</expr></argument>, <argument><expr><name>methodName</name></expr></argument>, <argument><expr><call><name><name>m</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Class</name></type> <name>expectedReturnType</name> =<init> <expr>(<name>returnType</name> == <name>null</name>)? <name><name>Void</name>.<name>TYPE</name></name>: <name>returnType</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Return type"</expr></argument>, <argument><expr><name>expectedReturnType</name></expr></argument>, <argument><expr><call><name><name>m</name>.<name>getReturnType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Class</name><index>[]</index></type> <name>args</name> =<init> <expr><call><name><name>m</name>.<name>getParameterTypes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>methodArg</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Arg Count"</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name><name>args</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Arg Type"</expr></argument>, <argument><expr><name>methodArg</name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Arg Count"</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>args</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>Object</name></type> <name>createTwo</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name>null</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>createThree</name><parameter_list>()</parameter_list> <block>{}</block></function>

    <function><type><specifier>public</specifier> <name>Object</name><index>[]</index></type> <name>createFour</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>null</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>createFive</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>0</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>createSix</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>"test"</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>StringBuffer</name></type> <name>createFifteen</name><parameter_list>()</parameter_list> <block>{
        <throw>throw <expr>new <call><name>NullPointerException</name><argument_list>()</argument_list></call></expr>;</throw>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addSeven</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s</name></decl></param>, <param><decl><type><name>String</name></type> <name>s2</name></decl></param>)</parameter_list> <block>{}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addEight</name><parameter_list>()</parameter_list> <block>{}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>addNine</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name>null</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addTen</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>s</name></decl></param>)</parameter_list> <block>{}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addEleven</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <block>{}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addTwelve</name><parameter_list>(<param><decl><type><name>Class</name></type> <name>c</name></decl></param>)</parameter_list> <block>{}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addThirteen</name><parameter_list>(<param><decl><type><name>StringBuffer</name></type> <name>sb</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>"test"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addFourteen</name><parameter_list>(<param><decl><type><name>StringBuffer</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
        <throw>throw <expr>new <call><name>NullPointerException</name><argument_list>()</argument_list></call></expr>;</throw>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testAttributeSetters</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <try>try <block>{
            <expr_stmt><expr><call><name><name>ih</name>.<name>setAttribute</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr>"one"</expr></argument>, <argument><expr>"test"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"setOne doesn't exist"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
        }</block></catch></try>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>ih</name>.<name>setAttribute</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr>"two"</expr></argument>, <argument><expr>"test"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"setTwo returns non void"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
        }</block></catch></try>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>ih</name>.<name>setAttribute</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr>"three"</expr></argument>, <argument><expr>"test"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"setThree takes no args"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
        }</block></catch></try>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>ih</name>.<name>setAttribute</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr>"four"</expr></argument>, <argument><expr>"test"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"setFour takes two args"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
        }</block></catch></try>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>ih</name>.<name>setAttribute</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr>"five"</expr></argument>, <argument><expr>"test"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"setFive takes array arg"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
        }</block></catch></try>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>ih</name>.<name>setAttribute</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr>"six"</expr></argument>, <argument><expr>"test"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Project doesn't have a String constructor"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
        }</block></catch></try>
        <expr_stmt><expr><call><name><name>ih</name>.<name>setAttribute</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr>"seven"</expr></argument>, <argument><expr>"2"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>ih</name>.<name>setAttribute</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr>"seven"</expr></argument>, <argument><expr>"3"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"2 shouldn't be equals to three"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>be</name>.<name>getCause</name></name><argument_list>()</argument_list></call> <name>instanceof</name> <name>AssertionFailedError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <expr_stmt><expr><call><name><name>ih</name>.<name>setAttribute</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr>"eight"</expr></argument>, <argument><expr>"2"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>ih</name>.<name>setAttribute</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr>"eight"</expr></argument>, <argument><expr>"3"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"2 shouldn't be equals to three - as int"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>be</name>.<name>getCause</name></name><argument_list>()</argument_list></call> <name>instanceof</name> <name>AssertionFailedError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <expr_stmt><expr><call><name><name>ih</name>.<name>setAttribute</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr>"nine"</expr></argument>, <argument><expr>"2"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>ih</name>.<name>setAttribute</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr>"nine"</expr></argument>, <argument><expr>"3"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"2 shouldn't be equals to three - as Integer"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>be</name>.<name>getCause</name></name><argument_list>()</argument_list></call> <name>instanceof</name> <name>AssertionFailedError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <expr_stmt><expr><call><name><name>ih</name>.<name>setAttribute</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr>"ten"</expr></argument>, <argument><expr>"2"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>ih</name>.<name>setAttribute</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr>"ten"</expr></argument>, <argument><expr>"3"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><name>projectBasedir</name>+"2 shouldn't be equals to "+<name>projectBasedir</name>+"3"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>be</name>.<name>getCause</name></name><argument_list>()</argument_list></call> <name>instanceof</name> <name>AssertionFailedError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <expr_stmt><expr><call><name><name>ih</name>.<name>setAttribute</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr>"eleven"</expr></argument>, <argument><expr>"2"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>ih</name>.<name>setAttribute</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr>"eleven"</expr></argument>, <argument><expr>"on"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"on shouldn't be false"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>be</name>.<name>getCause</name></name><argument_list>()</argument_list></call> <name>instanceof</name> <name>AssertionFailedError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <expr_stmt><expr><call><name><name>ih</name>.<name>setAttribute</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr>"twelve"</expr></argument>, <argument><expr>"2"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>ih</name>.<name>setAttribute</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr>"twelve"</expr></argument>, <argument><expr>"on"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"on shouldn't be false"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>be</name>.<name>getCause</name></name><argument_list>()</argument_list></call> <name>instanceof</name> <name>AssertionFailedError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <expr_stmt><expr><call><name><name>ih</name>.<name>setAttribute</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr>"thirteen"</expr></argument>, <argument><expr>"org.apache.tools.ant.Project"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>ih</name>.<name>setAttribute</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr>"thirteen"</expr></argument>, <argument><expr>"org.apache.tools.ant.ProjectHelper"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"org.apache.tools.ant.Project shouldn't be equal to org.apache.tools.ant.ProjectHelper"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>be</name>.<name>getCause</name></name><argument_list>()</argument_list></call> <name>instanceof</name> <name>AssertionFailedError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>ih</name>.<name>setAttribute</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr>"thirteen"</expr></argument>, <argument><expr>"org.apache.tools.ant.Project2"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"org.apache.tools.ant.Project2 doesn't exist"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>be</name>.<name>getCause</name></name><argument_list>()</argument_list></call> <name>instanceof</name> <name>ClassNotFoundException</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <expr_stmt><expr><call><name><name>ih</name>.<name>setAttribute</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr>"fourteen"</expr></argument>, <argument><expr>"2"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>ih</name>.<name>setAttribute</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr>"fourteen"</expr></argument>, <argument><expr>"on"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"2 shouldn't be equals to three - as StringBuffer"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>be</name>.<name>getCause</name></name><argument_list>()</argument_list></call> <name>instanceof</name> <name>AssertionFailedError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <expr_stmt><expr><call><name><name>ih</name>.<name>setAttribute</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr>"fifteen"</expr></argument>, <argument><expr>"abcd"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>ih</name>.<name>setAttribute</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr>"fifteen"</expr></argument>, <argument><expr>"on"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"o shouldn't be equal to a"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>be</name>.<name>getCause</name></name><argument_list>()</argument_list></call> <name>instanceof</name> <name>AssertionFailedError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <expr_stmt><expr><call><name><name>ih</name>.<name>setAttribute</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr>"sixteen"</expr></argument>, <argument><expr>"abcd"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>ih</name>.<name>setAttribute</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr>"sixteen"</expr></argument>, <argument><expr>"on"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"o shouldn't be equal to a"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>be</name>.<name>getCause</name></name><argument_list>()</argument_list></call> <name>instanceof</name> <name>AssertionFailedError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <expr_stmt><expr><call><name><name>ih</name>.<name>setAttribute</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr>"seventeen"</expr></argument>, <argument><expr>"17"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>ih</name>.<name>setAttribute</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr>"seventeen"</expr></argument>, <argument><expr>"3"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"17 shouldn't be equals to three"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>be</name>.<name>getCause</name></name><argument_list>()</argument_list></call> <name>instanceof</name> <name>AssertionFailedError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <expr_stmt><expr><call><name><name>ih</name>.<name>setAttribute</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr>"eightteen"</expr></argument>, <argument><expr>"18"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>ih</name>.<name>setAttribute</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr>"eightteen"</expr></argument>, <argument><expr>"3"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"18 shouldn't be equals to three"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>be</name>.<name>getCause</name></name><argument_list>()</argument_list></call> <name>instanceof</name> <name>AssertionFailedError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <expr_stmt><expr><call><name><name>ih</name>.<name>setAttribute</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr>"nineteen"</expr></argument>, <argument><expr>"19"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>ih</name>.<name>setAttribute</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr>"nineteen"</expr></argument>, <argument><expr>"3"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"19 shouldn't be equals to three"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>be</name>.<name>getCause</name></name><argument_list>()</argument_list></call> <name>instanceof</name> <name>AssertionFailedError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>private</specifier> <name>Map</name></type> <name>getExpectedAttributes</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Map</name></type> <name>attrMap</name> =<init> <expr>new <call><name>Hashtable</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>attrMap</name>.<name>put</name></name><argument_list>(<argument><expr>"seven"</expr></argument>, <argument><expr><name><name>String</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>attrMap</name>.<name>put</name></name><argument_list>(<argument><expr>"eight"</expr></argument>, <argument><expr><name><name>Integer</name>.<name>TYPE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>attrMap</name>.<name>put</name></name><argument_list>(<argument><expr>"nine"</expr></argument>, <argument><expr><name><name>Integer</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>attrMap</name>.<name>put</name></name><argument_list>(<argument><expr>"ten"</expr></argument>, <argument><expr><name><name>File</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>attrMap</name>.<name>put</name></name><argument_list>(<argument><expr>"eleven"</expr></argument>, <argument><expr><name><name>Boolean</name>.<name>TYPE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>attrMap</name>.<name>put</name></name><argument_list>(<argument><expr>"twelve"</expr></argument>, <argument><expr><name><name>Boolean</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>attrMap</name>.<name>put</name></name><argument_list>(<argument><expr>"thirteen"</expr></argument>, <argument><expr><name><name>Class</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>attrMap</name>.<name>put</name></name><argument_list>(<argument><expr>"fourteen"</expr></argument>, <argument><expr><name><name>StringBuffer</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>attrMap</name>.<name>put</name></name><argument_list>(<argument><expr>"fifteen"</expr></argument>, <argument><expr><name><name>Character</name>.<name>TYPE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>attrMap</name>.<name>put</name></name><argument_list>(<argument><expr>"sixteen"</expr></argument>, <argument><expr><name><name>Character</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>attrMap</name>.<name>put</name></name><argument_list>(<argument><expr>"seventeen"</expr></argument>, <argument><expr><name><name>Byte</name>.<name>TYPE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>attrMap</name>.<name>put</name></name><argument_list>(<argument><expr>"eightteen"</expr></argument>, <argument><expr><name><name>Short</name>.<name>TYPE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>attrMap</name>.<name>put</name></name><argument_list>(<argument><expr>"nineteen"</expr></argument>, <argument><expr><name><name>Double</name>.<name>TYPE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*
         * JUnit 3.7 adds a getName method to TestCase - so we now
         * have a name attribute in IntrospectionHelperTest if we run
         * under JUnit 3.7 but not in earlier versions.
         *
         * Simply add it here and remove it after the tests.
         */</comment>
        <expr_stmt><expr><call><name><name>attrMap</name>.<name>put</name></name><argument_list>(<argument><expr>"name"</expr></argument>, <argument><expr><name><name>String</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>attrMap</name></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testGetAttributes</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Map</name></type> <name>attrMap</name> =<init> <expr><call><name>getExpectedAttributes</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Enumeration</name></type> <name>e</name> =<init> <expr><call><name><name>ih</name>.<name>getAttributes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>name</name> =<init> <expr>(<name>String</name>) <call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Class</name></type> <name>expect</name> =<init> <expr>(<name>Class</name>) <call><name><name>attrMap</name>.<name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr>"Support for "+<name>name</name>+" in IntrospectionHelperTest?"</expr></argument>,
                          <argument><expr><name>expect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Type of "+<name>name</name></expr></argument>, <argument><expr><name>expect</name></expr></argument>, <argument><expr><call><name><name>ih</name>.<name>getAttributeType</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>attrMap</name>.<name>remove</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <expr_stmt><expr><call><name><name>attrMap</name>.<name>remove</name></name><argument_list>(<argument><expr>"name"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Found all"</expr></argument>, <argument><expr><call><name><name>attrMap</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testGetAttributeMap</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Map</name></type> <name>attrMap</name> =<init> <expr><call><name>getExpectedAttributes</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Map</name></type> <name>actualMap</name> =<init> <expr><call><name><name>ih</name>.<name>getAttributeMap</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>Iterator</name></type> <name>i</name> =<init> <expr><call><name><name>actualMap</name>.<name>entrySet</name></name><argument_list>()</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>i</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
            <decl_stmt><decl><type><name><name>Map</name>.<name>Entry</name></name></type> <name>entry</name> =<init> <expr>(<name><name>Map</name>.<name>Entry</name></name>) <call><name><name>i</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>attrName</name> =<init> <expr>(<name>String</name>) <call><name><name>entry</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Class</name></type> <name>attrClass</name> =<init> <expr>(<name>Class</name>) <call><name><name>attrMap</name>.<name>get</name></name><argument_list>(<argument><expr><name>attrName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr>"Support for " + <name>attrName</name> +
                          " in IntrospectionHelperTest?"</expr></argument>, <argument><expr><name>attrClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Type of " + <name>attrName</name></expr></argument>, <argument><expr><name>attrClass</name></expr></argument>, <argument><expr><call><name><name>entry</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>attrMap</name>.<name>remove</name></name><argument_list>(<argument><expr><name>attrName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name><name>attrMap</name>.<name>remove</name></name><argument_list>(<argument><expr>"name"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Found all"</expr></argument>, <argument><expr><call><name><name>attrMap</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Check it's a read-only map.</comment>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>actualMap</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>UnsupportedOperationException</name></type> <name>e</name></decl></param>) <block>{}</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testGetAttributeMethod</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertAttrMethod</name><argument_list>(<argument><expr>"seven"</expr></argument>, <argument><expr>"setSeven"</expr></argument>, <argument><expr><name><name>String</name>.<name><name/></name></name>class</expr></argument>,
                         <argument><expr>"2"</expr></argument>, <argument><expr>"3"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertAttrMethod</name><argument_list>(<argument><expr>"eight"</expr></argument>, <argument><expr>"setEight"</expr></argument>, <argument><expr><name><name>Integer</name>.<name>TYPE</name></name></expr></argument>,
                         <argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr>3</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertAttrMethod</name><argument_list>(<argument><expr>"nine"</expr></argument>, <argument><expr>"setNine"</expr></argument>, <argument><expr><name><name>Integer</name>.<name><name/></name></name>class</expr></argument>,
                         <argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr>3</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertAttrMethod</name><argument_list>(<argument><expr>"ten"</expr></argument>, <argument><expr>"setTen"</expr></argument>, <argument><expr><name><name>File</name>.<name><name/></name></name>class</expr></argument>,
                         <argument><expr>new <call><name>File</name><argument_list>(<argument><expr><name>projectBasedir</name> + 2</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <call><name>File</name><argument_list>(<argument><expr>"toto"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertAttrMethod</name><argument_list>(<argument><expr>"eleven"</expr></argument>, <argument><expr>"setEleven"</expr></argument>, <argument><expr><name><name>Boolean</name>.<name>TYPE</name></name></expr></argument>,
                         <argument><expr><name><name>Boolean</name>.<name>FALSE</name></name></expr></argument>, <argument><expr><name><name>Boolean</name>.<name>TRUE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertAttrMethod</name><argument_list>(<argument><expr>"twelve"</expr></argument>, <argument><expr>"setTwelve"</expr></argument>, <argument><expr><name><name>Boolean</name>.<name><name/></name></name>class</expr></argument>,
                         <argument><expr><name><name>Boolean</name>.<name>FALSE</name></name></expr></argument>, <argument><expr><name><name>Boolean</name>.<name>TRUE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertAttrMethod</name><argument_list>(<argument><expr>"thirteen"</expr></argument>, <argument><expr>"setThirteen"</expr></argument>, <argument><expr><name><name>Class</name>.<name><name/></name></name>class</expr></argument>,
                         <argument><expr><name><name>Project</name>.<name><name/></name></name>class</expr></argument>, <argument><expr><name><name>Map</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertAttrMethod</name><argument_list>(<argument><expr>"fourteen"</expr></argument>, <argument><expr>"setFourteen"</expr></argument>, <argument><expr><name><name>StringBuffer</name>.<name><name/></name></name>class</expr></argument>,
                         <argument><expr>new <call><name>StringBuffer</name><argument_list>(<argument><expr>"2"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <call><name>StringBuffer</name><argument_list>(<argument><expr>"3"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertAttrMethod</name><argument_list>(<argument><expr>"fifteen"</expr></argument>, <argument><expr>"setFifteen"</expr></argument>, <argument><expr><name><name>Character</name>.<name>TYPE</name></name></expr></argument>,
                         <argument><expr>new <call><name>Character</name><argument_list>(<argument><expr>'a'</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <call><name>Character</name><argument_list>(<argument><expr>'b'</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertAttrMethod</name><argument_list>(<argument><expr>"sixteen"</expr></argument>, <argument><expr>"setSixteen"</expr></argument>, <argument><expr><name><name>Character</name>.<name><name/></name></name>class</expr></argument>,
                         <argument><expr>new <call><name>Character</name><argument_list>(<argument><expr>'a'</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <call><name>Character</name><argument_list>(<argument><expr>'b'</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertAttrMethod</name><argument_list>(<argument><expr>"seventeen"</expr></argument>, <argument><expr>"setSeventeen"</expr></argument>, <argument><expr><name><name>Byte</name>.<name>TYPE</name></name></expr></argument>,
                         <argument><expr>new <call><name>Byte</name><argument_list>(<argument><expr>(<name>byte</name>)17</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <call><name>Byte</name><argument_list>(<argument><expr>(<name>byte</name>)10</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertAttrMethod</name><argument_list>(<argument><expr>"eightteen"</expr></argument>, <argument><expr>"setEightteen"</expr></argument>, <argument><expr><name><name>Short</name>.<name>TYPE</name></name></expr></argument>,
                         <argument><expr>new <call><name>Short</name><argument_list>(<argument><expr>(<name>short</name>)18</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <call><name>Short</name><argument_list>(<argument><expr>(<name>short</name>)10</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertAttrMethod</name><argument_list>(<argument><expr>"nineteen"</expr></argument>, <argument><expr>"setNineteen"</expr></argument>, <argument><expr><name><name>Double</name>.<name>TYPE</name></name></expr></argument>,
                         <argument><expr>new <call><name>Double</name><argument_list>(<argument><expr>19</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <call><name>Double</name><argument_list>(<argument><expr>(<name>short</name>)10</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <try>try <block>{
            <expr_stmt><expr><call><name>assertAttrMethod</name><argument_list>(<argument><expr>"onehundred"</expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Should have raised a BuildException!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>e</name></decl></param>) <block>{}</block></catch></try>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>assertAttrMethod</name><parameter_list>(<param><decl><type><name>String</name></type> <name>attrName</name></decl></param>, <param><decl><type><name>String</name></type> <name>methodName</name></decl></param>,
                                  <param><decl><type><name>Class</name></type> <name>methodArg</name></decl></param>, <param><decl><type><name>Object</name></type> <name>arg</name></decl></param>, <param><decl><type><name>Object</name></type> <name>badArg</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Method</name></type> <name>m</name> =<init> <expr><call><name><name>ih</name>.<name>getAttributeMethod</name></name><argument_list>(<argument><expr><name>attrName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertMethod</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>methodName</name></expr></argument>, <argument><expr><name>methodArg</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>badArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>setTwo</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>0</expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setThree</name><parameter_list>()</parameter_list> <block>{}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFour</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s1</name></decl></param>, <param><decl><type><name>String</name></type> <name>s2</name></decl></param>)</parameter_list> <block>{}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFive</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>s</name></decl></param>)</parameter_list> <block>{}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSix</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>p</name></decl></param>)</parameter_list> <block>{}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSeven</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"2"</expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setEight</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setNine</name><parameter_list>(<param><decl><type><name>Integer</name></type> <name>i</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr><call><name><name>i</name>.<name>intValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTen</name><parameter_list>(<param><decl><type><name>File</name></type> <name>f</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>path</name> =<init> <expr><call><name><name>f</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr>"unix"</expr></argument>)</argument_list></call> || <call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr>"openvms"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>projectBasedir</name>+"2"</expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr>"netware"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>projectBasedir</name>+"2"</expr></argument>, <argument><expr><call><name><name>path</name>.<name>toLowerCase</name></name><argument_list>(<argument><expr><name><name>Locale</name>.<name>US</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>":"+<name>projectBasedir</name>+"2"</expr></argument>,
                         <argument><expr><call><name><name>path</name>.<name>toLowerCase</name></name><argument_list>(<argument><expr><name><name>Locale</name>.<name>US</name></name></expr></argument>)</argument_list></call>.<call><name>substring</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if></else></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setEleven</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>!<name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTwelve</name><parameter_list>(<param><decl><type><name>Boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>!<call><name><name>b</name>.<name>booleanValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setThirteen</name><parameter_list>(<param><decl><type><name>Class</name></type> <name>c</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Project</name>.<name><name/></name></name>class</expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFourteen</name><parameter_list>(<param><decl><type><name>StringBuffer</name></type> <name>sb</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"2"</expr></argument>, <argument><expr><call><name><name>sb</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFifteen</name><parameter_list>(<param><decl><type><name>char</name></type> <name>c</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr>'a'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSixteen</name><parameter_list>(<param><decl><type><name>Character</name></type> <name>c</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>c</name>.<name>charValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>'a'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSeventeen</name><parameter_list>(<param><decl><type><name>byte</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>17</expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setEightteen</name><parameter_list>(<param><decl><type><name>short</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>18</expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setNineteen</name><parameter_list>(<param><decl><type><name>double</name></type> <name>d</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>diff</name> =<init> <expr><name>d</name> - 19</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Expected 19, received " + <name>d</name></expr></argument>, <argument><expr><name>diff</name> &gt; -1e-6 &amp;&amp; <name>diff</name> &lt; 1e-6</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testGetExtensionPoints</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>List</name></type> <name>extensions</name> =<init> <expr><call><name><name>ih</name>.<name>getExtensionPoints</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>adders</name> =<init> <expr>2</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"extension count"</expr></argument>, <argument><expr><name>adders</name></expr></argument>, <argument><expr><call><name><name>extensions</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// this original test assumed something about the order of</comment>
        <comment type="line">// add(Number) and addConfigured(Map) returned by reflection.</comment>
        <comment type="line">// Unfortunately the assumption doesn't hold for all VMs</comment>
        <comment type="line">// (failed on MacOS X using JDK 1.4.2_05) and the possible</comment>
        <comment type="line">// combinatorics are too hard to check.  We really only want</comment>
        <comment type="line">// to ensure that the more derived Hashtable can be found</comment>
        <comment type="line">// before Map.</comment>
<comment type="line">//        assertExtMethod(extensions.get(0), "add", Number.class,</comment>
<comment type="line">//                        new Integer(2), new Integer(3));</comment>

        <comment type="line">// addConfigured(Hashtable) should come before addConfigured(Map)</comment>
        <expr_stmt><expr><call><name>assertExtMethod</name><argument_list>(<argument><expr><call><name><name>extensions</name>.<name>get</name></name><argument_list>(<argument><expr><name>adders</name> - 2</expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr>"addConfigured"</expr></argument>, <argument><expr><name><name>Hashtable</name>.<name><name/></name></name>class</expr></argument>,
                        <argument><expr><call><name>makeTable</name><argument_list>(<argument><expr>"key"</expr></argument>, <argument><expr>"value"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>makeTable</name><argument_list>(<argument><expr>"1"</expr></argument>, <argument><expr>"2"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertExtMethod</name><argument_list>(<argument><expr><call><name><name>extensions</name>.<name>get</name></name><argument_list>(<argument><expr><name>adders</name> - 1</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"addConfigured"</expr></argument>, <argument><expr><name><name>Map</name>.<name><name/></name></name>class</expr></argument>,
                        <argument><expr>new <call><name>HashMap</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>makeTable</name><argument_list>(<argument><expr>"1"</expr></argument>, <argument><expr>"2"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>assertExtMethod</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>mo</name></decl></param>, <param><decl><type><name>String</name></type> <name>methodName</name></decl></param>, <param><decl><type><name>Class</name></type> <name>methodArg</name></decl></param>,
                                 <param><decl><type><name>Object</name></type> <name>arg</name></decl></param>, <param><decl><type><name>Object</name></type> <name>badArg</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertMethod</name><argument_list>(<argument><expr>(<name>Method</name>) <name>mo</name></expr></argument>, <argument><expr><name>methodName</name></expr></argument>, <argument><expr><name>methodArg</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>badArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>assertMethod</name><parameter_list>(<param><decl><type><name>Method</name></type> <name>m</name></decl></param>, <param><decl><type><name>String</name></type> <name>methodName</name></decl></param>, <param><decl><type><name>Class</name></type> <name>methodArg</name></decl></param>,
                              <param><decl><type><name>Object</name></type> <name>arg</name></decl></param>, <param><decl><type><name>Object</name></type> <name>badArg</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Method name"</expr></argument>, <argument><expr><name>methodName</name></expr></argument>, <argument><expr><call><name><name>m</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Return type"</expr></argument>, <argument><expr><name><name>Void</name>.<name>TYPE</name></name></expr></argument>, <argument><expr><call><name><name>m</name>.<name>getReturnType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Class</name><index>[]</index></type> <name>args</name> =<init> <expr><call><name><name>m</name>.<name>getParameterTypes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Arg Count"</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name><name>args</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Arg Type"</expr></argument>, <argument><expr><name>methodArg</name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <try>try <block>{
            <expr_stmt><expr><call><name><name>m</name>.<name>invoke</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr>new <name><name>Object</name><index>[]</index></name> <block>{ <expr><name>arg</name></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>IllegalAccessException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <catch>catch (<param><decl><type><name>InvocationTargetException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>

        <try>try <block>{
            <expr_stmt><expr><call><name><name>m</name>.<name>invoke</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr>new <name><name>Object</name><index>[]</index></name> <block>{ <expr><name>badArg</name></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Should have raised an assertion exception"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>IllegalAccessException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <catch>catch (<param><decl><type><name>InvocationTargetException</name></type> <name>e</name></decl></param>) <block>{
            <decl_stmt><decl><type><name>Throwable</name></type> <name>t</name> =<init> <expr><call><name><name>e</name>.<name>getTargetException</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>t</name> <name>instanceof</name> <name><name>junit</name>.<name>framework</name>.<name>AssertionFailedError</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>List</name></type> <name>add</name><parameter_list>(<param><decl><type><name>List</name></type> <name>l</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// INVALID extension point</comment>
        <return>return <expr><name>null</name></expr>;</return>
    }</block></function>

    <comment type="line">// see comments in testGetExtensionPoints</comment>
<comment type="line">//    public void add(Number n) {</comment>
<comment type="line">//        // Valid extension point</comment>
<comment type="line">//        assertEquals(2, n.intValue());</comment>
<comment type="line">//    }</comment>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>List</name></type> <name>l</name></decl></param>, <param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// INVALID extension point</comment>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addConfigured</name><parameter_list>(<param><decl><type><name>Map</name></type> <name>m</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// Valid extension point</comment>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>m</name>.<name>size</name></name><argument_list>()</argument_list></call> == 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addConfigured</name><parameter_list>(<param><decl><type><name>Hashtable</name></type> <name>h</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// Valid extension point, more derived than Map above, but *after* it!</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>makeTable</name><argument_list>(<argument><expr>"key"</expr></argument>, <argument><expr>"value"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>Hashtable</name></type> <name>makeTable</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>key</name></decl></param>, <param><decl><type><name>Object</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Hashtable</name></type> <name>table</name> =<init> <expr>new <call><name>Hashtable</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>table</name>.<name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>table</name></expr>;</return>
    }</block></function>

}</block></class> <comment type="line">// IntrospectionHelperTest</comment>

</unit>
