<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\TaskAdapter.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name></name>;</package>

<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name>.<name>Method</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>dispatch</name>.<name>Dispatchable</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>dispatch</name>.<name>DispatchUtils</name></name>;</import>

<comment type="javadoc">/**
 * Uses introspection to "adapt" an arbitrary Bean which doesn't
 * itself extend Task, but still contains an execute method and optionally
 * a setProject method.
 *
 */</comment>
<class><specifier>public</specifier> class <name>TaskAdapter</name> <super><extends>extends <name>Task</name></extends> <implements>implements <name>TypeAdapter</name></implements></super> <block>{

    <comment type="javadoc">/** Object to act as a proxy for. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Object</name></type> <name>proxy</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * No-arg constructor for reflection.
     */</comment>
    <constructor><specifier>public</specifier> <name>TaskAdapter</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructor for given proxy.
     * So you could write easier code
     * &lt;pre&gt;
     * myTaskContainer.addTask( new TaskAdapter(myProxy) );
     * &lt;/pre&gt;
     *
     * @param proxy The object which Ant should use as task.
     */</comment>
    <constructor><specifier>public</specifier> <name>TaskAdapter</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>proxy</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setProxy</name><argument_list>(<argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Checks whether or not a class is suitable to be adapted by TaskAdapter.
     * If the class is of type Dispatchable, the check is not performed because
     * the method that will be executed will be determined only at runtime of
     * the actual task and not during parse time.
     *
     * This only checks conditions which are additionally required for
     * tasks adapted by TaskAdapter. Thus, this method should be called by
     * Project.checkTaskClass.
     *
     * Throws a BuildException and logs as Project.MSG_ERR for
     * conditions that will cause the task execution to fail.
     * Logs other suspicious conditions with Project.MSG_WARN.
     *
     * @param taskClass Class to test for suitability.
     *                  Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param project   Project to log warnings/errors to.
     *                  Must not be &lt;code&gt;null&lt;/code&gt;.
     *
     * @see Project#checkTaskClass(Class)
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>checkTaskClass</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>taskClass</name></decl></param>,
                                      <param><decl><type><specifier>final</specifier> <name>Project</name></type> <name>project</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr>!<name><name>Dispatchable</name>.<name><name/></name></name>class.<call><name>isAssignableFrom</name><argument_list>(<argument><expr><name>taskClass</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">// don't have to check for interface, since then</comment>
            <comment type="line">// taskClass would be abstract too.</comment>
            <try>try <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>Method</name></type> <name>executeM</name> =<init> <expr><call><name><name>taskClass</name>.<name>getMethod</name></name><argument_list>(<argument><expr>"execute"</expr></argument>, <argument><expr>(<name><name>Class</name><index>[]</index></name>) <name>null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <comment type="line">// don't have to check for public, since</comment>
                <comment type="line">// getMethod finds public method only.</comment>
                <comment type="line">// don't have to check for abstract, since then</comment>
                <comment type="line">// taskClass would be abstract too.</comment>
                <if>if <condition>(<expr>!<call><name><name>Void</name>.<name>TYPE</name>.<name>equals</name></name><argument_list>(<argument><expr><call><name><name>executeM</name>.<name>getReturnType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>message</name> =<init> <expr>"return type of execute() should be "
                        + "void but was \"" + <call><name><name>executeM</name>.<name>getReturnType</name></name><argument_list>()</argument_list></call> + "\" in "
                        + <name>taskClass</name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>project</name>.<name>log</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block> <catch>catch (<param><decl><type><name>NoSuchMethodException</name></type> <name>e</name></decl></param>) <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>message</name> =<init> <expr>"No public execute() in " + <name>taskClass</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>project</name>.<name>log</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_ERR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch> <catch>catch (<param><decl><type><name>LinkageError</name></type> <name>e</name></decl></param>) <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>message</name> =<init> <expr>"Could not load " + <name>taskClass</name> + ": " + <name>e</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>project</name>.<name>log</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_ERR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Check if the proxy class is a valid class to use
     * with this adapter.
     * The class must have a public no-arg "execute()" method.
     * @param proxyClass the class to check.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>checkProxyClass</name><parameter_list>(<param><decl><type><name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>proxyClass</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>checkTaskClass</name><argument_list>(<argument><expr><name>proxyClass</name></expr></argument>, <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Executes the proxied task.
     *
     * @exception BuildException if the project could not be set
     * or the method could not be executed.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <try>try <block>{
            <decl_stmt><decl><type><name>Method</name></type> <name>setLocationM</name> =<init> <expr><call><name><name>proxy</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getMethod</name><argument_list>(
                <argument><expr>"setLocation"</expr></argument>, <argument><expr>new <name><name>Class</name><index>[]</index></name> <block>{<expr><name><name>Location</name>.<name><name/></name></name>class</expr>}</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>setLocationM</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>setLocationM</name>.<name>invoke</name></name><argument_list>(<argument><expr><name>proxy</name></expr></argument>, <argument><expr>new <name><name>Object</name><index>[]</index></name> <block>{<expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block> <catch>catch (<param><decl><type><name>NoSuchMethodException</name></type> <name>e</name></decl></param>) <block>{
            <comment type="line">// ignore this if the class being used as a task does not have</comment>
            <comment type="line">// a set location method.</comment>
        }</block></catch> <catch>catch (<param><decl><type><name>Exception</name></type> <name>ex</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Error setting location in " + <call><name><name>proxy</name>.<name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><name><name>Project</name>.<name>MSG_ERR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>

        <try>try <block>{
            <decl_stmt><decl><type><name>Method</name></type> <name>setProjectM</name> =<init> <expr><call><name><name>proxy</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getMethod</name><argument_list>(
                <argument><expr>"setProject"</expr></argument>, <argument><expr>new <name><name>Class</name><index>[]</index></name> <block>{<expr><name><name>Project</name>.<name><name/></name></name>class</expr>}</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>setProjectM</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>setProjectM</name>.<name>invoke</name></name><argument_list>(<argument><expr><name>proxy</name></expr></argument>, <argument><expr>new <name><name>Object</name><index>[]</index></name> <block>{<expr><call><name>getProject</name><argument_list>()</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block> <catch>catch (<param><decl><type><name>NoSuchMethodException</name></type> <name>e</name></decl></param>) <block>{
            <comment type="line">// ignore this if the class being used as a task does not have</comment>
            <comment type="line">// a set project method.</comment>
        }</block></catch> <catch>catch (<param><decl><type><name>Exception</name></type> <name>ex</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Error setting project in " + <call><name><name>proxy</name>.<name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><name><name>Project</name>.<name>MSG_ERR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>

        <try>try <block>{
            <expr_stmt><expr><call><name><name>DispatchUtils</name>.<name>execute</name></name><argument_list>(<argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
            <throw>throw <expr><name>be</name></expr>;</throw>
        }</block></catch> <catch>catch (<param><decl><type><name>Exception</name></type> <name>ex</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Error in " + <call><name><name>proxy</name>.<name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the target object to proxy for.
     *
     * @param o The target object. Must not be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setProxy</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>o</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>proxy</name></name> = <name>o</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the target object being proxied.
     *
     * @return the target proxy object.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>getProxy</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>proxy</name></expr>;</return>
    }</block></function>

}</block></class>
</unit>
