<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\filters\BaseFilterReader.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>filters</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>FilterReader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Reader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>StringReader</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>

<comment type="javadoc">/**
 * Base class for core filter readers.
 *
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>BaseFilterReader</name> <super><extends>extends <name>FilterReader</name></extends></super> <block>{
    <comment type="javadoc">/** Buffer size used when reading */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>BUFFER_SIZE</name> =<init> <expr>8192</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Have the parameters passed been interpreted? */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>initialized</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The Ant project this filter is part of. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Project</name></type> <name>project</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructor used by Ant's introspection mechanism.
     * The original filter reader is only used for chaining
     * purposes, never for filtering purposes (and indeed
     * it would be useless for filtering purposes, as it has
     * no real data to filter). ChainedReaderHelper uses
     * this placeholder instance to create a chain of real filters.
     */</comment>
    <constructor><specifier>public</specifier> <name>BaseFilterReader</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr>new <call><name>StringReader</name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a new filtered reader.
     *
     * @param in A Reader object providing the underlying stream.
     *           Must not be &lt;code&gt;null&lt;/code&gt;.
     *
     */</comment>
    <constructor><specifier>public</specifier> <name>BaseFilterReader</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Reader</name></type> <name>in</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Reads characters into a portion of an array.  This method will block
     * until some input is available, an I/O error occurs, or the end of the
     * stream is reached.
     *
     * @param      cbuf  Destination buffer to write characters to.
     *                   Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param      off   Offset at which to start storing characters.
     * @param      len   Maximum number of characters to read.
     *
     * @return     the number of characters read, or -1 if the end of the
     *             stream has been reached
     *
     * @exception  IOException  If an I/O error occurs
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>read</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>char</name><index>[]</index></name></type> <name>cbuf</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>int</name></type> <name>off</name></decl></param>,
                          <param><decl><type><specifier>final</specifier> <name>int</name></type> <name>len</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>ch</name> =<init> <expr><call><name>read</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>ch</name> == -1</expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>i</name> == 0</expr>)</condition><then> <block>{
                    <return>return <expr>-1</expr>;</return>
                }</block></then> <else>else <block>{
                    <return>return <expr><name>i</name></expr>;</return>
                }</block></else></if>
            }</block></then></if>
            <expr_stmt><expr><name><name>cbuf</name><index>[<expr><name>off</name> + <name>i</name></expr>]</index></name> = (<name>char</name>) <name>ch</name></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>len</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Skips characters.  This method will block until some characters are
     * available, an I/O error occurs, or the end of the stream is reached.
     *
     * @param  n  The number of characters to skip
     *
     * @return    the number of characters actually skipped
     *
     * @exception  IllegalArgumentException  If &lt;code&gt;n&lt;/code&gt; is negative.
     * @exception  IOException  If an I/O error occurs
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>long</name></type> <name>skip</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>long</name></type> <name>n</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>IllegalArgumentException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>n</name> &lt; 0L</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"skip value is negative"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <for>for (<init><decl><type><name>long</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <if>if <condition>(<expr><call><name>read</name><argument_list>()</argument_list></call> == -1</expr>)</condition><then> <block>{
                <return>return <expr><name>i</name></expr>;</return>
            }</block></then></if>
        }</block></for>
        <return>return <expr><name>n</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the initialized status.
     *
     * @param initialized Whether or not the filter is initialized.
     */</comment>
    <function><type><specifier>protected</specifier> <specifier>final</specifier> <name>void</name></type> <name>setInitialized</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>initialized</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>initialized</name></name> = <name>initialized</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the initialized status.
     *
     * @return whether or not the filter is initialized
     */</comment>
    <function><type><specifier>protected</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>getInitialized</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>initialized</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the project to work with.
     *
     * @param project The project this filter is part of.
     *                Should not be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>setProject</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Project</name></type> <name>project</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>project</name></name> = <name>project</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the project this filter is part of.
     *
     * @return the project this filter is part of
     */</comment>
    <function><type><specifier>protected</specifier> <specifier>final</specifier> <name>Project</name></type> <name>getProject</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>project</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Reads a line of text ending with '\n' (or until the end of the stream).
     * The returned String retains the '\n'.
     *
     * @return the line read, or &lt;code&gt;null&lt;/code&gt; if the end of the stream
     * has already been reached
     *
     * @exception IOException if the underlying reader throws one during
     *                        reading
     */</comment>
    <function><type><specifier>protected</specifier> <specifier>final</specifier> <name>String</name></type> <name>readLine</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>ch</name> =<init> <expr><call><name><name>in</name>.<name>read</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>ch</name> == -1</expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>line</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <while>while <condition>(<expr><name>ch</name> != -1</expr>)</condition> <block>{
            <expr_stmt><expr><call><name><name>line</name>.<name>append</name></name> <argument_list>(<argument><expr>(<name>char</name>) <name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>ch</name> == '\n'</expr>)</condition><then> <block>{
                <break>break;</break>
            }</block></then></if>
            <expr_stmt><expr><name>ch</name> = <call><name><name>in</name>.<name>read</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <return>return <expr><call><name><name>line</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Reads to the end of the stream, returning the contents as a String.
     *
     * @return the remaining contents of the reader, as a String
     *
     * @exception IOException if the underlying reader throws one during
     *            reading
     */</comment>
    <function><type><specifier>protected</specifier> <specifier>final</specifier> <name>String</name></type> <name>readFully</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name><name>FileUtils</name>.<name>readFully</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
