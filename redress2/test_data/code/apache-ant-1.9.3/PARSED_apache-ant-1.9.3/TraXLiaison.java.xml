<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\TraXLiaison.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>BufferedInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>BufferedOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>OutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name>.<name>Field</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Hashtable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>URL</name></name>;</import>
<import>import <name><name>javax</name>.<name>xml</name>.<name>parsers</name>.<name>ParserConfigurationException</name></name>;</import>
<import>import <name><name>javax</name>.<name>xml</name>.<name>parsers</name>.<name>SAXParserFactory</name></name>;</import>
<import>import <name><name>javax</name>.<name>xml</name>.<name>transform</name>.<name>ErrorListener</name></name>;</import>
<import>import <name><name>javax</name>.<name>xml</name>.<name>transform</name>.<name>Source</name></name>;</import>
<import>import <name><name>javax</name>.<name>xml</name>.<name>transform</name>.<name>SourceLocator</name></name>;</import>
<import>import <name><name>javax</name>.<name>xml</name>.<name>transform</name>.<name>Templates</name></name>;</import>
<import>import <name><name>javax</name>.<name>xml</name>.<name>transform</name>.<name>Transformer</name></name>;</import>
<import>import <name><name>javax</name>.<name>xml</name>.<name>transform</name>.<name>TransformerException</name></name>;</import>
<import>import <name><name>javax</name>.<name>xml</name>.<name>transform</name>.<name>TransformerFactory</name></name>;</import>
<import>import <name><name>javax</name>.<name>xml</name>.<name>transform</name>.<name>URIResolver</name></name>;</import>
<import>import <name><name>javax</name>.<name>xml</name>.<name>transform</name>.<name>sax</name>.<name>SAXSource</name></name>;</import>
<import>import <name><name>javax</name>.<name>xml</name>.<name>transform</name>.<name>stream</name>.<name>StreamResult</name></name>;</import>
<import>import <name><name>javax</name>.<name>xml</name>.<name>transform</name>.<name>stream</name>.<name>StreamSource</name></name>;</import>
<import>import <name><name>javax</name>.<name>xml</name>.<name>transform</name>.<name>TransformerConfigurationException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>XSLTLiaison4</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>XSLTLogger</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>XSLTLoggerAware</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>XSLTProcess</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>XMLCatalog</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Resource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>FileProvider</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>FileResource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>URLProvider</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>JAXPUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>xml</name>.<name>sax</name>.<name>EntityResolver</name></name>;</import>
<import>import <name><name>org</name>.<name>xml</name>.<name>sax</name>.<name>InputSource</name></name>;</import>
<import>import <name><name>org</name>.<name>xml</name>.<name>sax</name>.<name>SAXException</name></name>;</import>
<import>import <name><name>org</name>.<name>xml</name>.<name>sax</name>.<name>XMLReader</name></name>;</import>

<comment type="javadoc">/**
 * Concrete liaison for XSLT processor implementing TraX. (ie JAXP 1.1)
 *
 * @since Ant 1.3
 */</comment>
<class><specifier>public</specifier> class <name>TraXLiaison</name> <super><implements>implements <name>XSLTLiaison4</name>, <name>ErrorListener</name>, <name>XSLTLoggerAware</name></implements></super> <block>{

    <comment type="javadoc">/**
     * Helper for transforming filenames to URIs.
     *
     * @since Ant 1.7
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>FileUtils</name></type> <name>FILE_UTILS</name> =<init> <expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The current &lt;code&gt;Project&lt;/code&gt;
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Project</name></type> <name>project</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * the name of the factory implementation class to use
     * or null for default JAXP lookup.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>factoryName</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The trax TransformerFactory */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>TransformerFactory</name></type> <name>tfactory</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** stylesheet to use for transformation */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Resource</name></type> <name>stylesheet</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>XSLTLogger</name></type> <name>logger</name></decl>;</decl_stmt>

    <comment type="javadoc">/** possible resolver for publicIds */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>EntityResolver</name></type> <name>entityResolver</name></decl>;</decl_stmt>

    <comment type="javadoc">/** transformer to use for processing files */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Transformer</name></type> <name>transformer</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The In memory version of the stylesheet */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Templates</name></type> <name>templates</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The modification time of the stylesheet from which the templates
     * are read
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>templatesModTime</name></decl>;</decl_stmt>

    <comment type="javadoc">/** possible resolver for URIs */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>URIResolver</name></type> <name>uriResolver</name></decl>;</decl_stmt>

    <comment type="javadoc">/** transformer output properties */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Vector</name></type> <name>outputProperties</name> =<init> <expr>new <call><name>Vector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** stylesheet parameters */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>params</name> =<init> <expr>new <call><name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** factory attributes */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Vector</name></type> <name>attributes</name> =<init> <expr>new <call><name>Vector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** whether to suppress warnings */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>suppressWarnings</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** optional trace configuration. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>XSLTProcess</name>.<name>TraceConfiguration</name></name></type> <name>traceConfiguration</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructor for TraXLiaison.
     * @throws Exception never
     */</comment>
    <constructor><specifier>public</specifier> <name>TraXLiaison</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
    }</block></constructor>

    <comment type="javadoc">/**
     * Set the stylesheet file.
     * @param stylesheet a &lt;code&gt;File&lt;/code&gt; value
     * @throws Exception on error
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setStylesheet</name><parameter_list>(<param><decl><type><name>File</name></type> <name>stylesheet</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>FileResource</name></type> <name>fr</name> =<init> <expr>new <call><name>FileResource</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>fr</name>.<name>setProject</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>fr</name>.<name>setFile</name></name><argument_list>(<argument><expr><name>stylesheet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setStylesheet</name><argument_list>(<argument><expr><name>fr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the stylesheet file.
     * @param stylesheet a {@link org.apache.tools.ant.types.Resource} value
     * @throws Exception on error
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setStylesheet</name><parameter_list>(<param><decl><type><name>Resource</name></type> <name>stylesheet</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>stylesheet</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <comment type="line">// resetting the stylesheet - reset transformer</comment>
            <expr_stmt><expr><name>transformer</name> = <name>null</name></expr>;</expr_stmt>

            <comment type="line">// do we need to reset templates as well</comment>
            <if>if <condition>(<expr>!<call><name><name>this</name>.<name>stylesheet</name>.<name>equals</name></name><argument_list>(<argument><expr><name>stylesheet</name></expr></argument>)</argument_list></call>
                || (<call><name><name>stylesheet</name>.<name>getLastModified</name></name><argument_list>()</argument_list></call> != <name>templatesModTime</name>)</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>templates</name> = <name>null</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>stylesheet</name></name> = <name>stylesheet</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Transform an input file.
     * @param infile the file to transform
     * @param outfile the result file
     * @throws Exception on error
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>transform</name><parameter_list>(<param><decl><type><name>File</name></type> <name>infile</name></decl></param>, <param><decl><type><name>File</name></type> <name>outfile</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>transformer</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>createTransformer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name>InputStream</name></type> <name>fis</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>OutputStream</name></type> <name>fos</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>fis</name> = new <call><name>BufferedInputStream</name><argument_list>(<argument><expr>new <call><name>FileInputStream</name><argument_list>(<argument><expr><name>infile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>fos</name> = new <call><name>BufferedOutputStream</name><argument_list>(<argument><expr>new <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>StreamResult</name></type> <name>res</name> =<init> <expr>new <call><name>StreamResult</name><argument_list>(<argument><expr><name>fos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// not sure what could be the need of this...</comment>
            <expr_stmt><expr><call><name><name>res</name>.<name>setSystemId</name></name><argument_list>(<argument><expr><call><name><name>JAXPUtils</name>.<name>getSystemId</name></name><argument_list>(<argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Source</name></type> <name>src</name> =<init> <expr><call><name>getSource</name><argument_list>(<argument><expr><name>fis</name></expr></argument>, <argument><expr><name>infile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// set parameters on each transformation, maybe something has changed</comment>
            <comment type="line">//(e.g. value of file name parameter)</comment>
            <expr_stmt><expr><call><name>setTransformationParameters</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>transformer</name>.<name>transform</name></name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
            <comment type="line">// make sure to close all handles, otherwise the garbage</comment>
            <comment type="line">// collector will close them...whenever possible and</comment>
            <comment type="line">// Windows may complain about not being able to delete files.</comment>
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>fis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>fos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <comment type="javadoc">/**
     * Get the source instance from the stream and id of the file.
     * @param is the stream containing the stylesheet data.
     * @param infile the file that will be used for the systemid.
     * @return the configured source instance matching the stylesheet.
     * @throws ParserConfigurationException if a parser cannot be created which
     * satisfies the requested configuration.
     * @throws SAXException in case of problem detected by the SAX parser.
     */</comment>
    <function><type><specifier>private</specifier> <name>Source</name></type> <name>getSource</name><parameter_list>(<param><decl><type><name>InputStream</name></type> <name>is</name></decl></param>, <param><decl><type><name>File</name></type> <name>infile</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>ParserConfigurationException</name></expr></argument>, <argument><expr><name>SAXException</name></expr></argument></throws> <block>{
        <comment type="line">// todo: is this comment still relevant ??</comment>
        <comment type="line">// FIXME: need to use a SAXSource as the source for the transform</comment>
        <comment type="line">// so we can plug in our own entity resolver</comment>
        <decl_stmt><decl><type><name>Source</name></type> <name>src</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>entityResolver</name> != <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name>getFactory</name><argument_list>()</argument_list></call>.<call><name>getFeature</name><argument_list>(<argument><expr><name><name>SAXSource</name>.<name>FEATURE</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>SAXParserFactory</name></type> <name>spFactory</name> =<init> <expr><call><name><name>SAXParserFactory</name>.<name>newInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>spFactory</name>.<name>setNamespaceAware</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>XMLReader</name></type> <name>reader</name> =<init> <expr><call><name><name>spFactory</name>.<name>newSAXParser</name></name><argument_list>()</argument_list></call>.<call><name>getXMLReader</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>reader</name>.<name>setEntityResolver</name></name><argument_list>(<argument><expr><name>entityResolver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>src</name> = new <call><name>SAXSource</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr>new <call><name>InputSource</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <throw>throw <expr>new <call><name>IllegalStateException</name><argument_list>(<argument><expr>"xcatalog specified, but "
                    + "parser doesn't support SAX"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></else></if>
        }</block></then> <else>else <block>{
            <comment type="line">// WARN: Don't use the StreamSource(File) ctor. It won't work with</comment>
            <comment type="line">// xalan prior to 2.2 because of systemid bugs.</comment>
            <expr_stmt><expr><name>src</name> = new <call><name>StreamSource</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><call><name><name>src</name>.<name>setSystemId</name></name><argument_list>(<argument><expr><call><name><name>JAXPUtils</name>.<name>getSystemId</name></name><argument_list>(<argument><expr><name>infile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>src</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>Source</name></type> <name>getSource</name><parameter_list>(<param><decl><type><name>InputStream</name></type> <name>is</name></decl></param>, <param><decl><type><name>Resource</name></type> <name>resource</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>ParserConfigurationException</name></expr></argument>, <argument><expr><name>SAXException</name></expr></argument></throws> <block>{
        <comment type="line">// todo: is this comment still relevant ??</comment>
        <comment type="line">// FIXME: need to use a SAXSource as the source for the transform</comment>
        <comment type="line">// so we can plug in our own entity resolver</comment>
        <decl_stmt><decl><type><name>Source</name></type> <name>src</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>entityResolver</name> != <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name>getFactory</name><argument_list>()</argument_list></call>.<call><name>getFeature</name><argument_list>(<argument><expr><name><name>SAXSource</name>.<name>FEATURE</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>SAXParserFactory</name></type> <name>spFactory</name> =<init> <expr><call><name><name>SAXParserFactory</name>.<name>newInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>spFactory</name>.<name>setNamespaceAware</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>XMLReader</name></type> <name>reader</name> =<init> <expr><call><name><name>spFactory</name>.<name>newSAXParser</name></name><argument_list>()</argument_list></call>.<call><name>getXMLReader</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>reader</name>.<name>setEntityResolver</name></name><argument_list>(<argument><expr><name>entityResolver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>src</name> = new <call><name>SAXSource</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr>new <call><name>InputSource</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <throw>throw <expr>new <call><name>IllegalStateException</name><argument_list>(<argument><expr>"xcatalog specified, but "
                    + "parser doesn't support SAX"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></else></if>
        }</block></then> <else>else <block>{
            <comment type="line">// WARN: Don't use the StreamSource(File) ctor. It won't work with</comment>
            <comment type="line">// xalan prior to 2.2 because of systemid bugs.</comment>
            <expr_stmt><expr><name>src</name> = new <call><name>StreamSource</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <comment type="line">// The line below is a hack: the system id must an URI, but it is not</comment>
        <comment type="line">// cleat to get the URI of an resource, so just set the name of the</comment>
        <comment type="line">// resource as a system id</comment>
        <expr_stmt><expr><call><name><name>src</name>.<name>setSystemId</name></name><argument_list>(<argument><expr><call><name>resourceToURI</name><argument_list>(<argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>src</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>resourceToURI</name><parameter_list>(<param><decl><type><name>Resource</name></type> <name>resource</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>FileProvider</name></type> <name>fp</name> =<init> <expr><call><name><name>resource</name>.<name>as</name></name><argument_list>(<argument><expr><name><name>FileProvider</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>fp</name> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>FILE_UTILS</name>.<name>toURI</name></name><argument_list>(<argument><expr><call><name><name>fp</name>.<name>getFile</name></name><argument_list>()</argument_list></call>.<call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>URLProvider</name></type> <name>up</name> =<init> <expr><call><name><name>resource</name>.<name>as</name></name><argument_list>(<argument><expr><name><name>URLProvider</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>up</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>URL</name></type> <name>u</name> =<init> <expr><call><name><name>up</name>.<name>getURL</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>String</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
            <return>return <expr><call><name><name>resource</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Read in templates from the stylesheet
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>readTemplates</name><parameter_list>()</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>TransformerConfigurationException</name></expr></argument>,
               <argument><expr><name>ParserConfigurationException</name></expr></argument>, <argument><expr><name>SAXException</name></expr></argument></throws> <block>{

        <comment type="line">// Use a stream so that you can close it yourself quickly</comment>
        <comment type="line">// and avoid keeping the handle until the object is garbaged.</comment>
        <comment type="line">// (always keep control), otherwise you won't be able to delete</comment>
        <comment type="line">// the file quickly on windows.</comment>
        <decl_stmt><decl><type><name>InputStream</name></type> <name>xslStream</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>xslStream</name>
                = new <call><name>BufferedInputStream</name><argument_list>(<argument><expr><call><name><name>stylesheet</name>.<name>getInputStream</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>templatesModTime</name> = <call><name><name>stylesheet</name>.<name>getLastModified</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Source</name></type> <name>src</name> =<init> <expr><call><name>getSource</name><argument_list>(<argument><expr><name>xslStream</name></expr></argument>, <argument><expr><name>stylesheet</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>templates</name> = <call><name>getFactory</name><argument_list>()</argument_list></call>.<call><name>newTemplates</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
            <if>if <condition>(<expr><name>xslStream</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>xslStream</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></finally></try>
    }</block></function>

    <comment type="javadoc">/**
     * Create a new transformer based on the liaison settings
     * @throws Exception thrown if there is an error during creation.
     * @see #setStylesheet(java.io.File)
     * @see #addParam(java.lang.String, java.lang.String)
     * @see #setOutputProperty(java.lang.String, java.lang.String)
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>createTransformer</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>templates</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>readTemplates</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><name>transformer</name> = <call><name><name>templates</name>.<name>newTransformer</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// configure the transformer...</comment>
        <expr_stmt><expr><call><name><name>transformer</name>.<name>setErrorListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>uriResolver</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>transformer</name>.<name>setURIResolver</name></name><argument_list>(<argument><expr><name>uriResolver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>size</name> =<init> <expr><call><name><name>outputProperties</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>size</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name><index>[]</index></type> <name>pair</name> =<init> <expr>(<name><name>String</name><index>[]</index></name>) <call><name><name>outputProperties</name>.<name>elementAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>transformer</name>.<name>setOutputProperty</name></name><argument_list>(<argument><expr><name><name>pair</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name><name>pair</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <if>if <condition>(<expr><name>traceConfiguration</name> != <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr>"org.apache.xalan.transformer.TransformerImpl"
                .<call><name>equals</name><argument_list>(<argument><expr><call><name><name>transformer</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <try>try <block>{
                    <decl_stmt><decl><type><name>Class</name></type> <name>traceSupport</name> =<init>
                        <expr><call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr>"org.apache.tools.ant.taskdefs.optional."
                                      + "Xalan2TraceSupport"</expr></argument>, <argument><expr>true</expr></argument>,
                                      <argument><expr><call><name><name>Thread</name>.<name>currentThread</name></name><argument_list>()</argument_list></call>
                                      .<call><name>getContextClassLoader</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>XSLTTraceSupport</name></type> <name>ts</name> =<init>
                        <expr>(<name>XSLTTraceSupport</name>) <call><name><name>traceSupport</name>.<name>newInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>ts</name>.<name>configureTrace</name></name><argument_list>(<argument><expr><name>transformer</name></expr></argument>, <argument><expr><name>traceConfiguration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
                    <decl_stmt><decl><type><name>String</name></type> <name>msg</name> =<init> <expr>"Failed to enable tracing because of " + <name>e</name></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>project</name> != <name>null</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>project</name>.<name>log</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></catch></try>
            }</block></then> <else>else <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>msg</name> =<init> <expr>"Not enabling trace support for transformer"
                    + " implementation" + <call><name><name>transformer</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>project</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>project</name>.<name>log</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></else></if>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the paramters for the transformer.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>setTransformationParameters</name><parameter_list>()</parameter_list> <block>{
        <for>for (<init><decl><type><specifier>final</specifier> <name>Enumeration</name></type> <name>enumeration</name> =<init> <expr><call><name><name>params</name>.<name>keys</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init>
             <condition><expr><call><name><name>enumeration</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>name</name> =<init> <expr>(<name>String</name>) <call><name><name>enumeration</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>Object</name></type> <name>value</name> =<init> <expr><call><name><name>params</name>.<name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>transformer</name>.<name>setParameter</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * return the Transformer factory associated to this liaison.
     * @return the Transformer factory associated to this liaison.
     * @throws BuildException thrown if there is a problem creating
     * the factory.
     * @see #setFactory(String)
     * @since Ant 1.5.2
     */</comment>
    <function><type><specifier>private</specifier> <name>TransformerFactory</name></type> <name>getFactory</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>tfactory</name> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>tfactory</name></expr>;</return>
        }</block></then></if>
        <comment type="line">// not initialized yet, so create the factory</comment>
        <if>if <condition>(<expr><name>factoryName</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>tfactory</name> = <call><name><name>TransformerFactory</name>.<name>newInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <try>try <block>{
                <decl_stmt><decl><type><name>Class</name></type> <name>clazz</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <try>try <block>{
                    <expr_stmt><expr><name>clazz</name> =
                        <call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr><name>factoryName</name></expr></argument>, <argument><expr>true</expr></argument>,
                                      <argument><expr><call><name><name>Thread</name>.<name>currentThread</name></name><argument_list>()</argument_list></call>
                                      .<call><name>getContextClassLoader</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>ClassNotFoundException</name></type> <name>cnfe</name></decl></param>) <block>{
                    <decl_stmt><decl><type><name>String</name></type> <name>msg</name> =<init> <expr>"Failed to load " + <name>factoryName</name>
                        + " via the configured classpath, will try"
                        + " Ant's classpath instead."</expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>logger</name> != <name>null</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>logger</name>.<name>log</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else>else <if>if <condition>(<expr><name>project</name> != <name>null</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>project</name>.<name>log</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if></else></if>
                }</block></catch></try>

                <if>if <condition>(<expr><name>clazz</name> == <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>clazz</name> = <call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr><name>factoryName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name>tfactory</name> = (<name>TransformerFactory</name>) <call><name><name>clazz</name>.<name>newInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></else></if>

        <try>try <block>{ <comment type="line">// #51668, #52382</comment>
            <decl_stmt><decl><type><name>Field</name></type> <name>_isNotSecureProcessing</name> =<init> <expr><call><name><name>tfactory</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getDeclaredField</name><argument_list>(<argument><expr>"_isNotSecureProcessing"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>_isNotSecureProcessing</name>.<name>setAccessible</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>_isNotSecureProcessing</name>.<name>set</name></name><argument_list>(<argument><expr><name>tfactory</name></expr></argument>, <argument><expr><name><name>Boolean</name>.<name>TRUE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>x</name></decl></param>) <block>{
            <if>if <condition>(<expr><name>project</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>project</name>.<name>log</name></name><argument_list>(<argument><expr><call><name><name>x</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></catch></try>

        <expr_stmt><expr><call><name><name>tfactory</name>.<name>setErrorListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// specific attributes for the transformer</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>size</name> =<init> <expr><call><name><name>attributes</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>size</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>Object</name><index>[]</index></type> <name>pair</name> =<init> <expr>(<name><name>Object</name><index>[]</index></name>) <call><name><name>attributes</name>.<name>elementAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>tfactory</name>.<name>setAttribute</name></name><argument_list>(<argument><expr>(<name>String</name>) <name><name>pair</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name><name>pair</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <if>if <condition>(<expr><name>uriResolver</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>tfactory</name>.<name>setURIResolver</name></name><argument_list>(<argument><expr><name>uriResolver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>tfactory</name></expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     * Set the factory name to use instead of JAXP default lookup.
     * @param name the fully qualified class name of the factory to use
     * or null for the default JAXP look up mechanism.
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFactory</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>factoryName</name> = <name>name</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set a custom attribute for the JAXP factory implementation.
     * @param name the attribute name.
     * @param value the value of the attribute, usually a boolean
     * string or object.
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAttribute</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>, <param><decl><type><name>Object</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Object</name><index>[]</index></type> <name>pair</name> =<init> <expr>new <name><name>Object</name><index>[]</index></name><block>{<expr><name>name</name></expr>, <expr><name>value</name></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>attributes</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>pair</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the output property for the current transformer.
     * Note that the stylesheet must be set prior to calling
     * this method.
     * @param name the output property name.
     * @param value the output property value.
     * @since Ant 1.5
     * @since Ant 1.5
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOutputProperty</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>, <param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name><index>[]</index></type> <name>pair</name> =<init> <expr>new <name><name>String</name><index>[]</index></name><block>{<expr><name>name</name></expr>, <expr><name>value</name></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>outputProperties</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>pair</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the class to resolve entities during the transformation.
     * @param aResolver the resolver class.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setEntityResolver</name><parameter_list>(<param><decl><type><name>EntityResolver</name></type> <name>aResolver</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>entityResolver</name> = <name>aResolver</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the class to resolve URIs during the transformation
     * @param aResolver a &lt;code&gt;EntityResolver&lt;/code&gt; value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setURIResolver</name><parameter_list>(<param><decl><type><name>URIResolver</name></type> <name>aResolver</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>uriResolver</name> = <name>aResolver</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a parameter.
     * @param name the name of the parameter
     * @param value the value of the parameter
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addParam</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>, <param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>params</name>.<name>put</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Add a parameter.
     * @param name the name of the parameter
     * @param value the value of the parameter
     * @since Ant 1.9.3
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addParam</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>, <param><decl><type><name>Object</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>params</name>.<name>put</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set a logger.
     * @param l a logger.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLogger</name><parameter_list>(<param><decl><type><name>XSLTLogger</name></type> <name>l</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>logger</name> = <name>l</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Log an error.
     * @param e the exception to log.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>error</name><parameter_list>(<param><decl><type><name>TransformerException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>logError</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"Error"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Log a fatal error.
     * @param e the exception to log.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>fatalError</name><parameter_list>(<param><decl><type><name>TransformerException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>logError</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"Fatal Error"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Fatal error during transformation using " + <name>stylesheet</name> + ": " + <call><name><name>e</name>.<name>getMessageAndLocation</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>

    <comment type="javadoc">/**
     * Log a warning.
     * @param e the exception to log.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>warning</name><parameter_list>(<param><decl><type><name>TransformerException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr>!<name>suppressWarnings</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>logError</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"Warning"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>logError</name><parameter_list>(<param><decl><type><name>TransformerException</name></type> <name>e</name></decl></param>, <param><decl><type><name>String</name></type> <name>type</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>logger</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>msg</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SourceLocator</name></type> <name>locator</name> =<init> <expr><call><name><name>e</name>.<name>getLocator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>locator</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>systemid</name> =<init> <expr><call><name><name>locator</name>.<name>getSystemId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>systemid</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>url</name> =<init> <expr><name>systemid</name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>url</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"file:"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>url</name> = <call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call>.<call><name>fromURI</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><call><name><name>msg</name>.<name>append</name></name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>msg</name>.<name>append</name></name><argument_list>(<argument><expr>"Unknown file"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <decl_stmt><decl><type><name>int</name></type> <name>line</name> =<init> <expr><call><name><name>locator</name>.<name>getLineNumber</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>line</name> != -1</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>msg</name>.<name>append</name></name><argument_list>(<argument><expr>":"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>msg</name>.<name>append</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>column</name> =<init> <expr><call><name><name>locator</name>.<name>getColumnNumber</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>column</name> != -1</expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>msg</name>.<name>append</name></name><argument_list>(<argument><expr>":"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>msg</name>.<name>append</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>msg</name>.<name>append</name></name><argument_list>(<argument><expr>": "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>msg</name>.<name>append</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>msg</name>.<name>append</name></name><argument_list>(<argument><expr>"! "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>msg</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>e</name>.<name>getCause</name></name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>msg</name>.<name>append</name></name><argument_list>(<argument><expr>" Cause: "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>msg</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getCause</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>logger</name>.<name>log</name></name><argument_list>(<argument><expr><call><name><name>msg</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// kept for backwards compatibility</comment>
    <comment type="javadoc">/**
     * @param file the filename to use for the systemid
     * @return the systemid
     * @deprecated since 1.5.x.
     *             Use org.apache.tools.ant.util.JAXPUtils#getSystemId instead.
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>getSystemId</name><parameter_list>(<param><decl><type><name>File</name></type> <name>file</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>JAXPUtils</name>.<name>getSystemId</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     * Specific configuration for the TRaX liaison.
     * @param xsltTask the XSLTProcess task instance from which this liasion
     *        is to be configured.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>configure</name><parameter_list>(<param><decl><type><name>XSLTProcess</name></type> <name>xsltTask</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>project</name> = <call><name><name>xsltTask</name>.<name>getProject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>XSLTProcess</name>.<name>Factory</name></name></type> <name>factory</name> =<init> <expr><call><name><name>xsltTask</name>.<name>getFactory</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>factory</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>setFactory</name><argument_list>(<argument><expr><call><name><name>factory</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// configure factory attributes</comment>
            <for>for (<init><decl><type><name>Enumeration</name></type> <name>attrs</name> =<init> <expr><call><name><name>factory</name>.<name>getAttributes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init>
                    <condition><expr><call><name><name>attrs</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
                <decl_stmt><decl><type><name><name>XSLTProcess</name>.<name>Factory</name>.<name>Attribute</name></name></type> <name>attr</name> =<init>
                        <expr>(<name><name>XSLTProcess</name>.<name>Factory</name>.<name>Attribute</name></name>) <call><name><name>attrs</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>setAttribute</name><argument_list>(<argument><expr><call><name><name>attr</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>attr</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></then></if>

        <decl_stmt><decl><type><name>XMLCatalog</name></type> <name>xmlCatalog</name> =<init> <expr><call><name><name>xsltTask</name>.<name>getXMLCatalog</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// use XMLCatalog as the entity resolver and URI resolver</comment>
        <if>if <condition>(<expr><name>xmlCatalog</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>setEntityResolver</name><argument_list>(<argument><expr><name>xmlCatalog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setURIResolver</name><argument_list>(<argument><expr><name>xmlCatalog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>


        <comment type="line">// configure output properties</comment>
        <for>for (<init><decl><type><name>Enumeration</name></type> <name>props</name> =<init> <expr><call><name><name>xsltTask</name>.<name>getOutputProperties</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init>
                <condition><expr><call><name><name>props</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
            <decl_stmt><decl><type><name><name>XSLTProcess</name>.<name>OutputProperty</name></name></type> <name>prop</name>
                =<init> <expr>(<name><name>XSLTProcess</name>.<name>OutputProperty</name></name>) <call><name><name>props</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>setOutputProperty</name><argument_list>(<argument><expr><call><name><name>prop</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>prop</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <expr_stmt><expr><name>suppressWarnings</name> = <call><name><name>xsltTask</name>.<name>getSuppressWarnings</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>traceConfiguration</name> = <call><name><name>xsltTask</name>.<name>getTraceConfiguration</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
