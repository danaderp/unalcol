<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\types\Quantifier.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>

<comment type="javadoc">/**
 * EnumeratedAttribute for quantifier comparisons. Evaluates a
 * &lt;code&gt;boolean[]&lt;/code&gt; or raw &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;
 * counts. Accepts the following values:&lt;ul&gt;
 * &lt;li&gt;"all"&lt;/li&gt; - none &lt;code&gt;false&lt;/code&gt;
 * &lt;li&gt;"each"&lt;/li&gt; - none &lt;code&gt;false&lt;/code&gt;
 * &lt;li&gt;"every"&lt;/li&gt; - none &lt;code&gt;false&lt;/code&gt;
 * &lt;li&gt;"any"&lt;/li&gt; - at least one &lt;code&gt;true&lt;/code&gt;
 * &lt;li&gt;"some"&lt;/li&gt; - at least one &lt;code&gt;true&lt;/code&gt;
 * &lt;li&gt;"one"&lt;/li&gt; - exactly one &lt;code&gt;true&lt;/code&gt;
 * &lt;li&gt;"majority"&lt;/li&gt; - more &lt;code&gt;true&lt;/code&gt; than &lt;code&gt;false&lt;/code&gt;
 * &lt;li&gt;"most"&lt;/li&gt; - more &lt;code&gt;true&lt;/code&gt; than &lt;code&gt;false&lt;/code&gt;
 * &lt;li&gt;"none"&lt;/li&gt; - none &lt;code&gt;true&lt;/code&gt;
 * &lt;/ul&gt;
 * @since Ant 1.7
 */</comment>
<class><specifier>public</specifier> class <name>Quantifier</name> <super><extends>extends <name>EnumeratedAttribute</name></extends></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name><index>[]</index></type> <name>VALUES</name>
        =<init> <expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"all"</expr>, <expr>"each"</expr>, <expr>"every"</expr>, <expr>"any"</expr>, <expr>"some"</expr>, <expr>"one"</expr>,
                        <expr>"majority"</expr>, <expr>"most"</expr>, <expr>"none"</expr>}</block></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** ALL instance */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Quantifier</name></type> <name>ALL</name> =<init> <expr>new <call><name>Quantifier</name><argument_list>(<argument><expr>"all"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** ANY instance */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Quantifier</name></type> <name>ANY</name> =<init> <expr>new <call><name>Quantifier</name><argument_list>(<argument><expr>"any"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** ONE instance */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Quantifier</name></type> <name>ONE</name> =<init> <expr>new <call><name>Quantifier</name><argument_list>(<argument><expr>"one"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** MAJORITY instance */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Quantifier</name></type> <name>MAJORITY</name> =<init> <expr>new <call><name>Quantifier</name><argument_list>(<argument><expr>"majority"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** NONE instance */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Quantifier</name></type> <name>NONE</name> =<init> <expr>new <call><name>Quantifier</name><argument_list>(<argument><expr>"none"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <class><specifier>private</specifier> <specifier>abstract</specifier> <specifier>static</specifier> class <name>Predicate</name> <block>{
        <function_decl><type><specifier>abstract</specifier> <name>boolean</name></type> <name>eval</name><parameter_list>(<param><decl><type><name>int</name></type> <name>t</name></decl></param>, <param><decl><type><name>int</name></type> <name>f</name></decl></param>)</parameter_list>;</function_decl>
    }</block></class>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Predicate</name></type> <name>ALL_PRED</name> =<init> <expr>new <class><super><name>Predicate</name></super><argument_list>()</argument_list> <block>{
        <function><type><name>boolean</name></type> <name>eval</name><parameter_list>(<param><decl><type><name>int</name></type> <name>t</name></decl></param>, <param><decl><type><name>int</name></type> <name>f</name></decl></param>)</parameter_list> <block>{ <return>return <expr><name>f</name> == 0</expr>;</return> }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Predicate</name></type> <name>ANY_PRED</name> =<init> <expr>new <class><super><name>Predicate</name></super><argument_list>()</argument_list> <block>{
        <function><type><name>boolean</name></type> <name>eval</name><parameter_list>(<param><decl><type><name>int</name></type> <name>t</name></decl></param>, <param><decl><type><name>int</name></type> <name>f</name></decl></param>)</parameter_list> <block>{ <return>return <expr><name>t</name> &gt; 0</expr>;</return> }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Predicate</name></type> <name>ONE_PRED</name> =<init> <expr>new <class><super><name>Predicate</name></super><argument_list>()</argument_list> <block>{
        <function><type><name>boolean</name></type> <name>eval</name><parameter_list>(<param><decl><type><name>int</name></type> <name>t</name></decl></param>, <param><decl><type><name>int</name></type> <name>f</name></decl></param>)</parameter_list> <block>{ <return>return <expr><name>t</name> == 1</expr>;</return> }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Predicate</name></type> <name>MAJORITY_PRED</name> =<init> <expr>new <class><super><name>Predicate</name></super><argument_list>()</argument_list> <block>{
        <function><type><name>boolean</name></type> <name>eval</name><parameter_list>(<param><decl><type><name>int</name></type> <name>t</name></decl></param>, <param><decl><type><name>int</name></type> <name>f</name></decl></param>)</parameter_list> <block>{ <return>return <expr><name>t</name> &gt; <name>f</name></expr>;</return> }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Predicate</name></type> <name>NONE_PRED</name> =<init> <expr>new <class><super><name>Predicate</name></super><argument_list>()</argument_list> <block>{
        <function><type><name>boolean</name></type> <name>eval</name><parameter_list>(<param><decl><type><name>int</name></type> <name>t</name></decl></param>, <param><decl><type><name>int</name></type> <name>f</name></decl></param>)</parameter_list> <block>{ <return>return <expr><name>t</name> == 0</expr>;</return> }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Predicate</name><index>[]</index></type> <name>PREDS</name> =<init> <expr>new <name><name>Predicate</name><index>[<expr><name><name>VALUES</name>.<name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    static <block>{
        <comment type="line">// CheckStyle:MagicNumber OFF</comment>
        <expr_stmt><expr><name><name>PREDS</name><index>[<expr>0</expr>]</index></name> = <name>ALL_PRED</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>PREDS</name><index>[<expr>1</expr>]</index></name> = <name>ALL_PRED</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>PREDS</name><index>[<expr>2</expr>]</index></name> = <name>ALL_PRED</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>PREDS</name><index>[<expr>3</expr>]</index></name> = <name>ANY_PRED</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>PREDS</name><index>[<expr>4</expr>]</index></name> = <name>ANY_PRED</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>PREDS</name><index>[<expr>5</expr>]</index></name> = <name>ONE_PRED</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>PREDS</name><index>[<expr>6</expr>]</index></name> = <name>MAJORITY_PRED</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>PREDS</name><index>[<expr>7</expr>]</index></name> = <name>MAJORITY_PRED</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>PREDS</name><index>[<expr>8</expr>]</index></name> = <name>NONE_PRED</name></expr>;</expr_stmt>
        <comment type="line">// CheckStyle:MagicNumber ON</comment>
    }</block>

    <comment type="javadoc">/**
     * Default constructor.
     */</comment>
    <constructor><specifier>public</specifier> <name>Quantifier</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <comment type="javadoc">/**
     * Construct a new Quantifier with the specified value.
     * @param value the EnumeratedAttribute value.
     */</comment>
    <constructor><specifier>public</specifier> <name>Quantifier</name><parameter_list>(<param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setValue</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Return the possible values.
     * @return String[] of EnumeratedAttribute values.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getValues</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>VALUES</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Evaluate a &lt;code&gt;boolean&lt;code&gt; array.
     * @param b the &lt;code&gt;boolean[]&lt;/code&gt; to evaluate.
     * @return true if the argument fell within the parameters of this Quantifier.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>evaluate</name><parameter_list>(<param><decl><type><name><name>boolean</name><index>[]</index></name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>t</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>b</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <if>if <condition>(<expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>t</name>++</expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <return>return <expr><call><name>evaluate</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name><name>b</name>.<name>length</name></name> - <name>t</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Evaluate integer &lt;code&gt;true&lt;/code&gt; vs. &lt;code&gt;false&lt;/code&gt; counts.
     * @param t the number of &lt;code&gt;true&lt;/code&gt; values.
     * @param f the number of &lt;code&gt;false&lt;/code&gt; values.
     * @return true if the arguments fell within the parameters of this Quantifier.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>evaluate</name><parameter_list>(<param><decl><type><name>int</name></type> <name>t</name></decl></param>, <param><decl><type><name>int</name></type> <name>f</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> =<init> <expr><call><name>getIndex</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>index</name> == -1</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Quantifier value not set."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr><name><name>PREDS</name><index>[<expr><name>index</name></expr>]</index></name>.<call><name>eval</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

}</block></class>

</unit>
