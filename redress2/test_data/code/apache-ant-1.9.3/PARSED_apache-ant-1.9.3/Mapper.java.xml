<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\types\Mapper.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>Properties</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileNameMapper</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>CompositeMapper</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>ContainerMapper</name></name>;</import>

<comment type="javadoc">/**
 * Element to define a FileNameMapper.
 *
 */</comment>
<class><specifier>public</specifier> class <name>Mapper</name> <super><extends>extends <name>DataType</name></extends> <implements>implements <name>Cloneable</name></implements></super> <block>{
    <comment type="line">// CheckStyle:VisibilityModifier OFF - bc</comment>

    <decl_stmt><decl><type><specifier>protected</specifier> <name>MapperType</name></type> <name>type</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>classname</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Path</name></type> <name>classpath</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>from</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>to</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// CheckStyle:VisibilityModifier ON</comment>

    <decl_stmt><decl><type><specifier>private</specifier> <name>ContainerMapper</name></type> <name>container</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Construct a new &lt;code&gt;Mapper&lt;/code&gt; element.
     * @param p   the owning Ant &lt;code&gt;Project&lt;/code&gt;.
     */</comment>
    <constructor><specifier>public</specifier> <name>Mapper</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>p</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setProject</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Set the type of &lt;code&gt;FileNameMapper&lt;/code&gt; to use.
     * @param type   the &lt;code&gt;MapperType&lt;/code&gt; enumerated attribute.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setType</name><parameter_list>(<param><decl><type><name>MapperType</name></type> <name>type</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr><call><name>tooManyAttributes</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>type</name></name> = <name>type</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Cannot mix add and addconfigured in same type, so
     * provide this to override the add method.
     * @param fileNameMapper   the &lt;code&gt;FileNameMapper&lt;/code&gt; to add.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addConfigured</name><parameter_list>(<param><decl><type><name>FileNameMapper</name></type> <name>fileNameMapper</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>fileNameMapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a nested &lt;code&gt;FileNameMapper&lt;/code&gt;.
     * @param fileNameMapper   the &lt;code&gt;FileNameMapper&lt;/code&gt; to add.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>FileNameMapper</name></type> <name>fileNameMapper</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr><call><name>noChildrenAllowed</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>container</name> == <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>type</name> == <name>null</name> &amp;&amp; <name>classname</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>container</name> = new <call><name>CompositeMapper</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <decl_stmt><decl><type><name>FileNameMapper</name></type> <name>m</name> =<init> <expr><call><name>getImplementation</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>m</name> <name>instanceof</name> <name>ContainerMapper</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>container</name> = (<name>ContainerMapper</name>) <name>m</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call>
                        + " mapper implementation does not support nested mappers!"</expr></argument>)</argument_list></call></expr>;</throw>
                }</block></else></if>
            }</block></else></if>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>container</name>.<name>add</name></name><argument_list>(<argument><expr><name>fileNameMapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setChecked</name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a Mapper
     * @param mapper the mapper to add
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addConfiguredMapper</name><parameter_list>(<param><decl><type><name>Mapper</name></type> <name>mapper</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><call><name><name>mapper</name>.<name>getImplementation</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the class name of the FileNameMapper to use.
     * @param classname the name of the class
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setClassname</name><parameter_list>(<param><decl><type><name>String</name></type> <name>classname</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr><call><name>tooManyAttributes</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>classname</name></name> = <name>classname</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the classpath to load the FileNameMapper through (attribute).
     * @param classpath the classpath
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setClasspath</name><parameter_list>(<param><decl><type><name>Path</name></type> <name>classpath</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr><call><name>tooManyAttributes</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>classpath</name></name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>classpath</name></name> = <name>classpath</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>classpath</name>.<name>append</name></name><argument_list>(<argument><expr><name>classpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Set the classpath to load the FileNameMapper through (nested element).
     * @return a path object to be configured
     */</comment>
    <function><type><specifier>public</specifier> <name>Path</name></type> <name>createClasspath</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr><call><name>noChildrenAllowed</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>classpath</name></name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>classpath</name></name> = new <call><name>Path</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>setChecked</name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>this</name>.<name>classpath</name>.<name>createPath</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the classpath to load the FileNameMapper through via
     * reference (attribute).
     * @param ref the reference to the FileNameMapper
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setClasspathRef</name><parameter_list>(<param><decl><type><name>Reference</name></type> <name>ref</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr><call><name>tooManyAttributes</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name>createClasspath</name><argument_list>()</argument_list></call>.<call><name>setRefid</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the argument to FileNameMapper.setFrom
     * @param from the from attribute to pass to the FileNameMapper
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFrom</name><parameter_list>(<param><decl><type><name>String</name></type> <name>from</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr><call><name>tooManyAttributes</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>from</name></name> = <name>from</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the argument to FileNameMapper.setTo
     * @param to the to attribute to pass to the FileNameMapper
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTo</name><parameter_list>(<param><decl><type><name>String</name></type> <name>to</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr><call><name>tooManyAttributes</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>to</name></name> = <name>to</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Make this Mapper instance a reference to another Mapper.
     *
     * &lt;p&gt;You must not set any other attribute if you make it a
     * reference.&lt;/p&gt;
     * @param r the reference to another mapper
     * @throws BuildException if other attributes are set
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRefid</name><parameter_list>(<param><decl><type><name>Reference</name></type> <name>r</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>type</name> != <name>null</name> || <name>from</name> != <name>null</name> || <name>to</name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr><call><name>tooManyAttributes</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>super</name>.<name>setRefid</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a fully configured FileNameMapper implementation.
     * @return a FileNameMapper object to be configured
     * @throws BuildException on error
     */</comment>
    <function><type><specifier>public</specifier> <name>FileNameMapper</name></type> <name>getImplementation</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>dieOnCircularReference</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Reference</name></type> <name>r</name> =<init> <expr><call><name>getRefid</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Object</name></type> <name>o</name> =<init> <expr><call><name><name>r</name>.<name>getReferencedObject</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>o</name> <name>instanceof</name> <name>FileNameMapper</name></expr>)</condition><then> <block>{
                <return>return <expr>(<name>FileNameMapper</name>) <name>o</name></expr>;</return>
            }</block></then></if>
            <if>if <condition>(<expr><name>o</name> <name>instanceof</name> <name>Mapper</name></expr>)</condition><then> <block>{
                <return>return <expr>((<name>Mapper</name>) <name>o</name>).<call><name>getImplementation</name><argument_list>()</argument_list></call></expr>;</return>
            }</block></then></if>
            <decl_stmt><decl><type><name>String</name></type> <name>od</name> =<init> <expr><name>o</name> == <name>null</name> ? "null" : <call><name><name>o</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>od</name> + " at reference '"
                + <call><name><name>r</name>.<name>getRefId</name></name><argument_list>()</argument_list></call> + "' is not a valid mapper reference."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr><name>type</name> == <name>null</name> &amp;&amp; <name>classname</name> == <name>null</name> &amp;&amp; <name>container</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                <argument><expr>"nested mapper or "
                + "one of the attributes type or classname is required"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr><name>container</name> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>container</name></expr>;</return>
        }</block></then></if>

        <if>if <condition>(<expr><name>type</name> != <name>null</name> &amp;&amp; <name>classname</name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                <argument><expr>"must not specify both type and classname attribute"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <try>try <block>{
            <decl_stmt><decl><type><name>FileNameMapper</name></type> <name>m</name> =<init> <expr><call><name>getImplementationClass</name><argument_list>()</argument_list></call>.<call><name>newInstance</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>Project</name></type> <name>p</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>p</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>p</name>.<name>setProjectReference</name></name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>m</name>.<name>setFrom</name></name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>m</name>.<name>setTo</name></name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return>return <expr><name>m</name></expr>;</return>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
            <throw>throw <expr><name>be</name></expr>;</throw>
        }</block></catch> <catch>catch (<param><decl><type><name>Throwable</name></type> <name>t</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

     <comment type="javadoc">/**
     * Gets the Class object associated with the mapper implementation.
     * @return &lt;code&gt;Class&lt;/code&gt;.
     * @throws ClassNotFoundException if the class cannot be found
     */</comment>
    <function><type><specifier>protected</specifier> <name><name>Class</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name>FileNameMapper</name></extends></argument>&gt;</argument_list></name></type> <name>getImplementationClass</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{

        <decl_stmt><decl><type><name>String</name></type> <name>cName</name> =<init> <expr><name><name>this</name>.<name>classname</name></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>type</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>cName</name> = <call><name><name>type</name>.<name>getImplementation</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name>ClassLoader</name></type> <name>loader</name> =<init> <expr>(<name>classpath</name> == <name>null</name>)
            ? <call><name>getClass</name><argument_list>()</argument_list></call>.<call><name>getClassLoader</name><argument_list>()</argument_list></call>
            <comment type="line">// Memory leak in line below</comment>
            : <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>createClassLoader</name><argument_list>(<argument><expr><name>classpath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr><name>cName</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr><name>loader</name></expr></argument>)</argument_list></call>.<call><name>asSubclass</name><argument_list>(<argument><expr><name><name>FileNameMapper</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Performs the check for circular references and returns the
     * referenced Mapper.
     * @deprecated since Ant 1.7.1 because a mapper might ref a
     *             FileNameMapper implementation directly.
     * @return the referenced Mapper
     */</comment>
    <function><type><specifier>protected</specifier> <name>Mapper</name></type> <name>getRef</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getCheckedRef</name><argument_list>(<argument><expr><name><name>Mapper</name>.<name><name/></name></name>class</expr></argument>, <argument><expr><call><name>getDataTypeName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Class as Argument to FileNameMapper.setType.
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>MapperType</name> <super><extends>extends <name>EnumeratedAttribute</name></extends></super> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>Properties</name></type> <name>implementations</name></decl>;</decl_stmt>

        <comment type="javadoc">/** Constructor for the MapperType enumeration */</comment>
        <constructor><specifier>public</specifier> <name>MapperType</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><name>implementations</name> = new <call><name>Properties</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>implementations</name>.<name>put</name></name><argument_list>(<argument><expr>"identity"</expr></argument>,
                                <argument><expr>"org.apache.tools.ant.util.IdentityMapper"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>implementations</name>.<name>put</name></name><argument_list>(<argument><expr>"flatten"</expr></argument>,
                                <argument><expr>"org.apache.tools.ant.util.FlatFileNameMapper"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>implementations</name>.<name>put</name></name><argument_list>(<argument><expr>"glob"</expr></argument>,
                                <argument><expr>"org.apache.tools.ant.util.GlobPatternMapper"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>implementations</name>.<name>put</name></name><argument_list>(<argument><expr>"merge"</expr></argument>,
                                <argument><expr>"org.apache.tools.ant.util.MergingMapper"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>implementations</name>.<name>put</name></name><argument_list>(<argument><expr>"regexp"</expr></argument>,
                                <argument><expr>"org.apache.tools.ant.util.RegexpPatternMapper"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>implementations</name>.<name>put</name></name><argument_list>(<argument><expr>"package"</expr></argument>,
                                <argument><expr>"org.apache.tools.ant.util.PackageNameMapper"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>implementations</name>.<name>put</name></name><argument_list>(<argument><expr>"unpackage"</expr></argument>,
                                <argument><expr>"org.apache.tools.ant.util.UnPackageNameMapper"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="javadoc">/**
         * @return the filenamemapper names
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getValues</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"identity"</expr>, <expr>"flatten"</expr>, <expr>"glob"</expr>,
                                 <expr>"merge"</expr>, <expr>"regexp"</expr>, <expr>"package"</expr>, <expr>"unpackage"</expr>}</block></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * @return the classname for the filenamemapper name
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getImplementation</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><call><name><name>implementations</name>.<name>getProperty</name></name><argument_list>(<argument><expr><call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>

}</block></class>
</unit>
