<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\types\resources\ContentTransformingResource.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>OutputStream</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>ResourceCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>

<comment type="javadoc">/**
 * A resource that transforms the content of another resource.
 *
 * &lt;p&gt;Wraps around another resource, delegates all queries (except
 * getSize) to that other resource but transforms stream content
 * on the fly.&lt;/p&gt;
 *
 * @since Ant 1.8
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>ContentTransformingResource</name> <super><extends>extends <name>ResourceDecorator</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>BUFFER_SIZE</name> =<init> <expr>8192</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** no arg constructor */</comment>
    <constructor><specifier>protected</specifier> <name>ContentTransformingResource</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructor with another resource to wrap.
     * @param other the resource to wrap.
     */</comment>
    <constructor><specifier>protected</specifier> <name>ContentTransformingResource</name><parameter_list>(<param><decl><type><name>ResourceCollection</name></type> <name>other</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Get the size of this Resource.
     * @return the size, as a long, 0 if the Resource does not exist (for
     *         compatibility with java.io.File), or UNKNOWN_SIZE if not known.
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getSize</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isExists</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>InputStream</name></type> <name>in</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <try>try <block>{
                <expr_stmt><expr><name>in</name> = <call><name>getInputStream</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>buf</name> =<init> <expr>new <name><name>byte</name><index>[<expr><name>BUFFER_SIZE</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>size</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>readNow</name></decl>;</decl_stmt>
                <while>while <condition>(<expr>(<name>readNow</name> = <call><name><name>in</name>.<name>read</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>buf</name>.<name>length</name></name></expr></argument>)</argument_list></call>) &gt; 0</expr>)</condition> <block>{
                    <expr_stmt><expr><name>size</name> += <name>readNow</name></expr>;</expr_stmt>
                }</block></while>
                <return>return <expr><name>size</name></expr>;</return>
            }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ex</name></decl></param>) <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"caught exception while reading "
                                         + <call><name>getName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch> <finally>finally <block>{
                <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></finally></try>
        }</block></then> <else>else <block>{
            <return>return <expr>0</expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Get an InputStream for the Resource.
     * @return an InputStream containing this Resource's content.
     * @throws IOException if unable to provide the content of this
     *         Resource as a stream.
     * @throws UnsupportedOperationException if InputStreams are not
     *         supported for this Resource type.
     */</comment>
    <function><type><specifier>public</specifier> <name>InputStream</name></type> <name>getInputStream</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>InputStream</name></type> <name>in</name> =<init> <expr><call><name>getResource</name><argument_list>()</argument_list></call>.<call><name>getInputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>in</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>in</name> = <call><name>wrapStream</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>in</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get an OutputStream for the Resource.
     * @return an OutputStream to which content can be written.
     * @throws IOException if unable to provide the content of this
     *         Resource as a stream.
     * @throws UnsupportedOperationException if OutputStreams are not
     *         supported for this Resource type.
     */</comment>
    <function><type><specifier>public</specifier> <name>OutputStream</name></type> <name>getOutputStream</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>OutputStream</name></type> <name>out</name> =<init> <expr><call><name>getResource</name><argument_list>()</argument_list></call>.<call><name>getOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>out</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>out</name> = <call><name>wrapStream</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>out</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Suppress FileProvider, re-implement Appendable
     */</comment>
    <function><type><specifier>public</specifier> <argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list> <name>T</name></type> <name>as</name><parameter_list>(<param><decl><type><name><name>Class</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>clazz</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>Appendable</name>.<name><name/></name></name>class.<call><name>isAssignableFrom</name><argument_list>(<argument><expr><name>clazz</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name>isAppendSupported</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>Appendable</name></type> <name>a</name> =<init>
                    <expr><call><name>getResource</name><argument_list>()</argument_list></call>.<call><name>as</name><argument_list>(<argument><expr><name><name>Appendable</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>a</name> != <name>null</name></expr>)</condition><then> <block>{
                    <return>return <expr><call><name><name>clazz</name>.<name>cast</name></name><argument_list>(<argument><expr>new <class><super><name>Appendable</name></super><argument_list>()</argument_list> <block>{
                        <function><type><specifier>public</specifier> <name>OutputStream</name></type> <name>getAppendOutputStream</name><parameter_list>()</parameter_list>
                                <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
                            <decl_stmt><decl><type><name>OutputStream</name></type> <name>out</name> =<init> <expr><call><name><name>a</name>.<name>getAppendOutputStream</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                            <if>if <condition>(<expr><name>out</name> != <name>null</name></expr>)</condition><then> <block>{
                                <expr_stmt><expr><name>out</name> = <call><name>wrapStream</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></then></if>
                            <return>return <expr><name>out</name></expr>;</return>
                        }</block></function>
                    }</block></class></expr></argument>)</argument_list></call></expr>;</return>
                }</block></then></if>
            }</block></then></if>
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>

        <return>return <expr><name><name>FileProvider</name>.<name><name/></name></name>class.<call><name>isAssignableFrom</name><argument_list>(<argument><expr><name>clazz</name></expr></argument>)</argument_list></call> 
            ? <name>null</name> : <call><name>getResource</name><argument_list>()</argument_list></call>.<call><name>as</name><argument_list>(<argument><expr><name>clazz</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Learn whether the transformation performed allows appends.
     *
     * &lt;p&gt;In general compressed outputs will become invalid if they
     * are appended to, for example.&lt;/p&gt;
     *
     * &lt;p&gt;This implementations returns false.&lt;/p&gt;
     */</comment>
    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>isAppendSupported</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>false</expr>;</return>
    }</block></function>    

    <comment type="javadoc">/**
     * Get a content-filtering/transforming InputStream.
     *
     * @param in InputStream to wrap, will never be null.
     * @return a compressed inputstream.
     * @throws IOException if there is a problem.
     */</comment>
    <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>InputStream</name></type> <name>wrapStream</name><parameter_list>(<param><decl><type><name>InputStream</name></type> <name>in</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>;</function_decl>

    <comment type="javadoc">/**
     * Get a content-filtering/transforming OutputStream.
     *
     * @param out OutputStream to wrap, will never be null.
     * @return a compressed outputstream.
     * @throws IOException if there is a problem.
     */</comment>
    <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>OutputStream</name></type> <name>wrapStream</name><parameter_list>(<param><decl><type><name>OutputStream</name></type> <name>out</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>;</function_decl>

}</block></class>
</unit>
