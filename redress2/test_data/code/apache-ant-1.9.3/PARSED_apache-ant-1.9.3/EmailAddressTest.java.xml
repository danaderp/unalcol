<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\taskdefs\email\EmailAddressTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>email</name></name>;</package>

<import>import <name><name>junit</name>.<name>framework</name>.<name>TestCase</name></name>;</import>

<comment type="javadoc">/**
 * @since Ant 1.6
 */</comment>
<class><specifier>public</specifier> class <name>EmailAddressTest</name> <super><extends>extends <name>TestCase</name></extends></super> <block>{

    <constructor><specifier>public</specifier> <name>EmailAddressTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>test1</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectNameAddress</name><argument_list>( <argument><expr>new <call><name>EmailAddress</name><argument_list>(<argument><expr>"address (name)"</expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>test2</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectNameAddress</name><argument_list>( <argument><expr>new <call><name>EmailAddress</name><argument_list>(<argument><expr>"(name) address"</expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>test3</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectNameAddress</name><argument_list>( <argument><expr>new <call><name>EmailAddress</name><argument_list>(<argument><expr>"name &lt;address&gt;"</expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>test4</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectNameAddress</name><argument_list>( <argument><expr>new <call><name>EmailAddress</name><argument_list>(<argument><expr>"&lt;address&gt; name"</expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>test5</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectNameAddress</name><argument_list>( <argument><expr>new <call><name>EmailAddress</name><argument_list>(<argument><expr>"&lt;address&gt; (name)"</expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>test6</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectNameAddress</name><argument_list>( <argument><expr>new <call><name>EmailAddress</name><argument_list>(<argument><expr>"(name) &lt;address&gt;"</expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>test7</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectNameAddress2</name><argument_list>( <argument><expr>new <call><name>EmailAddress</name><argument_list>(<argument><expr>"address (&lt;name&gt;)"</expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>test8</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectNameAddress2</name><argument_list>( <argument><expr>new <call><name>EmailAddress</name><argument_list>(<argument><expr>"(&lt;name&gt;) address"</expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>test9</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectNameAddress3</name><argument_list>( <argument><expr>new <call><name>EmailAddress</name><argument_list>(<argument><expr>"address"</expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testA</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectNameAddress3</name><argument_list>( <argument><expr>new <call><name>EmailAddress</name><argument_list>(<argument><expr>"&lt;address&gt;"</expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testB</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectNameAddress3</name><argument_list>( <argument><expr>new <call><name>EmailAddress</name><argument_list>(<argument><expr>" &lt;address&gt; "</expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testC</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectNameAddress3</name><argument_list>( <argument><expr>new <call><name>EmailAddress</name><argument_list>(<argument><expr>"&lt; address &gt;"</expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testD</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectNameAddress3</name><argument_list>( <argument><expr>new <call><name>EmailAddress</name><argument_list>(<argument><expr>" &lt; address &gt; "</expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>expectNameAddress</name><parameter_list>(<param><decl><type><name>EmailAddress</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>( <argument><expr>"name"</expr></argument>, <argument><expr><call><name><name>e</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>( <argument><expr>"address"</expr></argument>, <argument><expr><call><name><name>e</name>.<name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// where the name contains &lt;&gt;</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>expectNameAddress2</name><parameter_list>(<param><decl><type><name>EmailAddress</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>( <argument><expr>"&lt;name&gt;"</expr></argument>, <argument><expr><call><name><name>e</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>( <argument><expr>"address"</expr></argument>, <argument><expr><call><name><name>e</name>.<name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// where only an address is supplied</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>expectNameAddress3</name><parameter_list>(<param><decl><type><name>EmailAddress</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>( <argument><expr>"Expected null, found &lt;" + <call><name><name>e</name>.<name>getName</name></name><argument_list>()</argument_list></call> + "&gt;"</expr></argument>,
            <argument><expr><call><name><name>e</name>.<name>getName</name></name><argument_list>()</argument_list></call> == <name>null</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>( <argument><expr>"address"</expr></argument>, <argument><expr><call><name><name>e</name>.<name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
