<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\types\EnumeratedAttribute.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>

<comment type="javadoc">/**
 * Helper class for attributes that can only take one of a fixed list
 * of values.
 *
 * &lt;p&gt;See {@link org.apache.tools.ant.taskdefs.FixCRLF FixCRLF} for an
 * example.
 *
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>EnumeratedAttribute</name> <block>{
    <comment type="line">// CheckStyle:VisibilityModifier OFF - bc</comment>
    <comment type="javadoc">/**
     * The selected value in this enumeration.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>value</name></decl>;</decl_stmt>

    <comment type="line">// CheckStyle:VisibilityModifier ON</comment>

    <comment type="javadoc">/**
     * the index of the selected value in the array.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>index</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * This is the only method a subclass needs to implement.
     *
     * @return an array holding all possible values of the enumeration.
     * The order of elements must be fixed so that &lt;tt&gt;indexOfValue(String)&lt;/tt&gt;
     * always return the same index for the same value.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>String</name><index>[]</index></type> <name>getValues</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="javadoc">/** bean constructor */</comment>
    <constructor><specifier>protected</specifier> <name>EnumeratedAttribute</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <comment type="javadoc">/**
     * Factory method for instantiating EAs via API in a more
     * developer friendly way.
     * @param clazz             Class, extending EA, which to instantiate
     * @param value             The value to set on that EA
     * @return                  Configured EA
     * @throws BuildException   If the class could not be found or the value
     *                          is not valid for the given EA-class.
     * @see &lt;a href="http://issues.apache.org/bugzilla/show_bug.cgi?id=14831"&gt;
     * http://issues.apache.org/bugzilla/show_bug.cgi?id=14831&lt;/a&gt;
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>EnumeratedAttribute</name></type> <name>getInstance</name><parameter_list>(
        <param><decl><type><name><name>Class</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name>EnumeratedAttribute</name></extends></argument>&gt;</argument_list></name></type> <name>clazz</name></decl></param>,
        <param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr>!<name><name>EnumeratedAttribute</name>.<name><name/></name></name>class.<call><name>isAssignableFrom</name><argument_list>(<argument><expr><name>clazz</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                <argument><expr>"You have to provide a subclass from EnumeratedAttribut as clazz-parameter."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>EnumeratedAttribute</name></type> <name>ea</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>ea</name> = <call><name><name>clazz</name>.<name>newInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
        <expr_stmt><expr><call><name><name>ea</name>.<name>setValue</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>ea</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Invoked by {@link org.apache.tools.ant.IntrospectionHelper IntrospectionHelper}.
     * @param value the &lt;code&gt;String&lt;/code&gt; value of the attribute
     * @throws BuildException if the value is not valid for the attribute
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>setValue</name><parameter_list>(<param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>idx</name> =<init> <expr><call><name>indexOfValue</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>idx</name> == -1</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>value</name> + " is not a legal value for this attribute"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>index</name></name> = <name>idx</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>value</name></name> = <name>value</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Is this value included in the enumeration?
     * @param value the &lt;code&gt;String&lt;/code&gt; value to look up
     * @return true if the value is valid
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>containsValue</name><parameter_list>(<param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>(<call><name>indexOfValue</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> != -1)</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * get the index of a value in this enumeration.
     * @param value the string value to look for.
     * @return the index of the value in the array of strings
     * or -1 if it cannot be found.
     * @see #getValues()
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>indexOfValue</name><parameter_list>(<param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>values</name> =<init> <expr><call><name>getValues</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>values</name> == <name>null</name> || <name>value</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr>-1</expr>;</return>
        }</block></then></if>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>values</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <if>if <condition>(<expr><call><name><name>value</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><name>i</name></expr>;</return>
            }</block></then></if>
        }</block></for>
        <return>return <expr>-1</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * @return the selected value.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>getValue</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>value</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * @return the index of the selected value in the array.
     * @see #getValues()
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>getIndex</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>index</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Convert the value to its string form.
     *
     * @return the string form of the value.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getValue</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

}</block></class>
</unit>
