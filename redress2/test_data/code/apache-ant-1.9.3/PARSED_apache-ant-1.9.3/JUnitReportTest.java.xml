<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\taskdefs\optional\junit\JUnitReportTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>junit</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileReader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>URL</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildFileTest</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>

<comment type="javadoc">/**
 * Small testcase for the junitreporttask.
 * First test added to reproduce an fault, still a lot to improve
 *
 */</comment>
<class><specifier>public</specifier> class <name>JUnitReportTest</name> <super><extends>extends <name>BuildFileTest</name></extends></super> <block>{

    <constructor><specifier>public</specifier> <name>JUnitReportTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list><block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr>"src/etc/testcases/taskdefs/optional/junitreport.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"clean"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Verifies that no empty junit-noframes.html is generated when frames
     * output is selected via the default.
     * Needs reports1 task from junitreport.xml.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNoFileJUnitNoFrames</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"reports1"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"src/etc/testcases/taskdefs/optional/junitreport/test/html/junit-noframes.html"</expr></argument>)</argument_list></call>.<call><name>exists</name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"No file junit-noframes.html expected"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>assertIndexCreated</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr>!new <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr>"src/etc/testcases/taskdefs/optional/junitreport/test/html/index.html"</expr></argument>)</argument_list></call>.<call><name>exists</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"No file index file found"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

    }</block></function>

    <comment type="javadoc">/**
     * run a target, assert the index file is there, look for text in the log
     * @param targetName target
     * @param text optional text to look for
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>expectReportWithText</name><parameter_list>(<param><decl><type><name>String</name></type> <name>targetName</name></decl></param>, <param><decl><type><name>String</name></type> <name>text</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr><name>targetName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertIndexCreated</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>text</name>!=<name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>assertLogContaining</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>testEmptyFile</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>expectReportWithText</name><argument_list>(<argument><expr>"testEmptyFile"</expr></argument>,
                <argument><expr><name><name>XMLResultAggregator</name>.<name>WARNING_EMPTY_FILE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testIncompleteFile</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>expectReportWithText</name><argument_list>(<argument><expr>"testIncompleteFile"</expr></argument>,
                <argument><expr><name><name>XMLResultAggregator</name>.<name>WARNING_IS_POSSIBLY_CORRUPTED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testWrongElement</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>expectReportWithText</name><argument_list>(<argument><expr>"testWrongElement"</expr></argument>,
                <argument><expr><name><name>XMLResultAggregator</name>.<name>WARNING_INVALID_ROOT_ELEMENT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// Bugzilla Report 34963</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testStackTraceLineBreaks</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>expectReportWithText</name><argument_list>(<argument><expr>"testStackTraceLineBreaks"</expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>FileReader</name></type> <name>r</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>r</name> = new <call><name>FileReader</name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call></expr></argument>,
                                        <argument><expr>"src/etc/testcases/taskdefs/optional/junitreport/test/html/sampleproject/coins/0_CoinTest.html"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>report</name> =<init> <expr><call><name><name>FileUtils</name>.<name>readFully</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"output must contain &lt;br&gt;:\n" + <name>report</name></expr></argument>,
                       <argument><expr><call><name><name>report</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"junit.framework.AssertionFailedError: DOEG&lt;br&gt;"</expr></argument>)</argument_list></call>
                   &gt; -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"#51049: output must translate line breaks:\n" + <name>report</name></expr></argument>,
                       <argument><expr><call><name><name>report</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"cur['line.separator'] = '\\r\\n';"</expr></argument>)</argument_list></call>
                   &gt; -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>


    <comment type="line">// Bugzilla Report 38477</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testSpecialSignsInSrcPath</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testSpecialSignsInSrcPath"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>reportFile</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"src/etc/testcases/taskdefs/optional/junitreport/test/html/index.html"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// tests one the file object</comment>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"No index.html present. Not generated?"</expr></argument>, <argument><expr><call><name><name>reportFile</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Cant read the report file."</expr></argument>, <argument><expr><call><name><name>reportFile</name>.<name>canRead</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"File shouldnt be empty."</expr></argument>, <argument><expr><call><name><name>reportFile</name>.<name>length</name></name><argument_list>()</argument_list></call> &gt; 0</expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// conversion to URL via FileUtils like in XMLResultAggregator, not as suggested in the bug report</comment>
        <decl_stmt><decl><type><name>URL</name></type> <name>reportUrl</name> =<init> <expr>new <call><name>URL</name><argument_list>( <argument><expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call>.<call><name>toURI</name><argument_list>(<argument><expr><call><name><name>reportFile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>InputStream</name></type> <name>reportStream</name> =<init> <expr><call><name><name>reportUrl</name>.<name>openStream</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"This shouldnt be an empty stream."</expr></argument>, <argument><expr><call><name><name>reportStream</name>.<name>available</name></name><argument_list>()</argument_list></call> &gt; 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testSpecialSignsInHtmlPath</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testSpecialSignsInHtmlPath"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>reportFile</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"src/etc/testcases/taskdefs/optional/junitreport/test/html# $%\u00A7&amp;-!report/index.html"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// tests one the file object</comment>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"No index.html present. Not generated?"</expr></argument>, <argument><expr><call><name><name>reportFile</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Cant read the report file."</expr></argument>, <argument><expr><call><name><name>reportFile</name>.<name>canRead</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"File shouldnt be empty."</expr></argument>, <argument><expr><call><name><name>reportFile</name>.<name>length</name></name><argument_list>()</argument_list></call> &gt; 0</expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// conversion to URL via FileUtils like in XMLResultAggregator, not as suggested in the bug report</comment>
        <decl_stmt><decl><type><name>URL</name></type> <name>reportUrl</name> =<init> <expr>new <call><name>URL</name><argument_list>( <argument><expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call>.<call><name>toURI</name><argument_list>(<argument><expr><call><name><name>reportFile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>InputStream</name></type> <name>reportStream</name> =<init> <expr><call><name><name>reportUrl</name>.<name>openStream</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"This shouldnt be an empty stream."</expr></argument>, <argument><expr><call><name><name>reportStream</name>.<name>available</name></name><argument_list>()</argument_list></call> &gt; 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">//Bugzilla Report 39708</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testWithStyleFromDir</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testWithStyleFromDir"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>reportFile</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"src/etc/testcases/taskdefs/optional/junitreport/test/html/index.html"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// tests one the file object</comment>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"No index.html present. Not generated?"</expr></argument>, <argument><expr><call><name><name>reportFile</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Cant read the report file."</expr></argument>, <argument><expr><call><name><name>reportFile</name>.<name>canRead</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"File shouldnt be empty."</expr></argument>, <argument><expr><call><name><name>reportFile</name>.<name>length</name></name><argument_list>()</argument_list></call> &gt; 0</expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// conversion to URL via FileUtils like in XMLResultAggregator, not as suggested in the bug report</comment>
        <decl_stmt><decl><type><name>URL</name></type> <name>reportUrl</name> =<init> <expr>new <call><name>URL</name><argument_list>( <argument><expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call>.<call><name>toURI</name><argument_list>(<argument><expr><call><name><name>reportFile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>InputStream</name></type> <name>reportStream</name> =<init> <expr><call><name><name>reportUrl</name>.<name>openStream</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"This shouldnt be an empty stream."</expr></argument>, <argument><expr><call><name><name>reportStream</name>.<name>available</name></name><argument_list>()</argument_list></call> &gt; 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">//Bugzilla Report 40021</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNoFrames</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testNoFrames"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>reportFile</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"src/etc/testcases/taskdefs/optional/junitreport/test/html/junit-noframes.html"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// tests one the file object</comment>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"No junit-noframes.html present. Not generated?"</expr></argument>, <argument><expr><call><name><name>reportFile</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Cant read the report file."</expr></argument>, <argument><expr><call><name><name>reportFile</name>.<name>canRead</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"File shouldnt be empty."</expr></argument>, <argument><expr><call><name><name>reportFile</name>.<name>length</name></name><argument_list>()</argument_list></call> &gt; 0</expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// conversion to URL via FileUtils like in XMLResultAggregator, not as suggested in the bug report</comment>
        <decl_stmt><decl><type><name>URL</name></type> <name>reportUrl</name> =<init> <expr>new <call><name>URL</name><argument_list>( <argument><expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call>.<call><name>toURI</name><argument_list>(<argument><expr><call><name><name>reportFile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>InputStream</name></type> <name>reportStream</name> =<init> <expr><call><name><name>reportUrl</name>.<name>openStream</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"This shouldnt be an empty stream."</expr></argument>, <argument><expr><call><name><name>reportStream</name>.<name>available</name></name><argument_list>()</argument_list></call> &gt; 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <comment type="line">//Bugzilla Report 39708</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testWithStyleFromDirAndXslImport</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testWithStyleFromDirAndXslImport"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>reportFile</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"src/etc/testcases/taskdefs/optional/junitreport/test/html/index.html"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// tests one the file object</comment>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"No index.html present. Not generated?"</expr></argument>, <argument><expr><call><name><name>reportFile</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Cant read the report file."</expr></argument>, <argument><expr><call><name><name>reportFile</name>.<name>canRead</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"File shouldnt be empty."</expr></argument>, <argument><expr><call><name><name>reportFile</name>.<name>length</name></name><argument_list>()</argument_list></call> &gt; 0</expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// conversion to URL via FileUtils like in XMLResultAggregator, not as suggested in the bug report</comment>
        <decl_stmt><decl><type><name>URL</name></type> <name>reportUrl</name> =<init> <expr>new <call><name>URL</name><argument_list>( <argument><expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call>.<call><name>toURI</name><argument_list>(<argument><expr><call><name><name>reportFile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>InputStream</name></type> <name>reportStream</name> =<init> <expr><call><name><name>reportUrl</name>.<name>openStream</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"This shouldnt be an empty stream."</expr></argument>, <argument><expr><call><name><name>reportStream</name>.<name>available</name></name><argument_list>()</argument_list></call> &gt; 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testWithStyleFromClasspath</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testWithStyleFromClasspath"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>reportFile</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"src/etc/testcases/taskdefs/optional/junitreport/test/html/index.html"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// tests one the file object</comment>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"No index.html present. Not generated?"</expr></argument>, <argument><expr><call><name><name>reportFile</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Cant read the report file."</expr></argument>, <argument><expr><call><name><name>reportFile</name>.<name>canRead</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"File shouldnt be empty."</expr></argument>, <argument><expr><call><name><name>reportFile</name>.<name>length</name></name><argument_list>()</argument_list></call> &gt; 0</expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// conversion to URL via FileUtils like in XMLResultAggregator, not as suggested in the bug report</comment>
        <decl_stmt><decl><type><name>URL</name></type> <name>reportUrl</name> =<init> <expr>new <call><name>URL</name><argument_list>( <argument><expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call>.<call><name>toURI</name><argument_list>(<argument><expr><call><name><name>reportFile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>InputStream</name></type> <name>reportStream</name> =<init> <expr><call><name><name>reportUrl</name>.<name>openStream</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"This shouldnt be an empty stream."</expr></argument>, <argument><expr><call><name><name>reportStream</name>.<name>available</name></name><argument_list>()</argument_list></call> &gt; 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testWithParams</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>expectLogContaining</name><argument_list>(<argument><expr>"testWithParams"</expr></argument>, <argument><expr>"key1=value1,key2=value2"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>reportFile</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"src/etc/testcases/taskdefs/optional/junitreport/test/html/index.html"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// tests one the file object</comment>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"No index.html present. Not generated?"</expr></argument>, <argument><expr><call><name><name>reportFile</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Cant read the report file."</expr></argument>, <argument><expr><call><name><name>reportFile</name>.<name>canRead</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"File shouldnt be empty."</expr></argument>, <argument><expr><call><name><name>reportFile</name>.<name>length</name></name><argument_list>()</argument_list></call> &gt; 0</expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// conversion to URL via FileUtils like in XMLResultAggregator, not as suggested in the bug report</comment>
        <decl_stmt><decl><type><name>URL</name></type> <name>reportUrl</name> =<init> <expr>new <call><name>URL</name><argument_list>( <argument><expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call>.<call><name>toURI</name><argument_list>(<argument><expr><call><name><name>reportFile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>InputStream</name></type> <name>reportStream</name> =<init> <expr><call><name><name>reportUrl</name>.<name>openStream</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"This shouldnt be an empty stream."</expr></argument>, <argument><expr><call><name><name>reportStream</name>.<name>available</name></name><argument_list>()</argument_list></call> &gt; 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
