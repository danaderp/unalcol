<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\taskdefs\optional\vss\MSVSSTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>vss</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>SimpleDateFormat</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Calendar</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Date</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>TimeZone</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildFileTest</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Location</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>Tstamp</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Commandline</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Path</name></name>;</import>

<comment type="javadoc">/**
 *  Testcase to ensure that command line generation and required attributes are correct.
 *
 */</comment>
<class><specifier>public</specifier> class <name>MSVSSTest</name> <super><extends>extends <name>BuildFileTest</name></extends> <implements>implements <name>MSVSSConstants</name></implements></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>Commandline</name></type> <name>commandline</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>VSS_PROJECT_PATH</name> =<init> <expr>"/SourceRoot/Project"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DS_VSS_PROJECT_PATH</name> =<init> <expr>"$/SourceRoot/Project"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>VSS_USERNAME</name> =<init> <expr>"ant"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>VSS_PASSWORD</name> =<init> <expr>"rocks"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>LOCAL_PATH</name> =<init> <expr>"testdir"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SRC_LABEL</name> =<init> <expr>"label1"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>LONG_LABEL</name> =<init> <expr>"123456789012345678901234567890"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SRC_COMMENT</name> =<init> <expr>"I fixed a bug"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>VERSION</name> =<init> <expr>"007"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DATE</name> =<init> <expr>"00-00-00"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DATE2</name> =<init> <expr>"01-01-01"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>OUTPUT</name> =<init> <expr>"output.log"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SS_DIR</name> =<init> <expr>"c:/winnt".<call><name>replace</name><argument_list>(<argument><expr>'/'</expr></argument>, <argument><expr><name><name>File</name>.<name>separatorChar</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     *  Constructor for the MSVSSTest object
     *
     * @param  s  Test name
     */</comment>
    <constructor><specifier>public</specifier> <name>MSVSSTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     *  The JUnit setup method
     *
     * @throws  Exception
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list>
        <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><name>project</name> = new <call><name>Project</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>setBasedir</name></name><argument_list>(<argument><expr>"."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     *  The teardown method for JUnit
     *
     * @throws  Exception
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>()</parameter_list>
        <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>file</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>project</name>.<name>getBaseDir</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>LOCAL_PATH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>file</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>file</name>.<name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**  Tests VSSGet commandline generation.  */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testGetCommandLine</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>sTestCmdLine</name> =<init> <expr><block>{<expr><name><name>MSVSS</name>.<name>SS_EXE</name></name></expr>, <expr><name><name>MSVSS</name>.<name>COMMAND_GET</name></name></expr>, <expr><name>DS_VSS_PROJECT_PATH</name></expr>,
                <expr><name><name>MSVSS</name>.<name>FLAG_OVERRIDE_WORKING_DIR</name></name> + <call><name><name>project</name>.<name>getBaseDir</name></name><argument_list>()</argument_list></call>.<call><name>getAbsolutePath</name><argument_list>()</argument_list></call>
                 + <name><name>File</name>.<name>separator</name></name> + <name>LOCAL_PATH</name></expr>, <expr><name><name>MSVSS</name>.<name>FLAG_AUTORESPONSE_DEF</name></name></expr>,
                <expr><name><name>MSVSS</name>.<name>FLAG_RECURSION</name></name></expr>, <expr><name><name>MSVSS</name>.<name>FLAG_VERSION</name></name> + <name>VERSION</name></expr>, <expr><name><name>MSVSS</name>.<name>FLAG_LOGIN</name></name>
                 + <name>VSS_USERNAME</name> + "," + <name>VSS_PASSWORD</name></expr>, <expr><name>FLAG_FILETIME_UPDATED</name></expr>, <expr><name>FLAG_SKIP_WRITABLE</name></expr>}</block></expr></init></decl>;</decl_stmt>

        <comment type="line">// Set up a VSSGet task</comment>
        <decl_stmt><decl><type><name>MSVSSGET</name></type> <name>vssGet</name> =<init> <expr>new <call><name>MSVSSGET</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>vssGet</name>.<name>setProject</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vssGet</name>.<name>setRecursive</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vssGet</name>.<name>setLocalpath</name></name><argument_list>(<argument><expr>new <call><name>Path</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr><name>LOCAL_PATH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vssGet</name>.<name>setLogin</name></name><argument_list>(<argument><expr><name>VSS_USERNAME</name> + "," + <name>VSS_PASSWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vssGet</name>.<name>setVersion</name></name><argument_list>(<argument><expr><name>VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vssGet</name>.<name>setQuiet</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vssGet</name>.<name>setDate</name></name><argument_list>(<argument><expr><name>DATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vssGet</name>.<name>setLabel</name></name><argument_list>(<argument><expr><name>SRC_LABEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vssGet</name>.<name>setVsspath</name></name><argument_list>(<argument><expr><name>VSS_PROJECT_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>MSVSS</name>.<name>CurrentModUpdated</name></name></type> <name>cmu</name> =<init> <expr>new <call><name><name>MSVSS</name>.<name>CurrentModUpdated</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>cmu</name>.<name>setValue</name></name><argument_list>(<argument><expr><name>TIME_UPDATED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vssGet</name>.<name>setFileTimeStamp</name></name><argument_list>(<argument><expr><name>cmu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>MSVSS</name>.<name>WritableFiles</name></name></type> <name>wf</name> =<init> <expr>new <call><name><name>MSVSS</name>.<name>WritableFiles</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>wf</name>.<name>setValue</name></name><argument_list>(<argument><expr><name>WRITABLE_SKIP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vssGet</name>.<name>setWritableFiles</name></name><argument_list>(<argument><expr><name>wf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>commandline</name> = <call><name><name>vssGet</name>.<name>buildCmdLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>checkCommandLines</name><argument_list>(<argument><expr><name>sTestCmdLine</name></expr></argument>, <argument><expr><call><name><name>commandline</name>.<name>getCommandline</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**  Tests VSSGet required attributes.  */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testGetExceptions</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr>"src/etc/testcases/taskdefs/optional/vss/vss.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>expectSpecificBuildException</name><argument_list>(<argument><expr>"vssget.1"</expr></argument>, <argument><expr>"some cause"</expr></argument>, <argument><expr>"vsspath attribute must be set!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**  Tests Label commandline generation.  */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testLabelCommandLine1</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>sTestCmdLine</name> =<init> <expr><block>{<expr><name><name>MSVSS</name>.<name>SS_EXE</name></name></expr>, <expr><name><name>MSVSS</name>.<name>COMMAND_LABEL</name></name></expr>, <expr><name>DS_VSS_PROJECT_PATH</name></expr>,
                <expr><name><name>MSVSS</name>.<name>FLAG_COMMENT</name></name> + <name>SRC_COMMENT</name></expr>, <expr><name><name>MSVSS</name>.<name>FLAG_AUTORESPONSE_YES</name></name></expr>,
                <expr><name><name>MSVSS</name>.<name>FLAG_LABEL</name></name> + <name>SRC_LABEL</name></expr>, <expr><name><name>MSVSS</name>.<name>FLAG_VERSION</name></name> + <name>VERSION</name></expr>, <expr><name><name>MSVSS</name>.<name>FLAG_LOGIN</name></name>
                 + <name>VSS_USERNAME</name> + "," + <name>VSS_PASSWORD</name></expr>}</block></expr></init></decl>;</decl_stmt>

        <comment type="line">// Set up a VSSLabel task</comment>
        <decl_stmt><decl><type><name>MSVSSLABEL</name></type> <name>vssLabel</name> =<init> <expr>new <call><name>MSVSSLABEL</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>vssLabel</name>.<name>setProject</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vssLabel</name>.<name>setComment</name></name><argument_list>(<argument><expr><name>SRC_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vssLabel</name>.<name>setLogin</name></name><argument_list>(<argument><expr><name>VSS_USERNAME</name> + "," + <name>VSS_PASSWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vssLabel</name>.<name>setVersion</name></name><argument_list>(<argument><expr><name>VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vssLabel</name>.<name>setAutoresponse</name></name><argument_list>(<argument><expr>"Y"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vssLabel</name>.<name>setLabel</name></name><argument_list>(<argument><expr><name>SRC_LABEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vssLabel</name>.<name>setVsspath</name></name><argument_list>(<argument><expr><name>VSS_PROJECT_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>commandline</name> = <call><name><name>vssLabel</name>.<name>buildCmdLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>checkCommandLines</name><argument_list>(<argument><expr><name>sTestCmdLine</name></expr></argument>, <argument><expr><call><name><name>commandline</name>.<name>getCommandline</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**  Tests Label commandline generation with a label of more than 31 chars.  */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testLabelCommandLine2</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>sTestCmdLine</name> =<init> <expr><block>{<expr><name><name>MSVSS</name>.<name>SS_EXE</name></name></expr>, <expr><name><name>MSVSS</name>.<name>COMMAND_LABEL</name></name></expr>, <expr><name>DS_VSS_PROJECT_PATH</name></expr>,
                <expr><name><name>MSVSS</name>.<name>FLAG_COMMENT</name></name> + <name>SRC_COMMENT</name></expr>, <expr><name><name>MSVSS</name>.<name>FLAG_AUTORESPONSE_DEF</name></name></expr>,
                <expr><name><name>MSVSS</name>.<name>FLAG_LABEL</name></name> + <name>LONG_LABEL</name></expr>,
                <expr><name><name>MSVSS</name>.<name>FLAG_LOGIN</name></name> + <name>VSS_USERNAME</name> + "," + <name>VSS_PASSWORD</name></expr>}</block></expr></init></decl>;</decl_stmt>

        <comment type="line">// Set up a VSSLabel task</comment>
        <decl_stmt><decl><type><name>MSVSSLABEL</name></type> <name>vssLabel</name> =<init> <expr>new <call><name>MSVSSLABEL</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>vssLabel</name>.<name>setProject</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vssLabel</name>.<name>setComment</name></name><argument_list>(<argument><expr><name>SRC_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vssLabel</name>.<name>setLogin</name></name><argument_list>(<argument><expr><name>VSS_USERNAME</name> + "," + <name>VSS_PASSWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vssLabel</name>.<name>setLabel</name></name><argument_list>(<argument><expr><name>LONG_LABEL</name> + "blahblah"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vssLabel</name>.<name>setVsspath</name></name><argument_list>(<argument><expr><name>VSS_PROJECT_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>commandline</name> = <call><name><name>vssLabel</name>.<name>buildCmdLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>checkCommandLines</name><argument_list>(<argument><expr><name>sTestCmdLine</name></expr></argument>, <argument><expr><call><name><name>commandline</name>.<name>getCommandline</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Test VSSLabel required attributes.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testLabelExceptions</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr>"src/etc/testcases/taskdefs/optional/vss/vss.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>expectSpecificBuildException</name><argument_list>(<argument><expr>"vsslabel.1"</expr></argument>, <argument><expr>"some cause"</expr></argument>, <argument><expr>"vsspath attribute must be set!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>expectSpecificBuildException</name><argument_list>(<argument><expr>"vsslabel.2"</expr></argument>, <argument><expr>"some cause"</expr></argument>, <argument><expr>"label attribute must be set!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**  Tests VSSHistory commandline generation with from label.  */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testHistoryCommandLine1</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>sTestCmdLine</name> =<init> <expr><block>{<expr><name><name>MSVSS</name>.<name>SS_EXE</name></name></expr>, <expr><name><name>MSVSS</name>.<name>COMMAND_HISTORY</name></name></expr>, <expr><name>DS_VSS_PROJECT_PATH</name></expr>,
                <expr><name><name>MSVSS</name>.<name>FLAG_AUTORESPONSE_DEF</name></name></expr>, <expr><name><name>MSVSS</name>.<name>FLAG_VERSION_LABEL</name></name> + <name>LONG_LABEL</name>
                 + <name><name>MSVSS</name>.<name>VALUE_FROMLABEL</name></name> + <name>SRC_LABEL</name></expr>, <expr><name><name>MSVSS</name>.<name>FLAG_LOGIN</name></name> + <name>VSS_USERNAME</name>
                 + "," + <name>VSS_PASSWORD</name></expr>, <expr><name><name>MSVSS</name>.<name>FLAG_OUTPUT</name></name> + <call><name><name>project</name>.<name>getBaseDir</name></name><argument_list>()</argument_list></call>.<call><name>getAbsolutePath</name><argument_list>()</argument_list></call>
                 + <name><name>File</name>.<name>separator</name></name> + <name>OUTPUT</name></expr>}</block></expr></init></decl>;</decl_stmt>

        <comment type="line">// Set up a VSSHistory task</comment>
        <decl_stmt><decl><type><name>MSVSSHISTORY</name></type> <name>vssHistory</name> =<init> <expr>new <call><name>MSVSSHISTORY</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>vssHistory</name>.<name>setProject</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>vssHistory</name>.<name>setLogin</name></name><argument_list>(<argument><expr><name>VSS_USERNAME</name> + "," + <name>VSS_PASSWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>vssHistory</name>.<name>setFromLabel</name></name><argument_list>(<argument><expr><name>SRC_LABEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vssHistory</name>.<name>setToLabel</name></name><argument_list>(<argument><expr><name>LONG_LABEL</name> + "blahblah"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vssHistory</name>.<name>setVsspath</name></name><argument_list>(<argument><expr><name>VSS_PROJECT_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vssHistory</name>.<name>setRecursive</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vssHistory</name>.<name>setOutput</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>project</name>.<name>getBaseDir</name></name><argument_list>()</argument_list></call>.<call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>OUTPUT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>commandline</name> = <call><name><name>vssHistory</name>.<name>buildCmdLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>checkCommandLines</name><argument_list>(<argument><expr><name>sTestCmdLine</name></expr></argument>, <argument><expr><call><name><name>commandline</name>.<name>getCommandline</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**  Tests VSSHistory commandline generation with from date.  */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testHistoryCommandLine2</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>sTestCmdLine</name> =<init> <expr><block>{<expr><name><name>MSVSS</name>.<name>SS_EXE</name></name></expr>, <expr><name><name>MSVSS</name>.<name>COMMAND_HISTORY</name></name></expr>, <expr><name>DS_VSS_PROJECT_PATH</name></expr>,
                <expr><name><name>MSVSS</name>.<name>FLAG_AUTORESPONSE_DEF</name></name></expr>, <expr><name><name>MSVSS</name>.<name>FLAG_VERSION_DATE</name></name> + <name>DATE</name> + <name><name>MSVSS</name>.<name>VALUE_FROMDATE</name></name>
                + <name>DATE2</name></expr>, <expr><name><name>MSVSS</name>.<name>FLAG_RECURSION</name></name></expr>,  <expr><name><name>MSVSS</name>.<name>FLAG_LOGIN</name></name> + <name>VSS_USERNAME</name> + "," + <name>VSS_PASSWORD</name></expr>}</block></expr></init></decl>;</decl_stmt>

        <comment type="line">// Set up a VSSHistory task</comment>
        <decl_stmt><decl><type><name>MSVSSHISTORY</name></type> <name>vssHistory</name> =<init> <expr>new <call><name>MSVSSHISTORY</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>vssHistory</name>.<name>setProject</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vssHistory</name>.<name>setLogin</name></name><argument_list>(<argument><expr><name>VSS_USERNAME</name> + "," + <name>VSS_PASSWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vssHistory</name>.<name>setFromDate</name></name><argument_list>(<argument><expr><name>DATE2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vssHistory</name>.<name>setToDate</name></name><argument_list>(<argument><expr><name>DATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vssHistory</name>.<name>setVsspath</name></name><argument_list>(<argument><expr><name>VSS_PROJECT_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vssHistory</name>.<name>setRecursive</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>commandline</name> = <call><name><name>vssHistory</name>.<name>buildCmdLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>checkCommandLines</name><argument_list>(<argument><expr><name>sTestCmdLine</name></expr></argument>, <argument><expr><call><name><name>commandline</name>.<name>getCommandline</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**  Tests VSSHistory commandline generation with date calculation.  */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testHistoryCommandLine3</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// Set up a Timestamp</comment>
        <decl_stmt><decl><type><name>Tstamp</name></type> <name>tstamp</name> =<init> <expr>new <call><name>Tstamp</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Location</name></type> <name>location</name> =<init> <expr>new <call><name>Location</name><argument_list>(<argument><expr>"src/etc/testcases/taskdefs/optional/vss/vss.xml"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>tstamp</name>.<name>setLocation</name></name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>tstamp</name>.<name>setProject</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>Tstamp</name>.<name>CustomFormat</name></name></type> <name>format</name> =<init> <expr><call><name><name>tstamp</name>.<name>createFormat</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>format</name>.<name>setProperty</name></name><argument_list>(<argument><expr>"today"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>format</name>.<name>setPattern</name></name><argument_list>(<argument><expr>"HH:mm:ss z"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>format</name>.<name>setTimezone</name></name><argument_list>(<argument><expr>"GMT"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>date</name> =<init> <expr><call><name><name>Calendar</name>.<name>getInstance</name></name><argument_list>()</argument_list></call>.<call><name>getTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>format</name>.<name>execute</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr><name>date</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>today</name> =<init> <expr><call><name><name>project</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"today"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Get today's date</comment>
        <decl_stmt><decl><type><name>SimpleDateFormat</name></type> <name>sdf</name> =<init> <expr>new <call><name>SimpleDateFormat</name><argument_list>(<argument><expr>"HH:mm:ss z"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sdf</name>.<name>setTimeZone</name></name><argument_list>( <argument><expr><call><name><name>TimeZone</name>.<name>getTimeZone</name></name><argument_list>(<argument><expr>"GMT"</expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>expected</name> =<init> <expr><call><name><name>sdf</name>.<name>format</name></name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Set up a VSSHistory task</comment>
        <decl_stmt><decl><type><name>MSVSSHISTORY</name></type> <name>vssHistory</name> =<init> <expr>new <call><name>MSVSSHISTORY</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>vssHistory</name>.<name>setProject</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vssHistory</name>.<name>setLogin</name></name><argument_list>(<argument><expr><name>VSS_USERNAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vssHistory</name>.<name>setToDate</name></name><argument_list>(<argument><expr><name>today</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vssHistory</name>.<name>setVsspath</name></name><argument_list>(<argument><expr><name>VSS_PROJECT_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>sTestCmdLine</name> =<init> <expr><block>{<expr><name><name>MSVSS</name>.<name>SS_EXE</name></name></expr>, <expr><name><name>MSVSS</name>.<name>COMMAND_HISTORY</name></name></expr>, <expr><name>DS_VSS_PROJECT_PATH</name></expr>,
        <expr><name><name>MSVSS</name>.<name>FLAG_AUTORESPONSE_DEF</name></name></expr>, <expr><name><name>MSVSS</name>.<name>FLAG_VERSION_DATE</name></name> + <name>expected</name></expr>, <expr><name><name>MSVSS</name>.<name>FLAG_LOGIN</name></name> + <name>VSS_USERNAME</name></expr>}</block></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>commandline</name> = <call><name><name>vssHistory</name>.<name>buildCmdLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>checkCommandLines</name><argument_list>(<argument><expr><name>sTestCmdLine</name></expr></argument>, <argument><expr><call><name><name>commandline</name>.<name>getCommandline</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Tests VSSHistory required attributes.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testHistoryExceptions</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr>"src/etc/testcases/taskdefs/optional/vss/vss.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>expectSpecificBuildException</name><argument_list>(<argument><expr>"vsshistory.1"</expr></argument>, <argument><expr>"some cause"</expr></argument>, <argument><expr>"vsspath attribute must be set!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**  Tests CheckIn commandline generation.  */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testCheckinCommandLine</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>sTestCmdLine</name> =<init> <expr><block>{<expr><name><name>MSVSS</name>.<name>SS_EXE</name></name></expr>, <expr><name><name>MSVSS</name>.<name>COMMAND_CHECKIN</name></name></expr>, <expr><name>DS_VSS_PROJECT_PATH</name></expr>,
                <expr><name><name>MSVSS</name>.<name>FLAG_AUTORESPONSE_NO</name></name></expr>, <expr><name><name>MSVSS</name>.<name>FLAG_WRITABLE</name></name></expr>, <expr><name><name>MSVSS</name>.<name>FLAG_LOGIN</name></name> + <name>VSS_USERNAME</name></expr>,
                <expr><name><name>MSVSS</name>.<name>FLAG_COMMENT</name></name> + <name>SRC_COMMENT</name></expr>}</block></expr></init></decl>;</decl_stmt>

        <comment type="line">// Set up a VSSCheckIn task</comment>
        <decl_stmt><decl><type><name>MSVSSCHECKIN</name></type> <name>vssCheckin</name> =<init> <expr>new <call><name>MSVSSCHECKIN</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>vssCheckin</name>.<name>setProject</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vssCheckin</name>.<name>setComment</name></name><argument_list>(<argument><expr><name>SRC_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vssCheckin</name>.<name>setLogin</name></name><argument_list>(<argument><expr><name>VSS_USERNAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vssCheckin</name>.<name>setAutoresponse</name></name><argument_list>(<argument><expr>"N"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vssCheckin</name>.<name>setVsspath</name></name><argument_list>(<argument><expr><name>VSS_PROJECT_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vssCheckin</name>.<name>setWritable</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>commandline</name> = <call><name><name>vssCheckin</name>.<name>buildCmdLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>checkCommandLines</name><argument_list>(<argument><expr><name>sTestCmdLine</name></expr></argument>, <argument><expr><call><name><name>commandline</name>.<name>getCommandline</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Test VSSCheckIn required attributes.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testCheckinExceptions</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr>"src/etc/testcases/taskdefs/optional/vss/vss.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>expectSpecificBuildException</name><argument_list>(<argument><expr>"vsscheckin.1"</expr></argument>, <argument><expr>"some cause"</expr></argument>, <argument><expr>"vsspath attribute must be set!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**  Tests CheckOut commandline generation.  */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testCheckoutCommandLine</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>sTestCmdLine</name> =<init> <expr><block>{<expr><name>SS_DIR</name> + <name><name>File</name>.<name>separator</name></name> + <name><name>MSVSS</name>.<name>SS_EXE</name></name></expr>, <expr><name><name>MSVSS</name>.<name>COMMAND_CHECKOUT</name></name></expr>,
                <expr><name>DS_VSS_PROJECT_PATH</name></expr>, <expr><name><name>MSVSS</name>.<name>FLAG_AUTORESPONSE_DEF</name></name></expr>, <expr><name><name>MSVSS</name>.<name>FLAG_RECURSION</name></name></expr>,
                <expr><name><name>MSVSS</name>.<name>FLAG_VERSION_DATE</name></name> + <name>DATE</name></expr>, <expr><name><name>MSVSS</name>.<name>FLAG_LOGIN</name></name> + <name>VSS_USERNAME</name></expr>,
                <expr><name>FLAG_FILETIME_MODIFIED</name></expr>, <expr><name>FLAG_NO_GET</name></expr>}</block></expr></init></decl>;</decl_stmt>

        <comment type="line">// Set up a VSSCheckOut task</comment>
        <decl_stmt><decl><type><name>MSVSSCHECKOUT</name></type> <name>vssCheckout</name> =<init> <expr>new <call><name>MSVSSCHECKOUT</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>vssCheckout</name>.<name>setProject</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vssCheckout</name>.<name>setLogin</name></name><argument_list>(<argument><expr><name>VSS_USERNAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vssCheckout</name>.<name>setVsspath</name></name><argument_list>(<argument><expr><name>DS_VSS_PROJECT_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vssCheckout</name>.<name>setRecursive</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vssCheckout</name>.<name>setDate</name></name><argument_list>(<argument><expr><name>DATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vssCheckout</name>.<name>setLabel</name></name><argument_list>(<argument><expr><name>SRC_LABEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vssCheckout</name>.<name>setSsdir</name></name><argument_list>(<argument><expr><name>SS_DIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>MSVSS</name>.<name>CurrentModUpdated</name></name></type> <name>cmu</name> =<init> <expr>new <call><name><name>MSVSS</name>.<name>CurrentModUpdated</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>cmu</name>.<name>setValue</name></name><argument_list>(<argument><expr><name>TIME_MODIFIED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vssCheckout</name>.<name>setFileTimeStamp</name></name><argument_list>(<argument><expr><name>cmu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vssCheckout</name>.<name>setGetLocalCopy</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>commandline</name> = <call><name><name>vssCheckout</name>.<name>buildCmdLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>checkCommandLines</name><argument_list>(<argument><expr><name>sTestCmdLine</name></expr></argument>, <argument><expr><call><name><name>commandline</name>.<name>getCommandline</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Test VSSCheckout required attributes.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testCheckoutExceptions</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr>"src/etc/testcases/taskdefs/optional/vss/vss.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>expectSpecificBuildException</name><argument_list>(<argument><expr>"vsscheckout.1"</expr></argument>, <argument><expr>"some cause"</expr></argument>, <argument><expr>"vsspath attribute must be set!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>expectSpecificBuildException</name><argument_list>(<argument><expr>"vsscheckout.2"</expr></argument>, <argument><expr>"some cause"</expr></argument>, <argument><expr>"blah is not a legal value for this attribute"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**  Tests Add commandline generation.  */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testAddCommandLine</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>sTestCmdLine</name> =<init> <expr><block>{<expr><name>SS_DIR</name> + <name><name>File</name>.<name>separator</name></name> + <name><name>MSVSS</name>.<name>SS_EXE</name></name></expr>, <expr><name><name>MSVSS</name>.<name>COMMAND_ADD</name></name></expr>,
                <expr><call><name><name>project</name>.<name>getBaseDir</name></name><argument_list>()</argument_list></call>.<call><name>getAbsolutePath</name><argument_list>()</argument_list></call> + <name><name>File</name>.<name>separator</name></name> + <name>LOCAL_PATH</name></expr>,
                <expr><name><name>MSVSS</name>.<name>FLAG_AUTORESPONSE_DEF</name></name></expr>, <expr><name><name>MSVSS</name>.<name>FLAG_RECURSION</name></name></expr>,
                <expr><name><name>MSVSS</name>.<name>FLAG_LOGIN</name></name> + <name>VSS_USERNAME</name> + "," + <name>VSS_PASSWORD</name></expr>, <expr><name><name>MSVSS</name>.<name>FLAG_COMMENT</name></name> + "-"</expr>}</block></expr></init></decl>;</decl_stmt>

        <comment type="line">// Set up a VSSAdd task</comment>
        <decl_stmt><decl><type><name>MSVSSADD</name></type> <name>vssAdd</name> =<init> <expr>new <call><name>MSVSSADD</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>vssAdd</name>.<name>setProject</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vssAdd</name>.<name>setLogin</name></name><argument_list>(<argument><expr><name>VSS_USERNAME</name> + "," + <name>VSS_PASSWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vssAdd</name>.<name>setVsspath</name></name><argument_list>(<argument><expr><name>DS_VSS_PROJECT_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vssAdd</name>.<name>setRecursive</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vssAdd</name>.<name>setSsdir</name></name><argument_list>(<argument><expr><name>SS_DIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vssAdd</name>.<name>setWritable</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vssAdd</name>.<name>setLocalpath</name></name><argument_list>(<argument><expr>new <call><name>Path</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr><name>LOCAL_PATH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>commandline</name> = <call><name><name>vssAdd</name>.<name>buildCmdLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>checkCommandLines</name><argument_list>(<argument><expr><name>sTestCmdLine</name></expr></argument>, <argument><expr><call><name><name>commandline</name>.<name>getCommandline</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Test VSSAdd required attributes.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testAddExceptions</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr>"src/etc/testcases/taskdefs/optional/vss/vss.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>expectSpecificBuildException</name><argument_list>(<argument><expr>"vssadd.1"</expr></argument>, <argument><expr>"some cause"</expr></argument>, <argument><expr>"localPath attribute must be set!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**  Tests CP commandline generation.  */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testCpCommandLine</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>sTestCmdLine</name> =<init> <expr><block>{<expr><name><name>MSVSS</name>.<name>SS_EXE</name></name></expr>, <expr><name><name>MSVSS</name>.<name>COMMAND_CP</name></name></expr>,
                <expr><name>DS_VSS_PROJECT_PATH</name></expr>, <expr><name><name>MSVSS</name>.<name>FLAG_AUTORESPONSE_DEF</name></name></expr>, <expr><name><name>MSVSS</name>.<name>FLAG_LOGIN</name></name> +
                <name>VSS_USERNAME</name></expr>}</block></expr></init></decl>;</decl_stmt>

        <comment type="line">// Set up a VSSCp task</comment>
        <decl_stmt><decl><type><name>MSVSSCP</name></type> <name>vssCp</name> =<init> <expr>new <call><name>MSVSSCP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>vssCp</name>.<name>setProject</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vssCp</name>.<name>setLogin</name></name><argument_list>(<argument><expr><name>VSS_USERNAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vssCp</name>.<name>setVsspath</name></name><argument_list>(<argument><expr><name>DS_VSS_PROJECT_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>commandline</name> = <call><name><name>vssCp</name>.<name>buildCmdLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>checkCommandLines</name><argument_list>(<argument><expr><name>sTestCmdLine</name></expr></argument>, <argument><expr><call><name><name>commandline</name>.<name>getCommandline</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Test VSSCP required attributes.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testCpExceptions</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr>"src/etc/testcases/taskdefs/optional/vss/vss.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>expectSpecificBuildException</name><argument_list>(<argument><expr>"vsscp.1"</expr></argument>, <argument><expr>"some cause"</expr></argument>, <argument><expr>"vsspath attribute must be set!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**  Tests Create commandline generation.  */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testCreateCommandLine</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>sTestCmdLine</name> =<init> <expr><block>{ <expr><name><name>MSVSS</name>.<name>SS_EXE</name></name></expr>, <expr><name><name>MSVSS</name>.<name>COMMAND_CREATE</name></name></expr>,
                <expr><name>DS_VSS_PROJECT_PATH</name></expr>, <expr><name><name>MSVSS</name>.<name>FLAG_COMMENT</name></name> + <name>SRC_COMMENT</name></expr>, <expr><name><name>MSVSS</name>.<name>FLAG_AUTORESPONSE_NO</name></name></expr>,
                <expr><name><name>MSVSS</name>.<name>FLAG_QUIET</name></name></expr>, <expr><name><name>MSVSS</name>.<name>FLAG_LOGIN</name></name> + <name>VSS_USERNAME</name></expr>}</block></expr></init></decl>;</decl_stmt>

        <comment type="line">// Set up a VSSCreate task</comment>
        <decl_stmt><decl><type><name>MSVSSCREATE</name></type> <name>vssCreate</name> =<init> <expr>new <call><name>MSVSSCREATE</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>vssCreate</name>.<name>setProject</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vssCreate</name>.<name>setComment</name></name><argument_list>(<argument><expr><name>SRC_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vssCreate</name>.<name>setLogin</name></name><argument_list>(<argument><expr><name>VSS_USERNAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vssCreate</name>.<name>setVsspath</name></name><argument_list>(<argument><expr><name>DS_VSS_PROJECT_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vssCreate</name>.<name>setFailOnError</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vssCreate</name>.<name>setAutoresponse</name></name><argument_list>(<argument><expr>"N"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vssCreate</name>.<name>setQuiet</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>commandline</name> = <call><name><name>vssCreate</name>.<name>buildCmdLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>checkCommandLines</name><argument_list>(<argument><expr><name>sTestCmdLine</name></expr></argument>, <argument><expr><call><name><name>commandline</name>.<name>getCommandline</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Test VSSCreate required attributes.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testCreateExceptions</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr>"src/etc/testcases/taskdefs/optional/vss/vss.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>expectSpecificBuildException</name><argument_list>(<argument><expr>"vsscreate.1"</expr></argument>, <argument><expr>"some cause"</expr></argument>, <argument><expr>"vsspath attribute must be set!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Iterate through the generated command line comparing it to reference one.
     * @param sTestCmdLine          The reference command line;
     * @param sGeneratedCmdLine     The generated command line;
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>checkCommandLines</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>sTestCmdLine</name></decl></param>, <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>sGeneratedCmdLine</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>testLength</name> =<init> <expr><name><name>sTestCmdLine</name>.<name>length</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>genLength</name> =<init> <expr><name><name>sGeneratedCmdLine</name>.<name>length</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>genIndex</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>testIndex</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

        <while>while <condition>(<expr><name>testIndex</name> &lt; <name>testLength</name></expr>)</condition> <block>{
            <try>try <block>{
                <if>if <condition>(<expr><name><name>sGeneratedCmdLine</name><index>[<expr><name>genIndex</name></expr>]</index></name> == ""</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>genIndex</name>++</expr>;</expr_stmt>
                    <continue>continue;</continue>
                }</block></then></if>
                <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"arg # " + <name>testIndex</name></expr></argument>,
                        <argument><expr><name><name>sTestCmdLine</name><index>[<expr><name>testIndex</name></expr>]</index></name></expr></argument>,
                        <argument><expr><name><name>sGeneratedCmdLine</name><index>[<expr><name>genIndex</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>testIndex</name>++</expr>;</expr_stmt>
                <expr_stmt><expr><name>genIndex</name>++</expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>ArrayIndexOutOfBoundsException</name></type> <name>aioob</name></decl></param>) <block>{
                <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"missing arg " + <name><name>sTestCmdLine</name><index>[<expr><name>testIndex</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></while>

        <comment type="line">// Count the number of empty strings</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>genLength</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <if>if <condition>(<expr><name><name>sGeneratedCmdLine</name><index>[<expr><name>i</name></expr>]</index></name> == ""</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>cnt</name>++</expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <if>if <condition>(<expr><name>genLength</name> - <name>cnt</name> &gt; <name><name>sTestCmdLine</name>.<name>length</name></name></expr>)</condition><then> <block>{
            <comment type="line">// We have extra elements</comment>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"extra args"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>
}</block></class>
</unit>
