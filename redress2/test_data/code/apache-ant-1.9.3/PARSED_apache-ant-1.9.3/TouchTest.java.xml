<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\taskdefs\TouchTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildFileTest</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>

<class><specifier>public</specifier> class <name>TouchTest</name> <super><extends>extends <name>BuildFileTest</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>TOUCH_FILE</name> =<init> <expr>"src/etc/testcases/taskdefs/touchtest"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Utilities used for file operations */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>FileUtils</name></type> <name>FILE_UTILS</name> =<init> <expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>TouchTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr>"src/etc/testcases/taskdefs/touch.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"cleanup"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getTargetTime</name><parameter_list>()</parameter_list> <block>{

        <decl_stmt><decl><type><name>File</name></type> <name>file</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TOUCH_FILE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr>!<call><name><name>file</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"failed to touch file " + <name>file</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr><call><name><name>file</name>.<name>lastModified</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * No real test, simply checks whether the dateformat without
     * seconds is accepted - by erroring out otherwise.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNoSeconds</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"noSeconds"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>time</name> =<init> <expr><call><name>getTargetTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * No real test, simply checks whether the dateformat with
     * seconds is accepted - by erroring out otherwise.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testSeconds</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"seconds"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>time</name>=<init><expr><call><name>getTargetTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    }</block></function>
    <comment type="javadoc">/**
     * verify that the millis test sets things up
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testMillis</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>touchFile</name><argument_list>(<argument><expr>"testMillis"</expr></argument>, <argument><expr>662256000000L</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * verify that the default value defaults to now
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNow</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>long</name></type> <name>now</name>=<init><expr><call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testNow"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>time</name> =<init> <expr><call><name>getTargetTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTimesNearlyMatch</name><argument_list>(<argument><expr><name>time</name></expr></argument>,<argument><expr><name>now</name></expr></argument>,<argument><expr>5000</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <comment type="javadoc">/**
     * verify that the millis test sets things up
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>test2000</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>touchFile</name><argument_list>(<argument><expr>"test2000"</expr></argument>, <argument><expr>946080000000L</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * test the file list
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFilelist</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>touchFile</name><argument_list>(<argument><expr>"testFilelist"</expr></argument>, <argument><expr>662256000000L</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * test the file set
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFileset</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>touchFile</name><argument_list>(<argument><expr>"testFileset"</expr></argument>, <argument><expr>946080000000L</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * test the resource collection
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testResourceCollection</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>touchFile</name><argument_list>(<argument><expr>"testResourceCollection"</expr></argument>, <argument><expr>1662256000000L</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * test the mapped file set
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testMappedFileset</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testMappedFileset"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * test the explicit mapped file set
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testExplicitMappedFileset</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testExplicitMappedFileset"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * test the mapped file list
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testMappedFilelist</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testMappedFilelist"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * test the pattern attribute
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testGoodPattern</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testGoodPattern"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * test the pattern attribute again
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testBadPattern</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildExceptionContaining</name><argument_list>(<argument><expr>"testBadPattern"</expr></argument>,
            <argument><expr>"No parsing exception thrown"</expr></argument>, <argument><expr>"Unparseable"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * run a target to touch the test file; verify the timestamp is as expected
     * @param targetName
     * @param timestamp
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>touchFile</name><parameter_list>(<param><decl><type><name>String</name></type> <name>targetName</name></decl></param>, <param><decl><type><name>long</name></type> <name>timestamp</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr><name>targetName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>time</name> =<init> <expr><call><name>getTargetTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTimesNearlyMatch</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * assert that two times are within the current FS granularity;
     * @param timestamp
     * @param time
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>assertTimesNearlyMatch</name><parameter_list>(<param><decl><type><name>long</name></type> <name>timestamp</name></decl></param>,<param><decl><type><name>long</name></type> <name>time</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>long</name></type> <name>granularity</name>=<init> <expr><call><name><name>FILE_UTILS</name>.<name>getFileTimestampGranularity</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTimesNearlyMatch</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>time</name></expr></argument>, <argument><expr><name>granularity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * assert that two times are within a specified range
     * @param timestamp
     * @param time
     * @param range
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>assertTimesNearlyMatch</name><parameter_list>(<param><decl><type><name>long</name></type> <name>timestamp</name></decl></param>, <param><decl><type><name>long</name></type> <name>time</name></decl></param>, <param><decl><type><name>long</name></type> <name>range</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Time " + <name>timestamp</name> + " is not within " + <name>range</name> + " ms of "
            + <name>time</name></expr></argument>, <argument><expr>(<call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>time</name> - <name>timestamp</name></expr></argument>)</argument_list></call> &lt;= <name>range</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
