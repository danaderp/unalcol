<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\DefaultExcludes.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>DirectoryScanner</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>StringUtils</name></name>;</import>

<comment type="javadoc">/**
 * Alters the default excludes for the &lt;strong&gt;entire&lt;/strong&gt; build..
 *
 * @since Ant 1.6
 *
 * @ant.task category="utility"
 */</comment>
<class><specifier>public</specifier> class <name>DefaultExcludes</name> <super><extends>extends <name>Task</name></extends></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>add</name> =<init> <expr>""</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>remove</name> =<init> <expr>""</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>defaultrequested</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>echo</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="line">// by default, messages are always displayed</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>logLevel</name> =<init> <expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Does the work.
     *
     * @exception BuildException if something goes wrong with the build
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr>!<name>defaultrequested</name> &amp;&amp; <call><name><name>add</name>.<name>equals</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call> &amp;&amp; <call><name><name>remove</name>.<name>equals</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call> &amp;&amp; !<name>echo</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"&lt;defaultexcludes&gt; task must set "
                + "at least one attribute (echo=\"false\""
                + " doesn't count since that is the default"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>defaultrequested</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>DirectoryScanner</name>.<name>resetDefaultExcludes</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>add</name>.<name>equals</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>DirectoryScanner</name>.<name>addDefaultExclude</name></name><argument_list>(<argument><expr><name>add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>remove</name>.<name>equals</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>DirectoryScanner</name>.<name>removeDefaultExclude</name></name><argument_list>(<argument><expr><name>remove</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>echo</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>StringBuffer</name></type> <name>message</name>
                =<init> <expr>new <call><name>StringBuffer</name><argument_list>(<argument><expr>"Current Default Excludes:"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>message</name>.<name>append</name></name><argument_list>(<argument><expr><name><name>StringUtils</name>.<name>LINE_SEP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>excludes</name> =<init> <expr><call><name><name>DirectoryScanner</name>.<name>getDefaultExcludes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>excludes</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <expr_stmt><expr><call><name><name>message</name>.<name>append</name></name><argument_list>(<argument><expr>"  "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>message</name>.<name>append</name></name><argument_list>(<argument><expr><name><name>excludes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>message</name>.<name>append</name></name><argument_list>(<argument><expr><name><name>StringUtils</name>.<name>LINE_SEP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><call><name><name>message</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>logLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * go back to standard default patterns
     *
     * @param def if true go back to default patterns
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDefault</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>def</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>defaultrequested</name> = <name>def</name></expr>;</expr_stmt>
    }</block></function>
    <comment type="javadoc">/**
     * Pattern to add to the default excludes
     *
     * @param add Sets the value for the pattern to exclude.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAdd</name><parameter_list>(<param><decl><type><name>String</name></type> <name>add</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>add</name></name> = <name>add</name></expr>;</expr_stmt>
    }</block></function>

     <comment type="javadoc">/**
     * Pattern to remove from the default excludes.
     *
     * @param remove Sets the value for the pattern that
     *            should no longer be excluded.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRemove</name><parameter_list>(<param><decl><type><name>String</name></type> <name>remove</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>remove</name></name> = <name>remove</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * If true, echo the default excludes.
     *
     * @param echo whether or not to echo the contents of
     *             the default excludes.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setEcho</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>echo</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>echo</name></name> = <name>echo</name></expr>;</expr_stmt>
    }</block></function>


}</block></class>
</unit>
