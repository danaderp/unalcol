<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\types\selectors\ModifiedSelectorTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name></name>;</package>


<comment type="line">// Java</comment>
<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>RuleBasedCollator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Comparator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Target</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Parameter</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Path</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>modifiedselector</name>.<name>Algorithm</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>modifiedselector</name>.<name>Cache</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>modifiedselector</name>.<name>ChecksumAlgorithm</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>modifiedselector</name>.<name>DigestAlgorithm</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>modifiedselector</name>.<name>EqualComparator</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>modifiedselector</name>.<name>HashvalueAlgorithm</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>modifiedselector</name>.<name>ModifiedSelector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>modifiedselector</name>.<name>PropertiesfileCache</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>


<comment type="javadoc">/**
 * Unit tests for ModifiedSelector.
 *
 * @since  Ant 1.6
 */</comment>
<class><specifier>public</specifier> class <name>ModifiedSelectorTest</name> <super><extends>extends <name>BaseSelectorTest</name></extends></super> <block>{

    <comment type="javadoc">/** Utilities used for file operations */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>FileUtils</name></type> <name>FILE_UTILS</name> =<init> <expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">//  =====================  attributes  =====================</comment>


    <comment type="javadoc">/** Path where the testclasses are. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Path</name></type> <name>testclasses</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>


    <comment type="line">//  =====================  constructors, factories  =====================</comment>


    <constructor><specifier>public</specifier> <name>ModifiedSelectorTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <comment type="javadoc">/**
     * Factory method from base class. This should be overriden in child
     * classes to return a specific Selector class (like here).
     */</comment>
    <function><type><specifier>public</specifier> <name>BaseSelector</name></type> <name>getInstance</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>new <call><name>ModifiedSelector</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>


    <comment type="line">//  =====================  JUnit stuff  =====================</comment>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// project reference is set in super.setUp()</comment>
        <expr_stmt><expr><call><name><name>super</name>.<name>setUp</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// init the testclasses path object</comment>
        <decl_stmt><decl><type><name>Project</name></type> <name>prj</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>prj</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>testclasses</name> = new <call><name>Path</name><argument_list>(<argument><expr><name>prj</name></expr></argument>, <argument><expr><call><name><name>prj</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"build.tests.value"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>


    <comment type="block">/* * /
    // for test only - ignore tests where we arent work at the moment
    public static junit.framework.Test suite() {
        junit.framework.TestSuite suite= new junit.framework.TestSuite();
        suite.addTest(new ModifiedSelectorTest("testValidateWrongCache"));
        return suite;
    }
    /* */</comment>


    <comment type="line">// =======  testcases for the attributes and nested elements of the selector  =====</comment>


    <comment type="javadoc">/** Test right use of cache names. */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testValidateWrongCache</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> =<init> <expr>"this-is-not-a-valid-cache-name"</expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <decl_stmt><decl><type><name><name>ModifiedSelector</name>.<name>CacheName</name></name></type> <name>cacheName</name> =<init> <expr>new <call><name><name>ModifiedSelector</name>.<name>CacheName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>cacheName</name>.<name>setValue</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"CacheSelector.CacheName accepted invalid value."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>name</name> + " is not a legal value for this attribute"</expr></argument>,
                         <argument><expr><call><name><name>be</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>


    <comment type="javadoc">/** Test right use of cache names. */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testValidateWrongAlgorithm</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> =<init> <expr>"this-is-not-a-valid-algorithm-name"</expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <decl_stmt><decl><type><name><name>ModifiedSelector</name>.<name>AlgorithmName</name></name></type> <name>algoName</name>
                =<init> <expr>new <call><name><name>ModifiedSelector</name>.<name>AlgorithmName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>algoName</name>.<name>setValue</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"CacheSelector.AlgorithmName accepted invalid value."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>name</name> + " is not a legal value for this attribute"</expr></argument>,
                         <argument><expr><call><name><name>be</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>


    <comment type="javadoc">/** Test right use of comparator names. */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testValidateWrongComparator</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> =<init> <expr>"this-is-not-a-valid-comparator-name"</expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <decl_stmt><decl><type><name><name>ModifiedSelector</name>.<name>ComparatorName</name></name></type> <name>compName</name>
                =<init> <expr>new <call><name><name>ModifiedSelector</name>.<name>ComparatorName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>compName</name>.<name>setValue</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"ModifiedSelector.ComparatorName accepted invalid value."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>name</name> + " is not a legal value for this attribute"</expr></argument>,
                         <argument><expr><call><name><name>be</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>testIllegalCustomAlgorithm</name><parameter_list>()</parameter_list> <block>{
        <try>try <block>{
            <expr_stmt><expr><call><name>getAlgoName</name><argument_list>(<argument><expr>"java.lang.Object"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Illegal classname used."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Wrong exception type: " + <call><name><name>e</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name> <name>instanceof</name> <name>BuildException</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Wrong exception message."</expr></argument>,
                         <argument><expr>"Specified class (java.lang.Object) is not an Algorithm."</expr></argument>,
                         <argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        }</block></catch></try>
    }</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNonExistentCustomAlgorithm</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>noExcThrown</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name>getAlgoName</name><argument_list>(<argument><expr>"non.existent.custom.Algorithm"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>noExcThrown</name> = true</expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
            <if>if <condition>(<expr><name>noExcThrown</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"does 'non.existent.custom.Algorithm' really exist?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Wrong exception type: " + <call><name><name>e</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name> <name>instanceof</name> <name>BuildException</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Wrong exception message."</expr></argument>,
                         <argument><expr>"Specified class (non.existent.custom.Algorithm) not found."</expr></argument>,
                         <argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        }</block></catch></try>
    }</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>testCustomAlgorithm</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>algo</name> =<init> <expr><call><name>getAlgoName</name><argument_list>(<argument><expr>"org.apache.tools.ant.types.selectors.modifiedselector.HashvalueAlgorithm"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Wrong algorithm used: "+<name>algo</name></expr></argument>, <argument><expr><call><name><name>algo</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"HashvalueAlgorithm"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>testCustomAlgorithm2</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>algo</name> =<init> <expr><call><name>getAlgoName</name><argument_list>(<argument><expr>"org.apache.tools.ant.types.selectors.MockAlgorithm"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Wrong algorithm used: "+<name>algo</name></expr></argument>, <argument><expr><call><name><name>algo</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"MockAlgorithm"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>testCustomClasses</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>BFT</name></type> <name>bft</name> =<init> <expr>new <call><name>BFT</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>bft</name>.<name>setUp</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <comment type="line">// do the actions</comment>
            <expr_stmt><expr><call><name><name>bft</name>.<name>doTarget</name></name><argument_list>(<argument><expr>"modifiedselectortest-customClasses"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// do the checks - the buildfile stores the fileset as property</comment>
            <decl_stmt><decl><type><name>String</name></type> <name>fsFullValue</name> =<init> <expr><call><name><name>bft</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"fs.full.value"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>fsModValue</name>  =<init> <expr><call><name><name>bft</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"fs.mod.value"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr>"'fs.full.value' must be set."</expr></argument>, <argument><expr><name>fsFullValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"'fs.full.value' must not be null."</expr></argument>, <argument><expr>!"".<call><name>equals</name><argument_list>(<argument><expr><name>fsFullValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"'fs.full.value' must contain ant.bat."</expr></argument>, <argument><expr><call><name><name>fsFullValue</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"ant.bat"</expr></argument>)</argument_list></call>&gt;-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr>"'fs.mod.value' must be set."</expr></argument>, <argument><expr><name>fsModValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// must be empty according to the Mock* implementations</comment>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"'fs.mod.value' must be empty."</expr></argument>, <argument><expr>"".<call><name>equals</name><argument_list>(<argument><expr><name>fsModValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// don't catch the JUnit exceptions</comment>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>bft</name>.<name>doTarget</name></name><argument_list>(<argument><expr>"modifiedselectortest-scenario-clean"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>bft</name>.<name>deletePropertiesfile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>bft</name>.<name>tearDown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>testDelayUpdateTaskFinished</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>doDelayUpdateTest</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>testDelayUpdateTargetFinished</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>doDelayUpdateTest</name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>testDelayUpdateBuildFinished</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>doDelayUpdateTest</name><argument_list>(<argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>doDelayUpdateTest</name><parameter_list>(<param><decl><type><name>int</name></type> <name>kind</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// no check for 1&lt;=kind&lt;=3 - only internal use therefore check it</comment>
        <comment type="line">// while development</comment>

        <comment type="line">// readable form of parameter kind</comment>
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>kinds</name> =<init> <expr><block>{<expr>"task"</expr>, <expr>"target"</expr>, <expr>"build"</expr>}</block></expr></init></decl>;</decl_stmt>

        <comment type="line">// setup the "Ant project"</comment>
        <decl_stmt><decl><type><name>MockProject</name></type> <name>project</name> =<init> <expr>new <call><name>MockProject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>base</name>  =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr>"base"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>file1</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr>"file1"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>file2</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr>"file2"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// setup the selector</comment>
        <decl_stmt><decl><type><name>ModifiedSelector</name></type> <name>sel</name> =<init> <expr>new <call><name>ModifiedSelector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sel</name>.<name>setProject</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sel</name>.<name>setUpdate</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sel</name>.<name>setDelayUpdate</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// sorry - otherwise we will get a ClassCastException because the MockCache</comment>
        <comment type="line">// is loaded by two different classloader ...</comment>
        <expr_stmt><expr><call><name><name>sel</name>.<name>setClassLoader</name></name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getClassLoader</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sel</name>.<name>addClasspath</name></name><argument_list>(<argument><expr><name>testclasses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>sel</name>.<name>setAlgorithmClass</name></name><argument_list>(<argument><expr>"org.apache.tools.ant.types.selectors.MockAlgorithm"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sel</name>.<name>setCacheClass</name></name><argument_list>(<argument><expr>"org.apache.tools.ant.types.selectors.MockCache"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sel</name>.<name>configure</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// get the cache, so we can check our things</comment>
        <decl_stmt><decl><type><name>MockCache</name></type> <name>cache</name> =<init> <expr>(<name>MockCache</name>)<call><name><name>sel</name>.<name>getCache</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// the test</comment>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr>"Cache must not be saved before 1st selection."</expr></argument>, <argument><expr><name><name>cache</name>.<name>saved</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sel</name>.<name>isSelected</name></name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr>"file1"</expr></argument>, <argument><expr><name>file1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr>"Cache must not be saved after 1st selection."</expr></argument>, <argument><expr><name><name>cache</name>.<name>saved</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sel</name>.<name>isSelected</name></name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr>"file2"</expr></argument>, <argument><expr><name>file2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr>"Cache must not be saved after 2nd selection."</expr></argument>, <argument><expr><name><name>cache</name>.<name>saved</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <switch>switch <condition>(<expr><name>kind</name></expr>)</condition> <block>{
            <case>case <expr>1</expr> : <expr_stmt><expr><call><name><name>project</name>.<name>fireTaskFinished</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>   <break>break;</break>
            </case><case>case <expr>2</expr> : <expr_stmt><expr><call><name><name>project</name>.<name>fireTargetFinished</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
            </case><case>case <expr>3</expr> : <expr_stmt><expr><call><name><name>project</name>.<name>fireBuildFinished</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>  <break>break;</break>
        </case>}</block></switch>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Cache must be saved after " + <name><name>kinds</name><index>[<expr><name>kind</name>-1</expr>]</index></name> + "Finished-Event."</expr></argument>, <argument><expr><name><name>cache</name>.<name>saved</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// MockCache doesnt create a file - therefore no cleanup needed</comment>
    }</block></function>


    <comment type="javadoc">/**
     * Extracts the real used algorithm name from the ModifiedSelector using
     * its toString() method.
     * @param classname  the classname from the algorithm to use
     * @return  the algorithm part from the toString() (without brackets)
     */</comment>
    <function><type><specifier>private</specifier> <name>String</name></type> <name>getAlgoName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>classname</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>ModifiedSelector</name></type> <name>sel</name> =<init> <expr>new <call><name>ModifiedSelector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// add the test classes to its classpath</comment>
        <expr_stmt><expr><call><name><name>sel</name>.<name>addClasspath</name></name><argument_list>(<argument><expr><name>testclasses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sel</name>.<name>setAlgorithmClass</name></name><argument_list>(<argument><expr><name>classname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// let the selector do its checks</comment>
        <expr_stmt><expr><call><name><name>sel</name>.<name>validate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// extract the algorithm name (and config) from the selectors output</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>s1</name> =<init> <expr><call><name><name>sel</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>posStart</name> =<init> <expr><call><name><name>s1</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"algorithm="</expr></argument>)</argument_list></call> + 10</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>posEnd</name>   =<init> <expr><call><name><name>s1</name>.<name>indexOf</name></name><argument_list>(<argument><expr>" comparator="</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>algo</name>  =<init> <expr><call><name><name>s1</name>.<name>substring</name></name><argument_list>(<argument><expr><name>posStart</name></expr></argument>, <argument><expr><name>posEnd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// '&lt;' and '&gt;' are only used if the algorithm has properties</comment>
        <if>if <condition>(<expr><call><name><name>algo</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"&lt;"</expr></argument>)</argument_list></call></expr>)</condition><then> <expr_stmt><expr><name>algo</name> = <call><name><name>algo</name>.<name>substring</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <if>if <condition>(<expr><call><name><name>algo</name>.<name>endsWith</name></name><argument_list>(<argument><expr>"&gt;"</expr></argument>)</argument_list></call></expr>)</condition><then>   <expr_stmt><expr><name>algo</name> = <call><name><name>algo</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>algo</name>.<name>length</name></name><argument_list>()</argument_list></call>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <comment type="line">// return the clean value</comment>
        <return>return <expr><name>algo</name></expr>;</return>
    }</block></function>


    <comment type="line">// ================  testcases for the cache implementations  ================</comment>


    <comment type="javadoc">/**
     * Propertycache must have a set 'cachefile' attribute.
     * The default in ModifiedSelector "cache.properties" is set by the selector.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testPropcacheInvalid</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Cache</name></type> <name>cache</name> =<init> <expr>new <call><name>PropertiesfileCache</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>cache</name>.<name>isValid</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"PropertyfilesCache does not check its configuration."</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>testPropertyfileCache</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>PropertiesfileCache</name></type> <name>cache</name> =<init> <expr>new <call><name>PropertiesfileCache</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>cachefile</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr>"cache.properties"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>cache</name>.<name>setCachefile</name></name><argument_list>(<argument><expr><name>cachefile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>doTest</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr>"Cache file not deleted."</expr></argument>, <argument><expr><call><name><name>cachefile</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/** Checks whether a cache file is created. */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testCreatePropertiesCacheDirect</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>cachefile</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name>basedir</name></expr></argument>, <argument><expr>"cachefile.properties"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>PropertiesfileCache</name></type> <name>cache</name> =<init> <expr>new <call><name>PropertiesfileCache</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>cache</name>.<name>setCachefile</name></name><argument_list>(<argument><expr><name>cachefile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>cache</name>.<name>put</name></name><argument_list>(<argument><expr>"key"</expr></argument>, <argument><expr>"value"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cache</name>.<name>save</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Cachefile not created."</expr></argument>, <argument><expr><call><name><name>cachefile</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>cache</name>.<name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr>"Cachefile not deleted."</expr></argument>, <argument><expr><call><name><name>cachefile</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/** Checks whether a cache file is created. */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testCreatePropertiesCacheViaModifiedSelector</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>cachefile</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name>basedir</name></expr></argument>, <argument><expr>"cachefile.properties"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{

            <comment type="line">// initialize test environment (called "bed")</comment>
            <expr_stmt><expr><call><name>makeBed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Configure the selector</comment>
            <decl_stmt><decl><type><name>ModifiedSelector</name></type> <name>s</name> =<init> <expr>(<name>ModifiedSelector</name>)<call><name>getSelector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>s</name>.<name>setDelayUpdate</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>s</name>.<name>addParam</name></name><argument_list>(<argument><expr>"cache.cachefile"</expr></argument>, <argument><expr><name>cachefile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name><name>ModifiedSelector</name>.<name>CacheName</name></name></type> <name>cacheName</name> =<init> <expr>new <call><name><name>ModifiedSelector</name>.<name>CacheName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>cacheName</name>.<name>setValue</name></name><argument_list>(<argument><expr>"propertyfile"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>s</name>.<name>setCache</name></name><argument_list>(<argument><expr><name>cacheName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>s</name>.<name>setUpdate</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>selectionString</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// evaluate correctness</comment>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Cache file is not created."</expr></argument>, <argument><expr><call><name><name>cachefile</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><call><name>cleanupBed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>cachefile</name>!=<name>null</name></expr>)</condition><then> <expr_stmt><expr><call><name><name>cachefile</name>.<name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></finally></try>
    }</block></function>


    <comment type="javadoc">/**
     * In earlier implementations there were problems with the &lt;i&gt;order&lt;/i&gt;
     * of the &lt;param&gt;s. The scenario was &lt;pre&gt;
     *   &lt;custom class="ModifiedSelector"&gt;
     *       &lt;param name="cache.cachefile" value="mycache.properties" /&gt;
     *       &lt;param name="cache" value="propertyfiles" /&gt;
     *   &lt;/custom&gt;
     * &lt;/pre&gt; It was important first to set the cache and then to set
     * the cache's configuration parameters. That results in the reorganized
     * configure() method of ModifiedSelector. This testcase tests that.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testCreatePropertiesCacheViaCustomSelector</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>cachefile</name> =<init> <expr><call><name><name>FILE_UTILS</name>.<name>createTempFile</name></name><argument_list>(<argument><expr>"tmp-cache-"</expr></argument>, <argument><expr>".properties"</expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <comment type="line">// initialize test environment (called "bed")</comment>
            <expr_stmt><expr><call><name>makeBed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Configure the selector</comment>

            <decl_stmt><decl><type><name>ExtendSelector</name></type> <name>s</name> =<init> <expr>new <call><name>ExtendSelector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>s</name>.<name>setClassname</name></name><argument_list>(<argument><expr>"org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>s</name>.<name>addParam</name></name><argument_list>(<argument><expr><call><name>createParam</name><argument_list>(<argument><expr>"update"</expr></argument>, <argument><expr>"true"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>s</name>.<name>addParam</name></name><argument_list>(<argument><expr><call><name>createParam</name><argument_list>(<argument><expr>"cache.cachefile"</expr></argument>, <argument><expr><call><name><name>cachefile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>s</name>.<name>addParam</name></name><argument_list>(<argument><expr><call><name>createParam</name><argument_list>(<argument><expr>"cache"</expr></argument>, <argument><expr>"propertyfile"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>selectionString</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// evaluate correctness</comment>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Cache file is not created."</expr></argument>, <argument><expr><call><name><name>cachefile</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><call><name>cleanupBed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>cachefile</name>!=<name>null</name></expr>)</condition><then> <expr_stmt><expr><call><name><name>cachefile</name>.<name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></finally></try>
    }</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>_testCustomCache</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// same logic as on algorithm, no testcases created</comment>
    }</block></function>


    <comment type="javadoc">/**
     * Test the interface semantic of Caches.
     * This method does some common test for cache implementations.
     * A cache must return a stored value and a valid iterator.
     * After calling the delete() the cache must be empty.
     *
     * @param algo   configured test object
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>doTest</name><parameter_list>(<param><decl><type><name>Cache</name></type> <name>cache</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Cache not proper configured."</expr></argument>, <argument><expr><call><name><name>cache</name>.<name>isValid</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>key1</name>   =<init> <expr>"key1"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>value1</name> =<init> <expr>"value1"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>key2</name>   =<init> <expr>"key2"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>value2</name> =<init> <expr>"value2"</expr></init></decl>;</decl_stmt>

        <comment type="line">// given cache must be empty</comment>
        <decl_stmt><decl><type><name>Iterator</name></type> <name>it1</name> =<init> <expr><call><name><name>cache</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr>"Cache is not empty"</expr></argument>, <argument><expr><call><name><name>it1</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// cache must return a stored value</comment>
        <expr_stmt><expr><call><name><name>cache</name>.<name>put</name></name><argument_list>(<argument><expr><name>key1</name></expr></argument>, <argument><expr><name>value1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cache</name>.<name>put</name></name><argument_list>(<argument><expr><name>key2</name></expr></argument>, <argument><expr><name>value2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"cache returned wrong value"</expr></argument>, <argument><expr><name>value1</name></expr></argument>, <argument><expr><call><name><name>cache</name>.<name>get</name></name><argument_list>(<argument><expr><name>key1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"cache returned wrong value"</expr></argument>, <argument><expr><name>value2</name></expr></argument>, <argument><expr><call><name><name>cache</name>.<name>get</name></name><argument_list>(<argument><expr><name>key2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// test the iterator</comment>
        <decl_stmt><decl><type><name>Iterator</name></type> <name>it2</name> =<init> <expr><call><name><name>cache</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Object</name></type>   <name>returned</name> =<init> <expr><call><name><name>it2</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>ok</name> =<init> <expr>(<call><name><name>key1</name>.<name>equals</name></name><argument_list>(<argument><expr><name>returned</name></expr></argument>)</argument_list></call> || <call><name><name>key2</name>.<name>equals</name></name><argument_list>(<argument><expr><name>returned</name></expr></argument>)</argument_list></call>)</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>msg</name> =<init> <expr>"Iterator returned unexpected value."
                   + "  key1.equals(returned)="+<call><name><name>key1</name>.<name>equals</name></name><argument_list>(<argument><expr><name>returned</name></expr></argument>)</argument_list></call>
                   + "  key2.equals(returned)="+<call><name><name>key2</name>.<name>equals</name></name><argument_list>(<argument><expr><name>returned</name></expr></argument>)</argument_list></call>
                   + "  returned="+<name>returned</name>
                   + "  ok="+<name>ok</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// clear the cache</comment>
        <expr_stmt><expr><call><name><name>cache</name>.<name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Iterator</name></type> <name>it3</name> =<init> <expr><call><name><name>cache</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr>"Cache is not empty"</expr></argument>, <argument><expr><call><name><name>it3</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="line">// ==============  testcases for the algorithm implementations  ==============</comment>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>testHashvalueAlgorithm</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>HashvalueAlgorithm</name></type> <name>algo</name> =<init> <expr>new <call><name>HashvalueAlgorithm</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>doTest</name><argument_list>(<argument><expr><name>algo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>testDigestAlgorithmMD5</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>DigestAlgorithm</name></type> <name>algo</name> =<init> <expr>new <call><name>DigestAlgorithm</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>algo</name>.<name>setAlgorithm</name></name><argument_list>(<argument><expr>"MD5"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>doTest</name><argument_list>(<argument><expr><name>algo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>testDigestAlgorithmSHA</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>DigestAlgorithm</name></type> <name>algo</name> =<init> <expr>new <call><name>DigestAlgorithm</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>algo</name>.<name>setAlgorithm</name></name><argument_list>(<argument><expr>"SHA"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>doTest</name><argument_list>(<argument><expr><name>algo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>testChecksumAlgorithm</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>ChecksumAlgorithm</name></type> <name>algo</name> =<init> <expr>new <call><name>ChecksumAlgorithm</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>doTest</name><argument_list>(<argument><expr><name>algo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>testChecksumAlgorithmCRC</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>ChecksumAlgorithm</name></type> <name>algo</name> =<init> <expr>new <call><name>ChecksumAlgorithm</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>algo</name>.<name>setAlgorithm</name></name><argument_list>(<argument><expr>"CRC"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>doTest</name><argument_list>(<argument><expr><name>algo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>testChecksumAlgorithmAdler</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>ChecksumAlgorithm</name></type> <name>algo</name> =<init> <expr>new <call><name>ChecksumAlgorithm</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>algo</name>.<name>setAlgorithm</name></name><argument_list>(<argument><expr>"Adler"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>doTest</name><argument_list>(<argument><expr><name>algo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Test the interface semantic of Algorithms.
     * This method does some common test for algorithm implementations.
     * An algorithm must return always the same value for the same file and
     * it must not return &lt;i&gt;null&lt;/i&gt;.
     *
     * @param algo   configured test object
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>doTest</name><parameter_list>(<param><decl><type><name>Algorithm</name></type> <name>algo</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Algorithm not proper configured."</expr></argument>, <argument><expr><call><name><name>algo</name>.<name>isValid</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name>makeBed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <for>for (<init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name><name>files</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>File</name></type> <name>file</name> =<init> <expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>  <comment type="line">// must not be a directory</comment>
                <if>if <condition>(<expr><call><name><name>file</name>.<name>isFile</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <comment type="line">// get the Hashvalues</comment>
                    <decl_stmt><decl><type><name>String</name></type> <name>hash1</name> =<init> <expr><call><name><name>algo</name>.<name>getValue</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>hash2</name> =<init> <expr><call><name><name>algo</name>.<name>getValue</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>hash3</name> =<init> <expr><call><name><name>algo</name>.<name>getValue</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>hash4</name> =<init> <expr><call><name><name>algo</name>.<name>getValue</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>hash5</name> =<init> <expr><call><name><name>algo</name>.<name>getValue</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>file</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <comment type="line">// Assert !=null and equality</comment>
                    <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr>"Hashvalue was null for "+<call><name><name>file</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hash1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr>"Hashvalue was null for "+<call><name><name>file</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hash2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr>"Hashvalue was null for "+<call><name><name>file</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hash3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr>"Hashvalue was null for "+<call><name><name>file</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hash4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr>"Hashvalue was null for "+<call><name><name>file</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hash5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"getHashvalue() returned different value for "+<call><name><name>file</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hash1</name></expr></argument>, <argument><expr><name>hash2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"getHashvalue() returned different value for "+<call><name><name>file</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hash1</name></expr></argument>, <argument><expr><name>hash3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"getHashvalue() returned different value for "+<call><name><name>file</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hash1</name></expr></argument>, <argument><expr><name>hash4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"getHashvalue() returned different value for "+<call><name><name>file</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hash1</name></expr></argument>, <argument><expr><name>hash5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if><comment type="line">//if-isFile</comment>
            }</block></for><comment type="line">//for</comment>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><call><name>cleanupBed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>



    <comment type="line">// ==============  testcases for the comparator implementations  ==============</comment>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>testEqualComparator</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>EqualComparator</name></type> <name>comp</name> =<init> <expr>new <call><name>EqualComparator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>doTest</name><argument_list>(<argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>testRuleComparator</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>RuleBasedCollator</name></type> <name>comp</name> =<init> <expr>(<name>RuleBasedCollator</name>)<call><name><name>RuleBasedCollator</name>.<name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>doTest</name><argument_list>(<argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>testEqualComparatorViaSelector</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>ModifiedSelector</name></type> <name>s</name> =<init> <expr>(<name>ModifiedSelector</name>)<call><name>getSelector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>ModifiedSelector</name>.<name>ComparatorName</name></name></type> <name>compName</name> =<init> <expr>new <call><name><name>ModifiedSelector</name>.<name>ComparatorName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>compName</name>.<name>setValue</name></name><argument_list>(<argument><expr>"equal"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>s</name>.<name>setComparator</name></name><argument_list>(<argument><expr><name>compName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name>performTests</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr>"TTTTTTTTTTTT"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>s</name>.<name>getCache</name></name><argument_list>()</argument_list></call>.<call><name>delete</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>_testRuleComparatorViaSelector</name><parameter_list>()</parameter_list> <block>{ <comment type="line">//not yet supported see note in selector</comment>
        <decl_stmt><decl><type><name>ModifiedSelector</name></type> <name>s</name> =<init> <expr>(<name>ModifiedSelector</name>)<call><name>getSelector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>ModifiedSelector</name>.<name>ComparatorName</name></name></type> <name>compName</name> =<init> <expr>new <call><name><name>ModifiedSelector</name>.<name>ComparatorName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>compName</name>.<name>setValue</name></name><argument_list>(<argument><expr>"rule"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>s</name>.<name>setComparator</name></name><argument_list>(<argument><expr><name>compName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name>performTests</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr>"TTTTTTTTTTTT"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>s</name>.<name>getCache</name></name><argument_list>()</argument_list></call>.<call><name>delete</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>_testCustomComparator</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// same logic as on algorithm, no testcases created</comment>
    }</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>testResourceSelectorSimple</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>BFT</name></type> <name>bft</name> =<init> <expr>new <call><name>BFT</name><argument_list>(<argument><expr>"modifiedselector"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>bft</name>.<name>doTarget</name></name><argument_list>(<argument><expr>"modifiedselectortest-ResourceSimple"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bft</name>.<name>deleteCachefile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//new File("src/etc/testcases/types/resources/selectors/cache.properties").delete();</comment>
    }</block></function>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testResourceSelectorSelresTrue</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>BFT</name></type> <name>bft</name> =<init> <expr>new <call><name>BFT</name><argument_list>(<argument><expr>"modifiedselector"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>bft</name>.<name>doTarget</name></name><argument_list>(<argument><expr>"modifiedselectortest-ResourceSelresTrue"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bft</name>.<name>assertLogContaining</name></name><argument_list>(<argument><expr>"does not provide an InputStream"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bft</name>.<name>deleteCachefile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testResourceSelectorSelresFalse</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>BFT</name></type> <name>bft</name> =<init> <expr>new <call><name>BFT</name><argument_list>(<argument><expr>"modifiedselector"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>bft</name>.<name>doTarget</name></name><argument_list>(<argument><expr>"modifiedselectortest-ResourceSelresFalse"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bft</name>.<name>deleteCachefile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testResourceSelectorScenarioSimple</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>BFT</name></type> <name>bft</name> =<init> <expr>new <call><name>BFT</name><argument_list>(<argument><expr>"modifiedselector"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>bft</name>.<name>doTarget</name></name><argument_list>(<argument><expr>"modifiedselectortest-scenario-resourceSimple"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bft</name>.<name>doTarget</name></name><argument_list>(<argument><expr>"modifiedselectortest-scenario-clean"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bft</name>.<name>deleteCachefile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <comment type="javadoc">/**
     * Test the interface semantic of Comparators.
     * This method does some common test for comparator implementations.
     *
     * @param algo   configured test object
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>doTest</name><parameter_list>(<param><decl><type><name>Comparator</name></type> <name>comp</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Object</name></type> <name>o1</name> =<init> <expr>new <call><name>String</name><argument_list>(<argument><expr>"string1"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Object</name></type> <name>o2</name> =<init> <expr>new <call><name>String</name><argument_list>(<argument><expr>"string2"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Object</name></type> <name>o3</name> =<init> <expr>new <call><name>String</name><argument_list>(<argument><expr>"string2"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// really "2"</comment>

        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Comparator gave wrong value."</expr></argument>, <argument><expr><call><name><name>comp</name>.<name>compare</name></name><argument_list>(<argument><expr><name>o1</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>)</argument_list></call> != 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Comparator gave wrong value."</expr></argument>, <argument><expr><call><name><name>comp</name>.<name>compare</name></name><argument_list>(<argument><expr><name>o1</name></expr></argument>, <argument><expr><name>o3</name></expr></argument>)</argument_list></call> != 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Comparator gave wrong value."</expr></argument>, <argument><expr><call><name><name>comp</name>.<name>compare</name></name><argument_list>(<argument><expr><name>o2</name></expr></argument>, <argument><expr><name>o3</name></expr></argument>)</argument_list></call> == 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="line">// =====================  scenario tests  =====================</comment>


    <comment type="javadoc">/**
     * Tests whether the seldirs attribute is used.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testSeldirs</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>ModifiedSelector</name></type> <name>s</name> =<init> <expr>(<name>ModifiedSelector</name>)<call><name>getSelector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name>makeBed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>StringBuffer</name></type> <name>sbTrue</name>  =<init> <expr>new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>StringBuffer</name></type> <name>sbFalse</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name><name>filenames</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <if>if <condition>(<expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>isDirectory</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>sbTrue</name>.<name>append</name></name><argument_list>(<argument><expr>"T"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>sbFalse</name>.<name>append</name></name><argument_list>(<argument><expr>"F"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name><name>sbTrue</name>.<name>append</name></name><argument_list>(<argument><expr>"T"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>sbFalse</name>.<name>append</name></name><argument_list>(<argument><expr>"T"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></for>

            <expr_stmt><expr><call><name><name>s</name>.<name>setSeldirs</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>performTests</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name><name>sbTrue</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>s</name>.<name>getCache</name></name><argument_list>()</argument_list></call>.<call><name>delete</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>s</name>.<name>setSeldirs</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>performTests</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name><name>sbFalse</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>s</name>.<name>getCache</name></name><argument_list>()</argument_list></call>.<call><name>delete</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        }</block> <finally>finally <block>{
            <expr_stmt><expr><call><name>cleanupBed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>s</name>!=<name>null</name></expr>)</condition><then> <expr_stmt><expr><call><name><name>s</name>.<name>getCache</name></name><argument_list>()</argument_list></call>.<call><name>delete</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></finally></try>
    }</block></function>


    <comment type="javadoc">/**
     * Complex test scenario using default values (DigestAlgorithm with MD5,
     * PropertiesfileCache with file=cache.properties, EqualComparator
     * and update=true). &lt;ol&gt;
     * &lt;li&gt; try fist time --&gt; should select all &lt;/li&gt;
     * &lt;li&gt; try second time --&gt; should select no files (only directories) &lt;/li&gt;
     * &lt;li&gt; modify timestamp of one file and content of a nother one &lt;/li&gt;
     * &lt;li&gt; try third time --&gt; should select only the file with modified
     *      content &lt;/li&gt;
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testScenario1</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>BFT</name></type> <name>bft</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ModifiedSelector</name></type> <name>s</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <comment type="line">//</comment>
            <comment type="line">// *****  initialize test environment (called "bed")  *****</comment>
            <comment type="line">//</comment>
            <expr_stmt><expr><call><name>makeBed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>results</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

            <comment type="line">// Configure the selector - only defaults are used</comment>
            <expr_stmt><expr><name>s</name> = (<name>ModifiedSelector</name>)<call><name>getSelector</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <comment type="line">//</comment>
            <comment type="line">// *****  First Run  *****</comment>
            <comment type="line">// the first call should get all files, because nothing is in</comment>
            <comment type="line">// the cache</comment>
            <comment type="line">//</comment>
            <expr_stmt><expr><call><name>performTests</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr>"TTTTTTTTTTTT"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">//</comment>
            <comment type="line">// *****  Second Run  *****</comment>
            <comment type="line">// the second call should get no files, because no content</comment>
            <comment type="line">// has changed</comment>
            <comment type="line">//</comment>
            <expr_stmt><expr><call><name>performTests</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr>"TFFFFFFFFFFT"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">//</comment>
            <comment type="line">// *****  make some files dirty  *****</comment>
            <comment type="line">//</comment>

            <comment type="line">// these files are made dirty --&gt; 3+4 with different content</comment>
            <decl_stmt><decl><type><name>String</name></type> <name>f2name</name> =<init> <expr>"tar/bz2/asf-logo-huge.tar.bz2"</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>f3name</name> =<init> <expr>"asf-logo.gif.md5"</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>f4name</name> =<init> <expr>"copy.filterset.filtered"</expr></init></decl>;</decl_stmt>

            <comment type="line">// AccessObject to the test-Ant-environment</comment>
            <expr_stmt><expr><name>bft</name> = new <call><name>BFT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// give some values (via property file) to that environment</comment>
            <expr_stmt><expr><call><name><name>bft</name>.<name>writeProperties</name></name><argument_list>(<argument><expr>"f2name="+<name>f2name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>bft</name>.<name>writeProperties</name></name><argument_list>(<argument><expr>"f3name="+<name>f3name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>bft</name>.<name>writeProperties</name></name><argument_list>(<argument><expr>"f4name="+<name>f4name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// call the target for making the files dirty</comment>
            <expr_stmt><expr><call><name><name>bft</name>.<name>doTarget</name></name><argument_list>(<argument><expr>"modifiedselectortest-makeDirty"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">//</comment>
            <comment type="line">// *****  Third Run  *****</comment>
            <comment type="line">// third call should get only those files, which CONTENT changed</comment>
            <comment type="line">// (no timestamp changes required!)</comment>
            <expr_stmt><expr><name>results</name> = <call><name>selectionString</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">//</comment>
            <comment type="line">// *****  Check the result  *****</comment>
            <comment type="line">//</comment>

            <comment type="line">// Mark all files which should be selected as (T)rue and all others</comment>
            <comment type="line">// as (F)alse. Directories are always selected so they always are</comment>
            <comment type="line">// (T)rue.</comment>
            <decl_stmt><decl><type><name>StringBuffer</name></type> <name>expected</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name><name>filenames</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>ch</name> =<init> <expr>"F"</expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>isDirectory</name><argument_list>()</argument_list></call></expr>)</condition><then> <expr_stmt><expr><name>ch</name> = "T"</expr>;</expr_stmt></then></if>
                <comment type="line">// f2name shouldn't be selected: only timestamp has changed!</comment>
                <if>if <condition>(<expr><name><name>filenames</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><name>f3name</name></expr></argument>)</argument_list></call></expr>)</condition><then> <expr_stmt><expr><name>ch</name> = "T"</expr>;</expr_stmt></then></if>
                <if>if <condition>(<expr><name><name>filenames</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><name>f4name</name></expr></argument>)</argument_list></call></expr>)</condition><then> <expr_stmt><expr><name>ch</name> = "T"</expr>;</expr_stmt></then></if>
                <expr_stmt><expr><call><name><name>expected</name>.<name>append</name></name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>

            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(
                <argument><expr>"Wrong files selected. Differing files: "       <comment type="line">// info text</comment>
                + <call><name>resolve</name><argument_list>(<argument><expr><call><name>diff</name><argument_list>(<argument><expr><call><name><name>expected</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>results</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,  <comment type="line">// list of files</comment>
                <argument><expr><call><name><name>expected</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>,                            <comment type="line">// expected result</comment>
                <argument><expr><name>results</name></expr></argument>                                         <comment type="line">// result</comment>
            )</argument_list></call></expr>;</expr_stmt>

        }</block> <finally>finally <block>{
            <comment type="line">// cleanup the environment</comment>
            <expr_stmt><expr><call><name>cleanupBed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>s</name>!=<name>null</name></expr>)</condition><then> <expr_stmt><expr><call><name><name>s</name>.<name>getCache</name></name><argument_list>()</argument_list></call>.<call><name>delete</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
            <if>if <condition>(<expr><name>bft</name>!=<name>null</name></expr>)</condition><then> <expr_stmt><expr><call><name><name>bft</name>.<name>deletePropertiesfile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></finally></try>
    }</block></function>


    <comment type="javadoc">/**
     * This scenario is based on scenario 1, but does not use any
     * default value and its based on &lt;custom&gt; selector. Used values are:&lt;ul&gt;
     * &lt;li&gt;&lt;b&gt;Cache: &lt;/b&gt; Propertyfile,
     *                    cachefile={java.io.tmpdir}/mycache.txt &lt;/li&gt;
     * &lt;li&gt;&lt;b&gt;Algorithm: &lt;/b&gt; Digest
     *                    algorithm=SHA, Provider=null &lt;/li&gt;
     * &lt;li&gt;&lt;b&gt;Comparator: &lt;/b&gt; java.text.RuleBasedCollator
     * &lt;li&gt;&lt;b&gt;Update: &lt;/b&gt; true &lt;/li&gt;
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>_testScenario2</name><parameter_list>()</parameter_list> <block>{ <comment type="line">// RuleBasedCollator not yet supported - see Selector:375 note</comment>
        <decl_stmt><decl><type><name>ExtendSelector</name></type> <name>s</name> =<init> <expr>new <call><name>ExtendSelector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BFT</name></type> <name>bft</name> =<init> <expr>new <call><name>BFT</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>cachefile</name> =<init> <expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"java.io.tmpdir"</expr></argument>)</argument_list></call>+"/mycache.txt"</expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name>makeBed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>s</name>.<name>setClassname</name></name><argument_list>(<argument><expr>"org.apache.tools.ant.types.selectors.modifiedselector.ModifiedSelector"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>s</name>.<name>addParam</name></name><argument_list>(<argument><expr><call><name>createParam</name><argument_list>(<argument><expr>"cache.cachefile"</expr></argument>, <argument><expr><name>cachefile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">//s.addParam(createParam("algorithm.provider","---")); // i don't know any valid</comment>
            <expr_stmt><expr><call><name><name>s</name>.<name>addParam</name></name><argument_list>(<argument><expr><call><name>createParam</name><argument_list>(<argument><expr>"cache"</expr></argument>,<argument><expr>"propertyfile"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>s</name>.<name>addParam</name></name><argument_list>(<argument><expr><call><name>createParam</name><argument_list>(<argument><expr>"update"</expr></argument>,<argument><expr>"true"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>s</name>.<name>addParam</name></name><argument_list>(<argument><expr><call><name>createParam</name><argument_list>(<argument><expr>"comparator"</expr></argument>,<argument><expr>"rule"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>s</name>.<name>addParam</name></name><argument_list>(<argument><expr><call><name>createParam</name><argument_list>(<argument><expr>"algorithm.name"</expr></argument>,<argument><expr>"sha"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>s</name>.<name>addParam</name></name><argument_list>(<argument><expr><call><name>createParam</name><argument_list>(<argument><expr>"algorithm"</expr></argument>,<argument><expr>"digest"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// first and second run</comment>
            <expr_stmt><expr><call><name>performTests</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr>"TTTTTTTTTTTT"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>performTests</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr>"TFFFFFFFFFFT"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// make dirty</comment>
            <decl_stmt><decl><type><name>String</name></type> <name>f2name</name> =<init> <expr>"tar/bz2/asf-logo-huge.tar.bz2"</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>f3name</name> =<init> <expr>"asf-logo.gif.md5"</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>f4name</name> =<init> <expr>"copy.filterset.filtered"</expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>bft</name>.<name>writeProperties</name></name><argument_list>(<argument><expr>"f2name="+<name>f2name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>bft</name>.<name>writeProperties</name></name><argument_list>(<argument><expr>"f3name="+<name>f3name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>bft</name>.<name>writeProperties</name></name><argument_list>(<argument><expr>"f4name="+<name>f4name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>bft</name>.<name>doTarget</name></name><argument_list>(<argument><expr>"modifiedselectortest-makeDirty"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// third run</comment>
            <decl_stmt><decl><type><name>String</name></type> <name>results</name> =<init> <expr><call><name>selectionString</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>StringBuffer</name></type> <name>expected</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name><name>filenames</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>ch</name> =<init> <expr>"F"</expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>isDirectory</name><argument_list>()</argument_list></call></expr>)</condition><then> <expr_stmt><expr><name>ch</name> = "T"</expr>;</expr_stmt></then></if>
                <if>if <condition>(<expr><name><name>filenames</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><name>f3name</name></expr></argument>)</argument_list></call></expr>)</condition><then> <expr_stmt><expr><name>ch</name> = "T"</expr>;</expr_stmt></then></if>
                <if>if <condition>(<expr><name><name>filenames</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><name>f4name</name></expr></argument>)</argument_list></call></expr>)</condition><then> <expr_stmt><expr><name>ch</name> = "T"</expr>;</expr_stmt></then></if>
                <expr_stmt><expr><call><name><name>expected</name>.<name>append</name></name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(
                <argument><expr>"Wrong files selected. Differing files: "       <comment type="line">// info text</comment>
                + <call><name>resolve</name><argument_list>(<argument><expr><call><name>diff</name><argument_list>(<argument><expr><call><name><name>expected</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>results</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,  <comment type="line">// list of files</comment>
                <argument><expr><call><name><name>expected</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>,                            <comment type="line">// expected result</comment>
                <argument><expr><name>results</name></expr></argument>                                         <comment type="line">// result</comment>
            )</argument_list></call></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
            <comment type="line">// cleanup the environment</comment>
            <expr_stmt><expr><call><name>cleanupBed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr>(new <call><name><name>java</name>.<name>io</name>.<name>File</name></name><argument_list>(<argument><expr><name>cachefile</name></expr></argument>)</argument_list></call>).<call><name>delete</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>bft</name>!=<name>null</name></expr>)</condition><then> <expr_stmt><expr><call><name><name>bft</name>.<name>deletePropertiesfile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></finally></try>
    }</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>testScenarioCoreSelectorDefaults</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>doScenarioTest</name><argument_list>(<argument><expr>"modifiedselectortest-scenario-coreselector-defaults"</expr></argument>, <argument><expr>"cache.properties"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>testScenarioCoreSelectorSettings</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>doScenarioTest</name><argument_list>(<argument><expr>"modifiedselectortest-scenario-coreselector-settings"</expr></argument>, <argument><expr>"core.cache.properties"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>testScenarioCustomSelectorSettings</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>doScenarioTest</name><argument_list>(<argument><expr>"modifiedselectortest-scenario-customselector-settings"</expr></argument>, <argument><expr>"core.cache.properties"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>doScenarioTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>target</name></decl></param>, <param><decl><type><name>String</name></type> <name>cachefilename</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>BFT</name></type> <name>bft</name> =<init> <expr>new <call><name>BFT</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>bft</name>.<name>setUp</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>cachefile</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name>basedir</name></expr></argument>, <argument><expr><name>cachefilename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <comment type="line">// do the actions</comment>
            <expr_stmt><expr><call><name><name>bft</name>.<name>doTarget</name></name><argument_list>(<argument><expr>"modifiedselectortest-scenario-clean"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>bft</name>.<name>doTarget</name></name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// the directories to check</comment>
            <decl_stmt><decl><type><name>File</name></type> <name>to1</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name>basedir</name></expr></argument>, <argument><expr>"selectortest/to-1"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>File</name></type> <name>to2</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name>basedir</name></expr></argument>, <argument><expr>"selectortest/to-2"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>File</name></type> <name>to3</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name>basedir</name></expr></argument>, <argument><expr>"selectortest/to-3"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// do the checks</comment>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Cache file not created."</expr></argument>, <argument><expr><call><name><name>cachefile</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Not enough files copied on first time."</expr></argument>, <argument><expr><call><name><name>to1</name>.<name>list</name></name><argument_list>()</argument_list></call>.<name>length</name>&gt;5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Too much files copied on second time."</expr></argument>, <argument><expr><call><name><name>to2</name>.<name>list</name></name><argument_list>()</argument_list></call>.<name>length</name>==0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Too much files copied on third time."</expr></argument>, <argument><expr><call><name><name>to3</name>.<name>list</name></name><argument_list>()</argument_list></call>.<name>length</name>==2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// don't catch the JUnit exceptions</comment>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>bft</name>.<name>doTarget</name></name><argument_list>(<argument><expr>"modifiedselectortest-scenario-clean"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>bft</name>.<name>deletePropertiesfile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>bft</name>.<name>tearDown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cachefile</name>.<name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>


    <comment type="line">//  =====================  helper methods and classes  ====================</comment>


    <comment type="javadoc">/**
     * Creates a configured parameter object.
     * @param name   name of the parameter
     * @param value  value of the parameter
     * @return the parameter object
     */</comment>
    <function><type><specifier>private</specifier> <name>Parameter</name></type> <name>createParam</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>, <param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Parameter</name></type> <name>p</name> =<init> <expr>new <call><name>Parameter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>setName</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>setValue</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     * The BFT class wrapps the selector test-builfile inside an
     * ant project (BuildFileTest). It supports target execution
     * and property transfer to that project.
     */</comment>
    <class><specifier>private</specifier> class <name>BFT</name> <super><extends>extends <name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildFileTest</name></extends></super> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>buildfile</name> =<init> <expr>"src/etc/testcases/types/selectors.xml"</expr></init></decl>;</decl_stmt>

        <constructor><name>BFT</name><parameter_list>()</parameter_list> <block>{ <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr>"nothing"</expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></constructor>
        <constructor><name>BFT</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <decl_stmt><decl><type><name>String</name></type> <name>propfile</name> =<init> <expr>"ModifiedSelectorTest.properties"</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>boolean</name></type> <name>isConfigured</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr><name>buildfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>isConfigured</name> = true</expr>;</expr_stmt>
        }</block></function>


        <comment type="javadoc">/**
         * This stub teardown is here because the outer class needs to call the
         * tearDown method, and in the superclass it is protected.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>()</parameter_list> <block>{
            <try>try <block>{
                <expr_stmt><expr><call><name><name>super</name>.<name>tearDown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
                <comment type="line">// ignore</comment>
            }</block></catch></try>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>doTarget</name><parameter_list>(<param><decl><type><name>String</name></type> <name>target</name></decl></param>)</parameter_list> <block>{
            <if>if <condition>(<expr>!<name>isConfigured</name></expr>)</condition><then> <expr_stmt><expr><call><name>setUp</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
            <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>String</name></type> <name>getProperty</name><parameter_list>(<param><decl><type><name>String</name></type> <name>property</name></decl></param>)</parameter_list> <block>{
            <return>return <expr><call><name><name>project</name>.<name>getProperty</name></name><argument_list>(<argument><expr><name>property</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>writeProperties</name><parameter_list>(<param><decl><type><name>String</name></type> <name>line</name></decl></param>)</parameter_list> <block>{
            <if>if <condition>(<expr>!<name>isConfigured</name></expr>)</condition><then> <expr_stmt><expr><call><name>setUp</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
            <decl_stmt><decl><type><name>File</name></type> <name>dir</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>File</name></type> <name>file</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>propfile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <try>try <block>{
                <decl_stmt><decl><type><name><name>java</name>.<name>io</name>.<name>FileWriter</name></name></type> <name>out</name> =<init>
                    <expr>new <call><name><name>java</name>.<name>io</name>.<name>FileWriter</name></name><argument_list>(<argument><expr><call><name><name>file</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"line.separator"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>out</name>.<name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>out</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
                <expr_stmt><expr><call><name><name>e</name>.<name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>deletePropertiesfile</name><parameter_list>()</parameter_list> <block>{
            <if>if <condition>(<expr>!<name>isConfigured</name></expr>)</condition><then> <expr_stmt><expr><call><name>setUp</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
            <expr_stmt><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>propfile</name></expr></argument>)</argument_list></call>.<call><name>delete</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>deleteCachefile</name><parameter_list>()</parameter_list> <block>{
            <decl_stmt><decl><type><name>File</name></type> <name>basedir</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name>buildfile</name></expr></argument>)</argument_list></call>.<call><name>getParentFile</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>File</name></type> <name>cacheFile</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name>basedir</name></expr></argument>, <argument><expr>"cache.properties"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>cacheFile</name>.<name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>String</name></type> <name>getBuildfile</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>buildfile</name></expr>;</return>
        }</block></function>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setBuildfile</name><parameter_list>(<param><decl><type><name>String</name></type> <name>buildfile</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>buildfile</name></name> = <name>buildfile</name></expr>;</expr_stmt>
        }</block></function>
    }</block></class><comment type="line">//class-BFT</comment>


    <comment type="javadoc">/**
     * MockProject wrappes a very small ant project (one target, one task)
     * but provides public methods to fire the build events.
     */</comment>
    <class><specifier>private</specifier> class <name>MockProject</name> <super><extends>extends <name>Project</name></extends></super> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>Task</name></type>   <name>task</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>Target</name></type> <name>target</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>MockProject</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><name>task</name> = new <class><super><name>Task</name></super><argument_list>()</argument_list><block>{
                <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <block>{
                }</block></function>
            }</block></class></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>task</name>.<name>setTaskName</name></name><argument_list>(<argument><expr>"testTask"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>target</name> = new <call><name>Target</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>target</name>.<name>setName</name></name><argument_list>(<argument><expr>"testTarget"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>target</name>.<name>setProject</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>target</name>.<name>addTask</name></name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>task</name>.<name>setOwningTarget</name></name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>fireBuildFinished</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>super</name>.<name>fireBuildFinished</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>fireSubBuildFinished</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>super</name>.<name>fireSubBuildFinished</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>fireTargetStarted</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>super</name>.<name>fireTargetStarted</name></name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>fireTargetFinished</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>super</name>.<name>fireTargetFinished</name></name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>fireTaskStarted</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>super</name>.<name>fireTaskStarted</name></name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>fireTaskFinished</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>super</name>.<name>fireTaskFinished</name></name><argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class><comment type="line">//class-MockProject</comment>


}</block></class><comment type="line">//class-ModifiedSelectorTest</comment>
</unit>
