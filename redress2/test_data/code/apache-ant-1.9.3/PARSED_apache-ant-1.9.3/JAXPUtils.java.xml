<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\util\JAXPUtils.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>javax</name>.<name>xml</name>.<name>parsers</name>.<name>DocumentBuilder</name></name>;</import>
<import>import <name><name>javax</name>.<name>xml</name>.<name>parsers</name>.<name>DocumentBuilderFactory</name></name>;</import>
<import>import <name><name>javax</name>.<name>xml</name>.<name>parsers</name>.<name>FactoryConfigurationError</name></name>;</import>
<import>import <name><name>javax</name>.<name>xml</name>.<name>parsers</name>.<name>ParserConfigurationException</name></name>;</import>
<import>import <name><name>javax</name>.<name>xml</name>.<name>parsers</name>.<name>SAXParser</name></name>;</import>
<import>import <name><name>javax</name>.<name>xml</name>.<name>parsers</name>.<name>SAXParserFactory</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>xml</name>.<name>sax</name>.<name>Parser</name></name>;</import>
<import>import <name><name>org</name>.<name>xml</name>.<name>sax</name>.<name>SAXException</name></name>;</import>
<import>import <name><name>org</name>.<name>xml</name>.<name>sax</name>.<name>XMLReader</name></name>;</import>

<comment type="line">// CheckStyle:HideUtilityClassConstructorCheck OFF - bc</comment>

<comment type="javadoc">/**
 * Collection of helper methods that retrieve a ParserFactory or
 * Parsers and Readers.
 *
 * &lt;p&gt;This class will create only a single factory instance.&lt;/p&gt;
 *
 * @since Ant 1.5
 */</comment>
<class><specifier>public</specifier> class <name>JAXPUtils</name> <block>{

    <comment type="javadoc">/**
     * Helper for systemId.
     *
     * @since Ant 1.6
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>FileUtils</name></type> <name>FILE_UTILS</name> =<init> <expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Parser factory to use to create parsers.
     * @see #getParserFactory
     *
     * @since Ant 1.5
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>SAXParserFactory</name></type> <name>parserFactory</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Parser Factory to create Namespace aware parsers.
     *
     * @since Ant 1.6
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>SAXParserFactory</name></type> <name>nsParserFactory</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Parser factory to use to create document builders.
     *
     * @since Ant 1.6
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>DocumentBuilderFactory</name></type> <name>builderFactory</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Returns the parser factory to use. Only one parser factory is
     * ever created by this method and is then cached for future use.
     *
     * @return a SAXParserFactory to use.
     * @throws BuildException on error.
     *
     * @since Ant 1.5
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>synchronized</specifier> <name>SAXParserFactory</name></type> <name>getParserFactory</name><parameter_list>()</parameter_list>
        <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{

        <if>if <condition>(<expr><name>parserFactory</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>parserFactory</name> = <call><name>newParserFactory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>parserFactory</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the parser factory to use to create namespace aware parsers.
     *
     * @return a SAXParserFactory to use which supports manufacture of
     * namespace aware parsers.
     * @throws BuildException on error.
     *
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>synchronized</specifier> <name>SAXParserFactory</name></type> <name>getNSParserFactory</name><parameter_list>()</parameter_list>
        <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{

        <if>if <condition>(<expr><name>nsParserFactory</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>nsParserFactory</name> = <call><name>newParserFactory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>nsParserFactory</name>.<name>setNamespaceAware</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>nsParserFactory</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a new  parser factory instance.
     *
     * @return the parser factory.
     * @throws BuildException on error.
     * @since Ant 1.5
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>SAXParserFactory</name></type> <name>newParserFactory</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{

        <try>try <block>{
            <return>return <expr><call><name><name>SAXParserFactory</name>.<name>newInstance</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block> <catch>catch (<param><decl><type><name>FactoryConfigurationError</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"XML parser factory has not been "
                                     + "configured correctly: "
                                     + <call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a newly created SAX 1 Parser, using the default parser
     * factory.
     *
     * @return a SAX 1 Parser.
     * @throws BuildException on error.
     * @see #getParserFactory
     * @since Ant 1.5
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Parser</name></type> <name>getParser</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <try>try <block>{
            <return>return <expr><call><name>newSAXParser</name><argument_list>(<argument><expr><call><name>getParserFactory</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>getParser</name><argument_list>()</argument_list></call></expr>;</return>
        }</block> <catch>catch (<param><decl><type><name>SAXException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr><call><name>convertToBuildException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a newly created SAX 2 XMLReader, using the default parser
     * factory.
     *
     * @return a SAX 2 XMLReader.
     * @throws BuildException on error.
     * @see #getParserFactory
     * @since Ant 1.5
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>XMLReader</name></type> <name>getXMLReader</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <try>try <block>{
            <return>return <expr><call><name>newSAXParser</name><argument_list>(<argument><expr><call><name>getParserFactory</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>getXMLReader</name><argument_list>()</argument_list></call></expr>;</return>
        }</block> <catch>catch (<param><decl><type><name>SAXException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr><call><name>convertToBuildException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a newly created SAX 2 XMLReader, which is namespace aware
     *
     * @return a SAX 2 XMLReader.
     * @throws BuildException on error.
     * @see #getParserFactory
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>XMLReader</name></type> <name>getNamespaceXMLReader</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <try>try <block>{
            <return>return <expr><call><name>newSAXParser</name><argument_list>(<argument><expr><call><name>getNSParserFactory</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>getXMLReader</name><argument_list>()</argument_list></call></expr>;</return>
        }</block> <catch>catch (<param><decl><type><name>SAXException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr><call><name>convertToBuildException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * This is a best attempt to provide a URL.toExternalForm() from
     * a file URL. Some parsers like Crimson choke on uri that are made of
     * backslashed paths (ie windows) as it is does not conform
     * URI specifications.
     * @param file the file to create the system id from.
     * @return the systemid corresponding to the given file.
     * @since Ant 1.5.2
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getSystemId</name><parameter_list>(<param><decl><type><name>File</name></type> <name>file</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>FILE_UTILS</name>.<name>toURI</name></name><argument_list>(<argument><expr><call><name><name>file</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a newly created DocumentBuilder.
     *
     * @return a DocumentBuilder.
     * @throws BuildException on error.
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>DocumentBuilder</name></type> <name>getDocumentBuilder</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <try>try <block>{
            <return>return <expr><call><name>getDocumentBuilderFactory</name><argument_list>()</argument_list></call>.<call><name>newDocumentBuilder</name><argument_list>()</argument_list></call></expr>;</return>
        }</block> <catch>catch (<param><decl><type><name>ParserConfigurationException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * @return a new SAXParser instance as helper for getParser and
     * getXMLReader.
     *
     * @since Ant 1.5
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>SAXParser</name></type> <name>newSAXParser</name><parameter_list>(<param><decl><type><name>SAXParserFactory</name></type> <name>factory</name></decl></param>)</parameter_list>
         <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <try>try <block>{
            <return>return <expr><call><name><name>factory</name>.<name>newSAXParser</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block> <catch>catch (<param><decl><type><name>ParserConfigurationException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Cannot create parser for the given "
                                     + "configuration: " + <call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <catch>catch (<param><decl><type><name>SAXException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr><call><name>convertToBuildException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * Translate a SAXException into a BuildException
     *
     * @since Ant 1.5
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>BuildException</name></type> <name>convertToBuildException</name><parameter_list>(<param><decl><type><name>SAXException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Exception</name></type> <name>nested</name> =<init> <expr><call><name><name>e</name>.<name>getException</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>nested</name> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>nested</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
            <return>return <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Obtains the default builder factory if not already.
     *
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <specifier>synchronized</specifier>
        <name>DocumentBuilderFactory</name></type> <name>getDocumentBuilderFactory</name><parameter_list>()</parameter_list>
        <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>builderFactory</name> == <name>null</name></expr>)</condition><then> <block>{
            <try>try <block>{
                <expr_stmt><expr><name>builderFactory</name> = <call><name><name>DocumentBuilderFactory</name>.<name>newInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>FactoryConfigurationError</name></type> <name>e</name></decl></param>) <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Document builder factory has not "
                                         + "been configured correctly: "
                                         + <call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></then></if>
        <return>return <expr><name>builderFactory</name></expr>;</return>
    }</block></function>

}</block></class>
</unit>
