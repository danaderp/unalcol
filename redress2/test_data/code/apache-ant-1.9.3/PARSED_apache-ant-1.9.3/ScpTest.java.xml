<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\taskdefs\optional\ssh\ScpTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>ssh</name></name>;</package>

<import>import <name><name>junit</name>.<name>framework</name>.<name>TestCase</name></name>;</import>

<import>import <name><name>java</name>.<name>io</name></name>.*;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>condition</name>.<name>FilesMatch</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>FileSet</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>FilenameSelector</name></name>;</import>

<comment type="javadoc">/**
 * This is a unit test for the Scp task in Ant.  It must be
 * configured with command line options in order for it to work.
 * Here are the options:
 *
 * scp.tmp              This is a local path to a temporary
 *                      directory for this task to use.
 * scp.host             This is the remote location of the form:
 *                      "user:password@host:/path/to/directory"
 * scp.port             The port of the listening SSH service.
 *                      Defaults to 22.  (optional)
 * scp.known.hosts      The file containing the public keys of known
 *                      hosts.  Must be a SSH2 version file, but
 *                      supports RSA and DSA keys. If it is not present
 *                      this task setTrust() to true.  (optional)
 */</comment>
<class><specifier>public</specifier> class <name>ScpTest</name> <super><extends>extends <name>TestCase</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>tempDir</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>sshHostUri</name> =<init> <expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"scp.host"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>port</name> =<init> <expr><call><name><name>Integer</name>.<name>parseInt</name></name><argument_list>( <argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>( <argument><expr>"scp.port"</expr></argument>, <argument><expr>"22"</expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>knownHosts</name> =<init> <expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"scp.known.hosts"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>List</name></type> <name>cleanUpList</name> =<init> <expr>new <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ScpTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>testname</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>testname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"scp.tmp"</expr></argument>)</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>tempDir</name> = new <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"scp.tmp"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></constructor>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>cleanUpList</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>()</parameter_list> <block>{
        <for>for( <init><decl><type><name>Iterator</name></type> <name>i</name> =<init> <expr><call><name><name>cleanUpList</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>i</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr/>) <block>{
            <decl_stmt><decl><type><name>File</name></type> <name>file</name> =<init> <expr>(<name>File</name>) <call><name><name>i</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>file</name>.<name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testSingleFileUploadAndDownload</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr>"system property scp.tmp must be set"</expr></argument>, <argument><expr><name>tempDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>uploadFile</name> =<init> <expr><call><name>createTemporaryFile</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// upload</comment>
        <decl_stmt><decl><type><name>Scp</name></type> <name>scpTask</name> =<init> <expr><call><name>createTask</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>scpTask</name>.<name>setFile</name></name><argument_list>( <argument><expr><call><name><name>uploadFile</name>.<name>getPath</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>scpTask</name>.<name>setTodir</name></name><argument_list>( <argument><expr><name>sshHostUri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>scpTask</name>.<name>execute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>File</name></type> <name>testFile</name> =<init> <expr>new <call><name>File</name><argument_list>( <argument><expr><call><name><name>tempDir</name>.<name>getPath</name></name><argument_list>()</argument_list></call> + <name><name>File</name>.<name>separator</name></name> +
                "download-testSingleFileUploadAndDownload.test"</expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>addCleanup</name><argument_list>( <argument><expr><name>testFile</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>( <argument><expr>"Assert that the testFile does not exist."</expr></argument>,
                <argument><expr>!<call><name><name>testFile</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// download</comment>
        <expr_stmt><expr><name>scpTask</name> = <call><name>createTask</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
        <expr_stmt><expr><call><name><name>scpTask</name>.<name>setFile</name></name><argument_list>( <argument><expr><name>sshHostUri</name> + "/" + <call><name><name>uploadFile</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>scpTask</name>.<name>setTodir</name></name><argument_list>( <argument><expr><call><name><name>testFile</name>.<name>getPath</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>scpTask</name>.<name>execute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertTrue</name><argument_list>( <argument><expr>"Assert that the testFile exists."</expr></argument>, <argument><expr><call><name><name>testFile</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>compareFiles</name><argument_list>( <argument><expr><name>uploadFile</name></expr></argument>, <argument><expr><name>testFile</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testMultiUploadAndDownload</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr>"system property scp.tmp must be set"</expr></argument>, <argument><expr><name>tempDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>List</name></type> <name>uploadList</name> =<init> <expr>new <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for( <init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; 5</expr>;</condition> <incr><expr><name>i</name>++</expr></incr> ) <block>{
            <expr_stmt><expr><call><name><name>uploadList</name>.<name>add</name></name><argument_list>( <argument><expr><call><name>createTemporaryFile</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <decl_stmt><decl><type><name>Scp</name></type> <name>scp</name> =<init> <expr><call><name>createTask</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FilenameSelector</name></type> <name>selector</name> =<init> <expr>new <call><name>FilenameSelector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>selector</name>.<name>setName</name></name><argument_list>( <argument><expr>"scp*"</expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>FileSet</name></type> <name>fileset</name> =<init> <expr>new <call><name>FileSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>fileset</name>.<name>setDir</name></name><argument_list>( <argument><expr><name>tempDir</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>fileset</name>.<name>addFilename</name></name><argument_list>( <argument><expr><name>selector</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>scp</name>.<name>addFileset</name></name><argument_list>( <argument><expr><name>fileset</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>scp</name>.<name>setTodir</name></name><argument_list>( <argument><expr><name>sshHostUri</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>scp</name>.<name>execute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>File</name></type> <name>multi</name> =<init> <expr>new <call><name>File</name><argument_list>( <argument><expr><name>tempDir</name></expr></argument>, <argument><expr>"multi"</expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>multi</name>.<name>mkdir</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addCleanup</name><argument_list>( <argument><expr><name>multi</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Scp</name></type> <name>scp2</name> =<init> <expr><call><name>createTask</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>scp2</name>.<name>setFile</name></name><argument_list>( <argument><expr><name>sshHostUri</name> + "/scp*"</expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>scp2</name>.<name>setTodir</name></name><argument_list>( <argument><expr><call><name><name>multi</name>.<name>getPath</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>scp2</name>.<name>execute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>FilesMatch</name></type> <name>match</name> =<init> <expr>new <call><name>FilesMatch</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for( <init><decl><type><name>Iterator</name></type> <name>i</name> =<init> <expr><call><name><name>uploadList</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>i</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr/>) <block>{
            <decl_stmt><decl><type><name>File</name></type> <name>f</name> =<init> <expr>(<name>File</name>)<call><name><name>i</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>match</name>.<name>setFile1</name></name><argument_list>( <argument><expr><name>f</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>File</name></type> <name>f2</name> =<init> <expr>new <call><name>File</name><argument_list>( <argument><expr><name>multi</name></expr></argument>, <argument><expr><call><name><name>f</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>match</name>.<name>setFile2</name></name><argument_list>( <argument><expr><name>f2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Assert file '" + <call><name><name>f</name>.<name>getPath</name></name><argument_list>()</argument_list></call> + "' and file '" +
                    <call><name><name>f2</name>.<name>getPath</name></name><argument_list>()</argument_list></call> + "'"</expr></argument>, <argument><expr><call><name><name>match</name>.<name>eval</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testRemoteToDir</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>Scp</name></type> <name>scpTask</name> =<init> <expr><call><name>createTask</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <comment type="line">// first try an invalid URI</comment>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>scpTask</name>.<name>setRemoteTodir</name></name><argument_list>( <argument><expr>"host:/a/path/without/an/at"</expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Expected a BuildException to be thrown due to invalid"
                    + " remoteToDir"</expr></argument>)</argument_list></call></expr>;</expr_stmt> 
        }</block>
        <catch>catch (<param><decl><type><name>BuildException</name></type> <name>e</name></decl></param>)
        <block>{
            <comment type="line">// expected</comment>
        }</block></catch></try>
        
        <comment type="line">// And this one should work</comment>
        <expr_stmt><expr><call><name><name>scpTask</name>.<name>setRemoteTodir</name></name><argument_list>( <argument><expr>"user:password@host:/a/path/with/an/at"</expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// no exception</comment>
    }</block></function>
    
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addCleanup</name><parameter_list>( <param><decl><type><name>File</name></type> <name>file</name></decl></param> )</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>cleanUpList</name>.<name>add</name></name><argument_list>( <argument><expr><name>file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>compareFiles</name><parameter_list>(<param><decl><type><name>File</name></type> <name>src</name></decl></param>, <param><decl><type><name>File</name></type> <name>dest</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>FilesMatch</name></type> <name>match</name> =<init> <expr>new <call><name>FilesMatch</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>match</name>.<name>setFile1</name></name><argument_list>( <argument><expr><name>src</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>match</name>.<name>setFile2</name></name><argument_list>( <argument><expr><name>dest</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertTrue</name><argument_list>( <argument><expr>"Assert files are equal."</expr></argument>, <argument><expr><call><name><name>match</name>.<name>eval</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>File</name></type> <name>createTemporaryFile</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>uploadFile</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>uploadFile</name> = <call><name><name>File</name>.<name>createTempFile</name></name><argument_list>( <argument><expr>"scp"</expr></argument>, <argument><expr>"test"</expr></argument>, <argument><expr><name>tempDir</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>FileWriter</name></type> <name>writer</name> =<init> <expr>new <call><name>FileWriter</name><argument_list>( <argument><expr><name>uploadFile</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>writer</name>.<name>write</name></name><argument_list>(<argument><expr>"Can you hear me now?\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>writer</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addCleanup</name><argument_list>( <argument><expr><name>uploadFile</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>uploadFile</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>Scp</name></type> <name>createTask</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Scp</name></type> <name>scp</name> =<init> <expr>new <call><name>Scp</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Project</name></type> <name>p</name> =<init> <expr>new <call><name>Project</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>scp</name>.<name>setProject</name></name><argument_list>( <argument><expr><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>( <expr><name>knownHosts</name> != <name>null</name></expr> )</condition><then> <block>{
            <expr_stmt><expr><call><name><name>scp</name>.<name>setKnownhosts</name></name><argument_list>( <argument><expr><name>knownHosts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>scp</name>.<name>setTrust</name></name><argument_list>( <argument><expr>true</expr></argument> )</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><call><name><name>scp</name>.<name>setPort</name></name><argument_list>( <argument><expr><name>port</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>scp</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
