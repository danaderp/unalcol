<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\filters\HeadFilter.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>filters</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Reader</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>LineTokenizer</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Parameter</name></name>;</import>

<comment type="javadoc">/**
 * Reads the first &lt;code&gt;n&lt;/code&gt; lines of a stream.
 * (Default is first 10 lines.)
 * &lt;p&gt;
 * Example:
 * &lt;pre&gt;&amp;lt;headfilter lines=&amp;quot;3&amp;quot;/&amp;gt;&lt;/pre&gt;
 * Or:
 * &lt;pre&gt;&amp;lt;filterreader classname=&amp;quot;org.apache.tools.ant.filters.HeadFilter&amp;quot;&amp;gt;
 *    &amp;lt;param name=&amp;quot;lines&amp;quot; value=&amp;quot;3&amp;quot;/&amp;gt;
 * &amp;lt;/filterreader&amp;gt;&lt;/pre&gt;
 *
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>HeadFilter</name> <super><extends>extends <name>BaseParamFilterReader</name></extends>
    <implements>implements <name>ChainableReader</name></implements></super> <block>{
    <comment type="javadoc">/** Parameter name for the number of lines to be returned. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>LINES_KEY</name> =<init> <expr>"lines"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Parameter name for the number of lines to be skipped. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SKIP_KEY</name> =<init> <expr>"skip"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Number of lines currently read in. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>linesRead</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Default number of lines to show */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DEFAULT_NUM_LINES</name> =<init> <expr>10</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Number of lines to be returned in the filtered stream. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>lines</name> =<init> <expr><name>DEFAULT_NUM_LINES</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Number of lines to be skipped. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>skip</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** A line tokenizer */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>LineTokenizer</name></type> <name>lineTokenizer</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** the current line from the input stream */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type>    <name>line</name>      =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** the position in the current line */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type>       <name>linePos</name>   =<init> <expr>0</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Whether this filter is finished */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>eof</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructor for "dummy" instances.
     *
     * @see BaseFilterReader#BaseFilterReader()
     */</comment>
    <constructor><specifier>public</specifier> <name>HeadFilter</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a new filtered reader.
     *
     * @param in A Reader object providing the underlying stream.
     *           Must not be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <constructor><specifier>public</specifier> <name>HeadFilter</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Reader</name></type> <name>in</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>lineTokenizer</name> = new <call><name>LineTokenizer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>lineTokenizer</name>.<name>setIncludeDelims</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the next character in the filtered stream. If the desired
     * number of lines have already been read, the resulting stream is
     * effectively at an end. Otherwise, the next character from the
     * underlying stream is read and returned.
     *
     * @return the next character in the resulting stream, or -1
     * if the end of the resulting stream has been reached
     *
     * @exception IOException if the underlying stream throws an IOException
     * during reading
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>read</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr>!<call><name>getInitialized</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>initialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setInitialized</name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <while>while <condition>(<expr><name>line</name> == <name>null</name> || <call><name><name>line</name>.<name>length</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition> <block>{
            <expr_stmt><expr><name>line</name> = <call><name><name>lineTokenizer</name>.<name>getToken</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>line</name> == <name>null</name></expr>)</condition><then> <block>{
                <return>return <expr>-1</expr>;</return>
            }</block></then></if>
            <expr_stmt><expr><name>line</name> = <call><name>headFilter</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>eof</name></expr>)</condition><then> <block>{
                <return>return <expr>-1</expr>;</return>
            }</block></then></if>
            <expr_stmt><expr><name>linePos</name> = 0</expr>;</expr_stmt>
        }</block></while>

        <decl_stmt><decl><type><name>int</name></type> <name>ch</name> =<init> <expr><call><name><name>line</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>linePos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>linePos</name>++</expr>;</expr_stmt>
        <if>if <condition>(<expr><name>linePos</name> == <call><name><name>line</name>.<name>length</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>line</name> = <name>null</name></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>ch</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the number of lines to be returned in the filtered stream.
     *
     * @param lines the number of lines to be returned in the filtered stream
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLines</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>long</name></type> <name>lines</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>lines</name></name> = <name>lines</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the number of lines to be returned in the filtered stream.
     *
     * @return the number of lines to be returned in the filtered stream
     */</comment>
    <function><type><specifier>private</specifier> <name>long</name></type> <name>getLines</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>lines</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the number of lines to be skipped in the filtered stream.
     *
     * @param skip the number of lines to be skipped in the filtered stream
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSkip</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>long</name></type> <name>skip</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>skip</name></name> = <name>skip</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the number of lines to be skipped in the filtered stream.
     *
     * @return the number of lines to be skipped in the filtered stream
     */</comment>
    <function><type><specifier>private</specifier> <name>long</name></type> <name>getSkip</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>skip</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Creates a new HeadFilter using the passed in
     * Reader for instantiation.
     *
     * @param rdr A Reader object providing the underlying stream.
     *            Must not be &lt;code&gt;null&lt;/code&gt;.
     *
     * @return a new filter based on this configuration, but filtering
     *         the specified reader
     */</comment>
    <function><type><specifier>public</specifier> <name>Reader</name></type> <name>chain</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Reader</name></type> <name>rdr</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>HeadFilter</name></type> <name>newFilter</name> =<init> <expr>new <call><name>HeadFilter</name><argument_list>(<argument><expr><name>rdr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>newFilter</name>.<name>setLines</name></name><argument_list>(<argument><expr><call><name>getLines</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>newFilter</name>.<name>setSkip</name></name><argument_list>(<argument><expr><call><name>getSkip</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>newFilter</name>.<name>setInitialized</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>newFilter</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Scans the parameters list for the "lines" parameter and uses
     * it to set the number of lines to be returned in the filtered stream.
     * also scan for skip parameter.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>initialize</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Parameter</name><index>[]</index></type> <name>params</name> =<init> <expr><call><name>getParameters</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>params</name> != <name>null</name></expr>)</condition><then> <block>{
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>params</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <if>if <condition>(<expr><call><name><name>LINES_KEY</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>params</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>lines</name> = <call><name><name>Long</name>.<name>parseLong</name></name><argument_list>(<argument><expr><name><name>params</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <continue>continue;</continue>
                }</block></then></if>
                <if>if <condition>(<expr><call><name><name>SKIP_KEY</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>params</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>skip</name> = <call><name><name>Long</name>.<name>parseLong</name></name><argument_list>(<argument><expr><name><name>params</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <continue>continue;</continue>
                }</block></then></if>
            }</block></for>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * implements a head filter on the input stream
     */</comment>
    <function><type><specifier>private</specifier> <name>String</name></type> <name>headFilter</name><parameter_list>(<param><decl><type><name>String</name></type> <name>line</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>linesRead</name>++</expr>;</expr_stmt>
        <if>if <condition>(<expr><name>skip</name> &gt; 0</expr>)</condition><then> <block>{
            <if>if <condition>(<expr>(<name>linesRead</name> - 1) &lt; <name>skip</name></expr>)</condition><then> <block>{
                <return>return <expr><name>null</name></expr>;</return>
            }</block></then></if>
        }</block></then></if>

        <if>if <condition>(<expr><name>lines</name> &gt; 0</expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>linesRead</name> &gt; (<name>lines</name> + <name>skip</name>)</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>eof</name> = true</expr>;</expr_stmt>
                <return>return <expr><name>null</name></expr>;</return>
            }</block></then></if>
        }</block></then></if>
        <return>return <expr><name>line</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
