<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\types\resources\MappedResource.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Reference</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Resource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileNameMapper</name></name>;</import>

<comment type="javadoc">/**
 * A decorator around a different resource that uses a mapper to
 * dynamically remap the resource's name.
 *
 * &lt;p&gt;Strips the FileProvider interface from decorated resources since
 * it may be used to circumvent name mapping.&lt;/p&gt;
 *
 * @since Ant 1.8.0
 */</comment>
<class><specifier>public</specifier> class <name>MappedResource</name> <super><extends>extends <name>ResourceDecorator</name></extends></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>FileNameMapper</name></type> <name>mapper</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Wraps an existing resource.
     * @param r Resource to wrap
     * @param m FileNameMapper that handles mapping
     */</comment>
    <constructor><specifier>public</specifier> <name>MappedResource</name><parameter_list>(<param><decl><type><name>Resource</name></type> <name>r</name></decl></param>, <param><decl><type><name>FileNameMapper</name></type> <name>m</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mapper</name> = <name>m</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Maps the name.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> =<init> <expr><call><name>getResource</name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name>name</name></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>mapped</name> =<init> <expr><call><name><name>mapper</name>.<name>mapFileName</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>mapped</name> != <name>null</name> &amp;&amp; <name><name>mapped</name>.<name>length</name></name> &gt; 0 ? <name><name>mapped</name><index>[<expr>0</expr>]</index></name> : <name>null</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Not really supported since mapper is never null.
     * @param r reference to set
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRefid</name><parameter_list>(<param><decl><type><name>Reference</name></type> <name>r</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>mapper</name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr><call><name>noChildrenAllowed</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>super</name>.<name>setRefid</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Suppress FileProvider
     * @param clazz the type to implement
     */</comment>
    <function><type><specifier>public</specifier> <argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list> <name>T</name></type> <name>as</name><parameter_list>(<param><decl><type><name><name>Class</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>clazz</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name><name>FileProvider</name>.<name><name/></name></name>class.<call><name>isAssignableFrom</name><argument_list>(<argument><expr><name>clazz</name></expr></argument>)</argument_list></call> 
                ? <name>null</name> : <call><name>getResource</name><argument_list>()</argument_list></call>.<call><name>as</name><argument_list>(<argument><expr><name>clazz</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the hash code for this Resource.
     * @since Ant 1.8.1
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>n</name> =<init> <expr><call><name>getName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>n</name> == <name>null</name> ? <call><name><name>super</name>.<name>hashCode</name></name><argument_list>()</argument_list></call> : <call><name><name>n</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Equality check based on the resource's name in addition to the
     * resource itself.
     * @since Ant 1.8.1
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>other</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>other</name> == <name>null</name> || !<call><name><name>other</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>MappedResource</name></type> <name>m</name> =<init> <expr>(<name>MappedResource</name>) <name>other</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>myName</name> =<init> <expr><call><name>getName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>otherName</name> =<init> <expr><call><name><name>m</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>(<name>myName</name> == <name>null</name> ? <name>otherName</name> == <name>null</name> : <call><name><name>myName</name>.<name>equals</name></name><argument_list>(<argument><expr><name>otherName</name></expr></argument>)</argument_list></call>)
            &amp;&amp; <call><name>getResource</name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><call><name><name>m</name>.<name>getResource</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
