<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\taskdefs\MacroDefTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildFileTest</name></name>;</import>

<comment type="javadoc">/**
 */</comment>
<class><specifier>public</specifier> class <name>MacroDefTest</name> <super><extends>extends <name>BuildFileTest</name></extends></super> <block>{
    <constructor><specifier>public</specifier> <name>MacroDefTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr>"src/etc/testcases/taskdefs/macrodef.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testSimple</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectLog</name><argument_list>(<argument><expr>"simple"</expr></argument>, <argument><expr>"Hello World"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testText</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectLog</name><argument_list>(<argument><expr>"text"</expr></argument>, <argument><expr>"Inner Text"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testDuplicateAttribute</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildException</name><argument_list>(
            <argument><expr>"duplicate.attribute"</expr></argument>,
            <argument><expr>"the attribute text has already been specified"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testDuplicateElement</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildException</name><argument_list>(
            <argument><expr>"duplicate.element"</expr></argument>,
            <argument><expr>"the element text has already been specified"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testUri</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectLog</name><argument_list>(<argument><expr>"uri"</expr></argument>, <argument><expr>"Hello World"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNested</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectLog</name><argument_list>(<argument><expr>"nested"</expr></argument>, <argument><expr>"A nested element"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testDouble</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectLog</name><argument_list>(
            <argument><expr>"double"</expr></argument>,
            <argument><expr>"@{prop} is 'property', value of ${property} is 'A property value'"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testIgnoreCase</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectLog</name><argument_list>(
            <argument><expr>"ignorecase"</expr></argument>,
            <argument><expr>"a is ab is b"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testIgnoreElementCase</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectLog</name><argument_list>(
            <argument><expr>"ignore-element-case"</expr></argument>,
            <argument><expr>"nested elementnested element"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testTextElement</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectLogContaining</name><argument_list>(
            <argument><expr>"textelement"</expr></argument>, <argument><expr>"Hello world"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testTextTrim</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectLogContaining</name><argument_list>(
            <argument><expr>"text.trim"</expr></argument>, <argument><expr>"[Hello world]"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testDuplicateTextName</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildException</name><argument_list>(
            <argument><expr>"duplicatetextname"</expr></argument>,
            <argument><expr>"the name \"text\" is already used as an attribute"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testDuplicateTextName2</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildException</name><argument_list>(
            <argument><expr>"duplicatetextname2"</expr></argument>,
            <argument><expr>"the attribute name \"text\" has already been used by the text element"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testEscape</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectLog</name><argument_list>(
            <argument><expr>"escape"</expr></argument>,
            <argument><expr>"a@b or a@b is avalue@bvalue"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testAttributeDescription</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectLog</name><argument_list>(
            <argument><expr>"attribute.description"</expr></argument>,
            <argument><expr>"description is hello world"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testOverrideDefault</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectLog</name><argument_list>(
            <argument><expr>"override.default"</expr></argument>,
            <argument><expr>"value is new"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testImplicit</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectLog</name><argument_list>(
            <argument><expr>"implicit"</expr></argument>, <argument><expr>"Before implicitIn implicitAfter implicit"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testImplicitNotOptional</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectSpecificBuildException</name><argument_list>(
            <argument><expr>"implicit.notoptional"</expr></argument>,
            <argument><expr>"Missing nested elements for implicit element implicit"</expr></argument>,
            <argument><expr>"Missing nested elements for implicit element implicit"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testImplicitOptional</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectLog</name><argument_list>(
            <argument><expr>"implicit.optional"</expr></argument>, <argument><expr>"Before implicitAfter implicit"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testImplicitExplicit</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectSpecificBuildException</name><argument_list>(
            <argument><expr>"implicit.explicit"</expr></argument>,
            <argument><expr>"Only one element allowed when using implicit elements"</expr></argument>,
            <argument><expr>"Only one element allowed when using implicit elements"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testBackTraceOff</name><parameter_list>()</parameter_list> <block>{
        <try>try <block>{
            <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"backtraceoff"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>ex</name></decl></param>) <block>{
            <if>if <condition>(<expr><call><name><name>ex</name>.<name>getMessage</name></name><argument_list>()</argument_list></call>.<call><name>indexOf</name><argument_list>(<argument><expr>"following error occurred"</expr></argument>)</argument_list></call> != -1</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"error message contained backtrace - " + <call><name><name>ex</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testBackTrace</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildExceptionContaining</name><argument_list>(
            <argument><expr>"backtraceon"</expr></argument>,
            <argument><expr>"Checking if a back trace is created"</expr></argument>,
            <argument><expr>"following error occurred"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testTopLevelText</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectLogContaining</name><argument_list>(<argument><expr>"top-level-text"</expr></argument>, <argument><expr>"Hello World"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>

</unit>
