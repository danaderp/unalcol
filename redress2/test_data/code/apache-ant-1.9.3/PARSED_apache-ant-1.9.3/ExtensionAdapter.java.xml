<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\extension\ExtensionAdapter.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>extension</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>DataType</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Reference</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>DeweyDecimal</name></name>;</import>

<comment type="javadoc">/**
 * Simple class that represents an Extension and conforms to Ants
 * patterns.
 *
 * @ant.datatype name="extension"
 */</comment>
<class><specifier>public</specifier> class <name>ExtensionAdapter</name> <super><extends>extends <name>DataType</name></extends></super> <block>{
    <comment type="javadoc">/**
     * The name of the optional package being made available, or required.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>extensionName</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The version number (dotted decimal notation) of the specification
     * to which this optional package conforms.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>DeweyDecimal</name></type> <name>specificationVersion</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The name of the company or organization that originated the
     * specification to which this optional package conforms.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>specificationVendor</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The unique identifier of the company that produced the optional
     * package contained in this JAR file.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>implementationVendorID</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The name of the company or organization that produced this
     * implementation of this optional package.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>implementationVendor</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The version number (dotted decimal notation) for this implementation
     * of the optional package.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>DeweyDecimal</name></type> <name>implementationVersion</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The URL from which the most recent version of this optional package
     * can be obtained if it is not already installed.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>implementationURL</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Set the name of extension.
     *
     * @param extensionName the name of extension
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setExtensionName</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>extensionName</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>verifyNotAReference</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>extensionName</name></name> = <name>extensionName</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the specificationVersion of extension.
     *
     * @param specificationVersion the specificationVersion of extension
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSpecificationVersion</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>specificationVersion</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>verifyNotAReference</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>specificationVersion</name></name> = new <call><name>DeweyDecimal</name><argument_list>(<argument><expr><name>specificationVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the specificationVendor of extension.
     *
     * @param specificationVendor the specificationVendor of extension
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSpecificationVendor</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>specificationVendor</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>verifyNotAReference</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>specificationVendor</name></name> = <name>specificationVendor</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the implementationVendorID of extension.
     *
     * @param implementationVendorID the implementationVendorID of extension
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setImplementationVendorId</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>implementationVendorID</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>verifyNotAReference</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>implementationVendorID</name></name> = <name>implementationVendorID</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the implementationVendor of extension.
     *
     * @param implementationVendor the implementationVendor of extension
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setImplementationVendor</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>implementationVendor</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>verifyNotAReference</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>implementationVendor</name></name> = <name>implementationVendor</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the implementationVersion of extension.
     *
     * @param implementationVersion the implementationVersion of extension
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setImplementationVersion</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>implementationVersion</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>verifyNotAReference</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>implementationVersion</name></name> = new <call><name>DeweyDecimal</name><argument_list>(<argument><expr><name>implementationVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the implementationURL of extension.
     *
     * @param implementationURL the implementationURL of extension
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setImplementationUrl</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>implementationURL</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>verifyNotAReference</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>implementationURL</name></name> = <name>implementationURL</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Makes this instance in effect a reference to another ExtensionAdapter
     * instance.
     *
     * &lt;p&gt;You must not set another attribute or nest elements inside
     * this element if you make it a reference.&lt;/p&gt;
     *
     * @param reference the reference to which this instance is associated
     * @exception BuildException if this instance already has been configured.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRefid</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Reference</name></type> <name>reference</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>null</name> != <name>extensionName</name>
            || <name>null</name> != <name>specificationVersion</name>
            || <name>null</name> != <name>specificationVendor</name>
            || <name>null</name> != <name>implementationVersion</name>
            || <name>null</name> != <name>implementationVendorID</name>
            || <name>null</name> != <name>implementationVendor</name>
            || <name>null</name> != <name>implementationURL</name></expr>)</condition><then> <block>{
            <throw>throw <expr><call><name>tooManyAttributes</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>super</name>.<name>setRefid</name></name><argument_list>(<argument><expr><name>reference</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>verifyNotAReference</name><parameter_list>()</parameter_list>
        <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr><call><name>tooManyAttributes</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Convert this adpater object into an extension object.
     *
     * @return the extension object
     */</comment>
    <function><type><name>Extension</name></type> <name>toExtension</name><parameter_list>()</parameter_list>
        <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>((<name>ExtensionAdapter</name>) <call><name>getCheckedRef</name><argument_list>()</argument_list></call>).<call><name>toExtension</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>dieOnCircularReference</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>null</name> == <name>extensionName</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>message</name> =<init> <expr>"Extension is missing name."</expr></init></decl>;</decl_stmt>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <decl_stmt><decl><type><name>String</name></type> <name>specificationVersionString</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>null</name> != <name>specificationVersion</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>specificationVersionString</name> = <call><name><name>specificationVersion</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>String</name></type> <name>implementationVersionString</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>null</name> != <name>implementationVersion</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>implementationVersionString</name> = <call><name><name>implementationVersion</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr>new <call><name>Extension</name><argument_list>(<argument><expr><name>extensionName</name></expr></argument>,
                              <argument><expr><name>specificationVersionString</name></expr></argument>,
                              <argument><expr><name>specificationVendor</name></expr></argument>,
                              <argument><expr><name>implementationVersionString</name></expr></argument>,
                              <argument><expr><name>implementationVendor</name></expr></argument>,
                              <argument><expr><name>implementationVendorID</name></expr></argument>,
                              <argument><expr><name>implementationURL</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * a debug toString method.
     * @return the extension in a string.
     * @see java.lang.Object#toString()
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>"{" + <call><name>toExtension</name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call> + "}"</expr>;</return>
    }</block></function>
}</block></class>
</unit>
