<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\Target.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collections</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Hashtable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>StringTokenizer</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>property</name>.<name>LocalProperties</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>condition</name>.<name>And</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>condition</name>.<name>Condition</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>condition</name>.<name>Or</name></name>;</import>

<comment type="javadoc">/**
 * Class to implement a target object with required parameters.
 *
 * &lt;p&gt;If you are creating Targets programmatically, make sure you set
 * the Location to a useful value.  In particular all targets should
 * have different location values.&lt;/p&gt;
 */</comment>
<class><specifier>public</specifier> class <name>Target</name> <super><implements>implements <name>TaskContainer</name></implements></super> <block>{

    <comment type="javadoc">/** Name of this target. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>name</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The "if" condition to test on execution. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>ifString</name> =<init> <expr>""</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The "unless" condition to test on execution. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>unlessString</name> =<init> <expr>""</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Condition</name></type> <name>ifCondition</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Condition</name></type> <name>unlessCondition</name></decl>;</decl_stmt>

    <comment type="javadoc">/** List of targets this target is dependent on. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>dependencies</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Children of this target (tasks and data types). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>List</name><argument_list>&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>children</name> =<init> <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>Object</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Since Ant 1.6.2 */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Location</name></type> <name>location</name> =<init> <expr><name><name>Location</name>.<name>UNKNOWN_LOCATION</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Project this target belongs to. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Project</name></type> <name>project</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Description of this target, if any. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>description</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Default constructor. */</comment>
    <constructor><specifier>public</specifier> <name>Target</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">//empty</comment>
    }</block></constructor>

    <comment type="javadoc">/**
     * Cloning constructor.
     * @param other the Target to clone.
     */</comment>
    <constructor><specifier>public</specifier> <name>Target</name><parameter_list>(<param><decl><type><name>Target</name></type> <name>other</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>name</name></name> = <name><name>other</name>.<name>name</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>ifString</name></name> = <name><name>other</name>.<name>ifString</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>unlessString</name></name> = <name><name>other</name>.<name>unlessString</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>ifCondition</name></name> = <name><name>other</name>.<name>ifCondition</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>unlessCondition</name></name> = <name><name>other</name>.<name>unlessCondition</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>dependencies</name></name> = <name><name>other</name>.<name>dependencies</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>location</name></name> = <name><name>other</name>.<name>location</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>project</name></name> = <name><name>other</name>.<name>project</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>description</name></name> = <name><name>other</name>.<name>description</name></name></expr>;</expr_stmt>
        <comment type="line">// The children are added to after this cloning</comment>
        <expr_stmt><expr><name><name>this</name>.<name>children</name></name> = <name><name>other</name>.<name>children</name></name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Sets the project this target belongs to.
     *
     * @param project The project this target belongs to.
     *                Must not be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setProject</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>project</name></name> = <name>project</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the project this target belongs to.
     *
     * @return The project this target belongs to, or &lt;code&gt;null&lt;/code&gt; if
     *         the project has not been set yet.
     */</comment>
    <function><type><specifier>public</specifier> <name>Project</name></type> <name>getProject</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>project</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the location of this target's definition.
     *
     * @param location   &lt;code&gt;Location&lt;/code&gt;
     * @since 1.6.2
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLocation</name><parameter_list>(<param><decl><type><name>Location</name></type> <name>location</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>location</name></name> = <name>location</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the location of this target's definition.
     *
     * @return &lt;code&gt;Location&lt;/code&gt;
     * @since 1.6.2
     */</comment>
    <function><type><specifier>public</specifier> <name>Location</name></type> <name>getLocation</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>location</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the list of targets this target is dependent on.
     * The targets themselves are not resolved at this time.
     *
     * @param depS A comma-separated list of targets this target
     *             depends on. Must not be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDepends</name><parameter_list>(<param><decl><type><name>String</name></type> <name>depS</name></decl></param>)</parameter_list> <block>{
        <for>for (<init><decl><type><name>String</name></type> <name>dep</name> :<range> <expr><call><name>parseDepends</name><argument_list>(<argument><expr><name>depS</name></expr></argument>, <argument><expr><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"depends"</expr></argument>)</argument_list></call></expr></range></decl></init>) <block>{
            <expr_stmt><expr><call><name>addDependency</name><argument_list>(<argument><expr><name>dep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>parseDepends</name><parameter_list>(<param><decl><type><name>String</name></type> <name>depends</name></decl></param>,
                                                <param><decl><type><name>String</name></type> <name>targetName</name></decl></param>,
                                                <param><decl><type><name>String</name></type> <name>attributeName</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>list</name> =<init> <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>depends</name>.<name>length</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>StringTokenizer</name></type> <name>tok</name> =<init>
                <expr>new <call><name>StringTokenizer</name><argument_list>(<argument><expr><name>depends</name></expr></argument>, <argument><expr>","</expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>tok</name>.<name>hasMoreTokens</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>token</name> =<init> <expr><call><name><name>tok</name>.<name>nextToken</name></name><argument_list>()</argument_list></call>.<call><name>trim</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="line">// Make sure the dependency is not empty string</comment>
                <if>if <condition>(<expr>"".<call><name>equals</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call> || ",".<call><name>equals</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Syntax Error: "
                                             + <name>attributeName</name>
                                             + " attribute of target \""
                                             + <name>targetName</name>
                                             + "\" contains an empty string."</expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if>

                <expr_stmt><expr><call><name><name>list</name>.<name>add</name></name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Make sure that depends attribute does not</comment>
                <comment type="line">// end in a ,</comment>
                <if>if <condition>(<expr><call><name><name>tok</name>.<name>hasMoreTokens</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>token</name> = <call><name><name>tok</name>.<name>nextToken</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr>!<call><name><name>tok</name>.<name>hasMoreTokens</name></name><argument_list>()</argument_list></call> || !",".<call><name>equals</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Syntax Error: "
                                                 + <name>attributeName</name>
                                                 + " attribute for target \""
                                                 + <name>targetName</name>
                                                 + "\" ends with a \",\" "
                                                 + "character"</expr></argument>)</argument_list></call></expr>;</throw>
                    }</block></then></if>
                }</block></then></if>
            }</block></while>
        }</block></then></if>
        <return>return <expr><name>list</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the name of this target.
     *
     * @param name The name of this target. Should not be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>name</name></name> = <name>name</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the name of this target.
     *
     * @return the name of this target, or &lt;code&gt;null&lt;/code&gt; if the
     *         name has not been set yet.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>name</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a task to this target.
     *
     * @param task The task to be added. Must not be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addTask</name><parameter_list>(<param><decl><type><name>Task</name></type> <name>task</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>children</name>.<name>add</name></name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Adds the wrapper for a data type element to this target.
     *
     * @param r The wrapper for the data type element to be added.
     *          Must not be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addDataType</name><parameter_list>(<param><decl><type><name>RuntimeConfigurable</name></type> <name>r</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>children</name>.<name>add</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the current set of tasks to be executed by this target.
     *
     * @return an array of the tasks currently within this target
     */</comment>
    <function><type><specifier>public</specifier> <name>Task</name><index>[]</index></type> <name>getTasks</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>Task</name></argument>&gt;</argument_list></name></type> <name>tasks</name> =<init> <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>Task</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>children</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>Object</name></type> <name>o</name> :<range> <expr><name>children</name></expr></range></decl></init>) <block>{
            <if>if <condition>(<expr><name>o</name> <name>instanceof</name> <name>Task</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>tasks</name>.<name>add</name></name><argument_list>(<argument><expr>(<name>Task</name>) <name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <return>return <expr><call><name><name>tasks</name>.<name>toArray</name></name><argument_list>(<argument><expr>new <name><name>Task</name><index>[<expr><call><name><name>tasks</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a dependency to this target.
     *
     * @param dependency The name of a target this target is dependent on.
     *                   Must not be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addDependency</name><parameter_list>(<param><decl><type><name>String</name></type> <name>dependency</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>dependencies</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>dependencies</name> = new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>dependencies</name>.<name>add</name></name><argument_list>(<argument><expr><name>dependency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns an enumeration of the dependencies of this target.
     *
     * @return an enumeration of the dependencies of this target (enumeration of String)
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Enumeration</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getDependencies</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>Collections</name>
                .<name>enumeration</name></name><argument_list>(<argument><expr><name>dependencies</name> == <name>null</name> ? <name><name>Collections</name>.<name><name/></name></name>&lt;<name>String</name>&gt; <call><name>emptyList</name><argument_list>()</argument_list></call> : <name>dependencies</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Does this target depend on the named target?
     * @param other the other named target.
     * @return true if the target does depend on the named target
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>dependsOn</name><parameter_list>(<param><decl><type><name>String</name></type> <name>other</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Project</name></type> <name>p</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Target</name></argument>&gt;</argument_list></name></type> <name>t</name> =<init> <expr><name>p</name> == <name>null</name> ? <name>null</name> : <call><name><name>p</name>.<name>getTargets</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>p</name> != <name>null</name> &amp;&amp; <call><name><name>p</name>.<name>topoSort</name></name><argument_list>(<argument><expr><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call>.<call><name>contains</name><argument_list>(<argument><expr><call><name><name>t</name>.<name>get</name></name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the "if" condition to test on execution. This is the
     * name of a property to test for existence - if the property
     * is not set, the task will not execute. The property goes
     * through property substitution once before testing, so if
     * property &lt;code&gt;foo&lt;/code&gt; has value &lt;code&gt;bar&lt;/code&gt;, setting
     * the "if" condition to &lt;code&gt;${foo}_x&lt;/code&gt; will mean that the
     * task will only execute if property &lt;code&gt;bar_x&lt;/code&gt; is set.
     *
     * @param property The property condition to test on execution.
     *                 May be &lt;code&gt;null&lt;/code&gt;, in which case
     *                 no "if" test is performed.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setIf</name><parameter_list>(<param><decl><type><name>String</name></type> <name>property</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>ifString</name> = <name>property</name> == <name>null</name> ? "" : <name>property</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setIf</name><argument_list>(<argument><expr>new <call><name>IfStringCondition</name><argument_list>(<argument><expr><name>ifString</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the "if" property condition of this target.
     *
     * @return the "if" property condition or &lt;code&gt;null&lt;/code&gt; if no
     *         "if" condition had been defined.
     * @since 1.6.2
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getIf</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>"".<call><name>equals</name><argument_list>(<argument><expr><name>ifString</name></expr></argument>)</argument_list></call> ? <name>null</name> : <name>ifString</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Same as {@link #setIf(String)} but requires a {@link Condition} instance
     *
     * @since 1.9
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setIf</name><parameter_list>(<param><decl><type><name>Condition</name></type> <name>condition</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>ifCondition</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>ifCondition</name> = <name>condition</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <decl_stmt><decl><type><name>And</name></type> <name>andCondition</name> =<init> <expr>new <call><name>And</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>andCondition</name>.<name>setProject</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>andCondition</name>.<name>setLocation</name></name><argument_list>(<argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>andCondition</name>.<name>add</name></name><argument_list>(<argument><expr><name>ifCondition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>andCondition</name>.<name>add</name></name><argument_list>(<argument><expr><name>condition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ifCondition</name> = <name>andCondition</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the "unless" condition to test on execution. This is the
     * name of a property to test for existence - if the property
     * is set, the task will not execute. The property goes
     * through property substitution once before testing, so if
     * property &lt;code&gt;foo&lt;/code&gt; has value &lt;code&gt;bar&lt;/code&gt;, setting
     * the "unless" condition to &lt;code&gt;${foo}_x&lt;/code&gt; will mean that the
     * task will only execute if property &lt;code&gt;bar_x&lt;/code&gt; isn't set.
     *
     * @param property The property condition to test on execution.
     *                 May be &lt;code&gt;null&lt;/code&gt;, in which case
     *                 no "unless" test is performed.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUnless</name><parameter_list>(<param><decl><type><name>String</name></type> <name>property</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>unlessString</name> = <name>property</name> == <name>null</name> ? "" : <name>property</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setUnless</name><argument_list>(<argument><expr>new <call><name>UnlessStringCondition</name><argument_list>(<argument><expr><name>unlessString</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the "unless" property condition of this target.
     *
     * @return the "unless" property condition or &lt;code&gt;null&lt;/code&gt;
     *         if no "unless" condition had been defined.
     * @since 1.6.2
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getUnless</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>"".<call><name>equals</name><argument_list>(<argument><expr><name>unlessString</name></expr></argument>)</argument_list></call> ? <name>null</name> : <name>unlessString</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Same as {@link #setUnless(String)} but requires a {@link Condition} instance
     *
     * @since 1.9
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUnless</name><parameter_list>(<param><decl><type><name>Condition</name></type> <name>condition</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>unlessCondition</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>unlessCondition</name> = <name>condition</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <decl_stmt><decl><type><name>Or</name></type> <name>orCondition</name> =<init> <expr>new <call><name>Or</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>orCondition</name>.<name>setProject</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>orCondition</name>.<name>setLocation</name></name><argument_list>(<argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>orCondition</name>.<name>add</name></name><argument_list>(<argument><expr><name>unlessCondition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>orCondition</name>.<name>add</name></name><argument_list>(<argument><expr><name>condition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>unlessCondition</name> = <name>orCondition</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the description of this target.
     *
     * @param description The description for this target.
     *                    May be &lt;code&gt;null&lt;/code&gt;, indicating that no
     *                    description is available.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDescription</name><parameter_list>(<param><decl><type><name>String</name></type> <name>description</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>description</name></name> = <name>description</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the description of this target.
     *
     * @return the description of this target, or &lt;code&gt;null&lt;/code&gt; if no
     *         description is available.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getDescription</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>description</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the name of this target.
     *
     * @return the name of this target, or &lt;code&gt;null&lt;/code&gt; if the
     *         name has not been set yet.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>name</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Executes the target if the "if" and "unless" conditions are
     * satisfied. Dependency checking should be done before calling this
     * method, as it does no checking of its own. If either the "if"
     * or "unless" test prevents this target from being executed, a verbose
     * message is logged giving the reason. It is recommended that clients
     * of this class call performTasks rather than this method so that
     * appropriate build events are fired.
     *
     * @exception BuildException if any of the tasks fail or if a data type
     *                           configuration fails.
     *
     * @see #performTasks()
     * @see #setIf(String)
     * @see #setUnless(String)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>ifCondition</name> != <name>null</name> &amp;&amp; !<call><name><name>ifCondition</name>.<name>eval</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>project</name>.<name>log</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr>"Skipped because property '" + <call><name><name>project</name>.<name>replaceProperties</name></name><argument_list>(<argument><expr><name>ifString</name></expr></argument>)</argument_list></call>
                    + "' not set."</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>unlessCondition</name> != <name>null</name> &amp;&amp; <call><name><name>unlessCondition</name>.<name>eval</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>project</name>.<name>log</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr>"Skipped because property '"
                    + <call><name><name>project</name>.<name>replaceProperties</name></name><argument_list>(<argument><expr><name>unlessString</name></expr></argument>)</argument_list></call> + "' set."</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>LocalProperties</name></type> <name>localProperties</name> =<init> <expr><call><name><name>LocalProperties</name>.<name>get</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>localProperties</name>.<name>enterScope</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <comment type="line">// use index-based approach to avoid ConcurrentModificationExceptions;</comment>
            <comment type="line">// also account for growing target children</comment>
        	<comment type="line">// do not optimize this loop by replacing children.size() by a variable</comment>
        	<comment type="line">// as children can be added dynamically as in RhinoScriptTest where a target is adding work for itself</comment>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>children</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>Object</name></type> <name>o</name> =<init> <expr><call><name><name>children</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>o</name> <name>instanceof</name> <name>Task</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>Task</name></type> <name>task</name> =<init> <expr>(<name>Task</name>) <name>o</name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>task</name>.<name>perform</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr>((<name>RuntimeConfigurable</name>) <name>o</name>).<call><name>maybeConfigure</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></for>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>localProperties</name>.<name>exitScope</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <comment type="javadoc">/**
     * Performs the tasks within this target (if the conditions are met),
     * firing target started/target finished messages around a call to
     * execute.
     *
     * @see #execute()
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>performTasks</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>RuntimeException</name></type> <name>thrown</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>fireTargetStarted</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name>execute</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>RuntimeException</name></type> <name>exc</name></decl></param>) <block>{
            <expr_stmt><expr><name>thrown</name> = <name>exc</name></expr>;</expr_stmt>
            <throw>throw <expr><name>exc</name></expr>;</throw>
        }</block></catch> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>project</name>.<name>fireTargetFinished</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>thrown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <comment type="javadoc">/**
     * Replaces all occurrences of the given task in the list
     * of children with the replacement data type wrapper.
     *
     * @param el The task to replace.
     *           Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param o  The data type wrapper to replace &lt;code&gt;el&lt;/code&gt; with.
     */</comment>
    <function><type><name>void</name></type> <name>replaceChild</name><parameter_list>(<param><decl><type><name>Task</name></type> <name>el</name></decl></param>, <param><decl><type><name>RuntimeConfigurable</name></type> <name>o</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>
        <while>while <condition>(<expr>(<name>index</name> = <call><name><name>children</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call>) &gt;= 0</expr>)</condition> <block>{
            <expr_stmt><expr><call><name><name>children</name>.<name>set</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
    }</block></function>

    <comment type="javadoc">/**
     * Replaces all occurrences of the given task in the list
     * of children with the replacement task.
     *
     * @param el The task to replace.
     *           Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param o  The task to replace &lt;code&gt;el&lt;/code&gt; with.
     */</comment>
    <function><type><name>void</name></type> <name>replaceChild</name><parameter_list>(<param><decl><type><name>Task</name></type> <name>el</name></decl></param>, <param><decl><type><name>Task</name></type> <name>o</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>
        <while>while <condition>(<expr>(<name>index</name> = <call><name><name>children</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>el</name></expr></argument>)</argument_list></call>) &gt;= 0</expr>)</condition> <block>{
            <expr_stmt><expr><call><name><name>children</name>.<name>set</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
    }</block></function>

    <comment type="javadoc">/**
     * Condition evaluating the 'if' attribute with the PropertyHelper.
     */</comment>
    <class><specifier>private</specifier> class <name>IfStringCondition</name> <super><implements>implements <name>Condition</name></implements></super> <block>{

        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>condition</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>IfStringCondition</name><parameter_list>(<param><decl><type><name>String</name></type> <name>condition</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>condition</name></name> = <name>condition</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>eval</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
            <decl_stmt><decl><type><name>PropertyHelper</name></type> <name>propertyHelper</name> =<init> <expr><call><name><name>PropertyHelper</name>.<name>getPropertyHelper</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Object</name></type> <name>o</name> =<init> <expr><call><name><name>propertyHelper</name>.<name>parseProperties</name></name><argument_list>(<argument><expr><name>condition</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>propertyHelper</name>.<name>testIfCondition</name></name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

    }</block></class>

    <comment type="javadoc">/**
     * Condition evaluating the 'unless' attribute with the PropertyHelper.
     */</comment>
    <class><specifier>private</specifier> class <name>UnlessStringCondition</name> <super><implements>implements <name>Condition</name></implements></super> <block>{

        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>condition</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>UnlessStringCondition</name><parameter_list>(<param><decl><type><name>String</name></type> <name>condition</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>condition</name></name> = <name>condition</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>eval</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
            <decl_stmt><decl><type><name>PropertyHelper</name></type> <name>propertyHelper</name> =<init> <expr><call><name><name>PropertyHelper</name>.<name>getPropertyHelper</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Object</name></type> <name>o</name> =<init> <expr><call><name><name>propertyHelper</name>.<name>parseProperties</name></name><argument_list>(<argument><expr><name>condition</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr>!<call><name><name>propertyHelper</name>.<name>testUnlessCondition</name></name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

    }</block></class>
}</block></class>
</unit>
