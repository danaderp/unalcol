<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\Delete.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Arrays</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Comparator</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>DirectoryScanner</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>condition</name>.<name>Os</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>FileSet</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>PatternSet</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Resource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>ResourceCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>FileProvider</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>Sort</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>Restrict</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>Resources</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>FileResourceIterator</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>comparators</name>.<name>Reverse</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>comparators</name>.<name>FileSystem</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>comparators</name>.<name>ResourceComparator</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>selectors</name>.<name>Exists</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>selectors</name>.<name>ResourceSelector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>OrSelector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>AndSelector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>NotSelector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>DateSelector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>FileSelector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>NoneSelector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>SizeSelector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>DepthSelector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>DependSelector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>ExtendSelector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>SelectSelector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>PresentSelector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>ContainsSelector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>FilenameSelector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>MajoritySelector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>ContainsRegexpSelector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>modifiedselector</name>.<name>ModifiedSelector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>SymbolicLinkUtils</name></name>;</import>

<comment type="javadoc">/**
 * Deletes a file or directory, or set of files defined by a fileset.
 * The original delete task would delete a file, or a set of files
 * using the include/exclude syntax.  The deltree task would delete a
 * directory tree.  This task combines the functionality of these two
 * originally distinct tasks.
 * &lt;p&gt;Currently Delete extends MatchingTask.  This is intended &lt;i&gt;only&lt;/i&gt;
 * to provide backwards compatibility for a release.  The future position
 * is to use nested filesets exclusively.&lt;/p&gt;
 *
 * @since Ant 1.2
 *
 * @ant.task category="filesystem"
 */</comment>
<class><specifier>public</specifier> class <name>Delete</name> <super><extends>extends <name>MatchingTask</name></extends></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ResourceComparator</name></type> <name>REVERSE_FILESYSTEM</name> =<init> <expr>new <call><name>Reverse</name><argument_list>(<argument><expr>new <call><name>FileSystem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ResourceSelector</name></type> <name>EXISTS</name> =<init> <expr>new <call><name>Exists</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>ReverseDirs</name> <super><implements>implements <name>ResourceCollection</name></implements></super> <block>{
        <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name><name>Comparator</name><argument_list>&lt;<argument><name><name>Comparable</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>REVERSE</name> =<init> <expr>new <class><super><name><name>Comparator</name><argument_list>&lt;<argument><name><name>Comparable</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><type><specifier>public</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<param><decl><type><name><name>Comparable</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>foo</name></decl></param>, <param><decl><type><name><name>Comparable</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>bar</name></decl></param>)</parameter_list> <block>{
                <return>return <expr>((<name>Comparable</name>) <name>foo</name>).<call><name>compareTo</name><argument_list>(<argument><expr><name>bar</name></expr></argument>)</argument_list></call> * -1</expr>;</return>
            }</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>Project</name></type> <name>project</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>basedir</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name><index>[]</index></type> <name>dirs</name></decl>;</decl_stmt>
        <constructor><name>ReverseDirs</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>, <param><decl><type><name>File</name></type> <name>basedir</name></decl></param>, <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>dirs</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>project</name></name> = <name>project</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>basedir</name></name> = <name>basedir</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>dirs</name></name> = <name>dirs</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Arrays</name>.<name>sort</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>dirs</name></name></expr></argument>, <argument><expr><name>REVERSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>
        <function><type><specifier>public</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name>Resource</name></argument>&gt;</argument_list></name></type> <name>iterator</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr>new <call><name>FileResourceIterator</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr><name>basedir</name></expr></argument>, <argument><expr><name>dirs</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isFilesystemOnly</name><parameter_list>()</parameter_list> <block>{ <return>return <expr>true</expr>;</return> }</block></function>
        <function><type><specifier>public</specifier> <name>int</name></type> <name>size</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><name><name>dirs</name>.<name>length</name></name></expr>;</return> }</block></function>
    }</block></class>

    <comment type="line">// CheckStyle:VisibilityModifier OFF - bc</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>File</name></type> <name>file</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>File</name></type> <name>dir</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>FileSet</name></argument>&gt;</argument_list></name></type> <name>filesets</name> =<init> <expr>new <call><name><name>Vector</name><argument_list>&lt;<argument><name>FileSet</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>usedMatchingTask</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <comment type="line">// by default, remove matching empty dirs</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>includeEmpty</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <comment type="line">// CheckStyle:VisibilityModifier ON</comment>

    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>verbosity</name> =<init> <expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>quiet</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>failonerror</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>deleteOnExit</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>removeNotFollowedSymlinks</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Resources</name></type> <name>rcs</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>FileUtils</name></type> <name>FILE_UTILS</name> =<init> <expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>SymbolicLinkUtils</name></type> <name>SYMLINK_UTILS</name> =<init>
        <expr><call><name><name>SymbolicLinkUtils</name>.<name>getSymbolicLinkUtils</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>performGc</name> =<init> <expr><call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr>"windows"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Set the name of a single file to be removed.
     *
     * @param file the file to be deleted
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>file</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>file</name></name> = <name>file</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the directory from which files are to be deleted
     *
     * @param dir the directory path.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDir</name><parameter_list>(<param><decl><type><name>File</name></type> <name>dir</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>dir</name></name> = <name>dir</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>getImplicitFileSet</name><argument_list>()</argument_list></call>.<call><name>setDir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * If true, list all names of deleted files.
     *
     * @param verbose "true" or "on"
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setVerbose</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>verbose</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>verbose</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>verbosity</name></name> = <name><name>Project</name>.<name>MSG_INFO</name></name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name><name>this</name>.<name>verbosity</name></name> = <name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * If true and the file does not exist, do not display a diagnostic
     * message or modify the exit status to reflect an error.
     * This means that if a file or directory cannot be deleted,
     * then no error is reported. This setting emulates the
     * -f option to the Unix &amp;quot;rm&amp;quot; command.
     * Default is false meaning things are &amp;quot;noisy&amp;quot;
     * @param quiet "true" or "on"
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setQuiet</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>quiet</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>quiet</name></name> = <name>quiet</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>quiet</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>failonerror</name></name> = false</expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * If false, note errors but continue.
     *
     * @param failonerror true or false
     */</comment>
     <function><type><specifier>public</specifier> <name>void</name></type> <name>setFailOnError</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>failonerror</name></decl></param>)</parameter_list> <block>{
         <expr_stmt><expr><name><name>this</name>.<name>failonerror</name></name> = <name>failonerror</name></expr>;</expr_stmt>
     }</block></function>

    <comment type="javadoc">/**
     * If true, on failure to delete, note the error and set
     * the deleteonexit flag, and continue
     *
     * @param deleteOnExit true or false
     */</comment>
     <function><type><specifier>public</specifier> <name>void</name></type> <name>setDeleteOnExit</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>deleteOnExit</name></decl></param>)</parameter_list> <block>{
         <expr_stmt><expr><name><name>this</name>.<name>deleteOnExit</name></name> = <name>deleteOnExit</name></expr>;</expr_stmt>
     }</block></function>


    <comment type="javadoc">/**
     * If true, delete empty directories.
     * @param includeEmpty if true delete empty directories (only
     *                     for filesets). Default is false.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setIncludeEmptyDirs</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>includeEmpty</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>includeEmpty</name></name> = <name>includeEmpty</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Whether to perform a garbage collection before retrying a failed delete.
     *
     * &lt;p&gt;This may be required on Windows (where it is set to true by
     * default) but also on other operating systems, for example when
     * deleting directories from an NFS share.&lt;/p&gt;
     *
     * @since Ant 1.8.3
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPerformGcOnFailedDelete</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>performGc</name> = <name>b</name></expr>;</expr_stmt>
    }</block></function>

   <comment type="javadoc">/**
    * Adds a set of files to be deleted.
    * @param set the set of files to be deleted
    */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addFileset</name><parameter_list>(<param><decl><type><name>FileSet</name></type> <name>set</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>filesets</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add an arbitrary ResourceCollection to be deleted.
     * @param rc the filesystem-only ResourceCollection.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>ResourceCollection</name></type> <name>rc</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>rc</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>rcs</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>rcs</name> = new <call><name>Resources</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>rcs</name>.<name>setCache</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>rcs</name>.<name>add</name></name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * add a name entry on the include list
     * @return a NameEntry object to be configured
     */</comment>
    <function><type><specifier>public</specifier> <name><name>PatternSet</name>.<name>NameEntry</name></name></type> <name>createInclude</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>usedMatchingTask</name> = true</expr>;</expr_stmt>
        <return>return <expr><call><name><name>super</name>.<name>createInclude</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * add a name entry on the include files list
     * @return an NameEntry object to be configured
     */</comment>
    <function><type><specifier>public</specifier> <name><name>PatternSet</name>.<name>NameEntry</name></name></type> <name>createIncludesFile</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>usedMatchingTask</name> = true</expr>;</expr_stmt>
        <return>return <expr><call><name><name>super</name>.<name>createIncludesFile</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * add a name entry on the exclude list
     * @return an NameEntry object to be configured
     */</comment>
    <function><type><specifier>public</specifier> <name><name>PatternSet</name>.<name>NameEntry</name></name></type> <name>createExclude</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>usedMatchingTask</name> = true</expr>;</expr_stmt>
        <return>return <expr><call><name><name>super</name>.<name>createExclude</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * add a name entry on the include files list
     * @return an NameEntry object to be configured
     */</comment>
    <function><type><specifier>public</specifier> <name><name>PatternSet</name>.<name>NameEntry</name></name></type> <name>createExcludesFile</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>usedMatchingTask</name> = true</expr>;</expr_stmt>
        <return>return <expr><call><name><name>super</name>.<name>createExcludesFile</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * add a set of patterns
     * @return PatternSet object to be configured
     */</comment>
    <function><type><specifier>public</specifier> <name>PatternSet</name></type> <name>createPatternSet</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>usedMatchingTask</name> = true</expr>;</expr_stmt>
        <return>return <expr><call><name><name>super</name>.<name>createPatternSet</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the set of include patterns. Patterns may be separated by a comma
     * or a space.
     *
     * @param includes the string containing the include patterns
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setIncludes</name><parameter_list>(<param><decl><type><name>String</name></type> <name>includes</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>usedMatchingTask</name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name>.<name>setIncludes</name></name><argument_list>(<argument><expr><name>includes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the set of exclude patterns. Patterns may be separated by a comma
     * or a space.
     *
     * @param excludes the string containing the exclude patterns
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setExcludes</name><parameter_list>(<param><decl><type><name>String</name></type> <name>excludes</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>usedMatchingTask</name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name>.<name>setExcludes</name></name><argument_list>(<argument><expr><name>excludes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets whether default exclusions should be used or not.
     *
     * @param useDefaultExcludes "true"|"on"|"yes" when default exclusions
     *                           should be used, "false"|"off"|"no" when they
     *                           shouldn't be used.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDefaultexcludes</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>useDefaultExcludes</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>usedMatchingTask</name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name>.<name>setDefaultexcludes</name></name><argument_list>(<argument><expr><name>useDefaultExcludes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the name of the file containing the includes patterns.
     *
     * @param includesfile A string containing the filename to fetch
     * the include patterns from.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setIncludesfile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>includesfile</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>usedMatchingTask</name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name>.<name>setIncludesfile</name></name><argument_list>(<argument><expr><name>includesfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the name of the file containing the includes patterns.
     *
     * @param excludesfile A string containing the filename to fetch
     * the include patterns from.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setExcludesfile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>excludesfile</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>usedMatchingTask</name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name>.<name>setExcludesfile</name></name><argument_list>(<argument><expr><name>excludesfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets case sensitivity of the file system
     *
     * @param isCaseSensitive "true"|"on"|"yes" if file system is case
     *                           sensitive, "false"|"off"|"no" when not.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCaseSensitive</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>isCaseSensitive</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>usedMatchingTask</name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name>.<name>setCaseSensitive</name></name><argument_list>(<argument><expr><name>isCaseSensitive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets whether or not symbolic links should be followed.
     *
     * @param followSymlinks whether or not symbolic links should be followed
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFollowSymlinks</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>followSymlinks</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>usedMatchingTask</name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name>.<name>setFollowSymlinks</name></name><argument_list>(<argument><expr><name>followSymlinks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets whether the symbolic links that have not been followed
     * shall be removed (the links, not the locations they point at).
     *
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRemoveNotFollowedSymlinks</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>removeNotFollowedSymlinks</name> = <name>b</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * add a "Select" selector entry on the selector list
     * @param selector the selector to be added
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addSelector</name><parameter_list>(<param><decl><type><name>SelectSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>usedMatchingTask</name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name>.<name>addSelector</name></name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * add an "And" selector entry on the selector list
     * @param selector the selector to be added
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addAnd</name><parameter_list>(<param><decl><type><name>AndSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>usedMatchingTask</name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name>.<name>addAnd</name></name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * add an "Or" selector entry on the selector list
     * @param selector the selector to be added
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addOr</name><parameter_list>(<param><decl><type><name>OrSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>usedMatchingTask</name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name>.<name>addOr</name></name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * add a "Not" selector entry on the selector list
     * @param selector the selector to be added
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addNot</name><parameter_list>(<param><decl><type><name>NotSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>usedMatchingTask</name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name>.<name>addNot</name></name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * add a "None" selector entry on the selector list
     * @param selector the selector to be added
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addNone</name><parameter_list>(<param><decl><type><name>NoneSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>usedMatchingTask</name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name>.<name>addNone</name></name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * add a majority selector entry on the selector list
     * @param selector the selector to be added
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addMajority</name><parameter_list>(<param><decl><type><name>MajoritySelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>usedMatchingTask</name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name>.<name>addMajority</name></name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * add a selector date entry on the selector list
     * @param selector the selector to be added
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addDate</name><parameter_list>(<param><decl><type><name>DateSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>usedMatchingTask</name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name>.<name>addDate</name></name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * add a selector size entry on the selector list
     * @param selector the selector to be added
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addSize</name><parameter_list>(<param><decl><type><name>SizeSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>usedMatchingTask</name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name>.<name>addSize</name></name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * add a selector filename entry on the selector list
     * @param selector the selector to be added
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addFilename</name><parameter_list>(<param><decl><type><name>FilenameSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>usedMatchingTask</name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name>.<name>addFilename</name></name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * add an extended selector entry on the selector list
     * @param selector the selector to be added
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addCustom</name><parameter_list>(<param><decl><type><name>ExtendSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>usedMatchingTask</name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name>.<name>addCustom</name></name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * add a contains selector entry on the selector list
     * @param selector the selector to be added
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addContains</name><parameter_list>(<param><decl><type><name>ContainsSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>usedMatchingTask</name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name>.<name>addContains</name></name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * add a present selector entry on the selector list
     * @param selector the selector to be added
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addPresent</name><parameter_list>(<param><decl><type><name>PresentSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>usedMatchingTask</name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name>.<name>addPresent</name></name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * add a depth selector entry on the selector list
     * @param selector the selector to be added
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addDepth</name><parameter_list>(<param><decl><type><name>DepthSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>usedMatchingTask</name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name>.<name>addDepth</name></name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * add a depends selector entry on the selector list
     * @param selector the selector to be added
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addDepend</name><parameter_list>(<param><decl><type><name>DependSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>usedMatchingTask</name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name>.<name>addDepend</name></name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * add a regular expression selector entry on the selector list
     * @param selector the selector to be added
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addContainsRegexp</name><parameter_list>(<param><decl><type><name>ContainsRegexpSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>usedMatchingTask</name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name>.<name>addContainsRegexp</name></name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * add the modified selector
     * @param selector the selector to add
     * @since ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addModified</name><parameter_list>(<param><decl><type><name>ModifiedSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>usedMatchingTask</name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name>.<name>addModified</name></name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * add an arbitrary selector
     * @param selector the selector to be added
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>FileSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>usedMatchingTask</name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name>.<name>add</name></name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Delete the file(s).
     * @exception BuildException if an error occurs
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>usedMatchingTask</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"DEPRECATED - Use of the implicit FileSet is deprecated.  "
                + "Use a nested fileset element instead."</expr></argument>, <argument><expr><name>quiet</name> ? <name><name>Project</name>.<name>MSG_VERBOSE</name></name> : <name>verbosity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>file</name> == <name>null</name> &amp;&amp; <name>dir</name> == <name>null</name> &amp;&amp; <call><name><name>filesets</name>.<name>size</name></name><argument_list>()</argument_list></call> == 0 &amp;&amp; <name>rcs</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"At least one of the file or dir "
                                     + "attributes, or a nested resource collection, "
                                     + "must be set."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr><name>quiet</name> &amp;&amp; <name>failonerror</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"quiet and failonerror cannot both be "
                                     + "set to true"</expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <comment type="line">// delete the single file</comment>
        <if>if <condition>(<expr><name>file</name> != <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name><name>file</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><call><name><name>file</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Directory " + <call><name><name>file</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call>
                        + " cannot be removed using the file attribute.  "
                        + "Use dir instead."</expr></argument>, <argument><expr><name>quiet</name> ? <name><name>Project</name>.<name>MSG_VERBOSE</name></name> : <name>verbosity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Deleting: " + <call><name><name>file</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if>if <condition>(<expr>!<call><name>delete</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>handle</name><argument_list>(<argument><expr>"Unable to delete file " + <call><name><name>file</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></else></if>
            }</block></then> <else>else <if>if <condition>(<expr><call><name>isDanglingSymlink</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Trying to delete file " + <call><name><name>file</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call>
                    + " which looks like a broken symlink."</expr></argument>,
                    <argument><expr><name>quiet</name> ? <name><name>Project</name>.<name>MSG_VERBOSE</name></name> : <name>verbosity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<call><name>delete</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>handle</name><argument_list>(<argument><expr>"Unable to delete file " + <call><name><name>file</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Could not find file " + <call><name><name>file</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call>
                    + " to delete."</expr></argument>, <argument><expr><name>quiet</name> ? <name><name>Project</name>.<name>MSG_VERBOSE</name></name> : <name>verbosity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if></else></if>
        }</block></then></if>

        <comment type="line">// delete the directory</comment>
        <if>if <condition>(<expr><name>dir</name> != <name>null</name> &amp;&amp; !<name>usedMatchingTask</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name><name>dir</name>.<name>exists</name></name><argument_list>()</argument_list></call> &amp;&amp; <call><name><name>dir</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <comment type="block">/*
                  If verbosity is MSG_VERBOSE, that mean we are doing
                  regular logging (backwards as that sounds).  In that
                  case, we want to print one message about deleting the
                  top of the directory tree.  Otherwise, the removeDir
                  method will handle messages for _all_ directories.
                */</comment>
                <if>if <condition>(<expr><name>verbosity</name> == <name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Deleting directory " + <call><name><name>dir</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><call><name>removeDir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><call><name>isDanglingSymlink</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Trying to delete directory " + <call><name><name>dir</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call>
                    + " which looks like a broken symlink."</expr></argument>,
                    <argument><expr><name>quiet</name> ? <name><name>Project</name>.<name>MSG_VERBOSE</name></name> : <name>verbosity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<call><name>delete</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>handle</name><argument_list>(<argument><expr>"Unable to delete directory "
                           + <call><name><name>dir</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if></else></if>
        }</block></then></if>
        <decl_stmt><decl><type><name>Resources</name></type> <name>resourcesToDelete</name> =<init> <expr>new <call><name>Resources</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>resourcesToDelete</name>.<name>setProject</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>resourcesToDelete</name>.<name>setCache</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Resources</name></type> <name>filesetDirs</name> =<init> <expr>new <call><name>Resources</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>filesetDirs</name>.<name>setProject</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>filesetDirs</name>.<name>setCache</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>FileSet</name></type> <name>implicit</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>usedMatchingTask</name> &amp;&amp; <name>dir</name> != <name>null</name> &amp;&amp; <call><name><name>dir</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">//add the files from the default fileset:</comment>
            <expr_stmt><expr><name>implicit</name> = <call><name>getImplicitFileSet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>implicit</name>.<name>setProject</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>filesets</name>.<name>add</name></name><argument_list>(<argument><expr><name>implicit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>size</name> =<init> <expr><call><name><name>filesets</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>size</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>FileSet</name></type> <name>fs</name> =<init> <expr>(<name>FileSet</name>) <call><name><name>filesets</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>fs</name>.<name>getProject</name></name><argument_list>()</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Deleting fileset with no project specified;"
                    + " assuming executing project"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>fs</name> = (<name>FileSet</name>) <call><name><name>fs</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>fs</name>.<name>setProject</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <decl_stmt><decl><type><specifier>final</specifier> <name>File</name></type> <name>fsDir</name> =<init> <expr><call><name><name>fs</name>.<name>getDir</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<call><name><name>fs</name>.<name>getErrorOnMissingDir</name></name><argument_list>()</argument_list></call> &amp;&amp;
                (<name>fsDir</name> == <name>null</name> || !<call><name><name>fsDir</name>.<name>exists</name></name><argument_list>()</argument_list></call>)</expr>)</condition><then> <block>{
                <continue>continue;</continue>
            }</block></then></if>
            <if>if <condition>(<expr><name>fsDir</name> == <name>null</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                        <argument><expr>"File or Resource without directory or file specified"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then> <else>else <if>if <condition>(<expr>!<call><name><name>fsDir</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>handle</name><argument_list>(<argument><expr>"Directory does not exist: " + <name>fsDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <decl_stmt><decl><type><name>DirectoryScanner</name></type> <name>ds</name> =<init> <expr><call><name><name>fs</name>.<name>getDirectoryScanner</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <comment type="line">// the previous line has already scanned the</comment>
                <comment type="line">// filesystem, in order to avoid a rescan when later</comment>
                <comment type="line">// iterating, capture the results now and store them</comment>
                <decl_stmt><decl><type><specifier>final</specifier> <name>String</name><index>[]</index></type> <name>files</name> =<init> <expr><call><name><name>ds</name>.<name>getIncludedFiles</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>resourcesToDelete</name>.<name>add</name></name><argument_list>(<argument><expr>new <class><super><name>ResourceCollection</name></super><argument_list>()</argument_list> <block>{
                        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isFilesystemOnly</name><parameter_list>()</parameter_list> <block>{
                            <return>return <expr>true</expr>;</return>
                        }</block></function>
                        <function><type><specifier>public</specifier> <name>int</name></type> <name>size</name><parameter_list>()</parameter_list> <block>{
                            <return>return <expr><name><name>files</name>.<name>length</name></name></expr>;</return>
                        }</block></function>
                        <function><type><specifier>public</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name>Resource</name></argument>&gt;</argument_list></name></type> <name>iterator</name><parameter_list>()</parameter_list> <block>{
                            <return>return <expr>new <call><name>FileResourceIterator</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>,
                                                            <argument><expr><name>fsDir</name></expr></argument>, <argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</return>
                        }</block></function>
                    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>includeEmpty</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>filesetDirs</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>ReverseDirs</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>fsDir</name></expr></argument>,
                                                    <argument><expr><call><name><name>ds</name>
                                                    .<name>getIncludedDirectories</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <if>if <condition>(<expr><name>removeNotFollowedSymlinks</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>n</name> =<init> <expr><call><name><name>ds</name>.<name>getNotFollowedSymlinks</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name><name>n</name>.<name>length</name></name> &gt; 0</expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>links</name> =<init> <expr>new <name><name>String</name><index>[<expr><name><name>n</name>.<name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>links</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>n</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>Arrays</name>.<name>sort</name></name><argument_list>(<argument><expr><name>links</name></expr></argument>, <argument><expr><name><name>ReverseDirs</name>.<name>REVERSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <for>for (<init><decl><type><name>int</name></type> <name>l</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>l</name> &lt; <name><name>links</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>l</name>++</expr></incr>) <block>{
                            <try>try <block>{
                                <expr_stmt><expr><call><name><name>SYMLINK_UTILS</name>
                                    .<name>deleteSymbolicLink</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><name><name>links</name><index>[<expr><name>l</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
                                                        <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block> <catch>catch (<param><decl><type><name><name>java</name>.<name>io</name>.<name>IOException</name></name></type> <name>ex</name></decl></param>) <block>{
                                <expr_stmt><expr><call><name>handle</name><argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></catch></try>
                        }</block></for>
                    }</block></then></if>
                }</block></then></if>
            }</block></else></if></else></if>
        }</block></for>
        <expr_stmt><expr><call><name><name>resourcesToDelete</name>.<name>add</name></name><argument_list>(<argument><expr><name>filesetDirs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>rcs</name> != <name>null</name></expr>)</condition><then> <block>{
            <comment type="line">// sort first to files, then dirs</comment>
            <decl_stmt><decl><type><name>Restrict</name></type> <name>exists</name> =<init> <expr>new <call><name>Restrict</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>exists</name>.<name>add</name></name><argument_list>(<argument><expr><name>EXISTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>exists</name>.<name>add</name></name><argument_list>(<argument><expr><name>rcs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Sort</name></type> <name>s</name> =<init> <expr>new <call><name>Sort</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>s</name>.<name>add</name></name><argument_list>(<argument><expr><name>REVERSE_FILESYSTEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>s</name>.<name>add</name></name><argument_list>(<argument><expr><name>exists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>resourcesToDelete</name>.<name>add</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <try>try <block>{
            <if>if <condition>(<expr><call><name><name>resourcesToDelete</name>.<name>isFilesystemOnly</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <for>for (<init><decl><type><name>Resource</name></type> <name>r</name> :<range> <expr><name>resourcesToDelete</name></expr></range></decl></init>) <block>{
                    <comment type="line">// nonexistent resources could only occur if we already</comment>
                    <comment type="line">// deleted something from a fileset:</comment>
                    <decl_stmt><decl><type><name>File</name></type> <name>f</name> =<init> <expr><call><name><name>r</name>.<name>as</name></name><argument_list>(<argument><expr><name><name>FileProvider</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call>
                              .<call><name>getFile</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr>!<call><name><name>f</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                        <continue>continue;</continue>
                    }</block></then></if>
                    <if>if <condition>(<expr>!(<call><name><name>f</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call>) || <call><name><name>f</name>.<name>list</name></name><argument_list>()</argument_list></call>.<name>length</name> == 0</expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Deleting " + <name>f</name></expr></argument>, <argument><expr><name>verbosity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr>!<call><name>delete</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> &amp;&amp; <name>failonerror</name></expr>)</condition><then> <block>{
                            <expr_stmt><expr><call><name>handle</name><argument_list>(<argument><expr>"Unable to delete "
                                + (<call><name><name>f</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call> ? "directory " : "file ") + <name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                    }</block></then></if>
                }</block></for>
            }</block></then> <else>else <block>{
                 <expr_stmt><expr><call><name>handle</name><argument_list>(<argument><expr><call><name>getTaskName</name><argument_list>()</argument_list></call> + " handles only filesystem resources"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>handle</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch> <finally>finally <block>{
            <if>if <condition>(<expr><name>implicit</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>filesets</name>.<name>remove</name></name><argument_list>(<argument><expr><name>implicit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></finally></try>
    }</block></function>

<comment type="line">//************************************************************************</comment>
<comment type="line">//  protected and private methods</comment>
<comment type="line">//************************************************************************</comment>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>handle</name><parameter_list>(<param><decl><type><name>String</name></type> <name>msg</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>handle</name><argument_list>(<argument><expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>handle</name><parameter_list>(<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>failonerror</name></expr>)</condition><then> <block>{
            <throw>throw <expr>(<name>e</name> <name>instanceof</name> <name>BuildException</name>)
                ? (<name>BuildException</name>) <name>e</name> : new <call><name>BuildException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>quiet</name> ? <name><name>Project</name>.<name>MSG_VERBOSE</name></name> : <name>verbosity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Accommodate Windows bug encountered in both Sun and IBM JDKs.
     * Others possible. If the delete does not work, call System.gc(),
     * wait a little and try again.
     */</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>delete</name><parameter_list>(<param><decl><type><name>File</name></type> <name>f</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr>!<call><name><name>FILE_UTILS</name>.<name>tryHardToDelete</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>performGc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>deleteOnExit</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>level</name> =<init> <expr><name>quiet</name> ? <name><name>Project</name>.<name>MSG_VERBOSE</name></name> : <name><name>Project</name>.<name>MSG_INFO</name></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Failed to delete " + <name>f</name> + ", calling deleteOnExit."
                    + " This attempts to delete the file when the Ant jvm"
                    + " has exited and might not succeed."</expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>f</name>.<name>deleteOnExit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <return>return <expr>true</expr>;</return>
            }</block></then></if>
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Delete a directory
     *
     * @param d the directory to delete
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>removeDir</name><parameter_list>(<param><decl><type><name>File</name></type> <name>d</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>list</name> =<init> <expr><call><name><name>d</name>.<name>list</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>list</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>list</name> = new <name><name>String</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
        }</block></then></if>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>list</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>s</name> =<init> <expr><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>File</name></type> <name>f</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>f</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>removeDir</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Deleting " + <call><name><name>f</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>quiet</name> ? <name><name>Project</name>.<name>MSG_VERBOSE</name></name> : <name>verbosity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<call><name>delete</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>handle</name><argument_list>(<argument><expr>"Unable to delete file " + <call><name><name>f</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></else></if>
        }</block></for>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Deleting directory " + <call><name><name>d</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>verbosity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name>delete</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>handle</name><argument_list>(<argument><expr>"Unable to delete directory " + <call><name><name>d</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * remove an array of files in a directory, and a list of subdirectories
     * which will only be deleted if 'includeEmpty' is true
     * @param d directory to work from
     * @param files array of files to delete; can be of zero length
     * @param dirs array of directories to delete; can of zero length
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>removeFiles</name><parameter_list>(<param><decl><type><name>File</name></type> <name>d</name></decl></param>, <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>files</name></decl></param>, <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>dirs</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>files</name>.<name>length</name></name> &gt; 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Deleting " + <name><name>files</name>.<name>length</name></name> + " files from "
                + <call><name><name>d</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>quiet</name> ? <name><name>Project</name>.<name>MSG_VERBOSE</name></name> : <name>verbosity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>j</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>j</name> &lt; <name><name>files</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>File</name></type> <name>f</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>files</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Deleting " + <call><name><name>f</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>,
                        <argument><expr><name>quiet</name> ? <name><name>Project</name>.<name>MSG_VERBOSE</name></name> : <name>verbosity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<call><name>delete</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>handle</name><argument_list>(<argument><expr>"Unable to delete file " + <call><name><name>f</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
        }</block></then></if>

        <if>if <condition>(<expr><name><name>dirs</name>.<name>length</name></name> &gt; 0 &amp;&amp; <name>includeEmpty</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>dirCount</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>j</name> =<init> <expr><name><name>dirs</name>.<name>length</name></name> - 1</expr></init></decl>;</init> <condition><expr><name>j</name> &gt;= 0</expr>;</condition> <incr><expr><name>j</name>--</expr></incr>) <block>{
                <decl_stmt><decl><type><name>File</name></type> <name>currDir</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>dirs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>dirFiles</name> =<init> <expr><call><name><name>currDir</name>.<name>list</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>dirFiles</name> == <name>null</name> || <name><name>dirFiles</name>.<name>length</name></name> == 0</expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Deleting " + <call><name><name>currDir</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>,
                            <argument><expr><name>quiet</name> ? <name><name>Project</name>.<name>MSG_VERBOSE</name></name> : <name>verbosity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr>!<call><name>delete</name><argument_list>(<argument><expr><name>currDir</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>handle</name><argument_list>(<argument><expr>"Unable to delete directory "
                                + <call><name><name>currDir</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <expr_stmt><expr><name>dirCount</name>++</expr>;</expr_stmt>
                    }</block></else></if>
                }</block></then></if>
            }</block></for>

            <if>if <condition>(<expr><name>dirCount</name> &gt; 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Deleted "
                     + <name>dirCount</name>
                     + " director" + (<name>dirCount</name> == 1 ? "y" : "ies")
                     + " form " + <call><name><name>d</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>,
                     <argument><expr><name>quiet</name> ? <name><name>Project</name>.<name>MSG_VERBOSE</name></name> : <name>verbosity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>isDanglingSymlink</name><parameter_list>(<param><decl><type><name>File</name></type> <name>f</name></decl></param>)</parameter_list> <block>{
        <try>try <block>{
            <return>return <expr><call><name><name>SYMLINK_UTILS</name>.<name>isDanglingSymbolicLink</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block> <catch>catch (<param><decl><type><name><name>java</name>.<name>io</name>.<name>IOException</name></name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Error while trying to detect " + <call><name><name>f</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call>
                + " as broken symbolic link. " + <call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><name>quiet</name> ? <name><name>Project</name>.<name>MSG_VERBOSE</name></name> : <name>verbosity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>false</expr>;</return>
        }</block></catch></try>
    }</block></function>
}</block></class>
</unit>
