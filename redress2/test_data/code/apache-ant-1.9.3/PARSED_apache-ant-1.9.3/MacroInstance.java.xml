<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\MacroInstance.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Locale</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name>.<name>Entry</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Set</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashSet</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Hashtable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>DynamicAttribute</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>ProjectHelper</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>RuntimeConfigurable</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Target</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>TaskContainer</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>UnknownElement</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>property</name>.<name>LocalProperties</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>MacroDef</name>.<name>Attribute</name></name>;</import>

<comment type="javadoc">/**
 * The class to be placed in the ant type definition.
 * It is given a pointer to the template definition,
 * and makes a copy of the unknown element, substituting
 * the parameter values in attributes and text.
 * @since Ant 1.6
 */</comment>
<class><specifier>public</specifier> class <name>MacroInstance</name> <super><extends>extends <name>Task</name></extends> <implements>implements <name>DynamicAttribute</name>, <name>TaskContainer</name></implements></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>MacroDef</name></type> <name>macroDef</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type>      <name>map</name> =<init> <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>MacroDef</name>.<name>TemplateElement</name></name></argument>&gt;</argument_list></name></type>      <name>nsElements</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>UnknownElement</name></argument>&gt;</argument_list></name></type>      <name>presentElements</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>localAttributes</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type>    <name>text</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type>    <name>implicitTag</name> =<init>     <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>List</name><argument_list>&lt;<argument><name>Task</name></argument>&gt;</argument_list></name></type>      <name>unknownElements</name> =<init> <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>Task</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Called from MacroDef.MyAntTypeDefinition#create()
     *
     * @param macroDef a &lt;code&gt;MacroDef&lt;/code&gt; value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMacroDef</name><parameter_list>(<param><decl><type><name>MacroDef</name></type> <name>macroDef</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>macroDef</name></name> = <name>macroDef</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * @return the macro definition object for this macro instance.
     */</comment>
    <function><type><specifier>public</specifier> <name>MacroDef</name></type> <name>getMacroDef</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>macroDef</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * A parameter name value pair as a xml attribute.
     *
     * @param name the name of the attribute
     * @param value the value of the attribute
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDynamicAttribute</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>, <param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>map</name>.<name>put</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Method present for BC purposes.
     * @param name not used
     * @return nothing
     * @deprecated since 1.6.x.
     * @throws BuildException always
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>createDynamicElement</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Not implemented any more"</expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>

    <function><type><specifier>private</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>MacroDef</name>.<name>TemplateElement</name></name></argument>&gt;</argument_list></name></type> <name>getNsElements</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>nsElements</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>nsElements</name> = new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>MacroDef</name>.<name>TemplateElement</name></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <for>for (<init><decl><type><name><name>Entry</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>MacroDef</name>.<name>TemplateElement</name></name></argument>&gt;</argument_list></name></type> <name>entry</name> :<range> <expr><call><name><name>macroDef</name>.<name>getElements</name></name><argument_list>()</argument_list></call>.<call><name>entrySet</name><argument_list>()</argument_list></call></expr></range></decl></init>) <block>{
            <expr_stmt><expr><call><name><name>nsElements</name>.<name>put</name></name><argument_list>(<argument><expr>(<name>String</name>) <call><name><name>entry</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>,
                           <argument><expr><call><name><name>entry</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>MacroDef</name>.<name>TemplateElement</name></name></type> <name>te</name> =<init> <expr>(<name><name>MacroDef</name>.<name>TemplateElement</name></name>)
                <call><name><name>entry</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>te</name>.<name>isImplicit</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>implicitTag</name> = <call><name><name>te</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
         }</block></for>
        }</block></then></if>
        <return>return <expr><name>nsElements</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Add a unknownElement for the macro instances nested elements.
     *
     * @param nestedTask a nested element.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addTask</name><parameter_list>(<param><decl><type><name>Task</name></type> <name>nestedTask</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>unknownElements</name>.<name>add</name></name><argument_list>(<argument><expr><name>nestedTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>processTasks</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>implicitTag</name> != <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <for>for (<init><decl><type><name><name>Iterator</name><argument_list>&lt;<argument><name>Task</name></argument>&gt;</argument_list></name></type> <name>i</name> =<init> <expr><call><name><name>unknownElements</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>i</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
            <decl_stmt><decl><type><name>UnknownElement</name></type> <name>ue</name> =<init> <expr>(<name>UnknownElement</name>) <call><name><name>i</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>name</name> =<init> <expr><call><name><name>ProjectHelper</name>.<name>extractNameFromComponentName</name></name><argument_list>(
                <argument><expr><call><name><name>ue</name>.<name>getTag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>toLowerCase</name><argument_list>(<argument><expr><name><name>Locale</name>.<name>ENGLISH</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name>getNsElements</name><argument_list>()</argument_list></call>.<call><name>get</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"unsupported element " + <name>name</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <if>if <condition>(<expr><call><name><name>presentElements</name>.<name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Element " + <name>name</name> + " already present"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>presentElements</name>.<name>put</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>ue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Embedded element in macro instance
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Element</name> <super><implements>implements <name>TaskContainer</name></implements></super> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name><name>List</name><argument_list>&lt;<argument><name>Task</name></argument>&gt;</argument_list></name></type> <name>unknownElements</name> =<init> <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>Task</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * Add an unknown element (to be snipped into the macroDef instance)
         *
         * @param nestedTask an unknown element
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>addTask</name><parameter_list>(<param><decl><type><name>Task</name></type> <name>nestedTask</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>unknownElements</name>.<name>add</name></name><argument_list>(<argument><expr><name>nestedTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * @return the list of unknown elements
         */</comment>
        <function><type><specifier>public</specifier> <name><name>List</name><argument_list>&lt;<argument><name>Task</name></argument>&gt;</argument_list></name></type> <name>getUnknownElements</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>unknownElements</name></expr>;</return>
        }</block></function>
    }</block></class>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>STATE_NORMAL</name>         =<init> <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>STATE_EXPECT_BRACKET</name> =<init> <expr>1</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>STATE_EXPECT_NAME</name>    =<init> <expr>2</expr></init></decl>;</decl_stmt>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>macroSubs</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s</name></decl></param>, <param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>macroMapping</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>s</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>ret</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>macroName</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>state</name> =<init> <expr><name>STATE_NORMAL</name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>s</name>.<name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
            <decl_stmt><decl><type><name>char</name></type> <name>ch</name> =<init> <expr><call><name><name>s</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <switch>switch <condition>(<expr><name>state</name></expr>)</condition> <block>{
                <case>case <expr><name>STATE_NORMAL</name></expr>:
                    <if>if <condition>(<expr><name>ch</name> == '@'</expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>state</name> = <name>STATE_EXPECT_BRACKET</name></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name><name>ret</name>.<name>append</name></name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                    <break>break;</break>
                </case><case>case <expr><name>STATE_EXPECT_BRACKET</name></expr>:
                    <if>if <condition>(<expr><name>ch</name> == '{'</expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>state</name> = <name>STATE_EXPECT_NAME</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>macroName</name> = new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else>else <if>if <condition>(<expr><name>ch</name> == '@'</expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>state</name> = <name>STATE_NORMAL</name></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>ret</name>.<name>append</name></name><argument_list>(<argument><expr>'@'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <expr_stmt><expr><name>state</name> = <name>STATE_NORMAL</name></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>ret</name>.<name>append</name></name><argument_list>(<argument><expr>'@'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>ret</name>.<name>append</name></name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if></else></if>
                    <break>break;</break>
                </case><case>case <expr><name>STATE_EXPECT_NAME</name></expr>:
                    <if>if <condition>(<expr><name>ch</name> == '}'</expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>state</name> = <name>STATE_NORMAL</name></expr>;</expr_stmt>
                        <decl_stmt><decl><type><name>String</name></type> <name>name</name> =<init> <expr><call><name><name>macroName</name>.<name>toString</name></name><argument_list>()</argument_list></call>.<call><name>toLowerCase</name><argument_list>(<argument><expr><name><name>Locale</name>.<name>ENGLISH</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>String</name></type> <name>value</name> =<init> <expr>(<name>String</name>) <call><name><name>macroMapping</name>.<name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if>if <condition>(<expr><name>value</name> == <name>null</name></expr>)</condition><then> <block>{
                            <expr_stmt><expr><call><name><name>ret</name>.<name>append</name></name><argument_list>(<argument><expr>"@{"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>ret</name>.<name>append</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>ret</name>.<name>append</name></name><argument_list>(<argument><expr>"}"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then> <else>else <block>{
                            <expr_stmt><expr><call><name><name>ret</name>.<name>append</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></else></if>
                        <expr_stmt><expr><name>macroName</name> = <name>null</name></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name><name>macroName</name>.<name>append</name></name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                    <break>break;</break>
                </case><default>default:
                    <break>break;</break>
            </default>}</block></switch>
        }</block></for>
        <switch>switch <condition>(<expr><name>state</name></expr>)</condition> <block>{
            <case>case <expr><name>STATE_NORMAL</name></expr>:
                <break>break;</break>
            </case><case>case <expr><name>STATE_EXPECT_BRACKET</name></expr>:
                <expr_stmt><expr><call><name><name>ret</name>.<name>append</name></name><argument_list>(<argument><expr>'@'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr><name>STATE_EXPECT_NAME</name></expr>:
                <expr_stmt><expr><call><name><name>ret</name>.<name>append</name></name><argument_list>(<argument><expr>"@{"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ret</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>macroName</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><default>default:
                <break>break;</break>
        </default>}</block></switch>

        <return>return <expr><call><name><name>ret</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the text contents for the macro.
     * @param text the text to be added to the macro.
     */</comment>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addText</name><parameter_list>(<param><decl><type><name>String</name></type> <name>text</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>text</name></name> = <name>text</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>UnknownElement</name></type> <name>copy</name><parameter_list>(<param><decl><type><name>UnknownElement</name></type> <name>ue</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>nested</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>UnknownElement</name></type> <name>ret</name> =<init> <expr>new <call><name>UnknownElement</name><argument_list>(<argument><expr><call><name><name>ue</name>.<name>getTag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ret</name>.<name>setNamespace</name></name><argument_list>(<argument><expr><call><name><name>ue</name>.<name>getNamespace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ret</name>.<name>setProject</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ret</name>.<name>setQName</name></name><argument_list>(<argument><expr><call><name><name>ue</name>.<name>getQName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ret</name>.<name>setTaskType</name></name><argument_list>(<argument><expr><call><name><name>ue</name>.<name>getTaskType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ret</name>.<name>setTaskName</name></name><argument_list>(<argument><expr><call><name><name>ue</name>.<name>getTaskName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ret</name>.<name>setLocation</name></name><argument_list>(
            <argument><expr><call><name><name>macroDef</name>.<name>getBackTrace</name></name><argument_list>()</argument_list></call> ? <call><name><name>ue</name>.<name>getLocation</name></name><argument_list>()</argument_list></call> : <call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>getOwningTarget</name><argument_list>()</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Target</name></type> <name>t</name> =<init> <expr>new <call><name>Target</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>t</name>.<name>setProject</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ret</name>.<name>setOwningTarget</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>ret</name>.<name>setOwningTarget</name></name><argument_list>(<argument><expr><call><name>getOwningTarget</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <decl_stmt><decl><type><name>RuntimeConfigurable</name></type> <name>rc</name> =<init> <expr>new <call><name>RuntimeConfigurable</name><argument_list>(
            <argument><expr><name>ret</name></expr></argument>, <argument><expr><call><name><name>ue</name>.<name>getTaskName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>rc</name>.<name>setPolyType</name></name><argument_list>(<argument><expr><call><name><name>ue</name>.<name>getWrapper</name></name><argument_list>()</argument_list></call>.<call><name>getPolyType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>m</name> =<init> <expr><call><name><name>ue</name>.<name>getWrapper</name></name><argument_list>()</argument_list></call>.<call><name>getAttributeMap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> :<range> <expr><call><name><name>m</name>.<name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>) <block>{
            <expr_stmt><expr><call><name><name>rc</name>.<name>setAttribute</name></name><argument_list>(
                <argument><expr><call><name><name>entry</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name>macroSubs</name><argument_list>(<argument><expr>(<name>String</name>) <call><name><name>entry</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>localAttributes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name><name>rc</name>.<name>addText</name></name><argument_list>(<argument><expr><call><name>macroSubs</name><argument_list>(<argument><expr><call><name><name>ue</name>.<name>getWrapper</name></name><argument_list>()</argument_list></call>.<call><name>getText</name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>,
                             <argument><expr><name>localAttributes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>Enumeration</name><argument_list>&lt;<argument><name>RuntimeConfigurable</name></argument>&gt;</argument_list></name></type> <name>e</name> =<init> <expr><call><name><name>ue</name>.<name>getWrapper</name></name><argument_list>()</argument_list></call>.<call><name>getChildren</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>RuntimeConfigurable</name></type> <name>r</name> =<init> <expr><call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>UnknownElement</name></type> <name>unknownElement</name> =<init> <expr>(<name>UnknownElement</name>) <call><name><name>r</name>.<name>getProxy</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>tag</name> =<init> <expr><call><name><name>unknownElement</name>.<name>getTaskType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>tag</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>tag</name> = <call><name><name>tag</name>.<name>toLowerCase</name></name><argument_list>(<argument><expr><name><name>Locale</name>.<name>ENGLISH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <decl_stmt><decl><type><name><name>MacroDef</name>.<name>TemplateElement</name></name></type> <name>templateElement</name> =<init>
                <expr><call><name>getNsElements</name><argument_list>()</argument_list></call>.<call><name>get</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>templateElement</name> == <name>null</name> || <name>nested</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>UnknownElement</name></type> <name>child</name> =<init> <expr><call><name>copy</name><argument_list>(<argument><expr><name>unknownElement</name></expr></argument>, <argument><expr><name>nested</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>rc</name>.<name>addChild</name></name><argument_list>(<argument><expr><call><name><name>child</name>.<name>getWrapper</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ret</name>.<name>addChild</name></name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><call><name><name>templateElement</name>.<name>isImplicit</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><call><name><name>unknownElements</name>.<name>size</name></name><argument_list>()</argument_list></call> == 0 &amp;&amp; !<call><name><name>templateElement</name>.<name>isOptional</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                        <argument><expr>"Missing nested elements for implicit element "
                        + <call><name><name>templateElement</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if>
                <for>for (<init><decl><type><name><name>Iterator</name><argument_list>&lt;<argument><name>Task</name></argument>&gt;</argument_list></name></type> <name>i</name> =<init> <expr><call><name><name>unknownElements</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init>
                     <condition><expr><call><name><name>i</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
                    <decl_stmt><decl><type><name>UnknownElement</name></type> <name>child</name>
                        =<init> <expr><call><name>copy</name><argument_list>(<argument><expr>(<name>UnknownElement</name>) <call><name><name>i</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>rc</name>.<name>addChild</name></name><argument_list>(<argument><expr><call><name><name>child</name>.<name>getWrapper</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>ret</name>.<name>addChild</name></name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
            }</block></then> <else>else <block>{
                <decl_stmt><decl><type><name>UnknownElement</name></type> <name>presentElement</name> =<init>
                    <expr>(<name>UnknownElement</name>) <call><name><name>presentElements</name>.<name>get</name></name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>presentElement</name> == <name>null</name></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr>!<call><name><name>templateElement</name>.<name>isOptional</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                        <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                            <argument><expr>"Required nested element "
                            + <call><name><name>templateElement</name>.<name>getName</name></name><argument_list>()</argument_list></call> + " missing"</expr></argument>)</argument_list></call></expr>;</throw>
                    }</block></then></if>
                    <continue>continue;</continue>
                }</block></then></if>
                <decl_stmt><decl><type><name>String</name></type> <name>presentText</name> =<init>
                    <expr><call><name><name>presentElement</name>.<name>getWrapper</name></name><argument_list>()</argument_list></call>.<call><name>getText</name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr>!"".<call><name>equals</name><argument_list>(<argument><expr><name>presentText</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>rc</name>.<name>addText</name></name><argument_list>(<argument><expr><call><name>macroSubs</name><argument_list>(<argument><expr><name>presentText</name></expr></argument>, <argument><expr><name>localAttributes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>UnknownElement</name></argument>&gt;</argument_list></name></type> <name>list</name> =<init> <expr><call><name><name>presentElement</name>.<name>getChildren</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>list</name> != <name>null</name></expr>)</condition><then> <block>{
                    <for>for (<init><decl><type><name><name>Iterator</name><argument_list>&lt;<argument><name>UnknownElement</name></argument>&gt;</argument_list></name></type> <name>i</name> =<init> <expr><call><name><name>list</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init>
                         <condition><expr><call><name><name>i</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
                        <decl_stmt><decl><type><name>UnknownElement</name></type> <name>child</name>
                            =<init> <expr><call><name>copy</name><argument_list>(<argument><expr><call><name><name>i</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>rc</name>.<name>addChild</name></name><argument_list>(<argument><expr><call><name><name>child</name>.<name>getWrapper</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>ret</name>.<name>addChild</name></name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></for>
                }</block></then></if>
            }</block></else></if></else></if>
        }</block></while>
        <return>return <expr><name>ret</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Execute the templates instance.
     * Copies the unknown element, substitutes the attributes,
     * and calls perform on the unknown element.
     *
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>presentElements</name> = new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>UnknownElement</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>getNsElements</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>processTasks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>localAttributes</name> = new <call><name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>Set</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>copyKeys</name> =<init> <expr>new <call><name><name>HashSet</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>map</name>.<name>keySet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>Attribute</name></type> <name>attribute</name> :<range> <expr><call><name><name>macroDef</name>.<name>getAttributes</name></name><argument_list>()</argument_list></call></expr></range></decl></init>) <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>value</name> =<init> <expr>(<name>String</name>) <call><name><name>map</name>.<name>get</name></name><argument_list>(<argument><expr><call><name><name>attribute</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>value</name> == <name>null</name> &amp;&amp; "description".<call><name>equals</name><argument_list>(<argument><expr><call><name><name>attribute</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>value</name> = <call><name>getDescription</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name>value</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>value</name> = <call><name><name>attribute</name>.<name>getDefault</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>value</name> = <call><name>macroSubs</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>localAttributes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name>value</name> == <name>null</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                    <argument><expr>"required attribute " + <call><name><name>attribute</name>.<name>getName</name></name><argument_list>()</argument_list></call> + " not set"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>localAttributes</name>.<name>put</name></name><argument_list>(<argument><expr><call><name><name>attribute</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>copyKeys</name>.<name>remove</name></name><argument_list>(<argument><expr><call><name><name>attribute</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <if>if <condition>(<expr><call><name><name>copyKeys</name>.<name>contains</name></name><argument_list>(<argument><expr>"id"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>copyKeys</name>.<name>remove</name></name><argument_list>(<argument><expr>"id"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>macroDef</name>.<name>getText</name></name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>text</name> == <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>defaultText</name> =<init>  <expr><call><name><name>macroDef</name>.<name>getText</name></name><argument_list>()</argument_list></call>.<call><name>getDefault</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr>!<call><name><name>macroDef</name>.<name>getText</name></name><argument_list>()</argument_list></call>.<call><name>getOptional</name><argument_list>()</argument_list></call> &amp;&amp; <name>defaultText</name> == <name>null</name></expr>)</condition><then> <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                        <argument><expr>"required text missing"</expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if>
                <expr_stmt><expr><name>text</name> = <name>defaultText</name> == <name>null</name> ? "" : <name>defaultText</name></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><call><name><name>macroDef</name>.<name>getText</name></name><argument_list>()</argument_list></call>.<call><name>getTrim</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>text</name> = <call><name><name>text</name>.<name>trim</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>localAttributes</name>.<name>put</name></name><argument_list>(<argument><expr><call><name><name>macroDef</name>.<name>getText</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <if>if <condition>(<expr><name>text</name> != <name>null</name> &amp;&amp; !<call><name><name>text</name>.<name>trim</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                    <argument><expr>"The \"" + <call><name>getTaskName</name><argument_list>()</argument_list></call> + "\" macro does not support"
                    + " nested text data."</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
        }</block></else></if>
        <if>if <condition>(<expr><call><name><name>copyKeys</name>.<name>size</name></name><argument_list>()</argument_list></call> != 0</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                <argument><expr>"Unknown attribute" + (<call><name><name>copyKeys</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 1 ? "s " : " ")
                + <name>copyKeys</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <comment type="line">// need to set the project on unknown element</comment>
        <decl_stmt><decl><type><name>UnknownElement</name></type> <name>c</name> =<init> <expr><call><name>copy</name><argument_list>(<argument><expr><call><name><name>macroDef</name>.<name>getNestedTask</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>c</name>.<name>init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>LocalProperties</name></type> <name>localProperties</name>
            =<init> <expr><call><name><name>LocalProperties</name>.<name>get</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>localProperties</name>.<name>enterScope</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>c</name>.<name>perform</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>ex</name></decl></param>) <block>{
            <if>if <condition>(<expr><call><name><name>macroDef</name>.<name>getBackTrace</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <throw>throw <expr><call><name><name>ProjectHelper</name>.<name>addLocationToBuildException</name></name><argument_list>(
                    <argument><expr><name>ex</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>ex</name>.<name>setLocation</name></name><argument_list>(<argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <throw>throw <expr><name>ex</name></expr>;</throw>
            }</block></else></if>
        }</block></catch> <finally>finally <block>{
            <expr_stmt><expr><name>presentElements</name> = <name>null</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>localAttributes</name> = <name>null</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>localProperties</name>.<name>exitScope</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>
}</block></class>
</unit>
