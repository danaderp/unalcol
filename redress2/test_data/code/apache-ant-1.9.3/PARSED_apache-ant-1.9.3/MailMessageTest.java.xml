<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\mail\MailMessageTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>mail</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>BufferedReader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>BufferedWriter</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ByteArrayOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStreamReader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>OutputStreamWriter</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>PrintStream</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>InetAddress</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>Socket</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>ServerSocket</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>mail</name>.<name>MailMessage</name></name>;</import>

<import>import <name><name>junit</name>.<name>framework</name>.<name>TestCase</name></name>;</import>

<comment type="javadoc">/**
 * JUnit 3 testcases for org.apache.tools.mail.MailMessage.
 *
 * @since Ant 1.6
 */</comment>
<class><specifier>public</specifier> class <name>MailMessageTest</name> <super><extends>extends <name>TestCase</name></extends></super> <block>{

    <comment type="line">// 27224 = magic (a random port which is unlikely to be in use)</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>TEST_PORT</name> =<init> <expr>27224</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>local</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>MailMessageTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
        <try>try <block>{
            <expr_stmt><expr><name>local</name> = <call><name><name>InetAddress</name>.<name>getLocalHost</name></name><argument_list>()</argument_list></call>.<call><name>getHostName</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name><name>java</name>.<name>net</name>.<name>UnknownHostException</name></name></type> <name>uhe</name></decl></param>) <block>{
            <comment type="line">// ignore</comment>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     *  Test an example that is similar to the one given in the API
     *  If this testcase takes &gt;90s to complete, it is very likely that
     *  the two threads are blocked waiting for each other and Thread.join()
     *  timed out.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testAPIExample</name><parameter_list>()</parameter_list> <block>{

        <decl_stmt><decl><type><name>ServerThread</name></type> <name>testMailServer</name> =<init> <expr>new <call><name>ServerThread</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Thread</name></type> <name>server</name> =<init> <expr>new <call><name>Thread</name><argument_list>(<argument><expr><name>testMailServer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>server</name>.<name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ClientThread</name></type> <name>testMailClient</name> =<init> <expr>new <call><name>ClientThread</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>testMailClient</name>.<name>from</name></name><argument_list>(<argument><expr>"Mail Message &lt;EmailTaskTest@ant.apache.org&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>testMailClient</name>.<name>to</name></name><argument_list>(<argument><expr>"to@you.com"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>testMailClient</name>.<name>cc</name></name><argument_list>(<argument><expr>"cc1@you.com"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>testMailClient</name>.<name>cc</name></name><argument_list>(<argument><expr>"cc2@you.com"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>testMailClient</name>.<name>bcc</name></name><argument_list>(<argument><expr>"bcc@you.com"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>testMailClient</name>.<name>setSubject</name></name><argument_list>(<argument><expr>"Test subject"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>testMailClient</name>.<name>setMessage</name></name><argument_list>( <argument><expr>"test line 1\n" +
            "test line 2"</expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Thread</name></type> <name>client</name> =<init> <expr>new <call><name>Thread</name><argument_list>(<argument><expr><name>testMailClient</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>client</name>.<name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <try>try <block>{
            <expr_stmt><expr><call><name><name>server</name>.<name>join</name></name><argument_list>(<argument><expr>60 * 1000</expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 60s</comment>
            <expr_stmt><expr><call><name><name>client</name>.<name>join</name></name><argument_list>(<argument><expr>30 * 1000</expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// a further 30s</comment>
        }</block> <catch>catch (<param><decl><type><name>InterruptedException</name></type> <name>ie</name></decl></param> ) <block>{
            <expr_stmt><expr><call><name>fail</name><argument_list>( <argument><expr>"InterruptedException: " + <name>ie</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <decl_stmt><decl><type><name>String</name></type> <name>result</name> =<init> <expr><call><name><name>testMailServer</name>.<name>getResult</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>expectedResult</name> =<init> <expr>"220 test SMTP EmailTaskTest\r\n" +
        "HELO " + <name>local</name> + "\r\n" +
        "250 " + <name>local</name> + " Hello " + <name>local</name> + " [127.0.0.1], pleased to meet you\r\n" +
        "MAIL FROM: &lt;EmailTaskTest@ant.apache.org&gt;\r\n" +
        "250\r\n" +
        "RCPT TO: &lt;to@you.com&gt;\r\n" +
        "250\r\n" +
        "RCPT TO: &lt;cc1@you.com&gt;\r\n" +
        "250\r\n" +
        "RCPT TO: &lt;cc2@you.com&gt;\r\n" +
        "250\r\n" +
        "RCPT TO: &lt;bcc@you.com&gt;\r\n" +
        "250\r\n" +
        "DATA\r\n" +
        "354\r\n" +
        "Subject: Test subject\r\n" +
        "From: Mail Message &lt;EmailTaskTest@ant.apache.org&gt;\r\n" +
        "To: to@you.com\r\n" +
        "Cc: cc1@you.com, cc2@you.com\r\n" +
        "X-Mailer: org.apache.tools.mail.MailMessage (ant.apache.org)\r\n" +
        "\r\n" +
        "test line 1\r\n" +
        "test line 2\r\n" +
        "\r\n" +
        ".\r\n" +
        "250\r\n" +
        "QUIT\r\n" +
        "221\r\n"</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>icounter</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>icounter</name>&lt;<call><name><name>expectedResult</name>.<name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>icounter</name>++</expr></incr>) <block>{
            <if>if <condition>(<expr><name>icounter</name> &lt; <call><name><name>result</name>.<name>length</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><call><name><name>expectedResult</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>icounter</name></expr></argument>)</argument_list></call> != <call><name><name>result</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>icounter</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"posit " + <name>icounter</name> + " expected "
                        + <call><name><name>expectedResult</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>icounter</name></expr></argument>)</argument_list></call>
                    + " result " + <call><name><name>result</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>icounter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></for>
        <if>if <condition>(<expr><call><name><name>expectedResult</name>.<name>length</name></name><argument_list>()</argument_list></call>&gt;<call><name><name>result</name>.<name>length</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"excedent of expected result "
                + <call><name><name>expectedResult</name>.<name>substring</name></name><argument_list>(<argument><expr><call><name><name>result</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>expectedResult</name>.<name>length</name></name><argument_list>()</argument_list></call>&lt;<call><name><name>result</name>.<name>length</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"excedent of result "
                + <call><name><name>result</name>.<name>substring</name></name><argument_list>(<argument><expr><call><name><name>expectedResult</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>expectedResult</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>result</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expectedResult</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// order of headers cannot be guaranteed</comment>
        <if>if <condition>(<expr><call><name><name>testMailClient</name>.<name>isFailed</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><call><name><name>testMailClient</name>.<name>getFailMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     *  Test a MailMessage with no cc or bcc lines
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testToOnly</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>ServerThread</name></type> <name>testMailServer</name> =<init> <expr>new <call><name>ServerThread</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Thread</name></type> <name>server</name> =<init> <expr>new <call><name>Thread</name><argument_list>(<argument><expr><name>testMailServer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>server</name>.<name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ClientThread</name></type> <name>testMailClient</name> =<init> <expr>new <call><name>ClientThread</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>testMailClient</name>.<name>from</name></name><argument_list>(<argument><expr>"Mail Message &lt;EmailTaskTest@ant.apache.org&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>testMailClient</name>.<name>to</name></name><argument_list>(<argument><expr>"to@you.com"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>testMailClient</name>.<name>setSubject</name></name><argument_list>(<argument><expr>"Test subject"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>testMailClient</name>.<name>setMessage</name></name><argument_list>( <argument><expr>"test line 1\n" +
            "test line 2"</expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Thread</name></type> <name>client</name> =<init> <expr>new <call><name>Thread</name><argument_list>(<argument><expr><name>testMailClient</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>client</name>.<name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <try>try <block>{
            <expr_stmt><expr><call><name><name>server</name>.<name>join</name></name><argument_list>(<argument><expr>60 * 1000</expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 60s</comment>
            <expr_stmt><expr><call><name><name>client</name>.<name>join</name></name><argument_list>(<argument><expr>30 * 1000</expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// a further 30s</comment>
        }</block> <catch>catch (<param><decl><type><name>InterruptedException</name></type> <name>ie</name></decl></param> ) <block>{
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"InterruptedException: " + <name>ie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <decl_stmt><decl><type><name>String</name></type> <name>result</name> =<init> <expr><call><name><name>testMailServer</name>.<name>getResult</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>expectedResult</name> =<init> <expr>"220 test SMTP EmailTaskTest\r\n" +
        "HELO " + <name>local</name> + "\r\n" +
        "250 " + <name>local</name> + " Hello " + <name>local</name> + " [127.0.0.1], pleased to meet you\r\n" +
        "MAIL FROM: &lt;EmailTaskTest@ant.apache.org&gt;\r\n" +
        "250\r\n" +
        "RCPT TO: &lt;to@you.com&gt;\r\n" +
        "250\r\n" +
        "DATA\r\n" +
        "354\r\n" +
        "Subject: Test subject\r\n" +
            "From: Mail Message &lt;EmailTaskTest@ant.apache.org&gt;\r\n" +
            "To: to@you.com\r\n" +
        "X-Mailer: org.apache.tools.mail.MailMessage (ant.apache.org)\r\n" +
        "\r\n" +
        "test line 1\r\n" +
        "test line 2\r\n" +
        "\r\n" +
        ".\r\n" +
        "250\r\n" +
        "QUIT\r\n" +
        "221\r\n"</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>expectedResult</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>result</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expectedResult</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// order of headers cannot be guaranteed</comment>
        <if>if <condition>(<expr><call><name><name>testMailClient</name>.<name>isFailed</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><call><name><name>testMailClient</name>.<name>getFailMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>


    <comment type="javadoc">/**
     *  Test a MailMessage with no to or bcc lines
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testCcOnly</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>ServerThread</name></type> <name>testMailServer</name> =<init> <expr>new <call><name>ServerThread</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Thread</name></type> <name>server</name> =<init> <expr>new <call><name>Thread</name><argument_list>(<argument><expr><name>testMailServer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>server</name>.<name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ClientThread</name></type> <name>testMailClient</name> =<init> <expr>new <call><name>ClientThread</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>testMailClient</name>.<name>from</name></name><argument_list>(<argument><expr>"Mail Message &lt;EmailTaskTest@ant.apache.org&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>testMailClient</name>.<name>cc</name></name><argument_list>(<argument><expr>"cc@you.com"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>testMailClient</name>.<name>setSubject</name></name><argument_list>(<argument><expr>"Test subject"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>testMailClient</name>.<name>setMessage</name></name><argument_list>( <argument><expr>"test line 1\n" +
            "test line 2"</expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Thread</name></type> <name>client</name> =<init> <expr>new <call><name>Thread</name><argument_list>(<argument><expr><name>testMailClient</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>client</name>.<name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <try>try <block>{
            <expr_stmt><expr><call><name><name>server</name>.<name>join</name></name><argument_list>(<argument><expr>60 * 1000</expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 60s</comment>
            <expr_stmt><expr><call><name><name>client</name>.<name>join</name></name><argument_list>(<argument><expr>30 * 1000</expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// a further 30s</comment>
        }</block> <catch>catch (<param><decl><type><name>InterruptedException</name></type> <name>ie</name></decl></param> ) <block>{
            <expr_stmt><expr><call><name>fail</name><argument_list>( <argument><expr>"InterruptedException: " + <name>ie</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <decl_stmt><decl><type><name>String</name></type> <name>result</name> =<init> <expr><call><name><name>testMailServer</name>.<name>getResult</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>expectedResult</name> =<init> <expr>"220 test SMTP EmailTaskTest\r\n" +
        "HELO " + <name>local</name> + "\r\n" +
        "250 " + <name>local</name> + " Hello " + <name>local</name> + " [127.0.0.1], pleased to meet you\r\n" +
        "MAIL FROM: &lt;EmailTaskTest@ant.apache.org&gt;\r\n" +
        "250\r\n" +
        "RCPT TO: &lt;cc@you.com&gt;\r\n" +
        "250\r\n" +
        "DATA\r\n" +
        "354\r\n" +
        "Subject: Test subject\r\n" +
            "From: Mail Message &lt;EmailTaskTest@ant.apache.org&gt;\r\n" +
            "Cc: cc@you.com\r\n" +
        "X-Mailer: org.apache.tools.mail.MailMessage (ant.apache.org)\r\n" +
        "\r\n" +
        "test line 1\r\n" +
        "test line 2\r\n" +
        "\r\n" +
        ".\r\n" +
        "250\r\n" +
        "QUIT\r\n" +
        "221\r\n"</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>expectedResult</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>result</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expectedResult</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>testMailClient</name>.<name>isFailed</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><call><name><name>testMailClient</name>.<name>getFailMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>


    <comment type="javadoc">/**
     *  Test a MailMessage with no to or cc lines
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testBccOnly</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>ServerThread</name></type> <name>testMailServer</name> =<init> <expr>new <call><name>ServerThread</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Thread</name></type> <name>server</name> =<init> <expr>new <call><name>Thread</name><argument_list>(<argument><expr><name>testMailServer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>server</name>.<name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ClientThread</name></type> <name>testMailClient</name> =<init> <expr>new <call><name>ClientThread</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>testMailClient</name>.<name>from</name></name><argument_list>(<argument><expr>"Mail Message &lt;EmailTaskTest@ant.apache.org&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>testMailClient</name>.<name>bcc</name></name><argument_list>(<argument><expr>"bcc@you.com"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>testMailClient</name>.<name>setSubject</name></name><argument_list>(<argument><expr>"Test subject"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>testMailClient</name>.<name>setMessage</name></name><argument_list>( <argument><expr>"test line 1\n" +
            "test line 2"</expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Thread</name></type> <name>client</name> =<init> <expr>new <call><name>Thread</name><argument_list>(<argument><expr><name>testMailClient</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>client</name>.<name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <try>try <block>{
            <expr_stmt><expr><call><name><name>server</name>.<name>join</name></name><argument_list>(<argument><expr>60 * 1000</expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 60s</comment>
            <expr_stmt><expr><call><name><name>client</name>.<name>join</name></name><argument_list>(<argument><expr>30 * 1000</expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// a further 30s</comment>
        }</block> <catch>catch (<param><decl><type><name>InterruptedException</name></type> <name>ie</name></decl></param> ) <block>{
            <expr_stmt><expr><call><name>fail</name><argument_list>( <argument><expr>"InterruptedException: " + <name>ie</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <decl_stmt><decl><type><name>String</name></type> <name>result</name> =<init> <expr><call><name><name>testMailServer</name>.<name>getResult</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>expectedResult</name> =<init> <expr>"220 test SMTP EmailTaskTest\r\n" +
        "HELO " + <name>local</name> + "\r\n" +
        "250 " + <name>local</name> + " Hello " + <name>local</name> + " [127.0.0.1], pleased to meet you\r\n" +
        "MAIL FROM: &lt;EmailTaskTest@ant.apache.org&gt;\r\n" +
        "250\r\n" +
        "RCPT TO: &lt;bcc@you.com&gt;\r\n" +
        "250\r\n" +
        "DATA\r\n" +
        "354\r\n" +
        "Subject: Test subject\r\n" +
        "From: Mail Message &lt;EmailTaskTest@ant.apache.org&gt;\r\n" +
        "X-Mailer: org.apache.tools.mail.MailMessage (ant.apache.org)\r\n" +
        "\r\n" +
        "test line 1\r\n" +
        "test line 2\r\n" +
        "\r\n" +
        ".\r\n" +
        "250\r\n" +
        "QUIT\r\n" +
        "221\r\n"</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>( <argument><expr><call><name><name>expectedResult</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>result</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>( <argument><expr><name>expectedResult</name></expr></argument>, <argument><expr><name>result</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>( <expr><call><name><name>testMailClient</name>.<name>isFailed</name></name><argument_list>()</argument_list></call></expr> )</condition><then> <block>{
            <expr_stmt><expr><call><name>fail</name><argument_list>( <argument><expr><call><name><name>testMailClient</name>.<name>getFailMessage</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>


    <comment type="javadoc">/**
     *  Test a MailMessage with no subject line
     *  Subject is an optional field (RFC 822 s4.1)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNoSubject</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>ServerThread</name></type> <name>testMailServer</name> =<init> <expr>new <call><name>ServerThread</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Thread</name></type> <name>server</name> =<init> <expr>new <call><name>Thread</name><argument_list>(<argument><expr><name>testMailServer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>server</name>.<name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ClientThread</name></type> <name>testMailClient</name> =<init> <expr>new <call><name>ClientThread</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>testMailClient</name>.<name>from</name></name><argument_list>(<argument><expr>"Mail Message &lt;EmailTaskTest@ant.apache.org&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>testMailClient</name>.<name>to</name></name><argument_list>(<argument><expr>"to@you.com"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>testMailClient</name>.<name>setMessage</name></name><argument_list>( <argument><expr>"test line 1\n" +
            "test line 2"</expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Thread</name></type> <name>client</name> =<init> <expr>new <call><name>Thread</name><argument_list>(<argument><expr><name>testMailClient</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>client</name>.<name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <try>try <block>{
            <expr_stmt><expr><call><name><name>server</name>.<name>join</name></name><argument_list>(<argument><expr>60 * 1000</expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 60s</comment>
            <expr_stmt><expr><call><name><name>client</name>.<name>join</name></name><argument_list>(<argument><expr>30 * 1000</expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// a further 30s</comment>
        }</block> <catch>catch (<param><decl><type><name>InterruptedException</name></type> <name>ie</name></decl></param> ) <block>{
            <expr_stmt><expr><call><name>fail</name><argument_list>( <argument><expr>"InterruptedException: " + <name>ie</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <decl_stmt><decl><type><name>String</name></type> <name>result</name> =<init> <expr><call><name><name>testMailServer</name>.<name>getResult</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>expectedResult</name> =<init> <expr>"220 test SMTP EmailTaskTest\r\n" +
        "HELO " + <name>local</name> + "\r\n" +
        "250 " + <name>local</name> + " Hello " + <name>local</name> + " [127.0.0.1], pleased to meet you\r\n" +
        "MAIL FROM: &lt;EmailTaskTest@ant.apache.org&gt;\r\n" +
        "250\r\n" +
        "RCPT TO: &lt;to@you.com&gt;\r\n" +
        "250\r\n" +
        "DATA\r\n" +
        "354\r\n" +
        "From: Mail Message &lt;EmailTaskTest@ant.apache.org&gt;\r\n" +
            "To: to@you.com\r\n" +
        "X-Mailer: org.apache.tools.mail.MailMessage (ant.apache.org)\r\n" +
        "\r\n" +
        "test line 1\r\n" +
        "test line 2\r\n" +
        "\r\n" +
        ".\r\n" +
        "250\r\n" +
        "QUIT\r\n" +
        "221\r\n"</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>( <argument><expr><call><name><name>expectedResult</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>result</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>( <argument><expr><name>expectedResult</name></expr></argument>, <argument><expr><name>result</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>( <expr><call><name><name>testMailClient</name>.<name>isFailed</name></name><argument_list>()</argument_list></call></expr> )</condition><then> <block>{
            <expr_stmt><expr><call><name>fail</name><argument_list>( <argument><expr><call><name><name>testMailClient</name>.<name>getFailMessage</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>


    <comment type="javadoc">/**
     *  Test a MailMessage with empty body message
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testEmptyBody</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>ServerThread</name></type> <name>testMailServer</name> =<init> <expr>new <call><name>ServerThread</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Thread</name></type> <name>server</name> =<init> <expr>new <call><name>Thread</name><argument_list>(<argument><expr><name>testMailServer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>server</name>.<name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ClientThread</name></type> <name>testMailClient</name> =<init> <expr>new <call><name>ClientThread</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>testMailClient</name>.<name>from</name></name><argument_list>(<argument><expr>"Mail Message &lt;EmailTaskTest@ant.apache.org&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>testMailClient</name>.<name>to</name></name><argument_list>(<argument><expr>"to@you.com"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>testMailClient</name>.<name>setSubject</name></name><argument_list>(<argument><expr>"Test subject"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>testMailClient</name>.<name>setMessage</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Thread</name></type> <name>client</name> =<init> <expr>new <call><name>Thread</name><argument_list>(<argument><expr><name>testMailClient</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>client</name>.<name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <try>try <block>{
            <expr_stmt><expr><call><name><name>server</name>.<name>join</name></name><argument_list>(<argument><expr>60 * 1000</expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 60s</comment>
            <expr_stmt><expr><call><name><name>client</name>.<name>join</name></name><argument_list>(<argument><expr>30 * 1000</expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// a further 30s</comment>
        }</block> <catch>catch (<param><decl><type><name>InterruptedException</name></type> <name>ie</name></decl></param> ) <block>{
            <expr_stmt><expr><call><name>fail</name><argument_list>( <argument><expr>"InterruptedException: " + <name>ie</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <decl_stmt><decl><type><name>String</name></type> <name>result</name> =<init> <expr><call><name><name>testMailServer</name>.<name>getResult</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>expectedResult</name> =<init> <expr>"220 test SMTP EmailTaskTest\r\n" +
        "HELO " + <name>local</name> + "\r\n" +
        "250 " + <name>local</name> + " Hello " + <name>local</name> + " [127.0.0.1], pleased to meet you\r\n" +
        "MAIL FROM: &lt;EmailTaskTest@ant.apache.org&gt;\r\n" +
        "250\r\n" +
        "RCPT TO: &lt;to@you.com&gt;\r\n" +
        "250\r\n" +
        "DATA\r\n" +
        "354\r\n" +
        "Subject: Test subject\r\n" +
            "From: Mail Message &lt;EmailTaskTest@ant.apache.org&gt;\r\n" +
            "To: to@you.com\r\n" +
        "X-Mailer: org.apache.tools.mail.MailMessage (ant.apache.org)\r\n" +
        "\r\n" +
        "\r\n" +
        "\r\n" +
        ".\r\n" +
        "250\r\n" +
        "QUIT\r\n" +
        "221\r\n"</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>expectedResult</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>result</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expectedResult</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>testMailClient</name>.<name>isFailed</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><call><name><name>testMailClient</name>.<name>getFailMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>


    <comment type="javadoc">/**
     *  Test a MailMessage with US-ASCII character set
     *  The next four testcase can be kinda hard to debug as Ant will often
     *  print the junit failure in US-ASCII.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testAsciiCharset</name><parameter_list>()</parameter_list> <block>{

        <decl_stmt><decl><type><name>ServerThread</name></type> <name>testMailServer</name> =<init> <expr>new <call><name>ServerThread</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Thread</name></type> <name>server</name> =<init> <expr>new <call><name>Thread</name><argument_list>(<argument><expr><name>testMailServer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>server</name>.<name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ClientThread</name></type> <name>testMailClient</name> =<init> <expr>new <call><name>ClientThread</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>testMailClient</name>.<name>from</name></name><argument_list>(<argument><expr>"Mail Message &lt;EmailTaskTest@ant.apache.org&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>testMailClient</name>.<name>to</name></name><argument_list>(<argument><expr>"Ceki G\u00fclc\u00fc &lt;abuse@mail-abuse.org&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>testMailClient</name>.<name>setSubject</name></name><argument_list>(<argument><expr>"Test subject"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>testMailClient</name>.<name>setMessage</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Thread</name></type> <name>client</name> =<init> <expr>new <call><name>Thread</name><argument_list>(<argument><expr><name>testMailClient</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>client</name>.<name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <try>try <block>{
            <expr_stmt><expr><call><name><name>server</name>.<name>join</name></name><argument_list>(<argument><expr>60 * 1000</expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 60s</comment>
            <expr_stmt><expr><call><name><name>client</name>.<name>join</name></name><argument_list>(<argument><expr>30 * 1000</expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// a further 30s</comment>
        }</block> <catch>catch (<param><decl><type><name>InterruptedException</name></type> <name>ie</name></decl></param> ) <block>{
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"InterruptedException: " + <name>ie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <decl_stmt><decl><type><name>String</name></type> <name>result</name> =<init> <expr><call><name><name>testMailServer</name>.<name>getResult</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>expectedResult</name> =<init> <expr>"220 test SMTP EmailTaskTest\r\n" +
        "HELO " + <name>local</name> + "\r\n" +
        "250 " + <name>local</name> + " Hello " + <name>local</name> + " [127.0.0.1], pleased to meet you\r\n" +
        "MAIL FROM: &lt;EmailTaskTest@ant.apache.org&gt;\r\n" +
        "250\r\n" +
        "RCPT TO: &lt;abuse@mail-abuse.org&gt;\r\n" +
        "250\r\n" +
        "DATA\r\n" +
        "354\r\n" +
        "Subject: Test subject\r\n" +
            "From: Mail Message &lt;EmailTaskTest@ant.apache.org&gt;\r\n" +
            "To: Ceki G\u00fclc\u00fc &lt;abuse@mail-abuse.org&gt;\r\n" +
        "X-Mailer: org.apache.tools.mail.MailMessage (ant.apache.org)\r\n" +
        "\r\n" +
        "\r\n" +
        "\r\n" +
        ".\r\n" +
        "250\r\n" +
        "QUIT\r\n" +
        "221\r\n"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>baos1</name> =<init> <expr>new <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>baos2</name> =<init> <expr>new <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PrintStream</name></type> <name>bos1</name> =<init> <expr>new <call><name>PrintStream</name><argument_list>(<argument><expr><name>baos1</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PrintStream</name></type> <name>bos2</name> =<init> <expr>new <call><name>PrintStream</name><argument_list>(<argument><expr><name>baos2</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>bos1</name>.<name>print</name></name><argument_list>(<argument><expr><name>expectedResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bos2</name>.<name>print</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>( <argument><expr>"expected message length != actual message length "
            + "in testAsciiCharset()"</expr></argument>, <argument><expr><call><name><name>expectedResult</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>result</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>( <argument><expr>"baos1 and baos2 should be the same in testAsciiCharset()"</expr></argument>,
            <argument><expr><call><name><name>baos1</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>baos2</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt> <comment type="line">// order of headers cannot be guaranteed</comment>
        <if>if <condition>(<expr><call><name><name>testMailClient</name>.<name>isFailed</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><call><name><name>testMailClient</name>.<name>getFailMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>




    <comment type="javadoc">/**
     * A private test class that pretends to be a mail transfer agent
     */</comment>
    <class><specifier>private</specifier> class <name>ServerThread</name> <super><implements>implements <name>Runnable</name></implements></super> <block>{

        <decl_stmt><decl><type><specifier>private</specifier> <name>StringBuffer</name></type> <name>sb</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>loop</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ServerSocket</name></type> <name>ssock</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Socket</name></type> <name>sock</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BufferedWriter</name></type> <name>out</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BufferedReader</name></type> <name>in</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>data</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>  <comment type="line">// state engine: false=envelope, true=message</comment>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{

            <try>try <block>{
                <expr_stmt><expr><name>ssock</name> = new <call><name>ServerSocket</name><argument_list>(<argument><expr><name>TEST_PORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>sock</name> = <call><name><name>ssock</name>.<name>accept</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// wait for connection</comment>
                <expr_stmt><expr><name>in</name> = new <call><name>BufferedReader</name><argument_list>( <argument><expr>new <call><name>InputStreamReader</name><argument_list>(
                    <argument><expr><call><name><name>sock</name>.<name>getInputStream</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>out</name> = new <call><name>BufferedWriter</name><argument_list>( <argument><expr>new <call><name>OutputStreamWriter</name><argument_list>(
                    <argument><expr><call><name><name>sock</name>.<name>getOutputStream</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>sb</name> = new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>send</name><argument_list>( <argument><expr>"220 test SMTP EmailTaskTest\r\n"</expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>loop</name> = true</expr>;</expr_stmt>
                <while>while <condition>( <expr><name>loop</name></expr> )</condition> <block>{
                    <decl_stmt><decl><type><name>String</name></type> <name>response</name> =<init> <expr><call><name><name>in</name>.<name>readLine</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>( <expr><name>response</name> == <name>null</name></expr> )</condition><then> <block>{
                        <expr_stmt><expr><name>loop</name> = false</expr>;</expr_stmt>
                        <break>break;</break>
                    }</block></then></if>
                    <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>( <argument><expr><name>response</name> + "\r\n"</expr></argument> )</argument_list></call></expr>;</expr_stmt>

                    <if>if <condition>( <expr>!<name>data</name> &amp;&amp; <call><name><name>response</name>.<name>startsWith</name></name><argument_list>( <argument><expr>"HELO"</expr></argument> )</argument_list></call></expr> )</condition><then> <block>{
                        <expr_stmt><expr><call><name>send</name><argument_list>( <argument><expr>"250 " + <name>local</name> + " Hello " + <name>local</name> + " " +
                        "[127.0.0.1], pleased to meet you\r\n"</expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else>else <if>if <condition>( <expr>!<name>data</name> &amp;&amp; <call><name><name>response</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"MAIL"</expr></argument>)</argument_list></call></expr> )</condition><then> <block>{
                        <expr_stmt><expr><call><name>send</name><argument_list>( <argument><expr>"250\r\n"</expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else>else <if>if <condition>( <expr>!<name>data</name> &amp;&amp; <call><name><name>response</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"RCPT"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>send</name><argument_list>( <argument><expr>"250\r\n"</expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else>else <if>if <condition>(<expr>!<name>data</name> &amp;&amp; <call><name><name>response</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"DATA"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>send</name><argument_list>( <argument><expr>"354\r\n"</expr></argument> )</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>data</name> = true</expr>;</expr_stmt>
                    }</block></then> <else>else <if>if <condition>(<expr><name>data</name> &amp;&amp; <call><name><name>response</name>.<name>equals</name></name><argument_list>(<argument><expr>"."</expr></argument>)</argument_list></call></expr> )</condition><then> <block>{
                        <expr_stmt><expr><call><name>send</name><argument_list>( <argument><expr>"250\r\n"</expr></argument> )</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>data</name> = false</expr>;</expr_stmt>
                    }</block></then> <else>else <if>if <condition>(<expr>!<name>data</name> &amp;&amp; <call><name><name>response</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"QUIT"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>send</name><argument_list>( <argument><expr>"221\r\n"</expr></argument> )</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>loop</name> = false</expr>;</expr_stmt>
                    }</block></then> <else>else <if>if <condition>(<expr>!<name>data</name></expr>)</condition><then> <block>{
                        <comment type="line">//throw new IllegalStateException("Command unrecognized: "</comment>
                        <comment type="line">//    + response);</comment>
                        <expr_stmt><expr><call><name>send</name><argument_list>( <argument><expr>"500 5.5.1 Command unrecognized: \"" +
                            <name>response</name> + "\"\r\n"</expr></argument> )</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>loop</name> = false</expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <comment type="line">// sb.append( response + "\r\n" );</comment>
                    }</block></else></if></else></if></else></if></else></if></else></if></else></if></else></if>

                }</block></while> <comment type="line">// while</comment>
            }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ioe</name></decl></param>) <block>{
                <expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></catch> <finally>finally <block>{
                <expr_stmt><expr><call><name>disconnect</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></finally></try>
        }</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>send</name><parameter_list>(<param><decl><type><name>String</name></type> <name>retmsg</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
            <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>( <argument><expr><name>retmsg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name>.<name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>( <argument><expr><name>retmsg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>disconnect</name><parameter_list>()</parameter_list> <block>{
            <if>if <condition>(<expr><name>out</name> != <name>null</name></expr>)</condition><then> <block>{
                <try>try <block>{
                    <expr_stmt><expr><call><name><name>out</name>.<name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>out</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>out</name> = <name>null</name></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
                    <comment type="line">// ignore</comment>
                }</block></catch></try>
            }</block></then></if>
            <if>if <condition>(<expr><name>in</name> != <name>null</name></expr>)</condition><then> <block>{
                <try>try <block>{
                    <expr_stmt><expr><call><name><name>in</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>in</name> = <name>null</name></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
                    <comment type="line">// ignore</comment>
                }</block></catch></try>
            }</block></then></if>
            <if>if <condition>(<expr><name>sock</name> != <name>null</name></expr>)</condition><then> <block>{
                <try>try <block>{
                    <expr_stmt><expr><call><name><name>sock</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>sock</name> = <name>null</name></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
                    <comment type="line">// ignore</comment>
                }</block></catch></try>
            }</block></then></if>
            <if>if <condition>(<expr><name>ssock</name> != <name>null</name></expr>)</condition><then> <block>{
                <try>try <block>{
                    <expr_stmt><expr><call><name><name>ssock</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>ssock</name> = <name>null</name></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
                    <comment type="line">// ignore</comment>
                }</block></catch></try>
            }</block></then></if>
        }</block></function>

        <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>String</name></type> <name>getResult</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><name>loop</name> = false</expr>;</expr_stmt>
            <return>return <expr><call><name><name>sb</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>

    }</block></class>

    <comment type="javadoc">/**
     *  A private test class that wraps MailMessage
     */</comment>
    <class><specifier>private</specifier> class <name>ClientThread</name> <super><implements>implements <name>Runnable</name></implements></super> <block>{

        <decl_stmt><decl><type><specifier>private</specifier> <name>MailMessage</name></type> <name>msg</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>fail</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>failMessage</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>from</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>subject</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>message</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>protected</specifier> <name>Vector</name></type> <name>replyToList</name> =<init> <expr>new <call><name>Vector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>Vector</name></type> <name>toList</name> =<init> <expr>new <call><name>Vector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>Vector</name></type> <name>ccList</name> =<init> <expr>new <call><name>Vector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>Vector</name></type> <name>bccList</name> =<init> <expr>new <call><name>Vector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


        <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>9</expr></init></decl>;</init> <condition><expr><name>i</name> &gt; 0</expr>;</condition> <incr><expr><name>i</name>--</expr></incr>) <block>{
                <try>try <block>{
                    <expr_stmt><expr><name>msg</name> = new <call><name>MailMessage</name><argument_list>(<argument><expr>"localhost"</expr></argument>, <argument><expr><name>TEST_PORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name><name>java</name>.<name>net</name>.<name>ConnectException</name></name></type> <name>ce</name></decl></param>) <block>{
                    <try>try <block>{
                        <expr_stmt><expr><call><name><name>Thread</name>.<name>sleep</name></name><argument_list>(<argument><expr>10 * 1000</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block> <catch>catch (<param><decl><type><name>InterruptedException</name></type> <name>ie</name></decl></param>) <block>{
                        <comment type="line">// ignore</comment>
                    }</block></catch></try>
                }</block></catch> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ioe</name></decl></param>) <block>{
                    <expr_stmt><expr><name>fail</name> = true</expr>;</expr_stmt>
                    <expr_stmt><expr><name>failMessage</name> = "IOException: " + <name>ioe</name></expr>;</expr_stmt>
                    <return>return;</return>
                }</block></catch></try>
                <if>if <condition>(<expr><name>msg</name> != <name>null</name></expr>)</condition><then> <block>{
                    <break>break;</break>
                }</block></then></if>
            }</block></for>

            <if>if <condition>(<expr><name>msg</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>fail</name> = true</expr>;</expr_stmt>
                <expr_stmt><expr><name>failMessage</name> = "java.net.ConnectException: Connection refused"</expr>;</expr_stmt>
                <return>return;</return>
            }</block></then></if>

            <try>try <block>{
                <expr_stmt><expr><call><name><name>msg</name>.<name>from</name></name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>Enumeration</name></type> <name>e</name></decl>;</decl_stmt>

                <expr_stmt><expr><name>e</name> = <call><name><name>replyToList</name>.<name>elements</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <while>while <condition>(<expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                    <expr_stmt><expr><call><name><name>msg</name>.<name>replyto</name></name><argument_list>(<argument><expr><call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></while>

                <expr_stmt><expr><name>e</name> = <call><name><name>toList</name>.<name>elements</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <while>while <condition>(<expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                    <expr_stmt><expr><call><name><name>msg</name>.<name>to</name></name><argument_list>(<argument><expr><call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></while>

                <expr_stmt><expr><name>e</name> = <call><name><name>ccList</name>.<name>elements</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <while>while <condition>(<expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                    <expr_stmt><expr><call><name><name>msg</name>.<name>cc</name></name><argument_list>(<argument><expr><call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></while>

                <expr_stmt><expr><name>e</name> = <call><name><name>bccList</name>.<name>elements</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <while>while <condition>(<expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                    <expr_stmt><expr><call><name><name>msg</name>.<name>bcc</name></name><argument_list>(<argument><expr><call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></while>

                <if>if <condition>(<expr><name>subject</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>msg</name>.<name>setSubject</name></name><argument_list>(<argument><expr><name>subject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <if>if <condition>(<expr><name>message</name> != <name>null</name></expr> )</condition><then> <block>{
                    <decl_stmt><decl><type><name>PrintStream</name></type> <name>out</name> =<init> <expr><call><name><name>msg</name>.<name>getPrintStream</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>out</name>.<name>println</name></name><argument_list>( <argument><expr><name>message</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <expr_stmt><expr><call><name><name>msg</name>.<name>sendAndClose</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ioe</name></decl></param>) <block>{
                <expr_stmt><expr><name>fail</name> = true</expr>;</expr_stmt>
                <expr_stmt><expr><name>failMessage</name> = "IOException: " + <name>ioe</name></expr>;</expr_stmt>
                <return>return;</return>
            }</block></catch></try>
        }</block></function>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isFailed</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>fail</name></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>String</name></type> <name>getFailMessage</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>failMessage</name></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>replyTo</name><parameter_list>(<param><decl><type><name>String</name></type> <name>replyTo</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>replyToList</name>.<name>add</name></name><argument_list>(<argument><expr><name>replyTo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>to</name><parameter_list>(<param><decl><type><name>String</name></type> <name>to</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>toList</name>.<name>add</name></name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>cc</name><parameter_list>(<param><decl><type><name>String</name></type> <name>cc</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>ccList</name>.<name>add</name></name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>bcc</name><parameter_list>(<param><decl><type><name>String</name></type> <name>bcc</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>bccList</name>.<name>add</name></name><argument_list>(<argument><expr><name>bcc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>setSubject</name><parameter_list>(<param><decl><type><name>String</name></type> <name>subject</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>subject</name></name> = <name>subject</name></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>from</name><parameter_list>(<param><decl><type><name>String</name></type> <name>from</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>from</name></name> = <name>from</name></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>setMessage</name><parameter_list>(<param><decl><type><name>String</name></type> <name>message</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>message</name></name> = <name>message</name></expr>;</expr_stmt>
        }</block></function>

    }</block></class>

}</block></class>
</unit>
