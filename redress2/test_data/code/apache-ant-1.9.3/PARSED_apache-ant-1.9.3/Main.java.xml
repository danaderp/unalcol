<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\Main.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>PrintStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>PrintWriter</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Arrays</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collections</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashSet</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name>.<name>Entry</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Properties</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Set</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>input</name>.<name>DefaultInputHandler</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>input</name>.<name>InputHandler</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>launch</name>.<name>AntMain</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>listener</name>.<name>SilentLogger</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>property</name>.<name>GetProperty</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>property</name>.<name>ResolvePropertyMap</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>ClasspathUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>ProxySetup</name></name>;</import>


<comment type="javadoc">/**
 * Command line entry point into Ant. This class is entered via the
 * canonical `public static void main` entry point and reads the
 * command line arguments. It then assembles and executes an Ant
 * project.
 * &lt;p&gt;
 * If you integrating Ant into some other tool, this is not the class
 * to use as an entry point. Please see the source code of this
 * class to see how it manipulates the Ant project classes.
 *
 */</comment>
<class><specifier>public</specifier> class <name>Main</name> <super><implements>implements <name>AntMain</name></implements></super> <block>{

    <comment type="javadoc">/**
     * A Set of args that are handled by the launcher and should
     * not be seen by Main.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>LAUNCH_COMMANDS</name> =<init> <expr><call><name><name>Collections</name>
            .<name>unmodifiableSet</name></name><argument_list>(<argument><expr>new <call><name><name>HashSet</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Arrays</name>.<name>asList</name></name><argument_list>(<argument><expr>"-lib"</expr></argument>, <argument><expr>"-cp"</expr></argument>, <argument><expr>"-noclasspath"</expr></argument>,
                    <argument><expr>"--noclasspath"</expr></argument>, <argument><expr>"-nouserlib"</expr></argument>, <argument><expr>"-main"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default build file name. {@value} */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEFAULT_BUILD_FILENAME</name> =<init> <expr>"build.xml"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Our current message output status. Follows Project.MSG_XXX. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>msgOutputLevel</name> =<init> <expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** File that we are using for configuration. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>buildFile</name></decl>;</decl_stmt> <comment type="block">/* null */</comment>

    <comment type="javadoc">/** Stream to use for logging. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>PrintStream</name></type> <name>out</name> =<init> <expr><name><name>System</name>.<name>out</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Stream that we are using for logging error messages. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>PrintStream</name></type> <name>err</name> =<init> <expr><name><name>System</name>.<name>err</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The build targets. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>targets</name> =<init> <expr>new <call><name><name>Vector</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Set of properties that can be used by tasks. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Properties</name></type> <name>definedProps</name> =<init> <expr>new <call><name>Properties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Names of classes to add as listeners to project. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>listeners</name> =<init> <expr>new <call><name><name>Vector</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** File names of property files to load on startup. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>propertyFiles</name> =<init> <expr>new <call><name><name>Vector</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Indicates whether this build is to support interactive input */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>allowInput</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** keep going mode */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>keepGoingMode</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The Ant logger class. There may be only one logger. It will have
     * the right to use the 'out' PrintStream. The class must implements the
     * BuildLogger interface.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>loggerClassname</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The Ant InputHandler class.  There may be only one input
     * handler.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>inputHandlerClassname</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Whether or not output to the log is to be unadorned.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>emacsMode</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Whether or not log output should be reduced to the minimum
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>silent</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Whether or not this instance has successfully been
     * constructed and is ready to run.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>readyToRun</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Whether or not we should only parse and display the project help
     * information.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>projectHelp</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Whether or not a logfile is being used. This is used to
     * check if the output streams must be closed.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isLogFileUsed</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * optional thread priority
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Integer</name></type> <name>threadPriority</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * proxy flag: default is false
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>proxy</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Map</name><argument_list>&lt;<argument><name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>, <argument><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>extraArguments</name> =<init> <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>, <argument><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>GetProperty</name></type> <name>NOPROPERTIES</name> =<init> <expr>new <class><super><name>GetProperty</name></super><argument_list>()</argument_list><block>{
        <function><type><specifier>public</specifier> <name>Object</name></type> <name>getProperty</name><parameter_list>(<param><decl><type><name>String</name></type> <name>aName</name></decl></param>)</parameter_list> <block>{
            <comment type="line">// No existing property takes precedence</comment>
            <return>return <expr><name>null</name></expr>;</return>
        }</block></function>}</block></class></expr></init></decl>;</decl_stmt>




    <comment type="javadoc">/**
     * Prints the message of the Throwable if it (the message) is not
     * &lt;code&gt;null&lt;/code&gt;.
     *
     * @param t Throwable to print the message of.
     *          Must not be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>printMessage</name><parameter_list>(<param><decl><type><name>Throwable</name></type> <name>t</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>message</name> =<init> <expr><call><name><name>t</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>message</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Creates a new instance of this class using the
     * arguments specified, gives it any extra user properties which have been
     * specified, and then runs the build using the classloader provided.
     *
     * @param args Command line arguments. Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param additionalUserProperties Any extra properties to use in this
     *        build. May be &lt;code&gt;null&lt;/code&gt;, which is the equivalent to
     *        passing in an empty set of properties.
     * @param coreLoader Classloader used for core classes. May be
     *        &lt;code&gt;null&lt;/code&gt; in which case the system classloader is used.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>start</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></param>, <param><decl><type><name>Properties</name></type> <name>additionalUserProperties</name></decl></param>,
                             <param><decl><type><name>ClassLoader</name></type> <name>coreLoader</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Main</name></type> <name>m</name> =<init> <expr>new <call><name>Main</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>m</name>.<name>startAnt</name></name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>additionalUserProperties</name></expr></argument>, <argument><expr><name>coreLoader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Start Ant
     * @param args command line args
     * @param additionalUserProperties properties to set beyond those that
     *        may be specified on the args list
     * @param coreLoader - not used
     *
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>startAnt</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></param>, <param><decl><type><name>Properties</name></type> <name>additionalUserProperties</name></decl></param>,
                         <param><decl><type><name>ClassLoader</name></type> <name>coreLoader</name></decl></param>)</parameter_list> <block>{

        <try>try <block>{
            <expr_stmt><expr><call><name>processArgs</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>Throwable</name></type> <name>exc</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>handleLogfile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>printMessage</name><argument_list>(<argument><expr><name>exc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></catch></try>

        <if>if <condition>(<expr><name>additionalUserProperties</name> != <name>null</name></expr>)</condition><then> <block>{
            <for>for (<init><decl><type><name><name>Enumeration</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>e</name> =<init> <expr><call><name><name>additionalUserProperties</name>.<name>keys</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init>
                    <condition><expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>key</name> =<init> <expr>(<name>String</name>) <call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>property</name> =<init> <expr><call><name><name>additionalUserProperties</name>.<name>getProperty</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>definedProps</name>.<name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>property</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></then></if>

        <comment type="line">// expect the worst</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>exitCode</name> =<init> <expr>1</expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <try>try <block>{
                <expr_stmt><expr><call><name>runBuild</name><argument_list>(<argument><expr><name>coreLoader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>exitCode</name> = 0</expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>ExitStatusException</name></type> <name>ese</name></decl></param>) <block>{
                <expr_stmt><expr><name>exitCode</name> = <call><name><name>ese</name>.<name>getStatus</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>exitCode</name> != 0</expr>)</condition><then> <block>{
                    <throw>throw <expr><name>ese</name></expr>;</throw>
                }</block></then></if>
            }</block></catch></try>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
            <if>if <condition>(<expr><name>err</name> != <name><name>System</name>.<name>err</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>printMessage</name><argument_list>(<argument><expr><name>be</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></catch> <catch>catch (<param><decl><type><name>Throwable</name></type> <name>exc</name></decl></param>) <block>{
            <expr_stmt><expr><call><name><name>exc</name>.<name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>printMessage</name><argument_list>(<argument><expr><name>exc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch> <finally>finally <block>{
            <expr_stmt><expr><call><name>handleLogfile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>exitCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * This operation is expected to call {@link System#exit(int)}, which
     * is what the base version does.
     * However, it is possible to do something else.
     * @param exitCode code to exit with
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>exit</name><parameter_list>(<param><decl><type><name>int</name></type> <name>exitCode</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>System</name>.<name>exit</name></name><argument_list>(<argument><expr><name>exitCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Close logfiles, if we have been writing to them.
     *
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>handleLogfile</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>isLogFileUsed</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Command line entry point. This method kicks off the building
     * of a project object and executes a build using either a given
     * target or the default target.
     *
     * @param args Command line arguments. Must not be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Constructor used when creating Main for later arg processing
     * and startup
     */</comment>
    <constructor><specifier>public</specifier> <name>Main</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <comment type="javadoc">/**
     * Sole constructor, which parses and deals with command line
     * arguments.
     *
     * @param args Command line arguments. Must not be &lt;code&gt;null&lt;/code&gt;.
     *
     * @exception BuildException if the specified build file doesn't exist
     *                           or is a directory.
     *
     * @deprecated since 1.6.x
     */</comment>
    <constructor><specifier>protected</specifier> <name>Main</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>processArgs</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Process command line arguments.
     * When ant is started from Launcher, launcher-only arguments do not get
     * passed through to this routine.
     *
     * @param args the command line arguments.
     *
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>processArgs</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>searchForThis</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>searchForFile</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PrintStream</name></type> <name>logTo</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

        <comment type="line">// cycle through given args</comment>

        <decl_stmt><decl><type><name>boolean</name></type> <name>justPrintUsage</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>justPrintVersion</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>justPrintDiagnostics</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>ArgumentProcessorRegistry</name></type> <name>processorRegistry</name> =<init> <expr><call><name><name>ArgumentProcessorRegistry</name>.<name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>args</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>arg</name> =<init> <expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><call><name><name>arg</name>.<name>equals</name></name><argument_list>(<argument><expr>"-help"</expr></argument>)</argument_list></call> || <call><name><name>arg</name>.<name>equals</name></name><argument_list>(<argument><expr>"-h"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>justPrintUsage</name> = true</expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><call><name><name>arg</name>.<name>equals</name></name><argument_list>(<argument><expr>"-version"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>justPrintVersion</name> = true</expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><call><name><name>arg</name>.<name>equals</name></name><argument_list>(<argument><expr>"-diagnostics"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>justPrintDiagnostics</name> = true</expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><call><name><name>arg</name>.<name>equals</name></name><argument_list>(<argument><expr>"-quiet"</expr></argument>)</argument_list></call> || <call><name><name>arg</name>.<name>equals</name></name><argument_list>(<argument><expr>"-q"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>msgOutputLevel</name> = <name><name>Project</name>.<name>MSG_WARN</name></name></expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><call><name><name>arg</name>.<name>equals</name></name><argument_list>(<argument><expr>"-verbose"</expr></argument>)</argument_list></call> || <call><name><name>arg</name>.<name>equals</name></name><argument_list>(<argument><expr>"-v"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>msgOutputLevel</name> = <name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><call><name><name>arg</name>.<name>equals</name></name><argument_list>(<argument><expr>"-debug"</expr></argument>)</argument_list></call> || <call><name><name>arg</name>.<name>equals</name></name><argument_list>(<argument><expr>"-d"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>msgOutputLevel</name> = <name><name>Project</name>.<name>MSG_DEBUG</name></name></expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><call><name><name>arg</name>.<name>equals</name></name><argument_list>(<argument><expr>"-silent"</expr></argument>)</argument_list></call> || <call><name><name>arg</name>.<name>equals</name></name><argument_list>(<argument><expr>"-S"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>silent</name> = true</expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><call><name><name>arg</name>.<name>equals</name></name><argument_list>(<argument><expr>"-noinput"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>allowInput</name> = false</expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><call><name><name>arg</name>.<name>equals</name></name><argument_list>(<argument><expr>"-logfile"</expr></argument>)</argument_list></call> || <call><name><name>arg</name>.<name>equals</name></name><argument_list>(<argument><expr>"-l"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <try>try <block>{
                    <decl_stmt><decl><type><name>File</name></type> <name>logFile</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>i</name> + 1</expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>i</name>++</expr>;</expr_stmt>
                    <expr_stmt><expr><name>logTo</name> = new <call><name>PrintStream</name><argument_list>(<argument><expr>new <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>logFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>isLogFileUsed</name> = true</expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ioe</name></decl></param>) <block>{
                    <decl_stmt><decl><type><name>String</name></type> <name>msg</name> =<init> <expr>"Cannot write on the specified log file. "
                        + "Make sure the path exists and you have write "
                        + "permissions."</expr></init></decl>;</decl_stmt>
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></catch> <catch>catch (<param><decl><type><name>ArrayIndexOutOfBoundsException</name></type> <name>aioobe</name></decl></param>) <block>{
                    <decl_stmt><decl><type><name>String</name></type> <name>msg</name> =<init> <expr>"You must specify a log file when "
                        + "using the -log argument"</expr></init></decl>;</decl_stmt>
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></catch></try>
            }</block></then> <else>else <if>if <condition>(<expr><call><name><name>arg</name>.<name>equals</name></name><argument_list>(<argument><expr>"-buildfile"</expr></argument>)</argument_list></call> || <call><name><name>arg</name>.<name>equals</name></name><argument_list>(<argument><expr>"-file"</expr></argument>)</argument_list></call>
                       || <call><name><name>arg</name>.<name>equals</name></name><argument_list>(<argument><expr>"-f"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>i</name> = <call><name>handleArgBuildFile</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><call><name><name>arg</name>.<name>equals</name></name><argument_list>(<argument><expr>"-listener"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>i</name> = <call><name>handleArgListener</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><call><name><name>arg</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"-D"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>i</name> = <call><name>handleArgDefine</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><call><name><name>arg</name>.<name>equals</name></name><argument_list>(<argument><expr>"-logger"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>i</name> = <call><name>handleArgLogger</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><call><name><name>arg</name>.<name>equals</name></name><argument_list>(<argument><expr>"-inputhandler"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>i</name> = <call><name>handleArgInputHandler</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><call><name><name>arg</name>.<name>equals</name></name><argument_list>(<argument><expr>"-emacs"</expr></argument>)</argument_list></call> || <call><name><name>arg</name>.<name>equals</name></name><argument_list>(<argument><expr>"-e"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>emacsMode</name> = true</expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><call><name><name>arg</name>.<name>equals</name></name><argument_list>(<argument><expr>"-projecthelp"</expr></argument>)</argument_list></call> || <call><name><name>arg</name>.<name>equals</name></name><argument_list>(<argument><expr>"-p"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <comment type="line">// set the flag to display the targets and quit</comment>
                <expr_stmt><expr><name>projectHelp</name> = true</expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><call><name><name>arg</name>.<name>equals</name></name><argument_list>(<argument><expr>"-find"</expr></argument>)</argument_list></call> || <call><name><name>arg</name>.<name>equals</name></name><argument_list>(<argument><expr>"-s"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>searchForFile</name> = true</expr>;</expr_stmt>
                <comment type="line">// eat up next arg if present, default to build.xml</comment>
                <if>if <condition>(<expr><name>i</name> &lt; <name><name>args</name>.<name>length</name></name> - 1</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>searchForThis</name> = <name><name>args</name><index>[<expr>++<name>i</name></expr>]</index></name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then> <else>else <if>if <condition>(<expr><call><name><name>arg</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"-propertyfile"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>i</name> = <call><name>handleArgPropertyFile</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><call><name><name>arg</name>.<name>equals</name></name><argument_list>(<argument><expr>"-k"</expr></argument>)</argument_list></call> || <call><name><name>arg</name>.<name>equals</name></name><argument_list>(<argument><expr>"-keep-going"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>keepGoingMode</name> = true</expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><call><name><name>arg</name>.<name>equals</name></name><argument_list>(<argument><expr>"-nice"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>i</name> = <call><name>handleArgNice</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><call><name><name>LAUNCH_COMMANDS</name>.<name>contains</name></name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <comment type="line">//catch script/ant mismatch with a meaningful message</comment>
                <comment type="line">//we could ignore it, but there are likely to be other</comment>
                <comment type="line">//version problems, so we stamp down on the configuration now</comment>
                <decl_stmt><decl><type><name>String</name></type> <name>msg</name> =<init> <expr>"Ant's Main method is being handed "
                        + "an option " + <name>arg</name> + " that is only for the launcher class."
                        + "\nThis can be caused by a version mismatch between "
                        + "the ant script/.bat file and Ant itself."</expr></init></decl>;</decl_stmt>
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then> <else>else <if>if <condition>(<expr><call><name><name>arg</name>.<name>equals</name></name><argument_list>(<argument><expr>"-autoproxy"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>proxy</name> = true</expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><call><name><name>arg</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"-"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>boolean</name></type> <name>processed</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
                <for>for (<init><decl><type><name>ArgumentProcessor</name></type> <name>processor</name> :<range> <expr><call><name><name>processorRegistry</name>.<name>getProcessors</name></name><argument_list>()</argument_list></call></expr></range></decl></init>) <block>{
                    <decl_stmt><decl><type><name>int</name></type> <name>newI</name> =<init> <expr><call><name><name>processor</name>.<name>readArguments</name></name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>newI</name> != -1</expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>extraArgs</name> =<init> <expr><call><name><name>extraArguments</name>.<name>get</name></name><argument_list>(<argument><expr><call><name><name>processor</name>.<name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if>if <condition>(<expr><name>extraArgs</name> == <name>null</name></expr>)</condition><then> <block>{
                            <expr_stmt><expr><name>extraArgs</name> = new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>extraArguments</name>.<name>put</name></name><argument_list>(<argument><expr><call><name><name>processor</name>.<name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>extraArgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                        <for>for (<init>;</init> <condition><expr><name>i</name> &lt; <name>newI</name> &amp;&amp; <name>i</name> &lt; <name><name>args</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                            <expr_stmt><expr><call><name><name>extraArgs</name>.<name>add</name></name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></for>
                        <expr_stmt><expr><name>processed</name> = true</expr>;</expr_stmt>
                        <break>break;</break>
                    }</block></then></if>
                }</block></for>
                <if>if <condition>(<expr>!<name>processed</name></expr>)</condition><then> <block>{
                    <comment type="line">// we don't have any more args to recognize!</comment>
                    <decl_stmt><decl><type><name>String</name></type> <name>msg</name> =<init> <expr>"Unknown argument: " + <name>arg</name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>printUsage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if>
            }</block></then> <else>else <block>{
                <comment type="line">// if it's no other arg, it may be the target</comment>
                <expr_stmt><expr><call><name><name>targets</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
        }</block></for>

        <if>if <condition>(<expr><name>msgOutputLevel</name> &gt;= <name><name>Project</name>.<name>MSG_VERBOSE</name></name> || <name>justPrintVersion</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>printVersion</name><argument_list>(<argument><expr><name>msgOutputLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>justPrintUsage</name> || <name>justPrintVersion</name> || <name>justPrintDiagnostics</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>justPrintUsage</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>printUsage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name>justPrintDiagnostics</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>Diagnostics</name>.<name>doReport</name></name><argument_list>(<argument><expr><name><name>System</name>.<name>out</name></name></expr></argument>, <argument><expr><name>msgOutputLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <return>return;</return>
        }</block></then></if>

        <comment type="line">// if buildFile was not specified on the command line,</comment>
        <if>if <condition>(<expr><name>buildFile</name> == <name>null</name></expr>)</condition><then> <block>{
            <comment type="line">// but -find then search for it</comment>
            <if>if <condition>(<expr><name>searchForFile</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>searchForThis</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>buildFile</name> = <call><name>findBuildFile</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"user.dir"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>searchForThis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>buildFile</name> == <name>null</name></expr>)</condition><then> <block>{
                        <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Could not locate a build file!"</expr></argument>)</argument_list></call></expr>;</throw>
                    }</block></then></if>
                }</block></then> <else>else <block>{
                    <comment type="line">// no search file specified: so search an existing default file</comment>
                    <decl_stmt><decl><type><name><name>Iterator</name><argument_list>&lt;<argument><name>ProjectHelper</name></argument>&gt;</argument_list></name></type> <name>it</name> =<init> <expr><call><name><name>ProjectHelperRepository</name>.<name>getInstance</name></name><argument_list>()</argument_list></call>.<call><name>getHelpers</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <do>do <block>{
                        <decl_stmt><decl><type><name>ProjectHelper</name></type> <name>helper</name> =<init> <expr><call><name><name>it</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name>searchForThis</name> = <call><name><name>helper</name>.<name>getDefaultBuildFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>msgOutputLevel</name> &gt;= <name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr>)</condition><then> <block>{
                            <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Searching the default build file: " + <name>searchForThis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                        <expr_stmt><expr><name>buildFile</name> = <call><name>findBuildFile</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"user.dir"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>searchForThis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block> while <condition>(<expr><name>buildFile</name> == <name>null</name> &amp;&amp; <call><name><name>it</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition>;</do>
                    <if>if <condition>(<expr><name>buildFile</name> == <name>null</name></expr>)</condition><then> <block>{
                        <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Could not locate a build file!"</expr></argument>)</argument_list></call></expr>;</throw>
                    }</block></then></if>
                }</block></else></if>
            }</block></then> <else>else <block>{
                <comment type="line">// no build file specified: so search an existing default file</comment>
                <decl_stmt><decl><type><name><name>Iterator</name><argument_list>&lt;<argument><name>ProjectHelper</name></argument>&gt;</argument_list></name></type> <name>it</name> =<init> <expr><call><name><name>ProjectHelperRepository</name>.<name>getInstance</name></name><argument_list>()</argument_list></call>.<call><name>getHelpers</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <do>do <block>{
                    <decl_stmt><decl><type><name>ProjectHelper</name></type> <name>helper</name> =<init> <expr><call><name><name>it</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>buildFile</name> = new <call><name>File</name><argument_list>(<argument><expr><call><name><name>helper</name>.<name>getDefaultBuildFile</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>msgOutputLevel</name> &gt;= <name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Trying the default build file: " + <name>buildFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block> while <condition>(<expr>!<call><name><name>buildFile</name>.<name>exists</name></name><argument_list>()</argument_list></call> &amp;&amp; <call><name><name>it</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition>;</do>
            }</block></else></if>
        }</block></then></if>

        <comment type="line">// make sure buildfile exists</comment>
        <if>if <condition>(<expr>!<call><name><name>buildFile</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Buildfile: " + <name>buildFile</name> + " does not exist!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Build failed"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr><call><name><name>buildFile</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>File</name></type> <name>whatYouMeant</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name>buildFile</name></expr></argument>, <argument><expr>"build.xml"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>whatYouMeant</name>.<name>isFile</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>buildFile</name> = <name>whatYouMeant</name></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"What? Buildfile: " + <name>buildFile</name> + " is a dir!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Build failed"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></else></if>
        }</block></then></if>

        <comment type="line">// Normalize buildFile for re-import detection</comment>
        <expr_stmt><expr><name>buildFile</name> =
            <call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call>.<call><name>normalize</name><argument_list>(<argument><expr><call><name><name>buildFile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Load the property files specified by -propertyfile</comment>
        <expr_stmt><expr><call><name>loadPropertyFiles</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>msgOutputLevel</name> &gt;= <name><name>Project</name>.<name>MSG_INFO</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Buildfile: " + <name>buildFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>logTo</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>out</name> = <name>logTo</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>err</name> = <name>logTo</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>setOut</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>setErr</name></name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>readyToRun</name> = true</expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// --------------------------------------------------------</comment>
    <comment type="line">//    Methods for handling the command line arguments</comment>
    <comment type="line">// --------------------------------------------------------</comment>

    <comment type="javadoc">/** Handle the -buildfile, -file, -f argument */</comment>
    <function><type><specifier>private</specifier> <name>int</name></type> <name>handleArgBuildFile</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></param>, <param><decl><type><name>int</name></type> <name>pos</name></decl></param>)</parameter_list> <block>{
        <try>try <block>{
            <expr_stmt><expr><name>buildFile</name> = new <call><name>File</name><argument_list>(
                <argument><expr><name><name>args</name><index>[<expr>++<name>pos</name></expr>]</index></name>.<call><name>replace</name><argument_list>(<argument><expr>'/'</expr></argument>, <argument><expr><name><name>File</name>.<name>separatorChar</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>ArrayIndexOutOfBoundsException</name></type> <name>aioobe</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                <argument><expr>"You must specify a buildfile when using the -buildfile argument"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
        <return>return <expr><name>pos</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/** Handle -listener argument */</comment>
    <function><type><specifier>private</specifier> <name>int</name></type> <name>handleArgListener</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></param>, <param><decl><type><name>int</name></type> <name>pos</name></decl></param>)</parameter_list> <block>{
        <try>try <block>{
            <expr_stmt><expr><call><name><name>listeners</name>.<name>addElement</name></name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>pos</name> + 1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>pos</name>++</expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>ArrayIndexOutOfBoundsException</name></type> <name>aioobe</name></decl></param>) <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>msg</name> =<init> <expr>"You must specify a classname when "
                + "using the -listener argument"</expr></init></decl>;</decl_stmt>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
        <return>return <expr><name>pos</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/** Handler -D argument */</comment>
    <function><type><specifier>private</specifier> <name>int</name></type> <name>handleArgDefine</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></param>, <param><decl><type><name>int</name></type> <name>argPos</name></decl></param>)</parameter_list> <block>{
        <comment type="block">/* Interestingly enough, we get to here when a user
         * uses -Dname=value. However, in some cases, the OS
         * goes ahead and parses this out to args
         *   {"-Dname", "value"}
         * so instead of parsing on "=", we just make the "-D"
         * characters go away and skip one argument forward.
         *
         * I don't know how to predict when the JDK is going
         * to help or not, so we simply look for the equals sign.
         */</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>arg</name> =<init> <expr><name><name>args</name><index>[<expr><name>argPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> =<init> <expr><call><name><name>arg</name>.<name>substring</name></name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr><call><name><name>arg</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>value</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>posEq</name> =<init> <expr><call><name><name>name</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"="</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>posEq</name> &gt; 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>value</name> = <call><name><name>name</name>.<name>substring</name></name><argument_list>(<argument><expr><name>posEq</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>name</name> = <call><name><name>name</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>posEq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><name>argPos</name> &lt; <name><name>args</name>.<name>length</name></name> - 1</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>value</name> = <name><name>args</name><index>[<expr>++<name>argPos</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Missing value for property "
                                     + <name>name</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></else></if></else></if>
        <expr_stmt><expr><call><name><name>definedProps</name>.<name>put</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>argPos</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/** Handle the -logger argument. */</comment>
    <function><type><specifier>private</specifier> <name>int</name></type> <name>handleArgLogger</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></param>, <param><decl><type><name>int</name></type> <name>pos</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>loggerClassname</name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                <argument><expr>"Only one logger class may be specified."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <try>try <block>{
            <expr_stmt><expr><name>loggerClassname</name> = <name><name>args</name><index>[<expr>++<name>pos</name></expr>]</index></name></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>ArrayIndexOutOfBoundsException</name></type> <name>aioobe</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                <argument><expr>"You must specify a classname when using the -logger argument"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
        <return>return <expr><name>pos</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/** Handle the -inputhandler argument. */</comment>
    <function><type><specifier>private</specifier> <name>int</name></type> <name>handleArgInputHandler</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></param>, <param><decl><type><name>int</name></type> <name>pos</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>inputHandlerClassname</name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Only one input handler class may "
                                     + "be specified."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <try>try <block>{
            <expr_stmt><expr><name>inputHandlerClassname</name> = <name><name>args</name><index>[<expr>++<name>pos</name></expr>]</index></name></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>ArrayIndexOutOfBoundsException</name></type> <name>aioobe</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"You must specify a classname when"
                                     + " using the -inputhandler"
                                     + " argument"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
        <return>return <expr><name>pos</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/** Handle the -propertyfile argument. */</comment>
    <function><type><specifier>private</specifier> <name>int</name></type> <name>handleArgPropertyFile</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></param>, <param><decl><type><name>int</name></type> <name>pos</name></decl></param>)</parameter_list> <block>{
        <try>try <block>{
            <expr_stmt><expr><call><name><name>propertyFiles</name>.<name>addElement</name></name><argument_list>(<argument><expr><name><name>args</name><index>[<expr>++<name>pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>ArrayIndexOutOfBoundsException</name></type> <name>aioobe</name></decl></param>) <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>msg</name> =<init> <expr>"You must specify a property filename when "
                + "using the -propertyfile argument"</expr></init></decl>;</decl_stmt>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
        <return>return <expr><name>pos</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/** Handle the -nice argument. */</comment>
    <function><type><specifier>private</specifier> <name>int</name></type> <name>handleArgNice</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></param>, <param><decl><type><name>int</name></type> <name>pos</name></decl></param>)</parameter_list> <block>{
        <try>try <block>{
            <expr_stmt><expr><name>threadPriority</name> = <call><name><name>Integer</name>.<name>decode</name></name><argument_list>(<argument><expr><name><name>args</name><index>[<expr>++<name>pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>ArrayIndexOutOfBoundsException</name></type> <name>aioobe</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                <argument><expr>"You must supply a niceness value (1-10)"
                + " after the -nice option"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <catch>catch (<param><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Unrecognized niceness value: "
                                     + <name><name>args</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>

        <if>if <condition>(<expr><call><name><name>threadPriority</name>.<name>intValue</name></name><argument_list>()</argument_list></call> &lt; <name><name>Thread</name>.<name>MIN_PRIORITY</name></name>
            || <call><name><name>threadPriority</name>.<name>intValue</name></name><argument_list>()</argument_list></call> &gt; <name><name>Thread</name>.<name>MAX_PRIORITY</name></name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                <argument><expr>"Niceness value is out of the range 1-10"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr><name>pos</name></expr>;</return>
    }</block></function>

    <comment type="line">// --------------------------------------------------------</comment>
    <comment type="line">//    other methods</comment>
    <comment type="line">// --------------------------------------------------------</comment>

    <comment type="javadoc">/** Load the property files specified by -propertyfile */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>loadPropertyFiles</name><parameter_list>()</parameter_list> <block>{
        <for>for (<init><decl><type><name>String</name></type> <name>filename</name> :<range> <expr><name>propertyFiles</name></expr></range></decl></init>) <block>{
            <decl_stmt><decl><type><name>Properties</name></type> <name>props</name> =<init> <expr>new <call><name>Properties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>FileInputStream</name></type> <name>fis</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <try>try <block>{
                <expr_stmt><expr><name>fis</name> = new <call><name>FileInputStream</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>props</name>.<name>load</name></name><argument_list>(<argument><expr><name>fis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
                <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Could not load property file "
                                   + <name>filename</name> + ": " + <call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch> <finally>finally <block>{
                <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>fis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></finally></try>

            <comment type="line">// ensure that -D properties take precedence</comment>
            <decl_stmt><decl><type><name><name>Enumeration</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>propertyNames</name> =<init> <expr><call><name><name>props</name>.<name>propertyNames</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>propertyNames</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>name</name> =<init> <expr>(<name>String</name>) <call><name><name>propertyNames</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>definedProps</name>.<name>getProperty</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>definedProps</name>.<name>put</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>props</name>.<name>getProperty</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></while>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Helper to get the parent file for a given file.
     * &lt;p&gt;
     * Added to simulate File.getParentFile() from JDK 1.2.
     * @deprecated since 1.6.x
     *
     * @param file   File to find parent of. Must not be &lt;code&gt;null&lt;/code&gt;.
     * @return       Parent file or null if none
     */</comment>
    <function><type><specifier>private</specifier> <name>File</name></type> <name>getParentFile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>file</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>parent</name> =<init> <expr><call><name><name>file</name>.<name>getParentFile</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>parent</name> != <name>null</name> &amp;&amp; <name>msgOutputLevel</name> &gt;= <name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Searching in " + <call><name><name>parent</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <return>return <expr><name>parent</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Search parent directories for the build file.
     * &lt;p&gt;
     * Takes the given target as a suffix to append to each
     * parent directory in search of a build file.  Once the
     * root of the file-system has been reached &lt;code&gt;null&lt;/code&gt;
     * is returned.
     *
     * @param start  Leaf directory of search.
     *               Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param suffix  Suffix filename to look for in parents.
     *                Must not be &lt;code&gt;null&lt;/code&gt;.
     *
     * @return A handle to the build file if one is found, &lt;code&gt;null&lt;/code&gt; if not
     */</comment>
    <function><type><specifier>private</specifier> <name>File</name></type> <name>findBuildFile</name><parameter_list>(<param><decl><type><name>String</name></type> <name>start</name></decl></param>, <param><decl><type><name>String</name></type> <name>suffix</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>msgOutputLevel</name> &gt;= <name><name>Project</name>.<name>MSG_INFO</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Searching for " + <name>suffix</name> + " ..."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name>File</name></type> <name>parent</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call>.<call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>file</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// check if the target file exists in the current directory</comment>
        <while>while <condition>(<expr>!<call><name><name>file</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <comment type="line">// change to parent directory</comment>
            <expr_stmt><expr><name>parent</name> = <call><name>getParentFile</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// if parent is null, then we are at the root of the fs,</comment>
            <comment type="line">// complain that we can't find the build file.</comment>
            <if>if <condition>(<expr><name>parent</name> == <name>null</name></expr>)</condition><then> <block>{
                <return>return <expr><name>null</name></expr>;</return>
            }</block></then></if>

            <comment type="line">// refresh our file handle</comment>
            <expr_stmt><expr><name>file</name> = new <call><name>File</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>

        <return>return <expr><name>file</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Executes the build. If the constructor for this instance failed
     * (e.g. returned after issuing a warning), this method returns
     * immediately.
     *
     * @param coreLoader The classloader to use to find core classes.
     *                   May be &lt;code&gt;null&lt;/code&gt;, in which case the
     *                   system classloader is used.
     *
     * @exception BuildException if the build fails
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>runBuild</name><parameter_list>(<param><decl><type><name>ClassLoader</name></type> <name>coreLoader</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{

        <if>if <condition>(<expr>!<name>readyToRun</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>ArgumentProcessorRegistry</name></type> <name>processorRegistry</name> =<init> <expr><call><name><name>ArgumentProcessorRegistry</name>.<name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>ArgumentProcessor</name></type> <name>processor</name> :<range> <expr><call><name><name>processorRegistry</name>.<name>getProcessors</name></name><argument_list>()</argument_list></call></expr></range></decl></init>) <block>{
            <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>extraArgs</name> =<init> <expr><call><name><name>extraArguments</name>.<name>get</name></name><argument_list>(<argument><expr><call><name><name>processor</name>.<name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>extraArgs</name> != <name>null</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><call><name><name>processor</name>.<name>handleArg</name></name><argument_list>(<argument><expr><name>extraArgs</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <return>return;</return>
                }</block></then></if>
            }</block></then></if>
        }</block></for>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Project</name></type> <name>project</name> =<init> <expr>new <call><name>Project</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>setCoreLoader</name></name><argument_list>(<argument><expr><name>coreLoader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Throwable</name></type> <name>error</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

        <try>try <block>{
            <expr_stmt><expr><call><name>addBuildListeners</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>addInputHandler</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>PrintStream</name></type> <name>savedErr</name> =<init> <expr><name><name>System</name>.<name>err</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>PrintStream</name></type> <name>savedOut</name> =<init> <expr><name><name>System</name>.<name>out</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>InputStream</name></type> <name>savedIn</name> =<init> <expr><name><name>System</name>.<name>in</name></name></expr></init></decl>;</decl_stmt>

            <comment type="line">// use a system manager that prevents from System.exit()</comment>
            <decl_stmt><decl><type><name>SecurityManager</name></type> <name>oldsm</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>oldsm</name> = <call><name><name>System</name>.<name>getSecurityManager</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <comment type="line">//SecurityManager can not be installed here for backwards</comment>
                <comment type="line">//compatibility reasons (PD). Needs to be loaded prior to</comment>
                <comment type="line">//ant class if we are going to implement it.</comment>
                <comment type="line">//System.setSecurityManager(new NoExitSecurityManager());</comment>
            <try>try <block>{
                <if>if <condition>(<expr><name>allowInput</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>project</name>.<name>setDefaultInputStream</name></name><argument_list>(<argument><expr><name><name>System</name>.<name>in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><call><name><name>System</name>.<name>setIn</name></name><argument_list>(<argument><expr>new <call><name>DemuxInputStream</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>System</name>.<name>setOut</name></name><argument_list>(<argument><expr>new <call><name>PrintStream</name><argument_list>(<argument><expr>new <call><name>DemuxOutputStream</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>System</name>.<name>setErr</name></name><argument_list>(<argument><expr>new <call><name>PrintStream</name><argument_list>(<argument><expr>new <call><name>DemuxOutputStream</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


                <if>if <condition>(<expr>!<name>projectHelp</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>project</name>.<name>fireBuildStarted</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <comment type="line">// set the thread priorities</comment>
                <if>if <condition>(<expr><name>threadPriority</name> != <name>null</name></expr>)</condition><then> <block>{
                    <try>try <block>{
                        <expr_stmt><expr><call><name><name>project</name>.<name>log</name></name><argument_list>(<argument><expr>"Setting Ant's thread priority to "
                                + <name>threadPriority</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>Thread</name>.<name>currentThread</name></name><argument_list>()</argument_list></call>.<call><name>setPriority</name><argument_list>(<argument><expr><call><name><name>threadPriority</name>.<name>intValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block> <catch>catch (<param><decl><type><name>SecurityException</name></type> <name>swallowed</name></decl></param>) <block>{
                        <comment type="line">//we cannot set the priority here.</comment>
                        <expr_stmt><expr><call><name><name>project</name>.<name>log</name></name><argument_list>(<argument><expr>"A security manager refused to set the -nice value"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></catch></try>
                }</block></then></if>

                <expr_stmt><expr><call><name>setProperties</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>project</name>.<name>setKeepGoingMode</name></name><argument_list>(<argument><expr><name>keepGoingMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>proxy</name></expr>)</condition><then> <block>{
                    <comment type="line">//proxy setup if enabled</comment>
                    <decl_stmt><decl><type><name>ProxySetup</name></type> <name>proxySetup</name> =<init> <expr>new <call><name>ProxySetup</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>proxySetup</name>.<name>enableProxies</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <for>for (<init><decl><type><name>ArgumentProcessor</name></type> <name>processor</name> :<range> <expr><call><name><name>processorRegistry</name>.<name>getProcessors</name></name><argument_list>()</argument_list></call></expr></range></decl></init>) <block>{
                    <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>extraArgs</name> =<init> <expr><call><name><name>extraArguments</name>.<name>get</name></name><argument_list>(<argument><expr><call><name><name>processor</name>.<name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>extraArgs</name> != <name>null</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>processor</name>.<name>prepareConfigure</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr><name>extraArgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></for>

                <expr_stmt><expr><call><name><name>ProjectHelper</name>.<name>configureProject</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr><name>buildFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <for>for (<init><decl><type><name>ArgumentProcessor</name></type> <name>processor</name> :<range> <expr><call><name><name>processorRegistry</name>.<name>getProcessors</name></name><argument_list>()</argument_list></call></expr></range></decl></init>) <block>{
                    <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>extraArgs</name> =<init> <expr><call><name><name>extraArguments</name>.<name>get</name></name><argument_list>(<argument><expr><call><name><name>processor</name>.<name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>extraArgs</name> != <name>null</name></expr>)</condition><then> <block>{
                        <if>if <condition>(<expr><call><name><name>processor</name>.<name>handleArg</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr><name>extraArgs</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                            <return>return;</return>
                        }</block></then></if>
                    }</block></then></if>
                }</block></for>

                <if>if <condition>(<expr><name>projectHelp</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>printDescription</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>printTargets</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr><name>msgOutputLevel</name> &gt; <name><name>Project</name>.<name>MSG_INFO</name></name></expr></argument>,
                            <argument><expr><name>msgOutputLevel</name> &gt; <name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return;</return>
                }</block></then></if>

                <comment type="line">// make sure that we have a target to execute</comment>
                <if>if <condition>(<expr><call><name><name>targets</name>.<name>size</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><call><name><name>project</name>.<name>getDefaultTarget</name></name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>targets</name>.<name>addElement</name></name><argument_list>(<argument><expr><call><name><name>project</name>.<name>getDefaultTarget</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then></if>

                <expr_stmt><expr><call><name><name>project</name>.<name>executeTargets</name></name><argument_list>(<argument><expr><name>targets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <finally>finally <block>{
                <comment type="line">// put back the original security manager</comment>
                <comment type="line">//The following will never eval to true. (PD)</comment>
                <if>if <condition>(<expr><name>oldsm</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>System</name>.<name>setSecurityManager</name></name><argument_list>(<argument><expr><name>oldsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <expr_stmt><expr><call><name><name>System</name>.<name>setOut</name></name><argument_list>(<argument><expr><name>savedOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>System</name>.<name>setErr</name></name><argument_list>(<argument><expr><name>savedErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>System</name>.<name>setIn</name></name><argument_list>(<argument><expr><name>savedIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></finally></try>
        }</block> <catch>catch (<param><decl><type><name>RuntimeException</name></type> <name>exc</name></decl></param>) <block>{
            <expr_stmt><expr><name>error</name> = <name>exc</name></expr>;</expr_stmt>
            <throw>throw <expr><name>exc</name></expr>;</throw>
        }</block></catch> <catch>catch (<param><decl><type><name>Error</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><name>error</name> = <name>e</name></expr>;</expr_stmt>
            <throw>throw <expr><name>e</name></expr>;</throw>
        }</block></catch> <finally>finally <block>{
            <if>if <condition>(<expr>!<name>projectHelp</name></expr>)</condition><then> <block>{
                <try>try <block>{
                    <expr_stmt><expr><call><name><name>project</name>.<name>fireBuildFinished</name></name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>Throwable</name></type> <name>t</name></decl></param>) <block>{
                    <comment type="line">// yes, I know it is bad style to catch Throwable,</comment>
                    <comment type="line">// but if we don't, we lose valuable information</comment>
                    <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"Caught an exception while logging the"
                                       + " end of the build.  Exception was:"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>t</name>.<name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>error</name> != <name>null</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"There has been an error prior to"
                                           + " that:"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>error</name>.<name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></catch></try>
            }</block></then> <else>else <if>if <condition>(<expr><name>error</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>project</name>.<name>log</name></name><argument_list>(<argument><expr><call><name><name>error</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_ERR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if>
        }</block></finally></try>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>setProperties</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Project</name></type> <name>project</name></decl></param>)</parameter_list> <block>{

        <expr_stmt><expr><call><name><name>project</name>.<name>init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// resolve properties</comment>
        <decl_stmt><decl><type><name>PropertyHelper</name></type> <name>propertyHelper</name> =<init> <expr><call><name><name>PropertyHelper</name>.<name>getPropertyHelper</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><annotation>@<name>SuppressWarnings</name><argument_list>({ "rawtypes", "unchecked" })</argument_list></annotation>
        <name>Map</name></type> <name>raw</name> =<init> <expr>new <call><name>HashMap</name><argument_list>(<argument><expr><name>definedProps</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><annotation>@<name>SuppressWarnings</name><argument_list>("unchecked")</argument_list></annotation>
        <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>props</name> =<init> <expr><name>raw</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>ResolvePropertyMap</name></type> <name>resolver</name> =<init> <expr>new <call><name>ResolvePropertyMap</name><argument_list>(<argument><expr><name>project</name></expr></argument>,
                <argument><expr><name>NOPROPERTIES</name></expr></argument>, <argument><expr><call><name><name>propertyHelper</name>.<name>getExpanders</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>resolver</name>.<name>resolveAllProperties</name></name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// set user-define properties</comment>
        <for>for (<init><decl><type><name><name>Entry</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>ent</name> :<range> <expr><call><name><name>props</name>.<name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>) <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>arg</name> =<init> <expr><call><name><name>ent</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Object</name></type> <name>value</name> =<init> <expr><call><name><name>ent</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>project</name>.<name>setUserProperty</name></name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><call><name><name>String</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <expr_stmt><expr><call><name><name>project</name>.<name>setUserProperty</name></name><argument_list>(<argument><expr><name><name>MagicNames</name>.<name>ANT_FILE</name></name></expr></argument>,
                                <argument><expr><call><name><name>buildFile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>setUserProperty</name></name><argument_list>(<argument><expr><name><name>MagicNames</name>.<name>ANT_FILE_TYPE</name></name></expr></argument>,
                                <argument><expr><name><name>MagicNames</name>.<name>ANT_FILE_TYPE_FILE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Adds the listeners specified in the command line arguments,
     * along with the default listener, to the specified project.
     *
     * @param project The project to add listeners to.
     *                Must not be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>addBuildListeners</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>)</parameter_list> <block>{

        <comment type="line">// Add the default listener</comment>
        <expr_stmt><expr><call><name><name>project</name>.<name>addBuildListener</name></name><argument_list>(<argument><expr><call><name>createLogger</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>count</name> =<init> <expr><call><name><name>listeners</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>count</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>className</name> =<init> <expr>(<name>String</name>) <call><name><name>listeners</name>.<name>elementAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>BuildListener</name></type> <name>listener</name> =<init>
                    <expr>(<name>BuildListener</name>) <call><name><name>ClasspathUtils</name>.<name>newInstance</name></name><argument_list>(<argument><expr><name>className</name></expr></argument>,
                            <argument><expr><name><name>Main</name>.<name><name/></name></name>class.<call><name>getClassLoader</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>BuildListener</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>project</name>.<name>setProjectReference</name></name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>project</name>.<name>addBuildListener</name></name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Creates the InputHandler and adds it to the project.
     *
     * @param project the project instance.
     *
     * @exception BuildException if a specified InputHandler
     *                           implementation could not be loaded.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>addInputHandler</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>InputHandler</name></type> <name>handler</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>inputHandlerClassname</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>handler</name> = new <call><name>DefaultInputHandler</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>handler</name> = (<name>InputHandler</name>) <call><name><name>ClasspathUtils</name>.<name>newInstance</name></name><argument_list>(
                    <argument><expr><name>inputHandlerClassname</name></expr></argument>, <argument><expr><name><name>Main</name>.<name><name/></name></name>class.<call><name>getClassLoader</name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><name><name>InputHandler</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>project</name>.<name>setProjectReference</name></name><argument_list>(<argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><call><name><name>project</name>.<name>setInputHandler</name></name><argument_list>(<argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// TODO: (Jon Skeet) Any reason for writing a message and then using a bare</comment>
    <comment type="line">// RuntimeException rather than just using a BuildException here? Is it</comment>
    <comment type="line">// in case the message could end up being written to no loggers (as the</comment>
    <comment type="line">// loggers could have failed to be created due to this failure)?</comment>
    <comment type="javadoc">/**
     * Creates the default build logger for sending build events to the ant
     * log.
     *
     * @return the logger instance for this build.
     */</comment>
    <function><type><specifier>private</specifier> <name>BuildLogger</name></type> <name>createLogger</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>BuildLogger</name></type> <name>logger</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>silent</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>logger</name> = new <call><name>SilentLogger</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>msgOutputLevel</name> = <name><name>Project</name>.<name>MSG_WARN</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>emacsMode</name> = true</expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><name>loggerClassname</name> != <name>null</name></expr>)</condition><then> <block>{
            <try>try <block>{
                <expr_stmt><expr><name>logger</name> = (<name>BuildLogger</name>) <call><name><name>ClasspathUtils</name>.<name>newInstance</name></name><argument_list>(
                        <argument><expr><name>loggerClassname</name></expr></argument>, <argument><expr><name><name>Main</name>.<name><name/></name></name>class.<call><name>getClassLoader</name><argument_list>()</argument_list></call></expr></argument>,
                        <argument><expr><name><name>BuildLogger</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>e</name></decl></param>) <block>{
                <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"The specified logger class "
                    + <name>loggerClassname</name>
                    + " could not be used because " + <call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>()</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>logger</name> = new <call><name>DefaultLogger</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if></else></if>

        <expr_stmt><expr><call><name><name>logger</name>.<name>setMessageOutputLevel</name></name><argument_list>(<argument><expr><name>msgOutputLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logger</name>.<name>setOutputPrintStream</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logger</name>.<name>setErrorPrintStream</name></name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logger</name>.<name>setEmacsMode</name></name><argument_list>(<argument><expr><name>emacsMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>logger</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Prints the usage information for this class to &lt;code&gt;System.out&lt;/code&gt;.
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>printUsage</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"ant [options] [target [target2 [target3] ...]]"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Options: "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"  -help, -h              print this message"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"  -projecthelp, -p       print project help information"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"  -version               print the version information and exit"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"  -diagnostics           print information that might be helpful to"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"                         diagnose or report problems."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"  -quiet, -q             be extra quiet"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"  -silent, -S            print nothing but task outputs and build failures"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"  -verbose, -v           be extra verbose"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"  -debug, -d             print debugging information"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"  -emacs, -e             produce logging information without adornments"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"  -lib &lt;path&gt;            specifies a path to search for jars and classes"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"  -logfile &lt;file&gt;        use given file for log"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"    -l     &lt;file&gt;                ''"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"  -logger &lt;classname&gt;    the class which is to perform logging"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"  -listener &lt;classname&gt;  add an instance of class as a project listener"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"  -noinput               do not allow interactive input"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"  -buildfile &lt;file&gt;      use given buildfile"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"    -file    &lt;file&gt;              ''"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"    -f       &lt;file&gt;              ''"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"  -D&lt;property&gt;=&lt;value&gt;   use value for given property"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"  -keep-going, -k        execute all targets that do not depend"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"                         on failed target(s)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"  -propertyfile &lt;name&gt;   load all properties from file with -D"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"                         properties taking precedence"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"  -inputhandler &lt;class&gt;  the class which will handle input requests"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"  -find &lt;file&gt;           (s)earch for buildfile towards the root of"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"    -s  &lt;file&gt;           the filesystem and use it"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"  -nice  number          A niceness value for the main thread:"
                + "                         1 (lowest) to 10 (highest); 5 is the default"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"  -nouserlib             Run ant without using the jar files from"
                + "                         ${user.home}/.ant/lib"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"  -noclasspath           Run ant without using CLASSPATH"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"  -autoproxy             Java1.5+: use the OS proxy settings"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"  -main &lt;class&gt;          override Ant's normal entry point"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>ArgumentProcessor</name></type> <name>processor</name> :<range> <expr><call><name><name>ArgumentProcessorRegistry</name>.<name>getInstance</name></name><argument_list>()</argument_list></call>.<call><name>getProcessors</name><argument_list>()</argument_list></call></expr></range></decl></init>) <block>{
            <expr_stmt><expr><call><name><name>processor</name>.<name>printUsage</name></name><argument_list>(<argument><expr><name><name>System</name>.<name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Prints the Ant version information to &lt;code&gt;System.out&lt;/code&gt;.
     *
     * @exception BuildException if the version information is unavailable
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>printVersion</name><parameter_list>(<param><decl><type><name>int</name></type> <name>logLevel</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><call><name>getAntVersion</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Cache of the Ant version information when it has been loaded.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>antVersion</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Cache of the short Ant version information when it has been loaded.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>shortAntVersion</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Returns the Ant version information, if available. Once the information
     * has been loaded once, it's cached and returned from the cache on future
     * calls.
     *
     * @return the Ant version information as a String
     *         (always non-&lt;code&gt;null&lt;/code&gt;)
     *
     * @exception BuildException if the version information is unavailable
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>synchronized</specifier> <name>String</name></type> <name>getAntVersion</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>antVersion</name> == <name>null</name></expr>)</condition><then> <block>{
            <try>try <block>{
                <decl_stmt><decl><type><name>Properties</name></type> <name>props</name> =<init> <expr>new <call><name>Properties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>InputStream</name></type> <name>in</name> =<init>
                    <expr><name><name>Main</name>.<name><name/></name></name>class.<call><name>getResourceAsStream</name><argument_list>(<argument><expr>"/org/apache/tools/ant/version.txt"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>props</name>.<name>load</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>in</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>shortAntVersion</name> = <call><name><name>props</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"VERSION"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>StringBuffer</name></type> <name>msg</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>msg</name>.<name>append</name></name><argument_list>(<argument><expr>"Apache Ant(TM) version "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>msg</name>.<name>append</name></name><argument_list>(<argument><expr><name>shortAntVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>msg</name>.<name>append</name></name><argument_list>(<argument><expr>" compiled on "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>msg</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>props</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"DATE"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>antVersion</name> = <call><name><name>msg</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ioe</name></decl></param>) <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Could not load the version information:"
                                         + <call><name><name>ioe</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch> <catch>catch (<param><decl><type><name>NullPointerException</name></type> <name>npe</name></decl></param>) <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Could not load the version information."</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></then></if>
        <return>return <expr><name>antVersion</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the short Ant version information, if available. Once the information
     * has been loaded once, it's cached and returned from the cache on future
     * calls.
     * 
     * @return the short Ant version information as a String
     *         (always non-&lt;code&gt;null&lt;/code&gt;)
     *         
     * @throws BuildException BuildException if the version information is unavailable
     * @since Ant 1.9.3
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getShortAntVersion</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>shortAntVersion</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>getAntVersion</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>shortAntVersion</name></expr>;</return>
    }</block></function>

     <comment type="javadoc">/**
      * Prints the description of a project (if there is one) to
      * &lt;code&gt;System.out&lt;/code&gt;.
      *
      * @param project The project to display a description of.
      *                Must not be &lt;code&gt;null&lt;/code&gt;.
      */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>printDescription</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>)</parameter_list> <block>{
       <if>if <condition>(<expr><call><name><name>project</name>.<name>getDescription</name></name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>project</name>.<name>log</name></name><argument_list>(<argument><expr><call><name><name>project</name>.<name>getDescription</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Targets in imported files with a project name
     * and not overloaded by the main build file will
     * be in the target map twice. This method
     * removes the duplicate target.
     * @param targets the targets to filter.
     * @return the filtered targets.
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Target</name></argument>&gt;</argument_list></name></type> <name>removeDuplicateTargets</name><parameter_list>(<param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Target</name></argument>&gt;</argument_list></name></type> <name>targets</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>Location</name></argument>, <argument><name>Target</name></argument>&gt;</argument_list></name></type> <name>locationMap</name> =<init> <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>Location</name></argument>, <argument><name>Target</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name><name>Entry</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Target</name></argument>&gt;</argument_list></name></type> <name>entry</name> :<range> <expr><call><name><name>targets</name>.<name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>) <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>name</name> =<init> <expr><call><name><name>entry</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Target</name></type> <name>target</name> =<init> <expr><call><name><name>entry</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Target</name></type> <name>otherTarget</name> =<init> <expr><call><name><name>locationMap</name>.<name>get</name></name><argument_list>(<argument><expr><call><name><name>target</name>.<name>getLocation</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// Place this entry in the location map if</comment>
            <comment type="line">//  a) location is not in the map</comment>
            <comment type="line">//  b) location is in map, but its name is longer</comment>
            <comment type="line">//     (an imported target will have a name. prefix)</comment>
            <if>if <condition>(<expr><name>otherTarget</name> == <name>null</name>
                || <call><name><name>otherTarget</name>.<name>getName</name></name><argument_list>()</argument_list></call>.<call><name>length</name><argument_list>()</argument_list></call> &gt; <call><name><name>name</name>.<name>length</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>locationMap</name>.<name>put</name></name><argument_list>(
                    <argument><expr><call><name><name>target</name>.<name>getLocation</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Smallest name wins</comment>
            }</block></then></if>
        }</block></for>
        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Target</name></argument>&gt;</argument_list></name></type> <name>ret</name> =<init> <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Target</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>Target</name></type> <name>target</name> :<range> <expr><call><name><name>locationMap</name>.<name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>) <block>{
            <expr_stmt><expr><call><name><name>ret</name>.<name>put</name></name><argument_list>(<argument><expr><call><name><name>target</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>ret</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Prints a list of all targets in the specified project to
     * &lt;code&gt;System.out&lt;/code&gt;, optionally including subtargets.
     *
     * @param project The project to display a description of.
     *                Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param printSubTargets Whether or not subtarget names should also be
     *                        printed.
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>printTargets</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>printSubTargets</name></decl></param>,
            <param><decl><type><name>boolean</name></type> <name>printDependencies</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// find the target with the longest name</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>maxLength</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Target</name></argument>&gt;</argument_list></name></type> <name>ptargets</name> =<init> <expr><call><name>removeDuplicateTargets</name><argument_list>(<argument><expr><call><name><name>project</name>.<name>getTargets</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// split the targets in top-level and sub-targets depending</comment>
        <comment type="line">// on the presence of a description</comment>
        <decl_stmt><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>topNames</name> =<init> <expr>new <call><name><name>Vector</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>topDescriptions</name> =<init> <expr>new <call><name><name>Vector</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name><name>Enumeration</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>topDependencies</name> =<init> <expr>new <call><name><name>Vector</name><argument_list>&lt;<argument><name><name>Enumeration</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>subNames</name> =<init> <expr>new <call><name><name>Vector</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name><name>Enumeration</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>subDependencies</name> =<init> <expr>new <call><name><name>Vector</name><argument_list>&lt;<argument><name><name>Enumeration</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>Target</name></type> <name>currentTarget</name> :<range> <expr><call><name><name>ptargets</name>.<name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>) <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>targetName</name> =<init> <expr><call><name><name>currentTarget</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>targetName</name>.<name>equals</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <continue>continue;</continue>
            }</block></then></if>
            <decl_stmt><decl><type><name>String</name></type> <name>targetDescription</name> =<init> <expr><call><name><name>currentTarget</name>.<name>getDescription</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// maintain a sorted list of targets</comment>
            <if>if <condition>(<expr><name>targetDescription</name> == <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>pos</name> =<init> <expr><call><name>findTargetPosition</name><argument_list>(<argument><expr><name>subNames</name></expr></argument>, <argument><expr><name>targetName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>subNames</name>.<name>insertElementAt</name></name><argument_list>(<argument><expr><name>targetName</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>printDependencies</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>subDependencies</name>.<name>insertElementAt</name></name><argument_list>(<argument><expr><call><name><name>currentTarget</name>.<name>getDependencies</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then> <else>else <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>pos</name> =<init> <expr><call><name>findTargetPosition</name><argument_list>(<argument><expr><name>topNames</name></expr></argument>, <argument><expr><name>targetName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>topNames</name>.<name>insertElementAt</name></name><argument_list>(<argument><expr><name>targetName</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>topDescriptions</name>.<name>insertElementAt</name></name><argument_list>(<argument><expr><name>targetDescription</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><call><name><name>targetName</name>.<name>length</name></name><argument_list>()</argument_list></call> &gt; <name>maxLength</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>maxLength</name> = <call><name><name>targetName</name>.<name>length</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <if>if <condition>(<expr><name>printDependencies</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>topDependencies</name>.<name>insertElementAt</name></name><argument_list>(<argument><expr><call><name><name>currentTarget</name>.<name>getDependencies</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></else></if>
        }</block></for>

        <expr_stmt><expr><call><name>printTargets</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr><name>topNames</name></expr></argument>, <argument><expr><name>topDescriptions</name></expr></argument>, <argument><expr><name>topDependencies</name></expr></argument>,
                <argument><expr>"Main targets:"</expr></argument>, <argument><expr><name>maxLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//if there were no main targets, we list all subtargets</comment>
        <comment type="line">//as it means nothing has a description</comment>
        <if>if <condition>(<expr><call><name><name>topNames</name>.<name>size</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>printSubTargets</name> = true</expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>printSubTargets</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>printTargets</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr><name>subNames</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>subDependencies</name></expr></argument>, <argument><expr>"Other targets:"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name>String</name></type> <name>defaultTarget</name> =<init> <expr><call><name><name>project</name>.<name>getDefaultTarget</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>defaultTarget</name> != <name>null</name> &amp;&amp; !"".<call><name>equals</name><argument_list>(<argument><expr><name>defaultTarget</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">// shouldn't need to check but...</comment>
            <expr_stmt><expr><call><name><name>project</name>.<name>log</name></name><argument_list>(<argument><expr>"Default target: " + <name>defaultTarget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Searches for the correct place to insert a name into a list so as
     * to keep the list sorted alphabetically.
     *
     * @param names The current list of names. Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param name  The name to find a place for.
     *              Must not be &lt;code&gt;null&lt;/code&gt;.
     *
     * @return the correct place in the list for the given name
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>findTargetPosition</name><parameter_list>(<param><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>names</name></decl></param>, <param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>size</name> =<init> <expr><call><name><name>names</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>res</name> =<init> <expr><name>size</name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>size</name> &amp;&amp; <name>res</name> == <name>size</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <if>if <condition>(<expr><call><name><name>name</name>.<name>compareTo</name></name><argument_list>(<argument><expr><call><name><name>names</name>.<name>elementAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>res</name> = <name>i</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <return>return <expr><name>res</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Writes a formatted list of target names to &lt;code&gt;System.out&lt;/code&gt;
     * with an optional description.
     *
     *
     * @param project the project instance.
     * @param names The names to be printed.
     *              Must not be &lt;code&gt;null&lt;/code&gt;.
     * @param descriptions The associated target descriptions.
     *                     May be &lt;code&gt;null&lt;/code&gt;, in which case
     *                     no descriptions are displayed.
     *                     If non-&lt;code&gt;null&lt;/code&gt;, this should have
     *                     as many elements as &lt;code&gt;names&lt;/code&gt;.
     * @param topDependencies The list of dependencies for each target.
     *                        The dependencies are listed as a non null
     *                        enumeration of String.
     * @param heading The heading to display.
     *                Should not be &lt;code&gt;null&lt;/code&gt;.
     * @param maxlen The maximum length of the names of the targets.
     *               If descriptions are given, they are padded to this
     *               position so they line up (so long as the names really
     *               &lt;i&gt;are&lt;/i&gt; shorter than this).
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>printTargets</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>, <param><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>names</name></decl></param>,
                                     <param><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>descriptions</name></decl></param>, <param><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name><name>Enumeration</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>dependencies</name></decl></param>,
                                     <param><decl><type><name>String</name></type> <name>heading</name></decl></param>,
                                     <param><decl><type><name>int</name></type> <name>maxlen</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// now, start printing the targets and their descriptions</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>lSep</name> =<init> <expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"line.separator"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// got a bit annoyed that I couldn't find a pad function</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>spaces</name> =<init> <expr>"    "</expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>spaces</name>.<name>length</name></name><argument_list>()</argument_list></call> &lt;= <name>maxlen</name></expr>)</condition> <block>{
            <expr_stmt><expr><name>spaces</name> += <name>spaces</name></expr>;</expr_stmt>
        }</block></while>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>msg</name> =<init> <expr>new <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>msg</name>.<name>append</name></name><argument_list>(<argument><expr><name>heading</name> + <name>lSep</name> + <name>lSep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>size</name> =<init> <expr><call><name><name>names</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>size</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>msg</name>.<name>append</name></name><argument_list>(<argument><expr>" "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>msg</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>names</name>.<name>elementAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>descriptions</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>msg</name>.<name>append</name></name><argument_list>(
                    <argument><expr><call><name><name>spaces</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>maxlen</name> - <call><name><name>names</name>.<name>elementAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>.<call><name>length</name><argument_list>()</argument_list></call> + 2</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>msg</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>descriptions</name>.<name>elementAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>msg</name>.<name>append</name></name><argument_list>(<argument><expr><name>lSep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<call><name><name>dependencies</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name><name>Enumeration</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>deps</name> =<init> <expr><call><name><name>dependencies</name>.<name>elementAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>deps</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>msg</name>.<name>append</name></name><argument_list>(<argument><expr>"   depends on: "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <while>while <condition>(<expr><call><name><name>deps</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                        <expr_stmt><expr><call><name><name>msg</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>deps</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><call><name><name>deps</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                            <expr_stmt><expr><call><name><name>msg</name>.<name>append</name></name><argument_list>(<argument><expr>", "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                    }</block></while>
                    <expr_stmt><expr><call><name><name>msg</name>.<name>append</name></name><argument_list>(<argument><expr><name>lSep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></for>
        <expr_stmt><expr><call><name><name>project</name>.<name>log</name></name><argument_list>(<argument><expr><call><name><name>msg</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
