<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\zip\ExtraFieldUtilsTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>zip</name></name>;</package>

<import>import <name><name>junit</name>.<name>framework</name>.<name>TestCase</name></name>;</import>

<comment type="javadoc">/**
 * JUnit 3 testcases for org.apache.tools.zip.ExtraFieldUtils.
 *
 */</comment>
<class><specifier>public</specifier> class <name>ExtraFieldUtilsTest</name> <super><extends>extends <name>TestCase</name></extends> <implements>implements <name>UnixStat</name></implements></super> <block>{
    <constructor><specifier>public</specifier> <name>ExtraFieldUtilsTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Header-ID of a ZipExtraField not supported by Ant.
     *
     * &lt;p&gt;Used to be ZipShort(1) but this is the ID of the Zip64 extra
     * field.&lt;/p&gt;
     */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>ZipShort</name></type> <name>UNRECOGNIZED_HEADER</name> =<init> <expr>new <call><name>ZipShort</name><argument_list>(<argument><expr>0x5555</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>AsiExtraField</name></type> <name>a</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>UnrecognizedExtraField</name></type> <name>dummy</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>byte</name><index>[]</index></type> <name>data</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>byte</name><index>[]</index></type> <name>aLocal</name></decl>;</decl_stmt>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>a</name> = new <call><name>AsiExtraField</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>a</name>.<name>setMode</name></name><argument_list>(<argument><expr>0755</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>a</name>.<name>setDirectory</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>dummy</name> = new <call><name>UnrecognizedExtraField</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dummy</name>.<name>setHeaderId</name></name><argument_list>(<argument><expr><name>UNRECOGNIZED_HEADER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dummy</name>.<name>setLocalFileDataData</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name> <block>{<expr>0</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dummy</name>.<name>setCentralDirectoryData</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name> <block>{<expr>0</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>aLocal</name> = <call><name><name>a</name>.<name>getLocalFileDataData</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>dummyLocal</name> =<init> <expr><call><name><name>dummy</name>.<name>getLocalFileDataData</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>data</name> = new <name><name>byte</name><index>[<expr>4 + <name><name>aLocal</name>.<name>length</name></name> + 4 + <name><name>dummyLocal</name>.<name>length</name></name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><call><name><name>a</name>.<name>getHeaderId</name></name><argument_list>()</argument_list></call>.<call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><call><name><name>a</name>.<name>getLocalFileDataLength</name></name><argument_list>()</argument_list></call>.<call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>aLocal</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><name><name>aLocal</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><call><name><name>dummy</name>.<name>getHeaderId</name></name><argument_list>()</argument_list></call>.<call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>data</name></expr></argument>,
                         <argument><expr>4+<name><name>aLocal</name>.<name>length</name></name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><call><name><name>dummy</name>.<name>getLocalFileDataLength</name></name><argument_list>()</argument_list></call>.<call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>data</name></expr></argument>,
                         <argument><expr>4+<name><name>aLocal</name>.<name>length</name></name>+2</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>dummyLocal</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>data</name></expr></argument>,
                         <argument><expr>4+<name><name>aLocal</name>.<name>length</name></name>+4</expr></argument>, <argument><expr><name><name>dummyLocal</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <comment type="javadoc">/**
     * test parser.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testParse</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>ZipExtraField</name><index>[]</index></type> <name>ze</name> =<init> <expr><call><name><name>ExtraFieldUtils</name>.<name>parse</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"number of fields"</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name><name>ze</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"type field 1"</expr></argument>, <argument><expr><name><name>ze</name><index>[<expr>0</expr>]</index></name> <name>instanceof</name> <name>AsiExtraField</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"mode field 1"</expr></argument>, <argument><expr>040755</expr></argument>,
                     <argument><expr>((<name>AsiExtraField</name>) <name><name>ze</name><index>[<expr>0</expr>]</index></name>).<call><name>getMode</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"type field 2"</expr></argument>, <argument><expr><name><name>ze</name><index>[<expr>1</expr>]</index></name> <name>instanceof</name> <name>UnrecognizedExtraField</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"data length field 2"</expr></argument>, <argument><expr>1</expr></argument>,
                     <argument><expr><name><name>ze</name><index>[<expr>1</expr>]</index></name>.<call><name>getLocalFileDataLength</name><argument_list>()</argument_list></call>.<call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>data2</name> =<init> <expr>new <name><name>byte</name><index>[<expr><name><name>data</name>.<name>length</name></name>-1</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>data2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>data2</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>ExtraFieldUtils</name>.<name>parse</name></name><argument_list>(<argument><expr><name>data2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"data should be invalid"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"message"</expr></argument>,
                         <argument><expr>"bad extra field starting at "+(4 + <name><name>aLocal</name>.<name>length</name></name>)
                         + ".  Block length of 1 bytes exceeds remaining data of 0 bytes."</expr></argument>,
                         <argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testParseWithRead</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>ZipExtraField</name><index>[]</index></type> <name>ze</name> =<init>
            <expr><call><name><name>ExtraFieldUtils</name>.<name>parse</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr>true</expr></argument>,
                                  <argument><expr><name><name>ExtraFieldUtils</name>.<name>UnparseableExtraField</name>.<name>READ</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"number of fields"</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name><name>ze</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"type field 1"</expr></argument>, <argument><expr><name><name>ze</name><index>[<expr>0</expr>]</index></name> <name>instanceof</name> <name>AsiExtraField</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"mode field 1"</expr></argument>, <argument><expr>040755</expr></argument>,
                     <argument><expr>((<name>AsiExtraField</name>) <name><name>ze</name><index>[<expr>0</expr>]</index></name>).<call><name>getMode</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"type field 2"</expr></argument>, <argument><expr><name><name>ze</name><index>[<expr>1</expr>]</index></name> <name>instanceof</name> <name>UnrecognizedExtraField</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"data length field 2"</expr></argument>, <argument><expr>1</expr></argument>,
                     <argument><expr><name><name>ze</name><index>[<expr>1</expr>]</index></name>.<call><name>getLocalFileDataLength</name><argument_list>()</argument_list></call>.<call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>data2</name> =<init> <expr>new <name><name>byte</name><index>[<expr><name><name>data</name>.<name>length</name></name>-1</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>data2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>data2</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ze</name> = <call><name><name>ExtraFieldUtils</name>.<name>parse</name></name><argument_list>(<argument><expr><name>data2</name></expr></argument>, <argument><expr>true</expr></argument>,
                                   <argument><expr><name><name>ExtraFieldUtils</name>.<name>UnparseableExtraField</name>.<name>READ</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"number of fields"</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name><name>ze</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"type field 1"</expr></argument>, <argument><expr><name><name>ze</name><index>[<expr>0</expr>]</index></name> <name>instanceof</name> <name>AsiExtraField</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"mode field 1"</expr></argument>, <argument><expr>040755</expr></argument>,
                     <argument><expr>((<name>AsiExtraField</name>) <name><name>ze</name><index>[<expr>0</expr>]</index></name>).<call><name>getMode</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"type field 2"</expr></argument>, <argument><expr><name><name>ze</name><index>[<expr>1</expr>]</index></name> <name>instanceof</name> <name>UnparseableExtraFieldData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"data length field 2"</expr></argument>, <argument><expr>4</expr></argument>,
                     <argument><expr><name><name>ze</name><index>[<expr>1</expr>]</index></name>.<call><name>getLocalFileDataLength</name><argument_list>()</argument_list></call>.<call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; 4</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"byte number " + <name>i</name></expr></argument>,
                         <argument><expr><name><name>data2</name><index>[<expr><name><name>data</name>.<name>length</name></name> - 5 + <name>i</name></expr>]</index></name></expr></argument>,
                         <argument><expr><name><name>ze</name><index>[<expr>1</expr>]</index></name>.<call><name>getLocalFileDataData</name><argument_list>()</argument_list></call><index>[<expr><name>i</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testParseWithSkip</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>ZipExtraField</name><index>[]</index></type> <name>ze</name> =<init>
            <expr><call><name><name>ExtraFieldUtils</name>.<name>parse</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr>true</expr></argument>,
                                  <argument><expr><name><name>ExtraFieldUtils</name>.<name>UnparseableExtraField</name>.<name>SKIP</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"number of fields"</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name><name>ze</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"type field 1"</expr></argument>, <argument><expr><name><name>ze</name><index>[<expr>0</expr>]</index></name> <name>instanceof</name> <name>AsiExtraField</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"mode field 1"</expr></argument>, <argument><expr>040755</expr></argument>,
                     <argument><expr>((<name>AsiExtraField</name>) <name><name>ze</name><index>[<expr>0</expr>]</index></name>).<call><name>getMode</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"type field 2"</expr></argument>, <argument><expr><name><name>ze</name><index>[<expr>1</expr>]</index></name> <name>instanceof</name> <name>UnrecognizedExtraField</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"data length field 2"</expr></argument>, <argument><expr>1</expr></argument>,
                     <argument><expr><name><name>ze</name><index>[<expr>1</expr>]</index></name>.<call><name>getLocalFileDataLength</name><argument_list>()</argument_list></call>.<call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>data2</name> =<init> <expr>new <name><name>byte</name><index>[<expr><name><name>data</name>.<name>length</name></name>-1</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>data2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>data2</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ze</name> = <call><name><name>ExtraFieldUtils</name>.<name>parse</name></name><argument_list>(<argument><expr><name>data2</name></expr></argument>, <argument><expr>true</expr></argument>,
                                   <argument><expr><name><name>ExtraFieldUtils</name>.<name>UnparseableExtraField</name>.<name>SKIP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"number of fields"</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name><name>ze</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"type field 1"</expr></argument>, <argument><expr><name><name>ze</name><index>[<expr>0</expr>]</index></name> <name>instanceof</name> <name>AsiExtraField</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"mode field 1"</expr></argument>, <argument><expr>040755</expr></argument>,
                     <argument><expr>((<name>AsiExtraField</name>) <name><name>ze</name><index>[<expr>0</expr>]</index></name>).<call><name>getMode</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Test merge methods
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testMerge</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>local</name> =<init>
            <expr><call><name><name>ExtraFieldUtils</name>.<name>mergeLocalFileDataData</name></name><argument_list>(<argument><expr>new <name><name>ZipExtraField</name><index>[]</index></name> <block>{<expr><name>a</name></expr>, <expr><name>dummy</name></expr>}</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"local length"</expr></argument>, <argument><expr><name><name>data</name>.<name>length</name></name></expr></argument>, <argument><expr><name><name>local</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name><name>local</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"local byte "+<name>i</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>local</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>dummyCentral</name> =<init> <expr><call><name><name>dummy</name>.<name>getCentralDirectoryData</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>data2</name> =<init> <expr>new <name><name>byte</name><index>[<expr>4 + <name><name>aLocal</name>.<name>length</name></name> + 4 + <name><name>dummyCentral</name>.<name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>data2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>4 + <name><name>aLocal</name>.<name>length</name></name> + 2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><call><name><name>dummy</name>.<name>getCentralDirectoryLength</name></name><argument_list>()</argument_list></call>.<call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>,
                         <argument><expr><name>data2</name></expr></argument>, <argument><expr>4+<name><name>aLocal</name>.<name>length</name></name>+2</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>dummyCentral</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>data2</name></expr></argument>,
                         <argument><expr>4+<name><name>aLocal</name>.<name>length</name></name>+4</expr></argument>, <argument><expr><name><name>dummyCentral</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>central</name> =<init>
            <expr><call><name><name>ExtraFieldUtils</name>.<name>mergeCentralDirectoryData</name></name><argument_list>(<argument><expr>new <name><name>ZipExtraField</name><index>[]</index></name> <block>{<expr><name>a</name></expr>, <expr><name>dummy</name></expr>}</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"central length"</expr></argument>, <argument><expr><name><name>data2</name>.<name>length</name></name></expr></argument>, <argument><expr><name><name>central</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name><name>central</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"central byte "+<name>i</name></expr></argument>, <argument><expr><name><name>data2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>central</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testMergeWithUnparseableData</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>ZipExtraField</name></type> <name>d</name> =<init> <expr>new <call><name>UnparseableExtraFieldData</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>b</name> =<init> <expr><call><name><name>UNRECOGNIZED_HEADER</name>.<name>getBytes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>d</name>.<name>parseFromLocalFileData</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name> <block>{<expr><name><name>b</name><index>[<expr>0</expr>]</index></name></expr>, <expr><name><name>b</name><index>[<expr>1</expr>]</index></name></expr>, <expr>1</expr>, <expr>0</expr>}</block></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>local</name> =<init>
            <expr><call><name><name>ExtraFieldUtils</name>.<name>mergeLocalFileDataData</name></name><argument_list>(<argument><expr>new <name><name>ZipExtraField</name><index>[]</index></name> <block>{<expr><name>a</name></expr>, <expr><name>d</name></expr>}</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"local length"</expr></argument>, <argument><expr><name><name>data</name>.<name>length</name></name> - 1</expr></argument>, <argument><expr><name><name>local</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>local</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"local byte " + <name>i</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>local</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>dCentral</name> =<init> <expr><call><name><name>d</name>.<name>getCentralDirectoryData</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>data2</name> =<init> <expr>new <name><name>byte</name><index>[<expr>4 + <name><name>aLocal</name>.<name>length</name></name> + <name><name>dCentral</name>.<name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>data2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>4 + <name><name>aLocal</name>.<name>length</name></name> + 2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>dCentral</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>data2</name></expr></argument>,
                         <argument><expr>4 + <name><name>aLocal</name>.<name>length</name></name></expr></argument>, <argument><expr><name><name>dCentral</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>central</name> =<init>
            <expr><call><name><name>ExtraFieldUtils</name>.<name>mergeCentralDirectoryData</name></name><argument_list>(<argument><expr>new <name><name>ZipExtraField</name><index>[]</index></name> <block>{<expr><name>a</name></expr>, <expr><name>d</name></expr>}</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"central length"</expr></argument>, <argument><expr><name><name>data2</name>.<name>length</name></name></expr></argument>, <argument><expr><name><name>central</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>central</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"central byte " + <name>i</name></expr></argument>, <argument><expr><name><name>data2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>central</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

    }</block></function>
}</block></class>
</unit>
