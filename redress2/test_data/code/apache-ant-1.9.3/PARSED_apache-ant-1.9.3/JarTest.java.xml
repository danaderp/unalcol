<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\taskdefs\JarTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>BufferedReader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileReader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStreamReader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Reader</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>zip</name>.<name>ZipEntry</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>zip</name>.<name>ZipFile</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildFileTest</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>

<comment type="javadoc">/**
 */</comment>
<class><specifier>public</specifier> class <name>JarTest</name> <super><extends>extends <name>BuildFileTest</name></extends></super> <block>{

    <comment type="javadoc">/** Utilities used for file operations */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>FileUtils</name></type> <name>FILE_UTILS</name> =<init> <expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>tempJar</name> =<init> <expr>"tmp.jar"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>tempDir</name> =<init> <expr>"jartmp/"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Reader</name></type> <name>r1</name>, <name>r2</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>JarTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr>"src/etc/testcases/taskdefs/jar.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>r1</name> != <name>null</name></expr>)</condition><then> <block>{
            <try>try <block>{
                <expr_stmt><expr><call><name><name>r1</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
            }</block></catch></try>
        }</block></then></if>
        <if>if <condition>(<expr><name>r2</name> != <name>null</name></expr>)</condition><then> <block>{
            <try>try <block>{
                <expr_stmt><expr><call><name><name>r2</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
            }</block></catch></try>
        }</block></then></if>

        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"cleanup"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>test1</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildException</name><argument_list>(<argument><expr>"test1"</expr></argument>, <argument><expr>"required argument not specified"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>test2</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildException</name><argument_list>(<argument><expr>"test2"</expr></argument>, <argument><expr>"manifest file does not exist"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>test3</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildException</name><argument_list>(<argument><expr>"test3"</expr></argument>, <argument><expr>"Unrecognized whenempty attribute: format C: /y"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>test4</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"test4"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>jarFile</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProjectDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>tempJar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>jarFile</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNoRecreateWithoutUpdate</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>testNoRecreate</name><argument_list>(<argument><expr>"test4"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNoRecreateWithUpdate</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>testNoRecreate</name><argument_list>(<argument><expr>"testNoRecreateWithUpdate"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>testNoRecreate</name><parameter_list>(<param><decl><type><name>String</name></type> <name>secondTarget</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"test4"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>jarFile</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProjectDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>tempJar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>jarModifiedDate</name> =<init> <expr><call><name><name>jarFile</name>.<name>lastModified</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>Thread</name>.<name>sleep</name></name><argument_list>(<argument><expr>2500</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>InterruptedException</name></type> <name>e</name></decl></param>) <block>{
        }</block></catch></try> <comment type="line">// end of try-catch</comment>
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr><name>secondTarget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"jar has not been recreated in " + <name>secondTarget</name></expr></argument>,
                     <argument><expr><name>jarModifiedDate</name></expr></argument>, <argument><expr><call><name><name>jarFile</name>.<name>lastModified</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testRecreateWithoutUpdateAdditionalFiles</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>testRecreate</name><argument_list>(<argument><expr>"test4"</expr></argument>, <argument><expr>"testRecreateWithoutUpdateAdditionalFiles"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testRecreateWithUpdateAdditionalFiles</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>testRecreate</name><argument_list>(<argument><expr>"test4"</expr></argument>, <argument><expr>"testRecreateWithUpdateAdditionalFiles"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testRecreateWithoutUpdateNewerFile</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>testRecreate</name><argument_list>(<argument><expr>"testRecreateNewerFileSetup"</expr></argument>,
                     <argument><expr>"testRecreateWithoutUpdateNewerFile"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testRecreateWithUpdateNewerFile</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>testRecreate</name><argument_list>(<argument><expr>"testRecreateNewerFileSetup"</expr></argument>,
                     <argument><expr>"testRecreateWithUpdateNewerFile"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>testRecreate</name><parameter_list>(<param><decl><type><name>String</name></type> <name>firstTarget</name></decl></param>, <param><decl><type><name>String</name></type> <name>secondTarget</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr><name>firstTarget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>sleeptime</name> =<init> <expr>3000
            + <call><name><name>FILE_UTILS</name>.<name>getFileTimestampGranularity</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>Thread</name>.<name>sleep</name></name><argument_list>(<argument><expr><name>sleeptime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>InterruptedException</name></type> <name>e</name></decl></param>) <block>{
        }</block></catch></try> <comment type="line">// end of try-catch</comment>
        <decl_stmt><decl><type><name>File</name></type> <name>jarFile</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProjectDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>tempJar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>jarModifiedDate</name> =<init> <expr><call><name><name>jarFile</name>.<name>lastModified</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr><name>secondTarget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>jarFile</name> = new <call><name>File</name><argument_list>(<argument><expr><call><name>getProjectDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>tempJar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"jar has been recreated in " + <name>secondTarget</name></expr></argument>,
                   <argument><expr><name>jarModifiedDate</name> &lt; <call><name><name>jarFile</name>.<name>lastModified</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testManifestStaysIntact</name><parameter_list>()</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ManifestException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testManifestStaysIntact"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>r1</name> = new <call><name>FileReader</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>
                            .<call><name>resolveFile</name><argument_list>(<argument><expr><name>tempDir</name> + "manifest"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>r2</name> = new <call><name>FileReader</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>
                            .<call><name>resolveFile</name><argument_list>(<argument><expr><name>tempDir</name> + "META-INF/MANIFEST.MF"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Manifest</name></type> <name>mf1</name> =<init> <expr>new <call><name>Manifest</name><argument_list>(<argument><expr><name>r1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Manifest</name></type> <name>mf2</name> =<init> <expr>new <call><name>Manifest</name><argument_list>(<argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>mf1</name></expr></argument>, <argument><expr><name>mf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNoRecreateBasedirExcludesWithUpdate</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>testNoRecreate</name><argument_list>(<argument><expr>"testNoRecreateBasedirExcludesWithUpdate"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNoRecreateBasedirExcludesWithoutUpdate</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>testNoRecreate</name><argument_list>(<argument><expr>"testNoRecreateBasedirExcludesWithoutUpdate"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNoRecreateZipfilesetExcludesWithUpdate</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>testNoRecreate</name><argument_list>(<argument><expr>"testNoRecreateZipfilesetExcludesWithUpdate"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNoRecreateZipfilesetExcludesWithoutUpdate</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>testNoRecreate</name><argument_list>(<argument><expr>"testNoRecreateZipfilesetExcludesWithoutUpdate"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testRecreateZipfilesetWithoutUpdateAdditionalFiles</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>testRecreate</name><argument_list>(<argument><expr>"test4"</expr></argument>,
                     <argument><expr>"testRecreateZipfilesetWithoutUpdateAdditionalFiles"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testRecreateZipfilesetWithUpdateAdditionalFiles</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>testRecreate</name><argument_list>(<argument><expr>"test4"</expr></argument>,
                     <argument><expr>"testRecreateZipfilesetWithUpdateAdditionalFiles"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testRecreateZipfilesetWithoutUpdateNewerFile</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>testRecreate</name><argument_list>(<argument><expr>"testRecreateNewerFileSetup"</expr></argument>,
                     <argument><expr>"testRecreateZipfilesetWithoutUpdateNewerFile"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testRecreateZipfilesetWithUpdateNewerFile</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>testRecreate</name><argument_list>(<argument><expr>"testRecreateNewerFileSetup"</expr></argument>,
                     <argument><expr>"testRecreateZipfilesetWithUpdateNewerFile"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testCreateWithEmptyFileset</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testCreateWithEmptyFilesetSetUp"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testCreateWithEmptyFileset"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testCreateWithEmptyFileset"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testUpdateIfOnlyManifestHasChanged</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testUpdateIfOnlyManifestHasChanged"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>jarXml</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>resolveFile</name><argument_list>(<argument><expr><name>tempDir</name> + "jar.xml"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>jarXml</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// bugzilla report 10262</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNoDuplicateIndex</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>ZipFile</name></type> <name>archive</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testIndexTests"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>archive</name> = new <call><name>ZipFile</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>resolveFile</name><argument_list>(<argument><expr><name>tempJar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Enumeration</name></type> <name>e</name> =<init> <expr><call><name><name>archive</name>.<name>entries</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>numberOfIndexLists</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <decl_stmt><decl><type><name>ZipEntry</name></type> <name>ze</name> =<init> <expr>(<name>ZipEntry</name>) <call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>ze</name>.<name>getName</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr>"META-INF/INDEX.LIST"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>numberOfIndexLists</name>++</expr>;</expr_stmt>
                }</block></then></if>
            }</block></while>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><name>numberOfIndexLists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
            <if>if <condition>(<expr><name>archive</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>archive</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></finally></try>
    }</block></function>

    <comment type="line">// bugzilla report 16972</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testRootFilesInIndex</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>ZipFile</name></type> <name>archive</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testIndexTests"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>archive</name> = new <call><name>ZipFile</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>resolveFile</name><argument_list>(<argument><expr><name>tempJar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>ZipEntry</name></type> <name>ze</name> =<init> <expr><call><name><name>archive</name>.<name>getEntry</name></name><argument_list>(<argument><expr>"META-INF/INDEX.LIST"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>InputStream</name></type> <name>is</name> =<init> <expr><call><name><name>archive</name>.<name>getInputStream</name></name><argument_list>(<argument><expr><name>ze</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>BufferedReader</name></type> <name>r</name> =<init> <expr>new <call><name>BufferedReader</name><argument_list>(<argument><expr>new <call><name>InputStreamReader</name><argument_list>(<argument><expr><name>is</name></expr></argument>,
                                                                        <argument><expr>"UTF8"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>foundSub</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>foundSubFoo</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>foundFoo</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>String</name></type> <name>line</name> =<init> <expr><call><name><name>r</name>.<name>readLine</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>line</name> != <name>null</name></expr>)</condition> <block>{
                <if>if <condition>(<expr><call><name><name>line</name>.<name>equals</name></name><argument_list>(<argument><expr>"foo"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>foundFoo</name> = true</expr>;</expr_stmt>
                }</block></then> <else>else <if>if <condition>(<expr><call><name><name>line</name>.<name>equals</name></name><argument_list>(<argument><expr>"sub"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>foundSub</name> = true</expr>;</expr_stmt>
                }</block></then> <else>else <if>if <condition>(<expr><call><name><name>line</name>.<name>equals</name></name><argument_list>(<argument><expr>"sub/foo"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>foundSubFoo</name> = true</expr>;</expr_stmt>
                }</block></then></if></else></if></else></if>
                <expr_stmt><expr><name>line</name> = <call><name><name>r</name>.<name>readLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></while>

            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>foundSub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>!<name>foundSubFoo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>foundFoo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
            <if>if <condition>(<expr><name>archive</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>archive</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></finally></try>
    }</block></function>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testManifestOnlyJar</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectLogContaining</name><argument_list>(<argument><expr>"testManifestOnlyJar"</expr></argument>, <argument><expr>"Building MANIFEST-only jar: "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>manifestFile</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>resolveFile</name><argument_list>(<argument><expr><name>tempDir</name> + "META-INF" + <name><name>File</name>.<name>separator</name></name> + "MANIFEST.MF"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>manifestFile</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testIndexJarsPlusJarMarker</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testIndexJarsPlusJarMarker"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNoVersionInfoFail</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildExceptionContaining</name><argument_list>(<argument><expr>"testNoVersionInfoFail"</expr></argument>, <argument><expr>"Manifest Implemention information missing."</expr></argument>, <argument><expr>"No Implementation-Title set."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNoVersionInfoIgnore</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testNoVersionInfoIgnore"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>( <argument><expr><call><name>getFullLog</name><argument_list>()</argument_list></call>.<call><name>indexOf</name><argument_list>(<argument><expr>"No Implementation-Title set."</expr></argument>)</argument_list></call> &gt; -1</expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>( <argument><expr><call><name>getFullLog</name><argument_list>()</argument_list></call>.<call><name>indexOf</name><argument_list>(<argument><expr>"No Implementation-Version set."</expr></argument>)</argument_list></call> &gt; -1</expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>( <argument><expr><call><name>getFullLog</name><argument_list>()</argument_list></call>.<call><name>indexOf</name><argument_list>(<argument><expr>"No Implementation-Vendor set."</expr></argument>)</argument_list></call> &gt; -1</expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNoVersionInfoWarn</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testNoVersionInfoWarn"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>( <argument><expr><call><name>getLog</name><argument_list>()</argument_list></call>.<call><name>indexOf</name><argument_list>(<argument><expr>"No Implementation-Title set."</expr></argument>)</argument_list></call> &gt; -1</expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>( <argument><expr><call><name>getLog</name><argument_list>()</argument_list></call>.<call><name>indexOf</name><argument_list>(<argument><expr>"No Implementation-Version set."</expr></argument>)</argument_list></call> &gt; -1</expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>( <argument><expr><call><name>getLog</name><argument_list>()</argument_list></call>.<call><name>indexOf</name><argument_list>(<argument><expr>"No Implementation-Vendor set."</expr></argument>)</argument_list></call> &gt; -1</expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNoVersionInfoNoStrict</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testNoVersionInfoNoStrict"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>( <argument><expr><call><name>getLog</name><argument_list>()</argument_list></call>.<call><name>indexOf</name><argument_list>(<argument><expr>"No Implementation-Title set."</expr></argument>)</argument_list></call> &gt; -1</expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>( <argument><expr><call><name>getLog</name><argument_list>()</argument_list></call>.<call><name>indexOf</name><argument_list>(<argument><expr>"No Implementation-Version set."</expr></argument>)</argument_list></call> &gt; -1</expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>( <argument><expr><call><name>getLog</name><argument_list>()</argument_list></call>.<call><name>indexOf</name><argument_list>(<argument><expr>"No Implementation-Vendor set."</expr></argument>)</argument_list></call> &gt; -1</expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testHasVersionInfo</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testHasVersionInfo"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>( <argument><expr><call><name>getLog</name><argument_list>()</argument_list></call>.<call><name>indexOf</name><argument_list>(<argument><expr>"No Implementation-Title set."</expr></argument>)</argument_list></call> &gt; -1</expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>( <argument><expr><call><name>getLog</name><argument_list>()</argument_list></call>.<call><name>indexOf</name><argument_list>(<argument><expr>"No Implementation-Version set."</expr></argument>)</argument_list></call> &gt; -1</expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>( <argument><expr><call><name>getLog</name><argument_list>()</argument_list></call>.<call><name>indexOf</name><argument_list>(<argument><expr>"No Implementation-Vendor set."</expr></argument>)</argument_list></call> &gt; -1</expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
}</block></class>
</unit>
