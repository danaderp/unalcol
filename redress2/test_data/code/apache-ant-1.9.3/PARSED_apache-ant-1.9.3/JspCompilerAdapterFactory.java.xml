<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\jsp\compilers\JspCompilerAdapterFactory.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>jsp</name>.<name>compilers</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>AntClassLoader</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>jsp</name>.<name>JspNameMangler</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>jsp</name>.<name>Jasper41Mangler</name></name>;</import>


<comment type="javadoc">/**
 * Creates the necessary compiler adapter, given basic criteria.
 *
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>JspCompilerAdapterFactory</name> <block>{

    <comment type="javadoc">/** This is a singleton -- can't create instances!! */</comment>
    <constructor><specifier>private</specifier> <name>JspCompilerAdapterFactory</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <comment type="javadoc">/**
     * Based on the parameter passed in, this method creates the necessary
     * factory desired.
     *
     * The current mapping for compiler names are as follows:
     * &lt;ul&gt;&lt;li&gt;jasper = jasper compiler (the default)
     * &lt;li&gt;&lt;i&gt;a fully qualified classname&lt;/i&gt; = the name of a jsp compiler
     * adapter
     * &lt;/ul&gt;
     *
     * @param compilerType either the name of the desired compiler, or the
     * full classname of the compiler's adapter.
     * @param task a task to log through.
     * @return the compiler
     * @throws BuildException if the compiler type could not be resolved into
     * a compiler adapter.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>JspCompilerAdapter</name></type> <name>getCompiler</name><parameter_list>(<param><decl><type><name>String</name></type> <name>compilerType</name></decl></param>, <param><decl><type><name>Task</name></type> <name>task</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name>getCompiler</name><argument_list>(<argument><expr><name>compilerType</name></expr></argument>, <argument><expr><name>task</name></expr></argument>,
                           <comment type="line">// Memory-Leak in line below</comment>
                           <argument><expr><call><name><name>task</name>.<name>getProject</name></name><argument_list>()</argument_list></call>.<call><name>createClassLoader</name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Based on the parameter passed in, this method creates the necessary
     * factory desired.
     *
     * The current mapping for compiler names are as follows:
     * &lt;ul&gt;&lt;li&gt;jasper = jasper compiler (the default)
     * &lt;li&gt;&lt;i&gt;a fully qualified classname&lt;/i&gt; = the name of a jsp compiler
     * adapter
     * &lt;/ul&gt;
     *
     * @param compilerType either the name of the desired compiler, or the
     * full classname of the compiler's adapter.
     * @param task a task to log through.
     * @param loader AntClassLoader with which the compiler should be loaded
     * @return the compiler
     * @throws BuildException if the compiler type could not be resolved into
     * a compiler adapter.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>JspCompilerAdapter</name></type> <name>getCompiler</name><parameter_list>(<param><decl><type><name>String</name></type> <name>compilerType</name></decl></param>, <param><decl><type><name>Task</name></type> <name>task</name></decl></param>,
                                                 <param><decl><type><name>AntClassLoader</name></type> <name>loader</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{

        <if>if <condition>(<expr><call><name><name>compilerType</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr>"jasper"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">//tomcat4.0 gets the old mangler</comment>
            <return>return <expr>new <call><name>JasperC</name><argument_list>(<argument><expr>new <call><name>JspNameMangler</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>compilerType</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr>"jasper41"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">//tomcat4.1 gets the new one</comment>
            <return>return <expr>new <call><name>JasperC</name><argument_list>(<argument><expr>new <call><name>Jasper41Mangler</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name>resolveClassName</name><argument_list>(<argument><expr><name>compilerType</name></expr></argument>, <argument><expr><name>loader</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Tries to resolve the given classname into a compiler adapter.
     * Throws a fit if it can't.
     *
     * @param className The fully qualified classname to be created.
     * @param classloader Classloader with which to load the class
     * @throws BuildException This is the fit that is thrown if className
     * isn't an instance of JspCompilerAdapter.
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>JspCompilerAdapter</name></type> <name>resolveClassName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>className</name></decl></param>,
                                                       <param><decl><type><name>AntClassLoader</name></type> <name>classloader</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <try>try <block>{
            <decl_stmt><decl><type><name>Class</name></type> <name>c</name> =<init> <expr><call><name><name>classloader</name>.<name>findClass</name></name><argument_list>(<argument><expr><name>className</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Object</name></type> <name>o</name> =<init> <expr><call><name><name>c</name>.<name>newInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr>(<name>JspCompilerAdapter</name>) <name>o</name></expr>;</return>
        }</block> <catch>catch (<param><decl><type><name>ClassNotFoundException</name></type> <name>cnfe</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>className</name> + " can\'t be found."</expr></argument>, <argument><expr><name>cnfe</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <catch>catch (<param><decl><type><name>ClassCastException</name></type> <name>cce</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>className</name> + " isn\'t the classname of "
                                     + "a compiler adapter."</expr></argument>, <argument><expr><name>cce</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <catch>catch (<param><decl><type><name>Throwable</name></type> <name>t</name></decl></param>) <block>{
            <comment type="line">// for all other possibilities</comment>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>className</name> + " caused an interesting "
                                     + "exception."</expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

}</block></class>
</unit>
