<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\types\EnumeratedAttributeTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name></name>;</package>

<import>import <name><name>junit</name>.<name>framework</name>.<name>TestCase</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>

<comment type="javadoc">/**
 * JUnit 3 testcases for org.apache.tools.ant.EnumeratedAttribute.
 */</comment>
<class><specifier>public</specifier> class <name>EnumeratedAttributeTest</name> <super><extends>extends <name>TestCase</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name><index>[]</index></type> <name>expected</name> =<init> <expr><block>{<expr>"a"</expr>, <expr>"b"</expr>, <expr>"c"</expr>}</block></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>EnumeratedAttributeTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testContains</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>EnumeratedAttribute</name></type> <name>t1</name> =<init> <expr>new <call><name>TestNormal</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name><name>expected</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name><name>expected</name><index>[<expr><name>i</name></expr>]</index></name>+" is in TestNormal"</expr></argument>,
                   <argument><expr><call><name><name>t1</name>.<name>containsValue</name></name><argument_list>(<argument><expr><name><name>expected</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name><name>expected</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>toUpperCase</name><argument_list>()</argument_list></call>+" is in TestNormal"</expr></argument>,
                   <argument><expr>!<call><name><name>t1</name>.<name>containsValue</name></name><argument_list>(<argument><expr><name><name>expected</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>toUpperCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"TestNormal doesn\'t have \"d\" attribute"</expr></argument>,
               <argument><expr>!<call><name><name>t1</name>.<name>containsValue</name></name><argument_list>(<argument><expr>"d"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"TestNull doesn\'t have \"d\" attribute and doesn\'t die"</expr></argument>,
               <argument><expr>!(new <call><name>TestNull</name><argument_list>()</argument_list></call>).<call><name>containsValue</name><argument_list>(<argument><expr>"d"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFactory</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>Factory</name></type> <name>ea</name> =<init> <expr>(<name>Factory</name>)<call><name><name>EnumeratedAttribute</name>.<name>getInstance</name></name><argument_list>(<argument><expr><name><name>Factory</name>.<name><name/></name></name>class</expr></argument>, <argument><expr>"one"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Factory did not set the right value."</expr></argument>, <argument><expr><call><name><name>ea</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"one"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<try>try <block>{
	    	<expr_stmt><expr><call><name><name>EnumeratedAttribute</name>.<name>getInstance</name></name><argument_list>(<argument><expr><name><name>Factory</name>.<name><name/></name></name>class</expr></argument>, <argument><expr>"illegal"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    	<expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Factory should fail when trying to set an illegal value."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
			<comment type="line">// was expected</comment>
		}</block></catch></try>
	}</block></function>

	<function><type><specifier>public</specifier> <name>void</name></type> <name>testExceptions</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>EnumeratedAttribute</name></type> <name>t1</name> =<init> <expr>new <call><name>TestNormal</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name><name>expected</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <try>try <block>{
                <expr_stmt><expr><call><name><name>t1</name>.<name>setValue</name></name><argument_list>(<argument><expr><name><name>expected</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
                <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"unexpected exception for value "+<name><name>expected</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></for>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>t1</name>.<name>setValue</name></name><argument_list>(<argument><expr>"d"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"expected exception for value \"d\""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
        }</block></catch></try>
        <try>try <block>{
            <expr_stmt><expr>(new <call><name>TestNull</name><argument_list>()</argument_list></call>).<call><name>setValue</name><argument_list>(<argument><expr>"d"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"expected exception for value \"d\" in TestNull"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
        }</block></catch> <catch>catch (<param><decl><type><name>Throwable</name></type> <name>other</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"unexpected death of TestNull: "+<call><name><name>other</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>TestNormal</name> <super><extends>extends <name>EnumeratedAttribute</name></extends></super> <block>{
        <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getValues</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>expected</name></expr>;</return>
        }</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>TestNull</name> <super><extends>extends <name>EnumeratedAttribute</name></extends></super> <block>{
        <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getValues</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Factory</name> <super><extends>extends <name>EnumeratedAttribute</name></extends></super> <block>{
    	<function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getValues</name><parameter_list>()</parameter_list> <block>{
    		<return>return <expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"one"</expr>, <expr>"two"</expr>, <expr>"three"</expr> }</block></expr>;</return>
    	}</block></function>
    }</block></class>
    
}</block></class>
</unit>
