<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\types\resources\URLResource.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>OutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>URL</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>URLConnection</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>MalformedURLException</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Resource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Reference</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>

<comment type="javadoc">/**
 * Exposes a URL as a Resource.
 * @since Ant 1.7
 */</comment>
<class><specifier>public</specifier> class <name>URLResource</name> <super><extends>extends <name>Resource</name></extends> <implements>implements <name>URLProvider</name></implements></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>FileUtils</name></type> <name>FILE_UTILS</name> =<init> <expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>NULL_URL</name>
        =<init> <expr><call><name><name>Resource</name>.<name>getMagicNumber</name></name><argument_list>(<argument><expr>"null URL".<call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>URL</name></type> <name>url</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>URLConnection</name></type> <name>conn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>URL</name></type> <name>baseURL</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>relPath</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Default constructor.
     */</comment>
    <constructor><specifier>public</specifier> <name>URLResource</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <comment type="javadoc">/**
     * Convenience constructor.
     * @param u the URL to expose.
     */</comment>
    <constructor><specifier>public</specifier> <name>URLResource</name><parameter_list>(<param><decl><type><name>URL</name></type> <name>u</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setURL</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Convenience constructor.
     * @param u holds the URL to expose.
     */</comment>
    <constructor><specifier>public</specifier> <name>URLResource</name><parameter_list>(<param><decl><type><name>URLProvider</name></type> <name>u</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setURL</name><argument_list>(<argument><expr><call><name><name>u</name>.<name>getURL</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Convenience constructor.
     * @param f the File to set as a URL.
     */</comment>
    <constructor><specifier>public</specifier> <name>URLResource</name><parameter_list>(<param><decl><type><name>File</name></type> <name>f</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setFile</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * String constructor for Ant attribute introspection.
     * @param u String representation of this URL.
     * @see org.apache.tools.ant.IntrospectionHelper
     */</comment>
    <constructor><specifier>public</specifier> <name>URLResource</name><parameter_list>(<param><decl><type><name>String</name></type> <name>u</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><call><name>newURL</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Set the URL for this URLResource.
     * @param u the URL to expose.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>setURL</name><parameter_list>(<param><decl><type><name>URL</name></type> <name>u</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>checkAttributesAllowed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>url</name> = <name>u</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the URL from a File.
     * @param f the File to set as a URL.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>setFile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>f</name></decl></param>)</parameter_list> <block>{
        <try>try <block>{
            <expr_stmt><expr><call><name>setURL</name><argument_list>(<argument><expr><call><name><name>FILE_UTILS</name>.<name>getFileURL</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>MalformedURLException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * Base URL which combined with the relativePath attribute defines
     * the URL.
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>setBaseURL</name><parameter_list>(<param><decl><type><name>URL</name></type> <name>base</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>checkAttributesAllowed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>url</name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"can't define URL and baseURL attribute"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name>baseURL</name> = <name>base</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Relative path which combined with the baseURL attribute defines
     * the URL.
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>setRelativePath</name><parameter_list>(<param><decl><type><name>String</name></type> <name>r</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>checkAttributesAllowed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>url</name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"can't define URL and relativePath"
                                     + " attribute"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name>relPath</name> = <name>r</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Get the URL used by this URLResource.
     * @return a URL object.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>URL</name></type> <name>getURL</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>((<name>URLResource</name>) <call><name>getCheckedRef</name><argument_list>()</argument_list></call>).<call><name>getURL</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>url</name> == <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>baseURL</name> != <name>null</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>relPath</name> == <name>null</name></expr>)</condition><then> <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"must provide relativePath"
                                             + " attribute when using baseURL."</expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if>
                <try>try <block>{
                    <expr_stmt><expr><name>url</name> = new <call><name>URL</name><argument_list>(<argument><expr><name>baseURL</name></expr></argument>, <argument><expr><name>relPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>MalformedURLException</name></type> <name>e</name></decl></param>) <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></catch></try>
            }</block></then></if>
        }</block></then></if>
        <return>return <expr><name>url</name></expr>;</return>
     }</block></function>

    <comment type="javadoc">/**
     * Overrides the super version.
     * @param r the Reference to set.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>setRefid</name><parameter_list>(<param><decl><type><name>Reference</name></type> <name>r</name></decl></param>)</parameter_list> <block>{
        <comment type="line">//not using the accessor in this case to avoid side effects</comment>
        <if>if <condition>(<expr><name>url</name> != <name>null</name> || <name>baseURL</name> != <name>null</name> || <name>relPath</name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr><call><name>tooManyAttributes</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>super</name>.<name>setRefid</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the name of this URLResource
     * (its file component minus the leading separator).
     * @return the name of this resource.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>((<name>Resource</name>) <call><name>getCheckedRef</name><argument_list>()</argument_list></call>).<call><name>getName</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> =<init> <expr><call><name>getURL</name><argument_list>()</argument_list></call>.<call><name>getFile</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>"".<call><name>equals</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> ? <name>name</name> : <call><name><name>name</name>.<name>substring</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Return this URLResource formatted as a String.
     * @return a String representation of this URLResource.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>isReference</name><argument_list>()</argument_list></call>
            ? <call><name>getCheckedRef</name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call> : <call><name><name>String</name>.<name>valueOf</name></name><argument_list>(<argument><expr><call><name>getURL</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Find out whether the URL exists .
     * @return true if this resource exists.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>boolean</name></type> <name>isExists</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>((<name>Resource</name>) <call><name>getCheckedRef</name><argument_list>()</argument_list></call>).<call><name>isExists</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name>isExists</name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Find out whether the URL exists, and close the connection
     * opened to the URL if closeConnection is true.
     *
     * Note that this method does ensure that if:
     * - the resource exists (if it returns true)
     * - and if the current object is not a reference
     * (isReference() returns false)
     * - and if it was called with closeConnection to false,
     *
     * then the connection to the URL (stored in the conn
     * private field) will be opened, and require to be closed
     * by the caller.
     *
     * @param closeConnection true if the connection should be closed
     * after the call, false if it should stay open.
     * @return true if this resource exists.
     */</comment>
    <function><type><specifier>private</specifier> <specifier>synchronized</specifier> <name>boolean</name></type> <name>isExists</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>closeConnection</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>getURL</name><argument_list>()</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <try>try <block>{
            <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>true</expr>;</return>
        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
            <return>return <expr>false</expr>;</return>
        }</block></catch> <finally>finally <block>{
            <if>if <condition>(<expr><name>closeConnection</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></finally></try>
    }</block></function>


    <comment type="javadoc">/**
     * Tells the modification time in milliseconds since 01.01.1970 .
     *
     * @return 0 if the resource does not exist to mirror the behavior
     * of {@link java.io.File File}.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>long</name></type> <name>getLastModified</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>((<name>Resource</name>) <call><name>getCheckedRef</name><argument_list>()</argument_list></call>).<call><name>getLastModified</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name>isExists</name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>0L</expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name><name>conn</name>.<name>getLastModified</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Tells if the resource is a directory.
     * @return boolean whether the resource is a directory.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>boolean</name></type> <name>isDirectory</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>isReference</name><argument_list>()</argument_list></call>
            ? ((<name>Resource</name>) <call><name>getCheckedRef</name><argument_list>()</argument_list></call>).<call><name>isDirectory</name><argument_list>()</argument_list></call>
            : <call><name>getName</name><argument_list>()</argument_list></call>.<call><name>endsWith</name><argument_list>(<argument><expr>"/"</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the size of this Resource.
     * @return the size, as a long, 0 if the Resource does not exist (for
     *         compatibility with java.io.File), or UNKNOWN_SIZE if not known.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>long</name></type> <name>getSize</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>((<name>Resource</name>) <call><name>getCheckedRef</name><argument_list>()</argument_list></call>).<call><name>getSize</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name>isExists</name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>0L</expr>;</return>
        }</block></then></if>
        <try>try <block>{
            <expr_stmt><expr><call><name>connect</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>contentlength</name> =<init> <expr><call><name><name>conn</name>.<name>getContentLength</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>contentlength</name></expr>;</return>
        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
            <return>return <expr><name>UNKNOWN_SIZE</name></expr>;</return>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * Test whether an Object equals this URLResource.
     * @param another the other Object to compare.
     * @return true if the specified Object is equal to this Resource.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>another</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>this</name> == <name>another</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name>getCheckedRef</name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><name>another</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<call><name><name>another</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>URLResource</name></type> <name>otheru</name> =<init> <expr>(<name>URLResource</name>) <name>another</name></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>getURL</name><argument_list>()</argument_list></call> == <name>null</name>
            ? <call><name><name>otheru</name>.<name>getURL</name></name><argument_list>()</argument_list></call> == <name>null</name>
            : <call><name>getURL</name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><call><name><name>otheru</name>.<name>getURL</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the hash code for this Resource.
     * @return hash code as int.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name>getCheckedRef</name><argument_list>()</argument_list></call>.<call><name>hashCode</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <return>return <expr><name>MAGIC</name> * ((<call><name>getURL</name><argument_list>()</argument_list></call> == <name>null</name>) ? <name>NULL_URL</name> : <call><name>getURL</name><argument_list>()</argument_list></call>.<call><name>hashCode</name><argument_list>()</argument_list></call>)</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get an InputStream for the Resource.
     * @return an InputStream containing this Resource's content.
     * @throws IOException if unable to provide the content of this
     *         Resource as a stream.
     * @throws UnsupportedOperationException if InputStreams are not
     *         supported for this Resource type.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>InputStream</name></type> <name>getInputStream</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>((<name>Resource</name>) <call><name>getCheckedRef</name><argument_list>()</argument_list></call>).<call><name>getInputStream</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>connect</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <return>return <expr><call><name><name>conn</name>.<name>getInputStream</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><name>conn</name> = <name>null</name></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <comment type="javadoc">/**
     * Get an OutputStream for the Resource.
     * @return an OutputStream to which content can be written.
     * @throws IOException if unable to provide the content of this
     *         Resource as a stream.
     * @throws UnsupportedOperationException if OutputStreams are not
     *         supported for this Resource type.
     * @throws IOException if the URL cannot be opened.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>OutputStream</name></type> <name>getOutputStream</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>((<name>Resource</name>) <call><name>getCheckedRef</name><argument_list>()</argument_list></call>).<call><name>getOutputStream</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>connect</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <return>return <expr><call><name><name>conn</name>.<name>getOutputStream</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><name>conn</name> = <name>null</name></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <comment type="javadoc">/**
     * Ensure that we have a connection.
     * @throws IOException if the connection cannot be established.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>connect</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name><name>Project</name>.<name>MSG_ERR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Ensure that we have a connection.
     * @param logLevel severity to use when logging connection errors.
     * Should be one of the &lt;code&gt;MSG_&lt;/code&gt; constants in {@link
     * Project Project}.
     * @throws IOException if the connection cannot be established.
     * @since Ant 1.8.2
     */</comment>
    <function><type><specifier>protected</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>connect</name><parameter_list>(<param><decl><type><name>int</name></type> <name>logLevel</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>URL</name></type> <name>u</name> =<init> <expr><call><name>getURL</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>u</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"URL not set"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>conn</name> == <name>null</name></expr>)</condition><then> <block>{
            <try>try <block>{
                <expr_stmt><expr><name>conn</name> = <call><name><name>u</name>.<name>openConnection</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>conn</name>.<name>connect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><call><name><name>e</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>logLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>conn</name> = <name>null</name></expr>;</expr_stmt>
                <throw>throw <expr><name>e</name></expr>;</throw>
            }</block></catch></try>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Closes the URL connection if:
     * - it is opened (i.e. the field conn is not null)
     * - this type of URLConnection supports some sort of close mechanism
     *
     * This method ensures the field conn will be null after the call.
     *
     */</comment>
    <function><type><specifier>private</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <block>{
        <try>try <block>{
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><name>conn</name> = <name>null</name></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>URL</name></type> <name>newURL</name><parameter_list>(<param><decl><type><name>String</name></type> <name>u</name></decl></param>)</parameter_list> <block>{
        <try>try <block>{
            <return>return <expr>new <call><name>URL</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block> <catch>catch (<param><decl><type><name>MalformedURLException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

}</block></class>
</unit>
