<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\taskdefs\optional\junit\JUnitTaskTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>junit</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>BufferedReader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileReader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildFileTest</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>JavaEnvUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>w3c</name>.<name>dom</name>.<name>Document</name></name>;</import>
<import>import <name><name>org</name>.<name>w3c</name>.<name>dom</name>.<name>Node</name></name>;</import>

<import>import <name><name>javax</name>.<name>xml</name>.<name>parsers</name>.<name>DocumentBuilder</name></name>;</import>
<import>import <name><name>javax</name>.<name>xml</name>.<name>parsers</name>.<name>DocumentBuilderFactory</name></name>;</import>
<import>import <name><name>javax</name>.<name>xml</name>.<name>xpath</name>.<name>XPath</name></name>;</import>
<import>import <name><name>javax</name>.<name>xml</name>.<name>xpath</name>.<name>XPathConstants</name></name>;</import>
<import>import <name><name>javax</name>.<name>xml</name>.<name>xpath</name>.<name>XPathFactory</name></name>;</import>

<class><specifier>public</specifier> class <name>JUnitTaskTest</name> <super><extends>extends <name>BuildFileTest</name></extends></super> <block>{

    <comment type="javadoc">/**
     * Constructor for the JUnitTaskTest object.
     */</comment>
    <constructor><specifier>public</specifier> <name>JUnitTaskTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * The JUnit setup method.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr>"src/etc/testcases/taskdefs/optional/junit.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The teardown method for JUnit.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"cleanup"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testCrash</name><parameter_list>()</parameter_list> <block>{
       <expr_stmt><expr><call><name>expectPropertySet</name><argument_list>(<argument><expr>"crash"</expr></argument>, <argument><expr>"crashed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNoCrash</name><parameter_list>()</parameter_list> <block>{
       <expr_stmt><expr><call><name>expectPropertyUnset</name><argument_list>(<argument><expr>"nocrash"</expr></argument>, <argument><expr>"crashed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testTimeout</name><parameter_list>()</parameter_list> <block>{
       <expr_stmt><expr><call><name>expectPropertySet</name><argument_list>(<argument><expr>"timeout"</expr></argument>, <argument><expr>"timeout"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNoTimeout</name><parameter_list>()</parameter_list> <block>{
       <expr_stmt><expr><call><name>expectPropertyUnset</name><argument_list>(<argument><expr>"notimeout"</expr></argument>, <argument><expr>"timeout"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNonForkedCapture</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"capture"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNoPrint</name><argument_list>(<argument><expr><call><name>getLog</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"log"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNoPrint</name><argument_list>(<argument><expr><call><name>getFullLog</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"debug log"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testForkedCapture</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>setProperty</name><argument_list>(<argument><expr>"fork"</expr></argument>, <argument><expr>"true"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testNonForkedCapture</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// those would fail because of the way BuildFileTest captures output</comment>
        <expr_stmt><expr><call><name>assertNoPrint</name><argument_list>(<argument><expr><call><name>getOutput</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"output"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNoPrint</name><argument_list>(<argument><expr><call><name>getError</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"error output"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertOutput</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testBatchTestForkOnceToDir</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertResultFilesExist</name><argument_list>(<argument><expr>"testBatchTestForkOnceToDir"</expr></argument>, <argument><expr>".xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/** Bugzilla Report 32973 */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testBatchTestForkOnceExtension</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertResultFilesExist</name><argument_list>(<argument><expr>"testBatchTestForkOnceExtension"</expr></argument>, <argument><expr>".foo"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="block">/* Bugzilla Report 42984 */</comment>
    <comment type="line">//TODO This scenario works from command line, but not from JUnit ...</comment>
    <comment type="line">//     Running these steps from the junit.xml-directory work</comment>
    <comment type="line">//     $ ant -f junit.xml failureRecorder.prepare</comment>
    <comment type="line">//     $ ant -f junit.xml failureRecorder.runtest</comment>
    <comment type="line">//     $ ant -f junit.xml failureRecorder.runtest</comment>
    <comment type="line">//     $ ant -f junit.xml failureRecorder.fixing</comment>
    <comment type="line">//     $ ant -f junit.xml failureRecorder.runtest</comment>
    <comment type="line">//     $ ant -f junit.xml failureRecorder.runtest</comment>
    <comment type="line">//     But running the JUnit testcase fails in 4th run.</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFailureRecorder</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>JavaEnvUtils</name>.<name>isAtLeastJavaVersion</name></name><argument_list>(<argument><expr><name><name>JavaEnvUtils</name>.<name>JAVA_1_5</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <try>try <block>{
                <expr_stmt><expr><call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr>"junit.framework.JUnit4TestAdapter"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"skipping tests since it fails when"
                                   + " using JUnit 4"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            }</block> <catch>catch (<param><decl><type><name>ClassNotFoundException</name></type> <name>e</name></decl></param>) <block>{
                <comment type="line">// OK, this is JUnit3, can run test</comment>
            }</block></catch></try>
        }</block></then></if>

        <try>try <block>{
            <decl_stmt><decl><type><name>File</name></type> <name>testDir</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProjectDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"out"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>File</name></type> <name>collectorFile</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>getProjectDir</name><argument_list>()</argument_list></call></expr></argument>,
                                          <argument><expr>"out/FailedTests.java"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        
            <comment type="line">// ensure that there is a clean test environment</comment>
            <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr>"Test directory '" + <call><name><name>testDir</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call>
                        + "' must not exist before the test preparation."</expr></argument>, 
                        <argument><expr><call><name><name>testDir</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr>"The collector file '"
                        + <call><name><name>collectorFile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call>
                        + "'must not exist before the test preparation."</expr></argument>, 
                        <argument><expr><call><name><name>collectorFile</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        
            <comment type="line">// prepare the test environment</comment>
            <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"failureRecorder.prepare"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Test directory '" + <call><name><name>testDir</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call>
                       + "' was not created."</expr></argument>, <argument><expr><call><name><name>testDir</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"There should be one class."</expr></argument>,
                       <argument><expr>(new <call><name>File</name><argument_list>(<argument><expr><name>testDir</name></expr></argument>, <argument><expr>"A.class"</expr></argument>)</argument_list></call>).<call><name>exists</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr>"The collector file '"
                        + <call><name><name>collectorFile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call> 
                        + "' should not exist before the 1st run."</expr></argument>,
                        <argument><expr><call><name><name>collectorFile</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        
            <comment type="line">// 1st junit run: should do all tests - failing and not failing tests</comment>
            <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"failureRecorder.runtest"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"The collector file '" + <call><name><name>collectorFile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call> 
                       + "' should exist after the 1st run."</expr></argument>,
                       <argument><expr><call><name><name>collectorFile</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// the passing test cases</comment>
            <expr_stmt><expr><call><name>assertOutputContaining</name><argument_list>(<argument><expr>"1st run: should run A.test01"</expr></argument>, <argument><expr>"A.test01"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertOutputContaining</name><argument_list>(<argument><expr>"1st run: should run B.test05"</expr></argument>, <argument><expr>"B.test05"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertOutputContaining</name><argument_list>(<argument><expr>"1st run: should run B.test06"</expr></argument>, <argument><expr>"B.test06"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertOutputContaining</name><argument_list>(<argument><expr>"1st run: should run C.test07"</expr></argument>, <argument><expr>"C.test07"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertOutputContaining</name><argument_list>(<argument><expr>"1st run: should run C.test08"</expr></argument>, <argument><expr>"C.test08"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertOutputContaining</name><argument_list>(<argument><expr>"1st run: should run C.test09"</expr></argument>, <argument><expr>"C.test09"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// the failing test cases</comment>
            <expr_stmt><expr><call><name>assertOutputContaining</name><argument_list>(<argument><expr>"1st run: should run A.test02"</expr></argument>, <argument><expr>"A.test02"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertOutputContaining</name><argument_list>(<argument><expr>"1st run: should run A.test03"</expr></argument>, <argument><expr>"A.test03"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertOutputContaining</name><argument_list>(<argument><expr>"1st run: should run B.test04"</expr></argument>, <argument><expr>"B.test04"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertOutputContaining</name><argument_list>(<argument><expr>"1st run: should run D.test10"</expr></argument>, <argument><expr>"D.test10"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        
            <comment type="line">// 2nd junit run: should do only failing tests</comment>
            <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"failureRecorder.runtest"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"The collector file '" + <call><name><name>collectorFile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call> 
                       + "' should exist after the 2nd run."</expr></argument>,
                       <argument><expr><call><name><name>collectorFile</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// the passing test cases</comment>
            <expr_stmt><expr><call><name>assertOutputNotContaining</name><argument_list>(<argument><expr>"2nd run: should not run A.test01"</expr></argument>,
                                      <argument><expr>"A.test01"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertOutputNotContaining</name><argument_list>(<argument><expr>"2nd run: should not run A.test05"</expr></argument>,
                                      <argument><expr>"B.test05"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertOutputNotContaining</name><argument_list>(<argument><expr>"2nd run: should not run B.test06"</expr></argument>,
                                      <argument><expr>"B.test06"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertOutputNotContaining</name><argument_list>(<argument><expr>"2nd run: should not run C.test07"</expr></argument>,
                                      <argument><expr>"C.test07"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertOutputNotContaining</name><argument_list>(<argument><expr>"2nd run: should not run C.test08"</expr></argument>,
                                      <argument><expr>"C.test08"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertOutputNotContaining</name><argument_list>(<argument><expr>"2nd run: should not run C.test09"</expr></argument>,
                                      <argument><expr>"C.test09"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// the failing test cases</comment>
            <expr_stmt><expr><call><name>assertOutputContaining</name><argument_list>(<argument><expr>"2nd run: should run A.test02"</expr></argument>, <argument><expr>"A.test02"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertOutputContaining</name><argument_list>(<argument><expr>"2nd run: should run A.test03"</expr></argument>, <argument><expr>"A.test03"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertOutputContaining</name><argument_list>(<argument><expr>"2nd run: should run B.test04"</expr></argument>, <argument><expr>"B.test04"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertOutputContaining</name><argument_list>(<argument><expr>"2nd run: should run D.test10"</expr></argument>, <argument><expr>"D.test10"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        
            <comment type="line">// "fix" errors in class A</comment>
            <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"failureRecorder.fixing"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
            <comment type="line">// 3rd run: four running tests with two errors</comment>
            <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"failureRecorder.runtest"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"The collector file '" + <call><name><name>collectorFile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call> 
                       + "' should exist after the 3rd run."</expr></argument>,
                       <argument><expr><call><name><name>collectorFile</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertOutputContaining</name><argument_list>(<argument><expr>"3rd run: should run A.test02"</expr></argument>, <argument><expr>"A.test02"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertOutputContaining</name><argument_list>(<argument><expr>"3rd run: should run A.test03"</expr></argument>, <argument><expr>"A.test03"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertOutputContaining</name><argument_list>(<argument><expr>"3rd run: should run B.test04"</expr></argument>, <argument><expr>"B.test04"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertOutputContaining</name><argument_list>(<argument><expr>"3rd run: should run D.test10"</expr></argument>, <argument><expr>"D.test10"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        
            <comment type="line">// 4rd run: two running tests with errors</comment>
            <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"failureRecorder.runtest"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"The collector file '" + <call><name><name>collectorFile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call> 
                       + "' should exist after the 4th run."</expr></argument>,
                       <argument><expr><call><name><name>collectorFile</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">//TODO: these two statements fail</comment>
            <comment type="line">//assertOutputNotContaining("4th run: should not run A.test02", "A.test02");</comment>
            <comment type="line">//assertOutputNotContaining("4th run: should not run A.test03", "A.test03");</comment>
            <expr_stmt><expr><call><name>assertOutputContaining</name><argument_list>(<argument><expr>"4th run: should run B.test04"</expr></argument>, <argument><expr>"B.test04"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertOutputContaining</name><argument_list>(<argument><expr>"4th run: should run D.test10"</expr></argument>, <argument><expr>"D.test10"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
            <expr_stmt><expr><call><name><name>be</name>.<name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"nested build's log: " + <call><name>getLog</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"nested build's System.out: " + <call><name>getOutput</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"nested build's System.err: " + <call><name>getError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Ant execution failed: " + <call><name><name>be</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testBatchTestForkOnceCustomFormatter</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertResultFilesExist</name><argument_list>(<argument><expr>"testBatchTestForkOnceCustomFormatter"</expr></argument>, <argument><expr>"foo"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// Bugzilla Issue 45411</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testMultilineAssertsNoFork</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectLogNotContaining</name><argument_list>(<argument><expr>"testMultilineAssertsNoFork"</expr></argument>, <argument><expr>"messed up)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertLogNotContaining</name><argument_list>(<argument><expr>"crashed)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// Bugzilla Issue 45411</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testMultilineAssertsFork</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectLogNotContaining</name><argument_list>(<argument><expr>"testMultilineAssertsFork"</expr></argument>, <argument><expr>"messed up)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertLogNotContaining</name><argument_list>(<argument><expr>"crashed)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>assertResultFilesExist</name><parameter_list>(<param><decl><type><name>String</name></type> <name>target</name></decl></param>, <param><decl><type><name>String</name></type> <name>extension</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertResultFileExists</name><argument_list>(<argument><expr>"JUnitClassLoader"</expr></argument>, <argument><expr><name>extension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertResultFileExists</name><argument_list>(<argument><expr>"JUnitTestRunner"</expr></argument>, <argument><expr><name>extension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertResultFileExists</name><argument_list>(<argument><expr>"JUnitVersionHelper"</expr></argument>, <argument><expr><name>extension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>assertResultFileExists</name><parameter_list>(<param><decl><type><name>String</name></type> <name>classNameFragment</name></decl></param>, <param><decl><type><name>String</name></type> <name>ext</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"result for " + <name>classNameFragment</name> + "Test" + <name>ext</name> + " exists"</expr></argument>,
                   <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>resolveFile</name><argument_list>(<argument><expr>"out/TEST-org.apache.tools.ant."
                                            + "taskdefs.optional.junit."
                                            + <name>classNameFragment</name> + "Test" + <name>ext</name></expr></argument>)</argument_list></call>
                   .<call><name>exists</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>assertNoPrint</name><parameter_list>(<param><decl><type><name>String</name></type> <name>result</name></decl></param>, <param><decl><type><name>String</name></type> <name>where</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>where</name> + " '" + <name>result</name> + "' must not contain print statement"</expr></argument>,
                   <argument><expr><call><name><name>result</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"print to System."</expr></argument>)</argument_list></call> == -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>assertOutput</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>FileReader</name></type> <name>inner</name> =<init> <expr>new <call><name>FileReader</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>
                                          .<call><name>resolveFile</name><argument_list>(<argument><expr>"testlog.txt"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BufferedReader</name></type> <name>reader</name> =<init> <expr>new <call><name>BufferedReader</name><argument_list>(<argument><expr><name>inner</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>line</name> =<init> <expr><call><name><name>reader</name>.<name>readLine</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Testsuite: org.apache.tools.ant.taskdefs.optional.junit.Printer"</expr></argument>,
                         <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>line</name> = <call><name><name>reader</name>.<name>readLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>line</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed:"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>line</name> = <call><name><name>reader</name>.<name>readLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"------------- Standard Output ---------------"</expr></argument>,
                         <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertPrint</name><argument_list>(<argument><expr><call><name><name>reader</name>.<name>readLine</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"static"</expr></argument>, <argument><expr>"out"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertPrint</name><argument_list>(<argument><expr><call><name><name>reader</name>.<name>readLine</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"constructor"</expr></argument>, <argument><expr>"out"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertPrint</name><argument_list>(<argument><expr><call><name><name>reader</name>.<name>readLine</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"method"</expr></argument>, <argument><expr>"out"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>line</name> = <call><name><name>reader</name>.<name>readLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"------------- ---------------- ---------------"</expr></argument>,
                         <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>line</name> = <call><name><name>reader</name>.<name>readLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"------------- Standard Error -----------------"</expr></argument>,
                         <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertPrint</name><argument_list>(<argument><expr><call><name><name>reader</name>.<name>readLine</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"static"</expr></argument>, <argument><expr>"err"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertPrint</name><argument_list>(<argument><expr><call><name><name>reader</name>.<name>readLine</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"constructor"</expr></argument>, <argument><expr>"err"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertPrint</name><argument_list>(<argument><expr><call><name><name>reader</name>.<name>readLine</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"method"</expr></argument>, <argument><expr>"err"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>line</name> = <call><name><name>reader</name>.<name>readLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"------------- ---------------- ---------------"</expr></argument>,
                         <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>line</name> = <call><name><name>reader</name>.<name>readLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>line</name> = <call><name><name>reader</name>.<name>readLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>line</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"Testcase: testNoCrash took "</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>inner</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>assertPrint</name><parameter_list>(<param><decl><type><name>String</name></type> <name>line</name></decl></param>, <param><decl><type><name>String</name></type> <name>from</name></decl></param>, <param><decl><type><name>String</name></type> <name>to</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>search</name> =<init> <expr><name>from</name> + " print to System." + <name>to</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>search</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testJUnit4Skip</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testSkippableTests"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>DocumentBuilderFactory</name></type> <name>dbFactory</name> =<init> <expr><call><name><name>DocumentBuilderFactory</name>.<name>newInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DocumentBuilder</name></type> <name>dBuilder</name> =<init> <expr><call><name><name>dbFactory</name>.<name>newDocumentBuilder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Document</name></type> <name>doc</name> =<init> <expr><call><name><name>dBuilder</name>.<name>parse</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getResource</name><argument_list>(<argument><expr>"out/TEST-org.example.junit.JUnit4Skippable.xml"</expr></argument>)</argument_list></call>.<call><name>getInputStream</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Incorrect number of nodes created"</expr></argument>, <argument><expr>8</expr></argument>, <argument><expr><call><name><name>doc</name>.<name>getElementsByTagName</name></name><argument_list>(<argument><expr>"testcase"</expr></argument>)</argument_list></call>.<call><name>getLength</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>XPathFactory</name></type> <name>factory</name> =<init> <expr><call><name><name>XPathFactory</name>.<name>newInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>XPath</name></type> <name>xpath</name> =<init> <expr><call><name><name>factory</name>.<name>newXPath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Incorrect number of skipped tests in header"</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><call><name><name>Integer</name>.<name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>xpath</name>.<name>compile</name></name><argument_list>(<argument><expr>"//testsuite/@skipped"</expr></argument>)</argument_list></call>.<call><name>evaluate</name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Incorrect number of error tests in header"</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><call><name><name>Integer</name>.<name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>xpath</name>.<name>compile</name></name><argument_list>(<argument><expr>"//testsuite/@errors"</expr></argument>)</argument_list></call>.<call><name>evaluate</name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Incorrect number of failure tests in header"</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><call><name><name>Integer</name>.<name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>xpath</name>.<name>compile</name></name><argument_list>(<argument><expr>"//testsuite/@failures"</expr></argument>)</argument_list></call>.<call><name>evaluate</name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Incorrect number of tests in header"</expr></argument>, <argument><expr>8</expr></argument>, <argument><expr><call><name><name>Integer</name>.<name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>xpath</name>.<name>compile</name></name><argument_list>(<argument><expr>"//testsuite/@tests"</expr></argument>)</argument_list></call>.<call><name>evaluate</name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Incorrect ignore message on explicit ignored test"</expr></argument>, <argument><expr>"Please don't ignore me!"</expr></argument>, <argument><expr><call><name><name>xpath</name>.<name>compile</name></name><argument_list>(<argument><expr>"//testsuite/testcase[@name='explicitIgnoreTest']/skipped/@message"</expr></argument>)</argument_list></call>.<call><name>evaluate</name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"No message should be set on Ignored tests with no Ignore annotation text"</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>((<name>Node</name>)<call><name><name>xpath</name>.<name>compile</name></name><argument_list>(<argument><expr>"//testsuite/testcase[@name='explicitlyIgnoreTestNoMessage']/skipped"</expr></argument>)</argument_list></call>.<call><name>evaluate</name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr><name><name>XPathConstants</name>.<name>NODE</name></name></expr></argument>)</argument_list></call>).<call><name>getAttributes</name><argument_list>()</argument_list></call>.<call><name>getLength</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Incorrect ignore message on implicit ignored test"</expr></argument>, <argument><expr>"This test will be ignored"</expr></argument>, <argument><expr><call><name><name>xpath</name>.<name>compile</name></name><argument_list>(<argument><expr>"//testsuite/testcase[@name='implicitlyIgnoreTest']/skipped/@message"</expr></argument>)</argument_list></call>.<call><name>evaluate</name><argument_list>(<argument><expr><name>doc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr>"Implicit ignore test should have an ignore element"</expr></argument>, <argument><expr><call><name><name>xpath</name>.<name>compile</name></name><argument_list>(<argument><expr>"//testsuite/testcase[@name='implicitlyIgnoreTestNoMessage']/skipped"</expr></argument>)</argument_list></call>.<call><name>evaluate</name><argument_list>(<argument><expr><name>doc</name></expr></argument>, <argument><expr><name><name>XPathConstants</name>.<name>NODE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testTestMethods</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testTestMethods"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNonTestsSkipped</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testNonTests"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr>"Test result should not exist as test was skipped - TEST-org.example.junit.NonTestMissed.xml"</expr></argument>, <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getResource</name><argument_list>(<argument><expr>"out/TEST-org.example.junit.NonTestMissed.xml"</expr></argument>)</argument_list></call>.<call><name>isExists</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr>"Test result should not exist as test was skipped - TEST-org.example.junit.JUnit3NonTestMissed.xml"</expr></argument>, <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getResource</name><argument_list>(<argument><expr>"out/TEST-org.example.junit.JUnit3TestMissed.xml"</expr></argument>)</argument_list></call>.<call><name>isExists</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr>"Test result should not exist as test was skipped - TEST-org.example.junit.AbstractTestMissed.xml"</expr></argument>, <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getResource</name><argument_list>(<argument><expr>"out/TEST-org.example.junit.AbstractTestMissed.xml"</expr></argument>)</argument_list></call>.<call><name>isExists</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr>"Test result should not exist as test was skipped - TEST-org.example.junit.AbstractJUnit3TestMissed.xml"</expr></argument>, <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getResource</name><argument_list>(<argument><expr>"out/TEST-org.example.junit.AbstractJUnit3TestMissed.xml"</expr></argument>)</argument_list></call>.<call><name>isExists</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Test result should exist as test was not skipped - TEST-org.example.junit.AbstractTestNotMissed.xml"</expr></argument>, <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getResource</name><argument_list>(<argument><expr>"out/TEST-org.example.junit.AbstractTestNotMissed.xml"</expr></argument>)</argument_list></call>.<call><name>isExists</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Test result should exist as test was not skipped - TEST-org.example.junit.AbstractJUnit3TestNotMissed.xml"</expr></argument>, <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getResource</name><argument_list>(<argument><expr>"out/TEST-org.example.junit.AbstractJUnit3TestNotMissed.xml"</expr></argument>)</argument_list></call>.<call><name>isExists</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Test result should exist as test was not skipped - TEST-org.example.junit.TestNotMissed.xml"</expr></argument>, <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getResource</name><argument_list>(<argument><expr>"out/TEST-org.example.junit.TestNotMissed.xml"</expr></argument>)</argument_list></call>.<call><name>isExists</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Test result should exist as test was not skipped - TEST-org.example.junit.JUnit3TestNotMissed.xml"</expr></argument>, <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getResource</name><argument_list>(<argument><expr>"out/TEST-org.example.junit.JUnit3TestNotMissed.xml"</expr></argument>)</argument_list></call>.<call><name>isExists</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Test result should exist as test was not skipped - TEST-org.example.junit.TestWithSuiteNotMissed.xml"</expr></argument>, <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getResource</name><argument_list>(<argument><expr>"out/TEST-org.example.junit.TestWithSuiteNotMissed.xml"</expr></argument>)</argument_list></call>.<call><name>isExists</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testNonTestsRun"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Test result should exist as test was not skipped - TEST-org.example.junit.NonTestMissed.xml"</expr></argument>, <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getResource</name><argument_list>(<argument><expr>"out/TEST-org.example.junit.NonTestMissed.xml"</expr></argument>)</argument_list></call>.<call><name>isExists</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Test result should exist as test was not skipped - TEST-org.example.junit.JUnit3NonTestMissed.xml"</expr></argument>, <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getResource</name><argument_list>(<argument><expr>"out/TEST-org.example.junit.JUnit3NonTestMissed.xml"</expr></argument>)</argument_list></call>.<call><name>isExists</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Test result should exist as test was not skipped - TEST-org.example.junit.TestNotMissed.xml"</expr></argument>, <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getResource</name><argument_list>(<argument><expr>"out/TEST-org.example.junit.TestNotMissed.xml"</expr></argument>)</argument_list></call>.<call><name>isExists</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Test result should exist as test was not skipped - TEST-org.example.junit.JUnit3TestNotMissed.xml"</expr></argument>, <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getResource</name><argument_list>(<argument><expr>"out/TEST-org.example.junit.JUnit3TestNotMissed.xml"</expr></argument>)</argument_list></call>.<call><name>isExists</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Test result should exist as test was not skipped - TEST-org.example.junit.AbstractTestMissed.xml"</expr></argument>, <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getResource</name><argument_list>(<argument><expr>"out/TEST-org.example.junit.AbstractTestMissed.xml"</expr></argument>)</argument_list></call>.<call><name>isExists</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Test result should exist as test was not skipped - TEST-org.example.junit.AbstractTestNotMissed.xml"</expr></argument>, <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getResource</name><argument_list>(<argument><expr>"out/TEST-org.example.junit.AbstractTestNotMissed.xml"</expr></argument>)</argument_list></call>.<call><name>isExists</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Test result should exist as test was not skipped - TEST-org.example.junit.AbstractJUnit3TestMissed.xml"</expr></argument>, <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getResource</name><argument_list>(<argument><expr>"out/TEST-org.example.junit.AbstractJUnit3TestMissed.xml"</expr></argument>)</argument_list></call>.<call><name>isExists</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Test result should exist as test was not skipped - TEST-org.example.junit.JUnit3NonTestMissed.xml"</expr></argument>, <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getResource</name><argument_list>(<argument><expr>"out/TEST-org.example.junit.JUnit3NonTestMissed.xml"</expr></argument>)</argument_list></call>.<call><name>isExists</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Test result should exist as test was not skipped - TEST-org.example.junit.TestWithSuiteNotMissed.xml"</expr></argument>, <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getResource</name><argument_list>(<argument><expr>"out/TEST-org.example.junit.TestWithSuiteNotMissed.xml"</expr></argument>)</argument_list></call>.<call><name>isExists</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

}</block></class>
</unit>
