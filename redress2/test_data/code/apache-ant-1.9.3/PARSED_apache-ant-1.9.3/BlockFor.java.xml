<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\testing\BlockFor.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>testing</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>WaitFor</name></name>;</import>

<comment type="javadoc">/**
 * @since Ant 1.8
 */</comment>

<class><specifier>public</specifier> class <name>BlockFor</name> <super><extends>extends <name>WaitFor</name></extends></super> <block>{

    <comment type="javadoc">/**
     * Text to include in a message
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>text</name></decl>;</decl_stmt>


    <comment type="javadoc">/**
     * Constructor that takes the name of the task in the task name.
     *
     */</comment>
    <constructor><specifier>public</specifier> <name>BlockFor</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr>"blockfor"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>text</name> = <call><name>getTaskName</name><argument_list>()</argument_list></call> + " timed out"</expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructor that takes the name of the task in the task name.
     *
     * @param taskName the name of the task.
     */</comment>
    <constructor><specifier>public</specifier> <name>BlockFor</name><parameter_list>(<param><decl><type><name>String</name></type> <name>taskName</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>taskName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * If the wait fails, a BuildException is thrown. All the superclasses actions are called first.
     * @throws BuildTimeoutException on timeout, using the text in {@link #text}
     *
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>processTimeout</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildTimeoutException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>super</name>.<name>processTimeout</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <throw>throw <expr>new <call><name>BuildTimeoutException</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>

    <comment type="javadoc">/**
     * Set the error text; all properties are expanded in the message.
     *
     * @param message the text to use in a failure message
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addText</name><parameter_list>(<param><decl><type><name>String</name></type> <name>message</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>text</name> = <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>replaceProperties</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
