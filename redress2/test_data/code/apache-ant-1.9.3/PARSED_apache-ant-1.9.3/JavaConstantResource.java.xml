<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\types\resources\JavaConstantResource.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ByteArrayInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name>.<name>Field</name></name>;</import>

<comment type="javadoc">/**
 * A resource that is a java constant.
 * This lets you extract values off the classpath and use them elsewhere
 * @since Ant 1.7
 */</comment>

<class><specifier>public</specifier> class <name>JavaConstantResource</name> <super><extends>extends <name>AbstractClasspathResource</name></extends></super> <block>{
    <comment type="javadoc">/**
     * open the input stream from a specific classloader
     *
     * @param cl the classloader to use. Will be null if the system classloader is used
     * @return an open input stream for the resource
     * @throws IOException if an error occurs.
     */</comment>
    <function><type><specifier>protected</specifier> <name>InputStream</name></type> <name>openInputStream</name><parameter_list>(<param><decl><type><name>ClassLoader</name></type> <name>cl</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>clazz</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>constant</name> =<init> <expr><call><name>getName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>index1</name> =<init> <expr><call><name><name>constant</name>.<name>lastIndexOf</name></name><argument_list>(<argument><expr>'.'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>index1</name> &lt; 0</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IOException</name><argument_list>(<argument><expr>"No class name in " + <name>constant</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> =<init> <expr><name>index1</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>classname</name> =<init> <expr><call><name><name>constant</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>fieldname</name> =<init> <expr><call><name><name>constant</name>.<name>substring</name></name><argument_list>(<argument><expr><name>index</name> + 1</expr></argument>, <argument><expr><call><name><name>constant</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>clazz</name> =
                <name>cl</name> != <name>null</name>
                ? <call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr><name>classname</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr><name>cl</name></expr></argument>)</argument_list></call>
                : <call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr><name>classname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Field</name></type> <name>field</name> =<init> <expr><call><name><name>clazz</name>.<name>getField</name></name><argument_list>(<argument><expr><name>fieldname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>value</name> =<init> <expr><call><name><name>field</name>.<name>get</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr>new <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><call><name><name>value</name>.<name>getBytes</name></name><argument_list>(<argument><expr>"UTF-8"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block> <catch>catch (<param><decl><type><name>ClassNotFoundException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>IOException</name><argument_list>(<argument><expr>"Class not found:" + <name>classname</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <catch>catch (<param><decl><type><name>NoSuchFieldException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>IOException</name><argument_list>(
                <argument><expr>"Field not found:" + <name>fieldname</name> + " in " + <name>classname</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <catch>catch (<param><decl><type><name>IllegalAccessException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>IOException</name><argument_list>(<argument><expr>"Illegal access to :" + <name>fieldname</name> + " in " + <name>classname</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <catch>catch (<param><decl><type><name>NullPointerException</name></type> <name>npe</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>IOException</name><argument_list>(<argument><expr>"Not a static field: " + <name>fieldname</name> + " in " + <name>classname</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

}</block></class>
</unit>
