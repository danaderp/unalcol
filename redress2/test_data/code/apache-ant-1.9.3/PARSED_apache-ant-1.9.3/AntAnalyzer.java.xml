<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\depend\AntAnalyzer.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>depend</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Hashtable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>zip</name>.<name>ZipEntry</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>zip</name>.<name>ZipFile</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>depend</name>.<name>AbstractAnalyzer</name></name>;</import>

<comment type="javadoc">/**
 * An analyzer which uses the depend task's bytecode classes to analyze
 * dependencies
 *
 */</comment>
<class><specifier>public</specifier> class <name>AntAnalyzer</name> <super><extends>extends <name>AbstractAnalyzer</name></extends></super> <block>{
    <comment type="javadoc">/**
     * Default constructor
     */</comment>
    <constructor><specifier>public</specifier> <name>AntAnalyzer</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <comment type="javadoc">/**
     * Determine the dependencies of the configured root classes.
     *
     * @param files a vector to be populated with the files which contain
     *      the dependency classes
     * @param classes a vector to be populated with the names of the
     *      dependency classes.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>determineDependencies</name><parameter_list>(<param><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>File</name></argument>&gt;</argument_list></name></type> <name>files</name></decl></param>, <param><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>classes</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// we get the root classes and build up a set of</comment>
        <comment type="line">// classes upon which they depend</comment>
        <decl_stmt><decl><type><name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>dependencies</name> =<init> <expr>new <call><name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Hashtable</name><argument_list>&lt;<argument><name>File</name></argument>, <argument><name>File</name></argument>&gt;</argument_list></name></type> <name>containers</name> =<init> <expr>new <call><name><name>Hashtable</name><argument_list>&lt;<argument><name>File</name></argument>, <argument><name>File</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>toAnalyze</name> =<init> <expr>new <call><name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name><name>Enumeration</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>e</name> =<init> <expr><call><name>getRootClasses</name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>classname</name> =<init> <expr><call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>toAnalyze</name>.<name>put</name></name><argument_list>(<argument><expr><name>classname</name></expr></argument>, <argument><expr><name>classname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <decl_stmt><decl><type><name>int</name></type> <name>count</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>maxCount</name> =<init> <expr><call><name>isClosureRequired</name><argument_list>()</argument_list></call> ? <name>MAX_LOOPS</name> : 1</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>analyzedDeps</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>toAnalyze</name>.<name>size</name></name><argument_list>()</argument_list></call> != 0 &amp;&amp; <name>count</name>++ &lt; <name>maxCount</name></expr>)</condition> <block>{
            <expr_stmt><expr><name>analyzedDeps</name> = new <call><name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <for>for (<init><decl><type><name><name>Enumeration</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>e</name> =<init> <expr><call><name><name>toAnalyze</name>.<name>keys</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>classname</name> =<init> <expr><call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>dependencies</name>.<name>put</name></name><argument_list>(<argument><expr><name>classname</name></expr></argument>, <argument><expr><name>classname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <try>try <block>{
                    <decl_stmt><decl><type><name>File</name></type> <name>container</name> =<init> <expr><call><name>getClassContainer</name><argument_list>(<argument><expr><name>classname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>container</name> == <name>null</name></expr>)</condition><then> <block>{
                        <continue>continue;</continue>
                    }</block></then></if>
                    <expr_stmt><expr><call><name><name>containers</name>.<name>put</name></name><argument_list>(<argument><expr><name>container</name></expr></argument>, <argument><expr><name>container</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <decl_stmt><decl><type><name>ZipFile</name></type> <name>zipFile</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>InputStream</name></type> <name>inStream</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                    <try>try <block>{
                        <if>if <condition>(<expr><call><name><name>container</name>.<name>getName</name></name><argument_list>()</argument_list></call>.<call><name>endsWith</name><argument_list>(<argument><expr>".class"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                            <expr_stmt><expr><name>inStream</name> = new <call><name>FileInputStream</name><argument_list>(<argument><expr><call><name><name>container</name>.<name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then> <else>else <block>{
                            <expr_stmt><expr><name>zipFile</name> = new <call><name>ZipFile</name><argument_list>(<argument><expr><call><name><name>container</name>.<name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <decl_stmt><decl><type><name>String</name></type> <name>entryName</name>
                                =<init> <expr><call><name><name>classname</name>.<name>replace</name></name><argument_list>(<argument><expr>'.'</expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call> + ".class"</expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name>ZipEntry</name></type> <name>entry</name> =<init> <expr>new <call><name>ZipEntry</name><argument_list>(<argument><expr><name>entryName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <expr_stmt><expr><name>inStream</name>
                                = <call><name><name>zipFile</name>.<name>getInputStream</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></else></if>
                        <decl_stmt><decl><type><name>ClassFile</name></type> <name>classFile</name> =<init> <expr>new <call><name>ClassFile</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>classFile</name>.<name>read</name></name><argument_list>(<argument><expr><name>inStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <for>for (<init><decl><type><name>String</name></type> <name>dependency</name> :<range> <expr><call><name><name>classFile</name>.<name>getClassRefs</name></name><argument_list>()</argument_list></call></expr></range></decl></init>) <block>{
                            <expr_stmt><expr><call><name><name>analyzedDeps</name>.<name>put</name></name><argument_list>(<argument><expr><name>dependency</name></expr></argument>, <argument><expr><name>dependency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></for>
                    }</block> <finally>finally <block>{
                        <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>inStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>zipFile</name> != <name>null</name></expr>)</condition><then> <block>{
                            <expr_stmt><expr><call><name><name>zipFile</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                    }</block></finally></try>
                }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ioe</name></decl></param>) <block>{
                    <comment type="line">// ignore</comment>
                }</block></catch></try>
            }</block></for>

            <expr_stmt><expr><call><name><name>toAnalyze</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// now recover all the dependencies collected and add to the list.</comment>
            <for>for (<init><decl><type><name>String</name></type> <name>className</name> :<range> <expr><call><name><name>analyzedDeps</name>.<name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>) <block>{
                <if>if <condition>(<expr>!<call><name><name>dependencies</name>.<name>containsKey</name></name><argument_list>(<argument><expr><name>className</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>toAnalyze</name>.<name>put</name></name><argument_list>(<argument><expr><name>className</name></expr></argument>, <argument><expr><name>className</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
        }</block></while>

        <comment type="line">// pick up the last round of dependencies that were determined</comment>
        <for>for (<init><decl><type><name>String</name></type> <name>className</name> :<range> <expr><call><name><name>analyzedDeps</name>.<name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>) <block>{
            <expr_stmt><expr><call><name><name>dependencies</name>.<name>put</name></name><argument_list>(<argument><expr><name>className</name></expr></argument>, <argument><expr><name>className</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <expr_stmt><expr><call><name><name>files</name>.<name>removeAllElements</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>File</name></type> <name>f</name> :<range> <expr><call><name><name>containers</name>.<name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>) <block>{
            <expr_stmt><expr><call><name><name>files</name>.<name>add</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <expr_stmt><expr><call><name><name>classes</name>.<name>removeAllElements</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>String</name></type> <name>dependency</name> :<range><expr><call><name><name>dependencies</name>.<name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>) <block>{
            <expr_stmt><expr><call><name><name>classes</name>.<name>add</name></name><argument_list>(<argument><expr><name>dependency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Indicate if this analyzer can determine dependent files.
     *
     * @return true if the analyzer provides dependency file information.
     */</comment>
    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>supportsFileDependencies</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>true</expr>;</return>
    }</block></function>

}</block></class>

</unit>
