<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\types\resources\LazyResourceCollectionTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Arrays</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>NoSuchElementException</name></name>;</import>

<import>import <name><name>junit</name>.<name>framework</name>.<name>TestCase</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Resource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>ResourceCollection</name></name>;</import>

<class><specifier>public</specifier> class <name>LazyResourceCollectionTest</name> <super><extends>extends <name>TestCase</name></extends></super> <block>{

    <class><specifier>private</specifier> class <name>StringResourceCollection</name> <super><implements>implements <name>ResourceCollection</name></implements></super> <block>{
        <decl_stmt><decl><type><name>List</name></type> <name>resources</name> =<init> <expr><call><name><name>Arrays</name>.<name>asList</name></name><argument_list>(<argument><expr>new <name><name>Resource</name><index>[]</index></name> <block>{}</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>List</name></type> <name>createdIterators</name> =<init> <expr>new <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>size</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><call><name><name>resources</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name>Resource</name></argument>&gt;</argument_list></name></type> <name>iterator</name><parameter_list>()</parameter_list> <block>{
            <decl_stmt><decl><type><name>StringResourceIterator</name></type> <name>it</name> =<init> <expr>new <call><name>StringResourceIterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>createdIterators</name>.<name>add</name></name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>it</name></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isFilesystemOnly</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></function>
    }</block></class>

    <class><specifier>private</specifier> class <name>StringResourceIterator</name> <super><implements>implements <name>Iterator</name></implements></super> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>cursor</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>remove</name><parameter_list>()</parameter_list> <block>{
            <throw>throw <expr>new <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></function>

        <function><type><specifier>public</specifier> <name>Object</name></type> <name>next</name><parameter_list>()</parameter_list> <block>{
            <if>if <condition>(<expr><name>cursor</name> &lt; 3</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>cursor</name>++</expr>;</expr_stmt>
                <return>return <expr>new <call><name>StringResource</name><argument_list>(<argument><expr>"r" + <name>cursor</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>
            <return>return <expr><name>null</name></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasNext</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>cursor</name> &lt; 3</expr>;</return>
        }</block></function>
    }</block></class>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testLazyLoading</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>StringResourceCollection</name></type> <name>collectionTest</name> =<init> <expr>new <call><name>StringResourceCollection</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LazyResourceCollectionWrapper</name></type> <name>lazyCollection</name> =<init> <expr>new <call><name>LazyResourceCollectionWrapper</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>lazyCollection</name>.<name>add</name></name><argument_list>(<argument><expr><name>collectionTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>Iterator</name><argument_list>&lt;<argument><name>Resource</name></argument>&gt;</argument_list></name></type> <name>it</name> =<init> <expr><call><name><name>lazyCollection</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertOneCreatedIterator</name><argument_list>(<argument><expr><name>collectionTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>StringResourceIterator</name></type> <name>stringResourceIterator</name> =<init> <expr>(<name>StringResourceIterator</name>) <call><name><name>collectionTest</name>.<name>createdIterators</name>
                .<name>get</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"A resource was loaded without iterating"</expr></argument>, <argument><expr>1</expr></argument>,
                <argument><expr><name><name>stringResourceIterator</name>.<name>cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>StringResource</name></type> <name>r</name> =<init> <expr>(<name>StringResource</name>) <call><name><name>it</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertOneCreatedIterator</name><argument_list>(<argument><expr><name>collectionTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"r1"</expr></argument>, <argument><expr><call><name><name>r</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Iterating once load more than 1 resource"</expr></argument>, <argument><expr>2</expr></argument>,
                <argument><expr><name><name>stringResourceIterator</name>.<name>cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>r</name> = (<name>StringResource</name>) <call><name><name>it</name>.<name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertOneCreatedIterator</name><argument_list>(<argument><expr><name>collectionTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"r2"</expr></argument>, <argument><expr><call><name><name>r</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Iterating twice load more than 2 resources"</expr></argument>, <argument><expr>3</expr></argument>,
                <argument><expr><name><name>stringResourceIterator</name>.<name>cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>r</name> = (<name>StringResource</name>) <call><name><name>it</name>.<name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertOneCreatedIterator</name><argument_list>(<argument><expr><name>collectionTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"r3"</expr></argument>, <argument><expr><call><name><name>r</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Iterating 3 times load more than 3 resources"</expr></argument>, <argument><expr>3</expr></argument>,
                <argument><expr><name><name>stringResourceIterator</name>.<name>cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <try>try <block>{
            <expr_stmt><expr><call><name><name>it</name>.<name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"NoSuchElementException shoudl have been raised"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>NoSuchElementException</name></type> <name>e</name></decl></param>) <block>{
            <comment type="line">// ok</comment>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>assertOneCreatedIterator</name><parameter_list>(
            <param><decl><type><name>StringResourceCollection</name></type> <name>testCollection</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"More than one iterator has been created"</expr></argument>, <argument><expr>1</expr></argument>,
                <argument><expr><call><name><name>testCollection</name>.<name>createdIterators</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testCaching</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>StringResourceCollection</name></type> <name>collectionTest</name> =<init> <expr>new <call><name>StringResourceCollection</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LazyResourceCollectionWrapper</name></type> <name>lazyCollection</name> =<init> <expr>new <call><name>LazyResourceCollectionWrapper</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>lazyCollection</name>.<name>add</name></name><argument_list>(<argument><expr><name>collectionTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>lazyCollection</name>.<name>isCache</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>Iterator</name><argument_list>&lt;<argument><name>Resource</name></argument>&gt;</argument_list></name></type> <name>it1</name> =<init> <expr><call><name><name>lazyCollection</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertOneCreatedIterator</name><argument_list>(<argument><expr><name>collectionTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>Iterator</name><argument_list>&lt;<argument><name>Resource</name></argument>&gt;</argument_list></name></type> <name>it2</name> =<init> <expr><call><name><name>lazyCollection</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertOneCreatedIterator</name><argument_list>(<argument><expr><name>collectionTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>StringResourceIterator</name></type> <name>stringResourceIterator</name> =<init> <expr>(<name>StringResourceIterator</name>) <call><name><name>collectionTest</name>.<name>createdIterators</name>
                .<name>get</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"A resource was loaded without iterating"</expr></argument>, <argument><expr>1</expr></argument>,
                <argument><expr><name><name>stringResourceIterator</name>.<name>cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>StringResource</name></type> <name>r</name> =<init> <expr>(<name>StringResource</name>) <call><name><name>it1</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"r1"</expr></argument>, <argument><expr><call><name><name>r</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Iterating once load more than 1 resource"</expr></argument>, <argument><expr>2</expr></argument>,
                <argument><expr><name><name>stringResourceIterator</name>.<name>cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>r</name> = (<name>StringResource</name>) <call><name><name>it2</name>.<name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"r1"</expr></argument>, <argument><expr><call><name><name>r</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(
                <argument><expr>"The second iterator did not lookup in the cache for a resource"</expr></argument>,
                <argument><expr>2</expr></argument>, <argument><expr><name><name>stringResourceIterator</name>.<name>cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>r</name> = (<name>StringResource</name>) <call><name><name>it2</name>.<name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"r2"</expr></argument>, <argument><expr><call><name><name>r</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Iterating twice load more than 2 resources"</expr></argument>, <argument><expr>3</expr></argument>,
                <argument><expr><name><name>stringResourceIterator</name>.<name>cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>r</name> = (<name>StringResource</name>) <call><name><name>it1</name>.<name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"r2"</expr></argument>, <argument><expr><call><name><name>r</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(
                <argument><expr>"The first iterator did not lookup in the cache for a resource"</expr></argument>,
                <argument><expr>3</expr></argument>, <argument><expr><name><name>stringResourceIterator</name>.<name>cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>r</name> = (<name>StringResource</name>) <call><name><name>it2</name>.<name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"r3"</expr></argument>, <argument><expr><call><name><name>r</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Iterating 3 times load more than 3 resources"</expr></argument>, <argument><expr>3</expr></argument>,
                <argument><expr><name><name>stringResourceIterator</name>.<name>cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>r</name> = (<name>StringResource</name>) <call><name><name>it1</name>.<name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"r3"</expr></argument>, <argument><expr><call><name><name>r</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(
                <argument><expr>"The first iterator did not lookup in the cache for a resource"</expr></argument>,
                <argument><expr>3</expr></argument>, <argument><expr><name><name>stringResourceIterator</name>.<name>cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <try>try <block>{
            <expr_stmt><expr><call><name><name>it1</name>.<name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"NoSuchElementException should have been raised"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>NoSuchElementException</name></type> <name>e</name></decl></param>) <block>{
            <comment type="line">// ok</comment>
        }</block></catch></try>

        <try>try <block>{
            <expr_stmt><expr><call><name><name>it2</name>.<name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"NoSuchElementException should have been raised"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>NoSuchElementException</name></type> <name>e</name></decl></param>) <block>{
            <comment type="line">// ok</comment>
        }</block></catch></try>
    }</block></function>
}</block></class>
</unit>
