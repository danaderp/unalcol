<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\taskdefs\ZipExtraFieldTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>ByteArrayInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collections</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>

<import>import <name><name>junit</name>.<name>framework</name>.<name>TestCase</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Resource</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>ResourceCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>ZipResource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>zip</name>.<name>JarMarker</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>zip</name>.<name>Zip64ExtendedInformationExtraField</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>zip</name>.<name>ZipEntry</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>zip</name>.<name>ZipExtraField</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>zip</name>.<name>ZipFile</name></name>;</import>

<class><specifier>public</specifier> class <name>ZipExtraFieldTest</name> <super><extends>extends <name>TestCase</name></extends></super> <block>{

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testPreservesExtraFields</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>testExtraField</name><argument_list>(<argument><expr>new <call><name>Zip</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testDoesntCreateZip64ExtraFieldForJar</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>testExtraField</name><argument_list>(<argument><expr>new <call><name>Jar</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>testExtraField</name><parameter_list>(<param><decl><type><name>Zip</name></type> <name>testInstance</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>expectZip64</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{

        <decl_stmt><decl><type><name>File</name></type> <name>f</name> =<init> <expr><call><name><name>File</name>.<name>createTempFile</name></name><argument_list>(<argument><expr>"ziptest"</expr></argument>, <argument><expr>".zip"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>f</name>.<name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ZipFile</name></type> <name>zf</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>testInstance</name>.<name>setDestFile</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>ZipResource</name></type> <name>r</name> =<init> <expr>new <class><super><name>ZipResource</name></super><argument_list>()</argument_list> <block>{
                    <function><type><specifier>public</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{
                        <return>return <expr>"x"</expr>;</return>
                    }</block></function>
                    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isExists</name><parameter_list>()</parameter_list> <block>{
                        <return>return <expr>true</expr>;</return>
                    }</block></function>
                    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isDirectory</name><parameter_list>()</parameter_list> <block>{
                        <return>return <expr>false</expr>;</return>
                    }</block></function>
                    <function><type><specifier>public</specifier> <name>long</name></type> <name>getLastModified</name><parameter_list>()</parameter_list> <block>{
                        <return>return <expr>1</expr>;</return>
                    }</block></function>
                    <function><type><specifier>public</specifier> <name>InputStream</name></type> <name>getInputStream</name><parameter_list>()</parameter_list> <block>{
                        <return>return <expr>new <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr>new <name><name>byte</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
                    }</block></function>
                    <function><type><specifier>public</specifier> <name>ZipExtraField</name><index>[]</index></type> <name>getExtraFields</name><parameter_list>()</parameter_list> <block>{
                        <return>return <expr>new <name><name>ZipExtraField</name><index>[]</index></name> <block>{
                            <expr>new <call><name>JarMarker</name><argument_list>()</argument_list></call></expr>
                        }</block></expr>;</return>
                    }</block></function>
                }</block></class></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>testInstance</name>.<name>add</name></name><argument_list>(<argument><expr>new <class><super><name>ResourceCollection</name></super><argument_list>()</argument_list> <block>{
                    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isFilesystemOnly</name><parameter_list>()</parameter_list> <block>{ <return>return <expr>false</expr>;</return> }</block></function>
                    <function><type><specifier>public</specifier> <name>int</name></type> <name>size</name><parameter_list>()</parameter_list> <block>{ <return>return <expr>1</expr>;</return> }</block></function>
                    <function><type><specifier>public</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name>Resource</name></argument>&gt;</argument_list></name></type> <name>iterator</name><parameter_list>()</parameter_list> <block>{
                        <return>return <expr><name><name>Collections</name>.<name><name/></name></name>&lt;<name>Resource</name>&gt;<call><name>singleton</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call></expr>;</return>
                    }</block></function>
                }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>testInstance</name>.<name>execute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>zf</name> = new <call><name>ZipFile</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>ZipEntry</name></type> <name>ze</name> =<init> <expr><call><name><name>zf</name>.<name>getEntry</name></name><argument_list>(<argument><expr>"x"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>ze</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expectZip64</name> ? 2 : 1</expr></argument>, <argument><expr><call><name><name>ze</name>.<name>getExtraFields</name></name><argument_list>()</argument_list></call>.<name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>ze</name>.<name>getExtraFields</name></name><argument_list>()</argument_list></call><index>[<expr>0</expr>]</index> <name>instanceof</name> <name>JarMarker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>expectZip64</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>ze</name>.<name>getExtraFields</name></name><argument_list>()</argument_list></call><index>[<expr>1</expr>]</index>
                           <name>instanceof</name> <name>Zip64ExtendedInformationExtraField</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>ZipFile</name>.<name>closeQuietly</name></name><argument_list>(<argument><expr><name>zf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name><name>f</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>f</name>.<name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></finally></try>
    }</block></function>
}</block></class>
</unit>
