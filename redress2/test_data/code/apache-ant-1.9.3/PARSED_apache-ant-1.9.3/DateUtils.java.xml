<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\util\DateUtils.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name></name>;</package>

<import>import <name><name>java</name>.<name>text</name>.<name>ChoiceFormat</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>DateFormat</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>MessageFormat</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>ParseException</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>SimpleDateFormat</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Calendar</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Date</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Locale</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>TimeZone</name></name>;</import>

<comment type="javadoc">/**
 * Helper methods to deal with date/time formatting with a specific
 * defined format (&lt;a href="http://www.w3.org/TR/NOTE-datetime"&gt;ISO8601&lt;/a&gt;)
 * or a plurialization correct elapsed time in minutes and seconds.
 *
 * @since Ant 1.5
 *
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>DateUtils</name> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>ONE_SECOND</name> =<init> <expr>1000</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>ONE_MINUTE</name> =<init> <expr>60</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>ONE_HOUR</name> =<init> <expr>60</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>TEN</name> =<init> <expr>10</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * ISO8601-like pattern for date-time. It does not support timezone.
     *  &lt;tt&gt;yyyy-MM-ddTHH:mm:ss&lt;/tt&gt;
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ISO8601_DATETIME_PATTERN</name>
            =<init> <expr>"yyyy-MM-dd'T'HH:mm:ss"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * ISO8601-like pattern for date. &lt;tt&gt;yyyy-MM-dd&lt;/tt&gt;
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ISO8601_DATE_PATTERN</name>
            =<init> <expr>"yyyy-MM-dd"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * ISO8601-like pattern for time.  &lt;tt&gt;HH:mm:ss&lt;/tt&gt;
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ISO8601_TIME_PATTERN</name>
            =<init> <expr>"HH:mm:ss"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Format used for SMTP (and probably other) Date headers.
     * @deprecated DateFormat is not thread safe, and we cannot guarantee that
     * some other code is using the format in parallel.
     * Deprecated since ant 1.8
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>DateFormat</name></type> <name>DATE_HEADER_FORMAT</name>
        =<init> <expr>new <call><name>SimpleDateFormat</name><argument_list>(<argument><expr>"EEE, dd MMM yyyy HH:mm:ss "</expr></argument>, <argument><expr><name><name>Locale</name>.<name>US</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>DateFormat</name></type> <name>DATE_HEADER_FORMAT_INT</name>
    =<init> <expr>new <call><name>SimpleDateFormat</name><argument_list>(<argument><expr>"EEE, dd MMM yyyy HH:mm:ss "</expr></argument>, <argument><expr><name><name>Locale</name>.<name>US</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    
    
<comment type="line">// code from Magesh moved from DefaultLogger and slightly modified</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>MessageFormat</name></type> <name>MINUTE_SECONDS</name>
            =<init> <expr>new <call><name>MessageFormat</name><argument_list>(<argument><expr>"{0}{1}"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>double</name><index>[]</index></type> <name>LIMITS</name> =<init> <expr><block>{<expr>0</expr>, <expr>1</expr>, <expr>2</expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name><index>[]</index></type> <name>MINUTES_PART</name> =<init> <expr><block>{<expr>""</expr>, <expr>"1 minute "</expr>, <expr>"{0,number,###############} minutes "</expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name><index>[]</index></type> <name>SECONDS_PART</name> =<init> <expr><block>{<expr>"0 seconds"</expr>, <expr>"1 second"</expr>, <expr>"{1,number} seconds"</expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ChoiceFormat</name></type> <name>MINUTES_FORMAT</name> =<init>
            <expr>new <call><name>ChoiceFormat</name><argument_list>(<argument><expr><name>LIMITS</name></expr></argument>, <argument><expr><name>MINUTES_PART</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ChoiceFormat</name></type> <name>SECONDS_FORMAT</name> =<init>
            <expr>new <call><name>ChoiceFormat</name><argument_list>(<argument><expr><name>LIMITS</name></expr></argument>, <argument><expr><name>SECONDS_PART</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    static <block>{
        <expr_stmt><expr><call><name><name>MINUTE_SECONDS</name>.<name>setFormat</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>MINUTES_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>MINUTE_SECONDS</name>.<name>setFormat</name></name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><name>SECONDS_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>

    <comment type="javadoc">/** private constructor */</comment>
    <constructor><specifier>private</specifier> <name>DateUtils</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>


    <comment type="javadoc">/**
     * Format a date/time into a specific pattern.
     * @param date the date to format expressed in milliseconds.
     * @param pattern the pattern to use to format the date.
     * @return the formatted date.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>format</name><parameter_list>(<param><decl><type><name>long</name></type> <name>date</name></decl></param>, <param><decl><type><name>String</name></type> <name>pattern</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>format</name><argument_list>(<argument><expr>new <call><name>Date</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     * Format a date/time into a specific pattern.
     * @param date the date to format expressed in milliseconds.
     * @param pattern the pattern to use to format the date.
     * @return the formatted date.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>format</name><parameter_list>(<param><decl><type><name>Date</name></type> <name>date</name></decl></param>, <param><decl><type><name>String</name></type> <name>pattern</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>DateFormat</name></type> <name>df</name> =<init> <expr><call><name>createDateFormat</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>df</name>.<name>format</name></name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     * Format an elapsed time into a plurialization correct string.
     * It is limited only to report elapsed time in minutes and
     * seconds and has the following behavior.
     * &lt;ul&gt;
     * &lt;li&gt;minutes are not displayed when 0. (ie: "45 seconds")&lt;/li&gt;
     * &lt;li&gt;seconds are always displayed in plural form (ie "0 seconds" or
     * "10 seconds") except for 1 (ie "1 second")&lt;/li&gt;
     * &lt;/ul&gt;
     * @param millis the elapsed time to report in milliseconds.
     * @return the formatted text in minutes/seconds.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>formatElapsedTime</name><parameter_list>(<param><decl><type><name>long</name></type> <name>millis</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>long</name></type> <name>seconds</name> =<init> <expr><name>millis</name> / <name>ONE_SECOND</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>minutes</name> =<init> <expr><name>seconds</name> / <name>ONE_MINUTE</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Object</name><index>[]</index></type> <name>args</name> =<init> <expr><block>{<expr>new <call><name>Long</name><argument_list>(<argument><expr><name>minutes</name></expr></argument>)</argument_list></call></expr>, <expr>new <call><name>Long</name><argument_list>(<argument><expr><name>seconds</name> % <name>ONE_MINUTE</name></expr></argument>)</argument_list></call></expr>}</block></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>MINUTE_SECONDS</name>.<name>format</name></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * return a lenient date format set to GMT time zone.
     * @param pattern the pattern used for date/time formatting.
     * @return the configured format for this pattern.
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>DateFormat</name></type> <name>createDateFormat</name><parameter_list>(<param><decl><type><name>String</name></type> <name>pattern</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>SimpleDateFormat</name></type> <name>sdf</name> =<init> <expr>new <call><name>SimpleDateFormat</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TimeZone</name></type> <name>gmt</name> =<init> <expr><call><name><name>TimeZone</name>.<name>getTimeZone</name></name><argument_list>(<argument><expr>"GMT"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sdf</name>.<name>setTimeZone</name></name><argument_list>(<argument><expr><name>gmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sdf</name>.<name>setLenient</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>sdf</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculate the phase of the moon for a given date.
     *
     * &lt;p&gt;Code heavily influenced by hacklib.c in &lt;a
     * href="http://www.nethack.org/"&gt;Nethack&lt;/a&gt;&lt;/p&gt;
     *
     * &lt;p&gt;The Algorithm:
     *
     * &lt;pre&gt;
     * moon period = 29.53058 days ~= 30, year = 365.2422 days
     *
     * days moon phase advances on first day of year compared to preceding year
     *  = 365.2422 - 12*29.53058 ~= 11
     *
     * years in Metonic cycle (time until same phases fall on the same days of
     *  the month) = 18.6 ~= 19
     *
     * moon phase on first day of year (epact) ~= (11*(year%19) + 18) % 30
     *  (18 as initial condition for 1900)
     *
     * current phase in days = first day phase + days elapsed in year
     *
     * 6 moons ~= 177 days
     * 177 ~= 8 reported phases * 22
     * + 11/22 for rounding
     * &lt;/pre&gt;
     *
     * @param cal the calander.
     *
     * @return The phase of the moon as a number between 0 and 7 with
     *         0 meaning new moon and 4 meaning full moon.
     *
     * @since 1.2, Ant 1.5
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getPhaseOfMoon</name><parameter_list>(<param><decl><type><name>Calendar</name></type> <name>cal</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// CheckStyle:MagicNumber OFF</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>dayOfTheYear</name> =<init> <expr><call><name><name>cal</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>DAY_OF_YEAR</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>yearInMetonicCycle</name> =<init> <expr>((<call><name><name>cal</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>YEAR</name></name></expr></argument>)</argument_list></call> - 1900) % 19) + 1</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>epact</name> =<init> <expr>(11 * <name>yearInMetonicCycle</name> + 18) % 30</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>(<name>epact</name> == 25 &amp;&amp; <name>yearInMetonicCycle</name> &gt; 11) || <name>epact</name> == 24</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>epact</name>++</expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr>(((((<name>dayOfTheYear</name> + <name>epact</name>) * 6) + 11) % 177) / 22) &amp; 7</expr>;</return>
        <comment type="line">// CheckStyle:MagicNumber ON</comment>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the current Date in a format suitable for a SMTP date
     * header.
     * @return the current date.
     * @since Ant 1.5.2
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getDateForHeader</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Calendar</name></type> <name>cal</name> =<init> <expr><call><name><name>Calendar</name>.<name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TimeZone</name></type> <name>tz</name> =<init> <expr><call><name><name>cal</name>.<name>getTimeZone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>offset</name> =<init> <expr><call><name><name>tz</name>.<name>getOffset</name></name><argument_list>(<argument><expr><call><name><name>cal</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>ERA</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                  <argument><expr><call><name><name>cal</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>YEAR</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                  <argument><expr><call><name><name>cal</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>MONTH</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                  <argument><expr><call><name><name>cal</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>DAY_OF_MONTH</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                  <argument><expr><call><name><name>cal</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>DAY_OF_WEEK</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                  <argument><expr><call><name><name>cal</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>MILLISECOND</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>tzMarker</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>(<argument><expr><name>offset</name> &lt; 0 ? "-" : "+"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>offset</name> = <call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>hours</name> =<init> <expr><name>offset</name> / (<name>ONE_HOUR</name> * <name>ONE_MINUTE</name> * <name>ONE_SECOND</name>)</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>minutes</name> =<init> <expr><name>offset</name> / (<name>ONE_MINUTE</name> * <name>ONE_SECOND</name>) - <name>ONE_HOUR</name> * <name>hours</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>hours</name> &lt; <name>TEN</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>tzMarker</name>.<name>append</name></name><argument_list>(<argument><expr>"0"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>tzMarker</name>.<name>append</name></name><argument_list>(<argument><expr><name>hours</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>minutes</name> &lt; <name>TEN</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>tzMarker</name>.<name>append</name></name><argument_list>(<argument><expr>"0"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>tzMarker</name>.<name>append</name></name><argument_list>(<argument><expr><name>minutes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <synchronized>synchronized (<expr><name>DATE_HEADER_FORMAT_INT</name></expr>) <block>{
            <return>return <expr><call><name><name>DATE_HEADER_FORMAT_INT</name>.<name>format</name></name><argument_list>(<argument><expr><call><name><name>cal</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> + <call><name><name>tzMarker</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></synchronized>
    }</block></function>

    <comment type="javadoc">/**
     * Parses the string in a format suitable for a SMTP date header.
     *
     * @param datestr string to be parsed
     *
     * @return a java.util.Date object as parsed by the format.
     * @exception ParseException if the supplied string cannot be parsed by
     * this pattern.
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Date</name></type> <name>parseDateFromHeader</name><parameter_list>(<param><decl><type><name>String</name></type> <name>datestr</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>ParseException</name></expr></argument></throws> <block>{
        <synchronized>synchronized (<expr><name>DATE_HEADER_FORMAT_INT</name></expr>) <block>{
            <return>return <expr><call><name><name>DATE_HEADER_FORMAT_INT</name>.<name>parse</name></name><argument_list>(<argument><expr><name>datestr</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></synchronized>
    }</block></function>

    <comment type="javadoc">/**
     * Parse a string as a datetime using the ISO8601_DATETIME format which is
     * &lt;code&gt;yyyy-MM-dd'T'HH:mm:ss&lt;/code&gt;
     *
     * @param datestr string to be parsed
     *
     * @return a java.util.Date object as parsed by the format.
     * @exception ParseException if the supplied string cannot be parsed by
     * this pattern.
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Date</name></type> <name>parseIso8601DateTime</name><parameter_list>(<param><decl><type><name>String</name></type> <name>datestr</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>ParseException</name></expr></argument></throws> <block>{
        <return>return <expr>new <call><name>SimpleDateFormat</name><argument_list>(<argument><expr><name>ISO8601_DATETIME_PATTERN</name></expr></argument>)</argument_list></call>.<call><name>parse</name><argument_list>(<argument><expr><name>datestr</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Parse a string as a date using the ISO8601_DATE format which is
     * &lt;code&gt;yyyy-MM-dd&lt;/code&gt;
     *
     * @param datestr string to be parsed
     *
     * @return a java.util.Date object as parsed by the format.
     * @exception ParseException if the supplied string cannot be parsed by
     * this pattern.
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Date</name></type> <name>parseIso8601Date</name><parameter_list>(<param><decl><type><name>String</name></type> <name>datestr</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>ParseException</name></expr></argument></throws> <block>{
        <return>return <expr>new <call><name>SimpleDateFormat</name><argument_list>(<argument><expr><name>ISO8601_DATE_PATTERN</name></expr></argument>)</argument_list></call>.<call><name>parse</name><argument_list>(<argument><expr><name>datestr</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Parse a string as a date using the either the ISO8601_DATETIME
     * or ISO8601_DATE formats.
     *
     * @param datestr string to be parsed
     *
     * @return a java.util.Date object as parsed by the formats.
     * @exception ParseException if the supplied string cannot be parsed by
     * either of these patterns.
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Date</name></type> <name>parseIso8601DateTimeOrDate</name><parameter_list>(<param><decl><type><name>String</name></type> <name>datestr</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>ParseException</name></expr></argument></throws> <block>{
        <try>try <block>{
            <return>return <expr><call><name>parseIso8601DateTime</name><argument_list>(<argument><expr><name>datestr</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block> <catch>catch (<param><decl><type><name>ParseException</name></type> <name>px</name></decl></param>) <block>{
            <return>return <expr><call><name>parseIso8601Date</name><argument_list>(<argument><expr><name>datestr</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></catch></try>
    }</block></function>
}</block></class>
</unit>
