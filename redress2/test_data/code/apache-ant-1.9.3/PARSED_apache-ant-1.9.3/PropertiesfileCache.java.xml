<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\types\selectors\modifiedselector\PropertiesfileCache.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>modifiedselector</name></name>;</package>


<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Properties</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>BufferedInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>BufferedOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileOutputStream</name></name>;</import>


<comment type="javadoc">/**
 * Use java.util.Properties for storing the values.
 * The use of this Cache-implementation requires the use of the parameter
 * &lt;param name="cache.cachefile" .../&gt; for defining, where to store the
 * properties file.
 *
 * The ModifiedSelector sets the &lt;i&gt;cachefile&lt;/i&gt; to the default value
 * &lt;i&gt;cache.properties&lt;/i&gt;.
 *
 * Supported &lt;param&gt;s are:
 * &lt;table&gt;
 * &lt;tr&gt;
 *   &lt;th&gt;name&lt;/th&gt;&lt;th&gt;values&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;th&gt;required&lt;/th&gt;
 * &lt;/tr&gt;
 * &lt;tr&gt;
 *   &lt;td&gt; cache.cachefile &lt;/td&gt;
 *   &lt;td&gt; &lt;i&gt;path to file&lt;/i&gt; &lt;/td&gt;
 *   &lt;td&gt; the name of the properties file &lt;/td&gt;
 *   &lt;td&gt; yes &lt;/td&gt;
 * &lt;/tr&gt;
 * &lt;/table&gt;
 *
 * @version 2003-09-13
 * @since  Ant 1.6
 */</comment>
<class><specifier>public</specifier> class <name>PropertiesfileCache</name> <super><implements>implements <name>Cache</name></implements></super> <block>{


    <comment type="line">// -----  member variables - configuration  -----</comment>


    <comment type="javadoc">/** Where to store the properties? */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>cachefile</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Object for storing the key-value-pairs. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Properties</name></type> <name>cache</name> =<init> <expr>new <call><name>Properties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


    <comment type="line">// -----  member variables - internal use  -----</comment>


    <comment type="javadoc">/** Is the cache already loaded? Prevents from multiple load operations. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>cacheLoaded</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Must the cache be saved? Prevents from multiple save operations. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>cacheDirty</name>  =<init> <expr>true</expr></init></decl>;</decl_stmt>


    <comment type="line">// -----  Constructors  -----</comment>


    <comment type="javadoc">/** Bean-Constructor. */</comment>
    <constructor><specifier>public</specifier> <name>PropertiesfileCache</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructor.
     * @param cachefile set the cachefile
     */</comment>
    <constructor><specifier>public</specifier> <name>PropertiesfileCache</name><parameter_list>(<param><decl><type><name>File</name></type> <name>cachefile</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>cachefile</name></name> = <name>cachefile</name></expr>;</expr_stmt>
    }</block></constructor>


    <comment type="line">// -----  Cache-Configuration  -----</comment>


    <comment type="javadoc">/**
     * Setter.
     * @param file new value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCachefile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>file</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>cachefile</name> = <name>file</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Getter.
     * @return the cachefile
     */</comment>
    <function><type><specifier>public</specifier> <name>File</name></type> <name>getCachefile</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>cachefile</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * This cache is valid if the cachefile is set.
     * @return true if all is ok false otherwise
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isValid</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>(<name>cachefile</name> != <name>null</name>)</expr>;</return>
    }</block></function>


    <comment type="line">// -----  Data Access</comment>


    <comment type="javadoc">/**
     * Load the cache from underlying properties file.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>load</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr>(<name>cachefile</name> != <name>null</name>) &amp;&amp; <call><name><name>cachefile</name>.<name>isFile</name></name><argument_list>()</argument_list></call> &amp;&amp; <call><name><name>cachefile</name>.<name>canRead</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <try>try <block>{
                <decl_stmt><decl><type><name>BufferedInputStream</name></type> <name>bis</name> =<init> <expr>new <call><name>BufferedInputStream</name><argument_list>(
                    <argument><expr>new <call><name>FileInputStream</name><argument_list>(<argument><expr><name>cachefile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>cache</name>.<name>load</name></name><argument_list>(<argument><expr><name>bis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bis</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
                <expr_stmt><expr><call><name><name>e</name>.<name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></then></if>
        <comment type="line">// after loading the cache is up to date with the file</comment>
        <expr_stmt><expr><name>cacheLoaded</name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><name>cacheDirty</name>  = false</expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Saves modification of the cache.
     * Cache is only saved if there is one ore more entries.
     * Because entries can not be deleted by this API, this Cache
     * implementation checks the existence of entries before creating the file
     * for performance optimisation.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>save</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr>!<name>cacheDirty</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <if>if <condition>(<expr>(<name>cachefile</name> != <name>null</name>) &amp;&amp; <call><name><name>cache</name>.<name>propertyNames</name></name><argument_list>()</argument_list></call>.<call><name>hasMoreElements</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <try>try <block>{
                <decl_stmt><decl><type><name>BufferedOutputStream</name></type> <name>bos</name> =<init> <expr>new <call><name>BufferedOutputStream</name><argument_list>(
                      <argument><expr>new <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>cachefile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>cache</name>.<name>store</name></name><argument_list>(<argument><expr><name>bos</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bos</name>.<name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bos</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
                <expr_stmt><expr><call><name><name>e</name>.<name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></then></if>
        <expr_stmt><expr><name>cacheDirty</name> = false</expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/** Deletes the cache and its underlying file. */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>delete</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>cache</name> = new <call><name>Properties</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cachefile</name>.<name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cacheLoaded</name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><name>cacheDirty</name> = false</expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a value for a given key from the cache.
     * @param key the key
     * @return the stored value
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>get</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>key</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr>!<name>cacheLoaded</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>load</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <try>try <block>{
            <return>return <expr><call><name><name>cache</name>.<name>getProperty</name></name><argument_list>(<argument><expr><call><name><name>String</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block> <catch>catch (<param><decl><type><name>ClassCastException</name></type> <name>e</name></decl></param>) <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * Saves a key-value-pair in the cache.
     * @param key the key
     * @param value the value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>put</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>key</name></decl></param>, <param><decl><type><name>Object</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>cache</name>.<name>put</name></name><argument_list>(<argument><expr><call><name><name>String</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>String</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cacheDirty</name> = true</expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns an iterator over the keys in the cache.
     * @return An iterator over the keys.
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>iterator</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>v</name> =<init> <expr>new <call><name><name>Vector</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Enumeration</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>en</name> =<init> <expr><call><name><name>cache</name>.<name>propertyNames</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>en</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <expr_stmt><expr><call><name><name>v</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>en</name>.<name>nextElement</name></name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <return>return <expr><call><name><name>v</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>


    <comment type="line">// -----  additional  -----</comment>


    <comment type="javadoc">/**
     * Override Object.toString().
     * @return information about this cache
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>buf</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr>"&lt;PropertiesfileCache:"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr>"cachefile="</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><name>cachefile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr>";noOfEntries="</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><call><name><name>cache</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr>"&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>buf</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
