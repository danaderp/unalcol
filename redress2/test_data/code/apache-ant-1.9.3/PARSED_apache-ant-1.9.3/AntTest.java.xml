<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\taskdefs\AntTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>

<import>import <name><name>junit</name>.<name>framework</name>.<name>AssertionFailedError</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildFileTest</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildListener</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>input</name>.<name>InputHandler</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>input</name>.<name>PropertyFileInputHandler</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Path</name></name>;</import>

<comment type="javadoc">/**
 */</comment>
<class><specifier>public</specifier> class <name>AntTest</name> <super><extends>extends <name>BuildFileTest</name></extends></super> <block>{

    <constructor><specifier>public</specifier> <name>AntTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr>"src/etc/testcases/taskdefs/ant.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"cleanup"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>test1</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildException</name><argument_list>(<argument><expr>"test1"</expr></argument>, <argument><expr>"recursive call"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// target must be specified</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>test2</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildException</name><argument_list>(<argument><expr>"test2"</expr></argument>, <argument><expr>"required argument not specified"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// Should fail since a recursion will occur...</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>test3</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildException</name><argument_list>(<argument><expr>"test1"</expr></argument>, <argument><expr>"recursive call"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>test4</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildException</name><argument_list>(<argument><expr>"test4"</expr></argument>, <argument><expr>"target attribute must not be empty"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>test4b</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildException</name><argument_list>(<argument><expr>"test4b"</expr></argument>, <argument><expr>"target doesn't exist"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>test5</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"test5"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>test6</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"test6"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testExplicitBasedir1</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>dir1</name> =<init> <expr><call><name>getProjectDir</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>dir2</name> =<init> <expr><call><name><name>project</name>.<name>resolveFile</name></name><argument_list>(<argument><expr>".."</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>testBaseDirs</name><argument_list>(<argument><expr>"explicitBasedir1"</expr></argument>,
                     <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>dir1</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr>,
                                   <expr><call><name><name>dir2</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr>
                     }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testExplicitBasedir2</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>dir1</name> =<init> <expr><call><name>getProjectDir</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>dir2</name> =<init> <expr><call><name><name>project</name>.<name>resolveFile</name></name><argument_list>(<argument><expr>".."</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>testBaseDirs</name><argument_list>(<argument><expr>"explicitBasedir2"</expr></argument>,
                     <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>dir1</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr>,
                                   <expr><call><name><name>dir2</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr>
                     }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testInheritBasedir</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>basedir</name> =<init> <expr><call><name>getProjectDir</name><argument_list>()</argument_list></call>.<call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>testBaseDirs</name><argument_list>(<argument><expr>"inheritBasedir"</expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr><name>basedir</name></expr>, <expr><name>basedir</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testDoNotInheritBasedir</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>dir1</name> =<init> <expr><call><name>getProjectDir</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>dir2</name> =<init> <expr><call><name><name>project</name>.<name>resolveFile</name></name><argument_list>(<argument><expr>"ant"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>testBaseDirs</name><argument_list>(<argument><expr>"doNotInheritBasedir"</expr></argument>,
                     <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>dir1</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr>,
                                   <expr><call><name><name>dir2</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr>
                     }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testBasedirTripleCall</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>dir1</name> =<init> <expr><call><name>getProjectDir</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>dir2</name> =<init> <expr><call><name><name>project</name>.<name>resolveFile</name></name><argument_list>(<argument><expr>"ant"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>testBaseDirs</name><argument_list>(<argument><expr>"tripleCall"</expr></argument>,
                     <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>dir1</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr>,
                                   <expr><call><name><name>dir2</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr>,
                                   <expr><call><name><name>dir1</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr>
                     }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>testBaseDirs</name><parameter_list>(<param><decl><type><name>String</name></type> <name>target</name></decl></param>, <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>dirs</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>BasedirChecker</name></type> <name>bc</name> =<init> <expr>new <call><name>BasedirChecker</name><argument_list>(<argument><expr><name>dirs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>addBuildListener</name></name><argument_list>(<argument><expr><name>bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>AssertionFailedError</name></type> <name>ae</name> =<init> <expr><call><name><name>bc</name>.<name>getError</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>ae</name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr><name>ae</name></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>project</name>.<name>removeBuildListener</name></name><argument_list>(<argument><expr><name>bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testReferenceInheritance</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Path</name></type> <name>p</name> =<init> <expr><name><name>Path</name>.<name>systemClasspath</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>setProject</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>addReference</name></name><argument_list>(<argument><expr>"path"</expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>addReference</name></name><argument_list>(<argument><expr>"no-override"</expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testReference</name><argument_list>(<argument><expr>"testInherit"</expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"path"</expr>, <expr>"path"</expr>}</block></expr></argument>,
                      <argument><expr>new <name><name>boolean</name><index>[]</index></name> <block>{<expr>true</expr>, <expr>true</expr>}</block></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testReference</name><argument_list>(<argument><expr>"testInherit"</expr></argument>,
                      <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"no-override"</expr>, <expr>"no-override"</expr>}</block></expr></argument>,
                      <argument><expr>new <name><name>boolean</name><index>[]</index></name> <block>{<expr>true</expr>, <expr>false</expr>}</block></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testReference</name><argument_list>(<argument><expr>"testInherit"</expr></argument>,
                      <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"no-override"</expr>, <expr>"no-override"</expr>}</block></expr></argument>,
                      <argument><expr>new <name><name>boolean</name><index>[]</index></name> <block>{<expr>false</expr>, <expr>false</expr>}</block></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testReferenceNoInheritance</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Path</name></type> <name>p</name> =<init> <expr><name><name>Path</name>.<name>systemClasspath</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>setProject</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>addReference</name></name><argument_list>(<argument><expr>"path"</expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>addReference</name></name><argument_list>(<argument><expr>"no-override"</expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testReference</name><argument_list>(<argument><expr>"testNoInherit"</expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"path"</expr>, <expr>"path"</expr>}</block></expr></argument>,
                      <argument><expr>new <name><name>boolean</name><index>[]</index></name> <block>{<expr>true</expr>, <expr>false</expr>}</block></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testReference</name><argument_list>(<argument><expr>"testNoInherit"</expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"path"</expr>, <expr>"path"</expr>}</block></expr></argument>,
                      <argument><expr>new <name><name>boolean</name><index>[]</index></name> <block>{<expr>false</expr>, <expr>true</expr>}</block></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testReference</name><argument_list>(<argument><expr>"testInherit"</expr></argument>,
                      <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"no-override"</expr>, <expr>"no-override"</expr>}</block></expr></argument>,
                      <argument><expr>new <name><name>boolean</name><index>[]</index></name> <block>{<expr>true</expr>, <expr>false</expr>}</block></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testReference</name><argument_list>(<argument><expr>"testInherit"</expr></argument>,
                      <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"no-override"</expr>, <expr>"no-override"</expr>}</block></expr></argument>,
                      <argument><expr>new <name><name>boolean</name><index>[]</index></name> <block>{<expr>false</expr>, <expr>false</expr>}</block></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testReferenceRename</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Path</name></type> <name>p</name> =<init> <expr><name><name>Path</name>.<name>systemClasspath</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>setProject</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>addReference</name></name><argument_list>(<argument><expr>"path"</expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testReference</name><argument_list>(<argument><expr>"testRename"</expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"path"</expr>, <expr>"path"</expr>}</block></expr></argument>,
                      <argument><expr>new <name><name>boolean</name><index>[]</index></name> <block>{<expr>true</expr>, <expr>false</expr>}</block></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testReference</name><argument_list>(<argument><expr>"testRename"</expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"path"</expr>, <expr>"path"</expr>}</block></expr></argument>,
                      <argument><expr>new <name><name>boolean</name><index>[]</index></name> <block>{<expr>false</expr>, <expr>true</expr>}</block></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testReference</name><argument_list>(<argument><expr>"testRename"</expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"newpath"</expr>, <expr>"newpath"</expr>}</block></expr></argument>,
                      <argument><expr>new <name><name>boolean</name><index>[]</index></name> <block>{<expr>false</expr>, <expr>true</expr>}</block></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testInheritPath</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testInheritPath"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>testReference</name><parameter_list>(<param><decl><type><name>String</name></type> <name>target</name></decl></param>, <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>keys</name></decl></param>,
                                 <param><decl><type><name><name>boolean</name><index>[]</index></name></type> <name>expect</name></decl></param>, <param><decl><type><name>Object</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>ReferenceChecker</name></type> <name>rc</name> =<init> <expr>new <call><name>ReferenceChecker</name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><name>expect</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>addBuildListener</name></name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>AssertionFailedError</name></type> <name>ae</name> =<init> <expr><call><name><name>rc</name>.<name>getError</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>ae</name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr><name>ae</name></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>project</name>.<name>removeBuildListener</name></name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testLogfilePlacement</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>File</name><index>[]</index></type> <name>logFiles</name> =<init> <expr>new <name><name>File</name><index>[]</index></name> <block>{
            <expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>resolveFile</name><argument_list>(<argument><expr>"test1.log"</expr></argument>)</argument_list></call></expr>,
            <expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>resolveFile</name><argument_list>(<argument><expr>"test2.log"</expr></argument>)</argument_list></call></expr>,
            <expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>resolveFile</name><argument_list>(<argument><expr>"ant/test3.log"</expr></argument>)</argument_list></call></expr>,
            <expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>resolveFile</name><argument_list>(<argument><expr>"ant/test4.log"</expr></argument>)</argument_list></call></expr>
        }</block></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name><name>logFiles</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name><name>logFiles</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>getName</name><argument_list>()</argument_list></call>+" doesn\'t exist"</expr></argument>,
                       <argument><expr>!<name><name>logFiles</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>exists</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testLogfilePlacement"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name><name>logFiles</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name><name>logFiles</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>getName</name><argument_list>()</argument_list></call>+" exists"</expr></argument>,
                       <argument><expr><name><name>logFiles</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>exists</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testInputHandlerInheritance</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>InputHandler</name></type> <name>ih</name> =<init> <expr>new <call><name>PropertyFileInputHandler</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>setInputHandler</name><argument_list>(<argument><expr><name>ih</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>InputHandlerChecker</name></type> <name>ic</name> =<init> <expr>new <call><name>InputHandlerChecker</name><argument_list>(<argument><expr><name>ih</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>addBuildListener</name><argument_list>(<argument><expr><name>ic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"tripleCall"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>AssertionFailedError</name></type> <name>ae</name> =<init> <expr><call><name><name>ic</name>.<name>getError</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>ae</name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr><name>ae</name></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>removeBuildListener</name><argument_list>(<argument><expr><name>ic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testRefId</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Path</name></type> <name>testPath</name> =<init> <expr>new <call><name>Path</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>testPath</name>.<name>createPath</name></name><argument_list>()</argument_list></call>.<call><name>setPath</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"java.class.path"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>PropertyChecker</name></type> <name>pc</name> =<init>
            <expr>new <call><name>PropertyChecker</name><argument_list>(<argument><expr>"testprop"</expr></argument>,
                                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr><name>null</name></expr>,
                                              <expr><call><name><name>testPath</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>addBuildListener</name></name><argument_list>(<argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testRefid"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>AssertionFailedError</name></type> <name>ae</name> =<init> <expr><call><name><name>pc</name>.<name>getError</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>ae</name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr><name>ae</name></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>project</name>.<name>removeBuildListener</name></name><argument_list>(<argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testUserPropertyWinsInheritAll</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>setUserProperty</name><argument_list>(<argument><expr>"test"</expr></argument>, <argument><expr>"7"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>expectLogContaining</name><argument_list>(<argument><expr>"test-property-override-inheritall-start"</expr></argument>,
                            <argument><expr>"The value of test is 7"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testUserPropertyWinsNoInheritAll</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>setUserProperty</name><argument_list>(<argument><expr>"test"</expr></argument>, <argument><expr>"7"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>expectLogContaining</name><argument_list>(<argument><expr>"test-property-override-no-inheritall-start"</expr></argument>,
                            <argument><expr>"The value of test is 7"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testOverrideWinsInheritAll</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectLogContaining</name><argument_list>(<argument><expr>"test-property-override-inheritall-start"</expr></argument>,
                            <argument><expr>"The value of test is 4"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testOverrideWinsNoInheritAll</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectLogContaining</name><argument_list>(<argument><expr>"test-property-override-no-inheritall-start"</expr></argument>,
                            <argument><expr>"The value of test is 4"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testPropertySet</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"test-propertyset"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name>getLog</name><argument_list>()</argument_list></call>.<call><name>indexOf</name><argument_list>(<argument><expr>"test1 is ${test1}"</expr></argument>)</argument_list></call> &gt; -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name>getLog</name><argument_list>()</argument_list></call>.<call><name>indexOf</name><argument_list>(<argument><expr>"test2 is ${test2}"</expr></argument>)</argument_list></call> &gt; -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name>getLog</name><argument_list>()</argument_list></call>.<call><name>indexOf</name><argument_list>(<argument><expr>"test1.x is 1"</expr></argument>)</argument_list></call> &gt; -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testInfiniteLoopViaDepends</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildException</name><argument_list>(<argument><expr>"infinite-loop-via-depends"</expr></argument>, <argument><expr>"recursive call"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testMultiSameProperty</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectLog</name><argument_list>(<argument><expr>"multi-same-property"</expr></argument>, <argument><expr>"prop is two"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testTopLevelTarget</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectLog</name><argument_list>(<argument><expr>"topleveltarget"</expr></argument>, <argument><expr>"Hello world"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testMultiplePropertyFileChildren</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>PropertyChecker</name></type> <name>pcBar</name> =<init> <expr>new <call><name>PropertyChecker</name><argument_list>(<argument><expr>"bar"</expr></argument>,
                                                    <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr><name>null</name></expr>, <expr>"Bar"</expr>}</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PropertyChecker</name></type> <name>pcFoo</name> =<init> <expr>new <call><name>PropertyChecker</name><argument_list>(<argument><expr>"foo"</expr></argument>,
                                                    <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr><name>null</name></expr>, <expr>"Foo"</expr>}</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>addBuildListener</name></name><argument_list>(<argument><expr><name>pcBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>addBuildListener</name></name><argument_list>(<argument><expr><name>pcFoo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"multiple-property-file-children"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>AssertionFailedError</name></type> <name>aeBar</name> =<init> <expr><call><name><name>pcBar</name>.<name>getError</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>aeBar</name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr><name>aeBar</name></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>AssertionFailedError</name></type> <name>aeFoo</name> =<init> <expr><call><name><name>pcFoo</name>.<name>getError</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>aeFoo</name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr><name>aeFoo</name></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>project</name>.<name>removeBuildListener</name></name><argument_list>(<argument><expr><name>pcBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>removeBuildListener</name></name><argument_list>(<argument><expr><name>pcFoo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testBlankTarget</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildException</name><argument_list>(<argument><expr>"blank-target"</expr></argument>, <argument><expr>"target name must not be empty"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testMultipleTargets</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectLog</name><argument_list>(<argument><expr>"multiple-targets"</expr></argument>, <argument><expr>"tadadctbdbtc"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testMultipleTargets2</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectLog</name><argument_list>(<argument><expr>"multiple-targets-2"</expr></argument>, <argument><expr>"dadctb"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testAntCoreLib</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// Cf. #42263</comment>
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"sub-show-ant.core.lib"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>realLog</name> =<init> <expr><call><name>getLog</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"found ant.core.lib in: " + <name>realLog</name></expr></argument>, <argument><expr><call><name><name>realLog</name>.<name>matches</name></name><argument_list>(<argument><expr>".*(ant[.]jar|build.classes).*"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <class><specifier>private</specifier> class <name>BasedirChecker</name> <super><implements>implements <name>BuildListener</name></implements></super> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name><index>[]</index></type> <name>expectedBasedirs</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>calls</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>AssertionFailedError</name></type> <name>error</name></decl>;</decl_stmt>

        <constructor><name>BasedirChecker</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>dirs</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name>expectedBasedirs</name> = <name>dirs</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>buildStarted</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{}</block></function>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>buildFinished</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{}</block></function>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>targetFinished</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list><block>{}</block></function>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>taskStarted</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{}</block></function>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>taskFinished</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{}</block></function>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>messageLogged</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>targetStarted</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
            <if>if <condition>(<expr><call><name><name>event</name>.<name>getTarget</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return;</return>
            }</block></then></if>
            <if>if <condition>(<expr><name>error</name> == <name>null</name></expr>)</condition><then> <block>{
                <try>try <block>{
                    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>expectedBasedirs</name><index>[<expr><name>calls</name>++</expr>]</index></name></expr></argument>,
                                 <argument><expr><call><name><name>event</name>.<name>getProject</name></name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call>.<call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>AssertionFailedError</name></type> <name>e</name></decl></param>) <block>{
                    <expr_stmt><expr><name>error</name> = <name>e</name></expr>;</expr_stmt>
                }</block></catch></try>
            }</block></then></if>
        }</block></function>

        <function><type><name>AssertionFailedError</name></type> <name>getError</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>error</name></expr>;</return>
        }</block></function>

    }</block></class>

    <class><specifier>private</specifier> class <name>ReferenceChecker</name> <super><implements>implements <name>BuildListener</name></implements></super> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name><index>[]</index></type> <name>keys</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name><index>[]</index></type> <name>expectSame</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>Object</name></type> <name>value</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>calls</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>AssertionFailedError</name></type> <name>error</name></decl>;</decl_stmt>

        <constructor><name>ReferenceChecker</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>keys</name></decl></param>, <param><decl><type><name><name>boolean</name><index>[]</index></name></type> <name>expectSame</name></decl></param>, <param><decl><type><name>Object</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>keys</name></name> = <name>keys</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>expectSame</name></name> = <name>expectSame</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>value</name></name> = <name>value</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>buildStarted</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{}</block></function>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>buildFinished</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{}</block></function>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>targetFinished</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list><block>{}</block></function>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>taskStarted</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{}</block></function>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>taskFinished</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{}</block></function>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>messageLogged</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>targetStarted</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
            <if>if <condition>(<expr><call><name><name>event</name>.<name>getTarget</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return;</return>
            }</block></then></if>
            <if>if <condition>(<expr><name>error</name> == <name>null</name></expr>)</condition><then> <block>{
                <try>try <block>{
                    <decl_stmt><decl><type><name>String</name></type> <name>msg</name> =<init>
                        <expr>"Call " + <name>calls</name> + " refid=\'" + <name><name>keys</name><index>[<expr><name>calls</name></expr>]</index></name> + "\'"</expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>value</name> == <name>null</name></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>Object</name></type> <name>o</name> =<init> <expr><call><name><name>event</name>.<name>getProject</name></name><argument_list>()</argument_list></call>.<call><name>getReference</name><argument_list>(<argument><expr><name><name>keys</name><index>[<expr><name>calls</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if>if <condition>(<expr><name><name>expectSame</name><index>[<expr><name>calls</name>++</expr>]</index></name></expr>)</condition><then> <block>{
                            <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then> <else>else <block>{
                            <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></else></if>
                    }</block></then> <else>else <block>{
                        <comment type="line">// a rather convoluted equals() test</comment>
                        <decl_stmt><decl><type><name>Path</name></type> <name>expect</name> =<init> <expr>(<name>Path</name>) <name>value</name></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Path</name></type> <name>received</name> =<init> <expr>(<name>Path</name>) <call><name><name>event</name>.<name>getProject</name></name><argument_list>()</argument_list></call>.<call><name>getReference</name><argument_list>(<argument><expr><name><name>keys</name><index>[<expr><name>calls</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>boolean</name></type> <name>shouldBeEqual</name> =<init> <expr><name><name>expectSame</name><index>[<expr><name>calls</name>++</expr>]</index></name></expr></init></decl>;</decl_stmt>
                        <if>if <condition>(<expr><name>received</name> == <name>null</name></expr>)</condition><then> <block>{
                            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr>!<name>shouldBeEqual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then> <else>else <block>{
                            <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>l1</name> =<init> <expr><call><name><name>expect</name>.<name>list</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>l2</name> =<init> <expr><call><name><name>received</name>.<name>list</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                            <if>if <condition>(<expr><name><name>l1</name>.<name>length</name></name> == <name><name>l2</name>.<name>length</name></name></expr>)</condition><then> <block>{
                                <for>for (<init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name><name>l1</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                                    <if>if <condition>(<expr>!<name><name>l1</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>equals</name><argument_list>(<argument><expr><name><name>l2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr>!<name>shouldBeEqual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    }</block></then></if>
                                }</block></for>
                                <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>shouldBeEqual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></then> <else>else <block>{
                                <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr>!<name>shouldBeEqual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></else></if>
                        }</block></else></if>
                    }</block></else></if>
                }</block> <catch>catch (<param><decl><type><name>AssertionFailedError</name></type> <name>e</name></decl></param>) <block>{
                    <expr_stmt><expr><name>error</name> = <name>e</name></expr>;</expr_stmt>
                }</block></catch></try>
            }</block></then></if>
        }</block></function>

        <function><type><name>AssertionFailedError</name></type> <name>getError</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>error</name></expr>;</return>
        }</block></function>

    }</block></class>

    <class><specifier>private</specifier> class <name>InputHandlerChecker</name> <super><implements>implements <name>BuildListener</name></implements></super> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>InputHandler</name></type> <name>ih</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>AssertionFailedError</name></type> <name>error</name></decl>;</decl_stmt>

        <constructor><name>InputHandlerChecker</name><parameter_list>(<param><decl><type><name>InputHandler</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name>ih</name> = <name>value</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>buildStarted</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>buildFinished</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>targetFinished</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>taskStarted</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>taskFinished</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>messageLogged</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>targetStarted</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>check</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
            <if>if <condition>(<expr><name>error</name> == <name>null</name></expr>)</condition><then> <block>{
                <try>try <block>{
                    <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><call><name><name>event</name>.<name>getProject</name></name><argument_list>()</argument_list></call>.<call><name>getInputHandler</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>assertSame</name><argument_list>(<argument><expr><name>ih</name></expr></argument>, <argument><expr><call><name><name>event</name>.<name>getProject</name></name><argument_list>()</argument_list></call>.<call><name>getInputHandler</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>AssertionFailedError</name></type> <name>e</name></decl></param>) <block>{
                    <expr_stmt><expr><name>error</name> = <name>e</name></expr>;</expr_stmt>
                }</block></catch></try>
            }</block></then></if>
        }</block></function>

        <function><type><name>AssertionFailedError</name></type> <name>getError</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>error</name></expr>;</return>
        }</block></function>

    }</block></class>

    <class><specifier>private</specifier> class <name>PropertyChecker</name> <super><implements>implements <name>BuildListener</name></implements></super> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name><index>[]</index></type> <name>expectedValues</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>key</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>calls</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>AssertionFailedError</name></type> <name>error</name></decl>;</decl_stmt>

        <constructor><name>PropertyChecker</name><parameter_list>(<param><decl><type><name>String</name></type> <name>key</name></decl></param>, <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>values</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>key</name></name> = <name>key</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>expectedValues</name></name> = <name>values</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>buildStarted</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{}</block></function>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>buildFinished</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{}</block></function>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>targetFinished</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list><block>{}</block></function>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>taskStarted</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{}</block></function>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>taskFinished</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{}</block></function>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>messageLogged</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>targetStarted</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
            <if>if <condition>(<expr><call><name><name>event</name>.<name>getTarget</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return;</return>
            }</block></then></if>
            <if>if <condition>(<expr><name>calls</name> &gt;= <name><name>expectedValues</name>.<name>length</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>error</name> = new <call><name>AssertionFailedError</name><argument_list>(<argument><expr>"Unexpected invocation of"
                                                 + " target "
                                                 + <call><name><name>event</name>.<name>getTarget</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <if>if <condition>(<expr><name>error</name> == <name>null</name></expr>)</condition><then> <block>{
                <try>try <block>{
                    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>expectedValues</name><index>[<expr><name>calls</name>++</expr>]</index></name></expr></argument>,
                                 <argument><expr><call><name><name>event</name>.<name>getProject</name></name><argument_list>()</argument_list></call>.<call><name>getProperty</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>AssertionFailedError</name></type> <name>e</name></decl></param>) <block>{
                    <expr_stmt><expr><name>error</name> = <name>e</name></expr>;</expr_stmt>
                }</block></catch></try>
            }</block></then></if>
        }</block></function>

        <function><type><name>AssertionFailedError</name></type> <name>getError</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>error</name></expr>;</return>
        }</block></function>

    }</block></class>


}</block></class>
</unit>
