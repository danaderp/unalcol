<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\filters\ConcatFilter.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>filters</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Reader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>BufferedReader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileReader</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Parameter</name></name>;</import>

<comment type="javadoc">/**
 * Concats a file before and/or after the file.
 *
 * &lt;p&gt;Example:&lt;pre&gt;
 * &lt;copy todir="build"&gt;
 *     &lt;fileset dir="src" includes="*.java"/&gt;
 *     &lt;filterchain&gt;
 *         &lt;concatfilter prepend="apache-license-java.txt"/&gt;
 *     &lt;/filterchain&gt;
 * &lt;/copy&gt;
 * &lt;/pre&gt;
 * Copies all java sources from &lt;i&gt;src&lt;/i&gt; to &lt;i&gt;build&lt;/i&gt; and adds the
 * content of &lt;i&gt;apache-license-java.txt&lt;/i&gt; add the beginning of each
 * file.&lt;/p&gt;
 *
 * @since 1.6
 * @version 2003-09-23
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>ConcatFilter</name> <super><extends>extends <name>BaseParamFilterReader</name></extends>
    <implements>implements <name>ChainableReader</name></implements></super> <block>{

    <comment type="javadoc">/** File to add before the content. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>prepend</name></decl>;</decl_stmt>

    <comment type="javadoc">/** File to add after the content. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>append</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Reader for prepend-file. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Reader</name></type> <name>prependReader</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Reader for append-file. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Reader</name></type> <name>appendReader</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructor for "dummy" instances.
     *
     * @see BaseFilterReader#BaseFilterReader()
     */</comment>
    <constructor><specifier>public</specifier> <name>ConcatFilter</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a new filtered reader.
     *
     * @param in A Reader object providing the underlying stream.
     *           Must not be &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <constructor><specifier>public</specifier> <name>ConcatFilter</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Reader</name></type> <name>in</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the next character in the filtered stream. If the desired
     * number of lines have already been read, the resulting stream is
     * effectively at an end. Otherwise, the next character from the
     * underlying stream is read and returned.
     *
     * @return the next character in the resulting stream, or -1
     * if the end of the resulting stream has been reached
     *
     * @exception IOException if the underlying stream throws an IOException
     * during reading
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>read</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <comment type="line">// do the "singleton" initialization</comment>
        <if>if <condition>(<expr>!<call><name>getInitialized</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>initialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setInitialized</name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name>int</name></type> <name>ch</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>

        <comment type="line">// The readers return -1 if they end. So simply read the "prepend"</comment>
        <comment type="line">// after that the "content" and at the end the "append" file.</comment>
        <if>if <condition>(<expr><name>prependReader</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>ch</name> = <call><name><name>prependReader</name>.<name>read</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>ch</name> == -1</expr>)</condition><then> <block>{
                <comment type="line">// I am the only one so I have to close the reader</comment>
                <expr_stmt><expr><call><name><name>prependReader</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>prependReader</name> = <name>null</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <if>if <condition>(<expr><name>ch</name> == -1</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>ch</name> = <call><name><name>super</name>.<name>read</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>ch</name> == -1</expr>)</condition><then> <block>{
            <comment type="line">// don't call super.close() because that reader is used</comment>
            <comment type="line">// on other places ...</comment>
            <if>if <condition>(<expr><name>appendReader</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>ch</name> = <call><name><name>appendReader</name>.<name>read</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>ch</name> == -1</expr>)</condition><then> <block>{
                    <comment type="line">// I am the only one so I have to close the reader</comment>
                    <expr_stmt><expr><call><name><name>appendReader</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>appendReader</name> = <name>null</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></then></if>

        <return>return <expr><name>ch</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets &lt;i&gt;prepend&lt;/i&gt; attribute.
     * @param prepend new value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPrepend</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>File</name></type> <name>prepend</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>prepend</name></name> = <name>prepend</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns &lt;i&gt;prepend&lt;/i&gt; attribute.
     * @return prepend attribute
     */</comment>
    <function><type><specifier>public</specifier> <name>File</name></type> <name>getPrepend</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>prepend</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets &lt;i&gt;append&lt;/i&gt; attribute.
     * @param append new value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAppend</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>File</name></type> <name>append</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>append</name></name> = <name>append</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns &lt;i&gt;append&lt;/i&gt; attribute.
     * @return append attribute
     */</comment>
    <function><type><specifier>public</specifier> <name>File</name></type> <name>getAppend</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>append</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Creates a new ConcatReader using the passed in
     * Reader for instantiation.
     *
     * @param rdr A Reader object providing the underlying stream.
     *            Must not be &lt;code&gt;null&lt;/code&gt;.
     *
     * @return a new filter based on this configuration, but filtering
     *         the specified reader
     */</comment>
    <function><type><specifier>public</specifier> <name>Reader</name></type> <name>chain</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Reader</name></type> <name>rdr</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>ConcatFilter</name></type> <name>newFilter</name> =<init> <expr>new <call><name>ConcatFilter</name><argument_list>(<argument><expr><name>rdr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>newFilter</name>.<name>setPrepend</name></name><argument_list>(<argument><expr><call><name>getPrepend</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>newFilter</name>.<name>setAppend</name></name><argument_list>(<argument><expr><call><name>getAppend</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Usually the initialized is set to true. But here it must not.</comment>
        <comment type="line">// Because the prepend and append readers have to be instantiated</comment>
        <comment type="line">// on runtime</comment>
        <comment type="line">//newFilter.setInitialized(true);</comment>
        <return>return <expr><name>newFilter</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Scans the parameters list for the "lines" parameter and uses
     * it to set the number of lines to be returned in the filtered stream.
     * also scan for skip parameter.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>initialize</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <comment type="line">// get parameters</comment>
        <decl_stmt><decl><type><name>Parameter</name><index>[]</index></type> <name>params</name> =<init> <expr><call><name>getParameters</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>params</name> != <name>null</name></expr>)</condition><then> <block>{
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>params</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <if>if <condition>(<expr>"prepend".<call><name>equals</name><argument_list>(<argument><expr><name><name>params</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>setPrepend</name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><name><name>params</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <continue>continue;</continue>
                }</block></then></if>
                <if>if <condition>(<expr>"append".<call><name>equals</name><argument_list>(<argument><expr><name><name>params</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>setAppend</name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><name><name>params</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <continue>continue;</continue>
                }</block></then></if>
            }</block></for>
        }</block></then></if>
        <if>if <condition>(<expr><name>prepend</name> != <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr>!<call><name><name>prepend</name>.<name>isAbsolute</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>prepend</name> = new <call><name>File</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>prepend</name>.<name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>prependReader</name> = new <call><name>BufferedReader</name><argument_list>(<argument><expr>new <call><name>FileReader</name><argument_list>(<argument><expr><name>prepend</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>append</name> != <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr>!<call><name><name>append</name>.<name>isAbsolute</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>append</name> = new <call><name>File</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>append</name>.<name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>appendReader</name> = new <call><name>BufferedReader</name><argument_list>(<argument><expr>new <call><name>FileReader</name><argument_list>(<argument><expr><name>append</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
   }</block></function>
}</block></class>
</unit>
