<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\condition\ParserSupports.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>condition</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>ProjectComponent</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>JAXPUtils</name></name>;</import>

<import>import <name><name>org</name>.<name>xml</name>.<name>sax</name>.<name>SAXNotRecognizedException</name></name>;</import>
<import>import <name><name>org</name>.<name>xml</name>.<name>sax</name>.<name>SAXNotSupportedException</name></name>;</import>
<import>import <name><name>org</name>.<name>xml</name>.<name>sax</name>.<name>XMLReader</name></name>;</import>

<comment type="javadoc">/**
 * Test for the XML parser supporting a particular feature
 * @since Ant 1.7
 */</comment>
<class><specifier>public</specifier> class <name>ParserSupports</name> <super><extends>extends <name>ProjectComponent</name></extends> <implements>implements <name>Condition</name></implements></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>feature</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>property</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>value</name></decl>;</decl_stmt>
    <comment type="line">// Error messages</comment>
    <comment type="javadoc">/** error - combined attributes not allowed */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ERROR_BOTH_ATTRIBUTES</name> =<init>
            <expr>"Property and feature attributes are exclusive"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** feature */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FEATURE</name> =<init> <expr>"feature"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** property */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PROPERTY</name> =<init> <expr>"property"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** error - not recognized */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>NOT_RECOGNIZED</name> =<init>
            <expr>" not recognized: "</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** error - not supported */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>NOT_SUPPORTED</name> =<init>
            <expr>" not supported: "</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** error - missing attribute */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ERROR_NO_ATTRIBUTES</name> =<init>
        <expr>"Neither feature or property are set"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** error - no value */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ERROR_NO_VALUE</name> =<init>
        <expr>"A value is needed when testing for property support"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Feature to probe for.
     * @param feature the feature to probe for.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFeature</name><parameter_list>(<param><decl><type><name>String</name></type> <name>feature</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>feature</name></name> = <name>feature</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Property to probe for
     * @param property the property to probe for.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setProperty</name><parameter_list>(<param><decl><type><name>String</name></type> <name>property</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>property</name></name> = <name>property</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Optional value to set.
     * Converted to a boolean value when setting a property
     * @param value the value to set.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setValue</name><parameter_list>(<param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>value</name></name> = <name>value</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/** {@inheritDoc}. */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>eval</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>feature</name> != <name>null</name> &amp;&amp; <name>property</name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>ERROR_BOTH_ATTRIBUTES</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>feature</name> == <name>null</name> &amp;&amp; <name>property</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>ERROR_NO_ATTRIBUTES</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <comment type="line">//pick a value that is good for everything</comment>
        <if>if <condition>(<expr><name>feature</name> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name>evalFeature</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>value</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>ERROR_NO_VALUE</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr><call><name>evalProperty</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get our reader
     * @return a reader
     */</comment>
    <function><type><specifier>private</specifier> <name>XMLReader</name></type> <name>getReader</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>JAXPUtils</name>.<name>getParser</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>JAXPUtils</name>.<name>getXMLReader</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set a feature
     * @return true if the feature could be set
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>evalFeature</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>XMLReader</name></type> <name>reader</name> =<init> <expr><call><name>getReader</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>value</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>value</name> = "true"</expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>boolean</name></type> <name>v</name> =<init> <expr><call><name><name>Project</name>.<name>toBoolean</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>reader</name>.<name>setFeature</name></name><argument_list>(<argument><expr><name>feature</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>SAXNotRecognizedException</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>FEATURE</name> + <name>NOT_RECOGNIZED</name> + <name>feature</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>false</expr>;</return>
        }</block></catch> <catch>catch (<param><decl><type><name>SAXNotSupportedException</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>FEATURE</name> + <name>NOT_SUPPORTED</name> + <name>feature</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>false</expr>;</return>
        }</block></catch></try>
        <return>return <expr>true</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set a property
     * @return true if the feature could be set
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>evalProperty</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>XMLReader</name></type> <name>reader</name> =<init> <expr><call><name>getReader</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>reader</name>.<name>setProperty</name></name><argument_list>(<argument><expr><name>property</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>SAXNotRecognizedException</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>PROPERTY</name> + <name>NOT_RECOGNIZED</name> + <name>property</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>false</expr>;</return>
        }</block></catch> <catch>catch (<param><decl><type><name>SAXNotSupportedException</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>PROPERTY</name> + <name>NOT_SUPPORTED</name> + <name>property</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>false</expr>;</return>
        }</block></catch></try>
        <return>return <expr>true</expr>;</return>
    }</block></function>
}</block></class>
</unit>
