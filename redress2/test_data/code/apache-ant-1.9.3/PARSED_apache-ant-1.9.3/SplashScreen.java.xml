<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\splash\SplashScreen.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>splash</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>BorderLayout</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Color</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Dimension</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Font</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Toolkit</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>event</name>.<name>ActionEvent</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>event</name>.<name>ActionListener</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>regex</name>.<name>Matcher</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>regex</name>.<name>Pattern</name></name>;</import>

<import>import <name><name>javax</name>.<name>swing</name>.<name>BorderFactory</name></name>;</import>
<import>import <name><name>javax</name>.<name>swing</name>.<name>ImageIcon</name></name>;</import>
<import>import <name><name>javax</name>.<name>swing</name>.<name>JLabel</name></name>;</import>
<import>import <name><name>javax</name>.<name>swing</name>.<name>JPanel</name></name>;</import>
<import>import <name><name>javax</name>.<name>swing</name>.<name>JProgressBar</name></name>;</import>
<import>import <name><name>javax</name>.<name>swing</name>.<name>JWindow</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildListener</name></name>;</import>

<class>class <name>SplashScreen</name> <super><extends>extends <name>JWindow</name></extends> <implements>implements <name>ActionListener</name>, <name>BuildListener</name></implements></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>FONT_SIZE</name> =<init> <expr>12</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>JLabel</name></type> <name>text</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>JProgressBar</name></type> <name>pb</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>total</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MIN</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MAX</name> =<init> <expr>200</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Pattern</name></type> <name>progressRegExpPattern</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>SplashScreen</name><parameter_list>(<param><decl><type><name>String</name></type> <name>msg</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>SplashScreen</name><parameter_list>(<param><decl><type><name>ImageIcon</name></type> <name>img</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>img</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>SplashScreen</name><parameter_list>(<param><decl><type><name>String</name></type> <name>msg</name></decl></param>, <param><decl><type><name>String</name></type> <name>progressRegExp</name></decl></param>, <param><decl><type><name>String</name></type> <name>displayText</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>init</name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr><name>progressRegExp</name></expr></argument>, <argument><expr><name>displayText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setText</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>SplashScreen</name><parameter_list>(<param><decl><type><name>ImageIcon</name></type> <name>img</name></decl></param>, <param><decl><type><name>String</name></type> <name>progressRegExp</name></decl></param>,
                        <param><decl><type><name>String</name></type> <name>displayText</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>init</name><argument_list>(<argument><expr><name>img</name></expr></argument>, <argument><expr><name>progressRegExp</name></expr></argument>, <argument><expr><name>displayText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>init</name><parameter_list>(<param><decl><type><name>ImageIcon</name></type> <name>img</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>init</name><argument_list>(<argument><expr><name>img</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>init</name><parameter_list>(<param><decl><type><name>ImageIcon</name></type> <name>img</name></decl></param>, <param><decl><type><name>String</name></type> <name>progressRegExp</name></decl></param>,
                        <param><decl><type><name>String</name></type> <name>displayText</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>progressRegExp</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>progressRegExpPattern</name> = <call><name><name>Pattern</name>.<name>compile</name></name><argument_list>(<argument><expr><name>progressRegExp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name>JPanel</name></type> <name>pan</name> =<init> <expr>(<name>JPanel</name>) <call><name>getContentPane</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>JLabel</name></type> <name>piccy</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>img</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>piccy</name> = new <call><name>JLabel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>piccy</name> = new <call><name>JLabel</name><argument_list>(<argument><expr><name>img</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <expr_stmt><expr><call><name><name>piccy</name>.<name>setBorder</name></name><argument_list>(<argument><expr><call><name><name>BorderFactory</name>.<name>createLineBorder</name></name><argument_list>(<argument><expr><name><name>Color</name>.<name>black</name></name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>displayText</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>displayText</name> = "Building...."</expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>text</name> = new <call><name>JLabel</name><argument_list>(<argument><expr><name>displayText</name></expr></argument>, <argument><expr><name><name>JLabel</name>.<name>CENTER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>text</name>.<name>setFont</name></name><argument_list>(<argument><expr>new <call><name>Font</name><argument_list>(<argument><expr>"Sans-Serif"</expr></argument>, <argument><expr><name><name>Font</name>.<name>BOLD</name></name></expr></argument>, <argument><expr><name>FONT_SIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>text</name>.<name>setBorder</name></name><argument_list>(<argument><expr><call><name><name>BorderFactory</name>.<name>createEtchedBorder</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>pb</name> = new <call><name>JProgressBar</name><argument_list>(<argument><expr><name>MIN</name></expr></argument>, <argument><expr><name>MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>pb</name>.<name>setBorder</name></name><argument_list>(<argument><expr><call><name><name>BorderFactory</name>.<name>createBevelBorder</name></name><argument_list>(<argument><expr><name><name>javax</name>.<name>swing</name>.<name>border</name>.<name>BevelBorder</name>.<name>LOWERED</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>JPanel</name></type> <name>pan2</name> =<init> <expr>new <call><name>JPanel</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>pan2</name>.<name>setLayout</name></name><argument_list>(<argument><expr>new <call><name>BorderLayout</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>pan2</name>.<name>add</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name><name>BorderLayout</name>.<name>NORTH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>pan2</name>.<name>add</name></name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>BorderLayout</name>.<name>SOUTH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>pan</name>.<name>setLayout</name></name><argument_list>(<argument><expr>new <call><name>BorderLayout</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>pan</name>.<name>add</name></name><argument_list>(<argument><expr><name>piccy</name></expr></argument>, <argument><expr><name><name>BorderLayout</name>.<name>CENTER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>pan</name>.<name>add</name></name><argument_list>(<argument><expr><name>pan2</name></expr></argument>, <argument><expr><name><name>BorderLayout</name>.<name>SOUTH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>pan</name>.<name>setBorder</name></name><argument_list>(<argument><expr><call><name><name>BorderFactory</name>.<name>createBevelBorder</name></name><argument_list>(<argument><expr><name><name>javax</name>.<name>swing</name>.<name>border</name>.<name>BevelBorder</name>.<name>RAISED</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>pack</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Dimension</name></type> <name>size</name> =<init> <expr><call><name>getSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Dimension</name></type> <name>scr</name> =<init> <expr><call><name><name>Toolkit</name>.<name>getDefaultToolkit</name></name><argument_list>()</argument_list></call>.<call><name>getScreenSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>x</name> =<init> <expr>(<name><name>scr</name>.<name>width</name></name> - <name><name>size</name>.<name>width</name></name>) / 2</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>y</name> =<init> <expr>(<name><name>scr</name>.<name>height</name></name> - <name><name>size</name>.<name>height</name></name>) / 2</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>setBounds</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name><name>size</name>.<name>width</name></name></expr></argument>, <argument><expr><name><name>size</name>.<name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setText</name><parameter_list>(<param><decl><type><name>String</name></type> <name>txt</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>text</name>.<name>setText</name></name><argument_list>(<argument><expr><name>txt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<param><decl><type><name>ActionEvent</name></type> <name>a</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr>!<call><name>hasProgressPattern</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>total</name> &lt; <name>MAX</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>total</name>++</expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>total</name> = <name>MIN</name></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><call><name><name>pb</name>.<name>setValue</name></name><argument_list>(<argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>buildStarted</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>actionPerformed</name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>buildFinished</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>pb</name>.<name>setValue</name></name><argument_list>(<argument><expr><name>MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setVisible</name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dispose</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>targetStarted</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>actionPerformed</name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>targetFinished</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>actionPerformed</name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>taskStarted</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>actionPerformed</name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>taskFinished</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>actionPerformed</name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>messageLogged</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>actionPerformed</name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>hasProgressPattern</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>message</name> =<init> <expr><call><name><name>event</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Matcher</name></type> <name>matcher</name> =<init> <expr><call><name><name>progressRegExpPattern</name>.<name>matcher</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>matcher</name> != <name>null</name> &amp;&amp; <call><name><name>matcher</name>.<name>matches</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>gr</name> =<init> <expr><call><name><name>matcher</name>.<name>group</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <try>try <block>{
                    <decl_stmt><decl><type><name>int</name></type> <name>i</name> =<init> <expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><name>gr</name></expr></argument>)</argument_list></call>.<call><name>intValue</name><argument_list>()</argument_list></call> * 2</expr></argument>, <argument><expr><name>MAX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>pb</name>.<name>setValue</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></param>) <block>{
                    <comment type="line">//TODO: how to reach logger?!?</comment>
                    <comment type="line">//log("Number parsing error in progressRegExp", Project.MSG_VERBOSE);</comment>

                }</block></catch></try>
            }</block></then></if>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>hasProgressPattern</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>progressRegExpPattern</name> != <name>null</name></expr>;</return>
    }</block></function>

}</block></class>

</unit>
