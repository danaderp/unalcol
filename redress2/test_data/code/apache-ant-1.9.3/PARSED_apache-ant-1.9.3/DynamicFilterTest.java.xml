<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\filters\DynamicFilterTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>filters</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>Reader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileReader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildFileTest</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>

<comment type="javadoc">/**
 */</comment>
<class><specifier>public</specifier> class <name>DynamicFilterTest</name> <super><extends>extends <name>BuildFileTest</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>FileUtils</name></type> <name>FILE_UTILS</name> =<init> <expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <constructor><specifier>public</specifier> <name>DynamicFilterTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr>"src/etc/testcases/filters/dynamicfilter.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"init"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"cleanup"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testCustomFilter</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>expectFileContains</name><argument_list>(<argument><expr>"dynamicfilter"</expr></argument>, <argument><expr>"result/dynamicfilter"</expr></argument>,
                           <argument><expr>"hellO wOrld"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// ------------------------------------------------------</comment>
    <comment type="line">//   Helper methods</comment>
    <comment type="line">// -----------------------------------------------------</comment>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>getFileString</name><parameter_list>(<param><decl><type><name>String</name></type> <name>filename</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>Reader</name></type> <name>r</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>r</name> = new <call><name>FileReader</name><argument_list>(<argument><expr><call><name><name>FILE_UTILS</name>.<name>resolveFile</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return  <expr><call><name><name>FileUtils</name>.<name>readFully</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block>
        <finally>finally <block>{
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>

    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>expectFileContains</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>, <param><decl><type><name>String</name></type> <name>contains</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>content</name> =<init> <expr><call><name>getFileString</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(
            <argument><expr>"expecting file " + <name>name</name> + " to contain " + <name>contains</name> +
            " but got " + <name>content</name></expr></argument>, <argument><expr><call><name><name>content</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>contains</name></expr></argument>)</argument_list></call> &gt; -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>expectFileContains</name><parameter_list>(
        <param><decl><type><name>String</name></type> <name>target</name></decl></param>, <param><decl><type><name>String</name></type> <name>name</name></decl></param>, <param><decl><type><name>String</name></type> <name>contains</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>expectFileContains</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>contains</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>CustomFilter</name> <super><implements>implements <name>ChainableReader</name></implements></super> <block>{
        <decl_stmt><decl><type><name>char</name></type> <name>replace</name> =<init> <expr>'x'</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name>with</name>    =<init> <expr>'y'</expr></init></decl>;</decl_stmt>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>setReplace</name><parameter_list>(<param><decl><type><name>char</name></type> <name>replace</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>replace</name></name> = <name>replace</name></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>setWith</name><parameter_list>(<param><decl><type><name>char</name></type> <name>with</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>with</name></name> = <name>with</name></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>Reader</name></type> <name>chain</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Reader</name></type> <name>rdr</name></decl></param>)</parameter_list> <block>{
            <return>return <expr>new <class><super><name>BaseFilterReader</name></super><argument_list>(<argument><expr><name>rdr</name></expr></argument>)</argument_list> <block>{
                <function><type><specifier>public</specifier> <name>int</name></type> <name>read</name><parameter_list>()</parameter_list>
                    <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
                <block>{
                    <decl_stmt><decl><type><name>int</name></type> <name>c</name> =<init> <expr><call><name><name>in</name>.<name>read</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>c</name> == <name>replace</name></expr>)</condition><then>
                        <return>return <expr><name>with</name></expr>;</return></then>
                    <else>else
                        <return>return <expr><name>c</name></expr>;</return></else></if>
                }</block></function>
            }</block></class></expr>;</return>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
