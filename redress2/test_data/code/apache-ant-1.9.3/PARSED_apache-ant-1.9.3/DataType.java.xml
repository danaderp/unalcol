<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\types\DataType.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>Stack</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>ComponentHelper</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>ProjectComponent</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>IdentityStack</name></name>;</import>

<comment type="javadoc">/**
 * Base class for those classes that can appear inside the build file
 * as stand alone data types.
 *
 * &lt;p&gt;This class handles the common description attribute and provides
 * a default implementation for reference handling and checking for
 * circular references that is appropriate for types that can not be
 * nested inside elements of the same type (i.e. &amp;lt;patternset&amp;gt;
 * but not &amp;lt;path&amp;gt;).&lt;/p&gt;
 *
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>DataType</name> <super><extends>extends <name>ProjectComponent</name></extends> <implements>implements <name>Cloneable</name></implements></super> <block>{
    <comment type="line">// CheckStyle:VisibilityModifier OFF</comment>

    <comment type="javadoc">/**
     * Value to the refid attribute.
     *
     * @deprecated since 1.7.
     *             The user should not be directly referencing
     *             variable. Please use {@link #getRefid} instead.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Reference</name></type> <name>ref</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Are we sure we don't hold circular references?
     *
     * &lt;p&gt;Subclasses are responsible for setting this value to false
     * if we'd need to investigate this condition (usually because a
     * child element has been added that is a subclass of
     * DataType).&lt;/p&gt;
     *
     * @deprecated since 1.7.
     *             The user should not be directly referencing
     *             variable. Please use {@link #setChecked} or
     *             {@link #isChecked} instead.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>checked</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
    <comment type="line">// CheckStyle:VisibilityModifier ON</comment>

    <comment type="javadoc">/**
     * Has the refid attribute of this element been set?
     * @return true if the refid attribute has been set
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isReference</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>ref</name> != <name>null</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the value of the refid attribute.
     *
     * &lt;p&gt;Subclasses may need to check whether any other attributes
     * have been set as well or child elements have been created and
     * thus override this method. if they do the must call
     * &lt;code&gt;super.setRefid&lt;/code&gt;.&lt;/p&gt;
     * @param ref the reference to use
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRefid</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Reference</name></type> <name>ref</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>ref</name></name> = <name>ref</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>checked</name> = false</expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Gets as descriptive as possible a name used for this datatype instance.
     * @return &lt;code&gt;String&lt;/code&gt; name.
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>getDataTypeName</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>ComponentHelper</name>.<name>getElementName</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Convenience method.
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>dieOnCircularReference</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>dieOnCircularReference</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Convenience method.
     * @param p the Ant Project instance against which to resolve references.
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>dieOnCircularReference</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>p</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>checked</name> || !<call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>dieOnCircularReference</name><argument_list>(<argument><expr>new <call><name><name>IdentityStack</name><argument_list>&lt;<argument><name>Object</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Check to see whether any DataType we hold references to is
     * included in the Stack (which holds all DataType instances that
     * directly or indirectly reference this instance, including this
     * instance itself).
     *
     * &lt;p&gt;If one is included, throw a BuildException created by {@link
     * #circularReference circularReference}.&lt;/p&gt;
     *
     * &lt;p&gt;This implementation is appropriate only for a DataType that
     * cannot hold other DataTypes as children.&lt;/p&gt;
     *
     * &lt;p&gt;The general contract of this method is that it shouldn't do
     * anything if {@link #checked &lt;code&gt;checked&lt;/code&gt;} is true and
     * set it to true on exit.&lt;/p&gt;
     * @param stack the stack of references to check.
     * @param project the project to use to dereference the references.
     * @throws BuildException on error.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>dieOnCircularReference</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>Stack</name><argument_list>&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>stack</name></decl></param>,
                                          <param><decl><type><specifier>final</specifier> <name>Project</name></type> <name>project</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{

        <if>if <condition>(<expr><name>checked</name> || !<call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>Object</name></type> <name>o</name> =<init> <expr><call><name><name>ref</name>.<name>getReferencedObject</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>o</name> <name>instanceof</name> <name>DataType</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name><name>IdentityStack</name><argument_list>&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>id</name> =<init> <expr><call><name><name>IdentityStack</name>.<name>getInstance</name></name><argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><call><name><name>id</name>.<name>contains</name></name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <throw>throw <expr><call><name>circularReference</name><argument_list>()</argument_list></call></expr>;</throw>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>id</name>.<name>push</name></name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr>((<name>DataType</name>) <name>o</name>).<call><name>dieOnCircularReference</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>id</name>.<name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if>
        <expr_stmt><expr><name>checked</name> = true</expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Allow DataTypes outside org.apache.tools.ant.types to indirectly call
     * dieOnCircularReference on nested DataTypes.
     * @param dt the DataType to check.
     * @param stk the stack of references to check.
     * @param p the project to use to dereference the references.
     * @throws BuildException on error.
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>invokeCircularReferenceCheck</name><parameter_list>(<param><decl><type><name>DataType</name></type> <name>dt</name></decl></param>, <param><decl><type><name><name>Stack</name><argument_list>&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>stk</name></decl></param>,
                                                    <param><decl><type><name>Project</name></type> <name>p</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>dt</name>.<name>dieOnCircularReference</name></name><argument_list>(<argument><expr><name>stk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Allow DataTypes outside org.apache.tools.ant.types to indirectly call
     * dieOnCircularReference on nested DataTypes.
     *
     * &lt;p&gt;Pushes dt on the stack, runs dieOnCircularReference and pops
     * it again.&lt;/p&gt;
     * @param dt the DataType to check.
     * @param stk the stack of references to check.
     * @param p the project to use to dereference the references.
     * @throws BuildException on error.
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>pushAndInvokeCircularReferenceCheck</name><parameter_list>(<param><decl><type><name>DataType</name></type> <name>dt</name></decl></param>,
                                                           <param><decl><type><name><name>Stack</name><argument_list>&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>stk</name></decl></param>,
                                                           <param><decl><type><name>Project</name></type> <name>p</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>stk</name>.<name>push</name></name><argument_list>(<argument><expr><name>dt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dt</name>.<name>dieOnCircularReference</name></name><argument_list>(<argument><expr><name>stk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>stk</name>.<name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Performs the check for circular references and returns the
     * referenced object.
     * @return the dereferenced object.
     * @throws BuildException if the reference is invalid (circular ref, wrong class, etc).
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>protected</specifier> <name>Object</name></type> <name>getCheckedRef</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getCheckedRef</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Performs the check for circular references and returns the
     * referenced object.
     * @param p the Ant Project instance against which to resolve references.
     * @return the dereferenced object.
     * @throws BuildException if the reference is invalid (circular ref, wrong class, etc).
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>protected</specifier> <name>Object</name></type> <name>getCheckedRef</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>p</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>getCheckedRef</name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getDataTypeName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Performs the check for circular references and returns the
     * referenced object.
     * @param requiredClass the class that this reference should be a subclass of.
     * @param dataTypeName  the name of the datatype that the reference should be
     *                      (error message use only).
     * @return the dereferenced object.
     * @throws BuildException if the reference is invalid (circular ref, wrong class, etc).
     */</comment>
    <function><type><specifier>protected</specifier> <argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list> <name>T</name></type> <name>getCheckedRef</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>Class</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>requiredClass</name></decl></param>,
                                   <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>dataTypeName</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>getCheckedRef</name><argument_list>(<argument><expr><name>requiredClass</name></expr></argument>, <argument><expr><name>dataTypeName</name></expr></argument>, <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Performs the check for circular references and returns the
     * referenced object.  This version allows the fallback Project instance to be specified.
     * @param requiredClass the class that this reference should be a subclass of.
     * @param dataTypeName  the name of the datatype that the reference should be
     *                      (error message use only).
     * @param project       the fallback Project instance for dereferencing.
     * @return the dereferenced object.
     * @throws BuildException if the reference is invalid (circular ref, wrong class, etc),
     *                        or if &lt;code&gt;project&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>protected</specifier> <argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list> <name>T</name></type> <name>getCheckedRef</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>Class</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>requiredClass</name></decl></param>,
                                   <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>dataTypeName</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>Project</name></type> <name>project</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>project</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"No Project specified"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name>dieOnCircularReference</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Object</name></type> <name>o</name> =<init> <expr><call><name><name>ref</name>.<name>getReferencedObject</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!(<call><name><name>requiredClass</name>.<name>isAssignableFrom</name></name><argument_list>(<argument><expr><call><name><name>o</name>.<name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Class " + <call><name><name>o</name>.<name>getClass</name></name><argument_list>()</argument_list></call> + " is not a subclass of " + <name>requiredClass</name></expr></argument>,
                    <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>msg</name> =<init> <expr><call><name><name>ref</name>.<name>getRefId</name></name><argument_list>()</argument_list></call> + " doesn\'t denote a " + <name>dataTypeName</name></expr></init></decl>;</decl_stmt>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><annotation>@<name>SuppressWarnings</name><argument_list>("unchecked")</argument_list></annotation>
        <specifier>final</specifier> <name>T</name></type> <name>result</name> =<init> <expr>(<name>T</name>) <name>o</name></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Creates an exception that indicates that refid has to be the
     * only attribute if it is set.
     * @return the exception to throw
     */</comment>
    <function><type><specifier>protected</specifier> <name>BuildException</name></type> <name>tooManyAttributes</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"You must not specify more than one "
            + "attribute when using refid"</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Creates an exception that indicates that this XML element must
     * not have child elements if the refid attribute is set.
     * @return the exception to throw
     */</comment>
    <function><type><specifier>protected</specifier> <name>BuildException</name></type> <name>noChildrenAllowed</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"You must not specify nested elements "
            + "when using refid"</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Creates an exception that indicates the user has generated a
     * loop of data types referencing each other.
     * @return the exception to throw
     */</comment>
    <function><type><specifier>protected</specifier> <name>BuildException</name></type> <name>circularReference</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"This data type contains a circular "
            + "reference."</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * The flag that is used to indicate that circular references have been checked.
     * @return true if circular references have been checked
     */</comment>
    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>isChecked</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>checked</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the flag that is used to indicate that circular references have been checked.
     * @param checked if true, if circular references have been checked
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setChecked</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>checked</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>checked</name></name> = <name>checked</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * get the reference set on this object
     * @return the reference or null
     */</comment>
    <function><type><specifier>public</specifier> <name>Reference</name></type> <name>getRefid</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>ref</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * check that it is ok to set attributes, i.e that no reference is defined
     * @since Ant 1.6
     * @throws BuildException if not allowed
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>checkAttributesAllowed</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr><call><name>tooManyAttributes</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * check that it is ok to add children, i.e that no reference is defined
     * @since Ant 1.6
     * @throws BuildException if not allowed
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>checkChildrenAllowed</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr><call><name>noChildrenAllowed</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Basic DataType toString().
     * @return this DataType formatted as a String.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>d</name> =<init> <expr><call><name>getDescription</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>d</name> == <name>null</name> ? <call><name>getDataTypeName</name><argument_list>()</argument_list></call> : <call><name>getDataTypeName</name><argument_list>()</argument_list></call> + " " + <name>d</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * @since Ant 1.7
     * @return a shallow copy of this DataType.
     * @throws CloneNotSupportedException if there is a problem.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>DataType</name></type> <name>dt</name> =<init> <expr>(<name>DataType</name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>dt</name>.<name>setDescription</name></name><argument_list>(<argument><expr><call><name>getDescription</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>getRefid</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>dt</name>.<name>setRefid</name></name><argument_list>(<argument><expr><call><name>getRefid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>dt</name>.<name>setChecked</name></name><argument_list>(<argument><expr><call><name>isChecked</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>dt</name></expr>;</return>
    }</block></function>
}</block></class>

</unit>
