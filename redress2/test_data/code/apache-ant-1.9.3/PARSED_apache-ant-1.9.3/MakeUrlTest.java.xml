<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\taskdefs\MakeUrlTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildFileTest</name></name>;</import>

<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>URL</name></name>;</import>


<class><specifier>public</specifier> class <name>MakeUrlTest</name> <super><extends>extends <name>BuildFileTest</name></extends></super> <block>{

    <constructor><specifier>public</specifier> <name>MakeUrlTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr>"src/etc/testcases/taskdefs/makeurl.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testEmpty</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildExceptionContaining</name><argument_list>(<argument><expr>"testEmpty"</expr></argument>, <argument><expr>"missing property"</expr></argument>, <argument><expr>"property"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNoProperty</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildExceptionContaining</name><argument_list>(<argument><expr>"testNoProperty"</expr></argument>, <argument><expr>"missing property"</expr></argument>, <argument><expr>"property"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNoFile</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildExceptionContaining</name><argument_list>(<argument><expr>"testNoFile"</expr></argument>, <argument><expr>"missing file"</expr></argument>, <argument><expr>"file"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testValidation</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildExceptionContaining</name><argument_list>(<argument><expr>"testValidation"</expr></argument>, <argument><expr><name><name>MakeUrl</name>.<name>ERROR_MISSING_FILE</name></name></expr></argument>, <argument><expr>"file"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testWorks</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testWorks"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertPropertyContains</name><argument_list>(<argument><expr>"testWorks"</expr></argument>, <argument><expr>"file:"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertPropertyContains</name><argument_list>(<argument><expr>"testWorks"</expr></argument>, <argument><expr>"/foo"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testIllegalChars</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testIllegalChars"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertPropertyContains</name><argument_list>(<argument><expr>"testIllegalChars"</expr></argument>, <argument><expr>"file:"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertPropertyContains</name><argument_list>(<argument><expr>"testIllegalChars"</expr></argument>, <argument><expr>"fo%20o%25"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * test that we can round trip by opening a url that exists
     *
     * @throws IOException
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testRoundTrip</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testRoundTrip"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertPropertyContains</name><argument_list>(<argument><expr>"testRoundTrip"</expr></argument>, <argument><expr>"file:"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>property</name> =<init> <expr><call><name>getProperty</name><argument_list>(<argument><expr>"testRoundTrip"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>URL</name></type> <name>url</name> =<init> <expr>new <call><name>URL</name><argument_list>(<argument><expr><name>property</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>InputStream</name></type> <name>instream</name> =<init> <expr><call><name><name>url</name>.<name>openStream</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>instream</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testIllegalCombinations</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testIllegalCombinations"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertPropertyContains</name><argument_list>(<argument><expr>"testIllegalCombinations"</expr></argument>, <argument><expr>"/foo"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertPropertyContains</name><argument_list>(<argument><expr>"testIllegalCombinations"</expr></argument>, <argument><expr>".xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFileset</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testFileset"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertPropertyContains</name><argument_list>(<argument><expr>"testFileset"</expr></argument>, <argument><expr>".xml "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertPropertyEndsWith</name><argument_list>(<argument><expr>"testFileset"</expr></argument>, <argument><expr>".xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFilesetSeparator</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testFilesetSeparator"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertPropertyContains</name><argument_list>(<argument><expr>"testFilesetSeparator"</expr></argument>, <argument><expr>".xml\",\""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertPropertyEndsWith</name><argument_list>(<argument><expr>"testFilesetSeparator"</expr></argument>, <argument><expr>".xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testPath</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testPath"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertPropertyContains</name><argument_list>(<argument><expr>"testPath"</expr></argument>, <argument><expr>"makeurl.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * assert that a property ends with
     *
     * @param property
     * @param ending
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>assertPropertyEndsWith</name><parameter_list>(<param><decl><type><name>String</name></type> <name>property</name></decl></param>, <param><decl><type><name>String</name></type> <name>ending</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>result</name> =<init> <expr><call><name>getProperty</name><argument_list>(<argument><expr><name>property</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>substring</name> =<init> <expr><call><name><name>result</name>.<name>substring</name></name><argument_list>(<argument><expr><call><name><name>result</name>.<name>length</name></name><argument_list>()</argument_list></call> - <call><name><name>ending</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>ending</name></expr></argument>, <argument><expr><name>substring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * assert that a property contains a string
     *
     * @param property name of property to look for
     * @param contains what to search for in the string
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>assertPropertyContains</name><parameter_list>(<param><decl><type><name>String</name></type> <name>property</name></decl></param>, <param><decl><type><name>String</name></type> <name>contains</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>result</name> =<init> <expr><call><name>getProperty</name><argument_list>(<argument><expr><name>property</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"expected " + <name>contains</name> + " in " + <name>result</name></expr></argument>,
                <argument><expr><name>result</name> != <name>null</name> &amp;&amp; <call><name><name>result</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>contains</name></expr></argument>)</argument_list></call> &gt;= 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * get a property from the project
     *
     * @param property
     * @return
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>getProperty</name><parameter_list>(<param><decl><type><name>String</name></type> <name>property</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>project</name>.<name>getProperty</name></name><argument_list>(<argument><expr><name>property</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
