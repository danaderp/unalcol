<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\util\PackageNameMapper.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>

<comment type="javadoc">/**
 * Maps directory name matches into a dotted package name. This is
 * useful for matching JUnit test cases against their XML formatter
 * results.
 * &lt;pre&gt;
 * &amp;lt;mapper classname="org.apache.tools.ant.util.PackageNameMapper"
 *         from="*Test.java" to="${test.data.dir}/TEST-*Test.xml"/&amp;gt;
 * &lt;/pre&gt;
 *
 */</comment>
<class><specifier>public</specifier> class <name>PackageNameMapper</name> <super><extends>extends <name>GlobPatternMapper</name></extends></super> <block>{
    <comment type="javadoc">/**
     *  Returns the part of the given string that matches the * in the
     *  &amp;quot;from&amp;quot; pattern replacing file separators with dots
     *
     *@param  name  Source filename
     *@return       Replaced variable part
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>extractVariablePart</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>var</name> =<init> <expr><call><name><name>name</name>.<name>substring</name></name><argument_list>(<argument><expr><name>prefixLength</name></expr></argument>,
                <argument><expr><call><name><name>name</name>.<name>length</name></name><argument_list>()</argument_list></call> - <name>postfixLength</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>getHandleDirSep</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>var</name> = <call><name><name>var</name>.<name>replace</name></name><argument_list>(<argument><expr>'/'</expr></argument>, <argument><expr>'.'</expr></argument>)</argument_list></call>.<call><name>replace</name><argument_list>(<argument><expr>'\\'</expr></argument>, <argument><expr>'.'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><call><name><name>var</name>.<name>replace</name></name><argument_list>(<argument><expr><name><name>File</name>.<name>separatorChar</name></name></expr></argument>, <argument><expr>'.'</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>

</unit>
