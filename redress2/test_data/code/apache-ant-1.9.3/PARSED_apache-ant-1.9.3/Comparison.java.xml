<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\types\Comparison.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>Arrays</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>

<comment type="javadoc">/**
 * EnumeratedAttribute for generic comparisons.  Accepts values
 * "equal", "greater", "more", "less", "ne" (not equal),
 * "ge" (greater or equal), "le" (less or equal), "eq" (equal),
 * "gt" (greater), "lt" (less).
 * @since Ant 1.7
 */</comment>
<class><specifier>public</specifier> class <name>Comparison</name> <super><extends>extends <name>EnumeratedAttribute</name></extends></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name><index>[]</index></type> <name>VALUES</name>
        =<init> <expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"equal"</expr>, <expr>"greater"</expr>, <expr>"less"</expr>,
                        <expr>"ne"</expr>, <expr>"ge"</expr>, <expr>"le"</expr>, <expr>"eq"</expr>, <expr>"gt"</expr>, <expr>"lt"</expr>, <expr>"more"</expr>}</block></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Equal Comparison. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Comparison</name></type> <name>EQUAL</name> =<init> <expr>new <call><name>Comparison</name><argument_list>(<argument><expr>"equal"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Not-Equal Comparison. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Comparison</name></type> <name>NOT_EQUAL</name> =<init> <expr>new <call><name>Comparison</name><argument_list>(<argument><expr>"ne"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Greater Comparison. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Comparison</name></type> <name>GREATER</name> =<init> <expr>new <call><name>Comparison</name><argument_list>(<argument><expr>"greater"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Less Comparison. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Comparison</name></type> <name>LESS</name> =<init> <expr>new <call><name>Comparison</name><argument_list>(<argument><expr>"less"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Greater-or-Equal Comparison. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Comparison</name></type> <name>GREATER_EQUAL</name> =<init> <expr>new <call><name>Comparison</name><argument_list>(<argument><expr>"ge"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Less-or-Equal Comparison. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Comparison</name></type> <name>LESS_EQUAL</name> =<init> <expr>new <call><name>Comparison</name><argument_list>(<argument><expr>"le"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name><index>[]</index></type> <name>EQUAL_INDEX</name> =<init> <expr><block>{<expr>0</expr>, <expr>4</expr>, <expr>5</expr>, <expr>6</expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name><index>[]</index></type> <name>LESS_INDEX</name> =<init> <expr><block>{<expr>2</expr>, <expr>3</expr>, <expr>5</expr>, <expr>8</expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name><index>[]</index></type> <name>GREATER_INDEX</name> =<init> <expr><block>{<expr>1</expr>, <expr>3</expr>, <expr>4</expr>, <expr>7</expr>, <expr>9</expr>}</block></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Default constructor.
     */</comment>
    <constructor><specifier>public</specifier> <name>Comparison</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <comment type="javadoc">/**
     * Construct a new Comparison with the specified value.
     * @param value the EnumeratedAttribute value.
     */</comment>
    <constructor><specifier>public</specifier> <name>Comparison</name><parameter_list>(<param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setValue</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Return the possible values.
     * @return String[] of EnumeratedAttribute values.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getValues</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>VALUES</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Evaluate a comparison result as from Comparator.compare() or Comparable.compareTo().
     * @param comparisonResult the result to evaluate.
     * @return true if the comparison result fell within the parameters of this Comparison.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>evaluate</name><parameter_list>(<param><decl><type><name>int</name></type> <name>comparisonResult</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>getIndex</name><argument_list>()</argument_list></call> == -1</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Comparison value not set."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>int</name><index>[]</index></type> <name>i</name> =<init> <expr><name>comparisonResult</name> &lt; 0 ? <name>LESS_INDEX</name>
            : <name>comparisonResult</name> &gt; 0 ? <name>GREATER_INDEX</name> : <name>EQUAL_INDEX</name></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>Arrays</name>.<name>binarySearch</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>getIndex</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> &gt;= 0</expr>;</return>
    }</block></function>

}</block></class>

</unit>
