<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\taskdefs\optional\junit\JUnitTestListenerTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>junit</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildFileTest</name></name>;</import>

<class><specifier>public</specifier> class <name>JUnitTestListenerTest</name> <super><extends>extends <name>BuildFileTest</name></extends></super> <block>{

    <comment type="line">// The captureToSummary test writes to stdout and stderr, good for</comment>
    <comment type="line">// verifying that the TestListener support doesn't break anything.</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PASS_TEST_TARGET</name> =<init> <expr>"captureToSummary"</expr></init></decl>;</decl_stmt>

    <comment type="line">// testNoCrash is the test invoked by the captureToSummary's junit task</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PASS_TEST</name> =<init> <expr>"testNoCrash"</expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>JUnitTestListenerTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr>"src/etc/testcases/taskdefs/optional/junit.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The teardown method for JUnit.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"cleanup"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFullLogOutput</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>setProperty</name><argument_list>(<argument><expr>"enableEvents"</expr></argument>, <argument><expr>"true"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr><name>PASS_TEST_TARGET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"expecting full log to have BuildListener events"</expr></argument>, 
                   <argument><expr><call><name>hasBuildListenerEvents</name><argument_list>(<argument><expr><call><name>getFullLog</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNoLogOutput</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>setProperty</name><argument_list>(<argument><expr>"enableEvents"</expr></argument>, <argument><expr>"true"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr><name>PASS_TEST_TARGET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr>"expecting log to not have BuildListener events"</expr></argument>, 
                    <argument><expr><call><name>hasBuildListenerEvents</name><argument_list>(<argument><expr><call><name>getLog</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testTestCountFired</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>setProperty</name><argument_list>(<argument><expr>"enableEvents"</expr></argument>, <argument><expr>"true"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr><name>PASS_TEST_TARGET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"expecting test count message"</expr></argument>,
		   <argument><expr><call><name>hasEventMessage</name><argument_list>(<argument><expr><name><name>JUnitTask</name>.<name>TESTLISTENER_PREFIX</name></name> + 
				   "tests to run: "</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testStartTestFired</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>setProperty</name><argument_list>(<argument><expr>"enableEvents"</expr></argument>, <argument><expr>"true"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr><name>PASS_TEST_TARGET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"expecting test started message"</expr></argument>,
		   <argument><expr><call><name>hasEventMessage</name><argument_list>(<argument><expr><name><name>JUnitTask</name>.<name>TESTLISTENER_PREFIX</name></name> + 
				   "startTest(" + <name>PASS_TEST</name> + ")"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testEndTestFired</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>setProperty</name><argument_list>(<argument><expr>"enableEvents"</expr></argument>, <argument><expr>"true"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr><name>PASS_TEST_TARGET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"expecting test ended message"</expr></argument>,
		   <argument><expr><call><name>hasEventMessage</name><argument_list>(<argument><expr><name><name>JUnitTask</name>.<name>TESTLISTENER_PREFIX</name></name> + 
				   "endTest(" + <name>PASS_TEST</name> + ")"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNoFullLogOutputByDefault</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr><name>PASS_TEST_TARGET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr>"expecting full log to not have BuildListener events"</expr></argument>, 
                    <argument><expr><call><name>hasBuildListenerEvents</name><argument_list>(<argument><expr><call><name>getFullLog</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFullLogOutputMagicProperty</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>setProperty</name><argument_list>(<argument><expr><name><name>JUnitTask</name>.<name>ENABLE_TESTLISTENER_EVENTS</name></name></expr></argument>, <argument><expr>"true"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr><name>PASS_TEST_TARGET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"expecting full log to have BuildListener events"</expr></argument>, 
                   <argument><expr><call><name>hasBuildListenerEvents</name><argument_list>(<argument><expr><call><name>getFullLog</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNoFullLogOutputMagicPropertyWins</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>setProperty</name><argument_list>(<argument><expr><name><name>JUnitTask</name>.<name>ENABLE_TESTLISTENER_EVENTS</name></name></expr></argument>, <argument><expr>"false"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>setProperty</name><argument_list>(<argument><expr>"enableEvents"</expr></argument>, <argument><expr>"true"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr><name>PASS_TEST_TARGET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr>"expecting full log to not have BuildListener events"</expr></argument>, 
                    <argument><expr><call><name>hasBuildListenerEvents</name><argument_list>(<argument><expr><call><name>getFullLog</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>hasBuildListenerEvents</name><parameter_list>(<param><decl><type><name>String</name></type> <name>log</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>log</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name><name>JUnitTask</name>.<name>TESTLISTENER_PREFIX</name></name></expr></argument>)</argument_list></call> &gt;= 0</expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>hasEventMessage</name><parameter_list>(<param><decl><type><name>String</name></type> <name>eventPrefix</name></decl></param>)</parameter_list> <block>{
	<return>return <expr><call><name>getFullLog</name><argument_list>()</argument_list></call>.<call><name>indexOf</name><argument_list>(<argument><expr><name>eventPrefix</name></expr></argument>)</argument_list></call> &gt;= 0</expr>;</return>
    }</block></function>
}</block></class>
</unit>
