<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\compilers\Javac13.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>compilers</name></name>;</package>

<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name>.<name>Method</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Commandline</name></name>;</import>


<comment type="javadoc">/**
 * The implementation of the javac compiler for JDK 1.3
 * This is primarily a cut-and-paste from the original javac task before it
 * was refactored.
 *
 * @since Ant 1.3
 */</comment>
<class><specifier>public</specifier> class <name>Javac13</name> <super><extends>extends <name>DefaultCompilerAdapter</name></extends></super> <block>{

    <comment type="javadoc">/**
     * Integer returned by the "Modern" jdk1.3 compiler to indicate success.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MODERN_COMPILER_SUCCESS</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Run the compilation.
     * @return true if the compiler ran with a zero exit result (ok)
     * @exception BuildException if the compilation has problems.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>attributes</name>.<name>log</name></name><argument_list>(<argument><expr>"Using modern compiler"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Commandline</name></type> <name>cmd</name> =<init> <expr><call><name>setupModernJavacCommand</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Use reflection to be able to build on all JDKs &gt;= 1.1:</comment>
        <try>try <block>{
            <decl_stmt><decl><type><name>Class</name></type> <name>c</name> =<init> <expr><call><name><name>Class</name>.<name>forName</name></name> <argument_list>(<argument><expr>"com.sun.tools.javac.Main"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Object</name></type> <name>compiler</name> =<init> <expr><call><name><name>c</name>.<name>newInstance</name></name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Method</name></type> <name>compile</name> =<init> <expr><call><name><name>c</name>.<name>getMethod</name></name> <argument_list>(<argument><expr>"compile"</expr></argument>,
                <argument><expr>new <name><name>Class</name> <index>[]</index></name> <block>{<expr>(new <name><name>String</name> <index>[]</index></name> <block>{}</block>).<call><name>getClass</name> <argument_list>()</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>result</name> =<init> <expr>((<name>Integer</name>) <call><name><name>compile</name>.<name>invoke</name></name>
                          <argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr>new <name><name>Object</name><index>[]</index></name> <block>{<expr><call><name><name>cmd</name>.<name>getArguments</name></name><argument_list>()</argument_list></call></expr>}</block></expr></argument>)</argument_list></call>)
                .<call><name>intValue</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr>(<name>result</name> == <name>MODERN_COMPILER_SUCCESS</name>)</expr>;</return>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>ex</name></decl></param>) <block>{
            <if>if <condition>(<expr><name>ex</name> <name>instanceof</name> <name>BuildException</name></expr>)</condition><then> <block>{
                <throw>throw <expr>(<name>BuildException</name>) <name>ex</name></expr>;</throw>
            }</block></then> <else>else <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Error starting modern compiler"</expr></argument>,
                                         <argument><expr><name>ex</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></else></if>
        }</block></catch></try>
    }</block></function>
}</block></class>
</unit>
