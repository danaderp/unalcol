<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\clearcase\CCMkelem.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>clearcase</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>Execute</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Commandline</name></name>;</import>

<comment type="javadoc">/**
 * Performs ClearCase mkelem.
 *
 * &lt;p&gt;
 * The following attributes are interpreted:
 * &lt;table border="1"&gt;
 *   &lt;tr&gt;
 *     &lt;th&gt;Attribute&lt;/th&gt;
 *     &lt;th&gt;Values&lt;/th&gt;
 *     &lt;th&gt;Required&lt;/th&gt;
 *   &lt;/tr&gt;
 *   &lt;tr&gt;
 *      &lt;td&gt;viewpath&lt;/td&gt;
 *      &lt;td&gt;Path to the ClearCase view file or directory that the command will operate on&lt;/td&gt;
 *      &lt;td&gt;Yes&lt;/td&gt;
 *   &lt;tr&gt;
 *   &lt;tr&gt;
 *      &lt;td&gt;comment&lt;/td&gt;
 *      &lt;td&gt;Specify a comment. Only one of comment or cfile may be used.&lt;/td&gt;
 *      &lt;td&gt;No&lt;/td&gt;
 *   &lt;tr&gt;
 *   &lt;tr&gt;
 *      &lt;td&gt;commentfile&lt;/td&gt;
 *      &lt;td&gt;Specify a file containing a comment. Only one of comment or cfile may be used.&lt;/td&gt;
 *      &lt;td&gt;No&lt;/td&gt;
 *   &lt;tr&gt;
 *   &lt;tr&gt;
 *      &lt;td&gt;nowarn&lt;/td&gt;
 *      &lt;td&gt;Suppress warning messages&lt;/td&gt;
 *      &lt;td&gt;No&lt;/td&gt;
 *   &lt;tr&gt;
 *   &lt;tr&gt;
 *      &lt;td&gt;nocheckout&lt;/td&gt;
 *      &lt;td&gt;Do not checkout after element creation&lt;/td&gt;
 *      &lt;td&gt;No&lt;/td&gt;
 *   &lt;tr&gt;
 *   &lt;tr&gt;
 *      &lt;td&gt;checkin&lt;/td&gt;
 *      &lt;td&gt;Checkin element after creation&lt;/td&gt;
 *      &lt;td&gt;No&lt;/td&gt;
 *   &lt;tr&gt;
 *   &lt;tr&gt;
 *      &lt;td&gt;preservetime&lt;/td&gt;
 *      &lt;td&gt;Preserve the modification time (for checkin)&lt;/td&gt;
 *      &lt;td&gt;No&lt;/td&gt;
 *   &lt;tr&gt;
 *   &lt;tr&gt;
 *      &lt;td&gt;master&lt;/td&gt;
 *      &lt;td&gt;Assign mastership of the main branch to the current site&lt;/td&gt;
 *      &lt;td&gt;No&lt;/td&gt;
 *   &lt;tr&gt;
 *   &lt;tr&gt;
 *      &lt;td&gt;eltype&lt;/td&gt;
 *      &lt;td&gt;Element type to use during element creation&lt;/td&gt;
 *      &lt;td&gt;No&lt;/td&gt;
 *   &lt;tr&gt;
 *   &lt;tr&gt;
 *      &lt;td&gt;failonerr&lt;/td&gt;
 *      &lt;td&gt;Throw an exception if the command fails. Default is true&lt;/td&gt;
 *      &lt;td&gt;No&lt;/td&gt;
 *   &lt;tr&gt;
 * &lt;/table&gt;
 *
 */</comment>
<class><specifier>public</specifier> class <name>CCMkelem</name> <super><extends>extends <name>ClearCase</name></extends></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type>  <name>mComment</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type>  <name>mCfile</name>   =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>mNwarn</name>   =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>mPtime</name>   =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>mNoco</name>    =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>mCheckin</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>mMaster</name>  =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type>  <name>mEltype</name>  =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Executes the task.
     * &lt;p&gt;
     * Builds a command line to execute cleartool and then calls Exec's run method
     * to execute the command line.
     * @throws BuildException if the command fails and failonerr is set to true
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>Commandline</name></type> <name>commandLine</name> =<init> <expr>new <call><name>Commandline</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Project</name></type> <name>aProj</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

        <comment type="line">// Default the viewpath to basedir if it is not specified</comment>
        <if>if <condition>(<expr><call><name>getViewPath</name><argument_list>()</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>setViewPath</name><argument_list>(<argument><expr><call><name><name>aProj</name>.<name>getBaseDir</name></name><argument_list>()</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// build the command line from what we got. the format is</comment>
        <comment type="line">// cleartool mkelem [options...] [viewpath ...]</comment>
        <comment type="line">// as specified in the CLEARTOOL.EXE help</comment>
        <expr_stmt><expr><call><name><name>commandLine</name>.<name>setExecutable</name></name><argument_list>(<argument><expr><call><name>getClearToolCommand</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>commandLine</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>COMMAND_MKELEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>checkOptions</name><argument_list>(<argument><expr><name>commandLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr>!<call><name>getFailOnErr</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>log</name><argument_list>(<argument><expr>"Ignoring any errors that occur for: "
                    + <call><name>getViewPathBasename</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>result</name> = <call><name>run</name><argument_list>(<argument><expr><name>commandLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>Execute</name>.<name>isFailure</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>getFailOnErr</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>msg</name> =<init> <expr>"Failed executing: " + <call><name><name>commandLine</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
    }</block></function>


    <comment type="javadoc">/**
     * Check the command line options.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>checkOptions</name><parameter_list>(<param><decl><type><name>Commandline</name></type> <name>cmd</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>getComment</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <comment type="line">// -c</comment>
            <expr_stmt><expr><call><name>getCommentCommand</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <if>if <condition>(<expr><call><name>getCommentFile</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                <comment type="line">// -cfile</comment>
                <expr_stmt><expr><call><name>getCommentFileCommand</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>FLAG_NOCOMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></else></if>

        <if>if <condition>(<expr><call><name>getNoWarn</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">// -nwarn</comment>
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>FLAG_NOWARN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <comment type="block">/*
         * Should choose either -ci or -nco.
         */</comment>
        <if>if <condition>(<expr><call><name>getNoCheckout</name><argument_list>()</argument_list></call> &amp;&amp; <call><name>getCheckin</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Should choose either [nocheckout | checkin]"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>getNoCheckout</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">// -nco</comment>
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>FLAG_NOCHECKOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>getCheckin</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">// -ci</comment>
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>FLAG_CHECKIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name>getPreserveTime</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <comment type="line">// -ptime</comment>
                <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>FLAG_PRESERVETIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>getMaster</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">// -master</comment>
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>FLAG_MASTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>getEltype</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <comment type="line">// -eltype</comment>
            <expr_stmt><expr><call><name>getEltypeCommand</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <comment type="line">// viewpath</comment>
        <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name>getViewPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the comment string.
     *
     * @param comment the comment string
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setComment</name><parameter_list>(<param><decl><type><name>String</name></type> <name>comment</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>mComment</name> = <name>comment</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get comment string
     *
     * @return String containing the comment
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getComment</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>mComment</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Specifies a file containing a comment.
     *
     * @param cfile the path to the comment file
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCommentFile</name><parameter_list>(<param><decl><type><name>String</name></type> <name>cfile</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>mCfile</name> = <name>cfile</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get comment file
     *
     * @return String containing the path to the comment file
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getCommentFile</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>mCfile</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * If true, suppress warning messages.
     *
     * @param nwarn the status to set the flag to
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setNoWarn</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>nwarn</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>mNwarn</name> = <name>nwarn</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get nowarn flag status
     *
     * @return boolean containing status of nwarn flag
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getNoWarn</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>mNwarn</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * If true, preserve the modification time.
     *
     * @param ptime the status to set the flag to
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPreserveTime</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>ptime</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>mPtime</name> = <name>ptime</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get preservetime flag status
     *
     * @return boolean containing status of preservetime flag
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getPreserveTime</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>mPtime</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * If true, do not checkout element after creation.
     *
     * @param co the status to set the flag to
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setNoCheckout</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>co</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>mNoco</name> = <name>co</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get no checkout flag status
     *
     * @return boolean containing status of noco flag
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getNoCheckout</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>mNoco</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * If true, checkin the element after creation
     *
     * @param ci the status to set the flag to
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCheckin</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>ci</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>mCheckin</name> = <name>ci</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get ci flag status
     *
     * @return boolean containing status of ci flag
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getCheckin</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>mCheckin</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * If true, changes mastership of the main branch
     * to the current site
     *
     * @param master the status to set the flag to
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMaster</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>master</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>mMaster</name> = <name>master</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get master flag status
     *
     * @return boolean containing status of master flag
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getMaster</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>mMaster</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Specifies the element type to use.
     *
     * @param eltype to create element
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setEltype</name><parameter_list>(<param><decl><type><name>String</name></type> <name>eltype</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>mEltype</name> = <name>eltype</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get element type
     *
     * @return String containing the element type
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getEltype</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>mEltype</name></expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     * Get the 'comment' command
     *
     * @param cmd containing the command line string with or
     *            without the comment flag and string appended
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>getCommentCommand</name><parameter_list>(<param><decl><type><name>Commandline</name></type> <name>cmd</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>getComment</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <comment type="block">/* Had to make two separate commands here because if a space is
               inserted between the flag and the value, it is treated as a
               Windows filename with a space and it is enclosed in double
               quotes ("). This breaks clearcase.
            */</comment>
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>FLAG_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name>getComment</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Get the 'commentfile' command
     *
     * @param cmd containing the command line string with or
     *            without the commentfile flag and file appended
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>getCommentFileCommand</name><parameter_list>(<param><decl><type><name>Commandline</name></type> <name>cmd</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>getCommentFile</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <comment type="block">/* Had to make two separate commands here because if a space is
               inserted between the flag and the value, it is treated as a
               Windows filename with a space and it is enclosed in double
               quotes ("). This breaks clearcase.
            */</comment>
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>FLAG_COMMENTFILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name>getCommentFile</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Get the 'element type' command
     *
     * @param cmd containing the command line string with or
     *            without the comment flag and string appended
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>getEltypeCommand</name><parameter_list>(<param><decl><type><name>Commandline</name></type> <name>cmd</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>getEltype</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <comment type="block">/* Had to make two separate commands here because if a space is
               inserted between the flag and the value, it is treated as a
               Windows filename with a space and it is enclosed in double
               quotes ("). This breaks clearcase.
            */</comment>
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>FLAG_ELTYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name>getEltype</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * -c flag -- comment to attach to the file
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FLAG_COMMENT</name> =<init> <expr>"-c"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * -cfile flag -- file containing a comment to attach to the file
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FLAG_COMMENTFILE</name> =<init> <expr>"-cfile"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * -nc flag -- no comment is specified
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FLAG_NOCOMMENT</name> =<init> <expr>"-nc"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * -nwarn flag -- suppresses warning messages
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FLAG_NOWARN</name> =<init> <expr>"-nwarn"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * -ptime flag -- preserves the modification time on checkin
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FLAG_PRESERVETIME</name> =<init> <expr>"-ptime"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * -nco flag -- do not checkout element after creation
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FLAG_NOCHECKOUT</name> =<init> <expr>"-nco"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * -ci flag -- checkin element after creation
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FLAG_CHECKIN</name> =<init> <expr>"-ci"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * -master flag -- change mastership of main branch to current site
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FLAG_MASTER</name> =<init> <expr>"-master"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * -eltype flag -- element type to use during creation
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FLAG_ELTYPE</name> =<init> <expr>"-eltype"</expr></init></decl>;</decl_stmt>
}</block></class>

</unit>
