<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\launcher\VmsCommandLauncher.java"><package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>launcher</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>BufferedWriter</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileWriter</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>

<comment type="javadoc">/**
 * A command launcher for VMS that writes the command to a temporary
 * DCL script before launching commands. This is due to limitations of
 * both the DCL interpreter and the Java VM implementation.
 */</comment>
<class><specifier>public</specifier> class <name>VmsCommandLauncher</name> <super><extends>extends <name>Java13CommandLauncher</name></extends></super> <block>{

    <constructor><specifier>public</specifier> <name>VmsCommandLauncher</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Launches the given command in a new process.
     * 
     * @param project
     *        the Ant project.
     * @param cmd
     *        the command line to execute as an array of strings.
     * @param env
     *        the environment to set as an array of strings.
     * @return the created Process.
     * @throws IOException
     *         forwarded from the exec method of the command launcher.
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>Process</name></type> <name>exec</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>, <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>cmd</name></decl></param>, <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>env</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>cmdFile</name> =<init> <expr><call><name>createCommandFile</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>env</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Process</name></type> <name>p</name> =<init> <expr><call><name><name>super</name>.<name>exec</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>cmdFile</name>.<name>getPath</name></name><argument_list>()</argument_list></call></expr>}</block></expr></argument>, <argument><expr><name>env</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>deleteAfter</name><argument_list>(<argument><expr><name>cmdFile</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Launches the given command in a new process, in the given
     * working directory. Note that under Java 1.4.0 and 1.4.1 on VMS
     * this method only works if &lt;code&gt;workingDir&lt;/code&gt; is null or
     * the logical JAVA$FORK_SUPPORT_CHDIR needs to be set to TRUE.
     * 
     * @param project
     *        the Ant project.
     * @param cmd
     *        the command line to execute as an array of strings.
     * @param env
     *        the environment to set as an array of strings.
     * @param workingDir
     *        working directory where the command should run.
     * @return the created Process.
     * @throws IOException
     *         forwarded from the exec method of the command launcher.
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>Process</name></type> <name>exec</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>, <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>cmd</name></decl></param>, <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>env</name></decl></param>,
                        <param><decl><type><name>File</name></type> <name>workingDir</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>cmdFile</name> =<init> <expr><call><name>createCommandFile</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>env</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Process</name></type> <name>p</name> =<init> <expr><call><name><name>super</name>.<name>exec</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{
                <expr><call><name><name>cmdFile</name>.<name>getPath</name></name><argument_list>()</argument_list></call></expr>
            }</block></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><name>workingDir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>deleteAfter</name><argument_list>(<argument><expr><name>cmdFile</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
    }</block></function>

    <comment type="block">/*
     * Writes the command into a temporary DCL script and returns the
     * corresponding File object.  The script will be deleted on exit.
     * @param cmd the command line to execute as an array of strings.
     * @param env the environment to set as an array of strings.
     * @return the command File.
     * @throws IOException if errors are encountered creating the file.
     */</comment>
    <function><type><specifier>private</specifier> <name>File</name></type> <name>createCommandFile</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>cmd</name></decl></param>, <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>env</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>script</name> =<init> <expr><call><name><name>FILE_UTILS</name>.<name>createTempFile</name></name><argument_list>(<argument><expr>"ANT"</expr></argument>, <argument><expr>".COM"</expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BufferedWriter</name></type> <name>out</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>out</name> = new <call><name>BufferedWriter</name><argument_list>(<argument><expr>new <call><name>FileWriter</name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// add the environment as logicals to the DCL script</comment>
            <if>if <condition>(<expr><name>env</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>eqIndex</name></decl>;</decl_stmt>
                <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>env</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                    <expr_stmt><expr><name>eqIndex</name> = <name><name>env</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>indexOf</name><argument_list>(<argument><expr>'='</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>eqIndex</name> != -1</expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr>"$ DEFINE/NOLOG "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr><name><name>env</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>substring</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>eqIndex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr>" \""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr><name><name>env</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>substring</name><argument_list>(<argument><expr><name>eqIndex</name> + 1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr>'\"'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>out</name>.<name>newLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></for>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr>"$ " + <name><name>cmd</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>1</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>cmd</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr>" -"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>out</name>.<name>newLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr><name><name>cmd</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
        <return>return <expr><name>script</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>deleteAfter</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>File</name></type> <name>f</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>Process</name></type> <name>p</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr>new <class><super><name>Thread</name></super><argument_list>()</argument_list> <block>{
            <function><type><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                <try>try <block>{
                    <expr_stmt><expr><call><name><name>p</name>.<name>waitFor</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch(<param><decl><type><name>InterruptedException</name></type> <name>e</name></decl></param>) <block>{
                    <comment type="line">// ignore</comment>
                }</block></catch></try>
                <expr_stmt><expr><call><name><name>FileUtils</name>.<name>delete</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class>.<call><name>start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
