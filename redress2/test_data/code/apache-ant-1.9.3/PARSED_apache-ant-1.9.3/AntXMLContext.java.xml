<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\helper\AntXMLContext.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>helper</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>MalformedURLException</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>URL</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>

<import>import <name><name>org</name>.<name>xml</name>.<name>sax</name>.<name>Locator</name></name>;</import>
<import>import <name><name>org</name>.<name>xml</name>.<name>sax</name>.<name>Attributes</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Location</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>RuntimeConfigurable</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Target</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>

<comment type="javadoc">/**
 * Context information for the ant processing.
 *
 */</comment>
<class><specifier>public</specifier> class <name>AntXMLContext</name> <block>{
    <comment type="javadoc">/** The project to configure. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Project</name></type> <name>project</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The configuration file to parse. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>buildFile</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The configuration file to parse. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>URL</name></type> <name>buildFileURL</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Vector with all the targets, in the order they are
     * defined. Project maintains a Hashtable, which is not ordered.
     * This will allow description to know the original order.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>Target</name></argument>&gt;</argument_list></name></type> <name>targetVector</name> =<init> <expr>new <call><name><name>Vector</name><argument_list>&lt;<argument><name>Target</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Parent directory of the build file. Used for resolving entities
     * and setting the project's base directory.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>buildFileParent</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Parent directory of the build file. Used for resolving entities
     * and setting the project's base directory.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>URL</name></type> <name>buildFileParentURL</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Name of the current project */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>currentProjectName</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Locator for the configuration file parser.
     * Used for giving locations of errors etc.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Locator</name></type> <name>locator</name></decl>;</decl_stmt>

     <comment type="javadoc">/**
      * Target that all other targets will depend upon implicitly.
      *
      * &lt;p&gt;This holds all tasks and data type definitions that have
      * been placed outside of targets.&lt;/p&gt;
      */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Target</name></type> <name>implicitTarget</name> =<init> <expr>new <call><name>Target</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Current target ( no need for a stack as the processing model
        allows only one level of target ) */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Target</name></type> <name>currentTarget</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The stack of RuntimeConfigurable2 wrapping the
        objects.
    */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>RuntimeConfigurable</name></argument>&gt;</argument_list></name></type> <name>wStack</name> =<init> <expr>new <call><name><name>Vector</name><argument_list>&lt;<argument><name>RuntimeConfigurable</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Indicates whether the project tag attributes are to be ignored
     * when processing a particular build file.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>ignoreProjectTag</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Keeps track of prefix -&gt; uri mapping during parsing */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>prefixMapping</name> =<init> <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


    <comment type="javadoc">/** Keeps track of targets in files */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Target</name></argument>&gt;</argument_list></name></type> <name>currentTargets</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * constructor
     * @param project the project to which this antxml context belongs to
     */</comment>
    <constructor><specifier>public</specifier> <name>AntXMLContext</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>project</name></name> = <name>project</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>implicitTarget</name>.<name>setProject</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>implicitTarget</name>.<name>setName</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>targetVector</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>implicitTarget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * sets the build file to which the XML context belongs
     * @param buildFile  ant build file
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBuildFile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>buildFile</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>buildFile</name></name> = <name>buildFile</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>buildFile</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>buildFileParent</name></name> = new <call><name>File</name><argument_list>(<argument><expr><call><name><name>buildFile</name>.<name>getParent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>implicitTarget</name>.<name>setLocation</name></name><argument_list>(<argument><expr>new <call><name>Location</name><argument_list>(<argument><expr><call><name><name>buildFile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <try>try <block>{
                <expr_stmt><expr><call><name>setBuildFile</name><argument_list>(<argument><expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call>.<call><name>getFileURL</name><argument_list>(<argument><expr><name>buildFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>MalformedURLException</name></type> <name>ex</name></decl></param>) <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name><name>this</name>.<name>buildFileParent</name></name> = <name>null</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * sets the build file to which the XML context belongs
     * @param buildFile  ant build file
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBuildFile</name><parameter_list>(<param><decl><type><name>URL</name></type> <name>buildFile</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>MalformedURLException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>buildFileURL</name></name> = <name>buildFile</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>buildFileParentURL</name></name> = new <call><name>URL</name><argument_list>(<argument><expr><name>buildFile</name></expr></argument>, <argument><expr>"."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>implicitTarget</name>.<name>getLocation</name></name><argument_list>()</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>implicitTarget</name>.<name>setLocation</name></name><argument_list>(<argument><expr>new <call><name>Location</name><argument_list>(<argument><expr><call><name><name>buildFile</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * find out the build file
     * @return  the build file to which the xml context belongs
     */</comment>
    <function><type><specifier>public</specifier> <name>File</name></type> <name>getBuildFile</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>buildFile</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * find out the parent build file of this build file
     * @return the parent build file of this build file
     */</comment>
    <function><type><specifier>public</specifier> <name>File</name></type> <name>getBuildFileParent</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>buildFileParent</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * find out the build file
     * @return  the build file to which the xml context belongs
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>URL</name></type> <name>getBuildFileURL</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>buildFileURL</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * find out the parent build file of this build file
     * @return the parent build file of this build file
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>URL</name></type> <name>getBuildFileParentURL</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>buildFileParentURL</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * find out the project to which this antxml context belongs
     * @return project
     */</comment>
    <function><type><specifier>public</specifier> <name>Project</name></type> <name>getProject</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>project</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * find out the current project name
     * @return current project name
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getCurrentProjectName</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>currentProjectName</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * set the name of the current project
     * @param name name of the current project
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCurrentProjectName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>currentProjectName</name></name> = <name>name</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * get the current runtime configurable wrapper
     * can return null
     * @return runtime configurable wrapper
     */</comment>
    <function><type><specifier>public</specifier> <name>RuntimeConfigurable</name></type> <name>currentWrapper</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>wStack</name>.<name>size</name></name><argument_list>()</argument_list></call> &lt; 1</expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <return>return <expr>(<name>RuntimeConfigurable</name>) <call><name><name>wStack</name>.<name>elementAt</name></name><argument_list>(<argument><expr><call><name><name>wStack</name>.<name>size</name></name><argument_list>()</argument_list></call> - 1</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * get the runtime configurable wrapper of the parent project
     * can return null
     * @return runtime configurable wrapper  of the parent project
     */</comment>
    <function><type><specifier>public</specifier> <name>RuntimeConfigurable</name></type> <name>parentWrapper</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>wStack</name>.<name>size</name></name><argument_list>()</argument_list></call> &lt; 2</expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <return>return <expr>(<name>RuntimeConfigurable</name>) <call><name><name>wStack</name>.<name>elementAt</name></name><argument_list>(<argument><expr><call><name><name>wStack</name>.<name>size</name></name><argument_list>()</argument_list></call> - 2</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * add a runtime configurable wrapper to the internal stack
     * @param wrapper runtime configurable wrapper
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>pushWrapper</name><parameter_list>(<param><decl><type><name>RuntimeConfigurable</name></type> <name>wrapper</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>wStack</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>wrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * remove a runtime configurable wrapper from the stack
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>popWrapper</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>wStack</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>wStack</name>.<name>removeElementAt</name></name><argument_list>(<argument><expr><call><name><name>wStack</name>.<name>size</name></name><argument_list>()</argument_list></call> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * access the stack of wrappers
     * @return the stack of wrappers
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>RuntimeConfigurable</name></argument>&gt;</argument_list></name></type> <name>getWrapperStack</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>wStack</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * add a new target
     * @param target target to add
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addTarget</name><parameter_list>(<param><decl><type><name>Target</name></type> <name>target</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>targetVector</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>currentTarget</name> = <name>target</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * get the current target
     * @return current target
     */</comment>
    <function><type><specifier>public</specifier> <name>Target</name></type> <name>getCurrentTarget</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>currentTarget</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * get the implicit target
     * @return implicit target
     */</comment>
    <function><type><specifier>public</specifier> <name>Target</name></type> <name>getImplicitTarget</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>implicitTarget</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * sets the current target
     * @param target current target
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCurrentTarget</name><parameter_list>(<param><decl><type><name>Target</name></type> <name>target</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>currentTarget</name></name> = <name>target</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * sets the implicit target
     * @param target the implicit target
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setImplicitTarget</name><parameter_list>(<param><decl><type><name>Target</name></type> <name>target</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>implicitTarget</name></name> = <name>target</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * access the vector of targets
     * @return vector of targets
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>Target</name></argument>&gt;</argument_list></name></type> <name>getTargets</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>targetVector</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Scans an attribute list for the &lt;code&gt;id&lt;/code&gt; attribute and
     * stores a reference to the target object in the project if an
     * id is found.
     * &lt;p&gt;
     * This method was moved out of the configure method to allow
     * it to be executed at parse time.
     * @param element the current element
     * @param attr attributes of the current element
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>configureId</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>element</name></decl></param>, <param><decl><type><name>Attributes</name></type> <name>attr</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>id</name> =<init> <expr><call><name><name>attr</name>.<name>getValue</name></name><argument_list>(<argument><expr>"id"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>id</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>project</name>.<name>addIdReference</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * access the locator
     * @return locator
     */</comment>
    <function><type><specifier>public</specifier> <name>Locator</name></type> <name>getLocator</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>locator</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * sets the locator
     * @param locator locator
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLocator</name><parameter_list>(<param><decl><type><name>Locator</name></type> <name>locator</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>locator</name></name> = <name>locator</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * tells whether the project tag is being ignored
     * @return whether the project tag is being ignored
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isIgnoringProjectTag</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>ignoreProjectTag</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     *  sets the flag to ignore the project tag
     * @param flag to ignore the project tag
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setIgnoreProjectTag</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>ignoreProjectTag</name></name> = <name>flag</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Called during parsing, stores the prefix to uri mapping.
     *
     * @param prefix a namespace prefix
     * @param uri    a namespace uri
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>startPrefixMapping</name><parameter_list>(<param><decl><type><name>String</name></type> <name>prefix</name></decl></param>, <param><decl><type><name>String</name></type> <name>uri</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>list</name> =<init> <expr><call><name><name>prefixMapping</name>.<name>get</name></name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>list</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>list</name> = new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>prefixMapping</name>.<name>put</name></name><argument_list>(<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>list</name>.<name>add</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * End of prefix to uri mapping.
     *
     * @param prefix the namespace prefix
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>endPrefixMapping</name><parameter_list>(<param><decl><type><name>String</name></type> <name>prefix</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>list</name> =<init> <expr><call><name><name>prefixMapping</name>.<name>get</name></name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>list</name> == <name>null</name> || <call><name><name>list</name>.<name>size</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
            <return>return;</return> <comment type="line">// Should not happen</comment>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>list</name>.<name>remove</name></name><argument_list>(<argument><expr><call><name><name>list</name>.<name>size</name></name><argument_list>()</argument_list></call> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * prefix to namespace uri mapping
     *
     * @param prefix the prefix to map
     * @return the uri for this prefix, null if not present
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getPrefixMapping</name><parameter_list>(<param><decl><type><name>String</name></type> <name>prefix</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>list</name> =<init> <expr><call><name><name>prefixMapping</name>.<name>get</name></name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>list</name> == <name>null</name> || <call><name><name>list</name>.<name>size</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <return>return <expr>(<name>String</name>) <call><name><name>list</name>.<name>get</name></name><argument_list>(<argument><expr><call><name><name>list</name>.<name>size</name></name><argument_list>()</argument_list></call> - 1</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the targets in the current source file.
     * @return the current targets.
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Target</name></argument>&gt;</argument_list></name></type> <name>getCurrentTargets</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>currentTargets</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the map of the targets in the current source file.
     * @param currentTargets a map of targets.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCurrentTargets</name><parameter_list>(<param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Target</name></argument>&gt;</argument_list></name></type> <name>currentTargets</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>currentTargets</name></name> = <name>currentTargets</name></expr>;</expr_stmt>
    }</block></function>

}</block></class>


</unit>
