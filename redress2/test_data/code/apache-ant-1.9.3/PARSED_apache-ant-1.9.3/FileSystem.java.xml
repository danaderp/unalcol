<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\types\resources\comparators\FileSystem.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>comparators</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Resource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>FileProvider</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>

<comment type="javadoc">/**
 * Compares filesystem Resources.
 * @since Ant 1.7
 */</comment>
<class><specifier>public</specifier> class <name>FileSystem</name> <super><extends>extends <name>ResourceComparator</name></extends></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>FileUtils</name></type> <name>FILE_UTILS</name> =<init> <expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Compare two Resources.
     * @param foo the first Resource.
     * @param bar the second Resource.
     * @return a negative integer, zero, or a positive integer as the first
     *         argument is less than, equal to, or greater than the second.
     * @throws ClassCastException if either resource is not an instance of FileResource.
     */</comment>
    <function><type><specifier>protected</specifier> <name>int</name></type> <name>resourceCompare</name><parameter_list>(<param><decl><type><name>Resource</name></type> <name>foo</name></decl></param>, <param><decl><type><name>Resource</name></type> <name>bar</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>FileProvider</name></type> <name>fooFP</name> =<init> <expr><call><name><name>foo</name>.<name>as</name></name><argument_list>(<argument><expr><name><name>FileProvider</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>fooFP</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>ClassCastException</name><argument_list>(<argument><expr><call><name><name>foo</name>.<name>getClass</name></name><argument_list>()</argument_list></call>
                                         + " doesn't provide files"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>File</name></type> <name>foofile</name> =<init> <expr><call><name><name>fooFP</name>.<name>getFile</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FileProvider</name></type> <name>barFP</name> =<init> <expr><call><name><name>bar</name>.<name>as</name></name><argument_list>(<argument><expr><name><name>FileProvider</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>barFP</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>ClassCastException</name><argument_list>(<argument><expr><call><name><name>bar</name>.<name>getClass</name></name><argument_list>()</argument_list></call>
                                         + " doesn't provide files"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>File</name></type> <name>barfile</name> =<init> <expr><call><name><name>barFP</name>.<name>getFile</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>foofile</name>.<name>equals</name></name><argument_list>(<argument><expr><name>barfile</name></expr></argument>)</argument_list></call> ? 0
            : <call><name><name>FILE_UTILS</name>.<name>isLeadingPath</name></name><argument_list>(<argument><expr><name>foofile</name></expr></argument>, <argument><expr><name>barfile</name></expr></argument>)</argument_list></call> ? -1
            : <call><name><name>FILE_UTILS</name>.<name>normalize</name></name><argument_list>(<argument><expr><call><name><name>foofile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>compareTo</name><argument_list>(
                <argument><expr><call><name><name>FILE_UTILS</name>.<name>normalize</name></name><argument_list>(<argument><expr><call><name><name>barfile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

}</block></class>
</unit>
