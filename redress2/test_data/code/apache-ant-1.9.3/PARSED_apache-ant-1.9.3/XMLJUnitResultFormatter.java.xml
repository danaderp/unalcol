<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\junit\XMLJUnitResultFormatter.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>junit</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>BufferedWriter</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>OutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>OutputStreamWriter</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Writer</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>InetAddress</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>UnknownHostException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Date</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Hashtable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Properties</name></name>;</import>

<import>import <name><name>javax</name>.<name>xml</name>.<name>parsers</name>.<name>DocumentBuilder</name></name>;</import>
<import>import <name><name>javax</name>.<name>xml</name>.<name>parsers</name>.<name>DocumentBuilderFactory</name></name>;</import>

<import>import <name><name>junit</name>.<name>framework</name>.<name>AssertionFailedError</name></name>;</import>
<import>import <name><name>junit</name>.<name>framework</name>.<name>Test</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>DOMElementWriter</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>DateUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>w3c</name>.<name>dom</name>.<name>Document</name></name>;</import>
<import>import <name><name>org</name>.<name>w3c</name>.<name>dom</name>.<name>Element</name></name>;</import>
<import>import <name><name>org</name>.<name>w3c</name>.<name>dom</name>.<name>Text</name></name>;</import>


<comment type="javadoc">/**
 * Prints XML output of the test to a specified Writer.
 *
 * @see FormatterElement
 */</comment>

<class><specifier>public</specifier> class <name>XMLJUnitResultFormatter</name> <super><implements>implements <name>JUnitResultFormatter</name>, <name>XMLConstants</name>, <name>IgnoredTestListener</name></implements></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>double</name></type> <name>ONE_SECOND</name> =<init> <expr>1000.0</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** constant for unnnamed testsuites/cases */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>UNKNOWN</name> =<init> <expr>"unknown"</expr></init></decl>;</decl_stmt>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>DocumentBuilder</name></type> <name>getDocumentBuilder</name><parameter_list>()</parameter_list> <block>{
        <try>try <block>{
            <return>return <expr><call><name><name>DocumentBuilderFactory</name>.<name>newInstance</name></name><argument_list>()</argument_list></call>.<call><name>newDocumentBuilder</name><argument_list>()</argument_list></call></expr>;</return>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>exc</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>ExceptionInInitializerError</name><argument_list>(<argument><expr><name>exc</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * The XML document.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Document</name></type> <name>doc</name></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * The wrapper for the whole testsuite.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Element</name></type> <name>rootElement</name></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * Element for the current test.
     * 
     * The keying of this map is a bit of a hack: tests are keyed by caseName(className) since
     * the Test we get for Test-start isn't the same as the Test we get during test-assumption-fail,
     * so we can't easily match Test objects without manually iterating over all keys and checking
     * individual fields.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Element</name></argument>&gt;</argument_list></name></type> <name>testElements</name> =<init> <expr>new <call><name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Element</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * tests that failed.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Hashtable</name></type> <name>failedTests</name> =<init> <expr>new <call><name>Hashtable</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * Tests that were skipped.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Test</name></argument>&gt;</argument_list></name></type> <name>skippedTests</name> =<init> <expr>new <call><name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Test</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * Tests that were ignored. See the note above about the key being a bit of a hack.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Test</name></argument>&gt;</argument_list></name></type> <name>ignoredTests</name> =<init> <expr>new <call><name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Test</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * Timing helper.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>testStarts</name> =<init> <expr>new <call><name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * Where to write the log to.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>OutputStream</name></type> <name>out</name></decl>;</decl_stmt>

    <comment type="javadoc">/** No arg constructor. */</comment>
    <constructor><specifier>public</specifier> <name>XMLJUnitResultFormatter</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <comment type="javadoc">/** {@inheritDoc}. */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOutput</name><parameter_list>(<param><decl><type><name>OutputStream</name></type> <name>out</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>out</name></name> = <name>out</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/** {@inheritDoc}. */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSystemOutput</name><parameter_list>(<param><decl><type><name>String</name></type> <name>out</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>formatOutput</name><argument_list>(<argument><expr><name>SYSTEM_OUT</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/** {@inheritDoc}. */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSystemError</name><parameter_list>(<param><decl><type><name>String</name></type> <name>out</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>formatOutput</name><argument_list>(<argument><expr><name>SYSTEM_ERR</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The whole testsuite started.
     * @param suite the testsuite.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>startTestSuite</name><parameter_list>(<param><decl><type><name>JUnitTest</name></type> <name>suite</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>doc</name> = <call><name>getDocumentBuilder</name><argument_list>()</argument_list></call>.<call><name>newDocument</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rootElement</name> = <call><name><name>doc</name>.<name>createElement</name></name><argument_list>(<argument><expr><name>TESTSUITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>n</name> =<init> <expr><call><name><name>suite</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>rootElement</name>.<name>setAttribute</name></name><argument_list>(<argument><expr><name>ATTR_NAME</name></expr></argument>, <argument><expr><name>n</name> == <name>null</name> ? <name>UNKNOWN</name> : <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//add the timestamp</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>timestamp</name> =<init> <expr><call><name><name>DateUtils</name>.<name>format</name></name><argument_list>(<argument><expr>new <call><name>Date</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><name><name>DateUtils</name>.<name>ISO8601_DATETIME_PATTERN</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>rootElement</name>.<name>setAttribute</name></name><argument_list>(<argument><expr><name>TIMESTAMP</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//and the hostname.</comment>
        <expr_stmt><expr><call><name><name>rootElement</name>.<name>setAttribute</name></name><argument_list>(<argument><expr><name>HOSTNAME</name></expr></argument>, <argument><expr><call><name>getHostname</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Output properties</comment>
        <decl_stmt><decl><type><name>Element</name></type> <name>propsElement</name> =<init> <expr><call><name><name>doc</name>.<name>createElement</name></name><argument_list>(<argument><expr><name>PROPERTIES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>rootElement</name>.<name>appendChild</name></name><argument_list>(<argument><expr><name>propsElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Properties</name></type> <name>props</name> =<init> <expr><call><name><name>suite</name>.<name>getProperties</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>props</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Enumeration</name></type> <name>e</name> =<init> <expr><call><name><name>props</name>.<name>propertyNames</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>name</name> =<init> <expr>(<name>String</name>) <call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Element</name></type> <name>propElement</name> =<init> <expr><call><name><name>doc</name>.<name>createElement</name></name><argument_list>(<argument><expr><name>PROPERTY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>propElement</name>.<name>setAttribute</name></name><argument_list>(<argument><expr><name>ATTR_NAME</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>propElement</name>.<name>setAttribute</name></name><argument_list>(<argument><expr><name>ATTR_VALUE</name></expr></argument>, <argument><expr><call><name><name>props</name>.<name>getProperty</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>propsElement</name>.<name>appendChild</name></name><argument_list>(<argument><expr><name>propElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * get the local hostname
     * @return the name of the local host, or "localhost" if we cannot work it out
     */</comment>
    <function><type><specifier>private</specifier> <name>String</name></type> <name>getHostname</name><parameter_list>()</parameter_list>  <block>{
        <try>try <block>{
            <return>return <expr><call><name><name>InetAddress</name>.<name>getLocalHost</name></name><argument_list>()</argument_list></call>.<call><name>getHostName</name><argument_list>()</argument_list></call></expr>;</return>
        }</block> <catch>catch (<param><decl><type><name>UnknownHostException</name></type> <name>e</name></decl></param>) <block>{
            <return>return <expr>"localhost"</expr>;</return>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * The whole testsuite ended.
     * @param suite the testsuite.
     * @throws BuildException on error.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>endTestSuite</name><parameter_list>(<param><decl><type><name>JUnitTest</name></type> <name>suite</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>rootElement</name>.<name>setAttribute</name></name><argument_list>(<argument><expr><name>ATTR_TESTS</name></expr></argument>, <argument><expr>"" + <call><name><name>suite</name>.<name>runCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rootElement</name>.<name>setAttribute</name></name><argument_list>(<argument><expr><name>ATTR_FAILURES</name></expr></argument>, <argument><expr>"" + <call><name><name>suite</name>.<name>failureCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rootElement</name>.<name>setAttribute</name></name><argument_list>(<argument><expr><name>ATTR_ERRORS</name></expr></argument>, <argument><expr>"" + <call><name><name>suite</name>.<name>errorCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rootElement</name>.<name>setAttribute</name></name><argument_list>(<argument><expr><name>ATTR_SKIPPED</name></expr></argument>, <argument><expr>"" + <call><name><name>suite</name>.<name>skipCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rootElement</name>.<name>setAttribute</name></name><argument_list>(
            <argument><expr><name>ATTR_TIME</name></expr></argument>, <argument><expr>"" + (<call><name><name>suite</name>.<name>getRunTime</name></name><argument_list>()</argument_list></call> / <name>ONE_SECOND</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>out</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Writer</name></type> <name>wri</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <try>try <block>{
                <expr_stmt><expr><name>wri</name> = new <call><name>BufferedWriter</name><argument_list>(<argument><expr>new <call><name>OutputStreamWriter</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>"UTF8"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>wri</name>.<name>write</name></name><argument_list>(<argument><expr>"&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr>(new <call><name>DOMElementWriter</name><argument_list>()</argument_list></call>).<call><name>write</name><argument_list>(<argument><expr><name>rootElement</name></expr></argument>, <argument><expr><name>wri</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>"  "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>exc</name></decl></param>) <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Unable to write log file"</expr></argument>, <argument><expr><name>exc</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch> <finally>finally <block>{
                <if>if <condition>(<expr><name>wri</name> != <name>null</name></expr>)</condition><then> <block>{
                    <try>try <block>{
                        <expr_stmt><expr><call><name><name>wri</name>.<name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ex</name></decl></param>) <block>{
                        <comment type="line">// ignore</comment>
                    }</block></catch></try>
                }</block></then></if>
                <if>if <condition>(<expr><name>out</name> != <name><name>System</name>.<name>out</name></name> &amp;&amp; <name>out</name> != <name><name>System</name>.<name>err</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>wri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></finally></try>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Interface TestListener.
     *
     * &lt;p&gt;A new Test is started.
     * @param t the test.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>startTest</name><parameter_list>(<param><decl><type><name>Test</name></type> <name>t</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>testStarts</name>.<name>put</name></name><argument_list>(<argument><expr><call><name>createDescription</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>createDescription</name><parameter_list>(<param><decl><type><name>Test</name></type> <name>test</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name><name>JUnitVersionHelper</name>.<name>getTestCaseName</name></name><argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call> + "(" + <call><name><name>JUnitVersionHelper</name>.<name>getTestCaseClassName</name></name><argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call> + ")"</expr>;</return>
	}</block></function>

    <comment type="javadoc">/**
     * Interface TestListener.
     *
     * &lt;p&gt;A Test is finished.
     * @param test the test.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>endTest</name><parameter_list>(<param><decl><type><name>Test</name></type> <name>test</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>testDescription</name> =<init> <expr><call><name>createDescription</name><argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Fix for bug #5637 - if a junit.extensions.TestSetup is</comment>
        <comment type="line">// used and throws an exception during setUp then startTest</comment>
        <comment type="line">// would never have been called</comment>
        <if>if <condition>(<expr>!<call><name><name>testStarts</name>.<name>containsKey</name></name><argument_list>(<argument><expr><name>testDescription</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>startTest</name><argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>Element</name></type> <name>currentTest</name></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>failedTests</name>.<name>containsKey</name></name><argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name><name>skippedTests</name>.<name>containsKey</name></name><argument_list>(<argument><expr><name>testDescription</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name><name>ignoredTests</name>.<name>containsKey</name></name><argument_list>(<argument><expr><name>testDescription</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>currentTest</name> = <call><name><name>doc</name>.<name>createElement</name></name><argument_list>(<argument><expr><name>TESTCASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>n</name> =<init> <expr><call><name><name>JUnitVersionHelper</name>.<name>getTestCaseName</name></name><argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>currentTest</name>.<name>setAttribute</name></name><argument_list>(<argument><expr><name>ATTR_NAME</name></expr></argument>,
                                     <argument><expr><name>n</name> == <name>null</name> ? <name>UNKNOWN</name> : <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// a TestSuite can contain Tests from multiple classes,</comment>
            <comment type="line">// even tests with the same name - disambiguate them.</comment>
            <expr_stmt><expr><call><name><name>currentTest</name>.<name>setAttribute</name></name><argument_list>(<argument><expr><name>ATTR_CLASSNAME</name></expr></argument>,
                    <argument><expr><call><name><name>JUnitVersionHelper</name>.<name>getTestCaseClassName</name></name><argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>rootElement</name>.<name>appendChild</name></name><argument_list>(<argument><expr><name>currentTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>testElements</name>.<name>put</name></name><argument_list>(<argument><expr><call><name>createDescription</name><argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>currentTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>currentTest</name> = <call><name><name>testElements</name>.<name>get</name></name><argument_list>(<argument><expr><name>testDescription</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <decl_stmt><decl><type><name>Long</name></type> <name>l</name> =<init> <expr><call><name><name>testStarts</name>.<name>get</name></name><argument_list>(<argument><expr><call><name>createDescription</name><argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>currentTest</name>.<name>setAttribute</name></name><argument_list>(<argument><expr><name>ATTR_TIME</name></expr></argument>,
            <argument><expr>"" + ((<call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call> - <name>l</name>) / <name>ONE_SECOND</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Interface TestListener for JUnit &amp;lt;= 3.4.
     *
     * &lt;p&gt;A Test failed.
     * @param test the test.
     * @param t the exception.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addFailure</name><parameter_list>(<param><decl><type><name>Test</name></type> <name>test</name></decl></param>, <param><decl><type><name>Throwable</name></type> <name>t</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>formatError</name><argument_list>(<argument><expr><name>FAILURE</name></expr></argument>, <argument><expr><name>test</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Interface TestListener for JUnit &amp;gt; 3.4.
     *
     * &lt;p&gt;A Test failed.
     * @param test the test.
     * @param t the assertion.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addFailure</name><parameter_list>(<param><decl><type><name>Test</name></type> <name>test</name></decl></param>, <param><decl><type><name>AssertionFailedError</name></type> <name>t</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>addFailure</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr>(<name>Throwable</name>) <name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Interface TestListener.
     *
     * &lt;p&gt;An error occurred while running the test.
     * @param test the test.
     * @param t the error.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addError</name><parameter_list>(<param><decl><type><name>Test</name></type> <name>test</name></decl></param>, <param><decl><type><name>Throwable</name></type> <name>t</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>formatError</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><name>test</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>formatError</name><parameter_list>(<param><decl><type><name>String</name></type> <name>type</name></decl></param>, <param><decl><type><name>Test</name></type> <name>test</name></decl></param>, <param><decl><type><name>Throwable</name></type> <name>t</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>test</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>endTest</name><argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>failedTests</name>.<name>put</name></name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name>Element</name></type> <name>nested</name> =<init> <expr><call><name><name>doc</name>.<name>createElement</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Element</name></type> <name>currentTest</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>test</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>currentTest</name> = <call><name><name>testElements</name>.<name>get</name></name><argument_list>(<argument><expr><call><name>createDescription</name><argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>currentTest</name> = <name>rootElement</name></expr>;</expr_stmt>
        }</block></else></if>

        <expr_stmt><expr><call><name><name>currentTest</name>.<name>appendChild</name></name><argument_list>(<argument><expr><name>nested</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>message</name> =<init> <expr><call><name><name>t</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>message</name> != <name>null</name> &amp;&amp; <call><name><name>message</name>.<name>length</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>nested</name>.<name>setAttribute</name></name><argument_list>(<argument><expr><name>ATTR_MESSAGE</name></expr></argument>, <argument><expr><call><name><name>t</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>nested</name>.<name>setAttribute</name></name><argument_list>(<argument><expr><name>ATTR_TYPE</name></expr></argument>, <argument><expr><call><name><name>t</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>strace</name> =<init> <expr><call><name><name>JUnitTestRunner</name>.<name>getFilteredTrace</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Text</name></type> <name>trace</name> =<init> <expr><call><name><name>doc</name>.<name>createTextNode</name></name><argument_list>(<argument><expr><name>strace</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>nested</name>.<name>appendChild</name></name><argument_list>(<argument><expr><name>trace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>formatOutput</name><parameter_list>(<param><decl><type><name>String</name></type> <name>type</name></decl></param>, <param><decl><type><name>String</name></type> <name>output</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Element</name></type> <name>nested</name> =<init> <expr><call><name><name>doc</name>.<name>createElement</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>rootElement</name>.<name>appendChild</name></name><argument_list>(<argument><expr><name>nested</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>nested</name>.<name>appendChild</name></name><argument_list>(<argument><expr><call><name><name>doc</name>.<name>createCDATASection</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testIgnored</name><parameter_list>(<param><decl><type><name>Test</name></type> <name>test</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>formatSkip</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><call><name><name>JUnitVersionHelper</name>.<name>getIgnoreMessage</name></name><argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>test</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>ignoredTests</name>.<name>put</name></name><argument_list>(<argument><expr><call><name>createDescription</name><argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>formatSkip</name><parameter_list>(<param><decl><type><name>Test</name></type> <name>test</name></decl></param>, <param><decl><type><name>String</name></type> <name>message</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>test</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>endTest</name><argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name>Element</name></type> <name>nested</name> =<init> <expr><call><name><name>doc</name>.<name>createElement</name></name><argument_list>(<argument><expr>"skipped"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>message</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>nested</name>.<name>setAttribute</name></name><argument_list>(<argument><expr>"message"</expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name>Element</name></type> <name>currentTest</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>test</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>currentTest</name> = <call><name><name>testElements</name>.<name>get</name></name><argument_list>(<argument><expr><call><name>createDescription</name><argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>currentTest</name> = <name>rootElement</name></expr>;</expr_stmt>
        }</block></else></if>

        <expr_stmt><expr><call><name><name>currentTest</name>.<name>appendChild</name></name><argument_list>(<argument><expr><name>nested</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testAssumptionFailure</name><parameter_list>(<param><decl><type><name>Test</name></type> <name>test</name></decl></param>, <param><decl><type><name>Throwable</name></type> <name>failure</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>formatSkip</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><call><name><name>failure</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>skippedTests</name>.<name>put</name></name><argument_list>(<argument><expr><call><name>createDescription</name><argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>
}</block></class> <comment type="line">// XMLJUnitResultFormatter</comment>
</unit>
