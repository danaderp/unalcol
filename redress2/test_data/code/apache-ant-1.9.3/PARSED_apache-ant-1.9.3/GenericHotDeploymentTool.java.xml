<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\j2ee\GenericHotDeploymentTool.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>j2ee</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>Java</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Commandline</name></name>;</import>

<comment type="javadoc">/**
 *  A generic tool for J2EE server hot deployment.
 *  &lt;p&gt;The simple implementation spawns a JVM with the supplied
 *  class name, jvm args, and arguments.
 *
 *  @see org.apache.tools.ant.taskdefs.optional.j2ee.HotDeploymentTool
 *  @see org.apache.tools.ant.taskdefs.optional.j2ee.AbstractHotDeploymentTool
 *  @see org.apache.tools.ant.taskdefs.optional.j2ee.ServerDeploy
 */</comment>
<class><specifier>public</specifier> class <name>GenericHotDeploymentTool</name> <super><extends>extends <name>AbstractHotDeploymentTool</name></extends></super> <block>{
    <comment type="javadoc">/** A Java task used to run the deployment tool **/</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Java</name></type> <name>java</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The fully qualified class name of the deployment tool **/</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>className</name></decl>;</decl_stmt>

    <comment type="javadoc">/** List of valid actions **/</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name><index>[]</index></type> <name>VALID_ACTIONS</name> =<init> <expr><block>{<expr><name>ACTION_DEPLOY</name></expr>}</block></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     *  Add a nested argument element to hand to the deployment tool; optional.
     *  @return A Commandline.Argument object representing the
     *  command line argument being passed when the deployment
     *  tool is run.  IE: "-user=mark", "-password=venture"...
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Commandline</name>.<name>Argument</name></name></type> <name>createArg</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>java</name>.<name>createArg</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     *  Add a nested argument element to hand to the JVM running the
     *  deployment tool.
     *  Creates a nested arg element.
     *  @return A Commandline.Argument object representing the
     *  JVM command line argument being passed when the deployment
     *  tool is run.  IE: "-ms64m", "-mx128m"...
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Commandline</name>.<name>Argument</name></name></type> <name>createJvmarg</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>java</name>.<name>createJvmarg</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     *  Determines if the "action" attribute defines a valid action.
     *  &lt;p&gt;Subclasses should determine if the action passed in is
     *  supported by the vendor's deployment tool.
     *  For this generic implementation, the only valid action is "deploy"
     *  @return true if the "action" attribute is valid, false if not.
     */</comment>
    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>isActionValid</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>(<call><name>getTask</name><argument_list>()</argument_list></call>.<call><name>getAction</name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><name><name>VALID_ACTIONS</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call>)</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     *  Sets the parent task.
     *  @param task An ServerDeploy object representing the parent task.
     *  @ant.attribute ignored="true"
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTask</name><parameter_list>(<param><decl><type><name>ServerDeploy</name></type> <name>task</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name>.<name>setTask</name></name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>java</name> = new <call><name>Java</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     *  Perform the actual deployment.
     *  For this generic implementation, a JVM is spawned using the
     *  supplied classpath, classname, JVM args, and command line arguments.
     *  @exception org.apache.tools.ant.BuildException if the attributes are invalid or incomplete.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>deploy</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>java</name>.<name>setClassname</name></name><argument_list>(<argument><expr><name>className</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>java</name>.<name>setClasspath</name></name><argument_list>(<argument><expr><call><name>getClasspath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>java</name>.<name>setFork</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>java</name>.<name>setFailonerror</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>java</name>.<name>execute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     *  Validates the passed in attributes.
     *  Ensures the className and arguments attribute have been set.
     *  @exception org.apache.tools.ant.BuildException if the attributes are invalid or incomplete.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>validateAttributes</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>super</name>.<name>validateAttributes</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>className</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"The classname attribute must be set"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     *  The name of the class to execute to perform
     *  deployment; required.
     *  Example: "com.foobar.tools.deploy.DeployTool"
     *  @param className The fully qualified class name of the class
     *  to perform deployment.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setClassName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>className</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>className</name></name> = <name>className</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * get the java attribute.
     * @return the java attribute.
     */</comment>
    <function><type><specifier>public</specifier> <name>Java</name></type> <name>getJava</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>java</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the classname attribute.
     * @return the classname value.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getClassName</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>className</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
