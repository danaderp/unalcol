<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\util\ScriptRunnerBase.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>BufferedReader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileReader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Reader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileNotFoundException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStreamReader</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>ProjectComponent</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Resource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>ResourceCollection</name></name>;</import>

<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>

<comment type="javadoc">/**
 * This is a common abstract base case for script runners.
 * These classes need to implement executeScript, evaluateScript
 * and supportsLanguage.
 * @since Ant 1.7.0
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>ScriptRunnerBase</name> <block>{
    <comment type="javadoc">/** Whether to keep the engine between calls to execute/eval */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>keepEngine</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Script language */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>language</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Script content */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>script</name> =<init> <expr>""</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Project this runner is used in */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Project</name></type> <name>project</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Classloader to be used when running the script. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ClassLoader</name></type> <name>scriptLoader</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Beans to be provided to the script */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Map</name></type> <name>beans</name> =<init> <expr>new <call><name>HashMap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Add a list of named objects to the list to be exported to the script
     *
     * @param dictionary a map of objects to be placed into the script context
     *        indexed by String names.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addBeans</name><parameter_list>(<param><decl><type><name>Map</name></type> <name>dictionary</name></decl></param>)</parameter_list> <block>{
        <for>for (<init><decl><type><name>Iterator</name></type> <name>i</name> =<init> <expr><call><name><name>dictionary</name>.<name>keySet</name></name><argument_list>()</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>i</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>key</name> =<init> <expr>(<name>String</name>) <call><name><name>i</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <try>try <block>{
                <decl_stmt><decl><type><name>Object</name></type> <name>val</name> =<init> <expr><call><name><name>dictionary</name>.<name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>addBean</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>ex</name></decl></param>) <block>{
                <comment type="line">// The key is in the dictionary but cannot be retrieved</comment>
                <comment type="line">// This is usually due references that refer to tasks</comment>
                <comment type="line">// that have not been taskdefed in the current run.</comment>
                <comment type="line">// Ignore</comment>
            }</block></catch></try>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Add a single object into the script context.
     *
     * @param key the name in the context this object is to stored under.
     * @param bean the object to be stored in the script context.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addBean</name><parameter_list>(<param><decl><type><name>String</name></type> <name>key</name></decl></param>, <param><decl><type><name>Object</name></type> <name>bean</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>isValid</name> =<init> <expr><call><name><name>key</name>.<name>length</name></name><argument_list>()</argument_list></call> &gt; 0
            &amp;&amp; <call><name><name>Character</name>.<name>isJavaIdentifierStart</name></name><argument_list>(<argument><expr><call><name><name>key</name>.<name>charAt</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>1</expr></init></decl>;</init> <condition><expr><name>isValid</name> &amp;&amp; <name>i</name> &lt; <call><name><name>key</name>.<name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>isValid</name> = <call><name><name>Character</name>.<name>isJavaIdentifierPart</name></name><argument_list>(<argument><expr><call><name><name>key</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <if>if <condition>(<expr><name>isValid</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>beans</name>.<name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>bean</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Get the beans used for the script.
     * @return the map of beans.
     */</comment>
    <function><type><specifier>protected</specifier> <name>Map</name></type> <name>getBeans</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>beans</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Do the work.
     * @param execName the name that will be passed to BSF for this script
     *        execution.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>executeScript</name><parameter_list>(<param><decl><type><name>String</name></type> <name>execName</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="javadoc">/**
     * Evaluate the script.
     * @param execName the name that will be passed to the
     *                 scripting engine for this script execution.
     * @return the result of evaluating the script.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>Object</name></type> <name>evaluateScript</name><parameter_list>(<param><decl><type><name>String</name></type> <name>execName</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="javadoc">/**
     * Check if a script engine can be created for
     * this language.
     * @return true if a script engine can be created, false
     *              otherwise.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>supportsLanguage</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="javadoc">/**
     * Get the name of the manager prefix used for this
     * scriptrunner.
     * @return the prefix string.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>String</name></type> <name>getManagerName</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="javadoc">/**
     * Defines the language (required).
     * @param language the scripting language name for the script.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLanguage</name><parameter_list>(<param><decl><type><name>String</name></type> <name>language</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>language</name></name> = <name>language</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the script language
     * @return the script language
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getLanguage</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>language</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the script classloader.
     * @param classLoader the classloader to use.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setScriptClassLoader</name><parameter_list>(<param><decl><type><name>ClassLoader</name></type> <name>classLoader</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>scriptLoader</name></name> = <name>classLoader</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the classloader used to load the script engine.
     * @return the classloader.
     */</comment>
    <function><type><specifier>protected</specifier> <name>ClassLoader</name></type> <name>getScriptClassLoader</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>scriptLoader</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Whether to keep the script engine between calls.
     * @param keepEngine if true, keep the engine.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setKeepEngine</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>keepEngine</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>keepEngine</name></name> = <name>keepEngine</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the keep engine attribute.
     * @return the attribute.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getKeepEngine</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>keepEngine</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Load the script from an external file; optional.
     * @param file the file containing the script source.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSrc</name><parameter_list>(<param><decl><type><name>File</name></type> <name>file</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>filename</name> =<init> <expr><call><name><name>file</name>.<name>getPath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>file</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"file " + <name>filename</name> + " not found."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <try>try <block>{
            <expr_stmt><expr><call><name>readSource</name><argument_list>(<argument><expr>new <call><name>FileReader</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>FileNotFoundException</name></type> <name>e</name></decl></param>) <block>{
            <comment type="line">//this can only happen if the file got deleted a short moment ago</comment>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"file " + <name>filename</name> + " not found."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * Read some source in from the given reader
     * @param reader the reader; this is closed afterwards.
     * @param name the name to use in error messages
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>readSource</name><parameter_list>(<param><decl><type><name>Reader</name></type> <name>reader</name></decl></param>, <param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>BufferedReader</name></type> <name>in</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>in</name> = new <call><name>BufferedReader</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>script</name> += <call><name><name>FileUtils</name>.<name>safeReadFully</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ex</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Failed to read " + <name>name</name></expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>


    <comment type="javadoc">/**
     * Add a resource to the source list.
     * @since Ant 1.7.1
     * @param sourceResource the resource to load
     * @throws BuildException if the resource cannot be read
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>loadResource</name><parameter_list>(<param><decl><type><name>Resource</name></type> <name>sourceResource</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> =<init> <expr><call><name><name>sourceResource</name>.<name>toLongString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>InputStream</name></type> <name>in</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>in</name> = <call><name><name>sourceResource</name>.<name>getInputStream</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Failed to open " + <name>name</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <catch>catch (<param><decl><type><name>UnsupportedOperationException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                <argument><expr>"Failed to open " + <name>name</name> + " -it is not readable"</expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
        <expr_stmt><expr><call><name>readSource</name><argument_list>(<argument><expr>new <call><name>InputStreamReader</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add all resources in a resource collection to the source list.
     * @since Ant 1.7.1
     * @param collection the resource to load
     * @throws BuildException if a resource cannot be read
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>loadResources</name><parameter_list>(<param><decl><type><name>ResourceCollection</name></type> <name>collection</name></decl></param>)</parameter_list> <block>{
        <for>for (<init><decl><type><name>Resource</name></type> <name>resource</name> :<range> <expr><name>collection</name></expr></range></decl></init>) <block>{
            <expr_stmt><expr><call><name>loadResource</name><argument_list>(<argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Set the script text. Properties in the text are not expanded!
     *
     * @param text a component of the script text to be added.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addText</name><parameter_list>(<param><decl><type><name>String</name></type> <name>text</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>script</name> += <name>text</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the current script text content.
     * @return the script text.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getScript</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>script</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Clear the current script text content.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>clearScript</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>script</name></name> = ""</expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the project for this runner.
     * @param project the project.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setProject</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>project</name></name> = <name>project</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the project for this runner.
     * @return the project.
     */</comment>
    <function><type><specifier>public</specifier> <name>Project</name></type> <name>getProject</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>project</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Bind the runner to a project component.
     * Properties, targets and references are all added as beans;
     * project is bound to project, and self to the component.
     * @param component to become &lt;code&gt;self&lt;/code&gt;
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>bindToComponent</name><parameter_list>(<param><decl><type><name>ProjectComponent</name></type> <name>component</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>project</name> = <call><name><name>component</name>.<name>getProject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addBeans</name><argument_list>(<argument><expr><call><name><name>project</name>.<name>getProperties</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addBeans</name><argument_list>(<argument><expr><call><name><name>project</name>.<name>getUserProperties</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addBeans</name><argument_list>(<argument><expr><call><name><name>project</name>.<name>getCopyOfTargets</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addBeans</name><argument_list>(<argument><expr><call><name><name>project</name>.<name>getCopyOfReferences</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addBean</name><argument_list>(<argument><expr>"project"</expr></argument>, <argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addBean</name><argument_list>(<argument><expr>"self"</expr></argument>, <argument><expr><name>component</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Bind the runner to a project component.
     * The project and self are the only beans set.
     * @param component to become &lt;code&gt;self&lt;/code&gt;
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>bindToComponentMinimum</name><parameter_list>(<param><decl><type><name>ProjectComponent</name></type> <name>component</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>project</name> = <call><name><name>component</name>.<name>getProject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addBean</name><argument_list>(<argument><expr>"project"</expr></argument>, <argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addBean</name><argument_list>(<argument><expr>"self"</expr></argument>, <argument><expr><name>component</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Check if the language attribute is set.
     * @throws BuildException if it is not.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>checkLanguage</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>language</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                <argument><expr>"script language must be specified"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Replace the current context classloader with the
     * script context classloader.
     * @return the current context classloader.
     */</comment>
    <function><type><specifier>protected</specifier> <name>ClassLoader</name></type> <name>replaceContextLoader</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>ClassLoader</name></type> <name>origContextClassLoader</name> =<init>
            <expr><call><name><name>Thread</name>.<name>currentThread</name></name><argument_list>()</argument_list></call>.<call><name>getContextClassLoader</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>getScriptClassLoader</name><argument_list>()</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>setScriptClassLoader</name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call>.<call><name>getClassLoader</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>Thread</name>.<name>currentThread</name></name><argument_list>()</argument_list></call>.<call><name>setContextClassLoader</name><argument_list>(<argument><expr><call><name>getScriptClassLoader</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>origContextClassLoader</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Restore the context loader with the original context classloader.
     *
     * script context loader.
     * @param origLoader the original context classloader.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>restoreContextLoader</name><parameter_list>(<param><decl><type><name>ClassLoader</name></type> <name>origLoader</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Thread</name>.<name>currentThread</name></name><argument_list>()</argument_list></call>.<call><name>setContextClassLoader</name><argument_list>(
                 <argument><expr><name>origLoader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
