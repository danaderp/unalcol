<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\compilers\JavacExternal.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>compilers</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Commandline</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>condition</name>.<name>Os</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>JavaEnvUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>

<comment type="javadoc">/**
 * Performs a compile using javac externally.
 *
 * @since Ant 1.4
 */</comment>
<class><specifier>public</specifier> class <name>JavacExternal</name> <super><extends>extends <name>DefaultCompilerAdapter</name></extends></super> <block>{

    <comment type="javadoc">/**
     * Performs a compile using the Javac externally.
     * @return true if the compilation succeeded
     * @throws BuildException on error
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>attributes</name>.<name>log</name></name><argument_list>(<argument><expr>"Using external javac compiler"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Commandline</name></type> <name>cmd</name> =<init> <expr>new <call><name>Commandline</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>cmd</name>.<name>setExecutable</name></name><argument_list>(<argument><expr><call><name>getJavac</name><argument_list>()</argument_list></call>.<call><name>getJavacExecutable</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name>assumeJava11</name><argument_list>()</argument_list></call> &amp;&amp; !<call><name>assumeJava12</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>setupModernJavacCommandlineSwitches</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>setupJavacCommandlineSwitches</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <decl_stmt><decl><type><name>int</name></type> <name>firstFileName</name> =<init> <expr><call><name>assumeJava11</name><argument_list>()</argument_list></call> ? -1 : <call><name><name>cmd</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>logAndAddFilesToCompile</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//On VMS platform, we need to create a special java options file</comment>
        <comment type="line">//containing the arguments and classpath for the javac command.</comment>
        <comment type="line">//The special file is supported by the "-V" switch on the VMS JVM.</comment>
        <if>if <condition>(<expr><call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr>"openvms"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name>execOnVMS</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>firstFileName</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <return>return
                <expr><call><name>executeExternalCompile</name><argument_list>(<argument><expr><call><name><name>cmd</name>.<name>getCommandline</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>firstFileName</name></expr></argument>,
                        <argument><expr>true</expr></argument>)</argument_list></call>
                == 0</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * helper method to execute our command on VMS.
     * @param cmd
     * @param firstFileName
     * @return
     */</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>execOnVMS</name><parameter_list>(<param><decl><type><name>Commandline</name></type> <name>cmd</name></decl></param>, <param><decl><type><name>int</name></type> <name>firstFileName</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>vmsFile</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>vmsFile</name> = <call><name><name>JavaEnvUtils</name>.<name>createVmsJavaOptionFile</name></name><argument_list>(<argument><expr><call><name><name>cmd</name>.<name>getArguments</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>commandLine</name> =<init> <expr><block>{<expr><call><name><name>cmd</name>.<name>getExecutable</name></name><argument_list>()</argument_list></call></expr>,
                                    <expr>"-V"</expr>,
                                    <expr><call><name><name>vmsFile</name>.<name>getPath</name></name><argument_list>()</argument_list></call></expr>}</block></expr></init></decl>;</decl_stmt>
            <return>return <expr>0 == <call><name>executeExternalCompile</name><argument_list>(<argument><expr><name>commandLine</name></expr></argument>,
                            <argument><expr><name>firstFileName</name></expr></argument>,
                            <argument><expr>true</expr></argument>)</argument_list></call></expr>;</return>

        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Failed to create a temporary file for \"-V\" switch"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>delete</name></name><argument_list>(<argument><expr><name>vmsFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

}</block></class>

</unit>
