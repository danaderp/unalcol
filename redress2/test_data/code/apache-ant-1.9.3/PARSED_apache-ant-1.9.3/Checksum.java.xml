<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\Checksum.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>security</name>.<name>DigestInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>security</name>.<name>MessageDigest</name></name>;</import>
<import>import <name><name>java</name>.<name>security</name>.<name>NoSuchAlgorithmException</name></name>;</import>
<import>import <name><name>java</name>.<name>security</name>.<name>NoSuchProviderException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileReader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>BufferedReader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Comparator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Hashtable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Arrays</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>MessageFormat</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>ParseException</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>condition</name>.<name>Condition</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>EnumeratedAttribute</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>FileSet</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Resource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>ResourceCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>FileProvider</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>Union</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>Restrict</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>selectors</name>.<name>Type</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>StringUtils</name></name>;</import>

<comment type="javadoc">/**
 * Used to create or verify file checksums.
 *
 * @since Ant 1.5
 *
 * @ant.task category="control"
 */</comment>
<class><specifier>public</specifier> class <name>Checksum</name> <super><extends>extends <name>MatchingTask</name></extends> <implements>implements <name>Condition</name></implements></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>NIBBLE</name> =<init> <expr>4</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>WORD</name> =<init> <expr>16</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>BUFFER_SIZE</name> =<init> <expr>8 * 1024</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>BYTE_MASK</name> =<init> <expr>0xFF</expr></init></decl>;</decl_stmt>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>FileUnion</name> <super><extends>extends <name>Restrict</name></extends></super> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>Union</name></type> <name>u</name></decl>;</decl_stmt>
        <constructor><name>FileUnion</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><name>u</name> = new <call><name>Union</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>super</name>.<name>add</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>super</name>.<name>add</name></name><argument_list>(<argument><expr><name><name>Type</name>.<name>FILE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>ResourceCollection</name></type> <name>rc</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>u</name>.<name>add</name></name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>

    <comment type="javadoc">/**
     * File for which checksum is to be calculated.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>file</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Root directory in which the checksum files will be written.
     * If not specified, the checksum files will be written
     * in the same directory as each file.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>todir</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * MessageDigest algorithm to be used.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>algorithm</name> =<init> <expr>"MD5"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * MessageDigest Algorithm provider
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>provider</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * File Extension that is be to used to create or identify
     * destination file
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>fileext</name></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * Holds generated checksum and gets set as a Project Property.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>property</name></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * Holds checksums for all files (both calculated and cached on disk).
     * Key:   java.util.File (source file)
     * Value: java.lang.String (digest)
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>File</name></argument>, <argument><name>byte</name><index>[]</index></argument>&gt;</argument_list></name></type> <name>allDigests</name> =<init> <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>File</name></argument>, <argument><name><name>byte</name><index>[]</index></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * Holds relative file names for all files (always with a forward slash).
     * This is used to calculate the total hash.
     * Key:   java.util.File (source file)
     * Value: java.lang.String (relative file name)
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>File</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>relativeFilePaths</name> =<init> <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>File</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * Property where totalChecksum gets set.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>totalproperty</name></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * Whether or not to create a new file.
     * Defaults to &lt;code&gt;false&lt;/code&gt;.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>forceOverwrite</name></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * Contains the result of a checksum verification. ("true" or "false")
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>verifyProperty</name></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * Resource Collection.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>FileUnion</name></type> <name>resources</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * Stores SourceFile, DestFile pairs and SourceFile, Property String pairs.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Hashtable</name><argument_list>&lt;<argument><name>File</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>includeFileMap</name> =<init> <expr>new <call><name><name>Hashtable</name><argument_list>&lt;<argument><name>File</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * Message Digest instance
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>MessageDigest</name></type> <name>messageDigest</name></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * is this task being used as a nested condition element?
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>isCondition</name></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * Size of the read buffer to use.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>readBufferSize</name> =<init> <expr><name>BUFFER_SIZE</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Formater for the checksum file.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>MessageFormat</name></type> <name>format</name> =<init> <expr><call><name><name>FormatElement</name>.<name>getDefault</name></name><argument_list>()</argument_list></call>.<call><name>getFormat</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Sets the file for which the checksum is to be calculated.
     * @param file a &lt;code&gt;File&lt;/code&gt; value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>file</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>file</name></name> = <name>file</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the root directory where checksum files will be
     * written/read
     * @param todir the directory to write to
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTodir</name><parameter_list>(<param><decl><type><name>File</name></type> <name>todir</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>todir</name></name> = <name>todir</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Specifies the algorithm to be used to compute the checksum.
     * Defaults to "MD5". Other popular algorithms like "SHA" may be used as well.
     * @param algorithm a &lt;code&gt;String&lt;/code&gt; value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAlgorithm</name><parameter_list>(<param><decl><type><name>String</name></type> <name>algorithm</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>algorithm</name></name> = <name>algorithm</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the MessageDigest algorithm provider to be used
     * to calculate the checksum.
     * @param provider a &lt;code&gt;String&lt;/code&gt; value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setProvider</name><parameter_list>(<param><decl><type><name>String</name></type> <name>provider</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>provider</name></name> = <name>provider</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the file extension that is be to used to
     * create or identify destination file.
     * @param fileext a &lt;code&gt;String&lt;/code&gt; value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFileext</name><parameter_list>(<param><decl><type><name>String</name></type> <name>fileext</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>fileext</name></name> = <name>fileext</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the property to hold the generated checksum.
     * @param property a &lt;code&gt;String&lt;/code&gt; value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setProperty</name><parameter_list>(<param><decl><type><name>String</name></type> <name>property</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>property</name></name> = <name>property</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the property to hold the generated total checksum
     * for all files.
     * @param totalproperty a &lt;code&gt;String&lt;/code&gt; value
     *
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTotalproperty</name><parameter_list>(<param><decl><type><name>String</name></type> <name>totalproperty</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>totalproperty</name></name> = <name>totalproperty</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the verify property.  This project property holds
     * the result of a checksum verification - "true" or "false"
     * @param verifyProperty a &lt;code&gt;String&lt;/code&gt; value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setVerifyproperty</name><parameter_list>(<param><decl><type><name>String</name></type> <name>verifyProperty</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>verifyProperty</name></name> = <name>verifyProperty</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Whether or not to overwrite existing file irrespective of
     * whether it is newer than
     * the source file.  Defaults to false.
     * @param forceOverwrite a &lt;code&gt;boolean&lt;/code&gt; value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setForceOverwrite</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>forceOverwrite</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>forceOverwrite</name></name> = <name>forceOverwrite</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The size of the read buffer to use.
     * @param size an &lt;code&gt;int&lt;/code&gt; value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setReadBufferSize</name><parameter_list>(<param><decl><type><name>int</name></type> <name>size</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>readBufferSize</name></name> = <name>size</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Select the in/output pattern via a well know format name.
     * @param e an &lt;code&gt;enumerated&lt;/code&gt; value
     *
     * @since 1.7.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFormat</name><parameter_list>(<param><decl><type><name>FormatElement</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>format</name> = <call><name><name>e</name>.<name>getFormat</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Specify the pattern to use as a MessageFormat pattern.
     *
     * &lt;p&gt;{0} gets replaced by the checksum, {1} by the filename.&lt;/p&gt;
     * @param p a &lt;code&gt;String&lt;/code&gt; value
     *
     * @since 1.7.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPattern</name><parameter_list>(<param><decl><type><name>String</name></type> <name>p</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>format</name> = new <call><name>MessageFormat</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Files to generate checksums for.
     * @param set a fileset of files to generate checksums for.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addFileset</name><parameter_list>(<param><decl><type><name>FileSet</name></type> <name>set</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a resource collection.
     * @param rc the ResourceCollection to add.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>ResourceCollection</name></type> <name>rc</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>rc</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <expr_stmt><expr><name>resources</name> = (<name>resources</name> == <name>null</name>) ? new <call><name>FileUnion</name><argument_list>()</argument_list></call> : <name>resources</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>resources</name>.<name>add</name></name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Calculate the checksum(s).
     * @throws BuildException on error
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><name>isCondition</name> = false</expr>;</expr_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>value</name> =<init> <expr><call><name>validateAndExecute</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>verifyProperty</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>setNewProperty</name><argument_list>(
                <argument><expr><name>verifyProperty</name></expr></argument>,
                <argument><expr>(<name>value</name> ? <call><name><name>Boolean</name>.<name>TRUE</name>.<name>toString</name></name><argument_list>()</argument_list></call> : <call><name><name>Boolean</name>.<name>FALSE</name>.<name>toString</name></name><argument_list>()</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Calculate the checksum(s)
     *
     * @return Returns true if the checksum verification test passed,
     * false otherwise.
     * @throws BuildException on error
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>eval</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><name>isCondition</name> = true</expr>;</expr_stmt>
        <return>return <expr><call><name>validateAndExecute</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Validate attributes and get down to business.
     */</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>validateAndExecute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>savedFileExt</name> =<init> <expr><name>fileext</name></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>file</name> == <name>null</name> &amp;&amp; (<name>resources</name> == <name>null</name> || <call><name><name>resources</name>.<name>size</name></name><argument_list>()</argument_list></call> == 0)</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                <argument><expr>"Specify at least one source - a file or a resource collection."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>resources</name> == <name>null</name> || <call><name><name>resources</name>.<name>isFilesystemOnly</name></name><argument_list>()</argument_list></call>)</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Can only calculate checksums for file-based resources."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>file</name> != <name>null</name> &amp;&amp; <call><name><name>file</name>.<name>exists</name></name><argument_list>()</argument_list></call> &amp;&amp; <call><name><name>file</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Checksum cannot be generated for directories"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>file</name> != <name>null</name> &amp;&amp; <name>totalproperty</name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"File and Totalproperty cannot co-exist."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>property</name> != <name>null</name> &amp;&amp; <name>fileext</name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Property and FileExt cannot co-exist."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>property</name> != <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>forceOverwrite</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                    <argument><expr>"ForceOverwrite cannot be used when Property is specified"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <decl_stmt><decl><type><name>int</name></type> <name>ct</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>resources</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>ct</name> += <call><name><name>resources</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name>file</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>ct</name>++</expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name>ct</name> &gt; 1</expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                    <argument><expr>"Multiple files cannot be used when Property is specified"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
        }</block></then></if>
        <if>if <condition>(<expr><name>verifyProperty</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>isCondition</name> = true</expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>verifyProperty</name> != <name>null</name> &amp;&amp; <name>forceOverwrite</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"VerifyProperty and ForceOverwrite cannot co-exist."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>isCondition</name> &amp;&amp; <name>forceOverwrite</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                <argument><expr>"ForceOverwrite cannot be used when conditions are being used."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name>messageDigest</name> = <name>null</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>provider</name> != <name>null</name></expr>)</condition><then> <block>{
            <try>try <block>{
                <expr_stmt><expr><name>messageDigest</name> = <call><name><name>MessageDigest</name>.<name>getInstance</name></name><argument_list>(<argument><expr><name>algorithm</name></expr></argument>, <argument><expr><name>provider</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>NoSuchAlgorithmException</name></type> <name>noalgo</name></decl></param>) <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>noalgo</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch> <catch>catch (<param><decl><type><name>NoSuchProviderException</name></type> <name>noprovider</name></decl></param>) <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>noprovider</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></then> <else>else <block>{
            <try>try <block>{
                <expr_stmt><expr><name>messageDigest</name> = <call><name><name>MessageDigest</name>.<name>getInstance</name></name><argument_list>(<argument><expr><name>algorithm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>NoSuchAlgorithmException</name></type> <name>noalgo</name></decl></param>) <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>noalgo</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></else></if>
        <if>if <condition>(<expr><name>messageDigest</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Unable to create Message Digest"</expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>fileext</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>fileext</name> = "." + <name>algorithm</name></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>fileext</name>.<name>trim</name></name><argument_list>()</argument_list></call>.<call><name>length</name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"File extension when specified must not be an empty string"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if></else></if>
        <try>try <block>{
            <if>if <condition>(<expr><name>resources</name> != <name>null</name></expr>)</condition><then> <block>{
                <for>for (<init><decl><type><name>Resource</name></type> <name>r</name> :<range> <expr><name>resources</name></expr></range></decl></init>) <block>{
                    <decl_stmt><decl><type><name>File</name></type> <name>src</name> =<init> <expr><call><name><name>r</name>.<name>as</name></name><argument_list>(<argument><expr><name><name>FileProvider</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call>
                        .<call><name>getFile</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>totalproperty</name> != <name>null</name> || <name>todir</name> != <name>null</name></expr>)</condition><then> <block>{
                        <comment type="line">// Use '/' to calculate digest based on file name.</comment>
                        <comment type="line">// This is required in order to get the same result</comment>
                        <comment type="line">// on different platforms.</comment>
                        <expr_stmt><expr><call><name><name>relativeFilePaths</name>.<name>put</name></name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><call><name><name>r</name>.<name>getName</name></name><argument_list>()</argument_list></call>.<call><name>replace</name><argument_list>(<argument><expr><name><name>File</name>.<name>separatorChar</name></name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <expr_stmt><expr><call><name>addToIncludeFileMap</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
            }</block></then></if>
            <if>if <condition>(<expr><name>file</name> != <name>null</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>totalproperty</name> != <name>null</name> || <name>todir</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>relativeFilePaths</name>.<name>put</name></name><argument_list>(
                        <argument><expr><name>file</name></expr></argument>, <argument><expr><call><name><name>file</name>.<name>getName</name></name><argument_list>()</argument_list></call>.<call><name>replace</name><argument_list>(<argument><expr><name><name>File</name>.<name>separatorChar</name></name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><call><name>addToIncludeFileMap</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <return>return <expr><call><name>generateChecksums</name><argument_list>()</argument_list></call></expr>;</return>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><name>fileext</name> = <name>savedFileExt</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>includeFileMap</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <comment type="javadoc">/**
     * Add key-value pair to the hashtable upon which
     * to later operate upon.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>addToIncludeFileMap</name><parameter_list>(<param><decl><type><name>File</name></type> <name>file</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><call><name><name>file</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>property</name> == <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>File</name></type> <name>checksumFile</name> =<init> <expr><call><name>getChecksumFile</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>forceOverwrite</name> || <name>isCondition</name>
                    || (<call><name><name>file</name>.<name>lastModified</name></name><argument_list>()</argument_list></call> &gt; <call><name><name>checksumFile</name>.<name>lastModified</name></name><argument_list>()</argument_list></call>)</expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>includeFileMap</name>.<name>put</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>checksumFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>file</name> + " omitted as " + <name>checksumFile</name> + " is up to date."</expr></argument>,
                        <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>totalproperty</name> != <name>null</name></expr>)</condition><then> <block>{
                        <comment type="line">// Read the checksum from disk.</comment>
                        <decl_stmt><decl><type><name>String</name></type> <name>checksum</name> =<init> <expr><call><name>readChecksum</name><argument_list>(<argument><expr><name>checksumFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>digest</name> =<init> <expr><call><name>decodeHex</name><argument_list>(<argument><expr><call><name><name>checksum</name>.<name>toCharArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>allDigests</name>.<name>put</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></else></if>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>includeFileMap</name>.<name>put</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>property</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then> <else>else <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>message</name> =<init> <expr>"Could not find file "
                + <call><name><name>file</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call>
                + " to generate checksum for."</expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></else></if>
    }</block></function>

    <function><type><specifier>private</specifier> <name>File</name></type> <name>getChecksumFile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>file</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>directory</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>todir</name> != <name>null</name></expr>)</condition><then> <block>{
            <comment type="line">// A separate directory was explicitly declared</comment>
            <decl_stmt><decl><type><name>String</name></type> <name>path</name> =<init> <expr><call><name>getRelativeFilePath</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>directory</name> = new <call><name>File</name><argument_list>(<argument><expr><name>todir</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call>.<call><name>getParentFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// Create the directory, as it might not exist.</comment>
            <expr_stmt><expr><call><name><name>directory</name>.<name>mkdirs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <comment type="line">// Just use the same directory as the file itself.</comment>
            <comment type="line">// This directory will exist</comment>
            <expr_stmt><expr><name>directory</name> = <call><name><name>file</name>.<name>getParentFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <decl_stmt><decl><type><name>File</name></type> <name>checksumFile</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name>directory</name></expr></argument>, <argument><expr><call><name><name>file</name>.<name>getName</name></name><argument_list>()</argument_list></call> + <name>fileext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>checksumFile</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Generate checksum(s) using the message digest created earlier.
     */</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>generateChecksums</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>checksumMatches</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FileInputStream</name></type> <name>fis</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FileOutputStream</name></type> <name>fos</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>buf</name> =<init> <expr>new <name><name>byte</name><index>[<expr><name>readBufferSize</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <for>for (<init><decl><type><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name>File</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></name></type> <name>e</name> :<range> <expr><call><name><name>includeFileMap</name>.<name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>) <block>{
                <expr_stmt><expr><call><name><name>messageDigest</name>.<name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>File</name></type> <name>src</name> =<init> <expr><call><name><name>e</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr>!<name>isCondition</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Calculating " + <name>algorithm</name> + " checksum for " + <name>src</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name>fis</name> = new <call><name>FileInputStream</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>DigestInputStream</name></type> <name>dis</name> =<init> <expr>new <call><name>DigestInputStream</name><argument_list>(<argument><expr><name>fis</name></expr></argument>,
                                                              <argument><expr><name>messageDigest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><call><name><name>dis</name>.<name>read</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>readBufferSize</name></expr></argument>)</argument_list></call> != -1</expr>)</condition> <block>{
                    <comment type="line">// Empty statement</comment>
                }</block></while>
                <expr_stmt><expr><call><name><name>dis</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>fis</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>fis</name> = <name>null</name></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>fileDigest</name> =<init> <expr><call><name><name>messageDigest</name>.<name>digest</name></name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>totalproperty</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>allDigests</name>.<name>put</name></name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>fileDigest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <decl_stmt><decl><type><name>String</name></type> <name>checksum</name> =<init> <expr><call><name>createDigestString</name><argument_list>(<argument><expr><name>fileDigest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <comment type="line">//can either be a property name string or a file</comment>
                <decl_stmt><decl><type><name>Object</name></type> <name>destination</name> =<init> <expr><call><name><name>e</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>destination</name> <name>instanceof</name> <name><name>java</name>.<name>lang</name>.<name>String</name></name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>String</name></type> <name>prop</name> =<init> <expr>(<name>String</name>) <name>destination</name></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>isCondition</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>checksumMatches</name>
                            = <name>checksumMatches</name> &amp;&amp; <call><name><name>checksum</name>.<name>equals</name></name><argument_list>(<argument><expr><name>property</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>setNewProperty</name><argument_list>(<argument><expr><name>prop</name></expr></argument>, <argument><expr><name>checksum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></then> <else>else <if>if <condition>(<expr><name>destination</name> <name>instanceof</name> <name><name>java</name>.<name>io</name>.<name>File</name></name></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><name>isCondition</name></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>File</name></type> <name>existingFile</name> =<init> <expr>(<name>File</name>) <name>destination</name></expr></init></decl>;</decl_stmt>
                        <if>if <condition>(<expr><call><name><name>existingFile</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                            <try>try <block>{
                                <decl_stmt><decl><type><name>String</name></type> <name>suppliedChecksum</name> =<init>
                                    <expr><call><name>readChecksum</name><argument_list>(<argument><expr><name>existingFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                <expr_stmt><expr><name>checksumMatches</name> = <name>checksumMatches</name>
                                    &amp;&amp; <call><name><name>checksum</name>.<name>equals</name></name><argument_list>(<argument><expr><name>suppliedChecksum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
                                <comment type="line">// file is on wrong format, swallow</comment>
                                <expr_stmt><expr><name>checksumMatches</name> = false</expr>;</expr_stmt>
                            }</block></catch></try>
                        }</block></then> <else>else <block>{
                            <expr_stmt><expr><name>checksumMatches</name> = false</expr>;</expr_stmt>
                        }</block></else></if>
                    }</block></then> <else>else <block>{
                        <decl_stmt><decl><type><name>File</name></type> <name>dest</name> =<init> <expr>(<name>File</name>) <name>destination</name></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name>fos</name> = new <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>fos</name>.<name>write</name></name><argument_list>(<argument><expr><call><name><name>format</name>.<name>format</name></name><argument_list>(<argument><expr>new <name><name>Object</name><index>[]</index></name> <block>{
                                                    <expr><name>checksum</name></expr>,
                                                    <expr><call><name><name>src</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr>,
                                                    <expr><call><name><name>FileUtils</name>
                                                    .<name>getRelativePath</name></name><argument_list>(<argument><expr><call><name><name>dest</name>
                                                                     .<name>getParentFile</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                                     <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>,
                                                    <expr><call><name><name>FileUtils</name>
                                                    .<name>getRelativePath</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>
                                                                     .<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>,
                                                                     <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>,
                                                    <expr><call><name><name>src</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr>
                                                }</block></expr></argument>)</argument_list></call>.<call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>fos</name>.<name>write</name></name><argument_list>(<argument><expr><call><name><name>StringUtils</name>.<name>LINE_SEP</name>.<name>getBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>fos</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>fos</name> = <name>null</name></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></then></if></else></if>
            }</block></for>
            <if>if <condition>(<expr><name>totalproperty</name> != <name>null</name></expr>)</condition><then> <block>{
                <comment type="line">// Calculate the total checksum</comment>
                <comment type="line">// Convert the keys (source files) into a sorted array.</comment>
                <decl_stmt><decl><type><name>File</name><index>[]</index></type> <name>keyArray</name> =<init> <expr><call><name><name>allDigests</name>.<name>keySet</name></name><argument_list>()</argument_list></call>.<call><name>toArray</name><argument_list>(<argument><expr>new <name><name>File</name><index>[<expr><call><name><name>allDigests</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <comment type="line">// File is Comparable, but sort-order is platform</comment>
                <comment type="line">// dependent (case-insensitive on Windows)</comment>
                <expr_stmt><expr><call><name><name>Arrays</name>.<name>sort</name></name><argument_list>(<argument><expr><name>keyArray</name></expr></argument>, <argument><expr>new <class><super><name><name>Comparator</name><argument_list>&lt;<argument><name>File</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
                        <function><type><specifier>public</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<param><decl><type><name>File</name></type> <name>f1</name></decl></param>, <param><decl><type><name>File</name></type> <name>f2</name></decl></param>)</parameter_list> <block>{
                            <return>return <expr><name>f1</name> == <name>null</name> ? (<name>f2</name> == <name>null</name> ? 0 : -1)
                                : (<name>f2</name> == <name>null</name> ? 1
                                   : <call><name>getRelativeFilePath</name><argument_list>(<argument><expr><name>f1</name></expr></argument>)</argument_list></call>
                                   .<call><name>compareTo</name><argument_list>(<argument><expr><call><name>getRelativeFilePath</name><argument_list>(<argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>)</expr>;</return>
                        }</block></function>
                    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// Loop over the checksums and generate a total hash.</comment>
                <expr_stmt><expr><call><name><name>messageDigest</name>.<name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <for>for (<init><decl><type><name>File</name></type> <name>src</name> :<range> <expr><name>keyArray</name></expr></range></decl></init>) <block>{
                    <comment type="line">// Add the digest for the file content</comment>
                    <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>digest</name> =<init> <expr><call><name><name>allDigests</name>.<name>get</name></name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>messageDigest</name>.<name>update</name></name><argument_list>(<argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="line">// Add the file path</comment>
                    <decl_stmt><decl><type><name>String</name></type> <name>fileName</name> =<init> <expr><call><name>getRelativeFilePath</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>messageDigest</name>.<name>update</name></name><argument_list>(<argument><expr><call><name><name>fileName</name>.<name>getBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
                <decl_stmt><decl><type><name>String</name></type> <name>totalChecksum</name> =<init> <expr><call><name>createDigestString</name><argument_list>(<argument><expr><call><name><name>messageDigest</name>.<name>digest</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>setNewProperty</name><argument_list>(<argument><expr><name>totalproperty</name></expr></argument>, <argument><expr><name>totalChecksum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>fis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>fos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
        <return>return <expr><name>checksumMatches</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>createDigestString</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>fileDigest</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>checksumSb</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>fileDigest</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>hexStr</name> =<init> <expr><call><name><name>Integer</name>.<name>toHexString</name></name><argument_list>(<argument><expr><name>BYTE_MASK</name> &amp; <name><name>fileDigest</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>hexStr</name>.<name>length</name></name><argument_list>()</argument_list></call> &lt; 2</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>checksumSb</name>.<name>append</name></name><argument_list>(<argument><expr>"0"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>checksumSb</name>.<name>append</name></name><argument_list>(<argument><expr><name>hexStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><call><name><name>checksumSb</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Converts an array of characters representing hexadecimal values into an
     * array of bytes of those same values. The returned array will be half the
     * length of the passed array, as it takes two characters to represent any
     * given byte. An exception is thrown if the passed char array has an odd
     * number of elements.
     *
     * NOTE: This code is copied from jakarta-commons codec.
     * @param data an array of characters representing hexadecimal values
     * @return the converted array of bytes
     * @throws BuildException on error
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>byte</name><index>[]</index></type> <name>decodeHex</name><parameter_list>(<param><decl><type><name><name>char</name><index>[]</index></name></type> <name>data</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>l</name> =<init> <expr><name><name>data</name>.<name>length</name></name></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr>(<name>l</name> &amp; 0x01) != 0</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"odd number of characters."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>out</name> =<init> <expr>new <name><name>byte</name><index>[<expr><name>l</name> &gt;&gt; 1</expr>]</index></name></expr></init></decl>;</decl_stmt>

        <comment type="line">// two characters form the hex value.</comment>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init>, <name>j</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>j</name> &lt; <name>l</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>f</name> =<init> <expr><call><name><name>Character</name>.<name>digit</name></name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>j</name>++</expr>]</index></name></expr></argument>, <argument><expr><name>WORD</name></expr></argument>)</argument_list></call> &lt;&lt; <name>NIBBLE</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>f</name> = <name>f</name> | <call><name><name>Character</name>.<name>digit</name></name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>j</name>++</expr>]</index></name></expr></argument>, <argument><expr><name>WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> = <call>(<name>byte</name>) <argument_list>(<argument><expr><name>f</name> &amp; <name>BYTE_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <return>return <expr><name>out</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * reads the checksum from a file using the specified format.
     *
     * @since 1.7
     */</comment>
    <function><type><specifier>private</specifier> <name>String</name></type> <name>readChecksum</name><parameter_list>(<param><decl><type><name>File</name></type> <name>f</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>BufferedReader</name></type> <name>diskChecksumReader</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>diskChecksumReader</name> = new <call><name>BufferedReader</name><argument_list>(<argument><expr>new <call><name>FileReader</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Object</name><index>[]</index></type> <name>result</name> =<init> <expr><call><name><name>format</name>.<name>parse</name></name><argument_list>(<argument><expr><call><name><name>diskChecksumReader</name>.<name>readLine</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>result</name> == <name>null</name> || <name><name>result</name>.<name>length</name></name> == 0 || <name><name>result</name><index>[<expr>0</expr>]</index></name> == <name>null</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"failed to find a checksum"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <return>return <expr>(<name>String</name>) <name><name>result</name><index>[<expr>0</expr>]</index></name></expr>;</return>
        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Couldn't read checksum file " + <name>f</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <catch>catch (<param><decl><type><name>ParseException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Couldn't read checksum file " + <name>f</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>diskChecksumReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <comment type="javadoc">/**
     * @since Ant 1.8.2
     */</comment>
    <function><type><specifier>private</specifier> <name>String</name></type> <name>getRelativeFilePath</name><parameter_list>(<param><decl><type><name>File</name></type> <name>f</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>path</name> =<init> <expr>(<name>String</name>) <call><name><name>relativeFilePaths</name>.<name>get</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>path</name> == <name>null</name></expr>)</condition><then> <block>{
            <comment type="line">//bug 37386. this should not occur, but it has, once.</comment>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Internal error: "
                                     + "relativeFilePaths could not match file "
                                     + <name>f</name> + "\n"
                                     + "please file a bug report on this"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr><name>path</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Helper class for the format attribute.
     *
     * @since 1.7
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>FormatElement</name> <super><extends>extends <name>EnumeratedAttribute</name></extends></super> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>MessageFormat</name></argument>&gt;</argument_list></name></type> <name>formatMap</name> =<init> <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>MessageFormat</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>CHECKSUM</name> =<init> <expr>"CHECKSUM"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>MD5SUM</name> =<init> <expr>"MD5SUM"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SVF</name> =<init> <expr>"SVF"</expr></init></decl>;</decl_stmt>

        static <block>{
            <expr_stmt><expr><call><name><name>formatMap</name>.<name>put</name></name><argument_list>(<argument><expr><name>CHECKSUM</name></expr></argument>, <argument><expr>new <call><name>MessageFormat</name><argument_list>(<argument><expr>"{0}"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>formatMap</name>.<name>put</name></name><argument_list>(<argument><expr><name>MD5SUM</name></expr></argument>, <argument><expr>new <call><name>MessageFormat</name><argument_list>(<argument><expr>"{0} *{1}"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>formatMap</name>.<name>put</name></name><argument_list>(<argument><expr><name>SVF</name></expr></argument>, <argument><expr>new <call><name>MessageFormat</name><argument_list>(<argument><expr>"MD5 ({1}) = {0}"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>

        <comment type="javadoc">/** Constructor for FormatElement */</comment>
        <constructor><specifier>public</specifier> <name>FormatElement</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="javadoc">/**
         * Get the default value - CHECKSUM.
         * @return the defaul value.
         */</comment>
        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>FormatElement</name></type> <name>getDefault</name><parameter_list>()</parameter_list> <block>{
            <decl_stmt><decl><type><name>FormatElement</name></type> <name>e</name> =<init> <expr>new <call><name>FormatElement</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>e</name>.<name>setValue</name></name><argument_list>(<argument><expr><name>CHECKSUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>e</name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Convert this enumerated type to a &lt;code&gt;MessageFormat&lt;/code&gt;.
         * @return a &lt;code&gt;MessageFormat&lt;/code&gt; object.
         */</comment>
        <function><type><specifier>public</specifier> <name>MessageFormat</name></type> <name>getFormat</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr>(<name>MessageFormat</name>) <call><name><name>formatMap</name>.<name>get</name></name><argument_list>(<argument><expr><call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Get the valid values.
         * @return an array of values.
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getValues</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr>new <name><name>String</name><index>[]</index></name> <block>{<expr><name>CHECKSUM</name></expr>, <expr><name>MD5SUM</name></expr>, <expr><name>SVF</name></expr>}</block></expr>;</return>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
