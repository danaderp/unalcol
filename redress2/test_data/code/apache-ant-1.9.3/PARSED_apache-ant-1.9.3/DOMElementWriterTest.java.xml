<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\util\DOMElementWriterTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>StringWriter</name></name>;</import>

<import>import <name><name>junit</name>.<name>framework</name>.<name>TestCase</name></name>;</import>

<import>import <name><name>org</name>.<name>w3c</name>.<name>dom</name>.<name>Document</name></name>;</import>
<import>import <name><name>org</name>.<name>w3c</name>.<name>dom</name>.<name>Element</name></name>;</import>

<comment type="javadoc">/**
 * Tests for org.apache.tools.ant.util.DOMElementWriter.
 *
 */</comment>
<class><specifier>public</specifier> class <name>DOMElementWriterTest</name> <super><extends>extends <name>TestCase</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>DOMElementWriter</name></type> <name>w</name> =<init> <expr>new <call><name>DOMElementWriter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>DOMElementWriterTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testIsReference</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"&amp;#20;"</expr></argument>, <argument><expr><call><name><name>w</name>.<name>isReference</name></name><argument_list>(<argument><expr>"&amp;#20;"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"&amp;#x20;"</expr></argument>, <argument><expr><call><name><name>w</name>.<name>isReference</name></name><argument_list>(<argument><expr>"&amp;#x20;"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"&amp;#xA0;"</expr></argument>, <argument><expr><call><name><name>w</name>.<name>isReference</name></name><argument_list>(<argument><expr>"&amp;#xA0;"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"&amp;#A0;"</expr></argument>, <argument><expr>!<call><name><name>w</name>.<name>isReference</name></name><argument_list>(<argument><expr>"&amp;#A0;"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"20;"</expr></argument>, <argument><expr>!<call><name><name>w</name>.<name>isReference</name></name><argument_list>(<argument><expr>"20;"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"&amp;#20"</expr></argument>, <argument><expr>!<call><name><name>w</name>.<name>isReference</name></name><argument_list>(<argument><expr>"&amp;#20"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"&amp;quot;"</expr></argument>, <argument><expr><call><name><name>w</name>.<name>isReference</name></name><argument_list>(<argument><expr>"&amp;quot;"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"&amp;apos;"</expr></argument>, <argument><expr><call><name><name>w</name>.<name>isReference</name></name><argument_list>(<argument><expr>"&amp;apos;"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"&amp;gt;"</expr></argument>, <argument><expr><call><name><name>w</name>.<name>isReference</name></name><argument_list>(<argument><expr>"&amp;gt;"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"&amp;lt;"</expr></argument>, <argument><expr><call><name><name>w</name>.<name>isReference</name></name><argument_list>(<argument><expr>"&amp;lt;"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"&amp;amp;"</expr></argument>, <argument><expr><call><name><name>w</name>.<name>isReference</name></name><argument_list>(<argument><expr>"&amp;amp;"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testEncode</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"&amp;amp;#20;"</expr></argument>, <argument><expr><call><name><name>w</name>.<name>encode</name></name><argument_list>(<argument><expr>"&amp;#20;"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"&amp;amp;#x20;"</expr></argument>, <argument><expr><call><name><name>w</name>.<name>encode</name></name><argument_list>(<argument><expr>"&amp;#x20;"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"&amp;amp;#xA0;"</expr></argument>, <argument><expr><call><name><name>w</name>.<name>encode</name></name><argument_list>(<argument><expr>"&amp;#xA0;"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"&amp;amp;#A0;"</expr></argument>, <argument><expr><call><name><name>w</name>.<name>encode</name></name><argument_list>(<argument><expr>"&amp;#A0;"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"20;"</expr></argument>, <argument><expr><call><name><name>w</name>.<name>encode</name></name><argument_list>(<argument><expr>"20;"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"&amp;amp;#20"</expr></argument>, <argument><expr><call><name><name>w</name>.<name>encode</name></name><argument_list>(<argument><expr>"&amp;#20"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"&amp;amp;quot;"</expr></argument>, <argument><expr><call><name><name>w</name>.<name>encode</name></name><argument_list>(<argument><expr>"&amp;quot;"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"&amp;amp;apos;"</expr></argument>, <argument><expr><call><name><name>w</name>.<name>encode</name></name><argument_list>(<argument><expr>"&amp;apos;"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"&amp;amp;gt;"</expr></argument>, <argument><expr><call><name><name>w</name>.<name>encode</name></name><argument_list>(<argument><expr>"&amp;gt;"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"&amp;amp;lt;"</expr></argument>, <argument><expr><call><name><name>w</name>.<name>encode</name></name><argument_list>(<argument><expr>"&amp;lt;"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"&amp;amp;amp;"</expr></argument>, <argument><expr><call><name><name>w</name>.<name>encode</name></name><argument_list>(<argument><expr>"&amp;amp;"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"&amp;quot;"</expr></argument>, <argument><expr><call><name><name>w</name>.<name>encode</name></name><argument_list>(<argument><expr>"\""</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"&amp;lt;"</expr></argument>, <argument><expr><call><name><name>w</name>.<name>encode</name></name><argument_list>(<argument><expr>"&lt;"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"&amp;amp;"</expr></argument>, <argument><expr><call><name><name>w</name>.<name>encode</name></name><argument_list>(<argument><expr>"&amp;"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><call><name><name>w</name>.<name>encode</name></name><argument_list>(<argument><expr>"\u0017"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"\r\n\t"</expr></argument>, <argument><expr><call><name><name>w</name>.<name>encode</name></name><argument_list>(<argument><expr>"\r\n\t"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testEncodeAttributeValue</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"&amp;amp;#20;"</expr></argument>, <argument><expr><call><name><name>w</name>.<name>encodeAttributeValue</name></name><argument_list>(<argument><expr>"&amp;#20;"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"&amp;amp;#x20;"</expr></argument>, <argument><expr><call><name><name>w</name>.<name>encodeAttributeValue</name></name><argument_list>(<argument><expr>"&amp;#x20;"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"&amp;amp;#xA0;"</expr></argument>, <argument><expr><call><name><name>w</name>.<name>encodeAttributeValue</name></name><argument_list>(<argument><expr>"&amp;#xA0;"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"&amp;amp;#A0;"</expr></argument>, <argument><expr><call><name><name>w</name>.<name>encodeAttributeValue</name></name><argument_list>(<argument><expr>"&amp;#A0;"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"20;"</expr></argument>, <argument><expr><call><name><name>w</name>.<name>encodeAttributeValue</name></name><argument_list>(<argument><expr>"20;"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"&amp;amp;#20"</expr></argument>, <argument><expr><call><name><name>w</name>.<name>encodeAttributeValue</name></name><argument_list>(<argument><expr>"&amp;#20"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"&amp;amp;quot;"</expr></argument>, <argument><expr><call><name><name>w</name>.<name>encodeAttributeValue</name></name><argument_list>(<argument><expr>"&amp;quot;"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"&amp;amp;apos;"</expr></argument>, <argument><expr><call><name><name>w</name>.<name>encodeAttributeValue</name></name><argument_list>(<argument><expr>"&amp;apos;"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"&amp;amp;gt;"</expr></argument>, <argument><expr><call><name><name>w</name>.<name>encodeAttributeValue</name></name><argument_list>(<argument><expr>"&amp;gt;"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"&amp;amp;lt;"</expr></argument>, <argument><expr><call><name><name>w</name>.<name>encodeAttributeValue</name></name><argument_list>(<argument><expr>"&amp;lt;"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"&amp;amp;amp;"</expr></argument>, <argument><expr><call><name><name>w</name>.<name>encodeAttributeValue</name></name><argument_list>(<argument><expr>"&amp;amp;"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"&amp;quot;"</expr></argument>, <argument><expr><call><name><name>w</name>.<name>encodeAttributeValue</name></name><argument_list>(<argument><expr>"\""</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"&amp;lt;"</expr></argument>, <argument><expr><call><name><name>w</name>.<name>encodeAttributeValue</name></name><argument_list>(<argument><expr>"&lt;"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"&amp;amp;"</expr></argument>, <argument><expr><call><name><name>w</name>.<name>encodeAttributeValue</name></name><argument_list>(<argument><expr>"&amp;"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><call><name><name>w</name>.<name>encodeAttributeValue</name></name><argument_list>(<argument><expr>"\u0017"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"&amp;#xd;&amp;#xa;&amp;#x9;"</expr></argument>, <argument><expr><call><name><name>w</name>.<name>encodeAttributeValue</name></name><argument_list>(<argument><expr>"\r\n\t"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testAttributeWithWhitespace</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>Document</name></type> <name>d</name> =<init> <expr><call><name><name>DOMUtils</name>.<name>newDocument</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Element</name></type> <name>root</name> =<init> <expr><call><name><name>d</name>.<name>createElement</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>root</name>.<name>setAttribute</name></name><argument_list>(<argument><expr>"foo"</expr></argument>, <argument><expr>"bar\nbaz"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>StringWriter</name></type> <name>sw</name> =<init> <expr>new <call><name>StringWriter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DOMElementWriter</name></type> <name>w</name> =<init> <expr>new <call><name>DOMElementWriter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>w</name>.<name>write</name></name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>sw</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>"  "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"&lt;root foo=\"bar&amp;#xa;baz\" /&gt;" + <name><name>StringUtils</name>.<name>LINE_SEP</name></name></expr></argument>,
                     <argument><expr><call><name><name>sw</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testEncodeData</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"&amp;#20;\"20;&amp;"</expr></argument>, <argument><expr><call><name><name>w</name>.<name>encodedata</name></name><argument_list>(<argument><expr>"&amp;#20;\"20;&amp;"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><call><name><name>w</name>.<name>encodedata</name></name><argument_list>(<argument><expr>"\u0017"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testIsLegalCharacter</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"0x00"</expr></argument>, <argument><expr>!<call><name><name>w</name>.<name>isLegalCharacter</name></name><argument_list>(<argument><expr>'\u0000'</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"0x09"</expr></argument>, <argument><expr><call><name><name>w</name>.<name>isLegalCharacter</name></name><argument_list>(<argument><expr>'\t'</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"0x0A"</expr></argument>, <argument><expr><call><name><name>w</name>.<name>isLegalCharacter</name></name><argument_list>(<argument><expr>'\n'</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"0x0C"</expr></argument>, <argument><expr><call><name><name>w</name>.<name>isLegalCharacter</name></name><argument_list>(<argument><expr>'\r'</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"0x1F"</expr></argument>, <argument><expr>!<call><name><name>w</name>.<name>isLegalCharacter</name></name><argument_list>(<argument><expr>'\u001F'</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"0x20"</expr></argument>, <argument><expr><call><name><name>w</name>.<name>isLegalCharacter</name></name><argument_list>(<argument><expr>'\u0020'</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"0xD7FF"</expr></argument>, <argument><expr><call><name><name>w</name>.<name>isLegalCharacter</name></name><argument_list>(<argument><expr>'\uD7FF'</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"0xD800"</expr></argument>, <argument><expr>!<call><name><name>w</name>.<name>isLegalCharacter</name></name><argument_list>(<argument><expr>'\uD800'</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"0xDFFF"</expr></argument>, <argument><expr>!<call><name><name>w</name>.<name>isLegalCharacter</name></name><argument_list>(<argument><expr>'\uDFFF'</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"0xE000"</expr></argument>, <argument><expr><call><name><name>w</name>.<name>isLegalCharacter</name></name><argument_list>(<argument><expr>'\uE000'</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"0xFFFD"</expr></argument>, <argument><expr><call><name><name>w</name>.<name>isLegalCharacter</name></name><argument_list>(<argument><expr>'\uFFFD'</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"0xFFFE"</expr></argument>, <argument><expr>!<call><name><name>w</name>.<name>isLegalCharacter</name></name><argument_list>(<argument><expr>'\uFFFE'</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testCDATAEndEncoding</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"]&gt;"</expr></argument>, <argument><expr><call><name><name>w</name>.<name>encodedata</name></name><argument_list>(<argument><expr>"]&gt;"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"]]"</expr></argument>, <argument><expr><call><name><name>w</name>.<name>encodedata</name></name><argument_list>(<argument><expr>"]]"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"]]]]&gt;&lt;![CDATA[&gt;"</expr></argument>, <argument><expr><call><name><name>w</name>.<name>encodedata</name></name><argument_list>(<argument><expr>"]]&gt;"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"]]]]&gt;&lt;![CDATA[&gt;A"</expr></argument>, <argument><expr><call><name><name>w</name>.<name>encodedata</name></name><argument_list>(<argument><expr>"]]&gt;A"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"A]]]]&gt;&lt;![CDATA[&gt;"</expr></argument>, <argument><expr><call><name><name>w</name>.<name>encodedata</name></name><argument_list>(<argument><expr>"A]]&gt;"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"A]]]]&gt;&lt;![CDATA[&gt;A"</expr></argument>, <argument><expr><call><name><name>w</name>.<name>encodedata</name></name><argument_list>(<argument><expr>"A]]&gt;A"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"A]]]]&gt;&lt;![CDATA[&gt;B]]]]&gt;&lt;![CDATA[&gt;C"</expr></argument>,
                     <argument><expr><call><name><name>w</name>.<name>encodedata</name></name><argument_list>(<argument><expr>"A]]&gt;B]]&gt;C"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNoAdditionalWhiteSpaceForText</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>Document</name></type> <name>d</name> =<init> <expr><call><name><name>DOMUtils</name>.<name>newDocument</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Element</name></type> <name>root</name> =<init> <expr><call><name><name>d</name>.<name>createElement</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>DOMUtils</name>.<name>appendTextElement</name></name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr>"textElement"</expr></argument>, <argument><expr>"content"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>StringWriter</name></type> <name>sw</name> =<init> <expr>new <call><name>StringWriter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DOMElementWriter</name></type> <name>w</name> =<init> <expr>new <call><name>DOMElementWriter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>w</name>.<name>write</name></name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>sw</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>"  "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"&lt;root&gt;" + <name><name>StringUtils</name>.<name>LINE_SEP</name></name>
                     + "  &lt;textElement&gt;content&lt;/textElement&gt;"
                     + <name><name>StringUtils</name>.<name>LINE_SEP</name></name>
                     + "&lt;/root&gt;" + <name><name>StringUtils</name>.<name>LINE_SEP</name></name></expr></argument>,
                     <argument><expr><call><name><name>sw</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNoAdditionalWhiteSpaceForCDATA</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>Document</name></type> <name>d</name> =<init> <expr><call><name><name>DOMUtils</name>.<name>newDocument</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Element</name></type> <name>root</name> =<init> <expr><call><name><name>d</name>.<name>createElement</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>DOMUtils</name>.<name>appendCDATAElement</name></name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr>"cdataElement"</expr></argument>, <argument><expr>"content"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>StringWriter</name></type> <name>sw</name> =<init> <expr>new <call><name>StringWriter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DOMElementWriter</name></type> <name>w</name> =<init> <expr>new <call><name>DOMElementWriter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>w</name>.<name>write</name></name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>sw</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>"  "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"&lt;root&gt;" + <name><name>StringUtils</name>.<name>LINE_SEP</name></name>
                     + "  &lt;cdataElement&gt;&lt;![CDATA[content]]&gt;&lt;/cdataElement&gt;"
                     + <name><name>StringUtils</name>.<name>LINE_SEP</name></name>
                     + "&lt;/root&gt;" + <name><name>StringUtils</name>.<name>LINE_SEP</name></name></expr></argument>,
                     <argument><expr><call><name><name>sw</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNoAdditionalWhiteSpaceForEmptyElement</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>Document</name></type> <name>d</name> =<init> <expr><call><name><name>DOMUtils</name>.<name>newDocument</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Element</name></type> <name>root</name> =<init> <expr><call><name><name>d</name>.<name>createElement</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>DOMUtils</name>.<name>createChildElement</name></name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr>"emptyElement"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>StringWriter</name></type> <name>sw</name> =<init> <expr>new <call><name>StringWriter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DOMElementWriter</name></type> <name>w</name> =<init> <expr>new <call><name>DOMElementWriter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>w</name>.<name>write</name></name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>sw</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>"  "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"&lt;root&gt;" + <name><name>StringUtils</name>.<name>LINE_SEP</name></name>
                     <comment type="line">//                     + "  &lt;emptyElement&gt;&lt;/emptyElement&gt;"</comment>
                     + "  &lt;emptyElement /&gt;"
                     + <name><name>StringUtils</name>.<name>LINE_SEP</name></name>
                     + "&lt;/root&gt;" + <name><name>StringUtils</name>.<name>LINE_SEP</name></name></expr></argument>,
                     <argument><expr><call><name><name>sw</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNoNSPrefixByDefault</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>Document</name></type> <name>d</name> =<init> <expr><call><name><name>DOMUtils</name>.<name>newDocument</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Element</name></type> <name>root</name> =<init> <expr><call><name><name>d</name>.<name>createElementNS</name></name><argument_list>(<argument><expr>"urn:foo"</expr></argument>, <argument><expr>"root"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>root</name>.<name>setAttributeNS</name></name><argument_list>(<argument><expr>"urn:foo2"</expr></argument>, <argument><expr>"bar"</expr></argument>, <argument><expr>"baz"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>StringWriter</name></type> <name>sw</name> =<init> <expr>new <call><name>StringWriter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DOMElementWriter</name></type> <name>w</name> =<init> <expr>new <call><name>DOMElementWriter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>w</name>.<name>write</name></name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>sw</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>"  "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"&lt;root bar=\"baz\" /&gt;"
                     + <name><name>StringUtils</name>.<name>LINE_SEP</name></name></expr></argument>, <argument><expr><call><name><name>sw</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNSOnElement</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>Document</name></type> <name>d</name> =<init> <expr><call><name><name>DOMUtils</name>.<name>newDocument</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Element</name></type> <name>root</name> =<init> <expr><call><name><name>d</name>.<name>createElementNS</name></name><argument_list>(<argument><expr>"urn:foo"</expr></argument>, <argument><expr>"root"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>root</name>.<name>setAttributeNS</name></name><argument_list>(<argument><expr>"urn:foo2"</expr></argument>, <argument><expr>"bar"</expr></argument>, <argument><expr>"baz"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>StringWriter</name></type> <name>sw</name> =<init> <expr>new <call><name>StringWriter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DOMElementWriter</name></type> <name>w</name> =<init>
            <expr>new <call><name>DOMElementWriter</name><argument_list>(<argument><expr>false</expr></argument>,
                                 <argument><expr><name><name>DOMElementWriter</name>.<name>XmlNamespacePolicy</name>
                                 .<name>ONLY_QUALIFY_ELEMENTS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>w</name>.<name>write</name></name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>sw</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>"  "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"&lt;root bar=\"baz\" xmlns=\"urn:foo\" /&gt;"
                     + <name><name>StringUtils</name>.<name>LINE_SEP</name></name></expr></argument>, <argument><expr><call><name><name>sw</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNSPrefixOnAttribute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>Document</name></type> <name>d</name> =<init> <expr><call><name><name>DOMUtils</name>.<name>newDocument</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Element</name></type> <name>root</name> =<init> <expr><call><name><name>d</name>.<name>createElementNS</name></name><argument_list>(<argument><expr>"urn:foo"</expr></argument>, <argument><expr>"root"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>root</name>.<name>setAttributeNS</name></name><argument_list>(<argument><expr>"urn:foo2"</expr></argument>, <argument><expr>"bar"</expr></argument>, <argument><expr>"baz"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>StringWriter</name></type> <name>sw</name> =<init> <expr>new <call><name>StringWriter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DOMElementWriter</name></type> <name>w</name> =<init>
            <expr>new <call><name>DOMElementWriter</name><argument_list>(<argument><expr>false</expr></argument>,
                                 <argument><expr><name><name>DOMElementWriter</name>.<name>XmlNamespacePolicy</name>
                                 .<name>QUALIFY_ALL</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>w</name>.<name>write</name></name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>sw</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>"  "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"&lt;root ns0:bar=\"baz\" xmlns=\"urn:foo\""
                     + " xmlns:ns0=\"urn:foo2\" /&gt;"
                     + <name><name>StringUtils</name>.<name>LINE_SEP</name></name></expr></argument>, <argument><expr><call><name><name>sw</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNSPrefixOnAttributeEvenWithoutElement</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>Document</name></type> <name>d</name> =<init> <expr><call><name><name>DOMUtils</name>.<name>newDocument</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Element</name></type> <name>root</name> =<init> <expr><call><name><name>d</name>.<name>createElementNS</name></name><argument_list>(<argument><expr>"urn:foo"</expr></argument>, <argument><expr>"root"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>root</name>.<name>setAttributeNS</name></name><argument_list>(<argument><expr>"urn:foo2"</expr></argument>, <argument><expr>"bar"</expr></argument>, <argument><expr>"baz"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>StringWriter</name></type> <name>sw</name> =<init> <expr>new <call><name>StringWriter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DOMElementWriter</name></type> <name>w</name> =<init>
            <expr>new <call><name>DOMElementWriter</name><argument_list>(<argument><expr>false</expr></argument>,
                                 <argument><expr>new <call><name><name>DOMElementWriter</name>.<name>XmlNamespacePolicy</name></name><argument_list>(<argument><expr>false</expr></argument>,
                                                                         <argument><expr>true</expr></argument>)</argument_list></call></expr></argument>
                                 )</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>w</name>.<name>write</name></name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>sw</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>"  "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"&lt;root ns0:bar=\"baz\" xmlns:ns0=\"urn:foo2\" /&gt;"
                     + <name><name>StringUtils</name>.<name>LINE_SEP</name></name></expr></argument>, <argument><expr><call><name><name>sw</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNSGetsReused</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>Document</name></type> <name>d</name> =<init> <expr><call><name><name>DOMUtils</name>.<name>newDocument</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Element</name></type> <name>root</name> =<init> <expr><call><name><name>d</name>.<name>createElementNS</name></name><argument_list>(<argument><expr>"urn:foo"</expr></argument>, <argument><expr>"root"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Element</name></type> <name>child</name> =<init> <expr><call><name><name>d</name>.<name>createElementNS</name></name><argument_list>(<argument><expr>"urn:foo"</expr></argument>, <argument><expr>"child"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>root</name>.<name>appendChild</name></name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>StringWriter</name></type> <name>sw</name> =<init> <expr>new <call><name>StringWriter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DOMElementWriter</name></type> <name>w</name> =<init>
            <expr>new <call><name>DOMElementWriter</name><argument_list>(<argument><expr>false</expr></argument>,
                                 <argument><expr><name><name>DOMElementWriter</name>.<name>XmlNamespacePolicy</name>
                                 .<name>ONLY_QUALIFY_ELEMENTS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>w</name>.<name>write</name></name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>sw</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>"  "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"&lt;root xmlns=\"urn:foo\"&gt;"
                     + <name><name>StringUtils</name>.<name>LINE_SEP</name></name>
                     + "  &lt;child /&gt;"
                     + <name><name>StringUtils</name>.<name>LINE_SEP</name></name>
                     + "&lt;/root&gt;"
                     + <name><name>StringUtils</name>.<name>LINE_SEP</name></name></expr></argument>, <argument><expr><call><name><name>sw</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNSGoesOutOfScope</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>Document</name></type> <name>d</name> =<init> <expr><call><name><name>DOMUtils</name>.<name>newDocument</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Element</name></type> <name>root</name> =<init> <expr><call><name><name>d</name>.<name>createElementNS</name></name><argument_list>(<argument><expr>"urn:foo"</expr></argument>, <argument><expr>"root"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Element</name></type> <name>child</name> =<init> <expr><call><name><name>d</name>.<name>createElementNS</name></name><argument_list>(<argument><expr>"urn:foo2"</expr></argument>, <argument><expr>"child"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>root</name>.<name>appendChild</name></name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Element</name></type> <name>child2</name> =<init> <expr><call><name><name>d</name>.<name>createElementNS</name></name><argument_list>(<argument><expr>"urn:foo2"</expr></argument>, <argument><expr>"child"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>root</name>.<name>appendChild</name></name><argument_list>(<argument><expr><name>child2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Element</name></type> <name>grandChild</name> =<init> <expr><call><name><name>d</name>.<name>createElementNS</name></name><argument_list>(<argument><expr>"urn:foo2"</expr></argument>, <argument><expr>"grandchild"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>child2</name>.<name>appendChild</name></name><argument_list>(<argument><expr><name>grandChild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Element</name></type> <name>child3</name> =<init> <expr><call><name><name>d</name>.<name>createElementNS</name></name><argument_list>(<argument><expr>"urn:foo2"</expr></argument>, <argument><expr>"child"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>root</name>.<name>appendChild</name></name><argument_list>(<argument><expr><name>child3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>StringWriter</name></type> <name>sw</name> =<init> <expr>new <call><name>StringWriter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DOMElementWriter</name></type> <name>w</name> =<init>
            <expr>new <call><name>DOMElementWriter</name><argument_list>(<argument><expr>false</expr></argument>,
                                 <argument><expr><name><name>DOMElementWriter</name>.<name>XmlNamespacePolicy</name>
                                 .<name>ONLY_QUALIFY_ELEMENTS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>w</name>.<name>write</name></name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>sw</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>"  "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"&lt;root xmlns=\"urn:foo\"&gt;"
                     + <name><name>StringUtils</name>.<name>LINE_SEP</name></name>
                     + "  &lt;ns0:child xmlns:ns0=\"urn:foo2\" /&gt;"
                     + <name><name>StringUtils</name>.<name>LINE_SEP</name></name>
                     + "  &lt;ns1:child xmlns:ns1=\"urn:foo2\"&gt;"
                     + <name><name>StringUtils</name>.<name>LINE_SEP</name></name>
                     + "    &lt;ns1:grandchild /&gt;"
                     + <name><name>StringUtils</name>.<name>LINE_SEP</name></name>
                     + "  &lt;/ns1:child&gt;"
                     + <name><name>StringUtils</name>.<name>LINE_SEP</name></name>
                     + "  &lt;ns2:child xmlns:ns2=\"urn:foo2\" /&gt;"
                     + <name><name>StringUtils</name>.<name>LINE_SEP</name></name>
                      + "&lt;/root&gt;"
                     + <name><name>StringUtils</name>.<name>LINE_SEP</name></name></expr></argument>, <argument><expr><call><name><name>sw</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
