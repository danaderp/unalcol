<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\sos\SOSCheckin.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>sos</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Commandline</name></name>;</import>

<comment type="javadoc">/**
 * Commits and unlocks files in Visual SourceSafe via a SourceOffSite server.
 *
 * @ant.task name="soscheckin" category="scm"
 */</comment>
<class><specifier>public</specifier> class <name>SOSCheckin</name> <super><extends>extends <name>SOS</name></extends></super> <block>{

    <comment type="javadoc">/**
     * The filename to act upon.
     * If no file is specified then the task
     * acts upon the project.
     *
     * @param  filename  The new file value
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>setFile</name><parameter_list>(<param><decl><type><name>String</name></type> <name>filename</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name>.<name>setInternalFilename</name></name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Flag to recursively apply the action. Defaults to false.
     *
     * @param  recursive  True for recursive operation.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRecursive</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>recursive</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name>.<name>setInternalRecursive</name></name><argument_list>(<argument><expr><name>recursive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The comment to apply to all files being labelled.
     *
     * @param  comment  The new comment value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setComment</name><parameter_list>(<param><decl><type><name>String</name></type> <name>comment</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name>.<name>setInternalComment</name></name><argument_list>(<argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Build the command line. &lt;p&gt;
     *
     * CheckInFile required parameters: -server -name -password -database -project
     *  -file&lt;br&gt;
     * CheckInFile optional parameters: -workdir -log -verbose -nocache -nocompression
     *  -soshome&lt;br&gt;
     * CheckInProject required parameters: -server -name -password -database
     *  -project&lt;br&gt;
     * CheckInProject optional parameters: workdir -recursive -log -verbose
     *  -nocache -nocompression -soshome&lt;br&gt;
     *
     * @return    Commandline the generated command to be executed
     */</comment>
    <function><type><specifier>protected</specifier> <name>Commandline</name></type> <name>buildCmdLine</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>commandLine</name> = new <call><name>Commandline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// If we find a "file" attribute then act on a file otherwise act on a project</comment>
        <if>if <condition>(<expr><call><name>getFilename</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <comment type="line">// add -command CheckInFile to the commandline</comment>
            <expr_stmt><expr><call><name><name>commandLine</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name><name>SOSCmd</name>.<name>FLAG_COMMAND</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>commandLine</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name><name>SOSCmd</name>.<name>COMMAND_CHECKIN_FILE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// add -file xxxxx to the commandline</comment>
            <expr_stmt><expr><call><name><name>commandLine</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name><name>SOSCmd</name>.<name>FLAG_FILE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>commandLine</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name>getFilename</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <comment type="line">// add -command CheckInProject to the commandline</comment>
            <expr_stmt><expr><call><name><name>commandLine</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name><name>SOSCmd</name>.<name>FLAG_COMMAND</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>commandLine</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name><name>SOSCmd</name>.<name>COMMAND_CHECKIN_PROJECT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// look for a recursive option</comment>
            <expr_stmt><expr><call><name><name>commandLine</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name>getRecursive</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <expr_stmt><expr><call><name>getRequiredAttributes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>getOptionalAttributes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Look for a comment</comment>
        <if>if <condition>(<expr><call><name>getComment</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>commandLine</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name><name>SOSCmd</name>.<name>FLAG_COMMENT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>commandLine</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name>getComment</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>commandLine</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
