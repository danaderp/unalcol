<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\types\MapperTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>Arrays</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>junit</name>.<name>framework</name>.<name>TestCase</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildFileTest</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>ChainedMapper</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileNameMapper</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FlatFileNameMapper</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>GlobPatternMapper</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>MergingMapper</name></name>;</import>

<comment type="javadoc">/**
 * JUnit 3 testcases for org.apache.tools.ant.types.Mapper.
 *
 */</comment>

<class><specifier>public</specifier> class <name>MapperTest</name> <super><extends>extends <name>TestCase</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>Project</name></type> <name>project</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>MapperTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>project</name> = new <call><name>Project</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>setBasedir</name></name><argument_list>(<argument><expr>"."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testEmptyElementIfIsReference</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Mapper</name></type> <name>m</name> =<init> <expr>new <call><name>Mapper</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>m</name>.<name>setFrom</name></name><argument_list>(<argument><expr>"*.java"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>m</name>.<name>setRefid</name></name><argument_list>(<argument><expr>new <call><name>Reference</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr>"dummyref"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Can add reference to Mapper with from attribute set"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"You must not specify more than one attribute when using refid"</expr></argument>,
                         <argument><expr><call><name><name>be</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <expr_stmt><expr><name>m</name> = new <call><name>Mapper</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>m</name>.<name>setRefid</name></name><argument_list>(<argument><expr>new <call><name>Reference</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr>"dummyref"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>m</name>.<name>setFrom</name></name><argument_list>(<argument><expr>"*.java"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Can set from in Mapper that is a reference."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"You must not specify more than one attribute when using refid"</expr></argument>,
                         <argument><expr><call><name><name>be</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <expr_stmt><expr><name>m</name> = new <call><name>Mapper</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>m</name>.<name>setRefid</name></name><argument_list>(<argument><expr>new <call><name>Reference</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr>"dummyref"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>m</name>.<name>setTo</name></name><argument_list>(<argument><expr>"*.java"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Can set to in Mapper that is a reference."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"You must not specify more than one attribute when using refid"</expr></argument>,
                         <argument><expr><call><name><name>be</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <try>try <block>{
            <decl_stmt><decl><type><name><name>Mapper</name>.<name>MapperType</name></name></type> <name>mt</name> =<init> <expr>new <call><name><name>Mapper</name>.<name>MapperType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>mt</name>.<name>setValue</name></name><argument_list>(<argument><expr>"glob"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>m</name>.<name>setType</name></name><argument_list>(<argument><expr><name>mt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Can set type in Mapper that is a reference."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"You must not specify more than one attribute when using refid"</expr></argument>,
                         <argument><expr><call><name><name>be</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testCircularReferenceCheck</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Mapper</name></type> <name>m</name> =<init> <expr>new <call><name>Mapper</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>addReference</name></name><argument_list>(<argument><expr>"dummy"</expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>m</name>.<name>setRefid</name></name><argument_list>(<argument><expr>new <call><name>Reference</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr>"dummy"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>m</name>.<name>getImplementation</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Can make Mapper a Reference to itself."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"This data type contains a circular reference."</expr></argument>,
                         <argument><expr><call><name><name>be</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <comment type="line">// dummy1 --&gt; dummy2 --&gt; dummy3 --&gt; dummy1</comment>
        <decl_stmt><decl><type><name>Mapper</name></type> <name>m1</name> =<init> <expr>new <call><name>Mapper</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>addReference</name></name><argument_list>(<argument><expr>"dummy1"</expr></argument>, <argument><expr><name>m1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>m1</name>.<name>setRefid</name></name><argument_list>(<argument><expr>new <call><name>Reference</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr>"dummy2"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Mapper</name></type> <name>m2</name> =<init> <expr>new <call><name>Mapper</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>addReference</name></name><argument_list>(<argument><expr>"dummy2"</expr></argument>, <argument><expr><name>m2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>m2</name>.<name>setRefid</name></name><argument_list>(<argument><expr>new <call><name>Reference</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr>"dummy3"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Mapper</name></type> <name>m3</name> =<init> <expr>new <call><name>Mapper</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>addReference</name></name><argument_list>(<argument><expr>"dummy3"</expr></argument>, <argument><expr><name>m3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>m3</name>.<name>setRefid</name></name><argument_list>(<argument><expr>new <call><name>Reference</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr>"dummy1"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>m1</name>.<name>getImplementation</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Can make circular reference."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"This data type contains a circular reference."</expr></argument>,
                         <argument><expr><call><name><name>be</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <comment type="line">// dummy1 --&gt; dummy2 --&gt; dummy3</comment>
        <comment type="line">// (which holds a glob mapper from "*.java" to "*.class"</comment>
        <expr_stmt><expr><name>m1</name> = new <call><name>Mapper</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>addReference</name></name><argument_list>(<argument><expr>"dummy1"</expr></argument>, <argument><expr><name>m1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>m1</name>.<name>setRefid</name></name><argument_list>(<argument><expr>new <call><name>Reference</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr>"dummy2"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>m2</name> = new <call><name>Mapper</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>addReference</name></name><argument_list>(<argument><expr>"dummy2"</expr></argument>, <argument><expr><name>m2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>m2</name>.<name>setRefid</name></name><argument_list>(<argument><expr>new <call><name>Reference</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr>"dummy3"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>m3</name> = new <call><name>Mapper</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>addReference</name></name><argument_list>(<argument><expr>"dummy3"</expr></argument>, <argument><expr><name>m3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>Mapper</name>.<name>MapperType</name></name></type> <name>mt</name> =<init> <expr>new <call><name><name>Mapper</name>.<name>MapperType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>mt</name>.<name>setValue</name></name><argument_list>(<argument><expr>"glob"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>m3</name>.<name>setType</name></name><argument_list>(<argument><expr><name>mt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>m3</name>.<name>setFrom</name></name><argument_list>(<argument><expr>"*.java"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>m3</name>.<name>setTo</name></name><argument_list>(<argument><expr>"*.class"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>FileNameMapper</name></type> <name>fmm</name> =<init> <expr><call><name><name>m1</name>.<name>getImplementation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"should be glob"</expr></argument>, <argument><expr><name>fmm</name> <name>instanceof</name> <name>GlobPatternMapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>result</name> =<init> <expr><call><name><name>fmm</name>.<name>mapFileName</name></name><argument_list>(<argument><expr>"a.java"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"a.java should match"</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name><name>result</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"a.class"</expr></argument>, <argument><expr><name><name>result</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNested</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Mapper</name></type> <name>mapper1</name> =<init> <expr>new <call><name>Mapper</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Mapper</name>.<name>MapperType</name></name></type> <name>mt</name> =<init> <expr>new <call><name><name>Mapper</name>.<name>MapperType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>mt</name>.<name>setValue</name></name><argument_list>(<argument><expr>"glob"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mapper1</name>.<name>setType</name></name><argument_list>(<argument><expr><name>mt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mapper1</name>.<name>setFrom</name></name><argument_list>(<argument><expr>"from*"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mapper1</name>.<name>setTo</name></name><argument_list>(<argument><expr>"to*"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//mix element types</comment>
        <decl_stmt><decl><type><name>FileNameMapper</name></type> <name>mapper2</name> =<init> <expr>new <call><name>FlatFileNameMapper</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FileNameMapper</name></type> <name>mapper3</name> =<init> <expr>new <call><name>MergingMapper</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>mapper3</name>.<name>setTo</name></name><argument_list>(<argument><expr>"mergefile"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Mapper</name></type> <name>container</name> =<init> <expr>new <call><name>Mapper</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>container</name>.<name>addConfiguredMapper</name></name><argument_list>(<argument><expr><name>mapper1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>container</name>.<name>add</name></name><argument_list>(<argument><expr><name>mapper2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>container</name>.<name>add</name></name><argument_list>(<argument><expr><name>mapper3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>FileNameMapper</name></type> <name>fileNameMapper</name> =<init> <expr><call><name><name>container</name>.<name>getImplementation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>targets</name> =<init> <expr><call><name><name>fileNameMapper</name>.<name>mapFileName</name></name><argument_list>(<argument><expr>"fromfilename"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr>"no filenames mapped"</expr></argument>, <argument><expr><name>targets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"wrong number of filenames mapped"</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr><name><name>targets</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>List</name></type> <name>list</name> =<init> <expr><call><name><name>Arrays</name>.<name>asList</name></name><argument_list>(<argument><expr><name>targets</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"cannot find expected target \"tofilename\""</expr></argument>,
            <argument><expr><call><name><name>list</name>.<name>contains</name></name><argument_list>(<argument><expr>"tofilename"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"cannot find expected target \"fromfilename\""</expr></argument>,
            <argument><expr><call><name><name>list</name>.<name>contains</name></name><argument_list>(<argument><expr>"fromfilename"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"cannot find expected target \"mergefile\""</expr></argument>,
            <argument><expr><call><name><name>list</name>.<name>contains</name></name><argument_list>(<argument><expr>"mergefile"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testChained</name><parameter_list>()</parameter_list> <block>{

        <comment type="line">// a --&gt; b --&gt; c --- def</comment>
        <comment type="line">//               \-- ghi</comment>

        <decl_stmt><decl><type><name>FileNameMapper</name></type> <name>mapperAB</name> =<init> <expr>new <call><name>GlobPatternMapper</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>mapperAB</name>.<name>setFrom</name></name><argument_list>(<argument><expr>"a"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mapperAB</name>.<name>setTo</name></name><argument_list>(<argument><expr>"b"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>FileNameMapper</name></type> <name>mapperBC</name> =<init> <expr>new <call><name>GlobPatternMapper</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>mapperBC</name>.<name>setFrom</name></name><argument_list>(<argument><expr>"b"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mapperBC</name>.<name>setTo</name></name><argument_list>(<argument><expr>"c"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//implicit composite</comment>
        <decl_stmt><decl><type><name>Mapper</name></type> <name>mapperCX</name> =<init> <expr>new <call><name>Mapper</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>FileNameMapper</name></type> <name>mapperDEF</name> =<init> <expr>new <call><name>GlobPatternMapper</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>mapperDEF</name>.<name>setFrom</name></name><argument_list>(<argument><expr>"c"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mapperDEF</name>.<name>setTo</name></name><argument_list>(<argument><expr>"def"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>FileNameMapper</name></type> <name>mapperGHI</name> =<init> <expr>new <call><name>GlobPatternMapper</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>mapperGHI</name>.<name>setFrom</name></name><argument_list>(<argument><expr>"c"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mapperGHI</name>.<name>setTo</name></name><argument_list>(<argument><expr>"ghi"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>mapperCX</name>.<name>add</name></name><argument_list>(<argument><expr><name>mapperDEF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mapperCX</name>.<name>add</name></name><argument_list>(<argument><expr><name>mapperGHI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Mapper</name></type> <name>chained</name> =<init> <expr>new <call><name>Mapper</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>chained</name>.<name>setClassname</name></name><argument_list>(<argument><expr><name><name>ChainedMapper</name>.<name><name/></name></name>class.<call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>chained</name>.<name>add</name></name><argument_list>(<argument><expr><name>mapperAB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>chained</name>.<name>add</name></name><argument_list>(<argument><expr><name>mapperBC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>chained</name>.<name>addConfiguredMapper</name></name><argument_list>(<argument><expr><name>mapperCX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>FileNameMapper</name></type> <name>fileNameMapper</name> =<init> <expr><call><name><name>chained</name>.<name>getImplementation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>targets</name> =<init> <expr><call><name><name>fileNameMapper</name>.<name>mapFileName</name></name><argument_list>(<argument><expr>"a"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr>"no filenames mapped"</expr></argument>, <argument><expr><name>targets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"wrong number of filenames mapped"</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name><name>targets</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>List</name></type> <name>list</name> =<init> <expr><call><name><name>Arrays</name>.<name>asList</name></name><argument_list>(<argument><expr><name>targets</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"cannot find expected target \"def\""</expr></argument>, <argument><expr><call><name><name>list</name>.<name>contains</name></name><argument_list>(<argument><expr>"def"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"cannot find expected target \"ghi\""</expr></argument>, <argument><expr><call><name><name>list</name>.<name>contains</name></name><argument_list>(<argument><expr>"ghi"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testCopyTaskWithTwoFilesets</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>TaskdefForCopyTest</name></type> <name>t</name> =<init> <expr>new <call><name>TaskdefForCopyTest</name><argument_list>(<argument><expr>"test1"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>t</name>.<name>setUp</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>t</name>.<name>test1</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>t</name>.<name>tearDown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <class><specifier>private</specifier> class <name>TaskdefForCopyTest</name> <super><extends>extends <name>BuildFileTest</name></extends></super> <block>{
        <constructor><name>TaskdefForCopyTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr>"src/etc/testcases/types/mapper.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"cleanup"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>test1</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"test1"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
