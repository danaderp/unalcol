<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\util\ReaderInputStreamTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name></name>.*;</import>

<import>import <name><name>junit</name>.<name>framework</name>.<name>TestCase</name></name>;</import>

<comment type="javadoc">/**
 * Test for ReaderInputStream
 */</comment>
<class><specifier>public</specifier> class <name>ReaderInputStreamTest</name> <super><extends>extends <name>TestCase</name></extends></super> <block>{
    <constructor><specifier>public</specifier> <name>ReaderInputStreamTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testSimple</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>compareBytes</name><argument_list>(<argument><expr>"abc"</expr></argument>, <argument><expr>"utf-8"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testSimple16</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>compareBytes</name><argument_list>(<argument><expr>"a"</expr></argument>, <argument><expr>"utf-16"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testSimpleAbc16</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <comment type="line">// THIS WILL FAIL.</comment>
        <comment type="line">//compareBytes("abc", "utf-16");</comment>
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>bytes</name> =<init> <expr>new <name><name>byte</name><index>[<expr>40</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>pos</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ReaderInputStream</name></type> <name>r</name> =<init> <expr>new <call><name>ReaderInputStream</name><argument_list>(
            <argument><expr>new <call><name>StringReader</name><argument_list>(<argument><expr>"abc"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"utf-16"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr>true</expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>res</name> =<init> <expr><call><name><name>r</name>.<name>read</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>res</name> == -1</expr>)</condition><then> <block>{
                <break>break;</break>
            }</block></then></if>
            <expr_stmt><expr><name><name>bytes</name><index>[<expr><name>pos</name>++</expr>]</index></name> = (<name>byte</name>) <name>res</name></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><name>bytes</name> = "abc".<call><name>getBytes</name><argument_list>(<argument><expr>"utf-16"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//        String n = new String(bytes, 0, pos, "utf-16");</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>n</name> =<init> <expr>new <call><name>String</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>bytes</name>.<name>length</name></name></expr></argument>, <argument><expr>"utf-16"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testReadZero</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>ReaderInputStream</name></type> <name>r</name> =<init> <expr>new <call><name>ReaderInputStream</name><argument_list>(
            <argument><expr>new <call><name>StringReader</name><argument_list>(<argument><expr>"abc"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>bytes</name> =<init> <expr>new <name><name>byte</name><index>[<expr>30</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <comment type="line">// First read in zero bytes</comment>
        <expr_stmt><expr><call><name><name>r</name>.<name>read</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Now read in the string</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>readin</name> =<init> <expr><call><name><name>r</name>.<name>read</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// Make sure that the counts are the same</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"abc".<call><name>getBytes</name><argument_list>()</argument_list></call>.<name>length</name></expr></argument>, <argument><expr><name>readin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testPreample</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>bytes</name> =<init> <expr>"".<call><name>getBytes</name><argument_list>(<argument><expr>"utf-16"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Preample len is " + <name><name>bytes</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testIso88591ToUtf8</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>InputStreamReader</name></type> <name>fin</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ReaderInputStream</name></type> <name>r</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FileInputStream</name></type> <name>utf8</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>fin</name> = new <call><name>InputStreamReader</name><argument_list>(<argument><expr>new <call><name>FileInputStream</name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"src/tests/antunit/taskdefs/exec/input/iso8859-1"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                        <argument><expr>"ISO8859_1"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>r</name> = new <call><name>ReaderInputStream</name><argument_list>(<argument><expr><name>fin</name></expr></argument>, <argument><expr>"UTF8"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>actualOS</name> =<init> <expr>new <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>b</name> =<init> <expr><call><name><name>r</name>.<name>read</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>b</name> &gt; -1</expr>)</condition> <block>{
                <expr_stmt><expr><call><name><name>actualOS</name>.<name>write</name></name><argument_list>(<argument><expr>(<name>byte</name>) <name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>b</name> = <call><name><name>r</name>.<name>read</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></while>

            <expr_stmt><expr><name>utf8</name> = new <call><name>FileInputStream</name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"src/tests/antunit/taskdefs/exec/expected/utf-8"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>expectedOS</name> =<init> <expr>new <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>b</name> = <call><name><name>utf8</name>.<name>read</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <while>while <condition>(<expr><name>b</name> &gt; -1</expr>)</condition> <block>{
                <expr_stmt><expr><call><name><name>expectedOS</name>.<name>write</name></name><argument_list>(<argument><expr>(<name>byte</name>) <name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>b</name> = <call><name><name>utf8</name>.<name>read</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></while>

            <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>expected</name> =<init> <expr><call><name><name>expectedOS</name>.<name>toByteArray</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>actual</name> =<init> <expr><call><name><name>actualOS</name>.<name>toByteArray</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"length"</expr></argument>, <argument><expr><name><name>expected</name>.<name>length</name></name></expr></argument>, <argument><expr><name><name>actual</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>actual</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"byte " + <name>i</name></expr></argument>, <argument><expr><name><name>expected</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>actual</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>fin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>utf8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>compareBytes</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s</name></decl></param>, <param><decl><type><name>String</name></type> <name>encoding</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>expected</name> =<init> <expr><call><name><name>s</name>.<name>getBytes</name></name><argument_list>(<argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>ReaderInputStream</name></type> <name>r</name> =<init> <expr>new <call><name>ReaderInputStream</name><argument_list>(
            <argument><expr>new <call><name>StringReader</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>expected</name>.<name>length</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>expect</name> =<init> <expr><name><name>expected</name><index>[<expr><name>i</name></expr>]</index></name> &amp; 0xFF</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>read</name> =<init> <expr><call><name><name>r</name>.<name>read</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>expect</name> != <name>read</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Mismatch in ReaderInputStream at index " + <name>i</name>
                     + " expecting " + <name>expect</name> + " got " + <name>read</name> + " for string "
                     + <name>s</name> + " with encoding " + <name>encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <if>if <condition>(<expr><call><name><name>r</name>.<name>read</name></name><argument_list>()</argument_list></call> != -1</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Mismatch in ReaderInputStream - EOF not seen for string "
                 + <name>s</name> + " with encoding " + <name>encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>
}</block></class>
</unit>
