<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\taskdefs\optional\junit\XMLFormatterWithCDATAOnSystemOut.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>junit</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileReader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildFileTest</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>

<class><specifier>public</specifier> class <name>XMLFormatterWithCDATAOnSystemOut</name> <super><extends>extends <name>BuildFileTest</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>DIR</name> =<init> <expr>"src/etc/testcases/taskdefs/optional/junit"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>REPORT</name> =<init>
        <expr>"TEST-" + <name><name>XMLFormatterWithCDATAOnSystemOut</name>.<name><name/></name></name>class.<call><name>getName</name><argument_list>()</argument_list></call> + ".xml"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>TESTDATA</name> =<init>
        <expr>"&lt;ERROR&gt;" +
        "&lt;![CDATA[&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;" +
        "  &lt;RESPONSE&gt;" +
        "    &lt;GDS/&gt;" +
        "    &lt;ERROR&gt;" +
        "      &lt;ID/&gt;" +
        "      &lt;MESSAGE/&gt;" +
        "      &lt;REQUEST_TYPE/&gt;" +
        "      &lt;RESEND/&gt;" +
        "      &lt;RAW_RESPONSE/&gt;" +
        "    &lt;/ERROR&gt;" +
        "  &lt;/RESPONSE&gt;" +
        "]]&gt;" +
        "&lt;/ERROR&gt;"</expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>XMLFormatterWithCDATAOnSystemOut</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testOutput</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><name>TESTDATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testBuildfile</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr><name>DIR</name> + "/cdataoutput.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getProperty</name><argument_list>(<argument><expr>"cdata.inner"</expr></argument>)</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
            <comment type="line">// avoid endless loop</comment>
            <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"run-junit"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>File</name></type> <name>f</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>resolveFile</name><argument_list>(<argument><expr><name>REPORT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>FileReader</name></type> <name>reader</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <try>try <block>{
                <expr_stmt><expr><name>reader</name> = new <call><name>FileReader</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>content</name> =<init> <expr><call><name><name>FileUtils</name>.<name>readFully</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>content</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"&lt;/RESPONSE&gt;&amp;#x5d;&amp;#x5d;&amp;gt;"
                                           + "&lt;/ERROR&gt;"</expr></argument>)</argument_list></call> &gt; 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <finally>finally <block>{
                <if>if <condition>(<expr><name>reader</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>reader</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><call><name><name>f</name>.<name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></finally></try>
        }</block></then></if>
    }</block></function>

}</block></class>
</unit>
