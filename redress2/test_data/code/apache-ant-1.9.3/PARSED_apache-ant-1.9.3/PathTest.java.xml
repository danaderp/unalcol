<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\types\PathTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Locale</name></name>;</import>

<import>import <name><name>junit</name>.<name>framework</name>.<name>TestCase</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>condition</name>.<name>Os</name></name>;</import>

<comment type="javadoc">/**
 * JUnit 3 testcases for org.apache.tools.ant.types.Path
 *
 */</comment>

<class><specifier>public</specifier> class <name>PathTest</name> <super><extends>extends <name>TestCase</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isUnixStyle</name> =<init> <expr><name><name>File</name>.<name>pathSeparatorChar</name></name> == ':'</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isNetWare</name> =<init> <expr><call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr>"netware"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Project</name></type> <name>project</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>PathTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>project</name> = new <call><name>Project</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>setBasedir</name></name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// actually tests constructor as well as setPath</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testConstructorUnixStyle</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Path</name></type> <name>p</name> =<init> <expr>new <call><name>Path</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr>"/a:/b"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>l</name> =<init> <expr><call><name><name>p</name>.<name>list</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"two items, Unix style"</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name><name>l</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>isUnixStyle</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"/a"</expr></argument>, <argument><expr><name><name>l</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"/b"</expr></argument>, <argument><expr><name><name>l</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><name>isNetWare</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"\\a"</expr></argument>, <argument><expr><name><name>l</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"\\b"</expr></argument>, <argument><expr><name><name>l</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>base</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name><name>File</name>.<name>separator</name></name></expr></argument>)</argument_list></call>.<call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>base</name> + "a"</expr></argument>, <argument><expr><name><name>l</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>base</name> + "b"</expr></argument>, <argument><expr><name><name>l</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if></else></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testRelativePathUnixStyle</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>project</name>.<name>setBasedir</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"src/etc"</expr></argument>)</argument_list></call>.<call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Path</name></type> <name>p</name> =<init> <expr>new <call><name>Path</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr>"..:testcases"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>l</name> =<init> <expr><call><name><name>p</name>.<name>list</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"two items, Unix style"</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name><name>l</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>isUnixStyle</name></expr>)</condition><then> <block>{
           <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"test resolved relative to src/etc"</expr></argument>,
                 <argument><expr><name><name>l</name><index>[<expr>0</expr>]</index></name>.<call><name>endsWith</name><argument_list>(<argument><expr>"/src"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"test resolved relative to src/etc"</expr></argument>,
                 <argument><expr><name><name>l</name><index>[<expr>1</expr>]</index></name>.<call><name>endsWith</name><argument_list>(<argument><expr>"/src/etc/testcases"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><name>isNetWare</name></expr>)</condition><then> <block>{
           <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"test resolved relative to src/etc"</expr></argument>,
                 <argument><expr><name><name>l</name><index>[<expr>0</expr>]</index></name>.<call><name>endsWith</name><argument_list>(<argument><expr>"\\src"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"test resolved relative to src/etc"</expr></argument>,
                 <argument><expr><name><name>l</name><index>[<expr>1</expr>]</index></name>.<call><name>endsWith</name><argument_list>(<argument><expr>"\\src\\etc\\testcases"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
           <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"test resolved relative to src/etc"</expr></argument>,
                 <argument><expr><name><name>l</name><index>[<expr>0</expr>]</index></name>.<call><name>endsWith</name><argument_list>(<argument><expr>"\\src"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"test resolved relative to src/etc"</expr></argument>,
                 <argument><expr><name><name>l</name><index>[<expr>1</expr>]</index></name>.<call><name>endsWith</name><argument_list>(<argument><expr>"\\src\\etc\\testcases"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if></else></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testConstructorWindowsStyle</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Path</name></type> <name>p</name> =<init> <expr>new <call><name>Path</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr>"\\a;\\b"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>l</name> =<init> <expr><call><name><name>p</name>.<name>list</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"two items, DOS style"</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name><name>l</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>isUnixStyle</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"/a"</expr></argument>, <argument><expr><name><name>l</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"/b"</expr></argument>, <argument><expr><name><name>l</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><name>isNetWare</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"\\a"</expr></argument>, <argument><expr><name><name>l</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"\\b"</expr></argument>, <argument><expr><name><name>l</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>base</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name><name>File</name>.<name>separator</name></name></expr></argument>)</argument_list></call>.<call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>base</name> + "a"</expr></argument>, <argument><expr><name><name>l</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>base</name> + "b"</expr></argument>, <argument><expr><name><name>l</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if></else></if>

        <expr_stmt><expr><name>p</name> = new <call><name>Path</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr>"c:\\test"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>l</name> = <call><name><name>p</name>.<name>list</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>isUnixStyle</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"no drives on Unix"</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name><name>l</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"c resolved relative to project\'s basedir"</expr></argument>,
                   <argument><expr><name><name>l</name><index>[<expr>0</expr>]</index></name>.<call><name>endsWith</name><argument_list>(<argument><expr>"/c"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"/test"</expr></argument>, <argument><expr><name><name>l</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><name>isNetWare</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"volumes on NetWare"</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name><name>l</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"c:\\test"</expr></argument>, <argument><expr><name><name>l</name><index>[<expr>0</expr>]</index></name>.<call><name>toLowerCase</name><argument_list>(<argument><expr><name><name>Locale</name>.<name>US</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"drives on DOS"</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name><name>l</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"c:\\test"</expr></argument>, <argument><expr><name><name>l</name><index>[<expr>0</expr>]</index></name>.<call><name>toLowerCase</name><argument_list>(<argument><expr><name><name>Locale</name>.<name>US</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if></else></if>

        <expr_stmt><expr><name>p</name> = new <call><name>Path</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr>"c:\\test;d:\\programs"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>l</name> = <call><name><name>p</name>.<name>list</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>isUnixStyle</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"no drives on Unix"</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><name><name>l</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"c resolved relative to project\'s basedir"</expr></argument>,
                   <argument><expr><name><name>l</name><index>[<expr>0</expr>]</index></name>.<call><name>endsWith</name><argument_list>(<argument><expr>"/c"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"/test"</expr></argument>, <argument><expr><name><name>l</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"d resolved relative to project\'s basedir"</expr></argument>,
                   <argument><expr><name><name>l</name><index>[<expr>2</expr>]</index></name>.<call><name>endsWith</name><argument_list>(<argument><expr>"/d"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"/programs"</expr></argument>, <argument><expr><name><name>l</name><index>[<expr>3</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><name>isNetWare</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"volumes on NetWare"</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name><name>l</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"c:\\test"</expr></argument>, <argument><expr><name><name>l</name><index>[<expr>0</expr>]</index></name>.<call><name>toLowerCase</name><argument_list>(<argument><expr><name><name>Locale</name>.<name>US</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"d:\\programs"</expr></argument>, <argument><expr><name><name>l</name><index>[<expr>1</expr>]</index></name>.<call><name>toLowerCase</name><argument_list>(<argument><expr><name><name>Locale</name>.<name>US</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"drives on DOS"</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name><name>l</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"c:\\test"</expr></argument>, <argument><expr><name><name>l</name><index>[<expr>0</expr>]</index></name>.<call><name>toLowerCase</name><argument_list>(<argument><expr><name><name>Locale</name>.<name>US</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"d:\\programs"</expr></argument>, <argument><expr><name><name>l</name><index>[<expr>1</expr>]</index></name>.<call><name>toLowerCase</name><argument_list>(<argument><expr><name><name>Locale</name>.<name>US</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if></else></if>

        <expr_stmt><expr><name>p</name> = new <call><name>Path</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr>"c:/test"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>l</name> = <call><name><name>p</name>.<name>list</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>isUnixStyle</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"no drives on Unix"</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name><name>l</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"c resolved relative to project\'s basedir"</expr></argument>,
                   <argument><expr><name><name>l</name><index>[<expr>0</expr>]</index></name>.<call><name>endsWith</name><argument_list>(<argument><expr>"/c"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"/test"</expr></argument>, <argument><expr><name><name>l</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><name>isNetWare</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"volumes on NetWare"</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name><name>l</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"c:\\test"</expr></argument>, <argument><expr><name><name>l</name><index>[<expr>0</expr>]</index></name>.<call><name>toLowerCase</name><argument_list>(<argument><expr><name><name>Locale</name>.<name>US</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"drives on DOS"</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name><name>l</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"c:\\test"</expr></argument>, <argument><expr><name><name>l</name><index>[<expr>0</expr>]</index></name>.<call><name>toLowerCase</name><argument_list>(<argument><expr><name><name>Locale</name>.<name>US</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if></else></if>

        <expr_stmt><expr><name>p</name> = new <call><name>Path</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr>"c:/test;d:/programs"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>l</name> = <call><name><name>p</name>.<name>list</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>isUnixStyle</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"no drives on Unix"</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><name><name>l</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"c resolved relative to project\'s basedir"</expr></argument>,
                   <argument><expr><name><name>l</name><index>[<expr>0</expr>]</index></name>.<call><name>endsWith</name><argument_list>(<argument><expr>"/c"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"/test"</expr></argument>, <argument><expr><name><name>l</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"d resolved relative to project\'s basedir"</expr></argument>,
                   <argument><expr><name><name>l</name><index>[<expr>2</expr>]</index></name>.<call><name>endsWith</name><argument_list>(<argument><expr>"/d"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"/programs"</expr></argument>, <argument><expr><name><name>l</name><index>[<expr>3</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><name>isNetWare</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"volumes on NetWare"</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name><name>l</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"c:\\test"</expr></argument>, <argument><expr><name><name>l</name><index>[<expr>0</expr>]</index></name>.<call><name>toLowerCase</name><argument_list>(<argument><expr><name><name>Locale</name>.<name>US</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"d:\\programs"</expr></argument>, <argument><expr><name><name>l</name><index>[<expr>1</expr>]</index></name>.<call><name>toLowerCase</name><argument_list>(<argument><expr><name><name>Locale</name>.<name>US</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"drives on DOS"</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name><name>l</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"c:\\test"</expr></argument>, <argument><expr><name><name>l</name><index>[<expr>0</expr>]</index></name>.<call><name>toLowerCase</name><argument_list>(<argument><expr><name><name>Locale</name>.<name>US</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"d:\\programs"</expr></argument>, <argument><expr><name><name>l</name><index>[<expr>1</expr>]</index></name>.<call><name>toLowerCase</name><argument_list>(<argument><expr><name><name>Locale</name>.<name>US</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if></else></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testConstructorNetWareStyle</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// try a netware-volume length path, see how it is handled</comment>
        <decl_stmt><decl><type><name>Path</name></type> <name>p</name> =<init> <expr>new <call><name>Path</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr>"sys:\\test"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>l</name> =<init> <expr><call><name><name>p</name>.<name>list</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>isUnixStyle</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"no drives on Unix"</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name><name>l</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"sys resolved relative to project\'s basedir"</expr></argument>,
                   <argument><expr><name><name>l</name><index>[<expr>0</expr>]</index></name>.<call><name>endsWith</name><argument_list>(<argument><expr>"/sys"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"/test"</expr></argument>, <argument><expr><name><name>l</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><name>isNetWare</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"sys:\\test"</expr></argument>, <argument><expr><name><name>l</name><index>[<expr>0</expr>]</index></name>.<call><name>toLowerCase</name><argument_list>(<argument><expr><name><name>Locale</name>.<name>US</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"volumes on NetWare"</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name><name>l</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"no multiple character-length volumes on Windows"</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name><name>l</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"sys resolved relative to project\'s basedir"</expr></argument>,
                   <argument><expr><name><name>l</name><index>[<expr>0</expr>]</index></name>.<call><name>endsWith</name><argument_list>(<argument><expr>"\\sys"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"test resolved relative to project\'s basedir"</expr></argument>,
                   <argument><expr><name><name>l</name><index>[<expr>1</expr>]</index></name>.<call><name>endsWith</name><argument_list>(<argument><expr>"\\test"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if></else></if>

        <comment type="line">// try a multi-part netware-volume length path, see how it is handled</comment>
        <expr_stmt><expr><name>p</name> = new <call><name>Path</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr>"sys:\\test;dev:\\temp"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>l</name> = <call><name><name>p</name>.<name>list</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>isUnixStyle</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"no drives on Unix"</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><name><name>l</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"sys resolved relative to project\'s basedir"</expr></argument>,
                   <argument><expr><name><name>l</name><index>[<expr>0</expr>]</index></name>.<call><name>endsWith</name><argument_list>(<argument><expr>"/sys"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"/test"</expr></argument>, <argument><expr><name><name>l</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"dev resolved relative to project\'s basedir"</expr></argument>,
                   <argument><expr><name><name>l</name><index>[<expr>2</expr>]</index></name>.<call><name>endsWith</name><argument_list>(<argument><expr>"/dev"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"/temp"</expr></argument>, <argument><expr><name><name>l</name><index>[<expr>3</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><name>isNetWare</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"volumes on NetWare"</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name><name>l</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"sys:\\test"</expr></argument>, <argument><expr><name><name>l</name><index>[<expr>0</expr>]</index></name>.<call><name>toLowerCase</name><argument_list>(<argument><expr><name><name>Locale</name>.<name>US</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"dev:\\temp"</expr></argument>, <argument><expr><name><name>l</name><index>[<expr>1</expr>]</index></name>.<call><name>toLowerCase</name><argument_list>(<argument><expr><name><name>Locale</name>.<name>US</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"no multiple character-length volumes on Windows"</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><name><name>l</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"sys resolved relative to project\'s basedir"</expr></argument>,
                   <argument><expr><name><name>l</name><index>[<expr>0</expr>]</index></name>.<call><name>endsWith</name><argument_list>(<argument><expr>"\\sys"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"test resolved relative to project\'s basedir"</expr></argument>,
                   <argument><expr><name><name>l</name><index>[<expr>1</expr>]</index></name>.<call><name>endsWith</name><argument_list>(<argument><expr>"\\test"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"dev resolved relative to project\'s basedir"</expr></argument>,
                   <argument><expr><name><name>l</name><index>[<expr>2</expr>]</index></name>.<call><name>endsWith</name><argument_list>(<argument><expr>"\\dev"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"temp resolved relative to project\'s basedir"</expr></argument>,
                   <argument><expr><name><name>l</name><index>[<expr>3</expr>]</index></name>.<call><name>endsWith</name><argument_list>(<argument><expr>"\\temp"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if></else></if>

        <comment type="line">// try a netware-volume length path w/forward slash, see how it is handled</comment>
        <expr_stmt><expr><name>p</name> = new <call><name>Path</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr>"sys:/test"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>l</name> = <call><name><name>p</name>.<name>list</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>isUnixStyle</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"no drives on Unix"</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name><name>l</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"sys resolved relative to project\'s basedir"</expr></argument>,
                   <argument><expr><name><name>l</name><index>[<expr>0</expr>]</index></name>.<call><name>endsWith</name><argument_list>(<argument><expr>"/sys"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"/test"</expr></argument>, <argument><expr><name><name>l</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><name>isNetWare</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"volumes on NetWare"</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name><name>l</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"sys:\\test"</expr></argument>, <argument><expr><name><name>l</name><index>[<expr>0</expr>]</index></name>.<call><name>toLowerCase</name><argument_list>(<argument><expr><name><name>Locale</name>.<name>US</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"no multiple character-length volumes on Windows"</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name><name>l</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"sys resolved relative to project\'s basedir"</expr></argument>,
                   <argument><expr><name><name>l</name><index>[<expr>0</expr>]</index></name>.<call><name>endsWith</name><argument_list>(<argument><expr>"\\sys"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"test resolved relative to project\'s basedir"</expr></argument>,
                   <argument><expr><name><name>l</name><index>[<expr>1</expr>]</index></name>.<call><name>endsWith</name><argument_list>(<argument><expr>"\\test"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if></else></if>

        <comment type="line">// try a multi-part netware-volume length path w/forward slash, see how it is handled</comment>
        <expr_stmt><expr><name>p</name> = new <call><name>Path</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr>"sys:/test;dev:/temp"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>l</name> = <call><name><name>p</name>.<name>list</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>isUnixStyle</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"no drives on Unix"</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><name><name>l</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"sys resolved relative to project\'s basedir"</expr></argument>,
                   <argument><expr><name><name>l</name><index>[<expr>0</expr>]</index></name>.<call><name>endsWith</name><argument_list>(<argument><expr>"/sys"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"/test"</expr></argument>, <argument><expr><name><name>l</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"dev resolved relative to project\'s basedir"</expr></argument>,
                   <argument><expr><name><name>l</name><index>[<expr>2</expr>]</index></name>.<call><name>endsWith</name><argument_list>(<argument><expr>"/dev"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"/temp"</expr></argument>, <argument><expr><name><name>l</name><index>[<expr>3</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><name>isNetWare</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"volumes on NetWare"</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name><name>l</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"sys:\\test"</expr></argument>, <argument><expr><name><name>l</name><index>[<expr>0</expr>]</index></name>.<call><name>toLowerCase</name><argument_list>(<argument><expr><name><name>Locale</name>.<name>US</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"dev:\\temp"</expr></argument>, <argument><expr><name><name>l</name><index>[<expr>1</expr>]</index></name>.<call><name>toLowerCase</name><argument_list>(<argument><expr><name><name>Locale</name>.<name>US</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"no multiple character-length volumes on Windows"</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><name><name>l</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"sys resolved relative to project\'s basedir"</expr></argument>,
                   <argument><expr><name><name>l</name><index>[<expr>0</expr>]</index></name>.<call><name>endsWith</name><argument_list>(<argument><expr>"\\sys"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"test resolved relative to project\'s basedir"</expr></argument>,
                   <argument><expr><name><name>l</name><index>[<expr>1</expr>]</index></name>.<call><name>endsWith</name><argument_list>(<argument><expr>"\\test"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"dev resolved relative to project\'s basedir"</expr></argument>,
                   <argument><expr><name><name>l</name><index>[<expr>2</expr>]</index></name>.<call><name>endsWith</name><argument_list>(<argument><expr>"\\dev"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"temp resolved relative to project\'s basedir"</expr></argument>,
                   <argument><expr><name><name>l</name><index>[<expr>3</expr>]</index></name>.<call><name>endsWith</name><argument_list>(<argument><expr>"\\temp"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         }</block></else></if></else></if>

        <comment type="line">// try a multi-part netware-volume length path with UNIX</comment>
        <comment type="line">// separator (this testcase if from an actual bug that was</comment>
        <comment type="line">// found, in AvailableTest, which uses PathTokenizer)</comment>
        <expr_stmt><expr><name>p</name> = new <call><name>Path</name><argument_list>(<argument><expr><name>project</name></expr></argument>,
                     <argument><expr>"SYS:\\JAVA/lib/rt.jar:SYS:\\JAVA/lib/classes.zip"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>l</name> = <call><name><name>p</name>.<name>list</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>isUnixStyle</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"no drives on Unix"</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr><name><name>l</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"sys resolved relative to project\'s basedir"</expr></argument>,
                   <argument><expr><name><name>l</name><index>[<expr>0</expr>]</index></name>.<call><name>endsWith</name><argument_list>(<argument><expr>"/SYS"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"/JAVA/lib/rt.jar"</expr></argument>, <argument><expr><name><name>l</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"/JAVA/lib/classes.zip"</expr></argument>, <argument><expr><name><name>l</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><name>isNetWare</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"volumes on NetWare"</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name><name>l</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"sys:\\java\\lib\\rt.jar"</expr></argument>, <argument><expr><name><name>l</name><index>[<expr>0</expr>]</index></name>.<call><name>toLowerCase</name><argument_list>(<argument><expr><name><name>Locale</name>.<name>US</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"sys:\\java\\lib\\classes.zip"</expr></argument>, <argument><expr><name><name>l</name><index>[<expr>1</expr>]</index></name>.<call><name>toLowerCase</name><argument_list>(<argument><expr><name><name>Locale</name>.<name>US</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"no multiple character-length volumes on Windows"</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr><name><name>l</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"sys resolved relative to project\'s basedir"</expr></argument>,
                   <argument><expr><name><name>l</name><index>[<expr>0</expr>]</index></name>.<call><name>endsWith</name><argument_list>(<argument><expr>"\\SYS"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"java/lib/rt.jar resolved relative to project\'s basedir"</expr></argument>,
                   <argument><expr><name><name>l</name><index>[<expr>1</expr>]</index></name>.<call><name>endsWith</name><argument_list>(<argument><expr>"\\JAVA\\lib\\rt.jar"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"java/lib/classes.zip resolved relative to project\'s basedir"</expr></argument>,
                   <argument><expr><name><name>l</name><index>[<expr>2</expr>]</index></name>.<call><name>endsWith</name><argument_list>(<argument><expr>"\\JAVA\\lib\\classes.zip"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if></else></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testConstructorMixedStyle</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Path</name></type> <name>p</name> =<init> <expr>new <call><name>Path</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr>"\\a;\\b:/c"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>l</name> =<init> <expr><call><name><name>p</name>.<name>list</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"three items, mixed style"</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr><name><name>l</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>isUnixStyle</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"/a"</expr></argument>, <argument><expr><name><name>l</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"/b"</expr></argument>, <argument><expr><name><name>l</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"/c"</expr></argument>, <argument><expr><name><name>l</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><name>isNetWare</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"\\a"</expr></argument>, <argument><expr><name><name>l</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"\\b"</expr></argument>, <argument><expr><name><name>l</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"\\c"</expr></argument>, <argument><expr><name><name>l</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>base</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name><name>File</name>.<name>separator</name></name></expr></argument>)</argument_list></call>.<call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>base</name> + "a"</expr></argument>, <argument><expr><name><name>l</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>base</name> + "b"</expr></argument>, <argument><expr><name><name>l</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>base</name> + "c"</expr></argument>, <argument><expr><name><name>l</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if></else></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testSetLocation</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Path</name></type> <name>p</name> =<init> <expr>new <call><name>Path</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>setLocation</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><name><name>File</name>.<name>separatorChar</name></name>+"a"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>l</name> =<init> <expr><call><name><name>p</name>.<name>list</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>isUnixStyle</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><name><name>l</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"/a"</expr></argument>, <argument><expr><name><name>l</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><name>isNetWare</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><name><name>l</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"\\a"</expr></argument>, <argument><expr><name><name>l</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><name><name>l</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>":\\a"</expr></argument>, <argument><expr><name><name>l</name><index>[<expr>0</expr>]</index></name>.<call><name>substring</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if></else></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testAppending</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Path</name></type> <name>p</name> =<init> <expr>new <call><name>Path</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr>"/a:/b"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>l</name> =<init> <expr><call><name><name>p</name>.<name>list</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"2 after construction"</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name><name>l</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>setLocation</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr>"/c"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>l</name> = <call><name><name>p</name>.<name>list</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"3 after setLocation"</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr><name><name>l</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>setPath</name></name><argument_list>(<argument><expr>"\\d;\\e"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>l</name> = <call><name><name>p</name>.<name>list</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"5 after setPath"</expr></argument>, <argument><expr>5</expr></argument>, <argument><expr><name><name>l</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>append</name></name><argument_list>(<argument><expr>new <call><name>Path</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr>"\\f"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>l</name> = <call><name><name>p</name>.<name>list</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"6 after append"</expr></argument>, <argument><expr>6</expr></argument>, <argument><expr><name><name>l</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>createPath</name></name><argument_list>()</argument_list></call>.<call><name>setLocation</name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr>"/g"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>l</name> = <call><name><name>p</name>.<name>list</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"7 after append"</expr></argument>, <argument><expr>7</expr></argument>, <argument><expr><name><name>l</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testEmpyPath</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Path</name></type> <name>p</name> =<init> <expr>new <call><name>Path</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>l</name> =<init> <expr><call><name><name>p</name>.<name>list</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"0 after construction"</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>l</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>setPath</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>l</name> = <call><name><name>p</name>.<name>list</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"0 after setPath"</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>l</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>append</name></name><argument_list>(<argument><expr>new <call><name>Path</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>l</name> = <call><name><name>p</name>.<name>list</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"0 after append"</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>l</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>createPath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>l</name> = <call><name><name>p</name>.<name>list</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"0 after append"</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>l</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testUnique</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Path</name></type> <name>p</name> =<init> <expr>new <call><name>Path</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr>"/a:/a"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>l</name> =<init> <expr><call><name><name>p</name>.<name>list</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"1 after construction"</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name><name>l</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>base</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name><name>File</name>.<name>separator</name></name></expr></argument>)</argument_list></call>.<call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>setLocation</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr>"a"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>l</name> = <call><name><name>p</name>.<name>list</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"1 after setLocation"</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name><name>l</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>setPath</name></name><argument_list>(<argument><expr>"\\a;/a"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>l</name> = <call><name><name>p</name>.<name>list</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"1 after setPath"</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name><name>l</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>append</name></name><argument_list>(<argument><expr>new <call><name>Path</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr>"/a;\\a:\\a"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>l</name> = <call><name><name>p</name>.<name>list</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"1 after append"</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name><name>l</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>createPath</name></name><argument_list>()</argument_list></call>.<call><name>setPath</name><argument_list>(<argument><expr>"\\a:/a"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>l</name> = <call><name><name>p</name>.<name>list</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"1 after append"</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name><name>l</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testEmptyElementIfIsReference</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Path</name></type> <name>p</name> =<init> <expr>new <call><name>Path</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr>"/a:/a"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>p</name>.<name>setRefid</name></name><argument_list>(<argument><expr>new <call><name>Reference</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr>"dummyref"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Can add reference to Path with elements from constructor"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"You must not specify more than one attribute when using refid"</expr></argument>,
                         <argument><expr><call><name><name>be</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <expr_stmt><expr><name>p</name> = new <call><name>Path</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>setLocation</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr>"/a"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>p</name>.<name>setRefid</name></name><argument_list>(<argument><expr>new <call><name>Reference</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr>"dummyref"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Can add reference to Path with elements from setLocation"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"You must not specify more than one attribute when using refid"</expr></argument>,
                         <argument><expr><call><name><name>be</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <decl_stmt><decl><type><name>Path</name></type> <name>another</name> =<init> <expr>new <call><name>Path</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr>"/a:/a"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>addReference</name></name><argument_list>(<argument><expr>"dummyref"</expr></argument>, <argument><expr><name>another</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> = new <call><name>Path</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>setRefid</name></name><argument_list>(<argument><expr>new <call><name>Reference</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr>"dummyref"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>p</name>.<name>setLocation</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr>"/a"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Can set location in Path that is a reference."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"You must not specify more than one attribute when using refid"</expr></argument>,
                         <argument><expr><call><name><name>be</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <try>try <block>{
            <expr_stmt><expr><call><name><name>p</name>.<name>setPath</name></name><argument_list>(<argument><expr>"/a;\\a"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Can set path in Path that is a reference."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"You must not specify more than one attribute when using refid"</expr></argument>,
                         <argument><expr><call><name><name>be</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <try>try <block>{
            <expr_stmt><expr><call><name><name>p</name>.<name>createPath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Can create nested Path in Path that is a reference."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"You must not specify nested elements when using refid"</expr></argument>,
                         <argument><expr><call><name><name>be</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <try>try <block>{
            <expr_stmt><expr><call><name><name>p</name>.<name>createPathElement</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Can create nested PathElement in Path that is a reference."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"You must not specify nested elements when using refid"</expr></argument>,
                         <argument><expr><call><name><name>be</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <try>try <block>{
            <expr_stmt><expr><call><name><name>p</name>.<name>addFileset</name></name><argument_list>(<argument><expr>new <call><name>FileSet</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Can add nested FileSet in Path that is a reference."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"You must not specify nested elements when using refid"</expr></argument>,
                         <argument><expr><call><name><name>be</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <try>try <block>{
            <expr_stmt><expr><call><name><name>p</name>.<name>addFilelist</name></name><argument_list>(<argument><expr>new <call><name>FileList</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Can add nested FileList in Path that is a reference."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"You must not specify nested elements when using refid"</expr></argument>,
                         <argument><expr><call><name><name>be</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <try>try <block>{
            <expr_stmt><expr><call><name><name>p</name>.<name>addDirset</name></name><argument_list>(<argument><expr>new <call><name>DirSet</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Can add nested Dirset in Path that is a reference."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"You must not specify nested elements when using refid"</expr></argument>,
                         <argument><expr><call><name><name>be</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testCircularReferenceCheck</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Path</name></type> <name>p</name> =<init> <expr>new <call><name>Path</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>addReference</name></name><argument_list>(<argument><expr>"dummy"</expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>setRefid</name></name><argument_list>(<argument><expr>new <call><name>Reference</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr>"dummy"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>p</name>.<name>list</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Can make Path a Reference to itself."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"This data type contains a circular reference."</expr></argument>,
                         <argument><expr><call><name><name>be</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <comment type="line">// dummy1 --&gt; dummy2 --&gt; dummy3 --&gt; dummy1</comment>
        <decl_stmt><decl><type><name>Path</name></type> <name>p1</name> =<init> <expr>new <call><name>Path</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>addReference</name></name><argument_list>(<argument><expr>"dummy1"</expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Path</name></type> <name>p2</name> =<init> <expr><call><name><name>p1</name>.<name>createPath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>addReference</name></name><argument_list>(<argument><expr>"dummy2"</expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Path</name></type> <name>p3</name> =<init> <expr><call><name><name>p2</name>.<name>createPath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>addReference</name></name><argument_list>(<argument><expr>"dummy3"</expr></argument>, <argument><expr><name>p3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>p3</name>.<name>setRefid</name></name><argument_list>(<argument><expr>new <call><name>Reference</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr>"dummy1"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>p1</name>.<name>list</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Can make circular reference."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"This data type contains a circular reference."</expr></argument>,
                         <argument><expr><call><name><name>be</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <comment type="line">// dummy1 --&gt; dummy2 --&gt; dummy3 (with Path "/a")</comment>
        <expr_stmt><expr><name>p1</name> = new <call><name>Path</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>addReference</name></name><argument_list>(<argument><expr>"dummy1"</expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>p2</name> = <call><name><name>p1</name>.<name>createPath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>addReference</name></name><argument_list>(<argument><expr>"dummy2"</expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>p3</name> = <call><name><name>p2</name>.<name>createPath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>addReference</name></name><argument_list>(<argument><expr>"dummy3"</expr></argument>, <argument><expr><name>p3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>p3</name>.<name>setLocation</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr>"/a"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>l</name> =<init> <expr><call><name><name>p1</name>.<name>list</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"One element buried deep inside a nested path structure"</expr></argument>,
                     <argument><expr>1</expr></argument>, <argument><expr><name><name>l</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>isUnixStyle</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"/a"</expr></argument>, <argument><expr><name><name>l</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><name>isNetWare</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"\\a"</expr></argument>, <argument><expr><name><name>l</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>":\\a"</expr></argument>, <argument><expr><name><name>l</name><index>[<expr>0</expr>]</index></name>.<call><name>substring</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if></else></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFileList</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Path</name></type> <name>p</name> =<init> <expr>new <call><name>Path</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FileList</name></type> <name>f</name> =<init> <expr>new <call><name>FileList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>f</name>.<name>setProject</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>f</name>.<name>setDir</name></name><argument_list>(<argument><expr><call><name><name>project</name>.<name>resolveFile</name></name><argument_list>(<argument><expr>"."</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>f</name>.<name>setFiles</name></name><argument_list>(<argument><expr>"build.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>addFilelist</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>l</name> =<init> <expr><call><name><name>p</name>.<name>list</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><name><name>l</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>project</name>.<name>resolveFile</name></name><argument_list>(<argument><expr>"build.xml"</expr></argument>)</argument_list></call>.<call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>l</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFileSet</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Path</name></type> <name>p</name> =<init> <expr>new <call><name>Path</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FileSet</name></type> <name>f</name> =<init> <expr>new <call><name>FileSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>f</name>.<name>setProject</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>f</name>.<name>setDir</name></name><argument_list>(<argument><expr><call><name><name>project</name>.<name>resolveFile</name></name><argument_list>(<argument><expr>"."</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>f</name>.<name>setIncludes</name></name><argument_list>(<argument><expr>"build.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>addFileset</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>l</name> =<init> <expr><call><name><name>p</name>.<name>list</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><name><name>l</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>project</name>.<name>resolveFile</name></name><argument_list>(<argument><expr>"build.xml"</expr></argument>)</argument_list></call>.<call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>l</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testDirSet</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Path</name></type> <name>p</name> =<init> <expr>new <call><name>Path</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DirSet</name></type> <name>d</name> =<init> <expr>new <call><name>DirSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>d</name>.<name>setProject</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>d</name>.<name>setDir</name></name><argument_list>(<argument><expr><call><name><name>project</name>.<name>resolveFile</name></name><argument_list>(<argument><expr>"."</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>d</name>.<name>setIncludes</name></name><argument_list>(<argument><expr>"build"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>addDirset</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>l</name> =<init> <expr><call><name><name>p</name>.<name>list</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><name><name>l</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>project</name>.<name>resolveFile</name></name><argument_list>(<argument><expr>"build"</expr></argument>)</argument_list></call>.<call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>l</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testRecursion</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Path</name></type> <name>p</name> =<init> <expr>new <call><name>Path</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>p</name>.<name>append</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>p</name>.<name>list</name></name><argument_list>()</argument_list></call>.<name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>x</name></decl></param>) <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>m</name> =<init> <expr><call><name><name>x</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><call><name><name>m</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"circular"</expr></argument>)</argument_list></call> != -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

}</block></class>
</unit>
