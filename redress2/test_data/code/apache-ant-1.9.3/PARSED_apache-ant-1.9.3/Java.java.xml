<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\Java.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>PrintWriter</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>StringWriter</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>ExitException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>ExitStatusException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Commandline</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>CommandlineJava</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Environment</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Path</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>PropertySet</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Reference</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Assertions</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Permissions</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>RedirectorElement</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>condition</name>.<name>Os</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>KeepAliveInputStream</name></name>;</import>

<comment type="javadoc">/**
 * Launcher for Java applications. Allows use of
 * the same JVM for the called application thus resulting in much
 * faster operation.
 *
 * @since Ant 1.1
 *
 * @ant.task category="java"
 */</comment>
<class><specifier>public</specifier> class <name>Java</name> <super><extends>extends <name>Task</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>CommandlineJava</name></type> <name>cmdl</name> =<init> <expr>new <call><name>CommandlineJava</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Environment</name></type> <name>env</name> =<init> <expr>new <call><name>Environment</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>fork</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>newEnvironment</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>dir</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>failOnError</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Long</name></type> <name>timeout</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="line">//include locally for screening purposes</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>inputString</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>input</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>output</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>error</name></decl>;</decl_stmt>

    <comment type="line">// CheckStyle:VisibilityModifier OFF - bc</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Redirector</name></type> <name>redirector</name> =<init> <expr>new <call><name>Redirector</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>RedirectorElement</name></type> <name>redirectorElement</name></decl>;</decl_stmt>
    <comment type="line">// CheckStyle:VisibilityModifier ON</comment>

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>resultProperty</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Permissions</name></type> <name>perm</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>spawn</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>incompatibleWithSpawn</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TIMEOUT_MESSAGE</name> =<init>
        <expr>"Timeout: killed the sub-process"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Normal constructor
     */</comment>
    <constructor><specifier>public</specifier> <name>Java</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <comment type="javadoc">/**
     * create a bound task
     * @param owner owner
     */</comment>
    <constructor><specifier>public</specifier> <name>Java</name><parameter_list>(<param><decl><type><name>Task</name></type> <name>owner</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>bindToOwner</name><argument_list>(<argument><expr><name>owner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Do the execution.
     * @throws BuildException if failOnError is set to true and the application
     * returns a nonzero result code.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>savedDir</name> =<init> <expr><name>dir</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Permissions</name></type> <name>savedPermissions</name> =<init> <expr><name>perm</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>err</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name>checkConfiguration</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>err</name> = <call><name>executeJava</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>err</name> != 0</expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>failOnError</name></expr>)</condition><then> <block>{
                    <throw>throw <expr>new <call><name>ExitStatusException</name><argument_list>(<argument><expr>"Java returned: " + <name>err</name></expr></argument>,
                            <argument><expr><name>err</name></expr></argument>,
                            <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Java Result: " + <name>err</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_ERR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then></if>
            <expr_stmt><expr><call><name>maybeSetResultPropertyValue</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><name>dir</name> = <name>savedDir</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>perm</name> = <name>savedPermissions</name></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <comment type="javadoc">/**
     * Do the execution and return a return code.
     *
     * @return the return code from the execute java class if it was
     * executed in a separate VM (fork = "yes") or a security manager was
     * installed that prohibits ExitVM (default).
     *
     * @throws BuildException if required parameters are missing.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>executeJava</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name>executeJava</name><argument_list>(<argument><expr><call><name>getCommandLine</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Check configuration.
     * @throws BuildException if required parameters are missing.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>checkConfiguration</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>classname</name> =<init> <expr><call><name>getCommandLine</name><argument_list>()</argument_list></call>.<call><name>getClassname</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>classname</name> == <name>null</name> &amp;&amp; <call><name>getCommandLine</name><argument_list>()</argument_list></call>.<call><name>getJar</name><argument_list>()</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Classname must not be null."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr>!<name>fork</name> &amp;&amp; <call><name>getCommandLine</name><argument_list>()</argument_list></call>.<call><name>getJar</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Cannot execute a jar in non-forked mode."
                                     + " Please set fork='true'. "</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>spawn</name> &amp;&amp; !<name>fork</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Cannot spawn a java process in non-forked mode."
                                     + " Please set fork='true'. "</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>getCommandLine</name><argument_list>()</argument_list></call>.<call><name>getClasspath</name><argument_list>()</argument_list></call> != <name>null</name>
            &amp;&amp; <call><name>getCommandLine</name><argument_list>()</argument_list></call>.<call><name>getJar</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"When using 'jar' attribute classpath-settings are ignored. "
                + "See the manual for more information."</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>spawn</name> &amp;&amp; <name>incompatibleWithSpawn</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>log</name><argument_list>(<argument><expr>"spawn does not allow attributes related to input, "
            + "output, error, result"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_ERR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>log</name><argument_list>(<argument><expr>"spawn also does not allow timeout"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_ERR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>log</name><argument_list>(<argument><expr>"finally, spawn is not compatible "
                + "with a nested I/O &lt;redirector&gt;"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_ERR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"You have used an attribute "
                + "or nested element which is not compatible with spawn"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>getCommandLine</name><argument_list>()</argument_list></call>.<call><name>getAssertions</name><argument_list>()</argument_list></call> != <name>null</name> &amp;&amp; !<name>fork</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Assertion statements are currently ignored in non-forked mode"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>fork</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>perm</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Permissions can not be set this way in forked mode."</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><call><name>getCommandLine</name><argument_list>()</argument_list></call>.<call><name>describeCommand</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <if>if <condition>(<expr><call><name>getCommandLine</name><argument_list>()</argument_list></call>.<call><name>getVmCommand</name><argument_list>()</argument_list></call>.<call><name>size</name><argument_list>()</argument_list></call> &gt; 1</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"JVM args ignored when same JVM is used."</expr></argument>,
                    <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name>dir</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Working directory ignored when same JVM is used."</expr></argument>,
                    <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name>newEnvironment</name> || <name>null</name> != <call><name><name>env</name>.<name>getVariables</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Changes to environment variables are ignored when same "
                    + "JVM is used."</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><call><name>getCommandLine</name><argument_list>()</argument_list></call>.<call><name>getBootclasspath</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"bootclasspath ignored when same JVM is used."</expr></argument>,
                    <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name>perm</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>perm</name> = new <call><name>Permissions</name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"running " + <call><name><name>this</name>.<name>getCommandLine</name></name><argument_list>()</argument_list></call>.<call><name>getClassname</name><argument_list>()</argument_list></call>
                    + " with default permissions (exit forbidden)"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Running in same VM " + <call><name>getCommandLine</name><argument_list>()</argument_list></call>.<call><name>describeJavaCommand</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><call><name>setupRedirector</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Execute the specified CommandlineJava.
     * @param commandLine CommandLineJava instance.
     * @return the exit value of the process if forked, 0 otherwise.
     */</comment>
    <function><type><specifier>protected</specifier> <name>int</name></type> <name>executeJava</name><parameter_list>(<param><decl><type><name>CommandlineJava</name></type> <name>commandLine</name></decl></param>)</parameter_list> <block>{
        <try>try <block>{
            <if>if <condition>(<expr><name>fork</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr>!<name>spawn</name></expr>)</condition><then> <block>{
                    <return>return <expr><call><name>fork</name><argument_list>(<argument><expr><call><name><name>commandLine</name>.<name>getCommandline</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name>spawn</name><argument_list>(<argument><expr><call><name><name>commandLine</name>.<name>getCommandline</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr>0</expr>;</return>
                }</block></else></if>
            }</block></then> <else>else <block>{
                <try>try <block>{
                    <expr_stmt><expr><call><name>run</name><argument_list>(<argument><expr><name>commandLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr>0</expr>;</return>
                }</block> <catch>catch (<param><decl><type><name>ExitException</name></type> <name>ex</name></decl></param>) <block>{
                    <return>return <expr><call><name><name>ex</name>.<name>getStatus</name></name><argument_list>()</argument_list></call></expr>;</return>
                }</block></catch></try>
            }</block></else></if>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>e</name></decl></param>) <block>{
            <if>if <condition>(<expr><call><name><name>e</name>.<name>getLocation</name></name><argument_list>()</argument_list></call> == <name>null</name> &amp;&amp; <call><name>getLocation</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>e</name>.<name>setLocation</name></name><argument_list>(<argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name>failOnError</name></expr>)</condition><then> <block>{
                <throw>throw <expr><name>e</name></expr>;</throw>
            }</block></then> <else>else <block>{
                <if>if <condition>(<expr><call><name><name>TIMEOUT_MESSAGE</name>.<name>equals</name></name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>TIMEOUT_MESSAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <return>return <expr>-1</expr>;</return>
            }</block></else></if>
        }</block></catch> <catch>catch (<param><decl><type><name>ThreadDeath</name></type> <name>t</name></decl></param>) <block>{
            <throw>throw <expr><name>t</name></expr>;</throw> <comment type="line">// cf. NB #47191</comment>
        }</block></catch> <catch>catch (<param><decl><type><name>Throwable</name></type> <name>t</name></decl></param>) <block>{
            <if>if <condition>(<expr><name>failOnError</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr>-1</expr>;</return>
            }</block></else></if>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * Set whether or not you want the process to be spawned;
     * default is not spawned.
     * @param spawn if true you do not want Ant to wait for the end of the process.
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSpawn</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>spawn</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>spawn</name></name> = <name>spawn</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the classpath to be used when running the Java class.
     *
     * @param s an Ant Path object containing the classpath.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setClasspath</name><parameter_list>(<param><decl><type><name>Path</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>createClasspath</name><argument_list>()</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a path to the classpath.
     *
     * @return created classpath.
     */</comment>
    <function><type><specifier>public</specifier> <name>Path</name></type> <name>createClasspath</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getCommandLine</name><argument_list>()</argument_list></call>.<call><name>createClasspath</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>createPath</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Add a path to the bootclasspath.
     * @since Ant 1.6
     *
     * @return created bootclasspath.
     */</comment>
    <function><type><specifier>public</specifier> <name>Path</name></type> <name>createBootclasspath</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getCommandLine</name><argument_list>()</argument_list></call>.<call><name>createBootclasspath</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>createPath</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the permissions for the application run inside the same JVM.
     * @since Ant 1.6
     * @return Permissions.
     */</comment>
    <function><type><specifier>public</specifier> <name>Permissions</name></type> <name>createPermissions</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>perm</name> = (<name>perm</name> == <name>null</name>) ? new <call><name>Permissions</name><argument_list>()</argument_list></call> : <name>perm</name></expr>;</expr_stmt>
        <return>return <expr><name>perm</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the classpath to use by reference.
     *
     * @param r a reference to an existing classpath.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setClasspathRef</name><parameter_list>(<param><decl><type><name>Reference</name></type> <name>r</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>createClasspath</name><argument_list>()</argument_list></call>.<call><name>setRefid</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the location of the JAR file to execute.
     *
     * @param jarfile the jarfile to execute.
     *
     * @throws BuildException if there is also a main class specified.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setJar</name><parameter_list>(<param><decl><type><name>File</name></type> <name>jarfile</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><call><name>getCommandLine</name><argument_list>()</argument_list></call>.<call><name>getClassname</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Cannot use 'jar' and 'classname' "
                                     + "attributes in same command."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name>getCommandLine</name><argument_list>()</argument_list></call>.<call><name>setJar</name><argument_list>(<argument><expr><call><name><name>jarfile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the Java class to execute.
     *
     * @param s the name of the main class.
     *
     * @throws BuildException if the jar attribute has been set.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setClassname</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><call><name>getCommandLine</name><argument_list>()</argument_list></call>.<call><name>getJar</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Cannot use 'jar' and 'classname' "
                                     + "attributes in same command"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name>getCommandLine</name><argument_list>()</argument_list></call>.<call><name>setClassname</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Deprecated: use nested arg instead.
     * Set the command line arguments for the class.
     *
     * @param s arguments.
     *
     * @ant.attribute ignore="true"
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setArgs</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"The args attribute is deprecated. "
            + "Please use nested arg elements."</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>getCommandLine</name><argument_list>()</argument_list></call>.<call><name>createArgument</name><argument_list>()</argument_list></call>.<call><name>setLine</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * If set, system properties will be copied to the cloned VM--as
     * well as the bootclasspath unless you have explicitly specified
     * a bootclasspath.
     *
     * &lt;p&gt;Doesn't have any effect unless fork is true.&lt;/p&gt;
     * @param cloneVm if true copy system properties.
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCloneVm</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>cloneVm</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>getCommandLine</name><argument_list>()</argument_list></call>.<call><name>setCloneVm</name><argument_list>(<argument><expr><name>cloneVm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a command-line argument.
     *
     * @return created argument.
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Commandline</name>.<name>Argument</name></name></type> <name>createArg</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getCommandLine</name><argument_list>()</argument_list></call>.<call><name>createArgument</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the name of the property in which the return code of the
     * command should be stored. Only of interest if failonerror=false.
     *
     * @param resultProperty name of property.
     *
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setResultProperty</name><parameter_list>(<param><decl><type><name>String</name></type> <name>resultProperty</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>resultProperty</name></name> = <name>resultProperty</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>incompatibleWithSpawn</name> = true</expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Helper method to set result property to the
     * passed in value if appropriate.
     *
     * @param result the exit code
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>maybeSetResultPropertyValue</name><parameter_list>(<param><decl><type><name>int</name></type> <name>result</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>res</name> =<init> <expr><call><name><name>Integer</name>.<name>toString</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>resultProperty</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>setNewProperty</name><argument_list>(<argument><expr><name>resultProperty</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * If true, execute in a new VM.
     *
     * @param s do you want to run Java in a new VM.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFork</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>fork</name></name> = <name>s</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the command line arguments for the JVM.
     *
     * @param s jvmargs.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setJvmargs</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"The jvmargs attribute is deprecated. "
            + "Please use nested jvmarg elements."</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>getCommandLine</name><argument_list>()</argument_list></call>.<call><name>createVmArgument</name><argument_list>()</argument_list></call>.<call><name>setLine</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a JVM argument.
     *
     * @return JVM argument created.
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Commandline</name>.<name>Argument</name></name></type> <name>createJvmarg</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getCommandLine</name><argument_list>()</argument_list></call>.<call><name>createVmArgument</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the command used to start the VM (only if forking).
     *
     * @param s command to start the VM.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setJvm</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>getCommandLine</name><argument_list>()</argument_list></call>.<call><name>setVm</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a system property.
     *
     * @param sysp system property.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addSysproperty</name><parameter_list>(<param><decl><type><name><name>Environment</name>.<name>Variable</name></name></type> <name>sysp</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>getCommandLine</name><argument_list>()</argument_list></call>.<call><name>addSysproperty</name><argument_list>(<argument><expr><name>sysp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a set of properties as system properties.
     *
     * @param sysp set of properties to add.
     *
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addSyspropertyset</name><parameter_list>(<param><decl><type><name>PropertySet</name></type> <name>sysp</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>getCommandLine</name><argument_list>()</argument_list></call>.<call><name>addSyspropertyset</name><argument_list>(<argument><expr><name>sysp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * If true, then fail if the command exits with a
     * returncode other than zero.
     *
     * @param fail if true fail the build when the command exits with a
     * nonzero returncode.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFailonerror</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>fail</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>failOnError</name> = <name>fail</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>incompatibleWithSpawn</name> |= <name>fail</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the working directory of the process.
     *
     * @param d working directory.
     *
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDir</name><parameter_list>(<param><decl><type><name>File</name></type> <name>d</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>dir</name></name> = <name>d</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the File to which the output of the process is redirected.
     *
     * @param out the output File.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOutput</name><parameter_list>(<param><decl><type><name>File</name></type> <name>out</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>output</name></name> = <name>out</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>incompatibleWithSpawn</name> = true</expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the input to use for the task.
     *
     * @param input name of the input file.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setInput</name><parameter_list>(<param><decl><type><name>File</name></type> <name>input</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>inputString</name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"The \"input\" and \"inputstring\" "
                + "attributes cannot both be specified"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>input</name></name> = <name>input</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>incompatibleWithSpawn</name> = true</expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the string to use as input.
     *
     * @param inputString the string which is used as the input source.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setInputString</name><parameter_list>(<param><decl><type><name>String</name></type> <name>inputString</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>input</name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"The \"input\" and \"inputstring\" "
                + "attributes cannot both be specified"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>inputString</name></name> = <name>inputString</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>incompatibleWithSpawn</name> = true</expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set whether error output of exec is logged. This is only useful
     * when output is being redirected and error output is desired in the
     * Ant log.
     *
     * @param logError get in the ant log the messages coming from stderr
     * in the case that fork = true.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLogError</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>logError</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>redirector</name>.<name>setLogError</name></name><argument_list>(<argument><expr><name>logError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>incompatibleWithSpawn</name> |= <name>logError</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the File to which the error stream of the process is redirected.
     *
     * @param error file getting the error stream.
     *
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setError</name><parameter_list>(<param><decl><type><name>File</name></type> <name>error</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>error</name></name> = <name>error</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>incompatibleWithSpawn</name> = true</expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the property name whose value should be set to the output of
     * the process.
     *
     * @param outputProp property name.
     *
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOutputproperty</name><parameter_list>(<param><decl><type><name>String</name></type> <name>outputProp</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>redirector</name>.<name>setOutputProperty</name></name><argument_list>(<argument><expr><name>outputProp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>incompatibleWithSpawn</name> = true</expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the property name whose value should be set to the error of
     * the process.
     *
     * @param errorProperty property name.
     *
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setErrorProperty</name><parameter_list>(<param><decl><type><name>String</name></type> <name>errorProperty</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>redirector</name>.<name>setErrorProperty</name></name><argument_list>(<argument><expr><name>errorProperty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>incompatibleWithSpawn</name> = true</expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Corresponds to -mx or -Xmx depending on VM version.
     *
     * @param max max memory parameter.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMaxmemory</name><parameter_list>(<param><decl><type><name>String</name></type> <name>max</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>getCommandLine</name><argument_list>()</argument_list></call>.<call><name>setMaxmemory</name><argument_list>(<argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the JVM version.
     * @param value JVM version.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setJVMVersion</name><parameter_list>(<param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>getCommandLine</name><argument_list>()</argument_list></call>.<call><name>setVmversion</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add an environment variable.
     *
     * &lt;p&gt;Will be ignored if we are not forking a new VM.
     *
     * @param var new environment variable.
     *
     * @since Ant 1.5
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addEnv</name><parameter_list>(<param><decl><type><name><name>Environment</name>.<name>Variable</name></name></type> <name>var</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>env</name>.<name>addVariable</name></name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * If true, use a completely new environment.
     *
     * &lt;p&gt;Will be ignored if we are not forking a new VM.
     *
     * @param newenv if true, use a completely new environment.
     *
     * @since Ant 1.5
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setNewenvironment</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>newenv</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>newEnvironment</name> = <name>newenv</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * If true, append output to existing file.
     *
     * @param append if true, append output to existing file.
     *
     * @since Ant 1.5
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAppend</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>append</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>redirector</name>.<name>setAppend</name></name><argument_list>(<argument><expr><name>append</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>incompatibleWithSpawn</name> |= <name>append</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the timeout in milliseconds after which the process will be killed.
     *
     * @param value timeout in milliseconds.
     *
     * @since Ant 1.5
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTimeout</name><parameter_list>(<param><decl><type><name>Long</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>timeout</name> = <name>value</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>incompatibleWithSpawn</name> |= <name>timeout</name> != <name>null</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add assertions to enable in this program (if fork=true).
     * @param asserts assertion set.
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addAssertions</name><parameter_list>(<param><decl><type><name>Assertions</name></type> <name>asserts</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>getCommandLine</name><argument_list>()</argument_list></call>.<call><name>getAssertions</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Only one assertion declaration is allowed"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name>getCommandLine</name><argument_list>()</argument_list></call>.<call><name>setAssertions</name><argument_list>(<argument><expr><name>asserts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a &lt;code&gt;RedirectorElement&lt;/code&gt; to this task.
     * @param redirectorElement   &lt;code&gt;RedirectorElement&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addConfiguredRedirector</name><parameter_list>(<param><decl><type><name>RedirectorElement</name></type> <name>redirectorElement</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>redirectorElement</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"cannot have &gt; 1 nested redirectors"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>redirectorElement</name></name> = <name>redirectorElement</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>incompatibleWithSpawn</name> = true</expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Pass output sent to System.out to specified output file.
     *
     * @param output a string of output on its way to the handlers.
     *
     * @since Ant 1.5
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>handleOutput</name><parameter_list>(<param><decl><type><name>String</name></type> <name>output</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>redirector</name>.<name>getOutputStream</name></name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>redirector</name>.<name>handleOutput</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>super</name>.<name>handleOutput</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Handle an input request by this task.
     *
     * @param buffer the buffer into which data is to be read.
     * @param offset the offset into the buffer at which data is stored.
     * @param length the amount of data to read.
     *
     * @return the number of bytes read.
     *
     * @exception IOException if the data cannot be read.
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>handleInput</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buffer</name></decl></param>, <param><decl><type><name>int</name></type> <name>offset</name></decl></param>, <param><decl><type><name>int</name></type> <name>length</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <comment type="line">// Should work whether or not redirector.inputStream == null:</comment>
        <return>return <expr><call><name><name>redirector</name>.<name>handleInput</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Pass output sent to System.out to specified output file.
     *
     * @param output string of output on its way to its handlers.
     *
     * @since Ant 1.5.2
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>handleFlush</name><parameter_list>(<param><decl><type><name>String</name></type> <name>output</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>redirector</name>.<name>getOutputStream</name></name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>redirector</name>.<name>handleFlush</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>super</name>.<name>handleFlush</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Handle output sent to System.err.
     *
     * @param output string of stderr.
     *
     * @since Ant 1.5
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>handleErrorOutput</name><parameter_list>(<param><decl><type><name>String</name></type> <name>output</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>redirector</name>.<name>getErrorStream</name></name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>redirector</name>.<name>handleErrorOutput</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>super</name>.<name>handleErrorOutput</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Handle output sent to System.err and flush the stream.
     *
     * @param output string of stderr.
     *
     * @since Ant 1.5.2
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>handleErrorFlush</name><parameter_list>(<param><decl><type><name>String</name></type> <name>output</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>redirector</name>.<name>getErrorStream</name></name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>redirector</name>.<name>handleErrorFlush</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>super</name>.<name>handleErrorFlush</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Set up properties on the redirector that we needed to store locally.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setupRedirector</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>redirector</name>.<name>setInput</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>redirector</name>.<name>setInputString</name></name><argument_list>(<argument><expr><name>inputString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>redirector</name>.<name>setOutput</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>redirector</name>.<name>setError</name></name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>redirectorElement</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>redirectorElement</name>.<name>configure</name></name><argument_list>(<argument><expr><name>redirector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr>!<name>spawn</name> &amp;&amp; <name>input</name> == <name>null</name> &amp;&amp; <name>inputString</name> == <name>null</name></expr>)</condition><then> <block>{
            <comment type="line">// #24918: send standard input to the process by default.</comment>
            <expr_stmt><expr><call><name><name>redirector</name>.<name>setInputStream</name></name><argument_list>(
                <argument><expr>new <call><name>KeepAliveInputStream</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getDefaultInputStream</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Executes the given classname with the given arguments as it
     * were a command line application.
     * @param command CommandlineJava.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>run</name><parameter_list>(<param><decl><type><name>CommandlineJava</name></type> <name>command</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <try>try <block>{
            <decl_stmt><decl><type><name>ExecuteJava</name></type> <name>exe</name> =<init> <expr>new <call><name>ExecuteJava</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>exe</name>.<name>setJavaCommand</name></name><argument_list>(<argument><expr><call><name><name>command</name>.<name>getJavaCommand</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>exe</name>.<name>setClasspath</name></name><argument_list>(<argument><expr><call><name><name>command</name>.<name>getClasspath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>exe</name>.<name>setSystemProperties</name></name><argument_list>(<argument><expr><call><name><name>command</name>.<name>getSystemProperties</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>exe</name>.<name>setPermissions</name></name><argument_list>(<argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>exe</name>.<name>setTimeout</name></name><argument_list>(<argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>redirector</name>.<name>createStreams</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>exe</name>.<name>execute</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>redirector</name>.<name>complete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name><name>exe</name>.<name>killedProcess</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>TIMEOUT_MESSAGE</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * Executes the given classname with the given arguments in a separate VM.
     * @param command String[] of command-line arguments.
     */</comment>
    <function><type><specifier>private</specifier> <name>int</name></type> <name>fork</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>command</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>Execute</name></type> <name>exe</name>
            =<init> <expr>new <call><name>Execute</name><argument_list>(<argument><expr><call><name><name>redirector</name>.<name>createHandler</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>createWatchdog</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>setupExecutable</name><argument_list>(<argument><expr><name>exe</name></expr></argument>, <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <try>try <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>rc</name> =<init> <expr><call><name><name>exe</name>.<name>execute</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>redirector</name>.<name>complete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name><name>exe</name>.<name>killedProcess</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>TIMEOUT_MESSAGE</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <return>return <expr><name>rc</name></expr>;</return>
        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * Executes the given classname with the given arguments in a separate VM.
     * @param command String[] of command-line arguments.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>spawn</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>command</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>Execute</name></type> <name>exe</name> =<init> <expr>new <call><name>Execute</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>setupExecutable</name><argument_list>(<argument><expr><name>exe</name></expr></argument>, <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>exe</name>.<name>spawn</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * Do all configuration for an executable that
     * is common across the {@link #fork(String[])} and
     * {@link #spawn(String[])} methods.
     * @param exe executable.
     * @param command command to execute.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>setupExecutable</name><parameter_list>(<param><decl><type><name>Execute</name></type> <name>exe</name></decl></param>, <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>command</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>exe</name>.<name>setAntRun</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setupWorkingDir</name><argument_list>(<argument><expr><name>exe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setupEnvironment</name><argument_list>(<argument><expr><name>exe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setupCommandLine</name><argument_list>(<argument><expr><name>exe</name></expr></argument>, <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set up our environment variables.
     * @param exe executable.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>setupEnvironment</name><parameter_list>(<param><decl><type><name>Execute</name></type> <name>exe</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>environment</name> =<init> <expr><call><name><name>env</name>.<name>getVariables</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>environment</name> != <name>null</name></expr>)</condition><then> <block>{
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>environment</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Setting environment variable: " + <name><name>environment</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
                    <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>exe</name>.<name>setNewenvironment</name></name><argument_list>(<argument><expr><name>newEnvironment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>exe</name>.<name>setEnvironment</name></name><argument_list>(<argument><expr><name>environment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the working dir of the new process.
     * @param exe executable.
     * @throws BuildException if the dir doesn't exist.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>setupWorkingDir</name><parameter_list>(<param><decl><type><name>Execute</name></type> <name>exe</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>dir</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>dir</name> = <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr>!<call><name><name>dir</name>.<name>exists</name></name><argument_list>()</argument_list></call> || !<call><name><name>dir</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><call><name><name>dir</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call>
                                     + " is not a valid directory"</expr></argument>,
                                     <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if></else></if>
        <expr_stmt><expr><call><name><name>exe</name>.<name>setWorkingDirectory</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the command line for the exe.
     * On VMS, hands off to {@link #setupCommandLineForVMS(Execute, String[])}.
     * @param exe executable.
     * @param command command to execute.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>setupCommandLine</name><parameter_list>(<param><decl><type><name>Execute</name></type> <name>exe</name></decl></param>, <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>command</name></decl></param>)</parameter_list> <block>{
        <comment type="line">//On VMS platform, we need to create a special java options file</comment>
        <comment type="line">//containing the arguments and classpath for the java command.</comment>
        <comment type="line">//The special file is supported by the "-V" switch on the VMS JVM.</comment>
        <if>if <condition>(<expr><call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr>"openvms"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>setupCommandLineForVMS</name><argument_list>(<argument><expr><name>exe</name></expr></argument>, <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>exe</name>.<name>setCommandline</name></name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * On VMS platform, we need to create a special java options file
     * containing the arguments and classpath for the java command.
     * The special file is supported by the "-V" switch on the VMS JVM.
     *
     * @param exe executable.
     * @param command command to execute.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>setupCommandLineForVMS</name><parameter_list>(<param><decl><type><name>Execute</name></type> <name>exe</name></decl></param>, <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>command</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>ExecuteJava</name>.<name>setupCommandLineForVMS</name></name><argument_list>(<argument><expr><name>exe</name></expr></argument>, <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Executes the given classname with the given arguments as if it
     * were a command line application.
     *
     * @param classname the name of the class to run.
     * @param args  arguments for the class.
     * @throws BuildException in case of IOException in the execution.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>run</name><parameter_list>(<param><decl><type><name>String</name></type> <name>classname</name></decl></param>, <param><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>args</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>CommandlineJava</name></type> <name>cmdj</name> =<init> <expr>new <call><name>CommandlineJava</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>cmdj</name>.<name>setClassname</name></name><argument_list>(<argument><expr><name>classname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>size</name> =<init> <expr><call><name><name>args</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>size</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>cmdj</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name><name>args</name>.<name>elementAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name>run</name><argument_list>(<argument><expr><name>cmdj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Clear out the arguments to this java task.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>clearArgs</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>getCommandLine</name><argument_list>()</argument_list></call>.<call><name>clearJavaArgs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Create the Watchdog to kill a runaway process.
     *
     * @return new watchdog.
     *
     * @throws BuildException under unknown circumstances.
     *
     * @since Ant 1.5
     */</comment>
    <function><type><specifier>protected</specifier> <name>ExecuteWatchdog</name></type> <name>createWatchdog</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>timeout</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <return>return <expr>new <call><name>ExecuteWatchdog</name><argument_list>(<argument><expr><call><name><name>timeout</name>.<name>longValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Log the specified Throwable.
     * @param t the Throwable to log.
     * @since 1.6.2
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>log</name><parameter_list>(<param><decl><type><name>Throwable</name></type> <name>t</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>StringWriter</name></type> <name>sw</name> =<init> <expr>new <call><name>StringWriter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PrintWriter</name></type> <name>w</name> =<init> <expr>new <call><name>PrintWriter</name><argument_list>(<argument><expr><name>sw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>t</name>.<name>printStackTrace</name></name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>w</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><call><name><name>sw</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_ERR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Accessor to the command line.
     *
     * @return the current command line.
     * @since 1.6.3
     */</comment>
    <function><type><specifier>public</specifier> <name>CommandlineJava</name></type> <name>getCommandLine</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>cmdl</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the system properties of the command line.
     *
     * @return the current properties of this java invocation.
     * @since 1.6.3
     */</comment>
    <function><type><specifier>public</specifier> <name><name>CommandlineJava</name>.<name>SysProperties</name></name></type> <name>getSysProperties</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getCommandLine</name><argument_list>()</argument_list></call>.<call><name>getSystemProperties</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
