<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\util\FileUtilsTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>

<import>import <name><name>junit</name>.<name>framework</name>.<name>TestCase</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>condition</name>.<name>Os</name></name>;</import>

<comment type="javadoc">/**
 * Tests for org.apache.tools.ant.util.FileUtils.
 *
 */</comment>
<class><specifier>public</specifier> class <name>FileUtilsTest</name> <super><extends>extends <name>TestCase</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>FileUtils</name></type> <name>FILE_UTILS</name> =<init> <expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>removeThis</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>root</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>FileUtilsTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// Windows adds the drive letter in uppercase, unless you run Cygwin</comment>
        <expr_stmt><expr><name>root</name> = new <call><name>File</name><argument_list>(<argument><expr><name><name>File</name>.<name>separator</name></name></expr></argument>)</argument_list></call>.<call><name>getAbsolutePath</name><argument_list>()</argument_list></call>.<call><name>toUpperCase</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>removeThis</name> != <name>null</name> &amp;&amp; <call><name><name>removeThis</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <if>if <condition>(<expr>!<call><name><name>removeThis</name>.<name>delete</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>removeThis</name>.<name>deleteOnExit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * test modification.
     * Since Ant1.7, the method being tested no longer uses
     * reflection to provide backwards support to Java1.1, so this
     * test is not so critical. But it does explore file system
     * behaviour and will help catch any regression in Java itself,
     * so is worth retaining.
     * @see FileUtils#setFileLastModified(java.io.File, long)
     * @throws IOException
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testSetLastModified</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><name>removeThis</name> = new <call><name>File</name><argument_list>(<argument><expr>"dummy"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>FileOutputStream</name></type> <name>fos</name> =<init> <expr>new <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>removeThis</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>fos</name>.<name>write</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>fos</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>modTime</name> =<init> <expr><call><name><name>removeThis</name>.<name>lastModified</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>modTime</name> != 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*
         * Sleep for some time to make sure a touched file would get a
         * more recent timestamp according to the file system's
         * granularity (should be &gt; 2s to account for Windows FAT).
         */</comment>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>Thread</name>.<name>sleep</name></name><argument_list>(<argument><expr>5000</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>InterruptedException</name></type> <name>ie</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><call><name><name>ie</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <expr_stmt><expr><call><name><name>FILE_UTILS</name>.<name>setFileLastModified</name></name><argument_list>(<argument><expr><name>removeThis</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>secondModTime</name> =<init> <expr><call><name><name>removeThis</name>.<name>lastModified</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>secondModTime</name> &gt; <name>modTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// number of milliseconds in a day</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>millisperday</name>=<init><expr>24 * 3600 * 1000</expr></init></decl>;</decl_stmt>
        <comment type="line">// in a previous version, the date of the file was set to 123456</comment>
        <comment type="line">// milliseconds since 01.01.1970</comment>
        <comment type="line">// it did not work on a computer running JDK 1.4.1_02 + Windows 2000</comment>
        <expr_stmt><expr><call><name><name>FILE_UTILS</name>.<name>setFileLastModified</name></name><argument_list>(<argument><expr><name>removeThis</name></expr></argument>, <argument><expr><name>secondModTime</name> + <name>millisperday</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>thirdModTime</name> =<init> <expr><call><name><name>removeThis</name>.<name>lastModified</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="block">/*
         * I would love to compare this with 123456, but depending on
         * the filesystems granularity it can take an arbitrary value.
         *
         * Just assert the time has changed.
         */</comment>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>thirdModTime</name> != <name>secondModTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testResolveFile</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr>!(<call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr>"dos"</expr></argument>)</argument_list></call> || <call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr>"netware"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
            <comment type="block">/*
             * Start with simple absolute file names.
             */</comment>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>File</name>.<name>separator</name></name></expr></argument>,
                         <argument><expr><call><name><name>FILE_UTILS</name>.<name>resolveFile</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr>"/"</expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>File</name>.<name>separator</name></name></expr></argument>,
                         <argument><expr><call><name><name>FILE_UTILS</name>.<name>resolveFile</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr>"\\"</expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>assertEqualsIgnoreDriveCase</name><argument_list>(<argument><expr><call><name>localize</name><argument_list>(<argument><expr><name><name>File</name>.<name>separator</name></name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>FILE_UTILS</name>.<name>resolveFile</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr>"/"</expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEqualsIgnoreDriveCase</name><argument_list>(<argument><expr><call><name>localize</name><argument_list>(<argument><expr><name><name>File</name>.<name>separator</name></name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>FILE_UTILS</name>.<name>resolveFile</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr>"\\"</expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block">/*
             * throw in drive letters
             */</comment>
            <decl_stmt><decl><type><name>String</name></type> <name>driveSpec</name> =<init> <expr>"C:"</expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>driveSpec</name> + "\\"</expr></argument>,
                         <argument><expr><call><name><name>FILE_UTILS</name>.<name>resolveFile</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr><name>driveSpec</name> + "/"</expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>driveSpec</name> + "\\"</expr></argument>,
                         <argument><expr><call><name><name>FILE_UTILS</name>.<name>resolveFile</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr><name>driveSpec</name> + "\\"</expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>driveSpecLower</name> =<init> <expr>"c:"</expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>driveSpecLower</name> + "\\"</expr></argument>,
                         <argument><expr><call><name><name>FILE_UTILS</name>.<name>resolveFile</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr><name>driveSpecLower</name> + "/"</expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>driveSpecLower</name> + "\\"</expr></argument>,
                         <argument><expr><call><name><name>FILE_UTILS</name>.<name>resolveFile</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr><name>driveSpecLower</name> + "\\"</expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block">/*
             * promised to eliminate consecutive slashes after drive letter.
             */</comment>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>driveSpec</name> + "\\"</expr></argument>,
                         <argument><expr><call><name><name>FILE_UTILS</name>.<name>resolveFile</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr><name>driveSpec</name> + "/////"</expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>driveSpec</name> + "\\"</expr></argument>,
                         <argument><expr><call><name><name>FILE_UTILS</name>.<name>resolveFile</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr><name>driveSpec</name> + "\\\\\\\\\\\\"</expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <if>if <condition>(<expr><call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr>"netware"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="block">/*
             * throw in NetWare volume names
             */</comment>
            <decl_stmt><decl><type><name>String</name></type> <name>driveSpec</name> =<init> <expr>"SYS:"</expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>driveSpec</name></expr></argument>,
                         <argument><expr><call><name><name>FILE_UTILS</name>.<name>resolveFile</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr><name>driveSpec</name> + "/"</expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>driveSpec</name></expr></argument>,
                         <argument><expr><call><name><name>FILE_UTILS</name>.<name>resolveFile</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr><name>driveSpec</name> + "\\"</expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>driveSpecLower</name> =<init> <expr>"sys:"</expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>driveSpec</name></expr></argument>,
                         <argument><expr><call><name><name>FILE_UTILS</name>.<name>resolveFile</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr><name>driveSpecLower</name> + "/"</expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>driveSpec</name></expr></argument>,
                         <argument><expr><call><name><name>FILE_UTILS</name>.<name>resolveFile</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr><name>driveSpecLower</name> + "\\"</expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block">/*
             * promised to eliminate consecutive slashes after drive letter.
             */</comment>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>driveSpec</name></expr></argument>,
                         <argument><expr><call><name><name>FILE_UTILS</name>.<name>resolveFile</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr><name>driveSpec</name> + "/////"</expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>driveSpec</name></expr></argument>,
                         <argument><expr><call><name><name>FILE_UTILS</name>.<name>resolveFile</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr><name>driveSpec</name> + "\\\\\\\\\\\\"</expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr>!(<call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr>"dos"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
            <comment type="block">/*
             * drive letters must be considered just normal filenames.
             */</comment>
            <decl_stmt><decl><type><name>String</name></type> <name>driveSpec</name> =<init> <expr>"C:"</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>udir</name> =<init> <expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"user.dir"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>udir</name> + <name><name>File</name>.<name>separator</name></name> + <name>driveSpec</name></expr></argument>,
                         <argument><expr><call><name><name>FILE_UTILS</name>.<name>resolveFile</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr><name>driveSpec</name> + "/"</expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>udir</name> + <name><name>File</name>.<name>separator</name></name> + <name>driveSpec</name></expr></argument>,
                         <argument><expr><call><name><name>FILE_UTILS</name>.<name>resolveFile</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr><name>driveSpec</name> + "\\"</expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>driveSpecLower</name> =<init> <expr>"c:"</expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>udir</name> + <name><name>File</name>.<name>separator</name></name> + <name>driveSpecLower</name></expr></argument>,
                         <argument><expr><call><name><name>FILE_UTILS</name>.<name>resolveFile</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr><name>driveSpecLower</name> + "/"</expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>udir</name> + <name><name>File</name>.<name>separator</name></name> + <name>driveSpecLower</name></expr></argument>,
                         <argument><expr><call><name><name>FILE_UTILS</name>.<name>resolveFile</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr><name>driveSpecLower</name> + "\\"</expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>

        <comment type="block">/*
         * Now test some relative file name magic.
         */</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>localize</name><argument_list>(<argument><expr>"/1/2/3/4"</expr></argument>)</argument_list></call></expr></argument>,
                     <argument><expr><call><name><name>FILE_UTILS</name>.<name>resolveFile</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>localize</name><argument_list>(<argument><expr>"/1/2/3"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"4"</expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>localize</name><argument_list>(<argument><expr>"/1/2/3/4"</expr></argument>)</argument_list></call></expr></argument>,
                     <argument><expr><call><name><name>FILE_UTILS</name>.<name>resolveFile</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>localize</name><argument_list>(<argument><expr>"/1/2/3"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"./4"</expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>localize</name><argument_list>(<argument><expr>"/1/2/3/4"</expr></argument>)</argument_list></call></expr></argument>,
                     <argument><expr><call><name><name>FILE_UTILS</name>.<name>resolveFile</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>localize</name><argument_list>(<argument><expr>"/1/2/3"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>".\\4"</expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>localize</name><argument_list>(<argument><expr>"/1/2/3/4"</expr></argument>)</argument_list></call></expr></argument>,
                     <argument><expr><call><name><name>FILE_UTILS</name>.<name>resolveFile</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>localize</name><argument_list>(<argument><expr>"/1/2/3"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"./.\\4"</expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>localize</name><argument_list>(<argument><expr>"/1/2/3/4"</expr></argument>)</argument_list></call></expr></argument>,
                     <argument><expr><call><name><name>FILE_UTILS</name>.<name>resolveFile</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>localize</name><argument_list>(<argument><expr>"/1/2/3"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"../3/4"</expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>localize</name><argument_list>(<argument><expr>"/1/2/3/4"</expr></argument>)</argument_list></call></expr></argument>,
                     <argument><expr><call><name><name>FILE_UTILS</name>.<name>resolveFile</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>localize</name><argument_list>(<argument><expr>"/1/2/3"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"..\\3\\4"</expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>localize</name><argument_list>(<argument><expr>"/1/2/3/4"</expr></argument>)</argument_list></call></expr></argument>,
                     <argument><expr><call><name><name>FILE_UTILS</name>.<name>resolveFile</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>localize</name><argument_list>(<argument><expr>"/1/2/3"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"../../5/.././2/./3/6/../4"</expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>localize</name><argument_list>(<argument><expr>"/1/2/3/4"</expr></argument>)</argument_list></call></expr></argument>,
                     <argument><expr><call><name><name>FILE_UTILS</name>.<name>resolveFile</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>localize</name><argument_list>(<argument><expr>"/1/2/3"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"..\\../5/..\\./2/./3/6\\../4"</expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"meaningless result but no exception"</expr></argument>,
                <argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>localize</name><argument_list>(<argument><expr>"/1/../../b"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>FILE_UTILS</name>.<name>resolveFile</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>localize</name><argument_list>(<argument><expr>"/1"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"../../b"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNormalize</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr>!(<call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr>"dos"</expr></argument>)</argument_list></call> || <call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr>"netware"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
            <comment type="block">/*
             * Start with simple absolute file names.
             */</comment>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>File</name>.<name>separator</name></name></expr></argument>,
                         <argument><expr><call><name><name>FILE_UTILS</name>.<name>normalize</name></name><argument_list>(<argument><expr>"/"</expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>File</name>.<name>separator</name></name></expr></argument>,
                         <argument><expr><call><name><name>FILE_UTILS</name>.<name>normalize</name></name><argument_list>(<argument><expr>"\\"</expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <try>try <block>{
                 <expr_stmt><expr><call><name><name>FILE_UTILS</name>.<name>normalize</name></name><argument_list>(<argument><expr>"/"</expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"normalized \"/\" on dos or netware"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
            }</block></catch></try>
            <try>try <block>{
                 <expr_stmt><expr><call><name><name>FILE_UTILS</name>.<name>normalize</name></name><argument_list>(<argument><expr>"\\"</expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"normalized \"\\\" on dos or netware"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
            }</block></catch></try>
        }</block></else></if>

        <if>if <condition>(<expr><call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr>"dos"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="block">/*
             * throw in drive letters
             */</comment>
            <decl_stmt><decl><type><name>String</name></type> <name>driveSpec</name> =<init> <expr>"C:"</expr></init></decl>;</decl_stmt>
            <try>try <block>{
                 <expr_stmt><expr><call><name><name>FILE_UTILS</name>.<name>normalize</name></name><argument_list>(<argument><expr><name>driveSpec</name></expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                 <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><name>driveSpec</name> + " is not an absolute path"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
            }</block></catch></try>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>driveSpec</name> + "\\"</expr></argument>,
                         <argument><expr><call><name><name>FILE_UTILS</name>.<name>normalize</name></name><argument_list>(<argument><expr><name>driveSpec</name> + "/"</expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>driveSpec</name> + "\\"</expr></argument>,
                         <argument><expr><call><name><name>FILE_UTILS</name>.<name>normalize</name></name><argument_list>(<argument><expr><name>driveSpec</name> + "\\"</expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>driveSpecLower</name> =<init> <expr>"c:"</expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>driveSpecLower</name> + "\\"</expr></argument>,
                         <argument><expr><call><name><name>FILE_UTILS</name>.<name>normalize</name></name><argument_list>(<argument><expr><name>driveSpecLower</name> + "/"</expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>driveSpecLower</name> + "\\"</expr></argument>,
                         <argument><expr><call><name><name>FILE_UTILS</name>.<name>normalize</name></name><argument_list>(<argument><expr><name>driveSpecLower</name> + "\\"</expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block">/*
             * promised to eliminate consecutive slashes after drive letter.
             */</comment>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>driveSpec</name> + "\\"</expr></argument>,
                         <argument><expr><call><name><name>FILE_UTILS</name>.<name>normalize</name></name><argument_list>(<argument><expr><name>driveSpec</name> + "/////"</expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>driveSpec</name> + "\\"</expr></argument>,
                         <argument><expr><call><name><name>FILE_UTILS</name>.<name>normalize</name></name><argument_list>(<argument><expr><name>driveSpec</name> + "\\\\\\\\\\\\"</expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr>"netware"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="block">/*
             * throw in NetWare volume names
             */</comment>
            <decl_stmt><decl><type><name>String</name></type> <name>driveSpec</name> =<init> <expr>"SYS:"</expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>driveSpec</name></expr></argument>,
                         <argument><expr><call><name><name>FILE_UTILS</name>.<name>normalize</name></name><argument_list>(<argument><expr><name>driveSpec</name></expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>driveSpec</name></expr></argument>,
                         <argument><expr><call><name><name>FILE_UTILS</name>.<name>normalize</name></name><argument_list>(<argument><expr><name>driveSpec</name> + "/"</expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>driveSpec</name></expr></argument>,
                         <argument><expr><call><name><name>FILE_UTILS</name>.<name>normalize</name></name><argument_list>(<argument><expr><name>driveSpec</name> + "\\"</expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>driveSpecLower</name> =<init> <expr>"sys:"</expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>driveSpec</name></expr></argument>,
                         <argument><expr><call><name><name>FILE_UTILS</name>.<name>normalize</name></name><argument_list>(<argument><expr><name>driveSpecLower</name></expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>driveSpec</name></expr></argument>,
                         <argument><expr><call><name><name>FILE_UTILS</name>.<name>normalize</name></name><argument_list>(<argument><expr><name>driveSpecLower</name> + "/"</expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>driveSpec</name></expr></argument>,
                         <argument><expr><call><name><name>FILE_UTILS</name>.<name>normalize</name></name><argument_list>(<argument><expr><name>driveSpecLower</name> + "\\"</expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>driveSpec</name> + "\\junk"</expr></argument>,
                         <argument><expr><call><name><name>FILE_UTILS</name>.<name>normalize</name></name><argument_list>(<argument><expr><name>driveSpecLower</name> + "\\junk"</expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block">/*
             * promised to eliminate consecutive slashes after drive letter.
             */</comment>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>driveSpec</name></expr></argument>,
                         <argument><expr><call><name><name>FILE_UTILS</name>.<name>normalize</name></name><argument_list>(<argument><expr><name>driveSpec</name> + "/////"</expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>driveSpec</name></expr></argument>,
                         <argument><expr><call><name><name>FILE_UTILS</name>.<name>normalize</name></name><argument_list>(<argument><expr><name>driveSpec</name> + "\\\\\\\\\\\\"</expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <try>try <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>driveSpec</name> =<init> <expr>"C:"</expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>driveSpec</name></expr></argument>,
                             <argument><expr><call><name><name>FILE_UTILS</name>.<name>normalize</name></name><argument_list>(<argument><expr><name>driveSpec</name></expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Expected failure, C: isn't an absolute path on other os's"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>e</name></decl></param>) <block>{
                <comment type="line">// Passed test </comment>
            }</block></catch></try>
        }</block></else></if></else></if>

        <comment type="block">/*
         * Now test some relative file name magic.
         */</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>localize</name><argument_list>(<argument><expr>"/1/2/3/4"</expr></argument>)</argument_list></call></expr></argument>,
                     <argument><expr><call><name><name>FILE_UTILS</name>.<name>normalize</name></name><argument_list>(<argument><expr><call><name>localize</name><argument_list>(<argument><expr>"/1/2/3/4"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>localize</name><argument_list>(<argument><expr>"/1/2/3/4"</expr></argument>)</argument_list></call></expr></argument>,
                     <argument><expr><call><name><name>FILE_UTILS</name>.<name>normalize</name></name><argument_list>(<argument><expr><call><name>localize</name><argument_list>(<argument><expr>"/1/2/3/./4"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>localize</name><argument_list>(<argument><expr>"/1/2/3/4"</expr></argument>)</argument_list></call></expr></argument>,
                     <argument><expr><call><name><name>FILE_UTILS</name>.<name>normalize</name></name><argument_list>(<argument><expr><call><name>localize</name><argument_list>(<argument><expr>"/1/2/3/.\\4"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>localize</name><argument_list>(<argument><expr>"/1/2/3/4"</expr></argument>)</argument_list></call></expr></argument>,
                     <argument><expr><call><name><name>FILE_UTILS</name>.<name>normalize</name></name><argument_list>(<argument><expr><call><name>localize</name><argument_list>(<argument><expr>"/1/2/3/./.\\4"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>localize</name><argument_list>(<argument><expr>"/1/2/3/4"</expr></argument>)</argument_list></call></expr></argument>,
                     <argument><expr><call><name><name>FILE_UTILS</name>.<name>normalize</name></name><argument_list>(<argument><expr><call><name>localize</name><argument_list>(<argument><expr>"/1/2/3/../3/4"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>localize</name><argument_list>(<argument><expr>"/1/2/3/4"</expr></argument>)</argument_list></call></expr></argument>,
                     <argument><expr><call><name><name>FILE_UTILS</name>.<name>normalize</name></name><argument_list>(<argument><expr><call><name>localize</name><argument_list>(<argument><expr>"/1/2/3/..\\3\\4"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>localize</name><argument_list>(<argument><expr>"/1/2/3/4"</expr></argument>)</argument_list></call></expr></argument>,
                     <argument><expr><call><name><name>FILE_UTILS</name>.<name>normalize</name></name><argument_list>(<argument><expr><call><name>localize</name><argument_list>(<argument><expr>"/1/2/3/../../5/.././2/./3/6/../4"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>localize</name><argument_list>(<argument><expr>"/1/2/3/4"</expr></argument>)</argument_list></call></expr></argument>,
                     <argument><expr><call><name><name>FILE_UTILS</name>.<name>normalize</name></name><argument_list>(<argument><expr><call><name>localize</name><argument_list>(<argument><expr>"/1/2/3/..\\../5/..\\./2/./3/6\\../4"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <try>try <block>{
            <expr_stmt><expr><call><name><name>FILE_UTILS</name>.<name>normalize</name></name><argument_list>(<argument><expr>"foo"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"foo is not an absolute path"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>e</name></decl></param>) <block>{
            <comment type="line">// Expected exception caught</comment>
        }</block></catch></try>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"will not go outside FS root (but will not throw an exception either)"</expr></argument>,
                <argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>localize</name><argument_list>(<argument><expr>"/1/../../b"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>FILE_UTILS</name>.<name>normalize</name></name><argument_list>(<argument><expr><call><name>localize</name><argument_list>(<argument><expr>"/1/../../b"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Test handling of null arguments.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNullArgs</name><parameter_list>()</parameter_list> <block>{
        <try>try <block>{
            <expr_stmt><expr><call><name><name>FILE_UTILS</name>.<name>normalize</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"successfully normalized a null-file"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>NullPointerException</name></type> <name>npe</name></decl></param>) <block>{
            <comment type="line">// Expected exception caught</comment>
        }</block></catch></try>

        <decl_stmt><decl><type><name>File</name></type> <name>f</name> =<init> <expr><call><name><name>FILE_UTILS</name>.<name>resolveFile</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr>"a"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr>new <call><name>File</name><argument_list>(<argument><expr>"a"</expr></argument>)</argument_list></call>.<call><name>getAbsoluteFile</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    
    <comment type="javadoc">/**
     * Test createTempFile
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testCreateTempFile</name><parameter_list>()</parameter_list>
    <block>{
        <comment type="line">// null parent dir</comment>
        <decl_stmt><decl><type><name>File</name></type> <name>tmp1</name> =<init> <expr><call><name><name>FILE_UTILS</name>.<name>createTempFile</name></name><argument_list>(<argument><expr>"pre"</expr></argument>, <argument><expr>".suf"</expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>tmploc</name> =<init> <expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"java.io.tmpdir"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> =<init> <expr><call><name><name>tmp1</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"starts with pre"</expr></argument>, <argument><expr><call><name><name>name</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"pre"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"ends with .suf"</expr></argument>, <argument><expr><call><name><name>name</name>.<name>endsWith</name></name><argument_list>(<argument><expr>".suf"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"File was created"</expr></argument>, <argument><expr><call><name><name>tmp1</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>(new <call><name>File</name><argument_list>(<argument><expr><name>tmploc</name></expr></argument>, <argument><expr><call><name><name>tmp1</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>).<call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>tmp1</name>
                .<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>tmp1</name>.<name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>File</name></type> <name>dir2</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name>tmploc</name> + "/ant-test"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>dir2</name>.<name>mkdir</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>removeThis</name> = <name>dir2</name></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>File</name></type> <name>tmp2</name> =<init> <expr><call><name><name>FILE_UTILS</name>.<name>createTempFile</name></name><argument_list>(<argument><expr>"pre"</expr></argument>, <argument><expr>".suf"</expr></argument>, <argument><expr><name>dir2</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>name2</name> =<init> <expr><call><name><name>tmp2</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"starts with pre"</expr></argument>, <argument><expr><call><name><name>name2</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"pre"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"ends with .suf"</expr></argument>, <argument><expr><call><name><name>name2</name>.<name>endsWith</name></name><argument_list>(<argument><expr>".suf"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"File was created"</expr></argument>, <argument><expr><call><name><name>tmp2</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>(new <call><name>File</name><argument_list>(<argument><expr><name>dir2</name></expr></argument>, <argument><expr><call><name><name>tmp2</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>).<call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>tmp2</name>
                .<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>tmp2</name>.<name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dir2</name>.<name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>File</name></type> <name>parent</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr>(new <call><name>File</name><argument_list>(<argument><expr>"/tmp"</expr></argument>)</argument_list></call>).<call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>tmp1</name> = <call><name><name>FILE_UTILS</name>.<name>createTempFile</name></name><argument_list>(<argument><expr>"pre"</expr></argument>, <argument><expr>".suf"</expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"new file"</expr></argument>, <argument><expr>!<call><name><name>tmp1</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>name</name> = <call><name><name>tmp1</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"starts with pre"</expr></argument>, <argument><expr><call><name><name>name</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"pre"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"ends with .suf"</expr></argument>, <argument><expr><call><name><name>name</name>.<name>endsWith</name></name><argument_list>(<argument><expr>".suf"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"is inside parent dir"</expr></argument>, <argument><expr><call><name><name>parent</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>tmp1</name>
                .<name>getParent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>tmp2</name> = <call><name><name>FILE_UTILS</name>.<name>createTempFile</name></name><argument_list>(<argument><expr>"pre"</expr></argument>, <argument><expr>".suf"</expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"files are different"</expr></argument>, <argument><expr>!<call><name><name>tmp1</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(
                <argument><expr><call><name><name>tmp2</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// null parent dir</comment>
        <decl_stmt><decl><type><name>File</name></type> <name>tmp3</name> =<init> <expr><call><name><name>FILE_UTILS</name>.<name>createTempFile</name></name><argument_list>(<argument><expr>"pre"</expr></argument>, <argument><expr>".suf"</expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>tmploc</name> = <call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"java.io.tmpdir"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>(new <call><name>File</name><argument_list>(<argument><expr><name>tmploc</name></expr></argument>, <argument><expr><call><name><name>tmp3</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>).<call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>tmp3</name>
                .<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Test contentEquals
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testContentEquals</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Non existing files"</expr></argument>, <argument><expr><call><name><name>FILE_UTILS</name>.<name>contentEquals</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"foo"</expr></argument>)</argument_list></call></expr></argument>,
                                                          <argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"bar"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"One exists, the other one doesn\'t"</expr></argument>,
                   <argument><expr>!<call><name><name>FILE_UTILS</name>.<name>contentEquals</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"foo"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"build.xml"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Don\'t compare directories"</expr></argument>,
                   <argument><expr>!<call><name><name>FILE_UTILS</name>.<name>contentEquals</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"src"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"src"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"File equals itself"</expr></argument>,
                   <argument><expr><call><name><name>FILE_UTILS</name>.<name>contentEquals</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"build.xml"</expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"build.xml"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Files are different"</expr></argument>,
                   <argument><expr>!<call><name><name>FILE_UTILS</name>.<name>contentEquals</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"build.xml"</expr></argument>)</argument_list></call></expr></argument>,
                                     <argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"docs.xml"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Test createNewFile
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testCreateNewFile</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><name>removeThis</name> = new <call><name>File</name><argument_list>(<argument><expr>"dummy"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>!<call><name><name>removeThis</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>FILE_UTILS</name>.<name>createNewFile</name></name><argument_list>(<argument><expr><name>removeThis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>removeThis</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Test removeLeadingPath.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testRemoveLeadingPath</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"bar"</expr></argument>, <argument><expr><call><name><name>FILE_UTILS</name>.<name>removeLeadingPath</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr>"/foo"</expr></argument>)</argument_list></call></expr></argument>,
                                                 <argument><expr>new <call><name>File</name><argument_list>(<argument><expr>"/foo/bar"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"bar"</expr></argument>, <argument><expr><call><name><name>FILE_UTILS</name>.<name>removeLeadingPath</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr>"/foo/"</expr></argument>)</argument_list></call></expr></argument>,
                                                 <argument><expr>new <call><name>File</name><argument_list>(<argument><expr>"/foo/bar"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"bar"</expr></argument>, <argument><expr><call><name><name>FILE_UTILS</name>.<name>removeLeadingPath</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr>"\\foo"</expr></argument>)</argument_list></call></expr></argument>,
                                                 <argument><expr>new <call><name>File</name><argument_list>(<argument><expr>"\\foo\\bar"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"bar"</expr></argument>, <argument><expr><call><name><name>FILE_UTILS</name>.<name>removeLeadingPath</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr>"\\foo\\"</expr></argument>)</argument_list></call></expr></argument>,
                                                 <argument><expr>new <call><name>File</name><argument_list>(<argument><expr>"\\foo\\bar"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"bar"</expr></argument>, <argument><expr><call><name><name>FILE_UTILS</name>.<name>removeLeadingPath</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr>"c:/foo"</expr></argument>)</argument_list></call></expr></argument>,
                                                 <argument><expr>new <call><name>File</name><argument_list>(<argument><expr>"c:/foo/bar"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"bar"</expr></argument>, <argument><expr><call><name><name>FILE_UTILS</name>.<name>removeLeadingPath</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr>"c:/foo/"</expr></argument>)</argument_list></call></expr></argument>,
                                                 <argument><expr>new <call><name>File</name><argument_list>(<argument><expr>"c:/foo/bar"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"bar"</expr></argument>, <argument><expr><call><name><name>FILE_UTILS</name>.<name>removeLeadingPath</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr>"c:\\foo"</expr></argument>)</argument_list></call></expr></argument>,
                                                 <argument><expr>new <call><name>File</name><argument_list>(<argument><expr>"c:\\foo\\bar"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"bar"</expr></argument>, <argument><expr><call><name><name>FILE_UTILS</name>.<name>removeLeadingPath</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr>"c:\\foo\\"</expr></argument>)</argument_list></call></expr></argument>,
                                                 <argument><expr>new <call><name>File</name><argument_list>(<argument><expr>"c:\\foo\\bar"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!(<call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr>"dos"</expr></argument>)</argument_list></call> || <call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr>"netware"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>FILE_UTILS</name>.<name>normalize</name></name><argument_list>(<argument><expr>"/bar"</expr></argument>)</argument_list></call>.<call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>,
                         <argument><expr><call><name><name>FILE_UTILS</name>.<name>removeLeadingPath</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr>"/foo"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <call><name>File</name><argument_list>(<argument><expr>"/bar"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>FILE_UTILS</name>.<name>normalize</name></name><argument_list>(<argument><expr>"/foobar"</expr></argument>)</argument_list></call>.<call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>,
                         <argument><expr><call><name><name>FILE_UTILS</name>.<name>removeLeadingPath</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr>"/foo"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <call><name>File</name><argument_list>(<argument><expr>"/foobar"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <comment type="line">// bugzilla report 19979</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><call><name><name>FILE_UTILS</name>.<name>removeLeadingPath</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr>"/foo/bar"</expr></argument>)</argument_list></call></expr></argument>,
                                              <argument><expr>new <call><name>File</name><argument_list>(<argument><expr>"/foo/bar"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><call><name><name>FILE_UTILS</name>.<name>removeLeadingPath</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr>"/foo/bar"</expr></argument>)</argument_list></call></expr></argument>,
                                              <argument><expr>new <call><name>File</name><argument_list>(<argument><expr>"/foo/bar/"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><call><name><name>FILE_UTILS</name>.<name>removeLeadingPath</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr>"/foo/bar/"</expr></argument>)</argument_list></call></expr></argument>,
                                              <argument><expr>new <call><name>File</name><argument_list>(<argument><expr>"/foo/bar/"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><call><name><name>FILE_UTILS</name>.<name>removeLeadingPath</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr>"/foo/bar/"</expr></argument>)</argument_list></call></expr></argument>,
                                              <argument><expr>new <call><name>File</name><argument_list>(<argument><expr>"/foo/bar"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>expected</name> =<init> <expr>"foo/bar".<call><name>replace</name><argument_list>(<argument><expr>'\\'</expr></argument>, <argument><expr><name><name>File</name>.<name>separatorChar</name></name></expr></argument>)</argument_list></call>
            .<call><name>replace</name><argument_list>(<argument><expr>'/'</expr></argument>, <argument><expr><name><name>File</name>.<name>separatorChar</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><call><name><name>FILE_UTILS</name>.<name>removeLeadingPath</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr>"/"</expr></argument>)</argument_list></call></expr></argument>,
                                                    <argument><expr>new <call><name>File</name><argument_list>(<argument><expr>"/foo/bar"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><call><name><name>FILE_UTILS</name>.<name>removeLeadingPath</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr>"c:/"</expr></argument>)</argument_list></call></expr></argument>,
                                                    <argument><expr>new <call><name>File</name><argument_list>(<argument><expr>"c:/foo/bar"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><call><name><name>FILE_UTILS</name>.<name>removeLeadingPath</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr>"c:\\"</expr></argument>)</argument_list></call></expr></argument>,
                                                    <argument><expr>new <call><name>File</name><argument_list>(<argument><expr>"c:\\foo\\bar"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * test toUri
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testToURI</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>dosRoot</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr>"dos"</expr></argument>)</argument_list></call> || <call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr>"netware"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>dosRoot</name> = <call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"user.dir"</expr></argument>)</argument_list></call>
                .<call><name>substring</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call>.<call><name>replace</name><argument_list>(<argument><expr><name><name>File</name>.<name>separatorChar</name></name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><name>dosRoot</name> = ""</expr>;</expr_stmt>
        }</block></else></if>
        <if>if <condition>(<expr><call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr>"dos"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"file:/c:/foo"</expr></argument>, <argument><expr><call><name>removeExtraneousAuthority</name><argument_list>(<argument><expr><call><name><name>FILE_UTILS</name>.<name>toURI</name></name><argument_list>(<argument><expr>"c:\\foo"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr>"netware"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"file:/SYS:/foo"</expr></argument>, <argument><expr><call><name>removeExtraneousAuthority</name><argument_list>(<argument><expr><call><name><name>FILE_UTILS</name>.<name>toURI</name></name><argument_list>(<argument><expr>"sys:\\foo"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>File</name>.<name>pathSeparatorChar</name></name> == '/'</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"file:/foo"</expr></argument>, <argument><expr><call><name>removeExtraneousAuthority</name><argument_list>(<argument><expr><call><name><name>FILE_UTILS</name>.<name>toURI</name></name><argument_list>(<argument><expr>"/foo"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"file: URIs must name absolute paths"</expr></argument>, <argument><expr><call><name><name>FILE_UTILS</name>.<name>toURI</name></name><argument_list>(<argument><expr>"./foo"</expr></argument>)</argument_list></call>.<call><name>startsWith</name><argument_list>(<argument><expr>"file:/"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>FILE_UTILS</name>.<name>toURI</name></name><argument_list>(<argument><expr>"./foo"</expr></argument>)</argument_list></call>.<call><name>endsWith</name><argument_list>(<argument><expr>"/foo"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"file:/" + <name>dosRoot</name> + "foo%20bar"</expr></argument>, <argument><expr><call><name>removeExtraneousAuthority</name><argument_list>(<argument><expr><call><name><name>FILE_UTILS</name>.<name>toURI</name></name><argument_list>(<argument><expr>"/foo bar"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"file:/" + <name>dosRoot</name> + "foo%23bar"</expr></argument>, <argument><expr><call><name>removeExtraneousAuthority</name><argument_list>(<argument><expr><call><name><name>FILE_UTILS</name>.<name>toURI</name></name><argument_list>(<argument><expr>"/foo#bar"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><name><name>File</name>.<name>pathSeparatorChar</name></name> == '\\'</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"file:/" + <name>dosRoot</name> + "foo"</expr></argument>, <argument><expr><call><name>removeExtraneousAuthority</name><argument_list>(<argument><expr><call><name><name>FILE_UTILS</name>.<name>toURI</name></name><argument_list>(<argument><expr>"\\foo"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"file: URIs must name absolute paths"</expr></argument>, <argument><expr><call><name><name>FILE_UTILS</name>.<name>toURI</name></name><argument_list>(<argument><expr>".\\foo"</expr></argument>)</argument_list></call>.<call><name>startsWith</name><argument_list>(<argument><expr>"file:/"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>FILE_UTILS</name>.<name>toURI</name></name><argument_list>(<argument><expr>".\\foo"</expr></argument>)</argument_list></call>.<call><name>endsWith</name><argument_list>(<argument><expr>"/foo"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"file:/" + <name>dosRoot</name> + "foo%20bar"</expr></argument>, <argument><expr><call><name>removeExtraneousAuthority</name><argument_list>(<argument><expr><call><name><name>FILE_UTILS</name>.<name>toURI</name></name><argument_list>(<argument><expr>"\\foo bar"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"file:/" + <name>dosRoot</name> + "foo%23bar"</expr></argument>, <argument><expr><call><name>removeExtraneousAuthority</name><argument_list>(<argument><expr><call><name><name>FILE_UTILS</name>.<name>toURI</name></name><argument_list>(<argument><expr>"\\foo#bar"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>
        <comment type="line">// a test with ant for germans</comment>
        <comment type="line">// the escaped character used for the test is the "a umlaut"</comment>
        <comment type="line">// this is the fix for the bug 37348</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"file:/" + <name>dosRoot</name> + "%C3%A4nt"</expr></argument>, <argument><expr><call><name>removeExtraneousAuthority</name><argument_list>(<argument><expr><call><name><name>FILE_UTILS</name>.<name>toURI</name></name><argument_list>(<argument><expr>"/\u00E4nt"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Authority field is unnecessary, but harmless, in file: URIs.
     * Java 1.4 does not produce it when using File.toURI.
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>removeExtraneousAuthority</name><parameter_list>(<param><decl><type><name>String</name></type> <name>uri</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>prefix</name> =<init> <expr>"file:///"</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>uri</name>.<name>startsWith</name></name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>"file:/" + <call><name><name>uri</name>.<name>substring</name></name><argument_list>(<argument><expr><call><name><name>prefix</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
            <return>return <expr><name>uri</name></expr>;</return>
        }</block></else></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testIsContextRelativePath</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr>"dos"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>FileUtils</name>.<name>isContextRelativePath</name></name><argument_list>(<argument><expr>"/\u00E4nt"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>FileUtils</name>.<name>isContextRelativePath</name></name><argument_list>(<argument><expr>"\\foo"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>
    <comment type="javadoc">/**
     * test fromUri
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFromURI</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>dosRoot</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr>"dos"</expr></argument>)</argument_list></call> || <call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr>"netware"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>dosRoot</name> = <call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"user.dir"</expr></argument>)</argument_list></call>.<call><name>substring</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>dosRoot</name> = ""</expr>;</expr_stmt>
        }</block></else></if>
        <if>if <condition>(<expr><call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr>"netware"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>assertEqualsIgnoreDriveCase</name><argument_list>(<argument><expr>"SYS:\\foo"</expr></argument>, <argument><expr><call><name><name>FILE_UTILS</name>.<name>fromURI</name></name><argument_list>(<argument><expr>"file:///sys:/foo"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr>"dos"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>assertEqualsIgnoreDriveCase</name><argument_list>(<argument><expr>"C:\\foo"</expr></argument>, <argument><expr><call><name><name>FILE_UTILS</name>.<name>fromURI</name></name><argument_list>(<argument><expr>"file:///c:/foo"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>assertEqualsIgnoreDriveCase</name><argument_list>(<argument><expr><name>dosRoot</name> + <name><name>File</name>.<name>separator</name></name> + "foo"</expr></argument>, <argument><expr><call><name><name>FILE_UTILS</name>.<name>fromURI</name></name><argument_list>(<argument><expr>"file:///foo"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"." + <name><name>File</name>.<name>separator</name></name> + "foo"</expr></argument>,
                     <argument><expr><call><name><name>FILE_UTILS</name>.<name>fromURI</name></name><argument_list>(<argument><expr>"file:./foo"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>dosRoot</name> + <name><name>File</name>.<name>separator</name></name> + "foo bar"</expr></argument>, <argument><expr><call><name><name>FILE_UTILS</name>.<name>fromURI</name></name><argument_list>(<argument><expr>"file:///foo%20bar"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>dosRoot</name> + <name><name>File</name>.<name>separator</name></name> + "foo#bar"</expr></argument>, <argument><expr><call><name><name>FILE_UTILS</name>.<name>fromURI</name></name><argument_list>(<argument><expr>"file:///foo%23bar"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testModificationTests</name><parameter_list>()</parameter_list> <block>{

        <comment type="line">//get a time</comment>
        <decl_stmt><decl><type><name>long</name></type> <name>firstTime</name>=<init><expr><call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">//add some time. We assume no OS has a granularity this bad</comment>
        <decl_stmt><decl><type><name>long</name></type> <name>secondTime</name>=<init><expr><name>firstTime</name>+60000</expr></init></decl>;</decl_stmt>
<comment type="block">/*
        assertTrue("same timestamp is up to date",
                fu.isUpToDate(firstTime, firstTime));
                */</comment>

        <comment type="line">//check that older is up to date with a newer dest</comment>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"older source files are up to date"</expr></argument>,
                <argument><expr><call><name><name>FILE_UTILS</name>.<name>isUpToDate</name></name><argument_list>(<argument><expr><name>firstTime</name></expr></argument>,<argument><expr><name>secondTime</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//check that older is up to date with a newer dest</comment>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr>"newer source files are no up to date"</expr></argument>,
                <argument><expr><call><name><name>FILE_UTILS</name>.<name>isUpToDate</name></name><argument_list>(<argument><expr><name>secondTime</name></expr></argument>, <argument><expr><name>firstTime</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"-1 dest timestamp implies nonexistence"</expr></argument>,
                <argument><expr>!<call><name><name>FILE_UTILS</name>.<name>isUpToDate</name></name><argument_list>(<argument><expr><name>firstTime</name></expr></argument>,<argument><expr>-1L</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testHasErrorInCase</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>tempFolder</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"java.io.tmpdir"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>wellcased</name> =<init> <expr><call><name><name>FILE_UTILS</name>.<name>createTempFile</name></name><argument_list>(<argument><expr>"alpha"</expr></argument>, <argument><expr>"beta"</expr></argument>, <argument><expr><name>tempFolder</name></expr></argument>,
                                                   <argument><expr>true</expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>s</name> =<init> <expr><call><name><name>wellcased</name>.<name>getName</name></name><argument_list>()</argument_list></call>.<call><name>toUpperCase</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>wrongcased</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name>tempFolder</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr>"mac"</expr></argument>)</argument_list></call> &amp;&amp; <call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr>"unix"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">//no guarantees on filesystem case-sensitivity</comment>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr>"dos"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>FILE_UTILS</name>.<name>hasErrorInCase</name></name><argument_list>(<argument><expr><name>wrongcased</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>FILE_UTILS</name>.<name>hasErrorInCase</name></name><argument_list>(<argument><expr><name>wellcased</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>FILE_UTILS</name>.<name>hasErrorInCase</name></name><argument_list>(<argument><expr><name>wrongcased</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>FILE_UTILS</name>.<name>hasErrorInCase</name></name><argument_list>(<argument><expr><name>wellcased</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if></else></if>
        
    }</block></function>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testGetDefaultEncoding</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// This just tests that the function does not blow up</comment>
        <expr_stmt><expr><call><name><name>FILE_UTILS</name>.<name>getDefaultEncoding</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * adapt file separators to local conventions
     */</comment>
    <function><type><specifier>private</specifier> <name>String</name></type> <name>localize</name><parameter_list>(<param><decl><type><name>String</name></type> <name>path</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>path</name> = <name>root</name> + <call><name><name>path</name>.<name>substring</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>path</name>.<name>replace</name></name><argument_list>(<argument><expr>'\\'</expr></argument>, <argument><expr><name><name>File</name>.<name>separatorChar</name></name></expr></argument>)</argument_list></call>.<call><name>replace</name><argument_list>(<argument><expr>'/'</expr></argument>, <argument><expr><name><name>File</name>.<name>separatorChar</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * convenience method
     * normalize brings the drive in uppercase
     * the drive letter is in lower case under cygwin
     * calling this method allows tests where normalize is called to pass under cygwin
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>assertEqualsIgnoreDriveCase</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s1</name></decl></param>, <param><decl><type><name>String</name></type> <name>s2</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr>(<call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr>"dos"</expr></argument>)</argument_list></call> || <call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr>"netware"</expr></argument>)</argument_list></call>)
            &amp;&amp; <call><name><name>s1</name>.<name>length</name></name><argument_list>()</argument_list></call> &gt; 0 &amp;&amp; <call><name><name>s2</name>.<name>length</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>StringBuffer</name></type> <name>sb1</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>StringBuffer</name></type> <name>sb2</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>sb1</name>.<name>setCharAt</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>Character</name>.<name>toUpperCase</name></name><argument_list>(<argument><expr><call><name><name>s1</name>.<name>charAt</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb2</name>.<name>setCharAt</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>Character</name>.<name>toUpperCase</name></name><argument_list>(<argument><expr><call><name><name>s2</name>.<name>charAt</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>sb1</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>sb2</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>
}</block></class>
</unit>
