<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\jlink\jlink.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<comment type="javadoc">/**
 * jlink.java links together multiple .jar files Original code by Patrick
 * Beard. Modifications to work with ANT by Matthew Kuperus Heun.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>jlink</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>

<import>import <name><name>java</name>.<name>io</name>.<name>BufferedInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>zip</name>.<name>CRC32</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>zip</name>.<name>Deflater</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>zip</name>.<name>ZipEntry</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>zip</name>.<name>ZipException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>zip</name>.<name>ZipFile</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>zip</name>.<name>ZipOutputStream</name></name>;</import>

<comment type="line">// CheckStyle:TypeNameCheck OFF - bc</comment>
<comment type="javadoc">/**
 * jlink links together multiple .jar files.
 */</comment>
<class><specifier>public</specifier> class <name>jlink</name> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>BUFFER_SIZE</name> =<init> <expr>8192</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>VECTOR_INIT_SIZE</name> =<init> <expr>10</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>outfile</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Vector</name></type> <name>mergefiles</name> =<init> <expr>new <call><name>Vector</name><argument_list>(<argument><expr><name>VECTOR_INIT_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Vector</name></type> <name>addfiles</name> =<init> <expr>new <call><name>Vector</name><argument_list>(<argument><expr><name>VECTOR_INIT_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>compression</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="line">// CheckStyle:VisibilityModifier OFF - bc</comment>

    <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>buffer</name> =<init> <expr>new <name><name>byte</name><index>[<expr><name>BUFFER_SIZE</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <comment type="line">// CheckStyle:VisibilityModifier OFF - bc</comment>

    <comment type="javadoc">/** The file that will be created by this instance of jlink.
     * @param outfile the file to create.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOutfile</name><parameter_list>(<param><decl><type><name>String</name></type> <name>outfile</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>outfile</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>outfile</name></name> = <name>outfile</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Adds a file to be merged into the output.
     * @param fileToMerge the file to merge into the output.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addMergeFile</name><parameter_list>(<param><decl><type><name>String</name></type> <name>fileToMerge</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>fileToMerge</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>mergefiles</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>fileToMerge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/** Adds a file to be added into the output.
     * @param fileToAdd the file to add to the output.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addAddFile</name><parameter_list>(<param><decl><type><name>String</name></type> <name>fileToAdd</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>fileToAdd</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>addfiles</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>fileToAdd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Adds several files to be merged into the output.
     * @param filesToMerge an array of files to merge into the output.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addMergeFiles</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>filesToMerge</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>filesToMerge</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>filesToMerge</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name>addMergeFile</name><argument_list>(<argument><expr><name><name>filesToMerge</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>


    <comment type="javadoc">/**
     * Adds several file to be added into the output.
     * @param filesToAdd an array of files to add to the output.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addAddFiles</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>filesToAdd</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>filesToAdd</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>filesToAdd</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name>addAddFile</name><argument_list>(<argument><expr><name><name>filesToAdd</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>


    <comment type="javadoc">/**
     * Determines whether output will be compressed.
     * @param compress if true use compression.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCompression</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>compress</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>compression</name></name> = <name>compress</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Performs the linking of files. Addfiles are added to the output as-is.
     * For example, a jar file is added to the output as a jar file. However,
     * mergefiles are first examined for their type. If it is a jar or zip
     * file, the contents will be extracted from the mergefile and entered
     * into the output. If a zip or jar file is encountered in a subdirectory
     * it will be added, not merged. If a directory is encountered, it becomes
     * the root entry of all the files below it. Thus, you can provide
     * multiple, disjoint directories, as addfiles: they will all be added in
     * a rational manner to outfile.
     * @throws Exception on error.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>link</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>ZipOutputStream</name></type> <name>output</name> =<init> <expr>new <call><name>ZipOutputStream</name><argument_list>(<argument><expr>new <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>compression</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>output</name>.<name>setMethod</name></name><argument_list>(<argument><expr><name><name>ZipOutputStream</name>.<name>DEFLATED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>output</name>.<name>setLevel</name></name><argument_list>(<argument><expr><name><name>Deflater</name>.<name>DEFAULT_COMPRESSION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>output</name>.<name>setMethod</name></name><argument_list>(<argument><expr><name><name>ZipOutputStream</name>.<name>STORED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <decl_stmt><decl><type><name>Enumeration</name></type> <name>merges</name> =<init> <expr><call><name><name>mergefiles</name>.<name>elements</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <while>while <condition>(<expr><call><name><name>merges</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>path</name> =<init> <expr>(<name>String</name>) <call><name><name>merges</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>File</name></type> <name>f</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><call><name><name>f</name>.<name>getName</name></name><argument_list>()</argument_list></call>.<call><name>endsWith</name><argument_list>(<argument><expr>".jar"</expr></argument>)</argument_list></call> || <call><name><name>f</name>.<name>getName</name></name><argument_list>()</argument_list></call>.<call><name>endsWith</name><argument_list>(<argument><expr>".zip"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <comment type="line">//Do the merge</comment>
                <expr_stmt><expr><call><name>mergeZipJarContents</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <comment type="line">//Add this file to the addfiles Vector and add it</comment>
                <comment type="line">//later at the top level of the output file.</comment>
                <expr_stmt><expr><call><name>addAddFile</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></while>

        <decl_stmt><decl><type><name>Enumeration</name></type> <name>adds</name> =<init> <expr><call><name><name>addfiles</name>.<name>elements</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <while>while <condition>(<expr><call><name><name>adds</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>name</name> =<init> <expr>(<name>String</name>) <call><name><name>adds</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>File</name></type> <name>f</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><call><name><name>f</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <comment type="line">//System.out.println("in jlink: adding directory contents of " + f.getPath());</comment>
                <expr_stmt><expr><call><name>addDirContents</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><call><name><name>f</name>.<name>getName</name></name><argument_list>()</argument_list></call> + '/'</expr></argument>, <argument><expr><name>compression</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>addFile</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>compression</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></while>
        <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * The command line entry point for jlink.
     * @param args an array of arguments
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// jlink output input1 ... inputN</comment>
        <if>if <condition>(<expr><name><name>args</name>.<name>length</name></name> &lt; 2</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"usage: jlink output input1 ... inputN"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>exit</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>jlink</name></type> <name>linker</name> =<init> <expr>new <call><name>jlink</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>linker</name>.<name>setOutfile</name></name><argument_list>(<argument><expr><name><name>args</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// To maintain compatibility with the command-line version,</comment>
        <comment type="line">// we will only add files to be merged.</comment>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>1</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>args</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>linker</name>.<name>addMergeFile</name></name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>linker</name>.<name>link</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>ex</name></decl></param>) <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>print</name></name><argument_list>(<argument><expr><call><name><name>ex</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>


    <comment type="block">/*
     * Actually performs the merging of f into the output.
     * f should be a zip or jar file.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>mergeZipJarContents</name><parameter_list>(<param><decl><type><name>ZipOutputStream</name></type> <name>output</name></decl></param>, <param><decl><type><name>File</name></type> <name>f</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <comment type="line">//Check to see that the file with name "name" exists.</comment>
        <if>if <condition>(<expr>!<call><name><name>f</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>ZipFile</name></type> <name>zipf</name> =<init> <expr>new <call><name>ZipFile</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Enumeration</name></type> <name>entries</name> =<init> <expr><call><name><name>zipf</name>.<name>entries</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <while>while <condition>(<expr><call><name><name>entries</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>ZipEntry</name></type> <name>inputEntry</name> =<init> <expr>(<name>ZipEntry</name>) <call><name><name>entries</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">//Ignore manifest entries.  They're bound to cause conflicts between</comment>
            <comment type="line">//files that are being merged.  User should supply their own</comment>
            <comment type="line">//manifest file when doing the merge.</comment>
            <decl_stmt><decl><type><name>String</name></type> <name>inputEntryName</name> =<init> <expr><call><name><name>inputEntry</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>index</name> =<init> <expr><call><name><name>inputEntryName</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"META-INF"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>index</name> &lt; 0</expr>)</condition><then> <block>{
                <comment type="line">//META-INF not found in the name of the entry. Go ahead and process it.</comment>
                <try>try <block>{
                    <expr_stmt><expr><call><name><name>output</name>.<name>putNextEntry</name></name><argument_list>(<argument><expr><call><name>processEntry</name><argument_list>(<argument><expr><name>zipf</name></expr></argument>, <argument><expr><name>inputEntry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>ZipException</name></type> <name>ex</name></decl></param>) <block>{
                    <comment type="line">//If we get here, it could be because we are trying to put a</comment>
                    <comment type="line">//directory entry that already exists.</comment>
                    <comment type="line">//For example, we're trying to write "com", but a previous</comment>
                    <comment type="line">//entry from another mergefile was called "com".</comment>
                    <comment type="line">//In that case, just ignore the error and go on to the</comment>
                    <comment type="line">//next entry.</comment>
                    <decl_stmt><decl><type><name>String</name></type> <name>mess</name> =<init> <expr><call><name><name>ex</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <if>if <condition>(<expr><call><name><name>mess</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"duplicate"</expr></argument>)</argument_list></call> &gt;= 0</expr>)</condition><then> <block>{
                        <comment type="line">//It was the duplicate entry.</comment>
                        <continue>continue;</continue>
                    }</block></then> <else>else <block>{
                        <comment type="line">// I hate to admit it, but we don't know what happened</comment>
                        <comment type="line">// here.  Throw the Exception.</comment>
                        <throw>throw <expr><name>ex</name></expr>;</throw>
                    }</block></else></if>
                }</block></catch></try>

                <decl_stmt><decl><type><name>InputStream</name></type> <name>in</name> =<init> <expr><call><name><name>zipf</name>.<name>getInputStream</name></name><argument_list>(<argument><expr><name>inputEntry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>len</name> =<init> <expr><name><name>buffer</name>.<name>length</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>count</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>

                <while>while <condition>(<expr>(<name>count</name> = <call><name><name>in</name>.<name>read</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call>) &gt; 0</expr>)</condition> <block>{
                    <expr_stmt><expr><call><name><name>output</name>.<name>write</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></while>
                <expr_stmt><expr><call><name><name>in</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>output</name>.<name>closeEntry</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></while>
        <expr_stmt><expr><call><name><name>zipf</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="block">/*
     * Adds contents of a directory to the output.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>addDirContents</name><parameter_list>(<param><decl><type><name>ZipOutputStream</name></type> <name>output</name></decl></param>, <param><decl><type><name>File</name></type> <name>dir</name></decl></param>, <param><decl><type><name>String</name></type> <name>prefix</name></decl></param>,
                                <param><decl><type><name>boolean</name></type> <name>compress</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>contents</name> =<init> <expr><call><name><name>dir</name>.<name>list</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>contents</name>.<name>length</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>name</name> =<init> <expr><name><name>contents</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>File</name></type> <name>file</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><call><name><name>file</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>addDirContents</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>prefix</name> + <name>name</name> + '/'</expr></argument>, <argument><expr><name>compress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>addFile</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>compress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></for>
    }</block></function>


    <comment type="block">/*
     * Gets the name of an entry in the file.  This is the real name
     * which for a class is the name of the package with the class
     * name appended.
     */</comment>
    <function><type><specifier>private</specifier> <name>String</name></type> <name>getEntryName</name><parameter_list>(<param><decl><type><name>File</name></type> <name>file</name></decl></param>, <param><decl><type><name>String</name></type> <name>prefix</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> =<init> <expr><call><name><name>file</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr>!<call><name><name>name</name>.<name>endsWith</name></name><argument_list>(<argument><expr>".class"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">// see if the file is in fact a .class file, and determine its actual name.</comment>
            <decl_stmt><decl><type><name>InputStream</name></type> <name>input</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <try>try <block>{
                <expr_stmt><expr><name>input</name> = new <call><name>FileInputStream</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>className</name> =<init> <expr><call><name><name>ClassNameReader</name>.<name>getClassName</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if>if <condition>(<expr><name>className</name> != <name>null</name></expr>)</condition><then> <block>{
                    <return>return <expr><call><name><name>className</name>.<name>replace</name></name><argument_list>(<argument><expr>'.'</expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call> + ".class"</expr>;</return>
                }</block></then></if>
            }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ioe</name></decl></param>) <block>{
                <comment type="line">//do nothing</comment>
            }</block></catch> <finally>finally <block>{
                <if>if <condition>(<expr><name>input</name> != <name>null</name></expr>)</condition><then> <block>{
                    <try>try <block>{
                        <expr_stmt><expr><call><name><name>input</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
                        <comment type="line">//do nothing</comment>
                    }</block></catch></try>
                }</block></then></if>
            }</block></finally></try>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"From " + <call><name><name>file</name>.<name>getPath</name></name><argument_list>()</argument_list></call> + " and prefix " + <name>prefix</name>
                           + ", creating entry " + <name>prefix</name> + <name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>(<name>prefix</name> + <name>name</name>)</expr>;</return>
    }</block></function>


    <comment type="block">/*
     * Adds a file to the output stream.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>addFile</name><parameter_list>(<param><decl><type><name>ZipOutputStream</name></type> <name>output</name></decl></param>, <param><decl><type><name>File</name></type> <name>file</name></decl></param>, <param><decl><type><name>String</name></type> <name>prefix</name></decl></param>,
                         <param><decl><type><name>boolean</name></type> <name>compress</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <comment type="line">//Make sure file exists</comment>
        <if>if <condition>(<expr>!<call><name><name>file</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>ZipEntry</name></type> <name>entry</name> =<init> <expr>new <call><name>ZipEntry</name><argument_list>(<argument><expr><call><name>getEntryName</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>entry</name>.<name>setTime</name></name><argument_list>(<argument><expr><call><name><name>file</name>.<name>lastModified</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>entry</name>.<name>setSize</name></name><argument_list>(<argument><expr><call><name><name>file</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>compress</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>entry</name>.<name>setCrc</name></name><argument_list>(<argument><expr><call><name>calcChecksum</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>FileInputStream</name></type> <name>input</name> =<init> <expr>new <call><name>FileInputStream</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>addToOutputStream</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="block">/*
     * A convenience method that several other methods might call.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>addToOutputStream</name><parameter_list>(<param><decl><type><name>ZipOutputStream</name></type> <name>output</name></decl></param>, <param><decl><type><name>InputStream</name></type> <name>input</name></decl></param>,
                                   <param><decl><type><name>ZipEntry</name></type> <name>ze</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <try>try <block>{
            <expr_stmt><expr><call><name><name>output</name>.<name>putNextEntry</name></name><argument_list>(<argument><expr><name>ze</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>ZipException</name></type> <name>zipEx</name></decl></param>) <block>{
            <comment type="line">//This entry already exists. So, go with the first one.</comment>
            <expr_stmt><expr><call><name><name>input</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></catch></try>

        <decl_stmt><decl><type><name>int</name></type> <name>numBytes</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>

        <while>while <condition>(<expr>(<name>numBytes</name> = <call><name><name>input</name>.<name>read</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call>) &gt; 0</expr>)</condition> <block>{
            <expr_stmt><expr><call><name><name>output</name>.<name>write</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>numBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <expr_stmt><expr><call><name><name>output</name>.<name>closeEntry</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>input</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="block">/*
     * A method that does the work on a given entry in a mergefile.
     * The big deal is to set the right parameters in the ZipEntry
     * on the output stream.
     */</comment>
    <function><type><specifier>private</specifier> <name>ZipEntry</name></type> <name>processEntry</name><parameter_list>(<param><decl><type><name>ZipFile</name></type> <name>zip</name></decl></param>, <param><decl><type><name>ZipEntry</name></type> <name>inputEntry</name></decl></param>)</parameter_list> <block>{
        <comment type="block">/*
          First, some notes.
          On MRJ 2.2.2, getting the size, compressed size, and CRC32 from the
          ZipInputStream does not work for compressed (deflated) files.  Those calls return -1.
          For uncompressed (stored) files, those calls do work.
          However, using ZipFile.getEntries() works for both compressed and
          uncompressed files.

          Now, from some simple testing I did, it seems that the value of CRC-32 is
          independent of the compression setting. So, it should be easy to pass this
          information on to the output entry.
        */</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> =<init> <expr><call><name><name>inputEntry</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr>!(<call><name><name>inputEntry</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call> || <call><name><name>name</name>.<name>endsWith</name></name><argument_list>(<argument><expr>".class"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
            <try>try <block>{
                <decl_stmt><decl><type><name>InputStream</name></type> <name>input</name> =<init> <expr><call><name><name>zip</name>.<name>getInputStream</name></name><argument_list>(<argument><expr><call><name><name>zip</name>.<name>getEntry</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>className</name> =<init> <expr><call><name><name>ClassNameReader</name>.<name>getClassName</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name><name>input</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>className</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>name</name> = <call><name><name>className</name>.<name>replace</name></name><argument_list>(<argument><expr>'.'</expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call> + ".class"</expr>;</expr_stmt>
                }</block></then></if>
            }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ioe</name></decl></param>) <block>{
                <comment type="line">//do nothing</comment>
            }</block></catch></try>
        }</block></then></if>
        <decl_stmt><decl><type><name>ZipEntry</name></type> <name>outputEntry</name> =<init> <expr>new <call><name>ZipEntry</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>outputEntry</name>.<name>setTime</name></name><argument_list>(<argument><expr><call><name><name>inputEntry</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>outputEntry</name>.<name>setExtra</name></name><argument_list>(<argument><expr><call><name><name>inputEntry</name>.<name>getExtra</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>outputEntry</name>.<name>setComment</name></name><argument_list>(<argument><expr><call><name><name>inputEntry</name>.<name>getComment</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>outputEntry</name>.<name>setTime</name></name><argument_list>(<argument><expr><call><name><name>inputEntry</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>compression</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>outputEntry</name>.<name>setMethod</name></name><argument_list>(<argument><expr><name><name>ZipEntry</name>.<name>DEFLATED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">//Note, don't need to specify size or crc for compressed files.</comment>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>outputEntry</name>.<name>setMethod</name></name><argument_list>(<argument><expr><name><name>ZipEntry</name>.<name>STORED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>outputEntry</name>.<name>setCrc</name></name><argument_list>(<argument><expr><call><name><name>inputEntry</name>.<name>getCrc</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>outputEntry</name>.<name>setSize</name></name><argument_list>(<argument><expr><call><name><name>inputEntry</name>.<name>getSize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><name>outputEntry</name></expr>;</return>
    }</block></function>


    <comment type="block">/*
     * Necessary in the case where you add a entry that
     * is not compressed.
     */</comment>
    <function><type><specifier>private</specifier> <name>long</name></type> <name>calcChecksum</name><parameter_list>(<param><decl><type><name>File</name></type> <name>f</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>BufferedInputStream</name></type> <name>in</name> =<init> <expr>new <call><name>BufferedInputStream</name><argument_list>(<argument><expr>new <call><name>FileInputStream</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><call><name>calcChecksum</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <comment type="block">/*
     * Necessary in the case where you add a entry that
     * is not compressed.
     */</comment>
    <function><type><specifier>private</specifier> <name>long</name></type> <name>calcChecksum</name><parameter_list>(<param><decl><type><name>InputStream</name></type> <name>in</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>CRC32</name></type> <name>crc</name> =<init> <expr>new <call><name>CRC32</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>len</name> =<init> <expr><name><name>buffer</name>.<name>length</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>count</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>haveRead</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

        <while>while <condition>(<expr>(<name>count</name> = <call><name><name>in</name>.<name>read</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call>) &gt; 0</expr>)</condition> <block>{
            <expr_stmt><expr><name>haveRead</name> += <name>count</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>crc</name>.<name>update</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <expr_stmt><expr><call><name><name>in</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>crc</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>


}</block></class>


</unit>
