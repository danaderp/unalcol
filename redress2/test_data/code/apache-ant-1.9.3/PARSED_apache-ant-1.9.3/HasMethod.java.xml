<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\condition\HasMethod.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>condition</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Path</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Reference</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>AntClassLoader</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>ProjectComponent</name></name>;</import>

<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name>.<name>Method</name></name>;</import>
<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name>.<name>Field</name></name>;</import>

<comment type="javadoc">/**
 * test for a method
 */</comment>
<class><specifier>public</specifier> class <name>HasMethod</name> <super><extends>extends <name>ProjectComponent</name></extends> <implements>implements <name>Condition</name></implements></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>classname</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>method</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>field</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Path</name></type> <name>classpath</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>AntClassLoader</name></type> <name>loader</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>ignoreSystemClasses</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>


    <comment type="javadoc">/**
     * Set the classpath to be used when searching for classes and resources.
     *
     * @param classpath an Ant Path object containing the search path.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setClasspath</name><parameter_list>(<param><decl><type><name>Path</name></type> <name>classpath</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>createClasspath</name><argument_list>()</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><name>classpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Classpath to be used when searching for classes and resources.
     *
     * @return an empty Path instance to be configured by Ant.
     */</comment>
    <function><type><specifier>public</specifier> <name>Path</name></type> <name>createClasspath</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>classpath</name></name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>classpath</name></name> = new <call><name>Path</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><call><name><name>this</name>.<name>classpath</name>.<name>createPath</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the classpath by reference.
     *
     * @param r a Reference to a Path instance to be used as the classpath
     *          value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setClasspathRef</name><parameter_list>(<param><decl><type><name>Reference</name></type> <name>r</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>createClasspath</name><argument_list>()</argument_list></call>.<call><name>setRefid</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the classname attribute.
     * @param classname the name of the class to check.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setClassname</name><parameter_list>(<param><decl><type><name>String</name></type> <name>classname</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>classname</name></name> = <name>classname</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the name of the method.
     * @param method the name of the method to check.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMethod</name><parameter_list>(<param><decl><type><name>String</name></type> <name>method</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>method</name></name> = <name>method</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the name of the field.
     * @param field the name of the field to check.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setField</name><parameter_list>(<param><decl><type><name>String</name></type> <name>field</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>field</name></name> = <name>field</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set whether to ignore system classes when looking for the class.
     * @param ignoreSystemClasses a &lt;code&gt;boolean&lt;/code&gt; value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setIgnoreSystemClasses</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>ignoreSystemClasses</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>ignoreSystemClasses</name></name> = <name>ignoreSystemClasses</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Check if a given class can be loaded.
     */</comment>
    <function><type><specifier>private</specifier> <name>Class</name></type> <name>loadClass</name><parameter_list>(<param><decl><type><name>String</name></type> <name>classname</name></decl></param>)</parameter_list> <block>{
        <try>try <block>{
            <if>if <condition>(<expr><name>ignoreSystemClasses</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>loader</name> = <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>createClassLoader</name><argument_list>(<argument><expr><name>classpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>loader</name>.<name>setParentFirst</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>loader</name>.<name>addJavaLibraries</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <try>try <block>{
                    <return>return <expr><call><name><name>loader</name>.<name>findClass</name></name><argument_list>(<argument><expr><name>classname</name></expr></argument>)</argument_list></call></expr>;</return>
                }</block> <catch>catch (<param><decl><type><name>SecurityException</name></type> <name>se</name></decl></param>) <block>{
                    <comment type="line">// class found but restricted name</comment>
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"class \"" + <name>classname</name>
                                             + "\" was found but a"
                                             + " SecurityException has been"
                                             + " raised while loading it"</expr></argument>,
                                             <argument><expr><name>se</name></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></catch></try>
            }</block></then> <else>else <if>if <condition>(<expr><name>loader</name> != <name>null</name></expr>)</condition><then> <block>{
                <comment type="line">// How do we ever get here?</comment>
                <return>return <expr><call><name><name>loader</name>.<name>loadClass</name></name><argument_list>(<argument><expr><name>classname</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then> <else>else <block>{
                <decl_stmt><decl><type><name>ClassLoader</name></type> <name>l</name> =<init> <expr><call><name><name>this</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getClassLoader</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <comment type="line">// Can return null to represent the bootstrap class loader.</comment>
                <comment type="line">// see API docs of Class.getClassLoader.</comment>
                <if>if <condition>(<expr><name>l</name> != <name>null</name></expr>)</condition><then> <block>{
                    <return>return <expr><call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr><name>classname</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</return>
                }</block></then> <else>else <block>{
                    <return>return <expr><call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr><name>classname</name></expr></argument>)</argument_list></call></expr>;</return>
                }</block></else></if>
            }</block></else></if></else></if>
        }</block> <catch>catch (<param><decl><type><name>ClassNotFoundException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"class \"" + <name>classname</name>
                                     + "\" was not found"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <catch>catch (<param><decl><type><name>NoClassDefFoundError</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Could not load dependent class \""
                                     + <call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call>
                                     + "\" for class \"" + <name>classname</name> + "\""</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>


    <comment type="javadoc">/** {@inheritDoc}. */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>eval</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>classname</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"No classname defined"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>ClassLoader</name></type> <name>preLoadClass</name> =<init> <expr><name>loader</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <decl_stmt><decl><type><name>Class</name></type> <name>clazz</name> =<init> <expr><call><name>loadClass</name><argument_list>(<argument><expr><name>classname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>method</name> != <name>null</name></expr>)</condition><then> <block>{
                <return>return <expr><call><name>isMethodFound</name><argument_list>(<argument><expr><name>clazz</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>
            <if>if <condition>(<expr><name>field</name> != <name>null</name></expr>)</condition><then> <block>{
                <return>return <expr><call><name>isFieldFound</name><argument_list>(<argument><expr><name>clazz</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Neither method nor field defined"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block> <finally>finally <block>{
            <if>if <condition>(<expr><name>preLoadClass</name> != <name>loader</name> &amp;&amp; <name>loader</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>loader</name>.<name>cleanup</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>loader</name> = <name>null</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></finally></try>
    }</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>isFieldFound</name><parameter_list>(<param><decl><type><name>Class</name></type> <name>clazz</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Field</name><index>[]</index></type> <name>fields</name> =<init> <expr><call><name><name>clazz</name>.<name>getDeclaredFields</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>fields</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>Field</name></type> <name>fieldEntry</name> =<init> <expr><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>fieldEntry</name>.<name>getName</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>true</expr>;</return>
            }</block></then></if>
        }</block></for>
        <return>return <expr>false</expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>isMethodFound</name><parameter_list>(<param><decl><type><name>Class</name></type> <name>clazz</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Method</name><index>[]</index></type> <name>methods</name> =<init> <expr><call><name><name>clazz</name>.<name>getDeclaredMethods</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>methods</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>Method</name></type> <name>methodEntry</name> =<init> <expr><name><name>methods</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>methodEntry</name>.<name>getName</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>true</expr>;</return>
            }</block></then></if>
        }</block></for>
        <return>return <expr>false</expr>;</return>
    }</block></function>

}</block></class>
</unit>
