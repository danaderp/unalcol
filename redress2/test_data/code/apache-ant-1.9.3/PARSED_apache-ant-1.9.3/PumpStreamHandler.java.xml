<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\PumpStreamHandler.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>OutputStream</name></name>;</import>

<comment type="javadoc">/**
 * Copies standard output and error of subprocesses to standard output and
 * error of the parent process.
 *
 * @since Ant 1.2
 */</comment>
<class><specifier>public</specifier> class <name>PumpStreamHandler</name> <super><implements>implements <name>ExecuteStreamHandler</name></implements></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>Thread</name></type> <name>outputThread</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Thread</name></type> <name>errorThread</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Thread</name></type> <name>inputThread</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>OutputStream</name></type> <name>out</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>OutputStream</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>InputStream</name></type> <name>input</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>nonBlockingRead</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Construct a new &lt;code&gt;PumpStreamHandler&lt;/code&gt;.
     * @param out the output &lt;code&gt;OutputStream&lt;/code&gt;.
     * @param err the error &lt;code&gt;OutputStream&lt;/code&gt;.
     * @param input the input &lt;code&gt;InputStream&lt;/code&gt;.
     * @param nonBlockingRead set it to &lt;code&gt;true&lt;/code&gt; if the input should be
     *                      read with simulated non blocking IO.
     */</comment>
    <constructor><specifier>public</specifier> <name>PumpStreamHandler</name><parameter_list>(<param><decl><type><name>OutputStream</name></type> <name>out</name></decl></param>, <param><decl><type><name>OutputStream</name></type> <name>err</name></decl></param>,
                             <param><decl><type><name>InputStream</name></type> <name>input</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>nonBlockingRead</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>out</name></name> = <name>out</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>err</name></name> = <name>err</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>input</name></name> = <name>input</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>nonBlockingRead</name></name> = <name>nonBlockingRead</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Construct a new &lt;code&gt;PumpStreamHandler&lt;/code&gt;.
     * @param out the output &lt;code&gt;OutputStream&lt;/code&gt;.
     * @param err the error &lt;code&gt;OutputStream&lt;/code&gt;.
     * @param input the input &lt;code&gt;InputStream&lt;/code&gt;.
     */</comment>
    <constructor><specifier>public</specifier> <name>PumpStreamHandler</name><parameter_list>(<param><decl><type><name>OutputStream</name></type> <name>out</name></decl></param>, <param><decl><type><name>OutputStream</name></type> <name>err</name></decl></param>,
                             <param><decl><type><name>InputStream</name></type> <name>input</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Construct a new &lt;code&gt;PumpStreamHandler&lt;/code&gt;.
     * @param out the output &lt;code&gt;OutputStream&lt;/code&gt;.
     * @param err the error &lt;code&gt;OutputStream&lt;/code&gt;.
     */</comment>
    <constructor><specifier>public</specifier> <name>PumpStreamHandler</name><parameter_list>(<param><decl><type><name>OutputStream</name></type> <name>out</name></decl></param>, <param><decl><type><name>OutputStream</name></type> <name>err</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Construct a new &lt;code&gt;PumpStreamHandler&lt;/code&gt;.
     * @param outAndErr the output/error &lt;code&gt;OutputStream&lt;/code&gt;.
     */</comment>
    <constructor><specifier>public</specifier> <name>PumpStreamHandler</name><parameter_list>(<param><decl><type><name>OutputStream</name></type> <name>outAndErr</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>outAndErr</name></expr></argument>, <argument><expr><name>outAndErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Construct a new &lt;code&gt;PumpStreamHandler&lt;/code&gt;.
     */</comment>
    <constructor><specifier>public</specifier> <name>PumpStreamHandler</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name><name>System</name>.<name>out</name></name></expr></argument>, <argument><expr><name><name>System</name>.<name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Set the &lt;code&gt;InputStream&lt;/code&gt; from which to read the
     * standard output of the process.
     * @param is the &lt;code&gt;InputStream&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setProcessOutputStream</name><parameter_list>(<param><decl><type><name>InputStream</name></type> <name>is</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>createProcessOutputPump</name><argument_list>(<argument><expr><name>is</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the &lt;code&gt;InputStream&lt;/code&gt; from which to read the
     * standard error of the process.
     * @param is the &lt;code&gt;InputStream&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setProcessErrorStream</name><parameter_list>(<param><decl><type><name>InputStream</name></type> <name>is</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>err</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>createProcessErrorPump</name><argument_list>(<argument><expr><name>is</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Set the &lt;code&gt;OutputStream&lt;/code&gt; by means of which
     * input can be sent to the process.
     * @param os the &lt;code&gt;OutputStream&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setProcessInputStream</name><parameter_list>(<param><decl><type><name>OutputStream</name></type> <name>os</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>input</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>inputThread</name> = <call><name>createPump</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>os</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr><name>nonBlockingRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <try>try <block>{
                <expr_stmt><expr><call><name><name>os</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
                <comment type="line">//ignore</comment>
            }</block></catch></try>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Start the &lt;code&gt;Thread&lt;/code&gt;s.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>start</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>outputThread</name>.<name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>errorThread</name>.<name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>inputThread</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>inputThread</name>.<name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Stop pumping the streams.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>stop</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>finish</name><argument_list>(<argument><expr><name>inputThread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <try>try <block>{
            <expr_stmt><expr><call><name><name>err</name>.<name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
            <comment type="line">// ignore</comment>
        }</block></catch></try>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>out</name>.<name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
            <comment type="line">// ignore</comment>
        }</block></catch></try>
        <expr_stmt><expr><call><name>finish</name><argument_list>(<argument><expr><name>outputThread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>finish</name><argument_list>(<argument><expr><name>errorThread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>JOIN_TIMEOUT</name> =<init> <expr>200</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Waits for a thread to finish while trying to make it finish
     * quicker by stopping the pumper (if the thread is a {@link
     * ThreadWithPumper ThreadWithPumper} instance) or interrupting
     * the thread.
     *
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>protected</specifier> <specifier>final</specifier> <name>void</name></type> <name>finish</name><parameter_list>(<param><decl><type><name>Thread</name></type> <name>t</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>t</name> == <name>null</name></expr>)</condition><then> <block>{
            <comment type="line">// nothing to terminate</comment>
            <return>return;</return>
        }</block></then></if>
        <try>try <block>{
            <decl_stmt><decl><type><name>StreamPumper</name></type> <name>s</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>t</name> <name>instanceof</name> <name>ThreadWithPumper</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>s</name> = ((<name>ThreadWithPumper</name>) <name>t</name>).<call><name>getPumper</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name>s</name> != <name>null</name> &amp;&amp; <call><name><name>s</name>.<name>isFinished</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <return>return;</return>
            }</block></then></if>
            <if>if <condition>(<expr>!<call><name><name>t</name>.<name>isAlive</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <return>return;</return>
            }</block></then></if>

            <if>if <condition>(<expr><name>s</name> != <name>null</name> &amp;&amp; !<call><name><name>s</name>.<name>isFinished</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>s</name>.<name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>t</name>.<name>join</name></name><argument_list>(<argument><expr><name>JOIN_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <while>while <condition>(<expr>(<name>s</name> == <name>null</name> || !<call><name><name>s</name>.<name>isFinished</name></name><argument_list>()</argument_list></call>) &amp;&amp; <call><name><name>t</name>.<name>isAlive</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <expr_stmt><expr><call><name><name>t</name>.<name>interrupt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>t</name>.<name>join</name></name><argument_list>(<argument><expr><name>JOIN_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
        }</block> <catch>catch (<param><decl><type><name>InterruptedException</name></type> <name>e</name></decl></param>) <block>{
            <comment type="line">// ignore</comment>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * Get the error stream.
     * @return &lt;code&gt;OutputStream&lt;/code&gt;.
     */</comment>
    <function><type><specifier>protected</specifier> <name>OutputStream</name></type> <name>getErr</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>err</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the output stream.
     * @return &lt;code&gt;OutputStream&lt;/code&gt;.
     */</comment>
    <function><type><specifier>protected</specifier> <name>OutputStream</name></type> <name>getOut</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>out</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Create the pump to handle process output.
     * @param is the &lt;code&gt;InputStream&lt;/code&gt;.
     * @param os the &lt;code&gt;OutputStream&lt;/code&gt;.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>createProcessOutputPump</name><parameter_list>(<param><decl><type><name>InputStream</name></type> <name>is</name></decl></param>, <param><decl><type><name>OutputStream</name></type> <name>os</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>outputThread</name> = <call><name>createPump</name><argument_list>(<argument><expr><name>is</name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Create the pump to handle error output.
     * @param is the input stream to copy from.
     * @param os the output stream to copy to.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>createProcessErrorPump</name><parameter_list>(<param><decl><type><name>InputStream</name></type> <name>is</name></decl></param>, <param><decl><type><name>OutputStream</name></type> <name>os</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>errorThread</name> = <call><name>createPump</name><argument_list>(<argument><expr><name>is</name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Creates a stream pumper to copy the given input stream to the
     * given output stream.
     * @param is the input stream to copy from.
     * @param os the output stream to copy to.
     * @return a thread object that does the pumping.
     */</comment>
    <function><type><specifier>protected</specifier> <name>Thread</name></type> <name>createPump</name><parameter_list>(<param><decl><type><name>InputStream</name></type> <name>is</name></decl></param>, <param><decl><type><name>OutputStream</name></type> <name>os</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>createPump</name><argument_list>(<argument><expr><name>is</name></expr></argument>, <argument><expr><name>os</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Creates a stream pumper to copy the given input stream to the
     * given output stream.
     * @param is the input stream to copy from.
     * @param os the output stream to copy to.
     * @param closeWhenExhausted if true close the inputstream.
     * @return a thread object that does the pumping, subclasses
     * should return an instance of {@link ThreadWithPumper
     * ThreadWithPumper}.
     */</comment>
    <function><type><specifier>protected</specifier> <name>Thread</name></type> <name>createPump</name><parameter_list>(<param><decl><type><name>InputStream</name></type> <name>is</name></decl></param>, <param><decl><type><name>OutputStream</name></type> <name>os</name></decl></param>,
                                <param><decl><type><name>boolean</name></type> <name>closeWhenExhausted</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>createPump</name><argument_list>(<argument><expr><name>is</name></expr></argument>, <argument><expr><name>os</name></expr></argument>, <argument><expr><name>closeWhenExhausted</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Creates a stream pumper to copy the given input stream to the
     * given output stream.
     * @param is the input stream to copy from.
     * @param os the output stream to copy to.
     * @param closeWhenExhausted if true close the inputstream.
     * @param nonBlockingIO set it to &lt;code&gt;true&lt;/code&gt; to use simulated non
     *                     blocking IO.
     * @return a thread object that does the pumping, subclasses
     * should return an instance of {@link ThreadWithPumper
     * ThreadWithPumper}.
     * @since Ant 1.8.2
     */</comment>
    <function><type><specifier>protected</specifier> <name>Thread</name></type> <name>createPump</name><parameter_list>(<param><decl><type><name>InputStream</name></type> <name>is</name></decl></param>, <param><decl><type><name>OutputStream</name></type> <name>os</name></decl></param>,
                                <param><decl><type><name>boolean</name></type> <name>closeWhenExhausted</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>nonBlockingIO</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>StreamPumper</name></type> <name>pumper</name> =<init> <expr>new <call><name>StreamPumper</name><argument_list>(<argument><expr><name>is</name></expr></argument>, <argument><expr><name>os</name></expr></argument>, <argument><expr><name>closeWhenExhausted</name></expr></argument>, <argument><expr><name>nonBlockingIO</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>pumper</name>.<name>setAutoflush</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Thread</name></type> <name>result</name> =<init> <expr>new <call><name>ThreadWithPumper</name><argument_list>(<argument><expr><name>pumper</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>result</name>.<name>setDaemon</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Specialized subclass that allows access to the running StreamPumper.
     *
     * @since Ant 1.8.0
     */</comment>
    <class><specifier>protected</specifier> <specifier>static</specifier> class <name>ThreadWithPumper</name> <super><extends>extends <name>Thread</name></extends></super> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>StreamPumper</name></type> <name>pumper</name></decl>;</decl_stmt>
        <constructor><specifier>public</specifier> <name>ThreadWithPumper</name><parameter_list>(<param><decl><type><name>StreamPumper</name></type> <name>p</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>pumper</name> = <name>p</name></expr>;</expr_stmt>
        }</block></constructor>
        <function><type><specifier>protected</specifier> <name>StreamPumper</name></type> <name>getPumper</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>pumper</name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
