<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\AntTypeDefinition.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name></name>;</package>

<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name>.<name>InvocationTargetException</name></name>;</import>
<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name>.<name>Constructor</name></name>;</import>


<comment type="javadoc">/**
 * This class contains all the information
 * on a particular ant type,
 * the classname, adapter and the class
 * it should be assignable from.
 * This type replaces the task/datatype split
 * of pre ant 1.6.
 *
 */</comment>
<class><specifier>public</specifier> class <name>AntTypeDefinition</name> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type>      <name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type>       <name>clazz</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type>       <name>adapterClass</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type>       <name>adaptToClass</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type>      <name>className</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ClassLoader</name></type> <name>classLoader</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type>     <name>restrict</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Set the restrict attribute.
     * @param restrict the value to set.
      */</comment>
     <function><type><specifier>public</specifier> <name>void</name></type> <name>setRestrict</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>restrict</name></decl></param>)</parameter_list> <block>{
         <expr_stmt><expr><name><name>this</name>.<name>restrict</name></name> = <name>restrict</name></expr>;</expr_stmt>
     }</block></function>

    <comment type="javadoc">/**
     * Get the restrict attribute.
      * @return the restrict attribute.
      */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isRestrict</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>restrict</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the definition's name.
     * @param name the name of the definition.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>name</name></name> = <name>name</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Return the definition's name.
     * @return the name of the definition.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>name</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the class of the definition.
     * As a side-effect may set the classloader and classname.
     * @param clazz the class of this definition.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setClass</name><parameter_list>(<param><decl><type><name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>clazz</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>clazz</name></name> = <name>clazz</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>clazz</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>classLoader</name></name> = (<name>classLoader</name> == <name>null</name>)
            ? <call><name><name>clazz</name>.<name>getClassLoader</name></name><argument_list>()</argument_list></call> : <name>classLoader</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>className</name></name> = (<name>className</name> == <name>null</name>) ? <call><name><name>clazz</name>.<name>getName</name></name><argument_list>()</argument_list></call> : <name>className</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the classname of the definition.
     * @param className the classname of this definition.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setClassName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>className</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>className</name></name> = <name>className</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the classname of the definition.
     * @return the name of the class of this definition.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getClassName</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>className</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the adapter class for this definition.
     * This class is used to adapt the definitions class if
     * required.
     * @param adapterClass the adapterClass.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAdapterClass</name><parameter_list>(<param><decl><type><name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>adapterClass</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>adapterClass</name></name> = <name>adapterClass</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the assignable class for this definition.
     * @param adaptToClass the assignable class.
     */</comment>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAdaptToClass</name><parameter_list>(<param><decl><type><name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>adaptToClass</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>adaptToClass</name></name> = <name>adaptToClass</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the classloader to use to create an instance
     * of the definition.
     * @param classLoader the ClassLoader.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setClassLoader</name><parameter_list>(<param><decl><type><name>ClassLoader</name></type> <name>classLoader</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>classLoader</name></name> = <name>classLoader</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the classloader for this definition.
     * @return the classloader for this definition.
     */</comment>
    <function><type><specifier>public</specifier> <name>ClassLoader</name></type> <name>getClassLoader</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>classLoader</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the exposed class for this
     * definition. This will be a proxy class
     * (adapted class) if there is an adapter
     * class and the definition class is not
     * assignable from the assignable class.
     * @param project the current project.
     * @return the exposed class - may return null if unable to load the class
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>getExposedClass</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>adaptToClass</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>z</name> =<init> <expr><call><name>getTypeClass</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>z</name> == <name>null</name> || <call><name><name>adaptToClass</name>.<name>isAssignableFrom</name></name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><name>z</name></expr>;</return>
            }</block></then></if>
        }</block></then></if>
        <return>return <expr>(<name>adapterClass</name> == <name>null</name>) ? <call><name>getTypeClass</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call> :  <name>adapterClass</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the definition class.
     * @param project the current project.
     * @return the type of the definition.
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>getTypeClass</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>)</parameter_list> <block>{
        <try>try <block>{
            <return>return <expr><call><name>innerGetTypeClass</name><argument_list>()</argument_list></call></expr>;</return>
        }</block> <catch>catch (<param><decl><type><name>NoClassDefFoundError</name></type> <name>ncdfe</name></decl></param>) <block>{
            <expr_stmt><expr><call><name><name>project</name>.<name>log</name></name><argument_list>(<argument><expr>"Could not load a dependent class ("
                        + <call><name><name>ncdfe</name>.<name>getMessage</name></name><argument_list>()</argument_list></call> + ") for type "
                        + <name>name</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch> <catch>catch (<param><decl><type><name>ClassNotFoundException</name></type> <name>cnfe</name></decl></param>) <block>{
            <expr_stmt><expr><call><name><name>project</name>.<name>log</name></name><argument_list>(<argument><expr>"Could not load class (" + <name>className</name>
                        + ") for type " + <name>name</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <return>return <expr><name>null</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Try and load a class, with no attempt to catch any fault.
     * @return the class that implements this component
     * @throws ClassNotFoundException if the class cannot be found.
     * @throws NoClassDefFoundError   if the there is an error
     *                                finding the class.
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>innerGetTypeClass</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>clazz</name> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>clazz</name></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>classLoader</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>clazz</name> = <call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr><name>className</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>clazz</name> = <call><name><name>classLoader</name>.<name>loadClass</name></name><argument_list>(<argument><expr><name>className</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><name>clazz</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Create an instance of the definition.
     * The instance may be wrapped in a proxy class.
     * @param project the current project.
     * @return the created object.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>create</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>icreate</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Create a component object based on
     * its definition.
     * @return the component as an &lt;code&gt;Object&lt;/code&gt;.
     */</comment>
    <function><type><specifier>private</specifier> <name>Object</name></type> <name>icreate</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>c</name> =<init> <expr><call><name>getTypeClass</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>c</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>Object</name></type> <name>o</name> =<init> <expr><call><name>createAndSet</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>o</name> == <name>null</name> || <name>adapterClass</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>o</name></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>adaptToClass</name> != <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name><name>adaptToClass</name>.<name>isAssignableFrom</name></name><argument_list>(<argument><expr><call><name><name>o</name>.<name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><name>o</name></expr>;</return>
            }</block></then></if>
        }</block></then></if>
        <decl_stmt><decl><type><name>TypeAdapter</name></type> <name>adapterObject</name> =<init> <expr>(<name>TypeAdapter</name>) <call><name>createAndSet</name><argument_list>(
            <argument><expr><name>project</name></expr></argument>, <argument><expr><name>adapterClass</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>adapterObject</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>adapterObject</name>.<name>setProxy</name></name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>adapterObject</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Checks if the attributes are correct.
     * &lt;dl&gt;
     *   &lt;li&gt;if the class can be created.&lt;/li&gt;
     *   &lt;li&gt;if an adapter class can be created&lt;/li&gt;
     *   &lt;li&gt;if the type is assignable from adapter&lt;/li&gt;
     *   &lt;li&gt;if the type can be used with the adapter class&lt;/li&gt;
     * &lt;/dl&gt;
     * @param project the current project.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>checkClass</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>clazz</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>clazz</name> = <call><name>getTypeClass</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>clazz</name> == <name>null</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                    <argument><expr>"Unable to create class for " + <call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
        }</block></then></if>
        <comment type="line">// check adapter</comment>
        <if>if <condition>(<expr><name>adapterClass</name> != <name>null</name> &amp;&amp; (<name>adaptToClass</name> == <name>null</name>
            || !<call><name><name>adaptToClass</name>.<name>isAssignableFrom</name></name><argument_list>(<argument><expr><name>clazz</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>TypeAdapter</name></type> <name>adapter</name> =<init> <expr>(<name>TypeAdapter</name>) <call><name>createAndSet</name><argument_list>(
                <argument><expr><name>project</name></expr></argument>, <argument><expr><name>adapterClass</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>adapter</name> == <name>null</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Unable to create adapter object"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>adapter</name>.<name>checkProxyClass</name></name><argument_list>(<argument><expr><name>clazz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Get the constructor of the definition
     * and invoke it.
     * @return the instantiated &lt;code&gt;Object&lt;/code&gt;.
     */</comment>
    <function><type><specifier>private</specifier> <name>Object</name></type> <name>createAndSet</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>, <param><decl><type><name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>c</name></decl></param>)</parameter_list> <block>{
        <try>try <block>{
            <decl_stmt><decl><type><name>Object</name></type> <name>o</name> =<init> <expr><call><name>innerCreateAndSet</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>project</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><name>o</name></expr>;</return>
        }</block> <catch>catch (<param><decl><type><name>InvocationTargetException</name></type> <name>ex</name></decl></param>) <block>{
            <decl_stmt><decl><type><name>Throwable</name></type> <name>t</name> =<init> <expr><call><name><name>ex</name>.<name>getTargetException</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                <argument><expr>"Could not create type " + <name>name</name> + " due to " + <name>t</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <catch>catch (<param><decl><type><name>NoClassDefFoundError</name></type> <name>ncdfe</name></decl></param>) <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>msg</name> =<init> <expr>"Type " + <name>name</name> + ": A class needed by class "
                + <name>c</name> + " cannot be found: " + <call><name><name>ncdfe</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>ncdfe</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <catch>catch (<param><decl><type><name>NoSuchMethodException</name></type> <name>nsme</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Could not create type " + <name>name</name>
                    + " as the class " + <name>c</name> + " has no compatible constructor"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <catch>catch (<param><decl><type><name>InstantiationException</name></type> <name>nsme</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Could not create type "
                    + <name>name</name> + " as the class " + <name>c</name> + " is abstract"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <catch>catch (<param><decl><type><name>IllegalAccessException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Could not create type "
                    + <name>name</name> + " as the constructor " + <name>c</name> + " is not accessible"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <catch>catch (<param><decl><type><name>Throwable</name></type> <name>t</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                <argument><expr>"Could not create type " + <name>name</name> + " due to " + <name>t</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * Inner implementation of the {@link #createAndSet(Project, Class)} logic, with no
     * exception catching
     * @param newclass class to create
     * @param project the project to use
     * @return a newly constructed and bound instance.
     * @throws NoSuchMethodException  no good constructor.
     * @throws InstantiationException cannot initialize the object.
     * @throws IllegalAccessException cannot access the object.
     * @throws InvocationTargetException error in invocation.
     */</comment>
    <function><type><specifier>public</specifier> <argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list> <name>T</name></type> <name>innerCreateAndSet</name><parameter_list>(<param><decl><type><name><name>Class</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>newclass</name></decl></param>, <param><decl><type><name>Project</name></type> <name>project</name></decl></param>)</parameter_list>
            <throws>throws <argument><expr><name>NoSuchMethodException</name></expr></argument>,
            <argument><expr><name>InstantiationException</name></expr></argument>,
            <argument><expr><name>IllegalAccessException</name></expr></argument>,
            <argument><expr><name>InvocationTargetException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name><name>Constructor</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>ctor</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>noArg</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <comment type="line">// DataType can have a "no arg" constructor or take a single</comment>
        <comment type="line">// Project argument.</comment>
        <try>try <block>{
            <expr_stmt><expr><name>ctor</name> = <call><name><name>newclass</name>.<name>getConstructor</name></name><argument_list>(<argument><expr>new <name><name>Class</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>noArg</name> = true</expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>NoSuchMethodException</name></type> <name>nse</name></decl></param>) <block>{
            <comment type="line">//can throw the same exception, if there is no this(Project) ctor.</comment>
            <expr_stmt><expr><name>ctor</name> = <call><name><name>newclass</name>.<name>getConstructor</name></name><argument_list>(<argument><expr>new <name><name>Class</name><index>[]</index></name> <block>{<expr><name><name>Project</name>.<name><name/></name></name>class</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>noArg</name> = false</expr>;</expr_stmt>
        }</block></catch></try>
        <comment type="line">//now we instantiate</comment>
        <decl_stmt><decl><type><name>T</name></type> <name>o</name> =<init> <expr><call><name><name>ctor</name>.<name>newInstance</name></name><argument_list>(
            <argument><expr>((<name>noArg</name>) ? new <name><name>Object</name><index>[<expr>0</expr>]</index></name> : new <name><name>Object</name><index>[]</index></name> <block>{<expr><name>project</name></expr>}</block>)</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">//set up project references.</comment>
        <expr_stmt><expr><call><name><name>project</name>.<name>setProjectReference</name></name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>o</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Equality method for this definition (assumes the names are the same).
     *
     * @param other another definition.
     * @param project the project the definition.
     * @return true if the definitions are the same.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>sameDefinition</name><parameter_list>(<param><decl><type><name>AntTypeDefinition</name></type> <name>other</name></decl></param>, <param><decl><type><name>Project</name></type> <name>project</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>(<name>other</name> != <name>null</name> &amp;&amp; <call><name><name>other</name>.<name>getClass</name></name><argument_list>()</argument_list></call> == <call><name>getClass</name><argument_list>()</argument_list></call>
            &amp;&amp; <call><name><name>other</name>.<name>getTypeClass</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><call><name>getTypeClass</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
            &amp;&amp; <call><name><name>other</name>.<name>getExposedClass</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><call><name>getExposedClass</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
            &amp;&amp; <name><name>other</name>.<name>restrict</name></name> == <name>restrict</name>
            &amp;&amp; <name><name>other</name>.<name>adapterClass</name></name> == <name>adapterClass</name>
            &amp;&amp; <name><name>other</name>.<name>adaptToClass</name></name> == <name>adaptToClass</name>)</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Similar definition;
     * used to compare two definitions defined twice with the same
     * name and the same types.
     * The classloader may be different but have the same
     * path so #sameDefinition cannot
     * be used.
     * @param other the definition to compare to.
     * @param project the current project.
     * @return true if the definitions are the same.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>similarDefinition</name><parameter_list>(<param><decl><type><name>AntTypeDefinition</name></type> <name>other</name></decl></param>, <param><decl><type><name>Project</name></type> <name>project</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>other</name> == <name>null</name>
            || <call><name>getClass</name><argument_list>()</argument_list></call> != <call><name><name>other</name>.<name>getClass</name></name><argument_list>()</argument_list></call>
            || !<call><name>getClassName</name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><call><name><name>other</name>.<name>getClassName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
            || !<call><name>extractClassname</name><argument_list>(<argument><expr><name>adapterClass</name></expr></argument>)</argument_list></call>.<call><name>equals</name><argument_list>(
            <argument><expr><call><name>extractClassname</name><argument_list>(<argument><expr><name><name>other</name>.<name>adapterClass</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
            || !<call><name>extractClassname</name><argument_list>(<argument><expr><name>adaptToClass</name></expr></argument>)</argument_list></call>.<call><name>equals</name><argument_list>(
            <argument><expr><call><name>extractClassname</name><argument_list>(<argument><expr><name><name>other</name>.<name>adaptToClass</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
            || <name>restrict</name> != <name><name>other</name>.<name>restrict</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <comment type="line">// all the names are the same: check if the class path of the loader</comment>
        <comment type="line">// is the same</comment>
        <decl_stmt><decl><type><name>ClassLoader</name></type> <name>oldLoader</name> =<init> <expr><call><name><name>other</name>.<name>getClassLoader</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ClassLoader</name></type> <name>newLoader</name> =<init> <expr><call><name>getClassLoader</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>oldLoader</name> == <name>newLoader</name>
            || (<name>oldLoader</name> <name>instanceof</name> <name>AntClassLoader</name>
            &amp;&amp; <name>newLoader</name> <name>instanceof</name> <name>AntClassLoader</name>
            &amp;&amp; ((<name>AntClassLoader</name>) <name>oldLoader</name>).<call><name>getClasspath</name><argument_list>()</argument_list></call>
            .<call><name>equals</name><argument_list>(<argument><expr>((<name>AntClassLoader</name>) <name>newLoader</name>).<call><name>getClasspath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>)</expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>extractClassname</name><parameter_list>(<param><decl><type><name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>c</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>(<name>c</name> == <name>null</name>) ? "&lt;null&gt;" : <call><name><name>c</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
