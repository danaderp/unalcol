<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\javacc\JavaCC.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>javacc</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Hashtable</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>AntClassLoader</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>Execute</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Commandline</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>CommandlineJava</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Path</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>JavaEnvUtils</name></name>;</import>

<comment type="javadoc">/**
 * JavaCC compiler compiler task.
 *
 */</comment>
<class><specifier>public</specifier> class <name>JavaCC</name> <super><extends>extends <name>Task</name></extends></super> <block>{

    <comment type="line">// keys to optional attributes</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>LOOKAHEAD</name>              =<init> <expr>"LOOKAHEAD"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>CHOICE_AMBIGUITY_CHECK</name> =<init> <expr>"CHOICE_AMBIGUITY_CHECK"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>OTHER_AMBIGUITY_CHECK</name>  =<init> <expr>"OTHER_AMBIGUITY_CHECK"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>STATIC</name>                 =<init> <expr>"STATIC"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEBUG_PARSER</name>           =<init> <expr>"DEBUG_PARSER"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEBUG_LOOKAHEAD</name>        =<init> <expr>"DEBUG_LOOKAHEAD"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEBUG_TOKEN_MANAGER</name>    =<init> <expr>"DEBUG_TOKEN_MANAGER"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>OPTIMIZE_TOKEN_MANAGER</name> =<init> <expr>"OPTIMIZE_TOKEN_MANAGER"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ERROR_REPORTING</name>        =<init> <expr>"ERROR_REPORTING"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>JAVA_UNICODE_ESCAPE</name>    =<init> <expr>"JAVA_UNICODE_ESCAPE"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>UNICODE_INPUT</name>          =<init> <expr>"UNICODE_INPUT"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>IGNORE_CASE</name>            =<init> <expr>"IGNORE_CASE"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COMMON_TOKEN_ACTION</name>    =<init> <expr>"COMMON_TOKEN_ACTION"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>USER_TOKEN_MANAGER</name>     =<init> <expr>"USER_TOKEN_MANAGER"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>USER_CHAR_STREAM</name>       =<init> <expr>"USER_CHAR_STREAM"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>BUILD_PARSER</name>           =<init> <expr>"BUILD_PARSER"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>BUILD_TOKEN_MANAGER</name>    =<init> <expr>"BUILD_TOKEN_MANAGER"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SANITY_CHECK</name>           =<init> <expr>"SANITY_CHECK"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FORCE_LA_CHECK</name>         =<init> <expr>"FORCE_LA_CHECK"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>CACHE_TOKENS</name>           =<init> <expr>"CACHE_TOKENS"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KEEP_LINE_COLUMN</name>       =<init> <expr>"KEEP_LINE_COLUMN"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>JDK_VERSION</name>            =<init> <expr>"JDK_VERSION"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Hashtable</name></type> <name>optionalAttrs</name> =<init> <expr>new <call><name>Hashtable</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// required attributes</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>outputDirectory</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>targetFile</name>      =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>javaccHome</name>      =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>CommandlineJava</name></type> <name>cmdl</name> =<init> <expr>new <call><name>CommandlineJava</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>TASKDEF_TYPE_JAVACC</name> =<init> <expr>1</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>TASKDEF_TYPE_JJTREE</name> =<init> <expr>2</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>TASKDEF_TYPE_JJDOC</name> =<init> <expr>3</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name><index>[]</index></type> <name>ARCHIVE_LOCATIONS</name> =<init>
        <expr>new <name><name>String</name><index>[]</index></name> <block>{
        <expr>"JavaCC.zip"</expr>,
        <expr>"bin/lib/JavaCC.zip"</expr>,
        <expr>"bin/lib/javacc.jar"</expr>,
        <expr>"javacc.jar"</expr>, <comment type="line">// used by jpackage for JavaCC 3.x</comment>
    }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name><index>[]</index></type> <name>ARCHIVE_LOCATIONS_VS_MAJOR_VERSION</name> =<init>
        <expr>new <name><name>int</name><index>[]</index></name> <block>{
        <expr>1</expr>,
        <expr>2</expr>,
        <expr>3</expr>,
        <expr>3</expr>,
    }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COM_PACKAGE</name> =<init> <expr>"COM.sun.labs."</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COM_JAVACC_CLASS</name> =<init> <expr>"javacc.Main"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COM_JJTREE_CLASS</name> =<init> <expr>"jjtree.Main"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COM_JJDOC_CLASS</name> =<init> <expr>"jjdoc.JJDocMain"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ORG_PACKAGE_3_0</name> =<init> <expr>"org.netbeans.javacc."</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ORG_PACKAGE_3_1</name> =<init> <expr>"org.javacc."</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ORG_JAVACC_CLASS</name> =<init> <expr>"parser.Main"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ORG_JJTREE_CLASS</name> =<init> <expr><name>COM_JJTREE_CLASS</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ORG_JJDOC_CLASS</name> =<init> <expr><name>COM_JJDOC_CLASS</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>maxMemory</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Sets the LOOKAHEAD grammar option.
     * @param lookahead an &lt;code&gt;int&lt;/code&gt; value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLookahead</name><parameter_list>(<param><decl><type><name>int</name></type> <name>lookahead</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>optionalAttrs</name>.<name>put</name></name><argument_list>(<argument><expr><name>LOOKAHEAD</name></expr></argument>, <argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><name>lookahead</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the CHOICE_AMBIGUITY_CHECK grammar option.
     * @param choiceAmbiguityCheck an &lt;code&gt;int&lt;/code&gt; value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setChoiceambiguitycheck</name><parameter_list>(<param><decl><type><name>int</name></type> <name>choiceAmbiguityCheck</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>optionalAttrs</name>.<name>put</name></name><argument_list>(<argument><expr><name>CHOICE_AMBIGUITY_CHECK</name></expr></argument>, <argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><name>choiceAmbiguityCheck</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the OTHER_AMBIGUITY_CHECK grammar option.
     * @param otherAmbiguityCheck an &lt;code&gt;int&lt;/code&gt; value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOtherambiguityCheck</name><parameter_list>(<param><decl><type><name>int</name></type> <name>otherAmbiguityCheck</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>optionalAttrs</name>.<name>put</name></name><argument_list>(<argument><expr><name>OTHER_AMBIGUITY_CHECK</name></expr></argument>, <argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><name>otherAmbiguityCheck</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the STATIC grammar option.
     * @param staticParser a &lt;code&gt;boolean&lt;/code&gt; value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setStatic</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>staticParser</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>optionalAttrs</name>.<name>put</name></name><argument_list>(<argument><expr><name>STATIC</name></expr></argument>, <argument><expr><name>staticParser</name> ? <name><name>Boolean</name>.<name>TRUE</name></name> : <name><name>Boolean</name>.<name>FALSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the DEBUG_PARSER grammar option.
     * @param debugParser a &lt;code&gt;boolean&lt;/code&gt; value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDebugparser</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>debugParser</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>optionalAttrs</name>.<name>put</name></name><argument_list>(<argument><expr><name>DEBUG_PARSER</name></expr></argument>, <argument><expr><name>debugParser</name> ? <name><name>Boolean</name>.<name>TRUE</name></name> : <name><name>Boolean</name>.<name>FALSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the DEBUG_LOOKAHEAD grammar option.
     * @param debugLookahead a &lt;code&gt;boolean&lt;/code&gt; value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDebuglookahead</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>debugLookahead</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>optionalAttrs</name>.<name>put</name></name><argument_list>(<argument><expr><name>DEBUG_LOOKAHEAD</name></expr></argument>, <argument><expr><name>debugLookahead</name> ? <name><name>Boolean</name>.<name>TRUE</name></name> : <name><name>Boolean</name>.<name>FALSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the DEBUG_TOKEN_MANAGER grammar option.
     * @param debugTokenManager a &lt;code&gt;boolean&lt;/code&gt; value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDebugtokenmanager</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>debugTokenManager</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>optionalAttrs</name>.<name>put</name></name><argument_list>(<argument><expr><name>DEBUG_TOKEN_MANAGER</name></expr></argument>, <argument><expr><name>debugTokenManager</name> ? <name><name>Boolean</name>.<name>TRUE</name></name> : <name><name>Boolean</name>.<name>FALSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the OPTIMIZE_TOKEN_MANAGER grammar option.
     * @param optimizeTokenManager a &lt;code&gt;boolean&lt;/code&gt; value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOptimizetokenmanager</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>optimizeTokenManager</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>optionalAttrs</name>.<name>put</name></name><argument_list>(<argument><expr><name>OPTIMIZE_TOKEN_MANAGER</name></expr></argument>,
                          <argument><expr><name>optimizeTokenManager</name> ? <name><name>Boolean</name>.<name>TRUE</name></name> : <name><name>Boolean</name>.<name>FALSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the ERROR_REPORTING grammar option.
     * @param errorReporting a &lt;code&gt;boolean&lt;/code&gt; value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setErrorreporting</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>errorReporting</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>optionalAttrs</name>.<name>put</name></name><argument_list>(<argument><expr><name>ERROR_REPORTING</name></expr></argument>, <argument><expr><name>errorReporting</name> ? <name><name>Boolean</name>.<name>TRUE</name></name> : <name><name>Boolean</name>.<name>FALSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the JAVA_UNICODE_ESCAPE grammar option.
     * @param javaUnicodeEscape a &lt;code&gt;boolean&lt;/code&gt; value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setJavaunicodeescape</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>javaUnicodeEscape</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>optionalAttrs</name>.<name>put</name></name><argument_list>(<argument><expr><name>JAVA_UNICODE_ESCAPE</name></expr></argument>, <argument><expr><name>javaUnicodeEscape</name> ? <name><name>Boolean</name>.<name>TRUE</name></name> : <name><name>Boolean</name>.<name>FALSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the UNICODE_INPUT grammar option.
     * @param unicodeInput a &lt;code&gt;boolean&lt;/code&gt; value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUnicodeinput</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>unicodeInput</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>optionalAttrs</name>.<name>put</name></name><argument_list>(<argument><expr><name>UNICODE_INPUT</name></expr></argument>, <argument><expr><name>unicodeInput</name> ? <name><name>Boolean</name>.<name>TRUE</name></name> : <name><name>Boolean</name>.<name>FALSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the IGNORE_CASE grammar option.
     * @param ignoreCase a &lt;code&gt;boolean&lt;/code&gt; value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setIgnorecase</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>ignoreCase</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>optionalAttrs</name>.<name>put</name></name><argument_list>(<argument><expr><name>IGNORE_CASE</name></expr></argument>, <argument><expr><name>ignoreCase</name> ? <name><name>Boolean</name>.<name>TRUE</name></name> : <name><name>Boolean</name>.<name>FALSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the COMMON_TOKEN_ACTION grammar option.
     * @param commonTokenAction a &lt;code&gt;boolean&lt;/code&gt; value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCommontokenaction</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>commonTokenAction</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>optionalAttrs</name>.<name>put</name></name><argument_list>(<argument><expr><name>COMMON_TOKEN_ACTION</name></expr></argument>, <argument><expr><name>commonTokenAction</name> ? <name><name>Boolean</name>.<name>TRUE</name></name> : <name><name>Boolean</name>.<name>FALSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the USER_TOKEN_MANAGER grammar option.
     * @param userTokenManager a &lt;code&gt;boolean&lt;/code&gt; value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUsertokenmanager</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>userTokenManager</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>optionalAttrs</name>.<name>put</name></name><argument_list>(<argument><expr><name>USER_TOKEN_MANAGER</name></expr></argument>, <argument><expr><name>userTokenManager</name> ? <name><name>Boolean</name>.<name>TRUE</name></name> : <name><name>Boolean</name>.<name>FALSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the USER_CHAR_STREAM grammar option.
     * @param userCharStream a &lt;code&gt;boolean&lt;/code&gt; value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUsercharstream</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>userCharStream</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>optionalAttrs</name>.<name>put</name></name><argument_list>(<argument><expr><name>USER_CHAR_STREAM</name></expr></argument>, <argument><expr><name>userCharStream</name> ? <name><name>Boolean</name>.<name>TRUE</name></name> : <name><name>Boolean</name>.<name>FALSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the BUILD_PARSER grammar option.
     * @param buildParser a &lt;code&gt;boolean&lt;/code&gt; value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBuildparser</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>buildParser</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>optionalAttrs</name>.<name>put</name></name><argument_list>(<argument><expr><name>BUILD_PARSER</name></expr></argument>, <argument><expr><name>buildParser</name> ? <name><name>Boolean</name>.<name>TRUE</name></name> : <name><name>Boolean</name>.<name>FALSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the BUILD_TOKEN_MANAGER grammar option.
     * @param buildTokenManager a &lt;code&gt;boolean&lt;/code&gt; value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBuildtokenmanager</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>buildTokenManager</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>optionalAttrs</name>.<name>put</name></name><argument_list>(<argument><expr><name>BUILD_TOKEN_MANAGER</name></expr></argument>, <argument><expr><name>buildTokenManager</name> ? <name><name>Boolean</name>.<name>TRUE</name></name> : <name><name>Boolean</name>.<name>FALSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the SANITY_CHECK grammar option.
     * @param sanityCheck a &lt;code&gt;boolean&lt;/code&gt; value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSanitycheck</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>sanityCheck</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>optionalAttrs</name>.<name>put</name></name><argument_list>(<argument><expr><name>SANITY_CHECK</name></expr></argument>, <argument><expr><name>sanityCheck</name> ? <name><name>Boolean</name>.<name>TRUE</name></name> : <name><name>Boolean</name>.<name>FALSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the FORCE_LA_CHECK grammar option.
     * @param forceLACheck a &lt;code&gt;boolean&lt;/code&gt; value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setForcelacheck</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>forceLACheck</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>optionalAttrs</name>.<name>put</name></name><argument_list>(<argument><expr><name>FORCE_LA_CHECK</name></expr></argument>, <argument><expr><name>forceLACheck</name> ? <name><name>Boolean</name>.<name>TRUE</name></name> : <name><name>Boolean</name>.<name>FALSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the CACHE_TOKENS grammar option.
     * @param cacheTokens a &lt;code&gt;boolean&lt;/code&gt; value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCachetokens</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>cacheTokens</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>optionalAttrs</name>.<name>put</name></name><argument_list>(<argument><expr><name>CACHE_TOKENS</name></expr></argument>, <argument><expr><name>cacheTokens</name> ? <name><name>Boolean</name>.<name>TRUE</name></name> : <name><name>Boolean</name>.<name>FALSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the KEEP_LINE_COLUMN grammar option.
     * @param keepLineColumn a &lt;code&gt;boolean&lt;/code&gt; value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setKeeplinecolumn</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>keepLineColumn</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>optionalAttrs</name>.<name>put</name></name><argument_list>(<argument><expr><name>KEEP_LINE_COLUMN</name></expr></argument>, <argument><expr><name>keepLineColumn</name> ? <name><name>Boolean</name>.<name>TRUE</name></name> : <name><name>Boolean</name>.<name>FALSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the JDK_VERSION option.
     * @param jdkVersion the version to use.
     * @since Ant1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setJDKversion</name><parameter_list>(<param><decl><type><name>String</name></type> <name>jdkVersion</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>optionalAttrs</name>.<name>put</name></name><argument_list>(<argument><expr><name>JDK_VERSION</name></expr></argument>, <argument><expr><name>jdkVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The directory to write the generated files to.
     * If not set, the files are written to the directory
     * containing the grammar file.
     * @param outputDirectory the output directory.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOutputdirectory</name><parameter_list>(<param><decl><type><name>File</name></type> <name>outputDirectory</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>outputDirectory</name></name> = <name>outputDirectory</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The grammar file to process.
     * @param targetFile the grammar file.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTarget</name><parameter_list>(<param><decl><type><name>File</name></type> <name>targetFile</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>targetFile</name></name> = <name>targetFile</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The directory containing the JavaCC distribution.
     * @param javaccHome the directory.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setJavacchome</name><parameter_list>(<param><decl><type><name>File</name></type> <name>javaccHome</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>javaccHome</name></name> = <name>javaccHome</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Corresponds -Xmx.
     *
     * @param max max memory parameter.
     * @since Ant 1.8.3
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMaxmemory</name><parameter_list>(<param><decl><type><name>String</name></type> <name>max</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>maxMemory</name> = <name>max</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Constructor
     */</comment>
    <constructor><specifier>public</specifier> <name>JavaCC</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>cmdl</name>.<name>setVm</name></name><argument_list>(<argument><expr><call><name><name>JavaEnvUtils</name>.<name>getJreExecutable</name></name><argument_list>(<argument><expr>"java"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Run the task.
     * @throws BuildException on error.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{

        <comment type="line">// load command line with optional attributes</comment>
        <decl_stmt><decl><type><name>Enumeration</name></type> <name>iter</name> =<init> <expr><call><name><name>optionalAttrs</name>.<name>keys</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>iter</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>name</name>  =<init> <expr>(<name>String</name>) <call><name><name>iter</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Object</name></type> <name>value</name> =<init> <expr><call><name><name>optionalAttrs</name>.<name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>cmdl</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-" + <name>name</name> + ":" + <call><name><name>value</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>

        <comment type="line">// check the target is a file</comment>
        <if>if <condition>(<expr><name>targetFile</name> == <name>null</name> || !<call><name><name>targetFile</name>.<name>isFile</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Invalid target: " + <name>targetFile</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <comment type="line">// use the directory containing the target as the output directory</comment>
        <if>if <condition>(<expr><name>outputDirectory</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>outputDirectory</name> = new <call><name>File</name><argument_list>(<argument><expr><call><name><name>targetFile</name>.<name>getParent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr>!<call><name><name>outputDirectory</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Outputdir not a directory."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if></else></if>
        <expr_stmt><expr><call><name><name>cmdl</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-OUTPUT_DIRECTORY:"
                                       + <call><name><name>outputDirectory</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// determine if the generated java file is up-to-date</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>File</name></type> <name>javaFile</name> =<init> <expr><call><name>getOutputJavaFile</name><argument_list>(<argument><expr><name>outputDirectory</name></expr></argument>, <argument><expr><name>targetFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>javaFile</name>.<name>exists</name></name><argument_list>()</argument_list></call>
            &amp;&amp; <call><name><name>targetFile</name>.<name>lastModified</name></name><argument_list>()</argument_list></call> &lt; <call><name><name>javaFile</name>.<name>lastModified</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Target is already built - skipping (" + <name>targetFile</name> + ")"</expr></argument>,
                <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>cmdl</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name><name>targetFile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Path</name></type> <name>classpath</name> =<init> <expr><call><name><name>cmdl</name>.<name>createClasspath</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>File</name></type> <name>javaccJar</name> =<init> <expr><call><name><name>JavaCC</name>.<name>getArchiveFile</name></name><argument_list>(<argument><expr><name>javaccHome</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>classpath</name>.<name>createPathElement</name></name><argument_list>()</argument_list></call>.<call><name>setPath</name><argument_list>(<argument><expr><call><name><name>javaccJar</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>classpath</name>.<name>addJavaRuntime</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>cmdl</name>.<name>setClassname</name></name><argument_list>(<argument><expr><call><name><name>JavaCC</name>.<name>getMainClass</name></name><argument_list>(<argument><expr><name>classpath</name></expr></argument>,
                                              <argument><expr><name><name>JavaCC</name>.<name>TASKDEF_TYPE_JAVACC</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>cmdl</name>.<name>setMaxmemory</name></name><argument_list>(<argument><expr><name>maxMemory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Commandline</name>.<name>Argument</name></name></type> <name>arg</name> =<init> <expr><call><name><name>cmdl</name>.<name>createVmArgument</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>arg</name>.<name>setValue</name></name><argument_list>(<argument><expr>"-Dinstall.root=" + <call><name><name>javaccHome</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>Execute</name>.<name>runCommand</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name><name>cmdl</name>.<name>getCommandline</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Helper method to retrieve the path used to store the JavaCC.zip
     * or javacc.jar which is different from versions.
     *
     * @param home the javacc home path directory.
     * @throws BuildException thrown if the home directory is invalid
     * or if the archive could not be found despite attempts to do so.
     * @return the file object pointing to the JavaCC archive.
     */</comment>
    <function><type><specifier>protected</specifier> <specifier>static</specifier> <name>File</name></type> <name>getArchiveFile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>home</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <return>return <expr>new <call><name>File</name><argument_list>(<argument><expr><name>home</name></expr></argument>,
                        <argument><expr><name><name>ARCHIVE_LOCATIONS</name><index>[<expr><call><name>getArchiveLocationIndex</name><argument_list>(<argument><expr><name>home</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Helper method to retrieve main class which is different from versions.
     * @param home the javacc home path directory.
     * @param type the taskdef.
     * @throws BuildException thrown if the home directory is invalid
     * or if the archive could not be found despite attempts to do so.
     * @return the main class for the taskdef.
     */</comment>
    <function><type><specifier>protected</specifier> <specifier>static</specifier> <name>String</name></type> <name>getMainClass</name><parameter_list>(<param><decl><type><name>File</name></type> <name>home</name></decl></param>, <param><decl><type><name>int</name></type> <name>type</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{

        <decl_stmt><decl><type><name>Path</name></type> <name>p</name> =<init> <expr>new <call><name>Path</name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>createPathElement</name></name><argument_list>()</argument_list></call>.<call><name>setLocation</name><argument_list>(<argument><expr><call><name>getArchiveFile</name><argument_list>(<argument><expr><name>home</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>addJavaRuntime</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>getMainClass</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Helper method to retrieve main class which is different from versions.
     * @param path classpath to search in.
     * @param type the taskdef.
     * @throws BuildException thrown if the home directory is invalid
     * or if the archive could not be found despite attempts to do so.
     * @return the main class for the taskdef.
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>protected</specifier> <specifier>static</specifier> <name>String</name></type> <name>getMainClass</name><parameter_list>(<param><decl><type><name>Path</name></type> <name>path</name></decl></param>, <param><decl><type><name>int</name></type> <name>type</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>packagePrefix</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>mainClass</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>AntClassLoader</name></type> <name>l</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>l</name> = <call><name><name>AntClassLoader</name>.<name>newAntClassLoader</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr><name>null</name></expr></argument>,
                                                 <argument><expr><call><name><name>path</name>
                                                 .<name>concatSystemClasspath</name></name><argument_list>(<argument><expr>"ignore"</expr></argument>)</argument_list></call></expr></argument>,
                                                 <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>javaccClass</name> =<init> <expr><name>COM_PACKAGE</name> + <name>COM_JAVACC_CLASS</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>InputStream</name></type> <name>is</name> =<init> <expr><call><name><name>l</name>.<name>getResourceAsStream</name></name><argument_list>(<argument><expr><call><name><name>javaccClass</name>.<name>replace</name></name><argument_list>(<argument><expr>'.'</expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call>
                                                   + ".class"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>is</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>packagePrefix</name> = <name>COM_PACKAGE</name></expr>;</expr_stmt>
                <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{
                <case>case <expr><name>TASKDEF_TYPE_JAVACC</name></expr>:
                    <expr_stmt><expr><name>mainClass</name> = <name>COM_JAVACC_CLASS</name></expr>;</expr_stmt>

                    <break>break;</break>

                </case><case>case <expr><name>TASKDEF_TYPE_JJTREE</name></expr>:
                    <expr_stmt><expr><name>mainClass</name> = <name>COM_JJTREE_CLASS</name></expr>;</expr_stmt>

                    <break>break;</break>

                </case><case>case <expr><name>TASKDEF_TYPE_JJDOC</name></expr>:
                    <expr_stmt><expr><name>mainClass</name> = <name>COM_JJDOC_CLASS</name></expr>;</expr_stmt>

                    <break>break;</break>
                </case><default>default:
                    <comment type="line">// Fall Through</comment>
                </default>}</block></switch>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>javaccClass</name> = <name>ORG_PACKAGE_3_1</name> + <name>ORG_JAVACC_CLASS</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>is</name> = <call><name><name>l</name>.<name>getResourceAsStream</name></name><argument_list>(<argument><expr><call><name><name>javaccClass</name>.<name>replace</name></name><argument_list>(<argument><expr>'.'</expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call>
                                           + ".class"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>is</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>packagePrefix</name> = <name>ORG_PACKAGE_3_1</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><name>javaccClass</name> = <name>ORG_PACKAGE_3_0</name> + <name>ORG_JAVACC_CLASS</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>is</name> = <call><name><name>l</name>.<name>getResourceAsStream</name></name><argument_list>(<argument><expr><call><name><name>javaccClass</name>.<name>replace</name></name><argument_list>(<argument><expr>'.'</expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call>
                                               + ".class"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>is</name> != <name>null</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>packagePrefix</name> = <name>ORG_PACKAGE_3_0</name></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></else></if>

                <if>if <condition>(<expr><name>is</name> != <name>null</name></expr>)</condition><then> <block>{
                    <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{
                    <case>case <expr><name>TASKDEF_TYPE_JAVACC</name></expr>:
                        <expr_stmt><expr><name>mainClass</name> = <name>ORG_JAVACC_CLASS</name></expr>;</expr_stmt>

                        <break>break;</break>

                    </case><case>case <expr><name>TASKDEF_TYPE_JJTREE</name></expr>:
                        <expr_stmt><expr><name>mainClass</name> = <name>ORG_JJTREE_CLASS</name></expr>;</expr_stmt>

                        <break>break;</break>

                    </case><case>case <expr><name>TASKDEF_TYPE_JJDOC</name></expr>:
                        <expr_stmt><expr><name>mainClass</name> = <name>ORG_JJDOC_CLASS</name></expr>;</expr_stmt>

                        <break>break;</break>
                    </case><default>default:
                        <comment type="line">// Fall Through</comment>
                    </default>}</block></switch>
                }</block></then></if>
            }</block></else></if>

            <if>if <condition>(<expr><name>packagePrefix</name> == <name>null</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"failed to load JavaCC"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <if>if <condition>(<expr><name>mainClass</name> == <name>null</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"unknown task type " + <name>type</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <return>return <expr><name>packagePrefix</name> + <name>mainClass</name></expr>;</return>
        }</block> <finally>finally <block>{
            <if>if <condition>(<expr><name>l</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>l</name>.<name>cleanup</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></finally></try>
    }</block></function>

    <comment type="javadoc">/**
     * Helper method to determine the archive location index.
     *
     * @param home the javacc home path directory.
     * @throws BuildException thrown if the home directory is invalid
     * or if the archive could not be found despite attempts to do so.
     * @return the archive location index
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>getArchiveLocationIndex</name><parameter_list>(<param><decl><type><name>File</name></type> <name>home</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{

        <if>if <condition>(<expr><name>home</name> == <name>null</name> || !<call><name><name>home</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"JavaCC home must be a valid directory."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>ARCHIVE_LOCATIONS</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>File</name></type> <name>f</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name>home</name></expr></argument>, <argument><expr><name><name>ARCHIVE_LOCATIONS</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><call><name><name>f</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><name>i</name></expr>;</return>
            }</block></then></if>
        }</block></for>

        <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Could not find a path to JavaCC.zip "
                                 + "or javacc.jar from '" + <name>home</name> + "'."</expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>

    <comment type="javadoc">/**
     * Helper method to determine the major version number of JavaCC.
     *
     * @param home the javacc home path directory.
     * @throws BuildException thrown if the home directory is invalid
     * or if the archive could not be found despite attempts to do so.
     * @return a the major version number
     */</comment>
    <function><type><specifier>protected</specifier> <specifier>static</specifier> <name>int</name></type> <name>getMajorVersionNumber</name><parameter_list>(<param><decl><type><name>File</name></type> <name>home</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{

        <return>return
            <expr><name><name>ARCHIVE_LOCATIONS_VS_MAJOR_VERSION</name><index>[<expr><call><name>getArchiveLocationIndex</name><argument_list>(<argument><expr><name>home</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Determines the output Java file to be generated by the given grammar
     * file.
     *
     */</comment>
    <function><type><specifier>private</specifier> <name>File</name></type> <name>getOutputJavaFile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>outputdir</name></decl></param>, <param><decl><type><name>File</name></type> <name>srcfile</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>path</name> =<init> <expr><call><name><name>srcfile</name>.<name>getPath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Extract file's base-name</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>startBasename</name> =<init> <expr><call><name><name>path</name>.<name>lastIndexOf</name></name><argument_list>(<argument><expr><name><name>File</name>.<name>separator</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>startBasename</name> != -1</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>path</name> = <call><name><name>path</name>.<name>substring</name></name><argument_list>(<argument><expr><name>startBasename</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// Replace the file's extension with '.java'</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>startExtn</name> =<init> <expr><call><name><name>path</name>.<name>lastIndexOf</name></name><argument_list>(<argument><expr>'.'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>startExtn</name> != -1</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>path</name> = <call><name><name>path</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>startExtn</name></expr></argument>)</argument_list></call> + ".java"</expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>path</name> += ".java"</expr>;</expr_stmt>
        }</block></else></if>

        <comment type="line">// Change the directory</comment>
        <if>if <condition>(<expr><name>outputdir</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>path</name> = <name>outputdir</name> + <name><name>File</name>.<name>separator</name></name> + <name>path</name></expr>;</expr_stmt>
        }</block></then></if>

        <return>return <expr>new <call><name>File</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
