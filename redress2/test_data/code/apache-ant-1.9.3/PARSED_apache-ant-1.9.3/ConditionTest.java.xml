<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\taskdefs\ConditionTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildFileTest</name></name>;</import>

<comment type="javadoc">/**
 * @created 13 January 2002
 */</comment>
<class><specifier>public</specifier> class <name>ConditionTest</name> <super><extends>extends <name>BuildFileTest</name></extends></super> <block>{

    <comment type="javadoc">/**
     * Constructor for the ConditionTest object
     *
     * @param name we dont know
     */</comment>
    <constructor><specifier>public</specifier> <name>ConditionTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <comment type="javadoc">/**
     * The JUnit setup method
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr>"src/etc/testcases/taskdefs/condition.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * The teardown method for JUnit
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"cleanup"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testBasic</name><parameter_list>()</parameter_list> <block>{
       <expr_stmt><expr><call><name>expectPropertySet</name><argument_list>(<argument><expr>"basic"</expr></argument>,<argument><expr>"basic"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testConditionIncomplete</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectSpecificBuildException</name><argument_list>(<argument><expr>"condition-incomplete"</expr></argument>,
                                     <argument><expr>"property attribute has been omitted"</expr></argument>,
                                     <argument><expr>"The property attribute is required."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testConditionEmpty</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectSpecificBuildException</name><argument_list>(<argument><expr>"condition-empty"</expr></argument>,
                                     <argument><expr>"no conditions"</expr></argument>,
                                     <argument><expr>"You must nest a condition into &lt;condition&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testShortcut</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectPropertySet</name><argument_list>(<argument><expr>"shortcut"</expr></argument>,<argument><expr>"shortcut"</expr></argument>,<argument><expr>"set"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testUnset</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectPropertyUnset</name><argument_list>(<argument><expr>"dontset"</expr></argument>,<argument><expr>"dontset"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testSetValue</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectPropertySet</name><argument_list>(<argument><expr>"setvalue"</expr></argument>,<argument><expr>"setvalue"</expr></argument>,<argument><expr>"woowoo"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNegation</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectPropertySet</name><argument_list>(<argument><expr>"negation"</expr></argument>,<argument><expr>"negation"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNegationFalse</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectPropertyUnset</name><argument_list>(<argument><expr>"negationfalse"</expr></argument>,<argument><expr>"negationfalse"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNegationIncomplete</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectSpecificBuildException</name><argument_list>(<argument><expr>"negationincomplete"</expr></argument>,
                                     <argument><expr>"no conditions in &lt;not&gt;"</expr></argument>,
                                     <argument><expr>"You must nest a condition into &lt;not&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testAnd</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectPropertySet</name><argument_list>(<argument><expr>"and"</expr></argument>,<argument><expr>"and"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testAndFails</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectPropertyUnset</name><argument_list>(<argument><expr>"andfails"</expr></argument>,<argument><expr>"andfails"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testAndIncomplete</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectPropertyUnset</name><argument_list>(<argument><expr>"andincomplete"</expr></argument>,<argument><expr>"andincomplete"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testAndempty</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectPropertySet</name><argument_list>(<argument><expr>"andempty"</expr></argument>,<argument><expr>"andempty"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testOr</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectPropertySet</name><argument_list>(<argument><expr>"or"</expr></argument>,<argument><expr>"or"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testOrincomplete</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectPropertySet</name><argument_list>(<argument><expr>"or"</expr></argument>,<argument><expr>"or"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testOrFails</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectPropertyUnset</name><argument_list>(<argument><expr>"orfails"</expr></argument>,<argument><expr>"orfails"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testOrboth</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectPropertySet</name><argument_list>(<argument><expr>"orboth"</expr></argument>,<argument><expr>"orboth"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFilesmatchIdentical</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectPropertySet</name><argument_list>(<argument><expr>"filesmatch-identical"</expr></argument>,<argument><expr>"filesmatch-identical"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFilesmatchIncomplete</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectSpecificBuildException</name><argument_list>(<argument><expr>"filesmatch-incomplete"</expr></argument>,
                                     <argument><expr>"Missing file2 attribute"</expr></argument>,
                                     <argument><expr>"both file1 and file2 are required in filesmatch"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFilesmatchOddsizes</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectPropertyUnset</name><argument_list>(<argument><expr>"filesmatch-oddsizes"</expr></argument>,<argument><expr>"filesmatch-oddsizes"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFilesmatchExistence</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectPropertyUnset</name><argument_list>(<argument><expr>"filesmatch-existence"</expr></argument>, <argument><expr>"filesmatch-existence"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFilesmatchDifferent</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectPropertyUnset</name><argument_list>(<argument><expr>"filesmatch-different"</expr></argument>,<argument><expr>"filesmatch-different"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFilesmatchMatch</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectPropertySet</name><argument_list>(<argument><expr>"filesmatch-match"</expr></argument>,<argument><expr>"filesmatch-match"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFilesmatchDifferentSizes</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectPropertyUnset</name><argument_list>(<argument><expr>"filesmatch-different-sizes"</expr></argument>,
            <argument><expr>"filesmatch-different-sizes"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFilesmatchDifferentOnemissing</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectPropertyUnset</name><argument_list>(<argument><expr>"filesmatch-different-onemissing"</expr></argument>,
            <argument><expr>"filesmatch-different-onemissing"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFilesmatchDifferentEol</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"filesmatch-different-eol"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFilesmatchSameEol</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"filesmatch-same-eol"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFilesmatchNeitherExist</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"filesmatch-neitherexist"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testContains</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectPropertySet</name><argument_list>(<argument><expr>"contains"</expr></argument>,<argument><expr>"contains"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>testContainsDoesnt</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectPropertyUnset</name><argument_list>(<argument><expr>"contains-doesnt"</expr></argument>,<argument><expr>"contains-doesnt"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testContainsAnycase</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectPropertySet</name><argument_list>(<argument><expr>"contains-anycase"</expr></argument>,<argument><expr>"contains-anycase"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>testContainsIncomplete1</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectSpecificBuildException</name><argument_list>(<argument><expr>"contains-incomplete1"</expr></argument>,
                    <argument><expr>"Missing contains attribute"</expr></argument>,
                    <argument><expr>"both string and substring are required in contains"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testContainsIncomplete2</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectSpecificBuildException</name><argument_list>(<argument><expr>"contains-incomplete2"</expr></argument>,
                    <argument><expr>"Missing contains attribute"</expr></argument>,
                    <argument><expr>"both string and substring are required in contains"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testIstrue</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectPropertySet</name><argument_list>(<argument><expr>"istrue"</expr></argument>,<argument><expr>"istrue"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testIstrueNot</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectPropertyUnset</name><argument_list>(<argument><expr>"istrue-not"</expr></argument>,<argument><expr>"istrue-not"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testIstrueFalse</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectPropertyUnset</name><argument_list>(<argument><expr>"istrue-false"</expr></argument>,<argument><expr>"istrue-false"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>testIstrueIncomplete1</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectSpecificBuildException</name><argument_list>(<argument><expr>"istrue-incomplete"</expr></argument>,
                    <argument><expr>"Missing attribute"</expr></argument>,
                    <argument><expr>"Nothing to test for truth"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testIsfalseTrue</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectPropertyUnset</name><argument_list>(<argument><expr>"isfalse-true"</expr></argument>,<argument><expr>"isfalse-true"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testIsfalseNot</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectPropertySet</name><argument_list>(<argument><expr>"isfalse-not"</expr></argument>,<argument><expr>"isfalse-not"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testIsfalseFalse</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectPropertySet</name><argument_list>(<argument><expr>"isfalse-false"</expr></argument>,<argument><expr>"isfalse-false"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>testIsfalseIncomplete1</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectSpecificBuildException</name><argument_list>(<argument><expr>"isfalse-incomplete"</expr></argument>,
                    <argument><expr>"Missing attribute"</expr></argument>,
                    <argument><expr>"Nothing to test for falsehood"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testElse</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testElse"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testResourcesmatchError</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildException</name><argument_list>(<argument><expr>"resourcesmatch-error"</expr></argument>,
            <argument><expr>"should fail because no resources specified"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testResourcesmatchEmpty</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"resourcesmatch-match-empty"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testResourcesmatchOne</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"resourcesmatch-match-one"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testResourcesmatchBinary</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"resourcesmatch-match-binary"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testResourcesmatchMultipleBinary</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"resourcesmatch-match-multiple-binary"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testResourcesmatchDiffer</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"resourcesmatch-differ"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testResourcesmatchText</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"resourcesmatch-match-text"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testResourcesmatchNoneExist</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"resourcesmatch-noneexist"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
