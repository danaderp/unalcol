<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\sound\SoundTask.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>sound</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Random</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>

<comment type="javadoc">/**
 * Plays a sound file at the end of the build, according to whether the build failed or succeeded.
 *
 * There are three attributes to be set:
 *
 * &lt;code&gt;source&lt;/code&gt;: the location of the audio file to be played
 * &lt;code&gt;duration&lt;/code&gt;: play the sound file continuously until "duration" milliseconds has expired
 * &lt;code&gt;loops&lt;/code&gt;: the number of times the sound file should be played until stopped
 *
 * I have only tested this with .WAV and .AIFF sound file formats. Both seem
 * to work fine.
 *
 * plans for the future:
 * - use the midi api to define sounds (or drum beat etc) in xml and have
 *   Ant play them back
 *
 */</comment>

<class><specifier>public</specifier> class <name>SoundTask</name> <super><extends>extends <name>Task</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>BuildAlert</name></type> <name>success</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>BuildAlert</name></type> <name>fail</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * add a sound when the build succeeds
     * @return a BuildAlert to be configured
     */</comment>
    <function><type><specifier>public</specifier> <name>BuildAlert</name></type> <name>createSuccess</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>success</name> = new <call><name>BuildAlert</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>success</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * add a sound when the build fails
     * @return a BuildAlert to be configured
     */</comment>
    <function><type><specifier>public</specifier> <name>BuildAlert</name></type> <name>createFail</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>fail</name> = new <call><name>BuildAlert</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>fail</name></expr>;</return>
     }</block></function>

    <comment type="javadoc">/** Constructor for SoundTask. */</comment>
    <constructor><specifier>public</specifier> <name>SoundTask</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <comment type="javadoc">/**
     * Initialize the task.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>init</name><parameter_list>()</parameter_list> <block>{
    }</block></function>

    <comment type="javadoc">/**
     * Execute the task.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <block>{

        <decl_stmt><decl><type><name>AntSoundPlayer</name></type> <name>soundPlayer</name> =<init> <expr>new <call><name>AntSoundPlayer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>success</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"No nested success element found."</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>soundPlayer</name>.<name>addBuildSuccessfulSound</name></name><argument_list>(<argument><expr><call><name><name>success</name>.<name>getSource</name></name><argument_list>()</argument_list></call></expr></argument>,
              <argument><expr><call><name><name>success</name>.<name>getLoops</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>success</name>.<name>getDuration</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <if>if <condition>(<expr><name>fail</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"No nested failure element found."</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>soundPlayer</name>.<name>addBuildFailedSound</name></name><argument_list>(<argument><expr><call><name><name>fail</name>.<name>getSource</name></name><argument_list>()</argument_list></call></expr></argument>,
              <argument><expr><call><name><name>fail</name>.<name>getLoops</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>fail</name>.<name>getDuration</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>addBuildListener</name><argument_list>(<argument><expr><name>soundPlayer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <comment type="javadoc">/**
     * A class to be extended by any BuildAlert's that require the output
     * of sound.
     */</comment>
    <class><specifier>public</specifier> class <name>BuildAlert</name> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>source</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>loops</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>Long</name></type> <name>duration</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * Sets the duration in milliseconds the file should be played; optional.
         * @param duration the duration in milliseconds
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setDuration</name><parameter_list>(<param><decl><type><name>Long</name></type> <name>duration</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>duration</name></name> = <name>duration</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * Sets the location of the file to get the audio; required.
         *
         * @param source the name of a sound-file directory or of the audio file
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setSource</name><parameter_list>(<param><decl><type><name>File</name></type> <name>source</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>source</name></name> = <name>source</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * Sets the number of times the source file should be played; optional.
         *
         * @param loops the number of loops to play the source file
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setLoops</name><parameter_list>(<param><decl><type><name>int</name></type> <name>loops</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>loops</name></name> = <name>loops</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * Gets the location of the file to get the audio.
         * @return the file location
         */</comment>
        <function><type><specifier>public</specifier> <name>File</name></type> <name>getSource</name><parameter_list>()</parameter_list> <block>{
            <decl_stmt><decl><type><name>File</name></type> <name>nofile</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <comment type="line">// Check if source is a directory</comment>
            <if>if <condition>(<expr><call><name><name>source</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><call><name><name>source</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <comment type="line">// get the list of files in the dir</comment>
                    <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>entries</name> =<init> <expr><call><name><name>source</name>.<name>list</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>Vector</name></type> <name>files</name> =<init> <expr>new <call><name>Vector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>entries</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                        <decl_stmt><decl><type><name>File</name></type> <name>f</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if>if <condition>(<expr><call><name><name>f</name>.<name>isFile</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                            <expr_stmt><expr><call><name><name>files</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                    }</block></for>
                    <if>if <condition>(<expr><call><name><name>files</name>.<name>size</name></name><argument_list>()</argument_list></call> &lt; 1</expr>)</condition><then> <block>{
                        <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"No files found in directory " + <name>source</name></expr></argument>)</argument_list></call></expr>;</throw>
                    }</block></then></if>
                    <decl_stmt><decl><type><name>int</name></type> <name>numfiles</name> =<init> <expr><call><name><name>files</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <comment type="line">// get a random number between 0 and the number of files</comment>
                    <decl_stmt><decl><type><name>Random</name></type> <name>rn</name> =<init> <expr>new <call><name>Random</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>x</name> =<init> <expr><call><name><name>rn</name>.<name>nextInt</name></name><argument_list>(<argument><expr><name>numfiles</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <comment type="line">// set the source to the file at that location</comment>
                    <expr_stmt><expr><name><name>this</name>.<name>source</name></name> = (<name>File</name>) <call><name><name>files</name>.<name>elementAt</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>source</name> + ": invalid path."</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name>.<name>source</name></name> = <name>nofile</name></expr>;</expr_stmt>
            }</block></else></if>
            <return>return <expr><name><name>this</name>.<name>source</name></name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Sets the number of times the source file should be played.
         *
         * @return the number of loops to play the source file
         */</comment>
        <function><type><specifier>public</specifier> <name>int</name></type> <name>getLoops</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name><name>this</name>.<name>loops</name></name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Gets the duration in milliseconds the file should be played.
         * @return the duration in milliseconds
         */</comment>
        <function><type><specifier>public</specifier> <name>Long</name></type> <name>getDuration</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name><name>this</name>.<name>duration</name></name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></class>

</unit>
