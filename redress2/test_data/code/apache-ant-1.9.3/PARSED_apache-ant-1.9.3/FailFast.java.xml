<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\types\resources\FailFast.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>Set</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashSet</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>WeakHashMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>NoSuchElementException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ConcurrentModificationException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Resource</name></name>;</import>

<comment type="javadoc">/**
 * Helper class for ResourceCollections to return Iterators
 * that fail on changes to the object.
 * @since Ant 1.7
 */</comment>
<comment type="block">/*package-private*/</comment> <class>class <name>FailFast</name> <super><implements>implements <name><name>Iterator</name><argument_list>&lt;<argument><name>Resource</name></argument>&gt;</argument_list></name></implements></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>WeakHashMap</name><argument_list>&lt;<argument><name>Object</name></argument>, <argument><name><name>Set</name><argument_list>&lt;<argument><name>FailFast</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>MAP</name> =<init> <expr>new <call><name><name>WeakHashMap</name><argument_list>&lt;<argument><name>Object</name></argument>, <argument><name><name>Set</name><argument_list>&lt;<argument><name>FailFast</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Invalidate any in-use Iterators from the specified Object.
     * @param o the parent Object.
     */</comment>
    <function><type><specifier>static</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>invalidate</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>o</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>Set</name><argument_list>&lt;<argument><name>FailFast</name></argument>&gt;</argument_list></name></type> <name>s</name> =<init> <expr><call><name><name>MAP</name>.<name>get</name></name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>s</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>s</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>FailFast</name></type> <name>f</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>Set</name><argument_list>&lt;<argument><name>FailFast</name></argument>&gt;</argument_list></name></type> <name>s</name> =<init> <expr><call><name><name>MAP</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>f</name>.<name>parent</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>s</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>s</name> = new <call><name><name>HashSet</name><argument_list>&lt;<argument><name>FailFast</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>MAP</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>f</name>.<name>parent</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>s</name>.<name>add</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>remove</name><parameter_list>(<param><decl><type><name>FailFast</name></type> <name>f</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>Set</name><argument_list>&lt;<argument><name>FailFast</name></argument>&gt;</argument_list></name></type> <name>s</name> =<init> <expr><call><name><name>MAP</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>f</name>.<name>parent</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>s</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>s</name>.<name>remove</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>failFast</name><parameter_list>(<param><decl><type><name>FailFast</name></type> <name>f</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>Set</name><argument_list>&lt;<argument><name>FailFast</name></argument>&gt;</argument_list></name></type> <name>s</name> =<init> <expr><call><name><name>MAP</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>f</name>.<name>parent</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>s</name>.<name>contains</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>ConcurrentModificationException</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
    }</block></function>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Object</name></type> <name>parent</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name>Resource</name></argument>&gt;</argument_list></name></type> <name>wrapped</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Construct a new FailFast Iterator wrapping the specified Iterator
     * and dependent upon the specified parent Object.
     * @param o the parent Object.
     * @param i the wrapped Iterator.
     */</comment>
    <constructor><name>FailFast</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>o</name></decl></param>, <param><decl><type><name><name>Iterator</name><argument_list>&lt;<argument><name>Resource</name></argument>&gt;</argument_list></name></type> <name>i</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>o</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"parent object is null"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>i</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"cannot wrap null iterator"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name>parent</name> = <name>o</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>i</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>wrapped</name> = <name>i</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></constructor>

    <comment type="javadoc">/**
     * Fulfill the Iterator contract.
     * @return true if there are more elements.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasNext</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>wrapped</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>failFast</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>wrapped</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Fulfill the Iterator contract.
     * @return the next element.
     * @throws NoSuchElementException if no more elements.
     */</comment>
    <function><type><specifier>public</specifier> <name>Resource</name></type> <name>next</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>wrapped</name> == <name>null</name> || !<call><name><name>wrapped</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>NoSuchElementException</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name>failFast</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <return>return <expr><call><name><name>wrapped</name>.<name>next</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block> <finally>finally <block>{
            <if>if <condition>(<expr>!<call><name><name>wrapped</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>wrapped</name> = <name>null</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>remove</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></finally></try>
    }</block></function>

    <comment type="javadoc">/**
     * Fulfill the Iterator contract.
     * @throws UnsupportedOperationException always.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>remove</name><parameter_list>()</parameter_list> <block>{
        <throw>throw <expr>new <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    }</block></function>

}</block></class>

</unit>
