<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\types\FilterSet.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Hashtable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Properties</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Set</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>VectorSet</name></name>;</import>

<comment type="javadoc">/**
 * A set of filters to be applied to something.
 *
 * A filter set may have begintoken and endtokens defined.
 *
 */</comment>
<class><specifier>public</specifier> class <name>FilterSet</name> <super><extends>extends <name>DataType</name></extends> <implements>implements <name>Cloneable</name></implements></super> <block>{

    <comment type="javadoc">/**
     * Individual filter component of filterset.
     *
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Filter</name> <block>{
        <comment type="line">// CheckStyle:VisibilityModifier OFF - bc</comment>
        <comment type="javadoc">/** Token which will be replaced in the filter operation. */</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>token</name></decl>;</decl_stmt>

        <comment type="javadoc">/** The value which will replace the token in the filtering operation. */</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>value</name></decl>;</decl_stmt>
        <comment type="line">// CheckStyle:VisibilityModifier ON</comment>

        <comment type="javadoc">/**
         * Constructor for the Filter object.
         *
         * @param token  The token which will be replaced when filtering.
         * @param value  The value which will replace the token when filtering.
         */</comment>
        <constructor><specifier>public</specifier> <name>Filter</name><parameter_list>(<param><decl><type><name>String</name></type> <name>token</name></decl></param>, <param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
           <expr_stmt><expr><call><name>setToken</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><call><name>setValue</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="javadoc">/**
         * No-argument constructor.
         */</comment>
        <constructor><specifier>public</specifier> <name>Filter</name><parameter_list>()</parameter_list> <block>{
        }</block></constructor>

        <comment type="javadoc">/**
         * Sets the Token attribute of the Filter object.
         *
         * @param token  The new Token value.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setToken</name><parameter_list>(<param><decl><type><name>String</name></type> <name>token</name></decl></param>)</parameter_list> <block>{
           <expr_stmt><expr><name><name>this</name>.<name>token</name></name> = <name>token</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * Sets the Value attribute of the Filter object.
         *
         * @param value  The new Value value.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setValue</name><parameter_list>(<param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
           <expr_stmt><expr><name><name>this</name>.<name>value</name></name> = <name>value</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * Gets the Token attribute of the Filter object.
         *
         * @return   The Token value.
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getToken</name><parameter_list>()</parameter_list> <block>{
           <return>return <expr><name>token</name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Gets the Value attribute of the Filter object.
         *
         * @return   The Value value.
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getValue</name><parameter_list>()</parameter_list> <block>{
           <return>return <expr><name>value</name></expr>;</return>
        }</block></function>
     }</block></class>

    <comment type="javadoc">/**
     * The filtersfile nested element.
     *
     */</comment>
    <class><specifier>public</specifier> class <name>FiltersFile</name> <block>{

        <comment type="javadoc">/**
         * Constructor for the FiltersFile object.
         */</comment>
        <constructor><specifier>public</specifier> <name>FiltersFile</name><parameter_list>()</parameter_list> <block>{
        }</block></constructor>

        <comment type="javadoc">/**
         * Sets the file from which filters will be read.
         *
         * @param file the file from which filters will be read.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setFile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>file</name></decl></param>)</parameter_list> <block>{
           <expr_stmt><expr><call><name><name>filtersFiles</name>.<name>add</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>

    <comment type="javadoc">/**
     * EnumeratedAttribute to set behavior WRT missing filtersfiles:
     * "fail" (default), "warn", "ignore".
     * @since Ant 1.7
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>OnMissing</name> <super><extends>extends <name>EnumeratedAttribute</name></extends></super> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name><index>[]</index></type> <name>VALUES</name>
            =<init> <expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"fail"</expr>, <expr>"warn"</expr>, <expr>"ignore"</expr>}</block></expr></init></decl>;</decl_stmt>

        <comment type="javadoc">/** Fail value */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>OnMissing</name></type> <name>FAIL</name> =<init> <expr>new <call><name>OnMissing</name><argument_list>(<argument><expr>"fail"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="javadoc">/** Warn value */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>OnMissing</name></type> <name>WARN</name> =<init> <expr>new <call><name>OnMissing</name><argument_list>(<argument><expr>"warn"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="javadoc">/** Ignore value */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>OnMissing</name></type> <name>IGNORE</name> =<init> <expr>new <call><name>OnMissing</name><argument_list>(<argument><expr>"ignore"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>FAIL_INDEX</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>WARN_INDEX</name> =<init> <expr>1</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>IGNORE_INDEX</name> =<init> <expr>2</expr></init></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * Default constructor.
         */</comment>
        <constructor><specifier>public</specifier> <name>OnMissing</name><parameter_list>()</parameter_list> <block>{
        }</block></constructor>

        <comment type="javadoc">/**
         * Convenience constructor.
         * @param value the value to set.
         */</comment>
        <constructor><specifier>public</specifier> <name>OnMissing</name><parameter_list>(<param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>setValue</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="line">//inherit doc</comment>
        <comment type="javadoc">/** {@inheritDoc}. */</comment>
        <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getValues</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>VALUES</name></expr>;</return>
        }</block></function>
    }</block></class>

    <comment type="javadoc">/** The default token start string */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEFAULT_TOKEN_START</name> =<init> <expr>"@"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default token end string */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEFAULT_TOKEN_END</name> =<init> <expr>"@"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>startOfToken</name> =<init> <expr><name>DEFAULT_TOKEN_START</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>endOfToken</name> =<init> <expr><name>DEFAULT_TOKEN_END</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Contains a list of parsed tokens */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>passedTokens</name></decl>;</decl_stmt>
    <comment type="javadoc">/** if a duplicate token is found, this is set to true */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>duplicateToken</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>recurse</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>filterHash</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>File</name></argument>&gt;</argument_list></name></type> <name>filtersFiles</name> =<init> <expr>new <call><name><name>Vector</name><argument_list>&lt;<argument><name>File</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>OnMissing</name></type> <name>onMissingFiltersFile</name> =<init> <expr><name><name>OnMissing</name>.<name>FAIL</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>readingFiles</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>recurseDepth</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * List of ordered filters and filter files.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>Filter</name></argument>&gt;</argument_list></name></type> <name>filters</name> =<init> <expr>new <call><name><name>Vector</name><argument_list>&lt;<argument><name>Filter</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Default constructor.
     */</comment>
    <constructor><specifier>public</specifier> <name>FilterSet</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <comment type="javadoc">/**
     * Create a Filterset from another filterset.
     *
     * @param filterset the filterset upon which this filterset will be based.
     */</comment>
    <constructor><specifier>protected</specifier> <name>FilterSet</name><parameter_list>(<param><decl><type><name>FilterSet</name></type> <name>filterset</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><annotation>@<name>SuppressWarnings</name><argument_list>("unchecked")</argument_list></annotation>
        <name><name>Vector</name><argument_list>&lt;<argument><name>Filter</name></argument>&gt;</argument_list></name></type> <name>clone</name> =<init> <expr>(<name><name>Vector</name><argument_list>&lt;<argument><name>Filter</name></argument>&gt;</argument_list></name>) <call><name><name>filterset</name>.<name>getFilters</name></name><argument_list>()</argument_list></call>.<call><name>clone</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>filters</name></name> = <name>clone</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Get the filters in the filter set.
     *
     * @return a Vector of Filter instances.
     */</comment>
    <function><type><specifier>protected</specifier> <specifier>synchronized</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>Filter</name></argument>&gt;</argument_list></name></type> <name>getFilters</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name>getRef</name><argument_list>()</argument_list></call>.<call><name>getFilters</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>dieOnCircularReference</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//silly hack to avoid stack overflow...</comment>
        <if>if <condition>(<expr>!<name>readingFiles</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>readingFiles</name> = true</expr>;</expr_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>size</name> =<init> <expr><call><name><name>filtersFiles</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>size</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <expr_stmt><expr><call><name>readFiltersFromFile</name><argument_list>(<argument><expr>(<name>File</name>) <call><name><name>filtersFiles</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><call><name><name>filtersFiles</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>readingFiles</name> = false</expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>filters</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the referenced filter set.
     *
     * @return the filterset from the reference.
     */</comment>
    <function><type><specifier>protected</specifier> <name>FilterSet</name></type> <name>getRef</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>(<name>FilterSet</name>) <call><name>getCheckedRef</name><argument_list>(<argument><expr><name><name>FilterSet</name>.<name><name/></name></name>class</expr></argument>, <argument><expr>"filterset"</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Gets the filter hash of the FilterSet.
     *
     * @return   The hash of the tokens and values for quick lookup.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getFilterHash</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name>getRef</name><argument_list>()</argument_list></call>.<call><name>getFilterHash</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>dieOnCircularReference</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>filterHash</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>filterHash</name> = new <call><name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getFilters</name><argument_list>()</argument_list></call>.<call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for (<init><decl><type><name><name>Enumeration</name><argument_list>&lt;<argument><name>Filter</name></argument>&gt;</argument_list></name></type> <name>e</name> =<init> <expr><call><name>getFilters</name><argument_list>()</argument_list></call>.<call><name>elements</name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
               <decl_stmt><decl><type><name>Filter</name></type> <name>filter</name> =<init> <expr><call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
               <expr_stmt><expr><call><name><name>filterHash</name>.<name>put</name></name><argument_list>(<argument><expr><call><name><name>filter</name>.<name>getToken</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>filter</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></then></if>
        <return>return <expr><name>filterHash</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the file containing the filters for this filterset.
     *
     * @param filtersFile sets the filter file from which to read filters
     *        for this filter set.
     * @throws BuildException if there is an error.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFiltersfile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>filtersFile</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr><call><name>tooManyAttributes</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>filtersFiles</name>.<name>add</name></name><argument_list>(<argument><expr><name>filtersFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the string used to id the beginning of a token.
     *
     * @param startOfToken  The new Begintoken value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBeginToken</name><parameter_list>(<param><decl><type><name>String</name></type> <name>startOfToken</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr><call><name>tooManyAttributes</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>startOfToken</name> == <name>null</name> || "".<call><name>equals</name><argument_list>(<argument><expr><name>startOfToken</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"beginToken must not be empty"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>startOfToken</name></name> = <name>startOfToken</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the begin token for this filterset.
     *
     * @return the filter set's begin token for filtering.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getBeginToken</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name>getRef</name><argument_list>()</argument_list></call>.<call><name>getBeginToken</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <return>return <expr><name>startOfToken</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the string used to id the end of a token.
     *
     * @param endOfToken  The new Endtoken value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setEndToken</name><parameter_list>(<param><decl><type><name>String</name></type> <name>endOfToken</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr><call><name>tooManyAttributes</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>endOfToken</name> == <name>null</name> || "".<call><name>equals</name><argument_list>(<argument><expr><name>endOfToken</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"endToken must not be empty"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>endOfToken</name></name> = <name>endOfToken</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the end token for this filterset.
     *
     * @return the filter set's end token for replacement delimiting.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getEndToken</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name>getRef</name><argument_list>()</argument_list></call>.<call><name>getEndToken</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <return>return <expr><name>endOfToken</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set whether recursive token expansion is enabled.
     * @param recurse &lt;code&gt;boolean&lt;/code&gt; whether to recurse.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRecurse</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>recurse</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>recurse</name></name> = <name>recurse</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get whether recursive token expansion is enabled.
     * @return &lt;code&gt;boolean&lt;/code&gt; whether enabled.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isRecurse</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>recurse</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Read the filters from the given file.
     *
     * @param filtersFile        the file from which filters are read.
     * @exception BuildException when the file cannot be read.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>readFiltersFromFile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>filtersFile</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr><call><name>tooManyAttributes</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>filtersFile</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
           <expr_stmt><expr><call><name>handleMissingFile</name><argument_list>(<argument><expr>"Could not read filters from file "
                                     + <name>filtersFile</name> + " as it doesn't exist."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>filtersFile</name>.<name>isFile</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
           <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Reading filters from " + <name>filtersFile</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <decl_stmt><decl><type><name>FileInputStream</name></type> <name>in</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
           <try>try <block>{
              <decl_stmt><decl><type><name>Properties</name></type> <name>props</name> =<init> <expr>new <call><name>Properties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
              <expr_stmt><expr><name>in</name> = new <call><name>FileInputStream</name><argument_list>(<argument><expr><name>filtersFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>props</name>.<name>load</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

              <decl_stmt><decl><type><name><name>Enumeration</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>e</name> =<init> <expr><call><name><name>props</name>.<name>propertyNames</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
              <decl_stmt><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>Filter</name></argument>&gt;</argument_list></name></type> <name>filts</name> =<init> <expr><call><name>getFilters</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
              <while>while <condition>(<expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                 <decl_stmt><decl><type><name>String</name></type> <name>strPropName</name> =<init> <expr>(<name>String</name>) <call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                 <decl_stmt><decl><type><name>String</name></type> <name>strValue</name> =<init> <expr><call><name><name>props</name>.<name>getProperty</name></name><argument_list>(<argument><expr><name>strPropName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                 <expr_stmt><expr><call><name><name>filts</name>.<name>addElement</name></name><argument_list>(<argument><expr>new <call><name>Filter</name><argument_list>(<argument><expr><name>strPropName</name></expr></argument>, <argument><expr><name>strValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              }</block></while>
           }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>ex</name></decl></param>) <block>{
              <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Could not read filters from file: "
                  + <name>filtersFile</name></expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</throw>
           }</block></catch> <finally>finally <block>{
              <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           }</block></finally></try>
        }</block></then> <else>else <block>{
           <expr_stmt><expr><call><name>handleMissingFile</name><argument_list>(
               <argument><expr>"Must specify a file rather than a directory in "
               + "the filtersfile attribute:" + <name>filtersFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>filterHash</name> = <name>null</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Does replacement on the given string with token matching.
     * This uses the defined begintoken and endtoken values which default
     * to @ for both.
     * This resets the passedTokens and calls iReplaceTokens to
     * do the actual replacements.
     *
     * @param line  The line in which to process embedded tokens.
     * @return      The input string after token replacement.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>String</name></type> <name>replaceTokens</name><parameter_list>(<param><decl><type><name>String</name></type> <name>line</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>iReplaceTokens</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Add a new filter.
     *
     * @param filter the filter to be added.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>addFilter</name><parameter_list>(<param><decl><type><name>Filter</name></type> <name>filter</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr><call><name>noChildrenAllowed</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>filters</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>filterHash</name> = <name>null</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Create a new FiltersFile.
     *
     * @return The filtersfile that was created.
     */</comment>
    <function><type><specifier>public</specifier> <name>FiltersFile</name></type> <name>createFiltersfile</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr><call><name>noChildrenAllowed</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr>new <call><name>FiltersFile</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Add a new filter made from the given token and value.
     *
     * @param token The token for the new filter.
     * @param value The value for the new filter.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>addFilter</name><parameter_list>(<param><decl><type><name>String</name></type> <name>token</name></decl></param>, <param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr><call><name>noChildrenAllowed</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name>addFilter</name><argument_list>(<argument><expr>new <call><name>Filter</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a Filterset to this filter set.
     *
     * @param filterSet the filterset to be added to this filterset
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>addConfiguredFilterSet</name><parameter_list>(<param><decl><type><name>FilterSet</name></type> <name>filterSet</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr><call><name>noChildrenAllowed</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <for>for (<init><decl><type><name>Filter</name></type> <name>filter</name> :<range> <expr><call><name><name>filterSet</name>.<name>getFilters</name></name><argument_list>()</argument_list></call></expr></range></decl></init>) <block>{
            <expr_stmt><expr><call><name>addFilter</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Adds the properties provided by the specified PropertySet to this filterset.
     * 
     * @param propertySet the propertyset to be added to this propertyset
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>addConfiguredPropertySet</name><parameter_list>(<param><decl><type><name>PropertySet</name></type> <name>propertySet</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr><call><name>noChildrenAllowed</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>Properties</name></type> <name>p</name> =<init> <expr><call><name><name>propertySet</name>.<name>getProperties</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Set</name><argument_list>&lt;<argument><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name>Object</name></argument>,<argument><name>Object</name></argument>&gt;</argument_list></name></name></argument>&gt;</argument_list></name></type> <name>entries</name> =<init> <expr><call><name><name>p</name>.<name>entrySet</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name>Object</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> :<range> <expr><name>entries</name></expr></range></decl></init>) <block>{
            <expr_stmt><expr><call><name>addFilter</name><argument_list>(<argument><expr>new <call><name>Filter</name><argument_list>(<argument><expr><call><name><name>String</name>.<name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>entry</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                 <argument><expr><call><name><name>String</name>.<name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>entry</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Test to see if this filter set has filters.
     *
     * @return Return true if there are filters in this set.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>boolean</name></type> <name>hasFilters</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getFilters</name><argument_list>()</argument_list></call>.<call><name>size</name><argument_list>()</argument_list></call> &gt; 0</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Clone the filterset.
     *
     * @return a deep clone of this filterset.
     *
     * @throws BuildException if the clone cannot be performed.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>((<name>FilterSet</name>) <call><name>getRef</name><argument_list>()</argument_list></call>).<call><name>clone</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <try>try <block>{
            <decl_stmt><decl><type><name>FilterSet</name></type> <name>fs</name> =<init> <expr>(<name>FilterSet</name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><annotation>@<name>SuppressWarnings</name><argument_list>("unchecked")</argument_list></annotation>
            <name><name>Vector</name><argument_list>&lt;<argument><name>Filter</name></argument>&gt;</argument_list></name></type> <name>clonedFilters</name> =<init> <expr>(<name><name>Vector</name><argument_list>&lt;<argument><name>Filter</name></argument>&gt;</argument_list></name>) <call><name>getFilters</name><argument_list>()</argument_list></call>.<call><name>clone</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>fs</name>.<name>filters</name></name> = <name>clonedFilters</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>fs</name>.<name>setProject</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>fs</name></expr>;</return>
        }</block> <catch>catch (<param><decl><type><name>CloneNotSupportedException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * Set the behavior WRT missing filtersfiles.
     * @param onMissingFiltersFile the OnMissing describing the behavior.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOnMissingFiltersFile</name><parameter_list>(<param><decl><type><name>OnMissing</name></type> <name>onMissingFiltersFile</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>onMissingFiltersFile</name></name> = <name>onMissingFiltersFile</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the onMissingFiltersFile setting.
     * @return the OnMissing instance.
     */</comment>
    <function><type><specifier>public</specifier> <name>OnMissing</name></type> <name>getOnMissingFiltersFile</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>onMissingFiltersFile</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Does replacement on the given string with token matching.
     * This uses the defined begintoken and endtoken values which default
     * to @ for both.
     *
     * @param line  The line to process the tokens in.
     * @return      The string with the tokens replaced.
     */</comment>
    <function><type><specifier>private</specifier> <specifier>synchronized</specifier> <name>String</name></type> <name>iReplaceTokens</name><parameter_list>(<param><decl><type><name>String</name></type> <name>line</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>beginToken</name> =<init> <expr><call><name>getBeginToken</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>endToken</name> =<init> <expr><call><name>getEndToken</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> =<init> <expr><call><name><name>line</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>beginToken</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>index</name> &gt; -1</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>tokens</name> =<init> <expr><call><name>getFilterHash</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <try>try <block>{
                <decl_stmt><decl><type><name>StringBuilder</name></type> <name>b</name> =<init> <expr>new <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>token</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>value</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

                <while>while <condition>(<expr><name>index</name> &gt; -1</expr>)</condition> <block>{
                    <comment type="line">//can't have zero-length token</comment>
                    <decl_stmt><decl><type><name>int</name></type> <name>endIndex</name> =<init> <expr><call><name><name>line</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>endToken</name></expr></argument>,
                        <argument><expr><name>index</name> + <call><name><name>beginToken</name>.<name>length</name></name><argument_list>()</argument_list></call> + 1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>endIndex</name> == -1</expr>)</condition><then> <block>{
                        <break>break;</break>
                    }</block></then></if>
                    <expr_stmt><expr><name>token</name>
                        = <call><name><name>line</name>.<name>substring</name></name><argument_list>(<argument><expr><name>index</name> + <call><name><name>beginToken</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>endIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>b</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>line</name>.<name>substring</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><call><name><name>tokens</name>.<name>containsKey</name></name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>value</name> = <call><name><name>tokens</name>.<name>get</name></name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>recurse</name> &amp;&amp; !<call><name><name>value</name>.<name>equals</name></name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                            <comment type="line">// we have another token, let's parse it.</comment>
                            <expr_stmt><expr><name>value</name> = <call><name>replaceTokens</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Replacing: " + <name>beginToken</name> + <name>token</name> + <name>endToken</name>
                            + " -&gt; " + <name>value</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>b</name>.<name>append</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>i</name> = <name>index</name> + <call><name><name>beginToken</name>.<name>length</name></name><argument_list>()</argument_list></call> + <call><name><name>token</name>.<name>length</name></name><argument_list>()</argument_list></call>
                            + <call><name><name>endToken</name>.<name>length</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <comment type="line">// just append first character of beginToken</comment>
                        <comment type="line">// and search further</comment>
                        <comment type="line">// we can't skip the complete beginToken since</comment>
                        <comment type="line">// it may contain the start of another</comment>
                        <comment type="line">// candidate begin token (Bugzilla 45094)</comment>
                        <expr_stmt><expr><call><name><name>b</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>beginToken</name>.<name>charAt</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>i</name> = <name>index</name> + 1</expr>;</expr_stmt>
                    }</block></else></if>
                    <expr_stmt><expr><name>index</name> = <call><name><name>line</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>beginToken</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></while>

                <expr_stmt><expr><call><name><name>b</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>line</name>.<name>substring</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><call><name><name>b</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
            }</block> <catch>catch (<param><decl><type><name>StringIndexOutOfBoundsException</name></type> <name>e</name></decl></param>) <block>{
                <return>return <expr><name>line</name></expr>;</return>
            }</block></catch></try>
        }</block></then> <else>else <block>{
           <return>return <expr><name>line</name></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * This parses tokens which point to tokens.
     * It also maintains a list of currently used tokens, so we cannot
     * get into an infinite loop.
     * @param line the value / token to parse.
     * @param parent the parent token (= the token it was parsed from).
     */</comment>
    <function><type><specifier>private</specifier> <specifier>synchronized</specifier> <name>String</name></type> <name>replaceTokens</name><parameter_list>(<param><decl><type><name>String</name></type> <name>line</name></decl></param>, <param><decl><type><name>String</name></type> <name>parent</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>beginToken</name> =<init> <expr><call><name>getBeginToken</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>endToken</name> =<init> <expr><call><name>getEndToken</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>recurseDepth</name> == 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>passedTokens</name> = new <call><name><name>VectorSet</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>recurseDepth</name>++</expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>passedTokens</name>.<name>contains</name></name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call> &amp;&amp; !<name>duplicateToken</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>duplicateToken</name> = true</expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(
                <argument><expr>"Infinite loop in tokens. Currently known tokens : "
                + <call><name><name>passedTokens</name>.<name>toString</name></name><argument_list>()</argument_list></call> + "\nProblem token : " + <name>beginToken</name>
                + <name>parent</name> + <name>endToken</name> + " called from " + <name>beginToken</name>
                + <call><name><name>passedTokens</name>.<name>lastElement</name></name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call> + <name>endToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>recurseDepth</name>--</expr>;</expr_stmt>
            <return>return <expr><name>parent</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>passedTokens</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>value</name> =<init> <expr><call><name>iReplaceTokens</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>value</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>beginToken</name></expr></argument>)</argument_list></call> == -1 &amp;&amp; !<name>duplicateToken</name>
                &amp;&amp; <name>recurseDepth</name> == 1</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>passedTokens</name> = <name>null</name></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><name>duplicateToken</name></expr>)</condition><then> <block>{
            <comment type="line">// should always be the case...</comment>
            <if>if <condition>(<expr><call><name><name>passedTokens</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>value</name> = (<name>String</name>) <call><name><name>passedTokens</name>.<name>remove</name></name><argument_list>(<argument><expr><call><name><name>passedTokens</name>.<name>size</name></name><argument_list>()</argument_list></call> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><call><name><name>passedTokens</name>.<name>size</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>value</name> = <name>beginToken</name> + <name>value</name> + <name>endToken</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>duplicateToken</name> = false</expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>passedTokens</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
            <comment type="line">// remove last seen token when crawling out of recursion</comment>
            <expr_stmt><expr><call><name><name>passedTokens</name>.<name>remove</name></name><argument_list>(<argument><expr><call><name><name>passedTokens</name>.<name>size</name></name><argument_list>()</argument_list></call> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if></else></if>
        <expr_stmt><expr><name>recurseDepth</name>--</expr>;</expr_stmt>
        <return>return <expr><name>value</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>handleMissingFile</name><parameter_list>(<param><decl><type><name>String</name></type> <name>message</name></decl></param>)</parameter_list> <block>{
        <switch>switch <condition>(<expr><call><name><name>onMissingFiltersFile</name>.<name>getIndex</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <case>case <expr><name><name>OnMissing</name>.<name>IGNORE_INDEX</name></name></expr>:
            <return>return;</return>
        </case><case>case <expr><name><name>OnMissing</name>.<name>FAIL_INDEX</name></name></expr>:
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</throw>
        </case><case>case <expr><name><name>OnMissing</name>.<name>WARN_INDEX</name></name></expr>:
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </case><default>default:
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Invalid value for onMissingFiltersFile"</expr></argument>)</argument_list></call></expr>;</throw>
        </default>}</block></switch>
    }</block></function>

}</block></class>
</unit>
