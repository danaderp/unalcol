<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\clearcase\CCUnlock.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>clearcase</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>Execute</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Commandline</name></name>;</import>

<comment type="javadoc">/**
 * TODO:
 * comment field doesn't include all options yet
 */</comment>

<comment type="javadoc">/**
 * Performs a ClearCase Unlock command.
 *
 * &lt;p&gt;
 * The following attributes are interpreted:
 * &lt;table border="1"&gt;
 *   &lt;tr&gt;
 *     &lt;th&gt;Attribute&lt;/th&gt;
 *     &lt;th&gt;Values&lt;/th&gt;
 *     &lt;th&gt;Required&lt;/th&gt;
 *   &lt;/tr&gt;
 *   &lt;tr&gt;
 *      &lt;td&gt;comment&lt;/td&gt;
 *      &lt;td&gt;Specifies how to populate comments fields&lt;/td&gt;
 *      &lt;td&gt;No&lt;/td&gt;
 *   &lt;tr&gt;
 *   &lt;tr&gt;
 *      &lt;td&gt;pname&lt;/td&gt;
 *      &lt;td&gt;Specifies the object pathname to be unlocked.&lt;/td&gt;
 *      &lt;td&gt;No&lt;/td&gt;
 *   &lt;tr&gt;
 *      &lt;td&gt;objselect&lt;/td&gt;
 *      &lt;td&gt;This variable is obsolete. Should use &lt;i&gt;objsel&lt;/i&gt; instead.&lt;/td&gt;
 *      &lt;td&gt;no&lt;/td&gt;
 *   &lt;tr&gt;
 *   &lt;tr&gt;
 *      &lt;td&gt;objsel&lt;/td&gt;
 *      &lt;td&gt;Specifies the object(s) to be unlocked.&lt;/td&gt;
 *      &lt;td&gt;No&lt;/td&gt;
 *   &lt;tr&gt;
 *   &lt;tr&gt;
 *      &lt;td&gt;failonerr&lt;/td&gt;
 *      &lt;td&gt;Throw an exception if the command fails. Default is true&lt;/td&gt;
 *      &lt;td&gt;No&lt;/td&gt;
 *   &lt;tr&gt;
 *
 * &lt;/table&gt;
 *
 */</comment>
<class><specifier>public</specifier> class <name>CCUnlock</name> <super><extends>extends <name>ClearCase</name></extends></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>mComment</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>mPname</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Executes the task.
     * &lt;p&gt;
     * Builds a command line to execute cleartool and then calls Exec's run method
     * to execute the command line.
     * @throws BuildException if the command fails and failonerr is set to true
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>Commandline</name></type> <name>commandLine</name> =<init> <expr>new <call><name>Commandline</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Project</name></type> <name>aProj</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

        <comment type="line">// Default the viewpath to basedir if it is not specified</comment>
        <if>if <condition>(<expr><call><name>getViewPath</name><argument_list>()</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>setViewPath</name><argument_list>(<argument><expr><call><name><name>aProj</name>.<name>getBaseDir</name></name><argument_list>()</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// build the command line from what we got the format is</comment>
        <comment type="line">// cleartool lock [options...]</comment>
        <comment type="line">// as specified in the CLEARTOOL.EXE help</comment>
        <expr_stmt><expr><call><name><name>commandLine</name>.<name>setExecutable</name></name><argument_list>(<argument><expr><call><name>getClearToolCommand</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>commandLine</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>COMMAND_UNLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Check the command line options</comment>
        <expr_stmt><expr><call><name>checkOptions</name><argument_list>(<argument><expr><name>commandLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// For debugging</comment>
        <comment type="line">// System.out.println(commandLine.toString());</comment>

        <if>if <condition>(<expr>!<call><name>getFailOnErr</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>log</name><argument_list>(<argument><expr>"Ignoring any errors that occur for: "
                    + <call><name>getOpType</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>result</name> = <call><name>run</name><argument_list>(<argument><expr><name>commandLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>Execute</name>.<name>isFailure</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>getFailOnErr</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>msg</name> =<init> <expr>"Failed executing: " + <call><name><name>commandLine</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Check the command line options.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>checkOptions</name><parameter_list>(<param><decl><type><name>Commandline</name></type> <name>cmd</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// ClearCase items</comment>
        <expr_stmt><expr><call><name>getCommentCommand</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name>getObjSelect</name><argument_list>()</argument_list></call> == <name>null</name> &amp;&amp; <call><name>getPname</name><argument_list>()</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Should select either an element "
            + "(pname) or an object (objselect)"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name>getPnameCommand</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// object selector</comment>
        <if>if <condition>(<expr><call><name>getObjSelect</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name>getObjSelect</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Sets how comments should be written
     * for the event record(s)
     *
     * @param comment comment method to use
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setComment</name><parameter_list>(<param><decl><type><name>String</name></type> <name>comment</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>mComment</name> = <name>comment</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get comment method
     *
     * @return String containing the desired comment method
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getComment</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>mComment</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the pathname to be locked
     *
     * @param pname pathname to be locked
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPname</name><parameter_list>(<param><decl><type><name>String</name></type> <name>pname</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>mPname</name> = <name>pname</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the pathname to be locked
     *
     * @return String containing the pathname to be locked
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getPname</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>mPname</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the object(s) to be locked
     *
     * @param objselect objects to be locked
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setObjselect</name><parameter_list>(<param><decl><type><name>String</name></type> <name>objselect</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setObjSelect</name><argument_list>(<argument><expr><name>objselect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the object(s) to be locked
     *
     * @param objsel objects to be locked
     * @since ant 1.6.1
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setObjSel</name><parameter_list>(<param><decl><type><name>String</name></type> <name>objsel</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setObjSelect</name><argument_list>(<argument><expr><name>objsel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get list of objects to be locked
     *
     * @return String containing the objects to be locked
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getObjselect</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getObjSelect</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the 'comment' command
     *
     * @param cmd containing the command line string with or without the
     *            comment flag and value appended
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>getCommentCommand</name><parameter_list>(<param><decl><type><name>Commandline</name></type> <name>cmd</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>getComment</name><argument_list>()</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then> <else>else <block>{
            <comment type="block">/* Had to make two separate commands here because if a space is
               inserted between the flag and the value, it is treated as a
               Windows filename with a space and it is enclosed in double
               quotes ("). This breaks clearcase.
            */</comment>
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>FLAG_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name>getComment</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Get the 'pname' command
     *
     * @param cmd containing the command line string with or without the
     *            pname flag and value appended
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>getPnameCommand</name><parameter_list>(<param><decl><type><name>Commandline</name></type> <name>cmd</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>getPname</name><argument_list>()</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then> <else>else <block>{
            <comment type="block">/* Had to make two separate commands here because if a space is
               inserted between the flag and the value, it is treated as a
               Windows filename with a space and it is enclosed in double
               quotes ("). This breaks clearcase.
            */</comment>
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>FLAG_PNAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name>getPname</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Return which object/pname is being operated on
     *
     * @return String containing the object/pname being worked on
     */</comment>
    <function><type><specifier>private</specifier> <name>String</name></type> <name>getOpType</name><parameter_list>()</parameter_list> <block>{

        <if>if <condition>(<expr><call><name>getPname</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name>getPname</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
            <return>return <expr><call><name>getObjSelect</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * -comment flag -- method to use for commenting events
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FLAG_COMMENT</name> =<init> <expr>"-comment"</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * -pname flag -- pathname to lock
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FLAG_PNAME</name> =<init> <expr>"-pname"</expr></init></decl>;</decl_stmt>
}</block></class>

</unit>
