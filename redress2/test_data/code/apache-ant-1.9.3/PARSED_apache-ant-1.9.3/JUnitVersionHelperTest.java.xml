<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\taskdefs\optional\junit\JUnitVersionHelperTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>junit</name></name>;</package>

<import>import <name><name>junit</name>.<name>framework</name>.<name>Test</name></name>;</import>
<import>import <name><name>junit</name>.<name>framework</name>.<name>TestCase</name></name>;</import>
<import>import <name><name>junit</name>.<name>framework</name>.<name>TestResult</name></name>;</import>

<comment type="javadoc">/**
 */</comment>
<class><specifier>public</specifier> class <name>JUnitVersionHelperTest</name> <super><extends>extends <name>TestCase</name></extends></super> <block>{

    <constructor><specifier>public</specifier> <name>JUnitVersionHelperTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testMyOwnName</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"testMyOwnName"</expr></argument>,
                     <argument><expr><call><name><name>JUnitVersionHelper</name>.<name>getTestCaseName</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNonTestCaseName</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"I'm a foo"</expr></argument>,
                     <argument><expr><call><name><name>JUnitVersionHelper</name>.<name>getTestCaseName</name></name><argument_list>(<argument><expr>new <call><name>Foo1</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNoStringReturn</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"unknown"</expr></argument>,
                     <argument><expr><call><name><name>JUnitVersionHelper</name>.<name>getTestCaseName</name></name><argument_list>(<argument><expr>new <call><name>Foo2</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNoGetName</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"unknown"</expr></argument>,
                     <argument><expr><call><name><name>JUnitVersionHelper</name>.<name>getTestCaseName</name></name><argument_list>(<argument><expr>new <call><name>Foo3</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNameNotGetName</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"I'm a foo, too"</expr></argument>,
                     <argument><expr><call><name><name>JUnitVersionHelper</name>.<name>getTestCaseName</name></name><argument_list>(<argument><expr>new <call><name>Foo4</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNull</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"unknown"</expr></argument>, <argument><expr><call><name><name>JUnitVersionHelper</name>.<name>getTestCaseName</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testTestCaseSubClass</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"overridden getName"</expr></argument>,
                     <argument><expr><call><name><name>JUnitVersionHelper</name>.<name>getTestCaseName</name></name><argument_list>(<argument><expr>new <call><name>Foo5</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Foo</name> <super><implements>implements <name>Test</name></implements></super> <block>{
        <function><type><specifier>public</specifier> <name>int</name></type> <name>countTestCases</name><parameter_list>()</parameter_list> <block>{<return>return <expr>0</expr>;</return>}</block></function>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>(<param><decl><type><name>TestResult</name></type> <name>result</name></decl></param>)</parameter_list> <block>{}</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Foo1</name> <super><extends>extends <name>Foo</name></extends></super> <block>{
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{<return>return <expr>"I'm a foo"</expr>;</return>}</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Foo2</name> <super><extends>extends <name>Foo</name></extends></super> <block>{
        <function><type><specifier>public</specifier> <name>int</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{<return>return <expr>1</expr>;</return>}</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Foo3</name> <super><extends>extends <name>Foo</name></extends></super> <block>{
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Foo4</name> <super><extends>extends <name>Foo</name></extends></super> <block>{
        <function><type><specifier>public</specifier> <name>String</name></type> <name>name</name><parameter_list>()</parameter_list> <block>{<return>return <expr>"I'm a foo, too"</expr>;</return>}</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Foo5</name> <super><extends>extends <name>TestCase</name></extends></super> <block>{
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{<return>return <expr>"overridden getName"</expr>;</return>}</block></function>
    }</block></class>

}</block></class>
</unit>
