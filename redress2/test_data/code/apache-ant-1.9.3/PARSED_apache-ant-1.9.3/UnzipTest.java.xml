<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\taskdefs\UnzipTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildFileTest</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>

<comment type="javadoc">/**
 */</comment>
<class><specifier>public</specifier> class <name>UnzipTest</name> <super><extends>extends <name>BuildFileTest</name></extends></super> <block>{

    <comment type="javadoc">/** Utilities used for file operations */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>FileUtils</name></type> <name>FILE_UTILS</name> =<init> <expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>UnzipTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr>"src/etc/testcases/taskdefs/unzip.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"cleanup"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>test1</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildException</name><argument_list>(<argument><expr>"test1"</expr></argument>, <argument><expr>"required argument not specified"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>test2</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildException</name><argument_list>(<argument><expr>"test2"</expr></argument>, <argument><expr>"required argument not specified"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>test3</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildException</name><argument_list>(<argument><expr>"test3"</expr></argument>, <argument><expr>"required argument not specified"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>testRealTest</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name><name>java</name>.<name>io</name>.<name>IOException</name></name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"realTest"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertLogoUncorrupted</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * test that the logo gif file has not been corrupted
     * @throws IOException
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>assertLogoUncorrupted</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>FILE_UTILS</name>.<name>contentEquals</name></name><argument_list>(<argument><expr><call><name><name>project</name>.<name>resolveFile</name></name><argument_list>(<argument><expr>"../asf-logo.gif"</expr></argument>)</argument_list></call></expr></argument>,
                                           <argument><expr><call><name><name>project</name>.<name>resolveFile</name></name><argument_list>(<argument><expr>"asf-logo.gif"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testTestZipTask</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name><name>java</name>.<name>io</name>.<name>IOException</name></name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testZipTask"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertLogoUncorrupted</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testTestUncompressedZipTask</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name><name>java</name>.<name>io</name>.<name>IOException</name></name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testUncompressedZipTask"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertLogoUncorrupted</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block">/*
     * PR 11100
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testPatternSetExcludeOnly</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testPatternSetExcludeOnly"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFileMissing</name><argument_list>(<argument><expr>"1/foo is excluded"</expr></argument>, <argument><expr>"unziptestout/1/foo"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFileExists</name><argument_list>(<argument><expr>"2/bar is not excluded"</expr></argument>, <argument><expr>"unziptestout/2/bar"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block">/*
     * PR 11100
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testPatternSetIncludeOnly</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testPatternSetIncludeOnly"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFileMissing</name><argument_list>(<argument><expr>"1/foo is not included"</expr></argument>, <argument><expr>"unziptestout/1/foo"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFileExists</name><argument_list>(<argument><expr>"2/bar is included"</expr></argument>, <argument><expr>"unziptestout/2/bar"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block">/*
     * PR 11100
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testPatternSetIncludeAndExclude</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testPatternSetIncludeAndExclude"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFileMissing</name><argument_list>(<argument><expr>"1/foo is not included"</expr></argument>, <argument><expr>"unziptestout/1/foo"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFileMissing</name><argument_list>(<argument><expr>"2/bar is excluded"</expr></argument>, <argument><expr>"unziptestout/2/bar"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block">/*
     * PR 38973
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testTwoPatternSets</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testTwoPatternSets"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFileMissing</name><argument_list>(<argument><expr>"1/foo is not included"</expr></argument>, <argument><expr>"unziptestout/1/foo"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFileExists</name><argument_list>(<argument><expr>"2/bar is included"</expr></argument>, <argument><expr>"unziptestout/2/bar"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block">/*
     * PR 38973
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testTwoPatternSetsWithExcludes</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testTwoPatternSetsWithExcludes"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFileMissing</name><argument_list>(<argument><expr>"1/foo is not included"</expr></argument>, <argument><expr>"unziptestout/1/foo"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFileMissing</name><argument_list>(<argument><expr>"2/bar is excluded"</expr></argument>, <argument><expr>"unziptestout/2/bar"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block">/*
     * PR 16213
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>XtestSelfExtractingArchive</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// disabled because we lack a self extracting archive that we</comment>
        <comment type="line">// are allowed to distribute - see PR 49080</comment>
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"selfExtractingArchive"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="block">/*
     * PR 20969
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testPatternSetSlashOnly</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testPatternSetSlashOnly"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFileMissing</name><argument_list>(<argument><expr>"1/foo is not included"</expr></argument>, <argument><expr>"unziptestout/1/foo"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFileExists</name><argument_list>(<argument><expr>"\"2/bar is included"</expr></argument>, <argument><expr>"unziptestout/2/bar"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="block">/*
     * PR 10504
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testEncoding</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"encodingTest"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFileExists</name><argument_list>(<argument><expr>"foo has been properly named"</expr></argument>, <argument><expr>"unziptestout/foo"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block">/*
     * PR 21996
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFlattenMapper</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testFlattenMapper"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFileMissing</name><argument_list>(<argument><expr>"1/foo is not flattened"</expr></argument>, <argument><expr>"unziptestout/1/foo"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFileExists</name><argument_list>(<argument><expr>"foo is flattened"</expr></argument>, <argument><expr>"unziptestout/foo"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * assert that a file exists, relative to the project
     * @param message message if there is no mpatch
     * @param filename filename to resolve against the project
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>assertFileExists</name><parameter_list>(<param><decl><type><name>String</name></type> <name>message</name></decl></param>, <param><decl><type><name>String</name></type> <name>filename</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>message</name></expr></argument>,
                   <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>resolveFile</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call>.<call><name>exists</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * assert that a file doesnt exist, relative to the project
     *
     * @param message  message if there is no mpatch
     * @param filename filename to resolve against the project
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>assertFileMissing</name><parameter_list>(<param><decl><type><name>String</name></type> <name>message</name></decl></param>, <param><decl><type><name>String</name></type> <name>filename</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>message</name></expr></argument>,
                <argument><expr>!<call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>resolveFile</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call>.<call><name>exists</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * PR 21996
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testGlobMapper</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testGlobMapper"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFileMissing</name><argument_list>(<argument><expr>"1/foo is not mapped"</expr></argument>, <argument><expr>"unziptestout/1/foo"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFileExists</name><argument_list>(<argument><expr>"1/foo is mapped"</expr></argument>, <argument><expr>"unziptestout/1/foo.txt"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testTwoMappers</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildException</name><argument_list>(<argument><expr>"testTwoMappers"</expr></argument>,<argument><expr><name><name>Expand</name>.<name>ERROR_MULTIPLE_MAPPERS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testResourceCollections</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testResourceCollection"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFileExists</name><argument_list>(<argument><expr>"junit.jar has been extracted"</expr></argument>,
                         <argument><expr>"unziptestout/junit/framework/Assert.class"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testDocumentationClaimsOnCopy</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testDocumentationClaimsOnCopy"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFileMissing</name><argument_list>(<argument><expr>"1/foo is excluded"</expr></argument>, <argument><expr>"unziptestout/1/foo"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFileExists</name><argument_list>(<argument><expr>"2/bar is not excluded"</expr></argument>, <argument><expr>"unziptestout/2/bar"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
