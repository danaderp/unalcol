<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\UpToDate.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>DirectoryScanner</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>condition</name>.<name>Condition</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Resource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>FileSet</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>Union</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Mapper</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileNameMapper</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>MergingMapper</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>ResourceUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>SourceFileScanner</name></name>;</import>

<comment type="javadoc">/**
 * Sets the given property if the specified target has a timestamp
 * greater than all of the source files.
 *
 * @since Ant 1.2
 *
 * @ant.task category="control"
 */</comment>

<class><specifier>public</specifier> class <name>UpToDate</name> <super><extends>extends <name>Task</name></extends> <implements>implements <name>Condition</name></implements></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>property</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>value</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>sourceFile</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>targetFile</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Vector</name></type> <name>sourceFileSets</name> =<init> <expr>new <call><name>Vector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Union</name></type> <name>sourceResources</name> =<init> <expr>new <call><name>Union</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// CheckStyle:VisibilityModifier OFF - bc</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Mapper</name></type> <name>mapperElement</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <comment type="line">// CheckStyle:VisibilityModifier ON</comment>

    <comment type="javadoc">/**
     * The property to set if the target file is more up-to-date than
     * (each of) the source file(s).
     *
     * @param property the name of the property to set if Target is up-to-date.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setProperty</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>property</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>property</name></name> = <name>property</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The value to set the named property to if the target file is more
     * up-to-date than (each of) the source file(s). Defaults to 'true'.
     *
     * @param value the value to set the property to if Target is up-to-date
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setValue</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>value</name></name> = <name>value</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the value, or "true" if a specific value wasn't provided.
     */</comment>
    <function><type><specifier>private</specifier> <name>String</name></type> <name>getValue</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>(<name>value</name> != <name>null</name>) ? <name>value</name> : "true"</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * The file which must be more up-to-date than (each of) the source file(s)
     * if the property is to be set.
     *
     * @param file the file we are checking against.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTargetFile</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>File</name></type> <name>file</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>targetFile</name></name> = <name>file</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The file that must be older than the target file
     * if the property is to be set.
     *
     * @param file the file we are checking against the target file.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSrcfile</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>File</name></type> <name>file</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>sourceFile</name></name> = <name>file</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Nested &amp;lt;srcfiles&amp;gt; element.
     * @param fs the source files
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addSrcfiles</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>FileSet</name></type> <name>fs</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>sourceFileSets</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Nested resource collections as sources.
     * @return the source resources to configure.
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>Union</name></type> <name>createSrcResources</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>sourceResources</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Defines the FileNameMapper to use (nested mapper element).
     * @return a mapper to be configured
     * @throws BuildException if more than one mapper is defined
     */</comment>
    <function><type><specifier>public</specifier> <name>Mapper</name></type> <name>createMapper</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>mapperElement</name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Cannot define more than one mapper"</expr></argument>,
                                     <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name>mapperElement</name> = new <call><name>Mapper</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>mapperElement</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * A nested filenamemapper
     * @param fileNameMapper the mapper to add
     * @since Ant 1.6.3
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>FileNameMapper</name></type> <name>fileNameMapper</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>createMapper</name><argument_list>()</argument_list></call>.<call><name>add</name><argument_list>(<argument><expr><name>fileNameMapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Evaluate (all) target and source file(s) to
     * see if the target(s) is/are up-to-date.
     * @return true if the target(s) is/are up-to-date
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>eval</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>sourceFileSets</name>.<name>size</name></name><argument_list>()</argument_list></call> == 0 &amp;&amp; <call><name><name>sourceResources</name>.<name>size</name></name><argument_list>()</argument_list></call> == 0
            &amp;&amp; <name>sourceFile</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"At least one srcfile or a nested "
                                     + "&lt;srcfiles&gt; or &lt;srcresources&gt; element "
                                     + "must be set."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr>(<call><name><name>sourceFileSets</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 0 || <call><name><name>sourceResources</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 0)
            &amp;&amp; <name>sourceFile</name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Cannot specify both the srcfile "
                                     + "attribute and a nested &lt;srcfiles&gt; "
                                     + "or &lt;srcresources&gt; element."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr><name>targetFile</name> == <name>null</name> &amp;&amp; <name>mapperElement</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"The targetfile attribute or a nested "
                                     + "mapper element must be set."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <comment type="line">// if the target file is not there, then it can't be up-to-date</comment>
        <if>if <condition>(<expr><name>targetFile</name> != <name>null</name> &amp;&amp; !<call><name><name>targetFile</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"The targetfile \"" + <call><name><name>targetFile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call>
                    + "\" does not exist."</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>false</expr>;</return>
        }</block></then></if>

        <comment type="line">// if the source file isn't there, throw an exception</comment>
        <if>if <condition>(<expr><name>sourceFile</name> != <name>null</name> &amp;&amp; !<call><name><name>sourceFile</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><call><name><name>sourceFile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call>
                                     + " not found."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <decl_stmt><decl><type><name>boolean</name></type> <name>upToDate</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>sourceFile</name> != <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>mapperElement</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>upToDate</name> = <call><name><name>targetFile</name>.<name>lastModified</name></name><argument_list>()</argument_list></call> &gt;= <call><name><name>sourceFile</name>.<name>lastModified</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <decl_stmt><decl><type><name>SourceFileScanner</name></type> <name>sfs</name> =<init> <expr>new <call><name>SourceFileScanner</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>upToDate</name> = <call><name><name>sfs</name>.<name>restrict</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>sourceFile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr>}</block></expr></argument>,
                                  <argument><expr><name>null</name></expr></argument>, <argument><expr><name>null</name></expr></argument>,
                                  <argument><expr><call><name><name>mapperElement</name>.<name>getImplementation</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<name>length</name> == 0</expr>;</expr_stmt>
            }</block></else></if>
            <if>if <condition>(<expr>!<name>upToDate</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><call><name><name>sourceFile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call>
                    + " is newer than (one of) its target(s)."</expr></argument>,
                    <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>

        <comment type="line">// filesets are separate from the rest for performance</comment>
        <comment type="line">// reasons.  If we use the code for union below, we'll always</comment>
        <comment type="line">// scan all filesets, even if we know the target is out of</comment>
        <comment type="line">// date after the first test.</comment>
        <decl_stmt><decl><type><name>Enumeration</name></type> <name>e</name> =<init> <expr><call><name><name>sourceFileSets</name>.<name>elements</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>upToDate</name> &amp;&amp; <call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>FileSet</name></type> <name>fs</name> =<init> <expr>(<name>FileSet</name>) <call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>DirectoryScanner</name></type> <name>ds</name> =<init> <expr><call><name><name>fs</name>.<name>getDirectoryScanner</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>upToDate</name> = <call><name>scanDir</name><argument_list>(<argument><expr><call><name><name>fs</name>.<name>getDir</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                           <argument><expr><call><name><name>ds</name>.<name>getIncludedFiles</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>

        <if>if <condition>(<expr><name>upToDate</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Resource</name><index>[]</index></type> <name>r</name> =<init> <expr><call><name><name>sourceResources</name>.<name>listResources</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>r</name>.<name>length</name></name> &gt; 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>upToDate</name> = <call><name><name>ResourceUtils</name>.<name>selectOutOfDateSources</name></name><argument_list>(
                        <argument><expr><name>this</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>getMapper</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<name>length</name> == 0</expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>

        <return>return <expr><name>upToDate</name></expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     * Sets property to true if target file(s) have a more recent timestamp
     * than (each of) the corresponding source file(s).
     * @throws BuildException on error
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>property</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"property attribute is required."</expr></argument>,
                                     <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>boolean</name></type> <name>upToDate</name> =<init> <expr><call><name>eval</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>upToDate</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>setNewProperty</name><argument_list>(<argument><expr><name>property</name></expr></argument>, <argument><expr><call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>mapperElement</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"File \"" + <call><name><name>targetFile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call>
                    + "\" is up-to-date."</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"All target files are up-to-date."</expr></argument>,
                    <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Scan a directory for files to check for "up to date"ness
     * @param srcDir the directory
     * @param files the files to scan for
     * @return true if the files are up to date
     */</comment>
    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>scanDir</name><parameter_list>(<param><decl><type><name>File</name></type> <name>srcDir</name></decl></param>, <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>files</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>SourceFileScanner</name></type> <name>sfs</name> =<init> <expr>new <call><name>SourceFileScanner</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FileNameMapper</name></type> <name>mapper</name> =<init> <expr><call><name>getMapper</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>dir</name> =<init> <expr><name>srcDir</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>mapperElement</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>dir</name> = <name>null</name></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><call><name><name>sfs</name>.<name>restrict</name></name><argument_list>(<argument><expr><name>files</name></expr></argument>, <argument><expr><name>srcDir</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>mapper</name></expr></argument>)</argument_list></call>.<name>length</name> == 0</expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>FileNameMapper</name></type> <name>getMapper</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>FileNameMapper</name></type> <name>mapper</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>mapperElement</name> == <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>MergingMapper</name></type> <name>mm</name> =<init> <expr>new <call><name>MergingMapper</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>mm</name>.<name>setTo</name></name><argument_list>(<argument><expr><call><name><name>targetFile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>mapper</name> = <name>mm</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>mapper</name> = <call><name><name>mapperElement</name>.<name>getImplementation</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><name>mapper</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
