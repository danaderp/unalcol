<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\Retry.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>TaskContainer</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>StringUtils</name></name>;</import>

<comment type="javadoc">/**
 * Retries the nested task a set number of times
 * @since Ant 1.7.1
 */</comment>
<class><specifier>public</specifier> class <name>Retry</name> <super><extends>extends <name>Task</name></extends> <implements>implements <name>TaskContainer</name></implements></super> <block>{

    <comment type="javadoc">/**
     * task to execute n times
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Task</name></type> <name>nestedTask</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * set retryCount to 1 by default
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>retryCount</name> =<init> <expr>1</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The time to wait between retries in milliseconds, default to 0.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>retryDelay</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * set the task
     * @param t the task to retry.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>addTask</name><parameter_list>(<param><decl><type><name>Task</name></type> <name>t</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>nestedTask</name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                <argument><expr>"The retry task container accepts a single nested task"
                + " (which may be a sequential task container)"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name>nestedTask</name> = <name>t</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * set the number of times to retry the task
     * @param n the number to use.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRetryCount</name><parameter_list>(<param><decl><type><name>int</name></type> <name>n</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>retryCount</name> = <name>n</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * set the delay between retries (in milliseconds)
     * @param n the time between retries.
     * @since Ant 1.8.3
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRetryDelay</name><parameter_list>(<param><decl><type><name>int</name></type> <name>retryDelay</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>retryDelay</name> &lt; 0</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"delay must be a non-negative number"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>retryDelay</name></name> = <name>retryDelay</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * perform the work
     * @throws BuildException if there is an error.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>errorMessages</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt;= <name>retryCount</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <try>try <block>{
                <expr_stmt><expr><call><name><name>nestedTask</name>.<name>perform</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
                <expr_stmt><expr><call><name><name>errorMessages</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>i</name> &gt;= <name>retryCount</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>StringBuffer</name></type> <name>exceptionMessage</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>exceptionMessage</name>.<name>append</name></name><argument_list>(<argument><expr>"Task ["</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><call><name><name>nestedTask</name>.<name>getTaskName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>exceptionMessage</name>.<name>append</name></name><argument_list>(<argument><expr>"] failed after ["</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><name>retryCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>exceptionMessage</name>.<name>append</name></name><argument_list>(<argument><expr>"] attempts; giving up."</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><name><name>StringUtils</name>.<name>LINE_SEP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>exceptionMessage</name>.<name>append</name></name><argument_list>(<argument><expr>"Error messages:"</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><name><name>StringUtils</name>.<name>LINE_SEP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>exceptionMessage</name>.<name>append</name></name><argument_list>(<argument><expr><name>errorMessages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><call><name><name>exceptionMessage</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if>
                <decl_stmt><decl><type><name>String</name></type> <name>msg</name></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>retryDelay</name> &gt; 0</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>msg</name> = "Attempt [" + <name>i</name> + "]: error occurred; retrying after " + <name>retryDelay</name> + " ms..."</expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><name>msg</name> = "Attempt [" + <name>i</name> + "]: error occurred; retrying..."</expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>errorMessages</name>.<name>append</name></name><argument_list>(<argument><expr><name><name>StringUtils</name>.<name>LINE_SEP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>retryDelay</name> &gt; 0</expr>)</condition><then> <block>{
                    <try>try <block>{
                        <expr_stmt><expr><call><name><name>Thread</name>.<name>sleep</name></name><argument_list>(<argument><expr><name>retryDelay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block> <catch>catch (<param><decl><type><name>InterruptedException</name></type> <name>ie</name></decl></param>) <block>{
                        <comment type="line">// Ignore Exception</comment>
                    }</block></catch></try>
                }</block></then></if>
            }</block></catch></try>
        }</block></for>
    }</block></function>
}</block></class>
</unit>
