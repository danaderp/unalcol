<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\net\FTP.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>net</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>BufferedInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>BufferedOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>BufferedWriter</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileWriter</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>OutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>SimpleDateFormat</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collection</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Date</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashSet</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Hashtable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Locale</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Set</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>StringTokenizer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>net</name>.<name>ftp</name>.<name>FTPClient</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>net</name>.<name>ftp</name>.<name>FTPClientConfig</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>net</name>.<name>ftp</name>.<name>FTPFile</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>net</name>.<name>ftp</name>.<name>FTPReply</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>DirectoryScanner</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>Delete</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>EnumeratedAttribute</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>FileSet</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>SelectorUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>RetryHandler</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>Retryable</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>VectorSet</name></name>;</import>

<comment type="javadoc">/**
 * Basic FTP client. Performs the following actions:
 * &lt;ul&gt;
 *   &lt;li&gt; &lt;strong&gt;send&lt;/strong&gt; - send files to a remote server. This is the
 *   default action.&lt;/li&gt;
 *   &lt;li&gt; &lt;strong&gt;get&lt;/strong&gt; - retrieve files from a remote server.&lt;/li&gt;
 *   &lt;li&gt; &lt;strong&gt;del&lt;/strong&gt; - delete files from a remote server.&lt;/li&gt;
 *   &lt;li&gt; &lt;strong&gt;list&lt;/strong&gt; - create a file listing.&lt;/li&gt;
 *   &lt;li&gt; &lt;strong&gt;chmod&lt;/strong&gt; - change unix file permissions.&lt;/li&gt;
 *   &lt;li&gt; &lt;strong&gt;rmdir&lt;/strong&gt; - remove directories, if empty, from a
 *   remote server.&lt;/li&gt;
 * &lt;/ul&gt;
 * &lt;strong&gt;Note:&lt;/strong&gt; Some FTP servers - notably the Solaris server - seem
 * to hold data ports open after a "retr" operation, allowing them to timeout
 * instead of shutting them down cleanly. This happens in active or passive
 * mode, and the ports will remain open even after ending the FTP session. FTP
 * "send" operations seem to close ports immediately. This behavior may cause
 * problems on some systems when downloading large sets of files.
 *
 * @since Ant 1.3
 */</comment>
<class><specifier>public</specifier> class <name>FTP</name> <super><extends>extends <name>Task</name></extends> <implements>implements <name>FTPTaskConfig</name></implements></super> <block>{
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SEND_FILES</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>GET_FILES</name> =<init> <expr>1</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DEL_FILES</name> =<init> <expr>2</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>LIST_FILES</name> =<init> <expr>3</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MK_DIR</name> =<init> <expr>4</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>CHMOD</name> =<init> <expr>5</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>RM_DIR</name> =<init> <expr>6</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SITE_CMD</name> =<init> <expr>7</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** return code of ftp */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>CODE_521</name> =<init> <expr>521</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>CODE_550</name> =<init> <expr>550</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>CODE_553</name> =<init> <expr>553</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** adjust uptodate calculations where server timestamps are HH:mm and client's
     * are HH:mm:ss */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>GRANULARITY_MINUTE</name> =<init> <expr>60000L</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Date formatter used in logging, note not thread safe! */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>SimpleDateFormat</name></type> <name>TIMESTAMP_LOGGING_SDF</name> =<init>
        <expr>new <call><name>SimpleDateFormat</name><argument_list>(<argument><expr>"yyyy-MM-dd HH:mm:ss"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Default port for FTP */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DEFAULT_FTP_PORT</name> =<init> <expr>21</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>FileUtils</name></type> <name>FILE_UTILS</name> =<init> <expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>remotedir</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>server</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>userid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>password</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>account</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>listing</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>binary</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>passive</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>verbose</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>newerOnly</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>timeDiffMillis</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>granularityMillis</name> =<init> <expr>0L</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>timeDiffAuto</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>action</name> =<init> <expr><name>SEND_FILES</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Vector</name></type> <name>filesets</name> =<init> <expr>new <call><name>Vector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Set</name></type> <name>dirCache</name> =<init> <expr>new <call><name>HashSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>transferred</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>remoteFileSep</name> =<init> <expr>"/"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>port</name> =<init> <expr><name>DEFAULT_FTP_PORT</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>skipFailedTransfers</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>skipped</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>ignoreNoncriticalErrors</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>preserveLastModified</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>chmod</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>umask</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>FTPSystemType</name></type> <name>systemTypeKey</name> =<init> <expr><call><name><name>FTPSystemType</name>.<name>getDefault</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>defaultDateFormatConfig</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>recentDateFormatConfig</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>LanguageCode</name></type> <name>serverLanguageCodeConfig</name> =<init> <expr><call><name><name>LanguageCode</name>.<name>getDefault</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>serverTimeZoneConfig</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>shortMonthNamesConfig</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Granularity</name></type> <name>timestampGranularity</name> =<init> <expr><call><name><name>Granularity</name>.<name>getDefault</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>isConfigurationSet</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>retriesAllowed</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>siteCommand</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>initialSiteCommand</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>enableRemoteVerification</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name><index>[]</index></type> <name>ACTION_STRS</name> =<init> <expr><block>{
        <expr>"sending"</expr>,
        <expr>"getting"</expr>,
        <expr>"deleting"</expr>,
        <expr>"listing"</expr>,
        <expr>"making directory"</expr>,
        <expr>"chmod"</expr>,
        <expr>"removing"</expr>,
        <expr>"site"</expr>
    }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name><index>[]</index></type> <name>COMPLETED_ACTION_STRS</name> =<init> <expr><block>{
        <expr>"sent"</expr>,
        <expr>"retrieved"</expr>,
        <expr>"deleted"</expr>,
        <expr>"listed"</expr>,
        <expr>"created directory"</expr>,
        <expr>"mode changed"</expr>,
        <expr>"removed"</expr>,
        <expr>"site command executed"</expr>
    }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name><index>[]</index></type> <name>ACTION_TARGET_STRS</name> =<init> <expr><block>{
        <expr>"files"</expr>,
        <expr>"files"</expr>,
        <expr>"files"</expr>,
        <expr>"files"</expr>,
        <expr>"directory"</expr>,
        <expr>"files"</expr>,
        <expr>"directories"</expr>,
        <expr>"site command"</expr>
    }</block></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * internal class providing a File-like interface to some of the information
     * available from the FTP server
     *
     */</comment>
    <class><specifier>protected</specifier> <specifier>static</specifier> class <name>FTPFileProxy</name> <super><extends>extends <name>File</name></extends></super> <block>{

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>FTPFile</name></type> <name>file</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name><index>[]</index></type> <name>parts</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>name</name></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * creates a proxy to a FTP file
         * @param file
         */</comment>
        <constructor><specifier>public</specifier> <name>FTPFileProxy</name><parameter_list>(<param><decl><type><name>FTPFile</name></type> <name>file</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><call><name><name>file</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>name</name> = <call><name><name>file</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>file</name></name> = <name>file</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>parts</name> = <call><name><name>FileUtils</name>.<name>getPathStack</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="javadoc">/**
         * creates a proxy to a FTP directory
         * @param completePath the remote directory.
         */</comment>
        <constructor><specifier>public</specifier> <name>FTPFileProxy</name><parameter_list>(<param><decl><type><name>String</name></type> <name>completePath</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>completePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>file</name> = <name>null</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>name</name> = <name>completePath</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>parts</name> = <call><name><name>FileUtils</name>.<name>getPathStack</name></name><argument_list>(<argument><expr><name>completePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>


        <comment type="block">/* (non-Javadoc)
         * @see java.io.File#exists()
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>exists</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></function>


        <comment type="block">/* (non-Javadoc)
         * @see java.io.File#getAbsolutePath()
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getAbsolutePath</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>name</name></expr>;</return>
        }</block></function>


        <comment type="block">/* (non-Javadoc)
         * @see java.io.File#getName()
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name><name>parts</name>.<name>length</name></name> &gt; 0 ? <name><name>parts</name><index>[<expr><name><name>parts</name>.<name>length</name></name> - 1</expr>]</index></name> : <name>name</name></expr>;</return>
        }</block></function>


        <comment type="block">/* (non-Javadoc)
         * @see java.io.File#getParent()
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getParent</name><parameter_list>()</parameter_list> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>result</name> =<init> <expr>""</expr></init></decl>;</decl_stmt>
            <for>for(<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>parts</name>.<name>length</name></name> - 1</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{
                <expr_stmt><expr><name>result</name> += <name><name>File</name>.<name>separatorChar</name></name> + <name><name>parts</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></for>
            <return>return <expr><name>result</name></expr>;</return>
        }</block></function>


        <comment type="block">/* (non-Javadoc)
         * @see java.io.File#getPath()
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getPath</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>name</name></expr>;</return>
        }</block></function>


        <comment type="javadoc">/**
         * FTP files are stored as absolute paths
         * @return true
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isAbsolute</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></function>


        <comment type="block">/* (non-Javadoc)
         * @see java.io.File#isDirectory()
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isDirectory</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>file</name> == <name>null</name></expr>;</return>
        }</block></function>


        <comment type="block">/* (non-Javadoc)
         * @see java.io.File#isFile()
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isFile</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>file</name> != <name>null</name></expr>;</return>
        }</block></function>


        <comment type="javadoc">/**
         * FTP files cannot be hidden
         *
         * @return  false
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isHidden</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></function>


        <comment type="block">/* (non-Javadoc)
         * @see java.io.File#lastModified()
         */</comment>
        <function><type><specifier>public</specifier> <name>long</name></type> <name>lastModified</name><parameter_list>()</parameter_list> <block>{
            <if>if <condition>(<expr><name>file</name> != <name>null</name></expr>)</condition><then> <block>{
                <return>return <expr><call><name><name>file</name>.<name>getTimestamp</name></name><argument_list>()</argument_list></call>.<call><name>getTimeInMillis</name><argument_list>()</argument_list></call></expr>;</return>
            }</block></then></if>
            <return>return <expr>0</expr>;</return>
        }</block></function>


        <comment type="block">/* (non-Javadoc)
         * @see java.io.File#length()
         */</comment>
        <function><type><specifier>public</specifier> <name>long</name></type> <name>length</name><parameter_list>()</parameter_list> <block>{
            <if>if <condition>(<expr><name>file</name> != <name>null</name></expr>)</condition><then> <block>{
                <return>return <expr><call><name><name>file</name>.<name>getSize</name></name><argument_list>()</argument_list></call></expr>;</return>
            }</block></then></if>
            <return>return <expr>0</expr>;</return>
        }</block></function>
    }</block></class>

    <comment type="javadoc">/**
     * internal class allowing to read the contents of a remote file system
     * using the FTP protocol
     * used in particular for ftp get operations
     * differences with DirectoryScanner
     * "" (the root of the fileset) is never included in the included directories
     * followSymlinks defaults to false
     */</comment>
    <class><specifier>protected</specifier> class <name>FTPDirectoryScanner</name> <super><extends>extends <name>DirectoryScanner</name></extends></super> <block>{
        <comment type="line">// CheckStyle:VisibilityModifier OFF - bc</comment>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>FTPClient</name></type> <name>ftp</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <comment type="line">// CheckStyle:VisibilityModifier ON</comment>

        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>rootPath</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * since ant 1.6
         * this flag should be set to true on UNIX and can save scanning time
         */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>remoteSystemCaseSensitive</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>remoteSensitivityChecked</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * constructor
         * @param ftp  ftpclient object
         */</comment>
        <constructor><specifier>public</specifier> <name>FTPDirectoryScanner</name><parameter_list>(<param><decl><type><name>FTPClient</name></type> <name>ftp</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>ftp</name></name> = <name>ftp</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>setFollowSymlinks</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>


        <comment type="javadoc">/**
         * scans the remote directory,
         * storing internally the included files, directories, ...
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>scan</name><parameter_list>()</parameter_list> <block>{
            <if>if <condition>(<expr><name>includes</name> == <name>null</name></expr>)</condition><then> <block>{
                <comment type="line">// No includes supplied, so set it to 'matches all'</comment>
                <expr_stmt><expr><name>includes</name> = new <name><name>String</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>includes</name><index>[<expr>0</expr>]</index></name> = "**"</expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name>excludes</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>excludes</name> = new <name><name>String</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><name>filesIncluded</name> = new <call><name>VectorSet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>filesNotIncluded</name> = new <call><name>Vector</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>filesExcluded</name> = new <call><name>VectorSet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>dirsIncluded</name> = new <call><name>VectorSet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>dirsNotIncluded</name> = new <call><name>Vector</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>dirsExcluded</name> = new <call><name>VectorSet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <try>try <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>cwd</name> =<init> <expr><call><name><name>ftp</name>.<name>printWorkingDirectory</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <comment type="line">// always start from the current ftp working dir</comment>
                <expr_stmt><expr><call><name>forceRemoteSensitivityCheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>checkIncludePatterns</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>clearCaches</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ftp</name>.<name>changeWorkingDirectory</name></name><argument_list>(<argument><expr><name>cwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Unable to scan FTP server: "</expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></function>


        <comment type="javadoc">/**
         * this routine is actually checking all the include patterns in
         * order to avoid scanning everything under base dir
         * @since ant1.6
         */</comment>
        <function><type><specifier>private</specifier> <name>void</name></type> <name>checkIncludePatterns</name><parameter_list>()</parameter_list> <block>{

            <decl_stmt><decl><type><name>Hashtable</name></type> <name>newroots</name> =<init> <expr>new <call><name>Hashtable</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// put in the newroots vector the include patterns without</comment>
            <comment type="line">// wildcard tokens</comment>
            <for>for (<init><decl><type><name>int</name></type> <name>icounter</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>icounter</name> &lt; <name><name>includes</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>icounter</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>newpattern</name> =<init>
                    <expr><call><name><name>SelectorUtils</name>.<name>rtrimWildcardTokens</name></name><argument_list>(<argument><expr><name><name>includes</name><index>[<expr><name>icounter</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>newroots</name>.<name>put</name></name><argument_list>(<argument><expr><name>newpattern</name></expr></argument>, <argument><expr><name><name>includes</name><index>[<expr><name>icounter</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <if>if <condition>(<expr><name>remotedir</name> == <name>null</name></expr>)</condition><then> <block>{
                <try>try <block>{
                    <expr_stmt><expr><name>remotedir</name> = <call><name><name>ftp</name>.<name>printWorkingDirectory</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"could not read current ftp directory"</expr></argument>,
                                             <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></catch></try>
            }</block></then></if>
            <decl_stmt><decl><type><name>AntFTPFile</name></type> <name>baseFTPFile</name> =<init> <expr>new <call><name>AntFTPRootFile</name><argument_list>(<argument><expr><name>ftp</name></expr></argument>, <argument><expr><name>remotedir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>rootPath</name> = <call><name><name>baseFTPFile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// construct it</comment>
            <if>if <condition>(<expr><call><name><name>newroots</name>.<name>containsKey</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <comment type="line">// we are going to scan everything anyway</comment>
                <expr_stmt><expr><call><name>scandir</name><argument_list>(<argument><expr><name>rootPath</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <comment type="line">// only scan directories that can include matched files or</comment>
                <comment type="line">// directories</comment>
                <decl_stmt><decl><type><name>Enumeration</name></type> <name>enum2</name> =<init> <expr><call><name><name>newroots</name>.<name>keys</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <while>while <condition>(<expr><call><name><name>enum2</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                    <decl_stmt><decl><type><name>String</name></type> <name>currentelement</name> =<init> <expr>(<name>String</name>) <call><name><name>enum2</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>originalpattern</name> =<init> <expr>(<name>String</name>) <call><name><name>newroots</name>.<name>get</name></name><argument_list>(<argument><expr><name>currentelement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>AntFTPFile</name></type> <name>myfile</name> =<init> <expr>new <call><name>AntFTPFile</name><argument_list>(<argument><expr><name>baseFTPFile</name></expr></argument>, <argument><expr><name>currentelement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>boolean</name></type> <name>isOK</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>boolean</name></type> <name>traversesSymlinks</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>path</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

                    <if>if <condition>(<expr><call><name><name>myfile</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>forceRemoteSensitivityCheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>remoteSensitivityChecked</name>
                            &amp;&amp; <name>remoteSystemCaseSensitive</name> &amp;&amp; <call><name>isFollowSymlinks</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                            <comment type="line">// cool case,</comment>
                            <comment type="line">//we do not need to scan all the subdirs in the relative path</comment>
                            <expr_stmt><expr><name>path</name> = <call><name><name>myfile</name>.<name>getFastRelativePath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        }</block></then> <else>else <block>{
                            <comment type="line">// may be on a case insensitive file system.  We want</comment>
                            <comment type="line">// the results to show what's really on the disk, so</comment>
                            <comment type="line">// we need to double check.</comment>
                            <try>try <block>{
                                <expr_stmt><expr><name>path</name> = <call><name><name>myfile</name>.<name>getRelativePath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><name>traversesSymlinks</name> = <call><name><name>myfile</name>.<name>isTraverseSymlinks</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                            }</block>  <catch>catch (<param><decl><type><name>IOException</name></type> <name>be</name></decl></param>) <block>{
                                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>be</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                            }</block></catch> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
                                <expr_stmt><expr><name>isOK</name> = false</expr>;</expr_stmt>
                            }</block></catch></try>
                        }</block></else></if>
                    }</block></then> <else>else <block>{
                        <expr_stmt><expr><name>isOK</name> = false</expr>;</expr_stmt>
                    }</block></else></if>
                    <if>if <condition>(<expr><name>isOK</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>currentelement</name> = <call><name><name>path</name>.<name>replace</name></name><argument_list>(<argument><expr><call><name><name>remoteFileSep</name>.<name>charAt</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>File</name>.<name>separatorChar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr>!<call><name>isFollowSymlinks</name><argument_list>()</argument_list></call>
                            &amp;&amp; <name>traversesSymlinks</name></expr>)</condition><then> <block>{
                            <continue>continue;</continue>
                        }</block></then></if>

                        <if>if <condition>(<expr><call><name><name>myfile</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                            <if>if <condition>(<expr><call><name>isIncluded</name><argument_list>(<argument><expr><name>currentelement</name></expr></argument>)</argument_list></call>
                                &amp;&amp; <call><name><name>currentelement</name>.<name>length</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
                                <expr_stmt><expr><call><name>accountForIncludedDir</name><argument_list>(<argument><expr><name>currentelement</name></expr></argument>, <argument><expr><name>myfile</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></then>  <else>else <block>{
                                <if>if <condition>(<expr><call><name><name>currentelement</name>.<name>length</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
                                    <if>if <condition>(<expr><call><name><name>currentelement</name>.<name>charAt</name></name><argument_list>(<argument><expr><call><name><name>currentelement</name>
                                                              .<name>length</name></name><argument_list>()</argument_list></call> - 1</expr></argument>)</argument_list></call>
                                        != <name><name>File</name>.<name>separatorChar</name></name></expr>)</condition><then> <block>{
                                        <expr_stmt><expr><name>currentelement</name> =
                                            <name>currentelement</name> + <name><name>File</name>.<name>separatorChar</name></name></expr>;</expr_stmt>
                                    }</block></then></if>
                                }</block></then></if>
                                <expr_stmt><expr><call><name>scandir</name><argument_list>(<argument><expr><call><name><name>myfile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>currentelement</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></else></if>
                        }</block></then> <else>else <block>{
                            <if>if <condition>(<expr><name>isCaseSensitive</name>
                                &amp;&amp; <call><name><name>originalpattern</name>.<name>equals</name></name><argument_list>(<argument><expr><name>currentelement</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                <expr_stmt><expr><call><name>accountForIncludedFile</name><argument_list>(<argument><expr><name>currentelement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></then> <else>else <if>if <condition>(<expr>!<name>isCaseSensitive</name>
                                       &amp;&amp; <call><name><name>originalpattern</name>
                                       .<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>currentelement</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                <expr_stmt><expr><call><name>accountForIncludedFile</name><argument_list>(<argument><expr><name>currentelement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></then></if></else></if>
                        }</block></else></if>
                    }</block></then></if>
                }</block></while>
            }</block></else></if>
        }</block></function>
        <comment type="javadoc">/**
         * scans a particular directory. populates the scannedDirs cache.
         *
         * @param dir directory to scan
         * @param vpath  relative path to the base directory of the remote fileset
         * always ended with a File.separator
         * @param fast seems to be always true in practice
         */</comment>
        <function><type><specifier>protected</specifier> <name>void</name></type> <name>scandir</name><parameter_list>(<param><decl><type><name>String</name></type> <name>dir</name></decl></param>, <param><decl><type><name>String</name></type> <name>vpath</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>fast</name></decl></param>)</parameter_list> <block>{
            <comment type="line">// avoid double scanning of directories, can only happen in fast mode</comment>
            <if>if <condition>(<expr><name>fast</name> &amp;&amp; <call><name>hasBeenScanned</name><argument_list>(<argument><expr><name>vpath</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return;</return>
            }</block></then></if>
            <try>try <block>{
                <if>if <condition>(<expr>!<call><name><name>ftp</name>.<name>changeWorkingDirectory</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <return>return;</return>
                }</block></then></if>
                <decl_stmt><decl><type><name>String</name></type> <name>completePath</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr>!<call><name><name>vpath</name>.<name>equals</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>completePath</name> = <name>rootPath</name> + <name>remoteFileSep</name>
                        + <call><name><name>vpath</name>.<name>replace</name></name><argument_list>(<argument><expr><name><name>File</name>.<name>separatorChar</name></name></expr></argument>, <argument><expr><call><name><name>remoteFileSep</name>.<name>charAt</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><name>completePath</name> = <name>rootPath</name></expr>;</expr_stmt>
                }</block></else></if>
                <decl_stmt><decl><type><name>FTPFile</name><index>[]</index></type> <name>newfiles</name> =<init> <expr><call><name>listFiles</name><argument_list>(<argument><expr><name>completePath</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if>if <condition>(<expr><name>newfiles</name> == <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>ftp</name>.<name>changeToParentDirectory</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <return>return;</return>
                }</block></then></if>
                <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>newfiles</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                    <decl_stmt><decl><type><name>FTPFile</name></type> <name>file</name> =<init> <expr><name><name>newfiles</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>file</name> != <name>null</name>
                        &amp;&amp; !<call><name><name>file</name>.<name>getName</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr>"."</expr></argument>)</argument_list></call>
                        &amp;&amp; !<call><name><name>file</name>.<name>getName</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr>".."</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>String</name></type> <name>name</name> =<init> <expr><name>vpath</name> + <call><name><name>file</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>scannedDirs</name>.<name>put</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>new <call><name>FTPFileProxy</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><call><name>isFunctioningAsDirectory</name><argument_list>(<argument><expr><name>ftp</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                            <decl_stmt><decl><type><name>boolean</name></type> <name>slowScanAllowed</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
                            <if>if <condition>(<expr>!<call><name>isFollowSymlinks</name><argument_list>()</argument_list></call> &amp;&amp; <call><name><name>file</name>.<name>isSymbolicLink</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                                <expr_stmt><expr><call><name><name>dirsExcluded</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><name>slowScanAllowed</name> = false</expr>;</expr_stmt>
                            }</block></then> <else>else <if>if <condition>(<expr><call><name>isIncluded</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                <expr_stmt><expr><call><name>accountForIncludedDir</name><argument_list>(<argument><expr><name>name</name></expr></argument>,
                                                      <argument><expr>new <call><name>AntFTPFile</name><argument_list>(<argument><expr><name>ftp</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>completePath</name></expr></argument>)</argument_list></call></expr></argument> , <argument><expr><name>fast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></then> <else>else <block>{
                                <expr_stmt><expr><call><name><name>dirsNotIncluded</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if>if <condition>(<expr><name>fast</name> &amp;&amp; <call><name>couldHoldIncluded</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                    <expr_stmt><expr><call><name>scandir</name><argument_list>(<argument><expr><call><name><name>file</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                                            <argument><expr><name>name</name> + <name><name>File</name>.<name>separator</name></name></expr></argument>, <argument><expr><name>fast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                }</block></then></if>
                            }</block></else></if></else></if>
                            <if>if <condition>(<expr>!<name>fast</name> &amp;&amp; <name>slowScanAllowed</name></expr>)</condition><then> <block>{
                                <expr_stmt><expr><call><name>scandir</name><argument_list>(<argument><expr><call><name><name>file</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                                        <argument><expr><name>name</name> + <name><name>File</name>.<name>separator</name></name></expr></argument>, <argument><expr><name>fast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></then></if>
                        }</block></then> <else>else <block>{
                            <if>if <condition>(<expr>!<call><name>isFollowSymlinks</name><argument_list>()</argument_list></call> &amp;&amp; <call><name><name>file</name>.<name>isSymbolicLink</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                                <expr_stmt><expr><call><name><name>filesExcluded</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></then> <else>else <if>if <condition>(<expr><call><name>isFunctioningAsFile</name><argument_list>(<argument><expr><name>ftp</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                <expr_stmt><expr><call><name>accountForIncludedFile</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></then></if></else></if>
                        }</block></else></if>
                    }</block></then></if>
                }</block></for>
                <expr_stmt><expr><call><name><name>ftp</name>.<name>changeToParentDirectory</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Error while communicating with FTP "
                                         + "server: "</expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></function>
        <comment type="javadoc">/**
         * process included file
         * @param name  path of the file relative to the directory of the fileset
         */</comment>
        <function><type><specifier>private</specifier> <name>void</name></type> <name>accountForIncludedFile</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
            <if>if <condition>(<expr>!<call><name><name>filesIncluded</name>.<name>contains</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call>
                &amp;&amp; !<call><name><name>filesExcluded</name>.<name>contains</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{

                <if>if <condition>(<expr><call><name>isIncluded</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr>!<call><name>isExcluded</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call>
                        &amp;&amp; <call><name>isSelected</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>(<name>File</name>) <call><name><name>scannedDirs</name>.<name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>filesIncluded</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name><name>filesExcluded</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name><name>filesNotIncluded</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then></if>
        }</block></function>

        <comment type="javadoc">/**
         *
         * @param name path of the directory relative to the directory of
         * the fileset
         * @param file directory as file
         * @param fast
         */</comment>
        <function><type><specifier>private</specifier> <name>void</name></type> <name>accountForIncludedDir</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>, <param><decl><type><name>AntFTPFile</name></type> <name>file</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>fast</name></decl></param>)</parameter_list> <block>{
            <if>if <condition>(<expr>!<call><name><name>dirsIncluded</name>.<name>contains</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call>
                &amp;&amp; !<call><name><name>dirsExcluded</name>.<name>contains</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{

                <if>if <condition>(<expr>!<call><name>isExcluded</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><name>fast</name></expr>)</condition><then> <block>{
                        <if>if <condition>(<expr><call><name><name>file</name>.<name>isSymbolicLink</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                            <try>try <block>{
                                <expr_stmt><expr><call><name><name>file</name>.<name>getClient</name></name><argument_list>()</argument_list></call>.<call><name>changeWorkingDirectory</name><argument_list>(<argument><expr><name><name>file</name>.<name>curpwd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ioe</name></decl></param>) <block>{
                                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"could not change directory to curpwd"</expr></argument>)</argument_list></call></expr>;</throw>
                            }</block></catch></try>
                            <expr_stmt><expr><call><name>scandir</name><argument_list>(<argument><expr><call><name><name>file</name>.<name>getLink</name></name><argument_list>()</argument_list></call></expr></argument>,
                                    <argument><expr><name>name</name> + <name><name>File</name>.<name>separator</name></name></expr></argument>, <argument><expr><name>fast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then> <else>else <block>{
                            <try>try <block>{
                                <expr_stmt><expr><call><name><name>file</name>.<name>getClient</name></name><argument_list>()</argument_list></call>.<call><name>changeWorkingDirectory</name><argument_list>(<argument><expr><name><name>file</name>.<name>curpwd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ioe</name></decl></param>) <block>{
                                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"could not change directory to curpwd"</expr></argument>)</argument_list></call></expr>;</throw>
                            }</block></catch></try>
                            <expr_stmt><expr><call><name>scandir</name><argument_list>(<argument><expr><call><name><name>file</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                                    <argument><expr><name>name</name> + <name><name>File</name>.<name>separator</name></name></expr></argument>, <argument><expr><name>fast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></else></if>
                    }</block></then></if>
                    <expr_stmt><expr><call><name><name>dirsIncluded</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name><name>dirsExcluded</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>fast</name> &amp;&amp; <call><name>couldHoldIncluded</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <try>try <block>{
                            <expr_stmt><expr><call><name><name>file</name>.<name>getClient</name></name><argument_list>()</argument_list></call>.<call><name>changeWorkingDirectory</name><argument_list>(<argument><expr><name><name>file</name>.<name>curpwd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ioe</name></decl></param>) <block>{
                            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"could not change directory to curpwd"</expr></argument>)</argument_list></call></expr>;</throw>
                        }</block></catch></try>
                        <expr_stmt><expr><call><name>scandir</name><argument_list>(<argument><expr><call><name><name>file</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                                <argument><expr><name>name</name> + <name><name>File</name>.<name>separator</name></name></expr></argument>, <argument><expr><name>fast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></else></if>
            }</block></then></if>
        }</block></function>
        <comment type="javadoc">/**
         * temporary table to speed up the various scanning methods below
         *
         * @since Ant 1.6
         */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>Map</name></type> <name>fileListMap</name> =<init> <expr>new <call><name>HashMap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="javadoc">/**
         * List of all scanned directories.
         *
         * @since Ant 1.6
         */</comment>

        <decl_stmt><decl><type><specifier>private</specifier> <name>Map</name></type> <name>scannedDirs</name> =<init> <expr>new <call><name>HashMap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * Has the directory with the given path relative to the base
         * directory already been scanned?
         *
         * @since Ant 1.6
         */</comment>
        <function><type><specifier>private</specifier> <name>boolean</name></type> <name>hasBeenScanned</name><parameter_list>(<param><decl><type><name>String</name></type> <name>vpath</name></decl></param>)</parameter_list> <block>{
            <return>return <expr><call><name><name>scannedDirs</name>.<name>containsKey</name></name><argument_list>(<argument><expr><name>vpath</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Clear internal caches.
         *
         * @since Ant 1.6
         */</comment>
        <function><type><specifier>private</specifier> <name>void</name></type> <name>clearCaches</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>fileListMap</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>scannedDirs</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        <comment type="javadoc">/**
         * list the files present in one directory.
         * @param directory full path on the remote side
         * @param changedir if true change to directory directory before listing
         * @return array of FTPFile
         */</comment>
        <function><type><specifier>public</specifier> <name>FTPFile</name><index>[]</index></type> <name>listFiles</name><parameter_list>(<param><decl><type><name>String</name></type> <name>directory</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>changedir</name></decl></param>)</parameter_list> <block>{
            <comment type="line">//getProject().log("listing files in directory " + directory, Project.MSG_DEBUG);</comment>
            <decl_stmt><decl><type><name>String</name></type> <name>currentPath</name> =<init> <expr><name>directory</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>changedir</name></expr>)</condition><then> <block>{
                <try>try <block>{
                    <decl_stmt><decl><type><name>boolean</name></type> <name>result</name> =<init> <expr><call><name><name>ftp</name>.<name>changeWorkingDirectory</name></name><argument_list>(<argument><expr><name>directory</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <block>{
                        <return>return <expr><name>null</name></expr>;</return>
                    }</block></then></if>
                    <expr_stmt><expr><name>currentPath</name> = <call><name><name>ftp</name>.<name>printWorkingDirectory</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ioe</name></decl></param>) <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>ioe</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></catch></try>
            }</block></then></if>
            <if>if <condition>(<expr><call><name><name>fileListMap</name>.<name>containsKey</name></name><argument_list>(<argument><expr><name>currentPath</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>log</name><argument_list>(<argument><expr>"filelist map used in listing files"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr>((<name><name>FTPFile</name><index>[]</index></name>) <call><name><name>fileListMap</name>.<name>get</name></name><argument_list>(<argument><expr><name>currentPath</name></expr></argument>)</argument_list></call>)</expr>;</return>
            }</block></then></if>
            <decl_stmt><decl><type><name>FTPFile</name><index>[]</index></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <try>try <block>{
                <expr_stmt><expr><name>result</name> = <call><name><name>ftp</name>.<name>listFiles</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ioe</name></decl></param>) <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>ioe</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
            <expr_stmt><expr><call><name><name>fileListMap</name>.<name>put</name></name><argument_list>(<argument><expr><name>currentPath</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>remoteSensitivityChecked</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>checkRemoteSensitivity</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <return>return <expr><name>result</name></expr>;</return>
        }</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>forceRemoteSensitivityCheck</name><parameter_list>()</parameter_list> <block>{
            <if>if <condition>(<expr>!<name>remoteSensitivityChecked</name></expr>)</condition><then> <block>{
                <try>try <block>{
                    <expr_stmt><expr><call><name>checkRemoteSensitivity</name><argument_list>(<argument><expr><call><name><name>ftp</name>.<name>listFiles</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ftp</name>.<name>printWorkingDirectory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ioe</name></decl></param>) <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>ioe</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></catch></try>
            }</block></then></if>
        }</block></function>
        <comment type="javadoc">/**
         * cd into one directory and
         * list the files present in one directory.
         * @param directory full path on the remote side
         * @return array of FTPFile
         */</comment>
        <function><type><specifier>public</specifier> <name>FTPFile</name><index>[]</index></type> <name>listFiles</name><parameter_list>(<param><decl><type><name>String</name></type> <name>directory</name></decl></param>)</parameter_list> <block>{
            <return>return <expr><call><name>listFiles</name><argument_list>(<argument><expr><name>directory</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
        <function><type><specifier>private</specifier> <name>void</name></type> <name>checkRemoteSensitivity</name><parameter_list>(<param><decl><type><name><name>FTPFile</name><index>[]</index></name></type> <name>array</name></decl></param>, <param><decl><type><name>String</name></type> <name>directory</name></decl></param>)</parameter_list> <block>{
            <if>if <condition>(<expr><name>array</name> == <name>null</name></expr>)</condition><then> <block>{
                <return>return;</return>
            }</block></then></if>
            <decl_stmt><decl><type><name>boolean</name></type> <name>candidateFound</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>target</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>icounter</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>icounter</name> &lt; <name><name>array</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>icounter</name>++</expr></incr>) <block>{
                <if>if <condition>(<expr><name><name>array</name><index>[<expr><name>icounter</name></expr>]</index></name> != <name>null</name> &amp;&amp; <name><name>array</name><index>[<expr><name>icounter</name></expr>]</index></name>.<call><name>isDirectory</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr>!<name><name>array</name><index>[<expr><name>icounter</name></expr>]</index></name>.<call><name>getName</name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr>"."</expr></argument>)</argument_list></call>
                        &amp;&amp; !<name><name>array</name><index>[<expr><name>icounter</name></expr>]</index></name>.<call><name>getName</name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr>".."</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>candidateFound</name> = true</expr>;</expr_stmt>
                        <expr_stmt><expr><name>target</name> = <call><name>fiddleName</name><argument_list>(<argument><expr><name><name>array</name><index>[<expr><name>icounter</name></expr>]</index></name>.<call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>log</name><argument_list>(<argument><expr>"will try to cd to "
                                         + <name>target</name> + " where a directory called " + <name><name>array</name><index>[<expr><name>icounter</name></expr>]</index></name>.<call><name>getName</name><argument_list>()</argument_list></call>
                                         + " exists"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <for>for (<init><decl><type><name>int</name></type> <name>pcounter</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>pcounter</name> &lt; <name><name>array</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>pcounter</name>++</expr></incr>) <block>{
                            <if>if <condition>(<expr><name><name>array</name><index>[<expr><name>pcounter</name></expr>]</index></name> != <name>null</name>
                                &amp;&amp; <name>pcounter</name> != <name>icounter</name>
                                &amp;&amp; <call><name><name>target</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>array</name><index>[<expr><name>pcounter</name></expr>]</index></name>.<call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                <expr_stmt><expr><name>candidateFound</name> = false</expr>;</expr_stmt>
                            }</block></then></if>
                        }</block></for>
                        <if>if <condition>(<expr><name>candidateFound</name></expr>)</condition><then> <block>{
                            <break>break;</break>
                        }</block></then></if>
                    }</block></then></if>
                }</block></then></if>
            }</block></for>
            <if>if <condition>(<expr><name>candidateFound</name></expr>)</condition><then> <block>{
                <try>try <block>{
                    <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>log</name><argument_list>(<argument><expr>"testing case sensitivity, attempting to cd to "
                                     + <name>target</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>remoteSystemCaseSensitive</name>  = !<call><name><name>ftp</name>.<name>changeWorkingDirectory</name></name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ioe</name></decl></param>) <block>{
                    <expr_stmt><expr><name>remoteSystemCaseSensitive</name> = true</expr>;</expr_stmt>
                }</block></catch> <finally>finally <block>{
                    <try>try <block>{
                        <expr_stmt><expr><call><name><name>ftp</name>.<name>changeWorkingDirectory</name></name><argument_list>(<argument><expr><name>directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ioe</name></decl></param>) <block>{
                        <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>ioe</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                    }</block></catch></try>
                }</block></finally></try>
                <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>log</name><argument_list>(<argument><expr>"remote system is case sensitive : " + <name>remoteSystemCaseSensitive</name></expr></argument>,
                                 <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>remoteSensitivityChecked</name> = true</expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>
        <function><type><specifier>private</specifier> <name>String</name></type> <name>fiddleName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>origin</name></decl></param>)</parameter_list> <block>{
            <decl_stmt><decl><type><name>StringBuffer</name></type> <name>result</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>icounter</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>icounter</name> &lt; <call><name><name>origin</name>.<name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>icounter</name>++</expr></incr>) <block>{
                <if>if <condition>(<expr><call><name><name>Character</name>.<name>isLowerCase</name></name><argument_list>(<argument><expr><call><name><name>origin</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>icounter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>Character</name>.<name>toUpperCase</name></name><argument_list>(<argument><expr><call><name><name>origin</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>icounter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <if>if <condition>(<expr><call><name><name>Character</name>.<name>isUpperCase</name></name><argument_list>(<argument><expr><call><name><name>origin</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>icounter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>Character</name>.<name>toLowerCase</name></name><argument_list>(<argument><expr><call><name><name>origin</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>icounter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>origin</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>icounter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if></else></if>
            }</block></for>
            <return>return <expr><call><name><name>result</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>
        <comment type="javadoc">/**
         * an AntFTPFile is a representation of a remote file
         * @since Ant 1.6
         */</comment>
        <class><specifier>protected</specifier> class <name>AntFTPFile</name> <block>{
            <comment type="javadoc">/**
             * ftp client
             */</comment>
            <decl_stmt><decl><type><specifier>private</specifier> <name>FTPClient</name></type> <name>client</name></decl>;</decl_stmt>
            <comment type="javadoc">/**
             * parent directory of the file
             */</comment>
            <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>curpwd</name></decl>;</decl_stmt>
            <comment type="javadoc">/**
             * the file itself
             */</comment>
            <decl_stmt><decl><type><specifier>private</specifier> <name>FTPFile</name></type> <name>ftpFile</name></decl>;</decl_stmt>
            <comment type="javadoc">/**
             *
             */</comment>
            <decl_stmt><decl><type><specifier>private</specifier> <name>AntFTPFile</name></type> <name>parent</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>relativePathCalculated</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>traversesSymlinks</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>relativePath</name> =<init> <expr>""</expr></init></decl>;</decl_stmt>
            <comment type="javadoc">/**
             * constructor
             * @param client ftp client variable
             * @param ftpFile the file
             * @param curpwd absolute remote path where the file is found
             */</comment>
            <constructor><specifier>public</specifier> <name>AntFTPFile</name><parameter_list>(<param><decl><type><name>FTPClient</name></type> <name>client</name></decl></param>, <param><decl><type><name>FTPFile</name></type> <name>ftpFile</name></decl></param>, <param><decl><type><name>String</name></type> <name>curpwd</name></decl></param>)</parameter_list> <block>{
                <expr_stmt><expr><name><name>this</name>.<name>client</name></name> = <name>client</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name>.<name>ftpFile</name></name> = <name>ftpFile</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name>.<name>curpwd</name></name> = <name>curpwd</name></expr>;</expr_stmt>
            }</block></constructor>
            <comment type="javadoc">/**
             * other constructor
             * @param parent the parent file
             * @param path  a relative path to the parent file
             */</comment>
            <constructor><specifier>public</specifier> <name>AntFTPFile</name><parameter_list>(<param><decl><type><name>AntFTPFile</name></type> <name>parent</name></decl></param>, <param><decl><type><name>String</name></type> <name>path</name></decl></param>)</parameter_list> <block>{
                <expr_stmt><expr><name><name>this</name>.<name>parent</name></name> = <name>parent</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name>.<name>client</name></name> = <name><name>parent</name>.<name>client</name></name></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>Vector</name></type> <name>pathElements</name> =<init> <expr><call><name><name>SelectorUtils</name>.<name>tokenizePath</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <try>try <block>{
                    <decl_stmt><decl><type><name>boolean</name></type> <name>result</name> =<init> <expr><call><name><name>this</name>.<name>client</name>.<name>changeWorkingDirectory</name></name><argument_list>(<argument><expr><call><name><name>parent</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <comment type="line">//this should not happen, except if parent has been deleted by another process</comment>
                    <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <block>{
                        <return>return;</return>
                    }</block></then></if>
                    <expr_stmt><expr><name><name>this</name>.<name>curpwd</name></name> = <call><name><name>parent</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ioe</name></decl></param>) <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"could not change working dir to "
                                             + <name><name>parent</name>.<name>curpwd</name></name></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></catch></try>
                <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>size</name> =<init> <expr><call><name><name>pathElements</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for (<init><decl><type><name>int</name></type> <name>fcount</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>fcount</name> &lt; <name>size</name> - 1</expr>;</condition> <incr><expr><name>fcount</name>++</expr></incr>) <block>{
                    <decl_stmt><decl><type><name>String</name></type> <name>currentPathElement</name> =<init> <expr>(<name>String</name>) <call><name><name>pathElements</name>.<name>elementAt</name></name><argument_list>(<argument><expr><name>fcount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <try>try <block>{
                        <decl_stmt><decl><type><name>boolean</name></type> <name>result</name> =<init> <expr><call><name><name>this</name>.<name>client</name>.<name>changeWorkingDirectory</name></name><argument_list>(<argument><expr><name>currentPathElement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if>if <condition>(<expr>!<name>result</name> &amp;&amp; !<call><name>isCaseSensitive</name><argument_list>()</argument_list></call>
                            &amp;&amp; (<name>remoteSystemCaseSensitive</name> || !<name>remoteSensitivityChecked</name>)</expr>)</condition><then> <block>{
                            <expr_stmt><expr><name>currentPathElement</name> = <call><name>findPathElementCaseUnsensitive</name><argument_list>(<argument><expr><name><name>this</name>.<name>curpwd</name></name></expr></argument>,
                                                                                <argument><expr><name>currentPathElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <if>if <condition>(<expr><name>currentPathElement</name> == <name>null</name></expr>)</condition><then> <block>{
                                <return>return;</return>
                            }</block></then></if>
                        }</block></then> <else>else <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <block>{
                            <return>return;</return>
                        }</block></then></if></else></if>
                        <expr_stmt><expr><name><name>this</name>.<name>curpwd</name></name> = <call><name>getCurpwdPlusFileSep</name><argument_list>()</argument_list></call>
                            + <name>currentPathElement</name></expr>;</expr_stmt>
                    }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ioe</name></decl></param>) <block>{
                        <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"could not change working dir to "
                                                 + (<name>String</name>) <call><name><name>pathElements</name>.<name>elementAt</name></name><argument_list>(<argument><expr><name>fcount</name></expr></argument>)</argument_list></call>
                                                 + " from " + <name><name>this</name>.<name>curpwd</name></name></expr></argument>)</argument_list></call></expr>;</throw>
                    }</block></catch></try>

                }</block></for>
                <decl_stmt><decl><type><name>String</name></type> <name>lastpathelement</name> =<init> <expr>(<name>String</name>) <call><name><name>pathElements</name>.<name>elementAt</name></name><argument_list>(<argument><expr><name>size</name> - 1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>FTPFile</name> <index>[]</index></type> <name>theFiles</name> =<init> <expr><call><name>listFiles</name><argument_list>(<argument><expr><name><name>this</name>.<name>curpwd</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>this</name>.<name>ftpFile</name></name> = <call><name>getFile</name><argument_list>(<argument><expr><name>theFiles</name></expr></argument>, <argument><expr><name>lastpathelement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></constructor>
            <comment type="javadoc">/**
             * find a file in a directory in case unsensitive way
             * @param parentPath        where we are
             * @param soughtPathElement what is being sought
             * @return                  the first file found or null if not found
             */</comment>
            <function><type><specifier>private</specifier> <name>String</name></type> <name>findPathElementCaseUnsensitive</name><parameter_list>(<param><decl><type><name>String</name></type> <name>parentPath</name></decl></param>,
                                                          <param><decl><type><name>String</name></type> <name>soughtPathElement</name></decl></param>)</parameter_list> <block>{
                <comment type="line">// we are already in the right path, so the second parameter</comment>
                <comment type="line">// is false</comment>
                <decl_stmt><decl><type><name>FTPFile</name><index>[]</index></type> <name>theFiles</name> =<init> <expr><call><name>listFiles</name><argument_list>(<argument><expr><name>parentPath</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>theFiles</name> == <name>null</name></expr>)</condition><then> <block>{
                    <return>return <expr><name>null</name></expr>;</return>
                }</block></then></if>
                <for>for (<init><decl><type><name>int</name></type> <name>icounter</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>icounter</name> &lt; <name><name>theFiles</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>icounter</name>++</expr></incr>) <block>{
                    <if>if <condition>(<expr><name><name>theFiles</name><index>[<expr><name>icounter</name></expr>]</index></name> != <name>null</name>
                        &amp;&amp; <name><name>theFiles</name><index>[<expr><name>icounter</name></expr>]</index></name>.<call><name>getName</name><argument_list>()</argument_list></call>.<call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><name>soughtPathElement</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <return>return <expr><name><name>theFiles</name><index>[<expr><name>icounter</name></expr>]</index></name>.<call><name>getName</name><argument_list>()</argument_list></call></expr>;</return>
                    }</block></then></if>
                }</block></for>
                <return>return <expr><name>null</name></expr>;</return>
            }</block></function>
            <comment type="javadoc">/**
             * find out if the file exists
             * @return  true if the file exists
             */</comment>
            <function><type><specifier>public</specifier> <name>boolean</name></type> <name>exists</name><parameter_list>()</parameter_list> <block>{
                <return>return <expr>(<name>ftpFile</name> != <name>null</name>)</expr>;</return>
            }</block></function>
            <comment type="javadoc">/**
             * if the file is a symbolic link, find out to what it is pointing
             * @return the target of the symbolic link
             */</comment>
            <function><type><specifier>public</specifier> <name>String</name></type> <name>getLink</name><parameter_list>()</parameter_list> <block>{
                <return>return <expr><call><name><name>ftpFile</name>.<name>getLink</name></name><argument_list>()</argument_list></call></expr>;</return>
            }</block></function>
            <comment type="javadoc">/**
             * get the name of the file
             * @return the name of the file
             */</comment>
            <function><type><specifier>public</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{
                <return>return <expr><call><name><name>ftpFile</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr>;</return>
            }</block></function>
            <comment type="javadoc">/**
             * find out the absolute path of the file
             * @return absolute path as string
             */</comment>
            <function><type><specifier>public</specifier> <name>String</name></type> <name>getAbsolutePath</name><parameter_list>()</parameter_list> <block>{
                <return>return <expr><call><name>getCurpwdPlusFileSep</name><argument_list>()</argument_list></call> + <call><name><name>ftpFile</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr>;</return>
            }</block></function>
            <comment type="javadoc">/**
             * find out the relative path assuming that the path used to construct
             * this AntFTPFile was spelled properly with regards to case.
             * This is OK on a case sensitive system such as UNIX
             * @return relative path
             */</comment>
            <function><type><specifier>public</specifier> <name>String</name></type> <name>getFastRelativePath</name><parameter_list>()</parameter_list> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>absPath</name> =<init> <expr><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>absPath</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>rootPath</name> + <name>remoteFileSep</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
                    <return>return <expr><call><name><name>absPath</name>.<name>substring</name></name><argument_list>(<argument><expr><call><name><name>rootPath</name>.<name>length</name></name><argument_list>()</argument_list></call> + <call><name><name>remoteFileSep</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
                }</block></then></if>
                <return>return <expr><name>null</name></expr>;</return>
            }</block></function>
            <comment type="javadoc">/**
             * find out the relative path to the rootPath of the enclosing scanner.
             * this relative path is spelled exactly like on disk,
             * for instance if the AntFTPFile has been instantiated as ALPHA,
             * but the file is really called alpha, this method will return alpha.
             * If a symbolic link is encountered, it is followed, but the name of the link
             * rather than the name of the target is returned.
             * (ie does not behave like File.getCanonicalPath())
             * @return                relative path, separated by remoteFileSep
             * @throws IOException    if a change directory fails, ...
             * @throws BuildException if one of the components of the relative path cannot
             * be found.
             */</comment>
            <function><type><specifier>public</specifier> <name>String</name></type> <name>getRelativePath</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
                <if>if <condition>(<expr>!<name>relativePathCalculated</name></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><name>parent</name> != <name>null</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>traversesSymlinks</name> = <call><name><name>parent</name>.<name>isTraverseSymlinks</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>relativePath</name> = <call><name>getRelativePath</name><argument_list>(<argument><expr><call><name><name>parent</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                       <argument><expr><call><name><name>parent</name>.<name>getRelativePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <expr_stmt><expr><name>relativePath</name> = <call><name>getRelativePath</name><argument_list>(<argument><expr><name>rootPath</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>relativePathCalculated</name> = true</expr>;</expr_stmt>
                    }</block></else></if>
                }</block></then></if>
                <return>return <expr><name>relativePath</name></expr>;</return>
            }</block></function>
            <comment type="javadoc">/**
             * get thge relative path of this file
             * @param currentPath          base path
             * @param currentRelativePath  relative path of the base path with regards to remote dir
             * @return relative path
             */</comment>
            <function><type><specifier>private</specifier> <name>String</name></type> <name>getRelativePath</name><parameter_list>(<param><decl><type><name>String</name></type> <name>currentPath</name></decl></param>, <param><decl><type><name>String</name></type> <name>currentRelativePath</name></decl></param>)</parameter_list> <block>{
                <decl_stmt><decl><type><name>Vector</name></type> <name>pathElements</name> =<init> <expr><call><name><name>SelectorUtils</name>.<name>tokenizePath</name></name><argument_list>(<argument><expr><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>remoteFileSep</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Vector</name></type> <name>pathElements2</name> =<init> <expr><call><name><name>SelectorUtils</name>.<name>tokenizePath</name></name><argument_list>(<argument><expr><name>currentPath</name></expr></argument>, <argument><expr><name>remoteFileSep</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>relPath</name> =<init> <expr><name>currentRelativePath</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>size</name> =<init> <expr><call><name><name>pathElements</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for (<init><decl><type><name>int</name></type> <name>pcount</name> =<init> <expr><call><name><name>pathElements2</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>pcount</name> &lt; <name>size</name></expr>;</condition> <incr><expr><name>pcount</name>++</expr></incr>) <block>{
                    <decl_stmt><decl><type><name>String</name></type> <name>currentElement</name> =<init> <expr>(<name>String</name>) <call><name><name>pathElements</name>.<name>elementAt</name></name><argument_list>(<argument><expr><name>pcount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>FTPFile</name><index>[]</index></type> <name>theFiles</name> =<init> <expr><call><name>listFiles</name><argument_list>(<argument><expr><name>currentPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>FTPFile</name></type> <name>theFile</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>theFiles</name> != <name>null</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>theFile</name> = <call><name>getFile</name><argument_list>(<argument><expr><name>theFiles</name></expr></argument>, <argument><expr><name>currentElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <if>if <condition>(<expr>!<call><name><name>relPath</name>.<name>equals</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>relPath</name> = <name>relPath</name> + <name>remoteFileSep</name></expr>;</expr_stmt>
                    }</block></then></if>
                    <if>if <condition>(<expr><name>theFile</name> == <name>null</name></expr>)</condition><then> <block>{
                        <comment type="line">// hit a hidden file assume not a symlink</comment>
                        <expr_stmt><expr><name>relPath</name> = <name>relPath</name> + <name>currentElement</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>currentPath</name> = <name>currentPath</name> + <name>remoteFileSep</name> + <name>currentElement</name></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Hidden file " + <name>relPath</name>
                            + " assumed to not be a symlink."</expr></argument>,
                            <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <expr_stmt><expr><name>traversesSymlinks</name> = <name>traversesSymlinks</name> || <call><name><name>theFile</name>.<name>isSymbolicLink</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>relPath</name> = <name>relPath</name> + <call><name><name>theFile</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>currentPath</name> = <name>currentPath</name> + <name>remoteFileSep</name> + <call><name><name>theFile</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></for>
                <return>return <expr><name>relPath</name></expr>;</return>
            }</block></function>
            <comment type="javadoc">/**
             * find a file matching a string in an array of FTPFile.
             * This method will find "alpha" when requested for "ALPHA"
             * if and only if the caseSensitive attribute is set to false.
             * When caseSensitive is set to true, only the exact match is returned.
             * @param theFiles  array of files
             * @param lastpathelement  the file name being sought
             * @return null if the file cannot be found, otherwise return the matching file.
             */</comment>
            <function><type><specifier>public</specifier> <name>FTPFile</name></type> <name>getFile</name><parameter_list>(<param><decl><type><name><name>FTPFile</name><index>[]</index></name></type> <name>theFiles</name></decl></param>, <param><decl><type><name>String</name></type> <name>lastpathelement</name></decl></param>)</parameter_list> <block>{
                <if>if <condition>(<expr><name>theFiles</name> == <name>null</name></expr>)</condition><then> <block>{
                    <return>return <expr><name>null</name></expr>;</return>
                }</block></then></if>
                <for>for (<init><decl><type><name>int</name></type> <name>fcount</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>fcount</name> &lt; <name><name>theFiles</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>fcount</name>++</expr></incr>) <block>{
                    <if>if <condition>(<expr><name><name>theFiles</name><index>[<expr><name>fcount</name></expr>]</index></name> != <name>null</name></expr>)</condition><then> <block>{
                        <if>if <condition>(<expr><name><name>theFiles</name><index>[<expr><name>fcount</name></expr>]</index></name>.<call><name>getName</name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><name>lastpathelement</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                            <return>return <expr><name><name>theFiles</name><index>[<expr><name>fcount</name></expr>]</index></name></expr>;</return>
                        }</block></then> <else>else <if>if <condition>(<expr>!<call><name>isCaseSensitive</name><argument_list>()</argument_list></call>
                                   &amp;&amp; <name><name>theFiles</name><index>[<expr><name>fcount</name></expr>]</index></name>.<call><name>getName</name><argument_list>()</argument_list></call>.<call><name>equalsIgnoreCase</name><argument_list>(
                                                                                  <argument><expr><name>lastpathelement</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                            <return>return <expr><name><name>theFiles</name><index>[<expr><name>fcount</name></expr>]</index></name></expr>;</return>
                        }</block></then></if></else></if>
                    }</block></then></if>
                }</block></for>
                <return>return <expr><name>null</name></expr>;</return>
            }</block></function>
            <comment type="javadoc">/**
             * tell if a file is a directory.
             * note that it will return false for symbolic links pointing to directories.
             * @return &lt;code&gt;true&lt;/code&gt; for directories
             */</comment>
            <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isDirectory</name><parameter_list>()</parameter_list> <block>{
                <return>return <expr><call><name><name>ftpFile</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr>;</return>
            }</block></function>
            <comment type="javadoc">/**
             * tell if a file is a symbolic link
             * @return &lt;code&gt;true&lt;/code&gt; for symbolic links
             */</comment>
            <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSymbolicLink</name><parameter_list>()</parameter_list> <block>{
                <return>return <expr><call><name><name>ftpFile</name>.<name>isSymbolicLink</name></name><argument_list>()</argument_list></call></expr>;</return>
            }</block></function>
            <comment type="javadoc">/**
             * return the attached FTP client object.
             * Warning : this instance is really shared with the enclosing class.
             * @return  FTP client
             */</comment>
            <function><type><specifier>protected</specifier> <name>FTPClient</name></type> <name>getClient</name><parameter_list>()</parameter_list> <block>{
                <return>return <expr><name>client</name></expr>;</return>
            }</block></function>

            <comment type="javadoc">/**
             * sets the current path of an AntFTPFile
             * @param curpwd the current path one wants to set
             */</comment>
            <function><type><specifier>protected</specifier> <name>void</name></type> <name>setCurpwd</name><parameter_list>(<param><decl><type><name>String</name></type> <name>curpwd</name></decl></param>)</parameter_list> <block>{
                <expr_stmt><expr><name><name>this</name>.<name>curpwd</name></name> = <name>curpwd</name></expr>;</expr_stmt>
            }</block></function>
            <comment type="javadoc">/**
             * returns the path of the directory containing the AntFTPFile.
             * of the full path of the file itself in case of AntFTPRootFile
             * @return parent directory of the AntFTPFile
             */</comment>
            <function><type><specifier>public</specifier> <name>String</name></type> <name>getCurpwd</name><parameter_list>()</parameter_list> <block>{
                <return>return <expr><name>curpwd</name></expr>;</return>
            }</block></function>
            <comment type="javadoc">/**
             * returns the path of the directory containing the AntFTPFile.
             * of the full path of the file itself in case of AntFTPRootFile
             * and appends the remote file separator if necessary.
             * @return parent directory of the AntFTPFile
             * @since Ant 1.8.2
             */</comment>
            <function><type><specifier>public</specifier> <name>String</name></type> <name>getCurpwdPlusFileSep</name><parameter_list>()</parameter_list> <block>{
                <return>return <expr><call><name><name>curpwd</name>.<name>endsWith</name></name><argument_list>(<argument><expr><name>remoteFileSep</name></expr></argument>)</argument_list></call> ? <name>curpwd</name>
                    : <name>curpwd</name> + <name>remoteFileSep</name></expr>;</return>
            }</block></function>
            <comment type="javadoc">/**
             * find out if a symbolic link is encountered in the relative path of this file
             * from rootPath.
             * @return &lt;code&gt;true&lt;/code&gt; if a symbolic link is encountered in the relative path.
             * @throws IOException if one of the change directory or directory listing operations
             * fails
             * @throws BuildException if a path component in the relative path cannot be found.
             */</comment>
            <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isTraverseSymlinks</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
                <if>if <condition>(<expr>!<name>relativePathCalculated</name></expr>)</condition><then> <block>{
                    <comment type="line">// getRelativePath also finds about symlinks</comment>
                    <expr_stmt><expr><call><name>getRelativePath</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <return>return <expr><name>traversesSymlinks</name></expr>;</return>
            }</block></function>

            <comment type="javadoc">/**
             * Get a string rep of this object.
             * @return a string containing the pwd and the file.
             */</comment>
            <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
                <return>return <expr>"AntFtpFile: " + <name>curpwd</name> + "%" + <name>ftpFile</name></expr>;</return>
            }</block></function>
        }</block></class>
        <comment type="javadoc">/**
         * special class to represent the remote directory itself
         * @since Ant 1.6
         */</comment>
        <class><specifier>protected</specifier> class <name>AntFTPRootFile</name> <super><extends>extends <name>AntFTPFile</name></extends></super> <block>{
            <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>remotedir</name></decl>;</decl_stmt>
            <comment type="javadoc">/**
             * constructor
             * @param aclient FTP client
             * @param remotedir remote directory
             */</comment>
            <constructor><specifier>public</specifier> <name>AntFTPRootFile</name><parameter_list>(<param><decl><type><name>FTPClient</name></type> <name>aclient</name></decl></param>, <param><decl><type><name>String</name></type> <name>remotedir</name></decl></param>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>aclient</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>remotedir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name>.<name>remotedir</name></name> = <name>remotedir</name></expr>;</expr_stmt>
                <try>try <block>{
                    <expr_stmt><expr><call><name><name>this</name>.<name>getClient</name></name><argument_list>()</argument_list></call>.<call><name>changeWorkingDirectory</name><argument_list>(<argument><expr><name><name>this</name>.<name>remotedir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>this</name>.<name>setCurpwd</name></name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getClient</name></name><argument_list>()</argument_list></call>.<call><name>printWorkingDirectory</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ioe</name></decl></param>) <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>ioe</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></catch></try>
            }</block></constructor>
            <comment type="javadoc">/**
             * find the absolute path
             * @return absolute path
             */</comment>
            <function><type><specifier>public</specifier> <name>String</name></type> <name>getAbsolutePath</name><parameter_list>()</parameter_list> <block>{
                <return>return <expr><call><name><name>this</name>.<name>getCurpwd</name></name><argument_list>()</argument_list></call></expr>;</return>
            }</block></function>
            <comment type="javadoc">/**
             * find out the relative path to root
             * @return empty string
             * @throws BuildException actually never
             * @throws IOException  actually never
             */</comment>
            <function><type><specifier>public</specifier> <name>String</name></type> <name>getRelativePath</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{
                <return>return <expr>""</expr>;</return>
            }</block></function>
        }</block></class>
    }</block></class>
    <comment type="javadoc">/**
     * check FTPFiles to check whether they function as directories too
     * the FTPFile API seem to make directory and symbolic links incompatible
     * we want to find out if we can cd to a symbolic link
     * @param dir  the parent directory of the file to test
     * @param file the file to test
     * @return true if it is possible to cd to this directory
     * @since ant 1.6
     */</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>isFunctioningAsDirectory</name><parameter_list>(<param><decl><type><name>FTPClient</name></type> <name>ftp</name></decl></param>, <param><decl><type><name>String</name></type> <name>dir</name></decl></param>, <param><decl><type><name>FTPFile</name></type> <name>file</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>result</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>currentWorkingDir</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>file</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>file</name>.<name>isFile</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if></else></if>
        <try>try <block>{
            <expr_stmt><expr><name>currentWorkingDir</name> = <call><name><name>ftp</name>.<name>printWorkingDirectory</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ioe</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>log</name><argument_list>(<argument><expr>"could not find current working directory " + <name>dir</name>
                             + " while checking a symlink"</expr></argument>,
                             <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <if>if <condition>(<expr><name>currentWorkingDir</name> != <name>null</name></expr>)</condition><then> <block>{
            <try>try <block>{
                <expr_stmt><expr><name>result</name> = <call><name><name>ftp</name>.<name>changeWorkingDirectory</name></name><argument_list>(<argument><expr><call><name><name>file</name>.<name>getLink</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ioe</name></decl></param>) <block>{
                <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>log</name><argument_list>(<argument><expr>"could not cd to " + <call><name><name>file</name>.<name>getLink</name></name><argument_list>()</argument_list></call> + " while checking a symlink"</expr></argument>,
                                 <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
            <if>if <condition>(<expr><name>result</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>boolean</name></type> <name>comeback</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
                <try>try <block>{
                    <expr_stmt><expr><name>comeback</name> = <call><name><name>ftp</name>.<name>changeWorkingDirectory</name></name><argument_list>(<argument><expr><name>currentWorkingDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ioe</name></decl></param>) <block>{
                    <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>log</name><argument_list>(<argument><expr>"could not cd back to " + <name>dir</name> + " while checking a symlink"</expr></argument>,
                                     <argument><expr><name><name>Project</name>.<name>MSG_ERR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch> <finally>finally <block>{
                    <if>if <condition>(<expr>!<name>comeback</name></expr>)</condition><then> <block>{
                        <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"could not cd back to " + <name>dir</name>
                                                 + " while checking a symlink"</expr></argument>)</argument_list></call></expr>;</throw>
                    }</block></then></if>
                }</block></finally></try>
            }</block></then></if>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
    <comment type="javadoc">/**
     * check FTPFiles to check whether they function as directories too
     * the FTPFile API seem to make directory and symbolic links incompatible
     * we want to find out if we can cd to a symbolic link
     * @param dir  the parent directory of the file to test
     * @param file the file to test
     * @return true if it is possible to cd to this directory
     * @since ant 1.6
     */</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>isFunctioningAsFile</name><parameter_list>(<param><decl><type><name>FTPClient</name></type> <name>ftp</name></decl></param>, <param><decl><type><name>String</name></type> <name>dir</name></decl></param>, <param><decl><type><name>FTPFile</name></type> <name>file</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>file</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>file</name>.<name>isFile</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if></else></if>
        <return>return <expr>!<call><name>isFunctioningAsDirectory</name><argument_list>(<argument><expr><name>ftp</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <comment type="javadoc">/**
     * Sets the remote directory where files will be placed. This may be a
     * relative or absolute path, and must be in the path syntax expected by
     * the remote server. No correction of path syntax will be performed.
     *
     * @param dir the remote directory name.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRemotedir</name><parameter_list>(<param><decl><type><name>String</name></type> <name>dir</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>remotedir</name></name> = <name>dir</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Sets the FTP server to send files to.
     *
     * @param server the remote server name.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setServer</name><parameter_list>(<param><decl><type><name>String</name></type> <name>server</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>server</name></name> = <name>server</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Sets the FTP port used by the remote server.
     *
     * @param port the port on which the remote server is listening.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPort</name><parameter_list>(<param><decl><type><name>int</name></type> <name>port</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>port</name></name> = <name>port</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Sets the login user id to use on the specified server.
     *
     * @param userid remote system userid.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUserid</name><parameter_list>(<param><decl><type><name>String</name></type> <name>userid</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>userid</name></name> = <name>userid</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Sets the login password for the given user id.
     *
     * @param password the password on the remote system.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPassword</name><parameter_list>(<param><decl><type><name>String</name></type> <name>password</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>password</name></name> = <name>password</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the login account to use on the specified server.
     *
     * @param pAccount the account name on remote system
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAccount</name><parameter_list>(<param><decl><type><name>String</name></type> <name>pAccount</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>account</name></name> = <name>pAccount</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * If true, uses binary mode, otherwise text mode (default is binary).
     *
     * @param binary if true use binary mode in transfers.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBinary</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>binary</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>binary</name></name> = <name>binary</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Specifies whether to use passive mode. Set to true if you are behind a
     * firewall and cannot connect without it. Passive mode is disabled by
     * default.
     *
     * @param passive true is passive mode should be used.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPassive</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>passive</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>passive</name></name> = <name>passive</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Set to true to receive notification about each file as it is
     * transferred.
     *
     * @param verbose true if verbose notifications are required.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setVerbose</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>verbose</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>verbose</name></name> = <name>verbose</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * A synonym for &lt;tt&gt;depends&lt;/tt&gt;. Set to true to transmit only new
     * or changed files.
     *
     * See the related attributes timediffmillis and timediffauto.
     *
     * @param newer if true only transfer newer files.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setNewer</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>newer</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>newerOnly</name></name> = <name>newer</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * number of milliseconds to add to the time on the remote machine
     * to get the time on the local machine.
     *
     * use in conjunction with &lt;code&gt;newer&lt;/code&gt;
     *
     * @param timeDiffMillis number of milliseconds
     *
     * @since ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTimeDiffMillis</name><parameter_list>(<param><decl><type><name>long</name></type> <name>timeDiffMillis</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>timeDiffMillis</name></name> = <name>timeDiffMillis</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * &amp;quot;true&amp;quot; to find out automatically the time difference
     * between local and remote machine.
     *
     * This requires right to create
     * and delete a temporary file in the remote directory.
     *
     * @param timeDiffAuto true = find automatically the time diff
     *
     * @since ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTimeDiffAuto</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>timeDiffAuto</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>timeDiffAuto</name></name> = <name>timeDiffAuto</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set to true to preserve modification times for "gotten" files.
     *
     * @param preserveLastModified if true preserver modification times.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPreserveLastModified</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>preserveLastModified</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>preserveLastModified</name></name> = <name>preserveLastModified</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Set to true to transmit only files that are new or changed from their
     * remote counterparts. The default is to transmit all files.
     *
     * @param depends if true only transfer newer files.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDepends</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>depends</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>newerOnly</name></name> = <name>depends</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Sets the remote file separator character. This normally defaults to the
     * Unix standard forward slash, but can be manually overridden using this
     * call if the remote server requires some other separator. Only the first
     * character of the string is used.
     *
     * @param separator the file separator on the remote system.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSeparator</name><parameter_list>(<param><decl><type><name>String</name></type> <name>separator</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>remoteFileSep</name> = <name>separator</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Sets the file permission mode (Unix only) for files sent to the
     * server.
     *
     * @param theMode unix style file mode for the files sent to the remote
     *        system.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setChmod</name><parameter_list>(<param><decl><type><name>String</name></type> <name>theMode</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>chmod</name></name> = <name>theMode</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Sets the default mask for file creation on a unix server.
     *
     * @param theUmask unix style umask for files created on the remote server.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUmask</name><parameter_list>(<param><decl><type><name>String</name></type> <name>theUmask</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>umask</name></name> = <name>theUmask</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     *  A set of files to upload or download
     *
     * @param set the set of files to be added to the list of files to be
     *        transferred.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addFileset</name><parameter_list>(<param><decl><type><name>FileSet</name></type> <name>set</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>filesets</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Sets the FTP action to be taken. Currently accepts "put", "get", "del",
     * "mkdir", "chmod", "list", and "site".
     *
     * @deprecated since 1.5.x.
     *             setAction(String) is deprecated and is replaced with
     *      setAction(FTP.Action) to make Ant's Introspection mechanism do the
     *      work and also to encapsulate operations on the type in its own
     *      class.
     * @ant.attribute ignore="true"
     *
     * @param action the FTP action to be performed.
     *
     * @throws BuildException if the action is not a valid action.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAction</name><parameter_list>(<param><decl><type><name>String</name></type> <name>action</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"DEPRECATED - The setAction(String) method has been deprecated."
            + " Use setAction(FTP.Action) instead."</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Action</name></type> <name>a</name> =<init> <expr>new <call><name>Action</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>a</name>.<name>setValue</name></name><argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>action</name></name> = <call><name><name>a</name>.<name>getAction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Sets the FTP action to be taken. Currently accepts "put", "get", "del",
     * "mkdir", "chmod", "list", and "site".
     *
     * @param action the FTP action to be performed.
     *
     * @throws BuildException if the action is not a valid action.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAction</name><parameter_list>(<param><decl><type><name>Action</name></type> <name>action</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>action</name></name> = <call><name><name>action</name>.<name>getAction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * The output file for the "list" action. This attribute is ignored for
     * any other actions.
     *
     * @param listing file in which to store the listing.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setListing</name><parameter_list>(<param><decl><type><name>File</name></type> <name>listing</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>listing</name></name> = <name>listing</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * If true, enables unsuccessful file put, delete and get
     * operations to be skipped with a warning and the remainder
     * of the files still transferred.
     *
     * @param skipFailedTransfers true if failures in transfers are ignored.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSkipFailedTransfers</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>skipFailedTransfers</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>skipFailedTransfers</name></name> = <name>skipFailedTransfers</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * set the flag to skip errors on directory creation.
     * (and maybe later other server specific errors)
     *
     * @param ignoreNoncriticalErrors true if non-critical errors should not
     *        cause a failure.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setIgnoreNoncriticalErrors</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>ignoreNoncriticalErrors</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>ignoreNoncriticalErrors</name></name> = <name>ignoreNoncriticalErrors</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>configurationHasBeenSet</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>isConfigurationSet</name></name> = true</expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the systemTypeKey attribute.
     * Method for setting &lt;code&gt;FTPClientConfig&lt;/code&gt; remote system key.
     *
     * @param systemKey the key to be set - BUT if blank
     * the default value of null (which signifies "autodetect") will be kept.
     * @see org.apache.commons.net.ftp.FTPClientConfig
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSystemTypeKey</name><parameter_list>(<param><decl><type><name>FTPSystemType</name></type> <name>systemKey</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>systemKey</name> != <name>null</name> &amp;&amp; !<call><name><name>systemKey</name>.<name>getValue</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>systemTypeKey</name></name> = <name>systemKey</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>configurationHasBeenSet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the defaultDateFormatConfig attribute.
     * @param defaultDateFormat configuration to be set, unless it is
     * null or empty string, in which case ignored.
     * @see org.apache.commons.net.ftp.FTPClientConfig
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDefaultDateFormatConfig</name><parameter_list>(<param><decl><type><name>String</name></type> <name>defaultDateFormat</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>defaultDateFormat</name> != <name>null</name> &amp;&amp; !<call><name><name>defaultDateFormat</name>.<name>equals</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>defaultDateFormatConfig</name></name> = <name>defaultDateFormat</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>configurationHasBeenSet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the recentDateFormatConfig attribute.
     * @param recentDateFormat configuration to be set, unless it is
     * null or empty string, in which case ignored.
     * @see org.apache.commons.net.ftp.FTPClientConfig
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRecentDateFormatConfig</name><parameter_list>(<param><decl><type><name>String</name></type> <name>recentDateFormat</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>recentDateFormat</name> != <name>null</name> &amp;&amp; !<call><name><name>recentDateFormat</name>.<name>equals</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>recentDateFormatConfig</name></name> = <name>recentDateFormat</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>configurationHasBeenSet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the serverLanguageCode attribute.
     * @param serverLanguageCode configuration to be set, unless it is
     * null or empty string, in which case ignored.
     * @see org.apache.commons.net.ftp.FTPClientConfig
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setServerLanguageCodeConfig</name><parameter_list>(<param><decl><type><name>LanguageCode</name></type> <name>serverLanguageCode</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>serverLanguageCode</name> != <name>null</name> &amp;&amp; !"".<call><name>equals</name><argument_list>(<argument><expr><call><name><name>serverLanguageCode</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>serverLanguageCodeConfig</name></name> = <name>serverLanguageCode</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>configurationHasBeenSet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the serverTimeZoneConfig attribute.
     * @param serverTimeZoneId configuration to be set, unless it is
     * null or empty string, in which case ignored.
     * @see org.apache.commons.net.ftp.FTPClientConfig
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setServerTimeZoneConfig</name><parameter_list>(<param><decl><type><name>String</name></type> <name>serverTimeZoneId</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>serverTimeZoneId</name> != <name>null</name> &amp;&amp; !<call><name><name>serverTimeZoneId</name>.<name>equals</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>serverTimeZoneConfig</name></name> = <name>serverTimeZoneId</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>configurationHasBeenSet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the shortMonthNamesConfig attribute
     *
     * @param shortMonthNames configuration to be set, unless it is
     * null or empty string, in which case ignored.
     * @see org.apache.commons.net.ftp.FTPClientConfig
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setShortMonthNamesConfig</name><parameter_list>(<param><decl><type><name>String</name></type> <name>shortMonthNames</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>shortMonthNames</name> != <name>null</name> &amp;&amp; !<call><name><name>shortMonthNames</name>.<name>equals</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>shortMonthNamesConfig</name></name> = <name>shortMonthNames</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>configurationHasBeenSet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>



    <comment type="javadoc">/**
     * Defines how many times to retry executing FTP command before giving up.
     * Default is 0 - try once and if failure then give up.
     *
     * @param retriesAllowed number of retries to allow.  -1 means
     * keep trying forever. "forever" may also be specified as a
     * synonym for -1.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRetriesAllowed</name><parameter_list>(<param><decl><type><name>String</name></type> <name>retriesAllowed</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr>"FOREVER".<call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><name>retriesAllowed</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>retriesAllowed</name></name> = <name><name>Retryable</name>.<name>RETRY_FOREVER</name></name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <try>try <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>retries</name> =<init> <expr><call><name><name>Integer</name>.<name>parseInt</name></name><argument_list>(<argument><expr><name>retriesAllowed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>retries</name> &lt; <name><name>Retryable</name>.<name>RETRY_FOREVER</name></name></expr>)</condition><then> <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                                             <argument><expr>"Invalid value for retriesAllowed attribute: "
                                             + <name>retriesAllowed</name></expr></argument>)</argument_list></call></expr>;</throw>

                }</block></then></if>
                <expr_stmt><expr><name><name>this</name>.<name>retriesAllowed</name></name> = <name>retries</name></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>NumberFormatException</name></type> <name>px</name></decl></param>) <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                                         <argument><expr>"Invalid value for retriesAllowed attribute: "
                                         + <name>retriesAllowed</name></expr></argument>)</argument_list></call></expr>;</throw>

            }</block></catch></try>

        }</block></else></if>
    }</block></function>
    <comment type="javadoc">/**
     * @return Returns the systemTypeKey.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getSystemTypeKey</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>systemTypeKey</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
    <comment type="javadoc">/**
     * @return Returns the defaultDateFormatConfig.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getDefaultDateFormatConfig</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>defaultDateFormatConfig</name></expr>;</return>
    }</block></function>
    <comment type="javadoc">/**
     * @return Returns the recentDateFormatConfig.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getRecentDateFormatConfig</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>recentDateFormatConfig</name></expr>;</return>
    }</block></function>
    <comment type="javadoc">/**
     * @return Returns the serverLanguageCodeConfig.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getServerLanguageCodeConfig</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>serverLanguageCodeConfig</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
    <comment type="javadoc">/**
     * @return Returns the serverTimeZoneConfig.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getServerTimeZoneConfig</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>serverTimeZoneConfig</name></expr>;</return>
    }</block></function>
    <comment type="javadoc">/**
     * @return Returns the shortMonthNamesConfig.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getShortMonthNamesConfig</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>shortMonthNamesConfig</name></expr>;</return>
    }</block></function>
    <comment type="javadoc">/**
     * @return Returns the timestampGranularity.
     */</comment>
    <function><type><name>Granularity</name></type> <name>getTimestampGranularity</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>timestampGranularity</name></expr>;</return>
    }</block></function>
    <comment type="javadoc">/**
     * Sets the timestampGranularity attribute
     * @param timestampGranularity The timestampGranularity to set.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTimestampGranularity</name><parameter_list>(<param><decl><type><name>Granularity</name></type> <name>timestampGranularity</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>null</name> == <name>timestampGranularity</name> || "".<call><name>equals</name><argument_list>(<argument><expr><call><name><name>timestampGranularity</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>timestampGranularity</name></name> = <name>timestampGranularity</name></expr>;</expr_stmt>
    }</block></function>
    <comment type="javadoc">/**
     * Sets the siteCommand attribute.  This attribute
     * names the command that will be executed if the action
     * is "site".
     * @param siteCommand The siteCommand to set.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSiteCommand</name><parameter_list>(<param><decl><type><name>String</name></type> <name>siteCommand</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>siteCommand</name></name> = <name>siteCommand</name></expr>;</expr_stmt>
    }</block></function>
    <comment type="javadoc">/**
     * Sets the initialSiteCommand attribute.  This attribute
     * names a site command that will be executed immediately
     * after connection.
     * @param initialCommand The initialSiteCommand to set.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setInitialSiteCommand</name><parameter_list>(<param><decl><type><name>String</name></type> <name>initialCommand</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>initialSiteCommand</name></name> = <name>initialCommand</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Whether to verify that data and control connections are
     * connected to the same remote host.
     *
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setEnableRemoteVerification</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>enableRemoteVerification</name> = <name>b</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Checks to see that all required parameters are set.
     *
     * @throws BuildException if the configuration is not valid.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>checkAttributes</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>server</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"server attribute must be set!"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>userid</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"userid attribute must be set!"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>password</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"password attribute must be set!"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr>(<name>action</name> == <name>LIST_FILES</name>) &amp;&amp; (<name>listing</name> == <name>null</name>)</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"listing attribute must be set for list "
                                     + "action!"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr><name>action</name> == <name>MK_DIR</name> &amp;&amp; <name>remotedir</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"remotedir attribute must be set for "
                                     + "mkdir action!"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr><name>action</name> == <name>CHMOD</name> &amp;&amp; <name>chmod</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"chmod attribute must be set for chmod "
                                     + "action!"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>action</name> == <name>SITE_CMD</name> &amp;&amp; <name>siteCommand</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"sitecommand attribute must be set for site "
                                     + "action!"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>


        <if>if <condition>(<expr><name><name>this</name>.<name>isConfigurationSet</name></name></expr>)</condition><then> <block>{
            <try>try <block>{
                <expr_stmt><expr><call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr>"org.apache.commons.net.ftp.FTPClientConfig"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>ClassNotFoundException</name></type> <name>e</name></decl></param>) <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                                         <argument><expr>"commons-net.jar &gt;= 1.4.0 is required for at least one"
                                         + " of the attributes specified."</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Executable a retryable object.
     * @param h the retry handler.
     * @param r the object that should be retried until it succeeds
     *          or the number of retrys is reached.
     * @param descr a description of the command that is being run.
     * @throws IOException if there is a problem.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>executeRetryable</name><parameter_list>(<param><decl><type><name>RetryHandler</name></type> <name>h</name></decl></param>, <param><decl><type><name>Retryable</name></type> <name>r</name></decl></param>, <param><decl><type><name>String</name></type> <name>descr</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>h</name>.<name>execute</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * For each file in the fileset, do the appropriate action: send, get,
     * delete, or list.
     *
     * @param ftp the FTPClient instance used to perform FTP actions
     * @param fs the fileset on which the actions are performed.
     *
     * @return the number of files to be transferred.
     *
     * @throws IOException if there is a problem reading a file
     * @throws BuildException if there is a problem in the configuration.
     */</comment>
    <function><type><specifier>protected</specifier> <name>int</name></type> <name>transferFiles</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>FTPClient</name></type> <name>ftp</name></decl></param>, <param><decl><type><name>FileSet</name></type> <name>fs</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>DirectoryScanner</name></type> <name>ds</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>action</name> == <name>SEND_FILES</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>ds</name> = <call><name><name>fs</name>.<name>getDirectoryScanner</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>ds</name> = new <call><name>FTPDirectoryScanner</name><argument_list>(<argument><expr><name>ftp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>fs</name>.<name>setupDirectoryScanner</name></name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ds</name>.<name>setFollowSymlinks</name></name><argument_list>(<argument><expr><call><name><name>fs</name>.<name>isFollowSymlinks</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ds</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>dsfiles</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>action</name> == <name>RM_DIR</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>dsfiles</name> = <call><name><name>ds</name>.<name>getIncludedDirectories</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>dsfiles</name> = <call><name><name>ds</name>.<name>getIncludedFiles</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <decl_stmt><decl><type><name>String</name></type> <name>dir</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr>(<call><name><name>ds</name>.<name>getBasedir</name></name><argument_list>()</argument_list></call> == <name>null</name>)
            &amp;&amp; ((<name>action</name> == <name>SEND_FILES</name>) || (<name>action</name> == <name>GET_FILES</name>))</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"the dir attribute must be set for send "
                                     + "and get actions"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then> <else>else <block>{
            <if>if <condition>(<expr>(<name>action</name> == <name>SEND_FILES</name>) || (<name>action</name> == <name>GET_FILES</name>)</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>dir</name> = <call><name><name>ds</name>.<name>getBasedir</name></name><argument_list>()</argument_list></call>.<call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></else></if>

        <comment type="line">// If we are doing a listing, we need the output stream created now.</comment>
        <decl_stmt><decl><type><name>BufferedWriter</name></type> <name>bw</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

        <try>try <block>{
            <if>if <condition>(<expr><name>action</name> == <name>LIST_FILES</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>File</name></type> <name>pd</name> =<init> <expr><call><name><name>listing</name>.<name>getParentFile</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <if>if <condition>(<expr>!<call><name><name>pd</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>pd</name>.<name>mkdirs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name>bw</name> = new <call><name>BufferedWriter</name><argument_list>(<argument><expr>new <call><name>FileWriter</name><argument_list>(<argument><expr><name>listing</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <decl_stmt><decl><type><name>RetryHandler</name></type> <name>h</name> =<init> <expr>new <call><name>RetryHandler</name><argument_list>(<argument><expr><name><name>this</name>.<name>retriesAllowed</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>action</name> == <name>RM_DIR</name></expr>)</condition><then> <block>{
                <comment type="line">// to remove directories, start by the end of the list</comment>
                <comment type="line">// the trunk does not let itself be removed before the leaves</comment>
                <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr><name><name>dsfiles</name>.<name>length</name></name> - 1</expr></init></decl>;</init> <condition><expr><name>i</name> &gt;= 0</expr>;</condition> <incr><expr><name>i</name>--</expr></incr>) <block>{
                    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>dsfile</name> =<init> <expr><name><name>dsfiles</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>executeRetryable</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr>new <class><super><name>Retryable</name></super><argument_list>()</argument_list> <block>{
                            <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
                                <expr_stmt><expr><call><name>rmDir</name><argument_list>(<argument><expr><name>ftp</name></expr></argument>, <argument><expr><name>dsfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></function>
                        }</block></class></expr></argument>, <argument><expr><name>dsfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
            }</block></then> <else>else <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>BufferedWriter</name></type> <name>fbw</name> =<init> <expr><name>bw</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>fdir</name> =<init> <expr><name>dir</name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name><name>this</name>.<name>newerOnly</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>this</name>.<name>granularityMillis</name></name> =
                        <call><name><name>this</name>.<name>timestampGranularity</name>.<name>getMilliseconds</name></name><argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>dsfiles</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>dsfile</name> =<init> <expr><name><name>dsfiles</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>executeRetryable</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr>new <class><super><name>Retryable</name></super><argument_list>()</argument_list> <block>{
                            <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
                                <switch>switch <condition>(<expr><name>action</name></expr>)</condition> <block>{
                                <case>case <expr><name>SEND_FILES</name></expr>:
                                    <expr_stmt><expr><call><name>sendFile</name><argument_list>(<argument><expr><name>ftp</name></expr></argument>, <argument><expr><name>fdir</name></expr></argument>, <argument><expr><name>dsfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    <break>break;</break>
                                </case><case>case <expr><name>GET_FILES</name></expr>:
                                    <expr_stmt><expr><call><name>getFile</name><argument_list>(<argument><expr><name>ftp</name></expr></argument>, <argument><expr><name>fdir</name></expr></argument>, <argument><expr><name>dsfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    <break>break;</break>
                                </case><case>case <expr><name>DEL_FILES</name></expr>:
                                    <expr_stmt><expr><call><name>delFile</name><argument_list>(<argument><expr><name>ftp</name></expr></argument>, <argument><expr><name>dsfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    <break>break;</break>
                                </case><case>case <expr><name>LIST_FILES</name></expr>:
                                    <expr_stmt><expr><call><name>listFile</name><argument_list>(<argument><expr><name>ftp</name></expr></argument>, <argument><expr><name>fbw</name></expr></argument>, <argument><expr><name>dsfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    <break>break;</break>
                                </case><case>case <expr><name>CHMOD</name></expr>:
                                    <expr_stmt><expr><call><name>doSiteCommand</name><argument_list>(<argument><expr><name>ftp</name></expr></argument>, <argument><expr>"chmod " + <name>chmod</name>
                                                  + " " + <call><name>resolveFile</name><argument_list>(<argument><expr><name>dsfile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    <expr_stmt><expr><name>transferred</name>++</expr>;</expr_stmt>
                                    <break>break;</break>
                                </case><default>default:
                                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"unknown ftp action " + <name>action</name></expr></argument>)</argument_list></call></expr>;</throw>
                                </default>}</block></switch>
                            }</block></function>
                        }</block></class></expr></argument>, <argument><expr><name>dsfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
            }</block></else></if>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>bw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>

        <return>return <expr><name><name>dsfiles</name>.<name>length</name></name></expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     * Sends all files specified by the configured filesets to the remote
     * server.
     *
     * @param ftp the FTPClient instance used to perform FTP actions
     *
     * @throws IOException if there is a problem reading a file
     * @throws BuildException if there is a problem in the configuration.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>transferFiles</name><parameter_list>(<param><decl><type><name>FTPClient</name></type> <name>ftp</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><name>transferred</name> = 0</expr>;</expr_stmt>
        <expr_stmt><expr><name>skipped</name> = 0</expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name><name>filesets</name>.<name>size</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"at least one fileset must be specified."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then> <else>else <block>{
            <comment type="line">// get files from filesets</comment>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>size</name> =<init> <expr><call><name><name>filesets</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>size</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>FileSet</name></type> <name>fs</name> =<init> <expr>(<name>FileSet</name>) <call><name><name>filesets</name>.<name>elementAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if>if <condition>(<expr><name>fs</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>transferFiles</name><argument_list>(<argument><expr><name>ftp</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
        }</block></else></if>

        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>transferred</name> + " " + <name><name>ACTION_TARGET_STRS</name><index>[<expr><name>action</name></expr>]</index></name> + " "
            + <name><name>COMPLETED_ACTION_STRS</name><index>[<expr><name>action</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>skipped</name> != 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>skipped</name> + " " + <name><name>ACTION_TARGET_STRS</name><index>[<expr><name>action</name></expr>]</index></name>
                + " were not successfully " + <name><name>COMPLETED_ACTION_STRS</name><index>[<expr><name>action</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>


    <comment type="javadoc">/**
     * Correct a file path to correspond to the remote host requirements. This
     * implementation currently assumes that the remote end can handle
     * Unix-style paths with forward-slash separators. This can be overridden
     * with the &lt;code&gt;separator&lt;/code&gt; task parameter. No attempt is made to
     * determine what syntax is appropriate for the remote host.
     *
     * @param file the remote file name to be resolved
     *
     * @return the filename as it will appear on the server.
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>resolveFile</name><parameter_list>(<param><decl><type><name>String</name></type> <name>file</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>file</name>.<name>replace</name></name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"file.separator"</expr></argument>)</argument_list></call>.<call><name>charAt</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><call><name><name>remoteFileSep</name>.<name>charAt</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     * Creates all parent directories specified in a complete relative
     * pathname. Attempts to create existing directories will not cause
     * errors.
     *
     * @param ftp the FTP client instance to use to execute FTP actions on
     *        the remote server.
     * @param filename the name of the file whose parents should be created.
     * @throws IOException under non documented circumstances
     * @throws BuildException if it is impossible to cd to a remote directory
     *
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>createParents</name><parameter_list>(<param><decl><type><name>FTPClient</name></type> <name>ftp</name></decl></param>, <param><decl><type><name>String</name></type> <name>filename</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>BuildException</name></expr></argument></throws> <block>{

        <decl_stmt><decl><type><name>File</name></type> <name>dir</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>dirCache</name>.<name>contains</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>Vector</name></type> <name>parents</name> =<init> <expr>new <call><name>Vector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>dirname</name></decl>;</decl_stmt>

        <while>while <condition>(<expr>(<name>dirname</name> = <call><name><name>dir</name>.<name>getParent</name></name><argument_list>()</argument_list></call>) != <name>null</name></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>File</name></type> <name>checkDir</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name>dirname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>dirCache</name>.<name>contains</name></name><argument_list>(<argument><expr><name>checkDir</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <break>break;</break>
            }</block></then></if>
            <expr_stmt><expr><name>dir</name> = <name>checkDir</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>parents</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>

        <comment type="line">// find first non cached dir</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> =<init> <expr><call><name><name>parents</name>.<name>size</name></name><argument_list>()</argument_list></call> - 1</expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>i</name> &gt;= 0</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>cwd</name> =<init> <expr><call><name><name>ftp</name>.<name>printWorkingDirectory</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>parent</name> =<init> <expr><call><name><name>dir</name>.<name>getParent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>parent</name> != <name>null</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr>!<call><name><name>ftp</name>.<name>changeWorkingDirectory</name></name><argument_list>(<argument><expr><call><name>resolveFile</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"could not change to "
                                             + "directory: " + <call><name><name>ftp</name>.<name>getReplyString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if>
            }</block></then></if>

            <while>while <condition>(<expr><name>i</name> &gt;= 0</expr>)</condition> <block>{
                <expr_stmt><expr><name>dir</name> = (<name>File</name>) <call><name><name>parents</name>.<name>elementAt</name></name><argument_list>(<argument><expr><name>i</name>--</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// check if dir exists by trying to change into it.</comment>
                <if>if <condition>(<expr>!<call><name><name>ftp</name>.<name>changeWorkingDirectory</name></name><argument_list>(<argument><expr><call><name><name>dir</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <comment type="line">// could not change to it - try to create it</comment>
                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"creating remote directory "
                        + <call><name>resolveFile</name><argument_list>(<argument><expr><call><name><name>dir</name>.<name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr>!<call><name><name>ftp</name>.<name>makeDirectory</name></name><argument_list>(<argument><expr><call><name><name>dir</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>handleMkDirFailure</name><argument_list>(<argument><expr><name>ftp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <if>if <condition>(<expr>!<call><name><name>ftp</name>.<name>changeWorkingDirectory</name></name><argument_list>(<argument><expr><call><name><name>dir</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"could not change to "
                                                 + "directory: " + <call><name><name>ftp</name>.<name>getReplyString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                    }</block></then></if>
                }</block></then></if>
                <expr_stmt><expr><call><name><name>dirCache</name>.<name>add</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
            <expr_stmt><expr><call><name><name>ftp</name>.<name>changeWorkingDirectory</name></name><argument_list>(<argument><expr><name>cwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>
    <comment type="javadoc">/**
     * auto find the time difference between local and remote
     * @param ftp handle to ftp client
     * @return number of millis to add to remote time to make it comparable to local time
     * @since ant 1.6
     */</comment>
    <function><type><specifier>private</specifier> <name>long</name></type> <name>getTimeDiff</name><parameter_list>(<param><decl><type><name>FTPClient</name></type> <name>ftp</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>long</name></type> <name>returnValue</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>tempFile</name> =<init> <expr><call><name>findFileName</name><argument_list>(<argument><expr><name>ftp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <comment type="line">// create a local temporary file</comment>
            <expr_stmt><expr><call><name><name>FILE_UTILS</name>.<name>createNewFile</name></name><argument_list>(<argument><expr><name>tempFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>localTimeStamp</name> =<init> <expr><call><name><name>tempFile</name>.<name>lastModified</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>BufferedInputStream</name></type> <name>instream</name> =<init> <expr>new <call><name>BufferedInputStream</name><argument_list>(<argument><expr>new <call><name>FileInputStream</name><argument_list>(<argument><expr><name>tempFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>ftp</name>.<name>storeFile</name></name><argument_list>(<argument><expr><call><name><name>tempFile</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>instream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>instream</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>success</name> =<init> <expr><call><name><name>FTPReply</name>.<name>isPositiveCompletion</name></name><argument_list>(<argument><expr><call><name><name>ftp</name>.<name>getReplyCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>success</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>FTPFile</name> <index>[]</index></type> <name>ftpFiles</name> =<init> <expr><call><name><name>ftp</name>.<name>listFiles</name></name><argument_list>(<argument><expr><call><name><name>tempFile</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name><name>ftpFiles</name>.<name>length</name></name> == 1</expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>long</name></type> <name>remoteTimeStamp</name> =<init> <expr><name><name>ftpFiles</name><index>[<expr>0</expr>]</index></name>.<call><name>getTimestamp</name><argument_list>()</argument_list></call>.<call><name>getTime</name><argument_list>()</argument_list></call>.<call><name>getTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>returnValue</name> = <name>localTimeStamp</name> - <name>remoteTimeStamp</name></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><call><name><name>ftp</name>.<name>deleteFile</name></name><argument_list>(<argument><expr><name><name>ftpFiles</name><index>[<expr>0</expr>]</index></name>.<call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <comment type="line">// delegate the deletion of the local temp file to the delete task</comment>
            <comment type="line">// because of race conditions occuring on Windows</comment>
            <decl_stmt><decl><type><name>Delete</name></type> <name>mydelete</name> =<init> <expr>new <call><name>Delete</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>mydelete</name>.<name>bindToOwner</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mydelete</name>.<name>setFile</name></name><argument_list>(<argument><expr><call><name><name>tempFile</name>.<name>getCanonicalFile</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mydelete</name>.<name>execute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
        <return>return <expr><name>returnValue</name></expr>;</return>
    }</block></function>
    <comment type="javadoc">/**
     *  find a suitable name for local and remote temporary file
     */</comment>
    <function><type><specifier>private</specifier> <name>File</name></type> <name>findFileName</name><parameter_list>(<param><decl><type><name>FTPClient</name></type> <name>ftp</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>FTPFile</name> <index>[]</index></type> <name>theFiles</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>maxIterations</name> =<init> <expr>1000</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>counter</name> =<init> <expr>1</expr></init></decl>;</init> <condition><expr><name>counter</name> &lt; <name>maxIterations</name></expr>;</condition> <incr><expr><name>counter</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>File</name></type> <name>localFile</name> =<init> <expr><call><name><name>FILE_UTILS</name>.<name>createTempFile</name></name><argument_list>(
                                                       <argument><expr>"ant" + <call><name><name>Integer</name>.<name>toString</name></name><argument_list>(<argument><expr><name>counter</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>".tmp"</expr></argument>,
                                                       <argument><expr><name>null</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>fileName</name> =<init> <expr><call><name><name>localFile</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>found</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
            <try>try <block>{
                <if>if <condition>(<expr><name>theFiles</name> == <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>theFiles</name> = <call><name><name>ftp</name>.<name>listFiles</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <for>for (<init><decl><type><name>int</name></type> <name>counter2</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>counter2</name> &lt; <name><name>theFiles</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>counter2</name>++</expr></incr>) <block>{
                    <if>if <condition>(<expr><name><name>theFiles</name><index>[<expr><name>counter2</name></expr>]</index></name> != <name>null</name>
                        &amp;&amp; <name><name>theFiles</name><index>[<expr><name>counter2</name></expr>]</index></name>.<call><name>getName</name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>found</name> = true</expr>;</expr_stmt>
                        <break>break;</break>
                    }</block></then></if>
                }</block></for>
            }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ioe</name></decl></param>) <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>ioe</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
            <if>if <condition>(<expr>!<name>found</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>localFile</name>.<name>deleteOnExit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>localFile</name></expr>;</return>
            }</block></then></if>
        }</block></for>
        <return>return <expr><name>null</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Checks to see if the remote file is current as compared with the local
     * file. Returns true if the target file is up to date.
     * @param ftp ftpclient
     * @param localFile local file
     * @param remoteFile remote file
     * @return true if the target file is up to date
     * @throws IOException  in unknown circumstances
     * @throws BuildException if the date of the remote files cannot be found and the action is
     * GET_FILES
     */</comment>
    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>isUpToDate</name><parameter_list>(<param><decl><type><name>FTPClient</name></type> <name>ftp</name></decl></param>, <param><decl><type><name>File</name></type> <name>localFile</name></decl></param>,
                                 <param><decl><type><name>String</name></type> <name>remoteFile</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"checking date for " + <name>remoteFile</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>FTPFile</name><index>[]</index></type> <name>files</name> =<init> <expr><call><name><name>ftp</name>.<name>listFiles</name></name><argument_list>(<argument><expr><name>remoteFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// For Microsoft's Ftp-Service an Array with length 0 is</comment>
        <comment type="line">// returned if configured to return listings in "MS-DOS"-Format</comment>
        <if>if <condition>(<expr><name>files</name> == <name>null</name> || <name><name>files</name>.<name>length</name></name> == 0</expr>)</condition><then> <block>{
            <comment type="line">// If we are sending files, then assume out of date.</comment>
            <comment type="line">// If we are getting files, then throw an error</comment>

            <if>if <condition>(<expr><name>action</name> == <name>SEND_FILES</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Could not date test remote file: " + <name>remoteFile</name>
                    + "assuming out of date."</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr>false</expr>;</return>
            }</block></then> <else>else <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"could not date test remote file: "
                                         + <call><name><name>ftp</name>.<name>getReplyString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></else></if>
        }</block></then></if>

        <decl_stmt><decl><type><name>long</name></type> <name>remoteTimestamp</name> =<init> <expr><name><name>files</name><index>[<expr>0</expr>]</index></name>.<call><name>getTimestamp</name><argument_list>()</argument_list></call>.<call><name>getTime</name><argument_list>()</argument_list></call>.<call><name>getTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>localTimestamp</name> =<init> <expr><call><name><name>localFile</name>.<name>lastModified</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>adjustedRemoteTimestamp</name> =<init>
            <expr><name>remoteTimestamp</name> + <name><name>this</name>.<name>timeDiffMillis</name></name> + <name><name>this</name>.<name>granularityMillis</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>msg</name></decl>;</decl_stmt>
        <synchronized>synchronized(<expr><name>TIMESTAMP_LOGGING_SDF</name></expr>) <block>{
            <expr_stmt><expr><name>msg</name> = new <call><name>StringBuffer</name><argument_list>(<argument><expr>"   ["</expr></argument>)</argument_list></call>
                .<call><name>append</name><argument_list>(<argument><expr><call><name><name>TIMESTAMP_LOGGING_SDF</name>.<name>format</name></name><argument_list>(<argument><expr>new <call><name>Date</name><argument_list>(<argument><expr><name>localTimestamp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                .<call><name>append</name><argument_list>(<argument><expr>"] local"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></synchronized>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><call><name><name>msg</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <synchronized>synchronized(<expr><name>TIMESTAMP_LOGGING_SDF</name></expr>) <block>{
            <expr_stmt><expr><name>msg</name> = new <call><name>StringBuffer</name><argument_list>(<argument><expr>"   ["</expr></argument>)</argument_list></call>
                .<call><name>append</name><argument_list>(<argument><expr><call><name><name>TIMESTAMP_LOGGING_SDF</name>.<name>format</name></name><argument_list>(<argument><expr>new <call><name>Date</name><argument_list>(<argument><expr><name>adjustedRemoteTimestamp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                .<call><name>append</name><argument_list>(<argument><expr>"] remote"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></synchronized>
        <if>if <condition>(<expr><name>remoteTimestamp</name> != <name>adjustedRemoteTimestamp</name></expr>)</condition><then> <block>{
            <synchronized>synchronized(<expr><name>TIMESTAMP_LOGGING_SDF</name></expr>) <block>{
                <expr_stmt><expr><call><name><name>msg</name>.<name>append</name></name><argument_list>(<argument><expr>" - (raw: "</expr></argument>)</argument_list></call>
                    .<call><name>append</name><argument_list>(<argument><expr><call><name><name>TIMESTAMP_LOGGING_SDF</name>.<name>format</name></name><argument_list>(<argument><expr>new <call><name>Date</name><argument_list>(<argument><expr><name>remoteTimestamp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                    .<call><name>append</name><argument_list>(<argument><expr>")"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></synchronized>
        }</block></then></if>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><call><name><name>msg</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if>if <condition>(<expr><name><name>this</name>.<name>action</name></name> == <name>SEND_FILES</name></expr>)</condition><then> <block>{
            <return>return <expr><name>adjustedRemoteTimestamp</name> &gt;= <name>localTimestamp</name></expr>;</return>
        }</block></then> <else>else <block>{
            <return>return <expr><name>localTimestamp</name> &gt;= <name>adjustedRemoteTimestamp</name></expr>;</return>
        }</block></else></if>
    }</block></function>


    <comment type="javadoc">/**
     * Sends a site command to the ftp server
     * @param ftp ftp client
     * @param theCMD command to execute
     * @throws IOException  in unknown circumstances
     * @throws BuildException in unknown circumstances
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>doSiteCommand</name><parameter_list>(<param><decl><type><name>FTPClient</name></type> <name>ftp</name></decl></param>, <param><decl><type><name>String</name></type> <name>theCMD</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>rc</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>myReply</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Doing Site Command: " + <name>theCMD</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>rc</name> = <call><name><name>ftp</name>.<name>sendSiteCommand</name></name><argument_list>(<argument><expr><name>theCMD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr>!<name>rc</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Failed to issue Site Command: " + <name>theCMD</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{

            <expr_stmt><expr><name>myReply</name> = <call><name><name>ftp</name>.<name>getReplyStrings</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <for>for (<init><decl><type><name>int</name></type> <name>x</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>x</name> &lt; <name><name>myReply</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>x</name>++</expr></incr>) <block>{
                <if>if <condition>(<expr><name><name>myReply</name><index>[<expr><name>x</name></expr>]</index></name> != <name>null</name> &amp;&amp; <name><name>myReply</name><index>[<expr><name>x</name></expr>]</index></name>.<call><name>indexOf</name><argument_list>(<argument><expr>"200"</expr></argument>)</argument_list></call> == -1</expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name><name>myReply</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
        }</block></else></if>
    }</block></function>


    <comment type="javadoc">/**
     * Sends a single file to the remote host. &lt;code&gt;filename&lt;/code&gt; may
     * contain a relative path specification. When this is the case, &lt;code&gt;sendFile&lt;/code&gt;
     * will attempt to create any necessary parent directories before sending
     * the file. The file will then be sent using the entire relative path
     * spec - no attempt is made to change directories. It is anticipated that
     * this may eventually cause problems with some FTP servers, but it
     * simplifies the coding.
     * @param ftp ftp client
     * @param dir base directory of the file to be sent (local)
     * @param filename relative path of the file to be send
     *        locally relative to dir
     *        remotely relative to the remotedir attribute
     * @throws IOException  in unknown circumstances
     * @throws BuildException in unknown circumstances
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>sendFile</name><parameter_list>(<param><decl><type><name>FTPClient</name></type> <name>ftp</name></decl></param>, <param><decl><type><name>String</name></type> <name>dir</name></decl></param>, <param><decl><type><name>String</name></type> <name>filename</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>InputStream</name></type> <name>instream</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

        <try>try <block>{
            <comment type="line">// TODO - why not simply new File(dir, filename)?</comment>
            <decl_stmt><decl><type><name>File</name></type> <name>file</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>resolveFile</name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>newerOnly</name> &amp;&amp; <call><name>isUpToDate</name><argument_list>(<argument><expr><name>ftp</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><call><name>resolveFile</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return;</return>
            }</block></then></if>

            <if>if <condition>(<expr><name>verbose</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"transferring " + <call><name><name>file</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><name>instream</name> = new <call><name>BufferedInputStream</name><argument_list>(<argument><expr>new <call><name>FileInputStream</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>createParents</name><argument_list>(<argument><expr><name>ftp</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>ftp</name>.<name>storeFile</name></name><argument_list>(<argument><expr><call><name>resolveFile</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>instream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>boolean</name></type> <name>success</name> =<init> <expr><call><name><name>FTPReply</name>.<name>isPositiveCompletion</name></name><argument_list>(<argument><expr><call><name><name>ftp</name>.<name>getReplyCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr>!<name>success</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>s</name> =<init> <expr>"could not put file: " + <call><name><name>ftp</name>.<name>getReplyString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <if>if <condition>(<expr><name>skipFailedTransfers</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>skipped</name>++</expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></else></if>

            }</block></then> <else>else <block>{
                <comment type="line">// see if we should issue a chmod command</comment>
                <if>if <condition>(<expr><name>chmod</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>doSiteCommand</name><argument_list>(<argument><expr><name>ftp</name></expr></argument>, <argument><expr>"chmod " + <name>chmod</name> + " " + <call><name>resolveFile</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"File " + <call><name><name>file</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call> + " copied to " + <name>server</name></expr></argument>,
                    <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>transferred</name>++</expr>;</expr_stmt>
            }</block></else></if>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>instream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>


    <comment type="javadoc">/**
     * Delete a file from the remote host.
     * @param ftp ftp client
     * @param filename file to delete
     * @throws IOException  in unknown circumstances
     * @throws BuildException if skipFailedTransfers is set to false
     * and the deletion could not be done
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>delFile</name><parameter_list>(<param><decl><type><name>FTPClient</name></type> <name>ftp</name></decl></param>, <param><decl><type><name>String</name></type> <name>filename</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>verbose</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"deleting " + <name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr>!<call><name><name>ftp</name>.<name>deleteFile</name></name><argument_list>(<argument><expr><call><name>resolveFile</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>s</name> =<init> <expr>"could not delete file: " + <call><name><name>ftp</name>.<name>getReplyString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>skipFailedTransfers</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>skipped</name>++</expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></else></if>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"File " + <name>filename</name> + " deleted from " + <name>server</name></expr></argument>,
                <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>transferred</name>++</expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Delete a directory, if empty, from the remote host.
     * @param ftp ftp client
     * @param dirname directory to delete
     * @throws IOException  in unknown circumstances
     * @throws BuildException if skipFailedTransfers is set to false
     * and the deletion could not be done
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>rmDir</name><parameter_list>(<param><decl><type><name>FTPClient</name></type> <name>ftp</name></decl></param>, <param><decl><type><name>String</name></type> <name>dirname</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>verbose</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"removing " + <name>dirname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr>!<call><name><name>ftp</name>.<name>removeDirectory</name></name><argument_list>(<argument><expr><call><name>resolveFile</name><argument_list>(<argument><expr><name>dirname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>s</name> =<init> <expr>"could not remove directory: " + <call><name><name>ftp</name>.<name>getReplyString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>skipFailedTransfers</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>skipped</name>++</expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></else></if>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Directory " + <name>dirname</name> + " removed from " + <name>server</name></expr></argument>,
                <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>transferred</name>++</expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>


    <comment type="javadoc">/**
     * Retrieve a single file from the remote host. &lt;code&gt;filename&lt;/code&gt; may
     * contain a relative path specification. &lt;p&gt;
     *
     * The file will then be retrieved using the entire relative path spec -
     * no attempt is made to change directories. It is anticipated that this
     * may eventually cause problems with some FTP servers, but it simplifies
     * the coding.&lt;/p&gt;
     * @param ftp the ftp client
     * @param dir local base directory to which the file should go back
     * @param filename relative path of the file based upon the ftp remote directory
     *        and/or the local base directory (dir)
     * @throws IOException  in unknown circumstances
     * @throws BuildException if skipFailedTransfers is false
     * and the file cannot be retrieved.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>getFile</name><parameter_list>(<param><decl><type><name>FTPClient</name></type> <name>ftp</name></decl></param>, <param><decl><type><name>String</name></type> <name>dir</name></decl></param>, <param><decl><type><name>String</name></type> <name>filename</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>OutputStream</name></type> <name>outstream</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <decl_stmt><decl><type><name>File</name></type> <name>file</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>resolveFile</name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>newerOnly</name> &amp;&amp; <call><name>isUpToDate</name><argument_list>(<argument><expr><name>ftp</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><call><name>resolveFile</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return;</return>
            }</block></then></if>

            <if>if <condition>(<expr><name>verbose</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"transferring " + <name>filename</name> + " to "
                    + <call><name><name>file</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <decl_stmt><decl><type><name>File</name></type> <name>pdir</name> =<init> <expr><call><name><name>file</name>.<name>getParentFile</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr>!<call><name><name>pdir</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>pdir</name>.<name>mkdirs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>outstream</name> = new <call><name>BufferedOutputStream</name><argument_list>(<argument><expr>new <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ftp</name>.<name>retrieveFile</name></name><argument_list>(<argument><expr><call><name>resolveFile</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>outstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr>!<call><name><name>FTPReply</name>.<name>isPositiveCompletion</name></name><argument_list>(<argument><expr><call><name><name>ftp</name>.<name>getReplyCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>s</name> =<init> <expr>"could not get file: " + <call><name><name>ftp</name>.<name>getReplyString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <if>if <condition>(<expr><name>skipFailedTransfers</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>skipped</name>++</expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></else></if>

            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"File " + <call><name><name>file</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call> + " copied from "
                    + <name>server</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>transferred</name>++</expr>;</expr_stmt>
                <if>if <condition>(<expr><name>preserveLastModified</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>outstream</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>outstream</name> = <name>null</name></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>FTPFile</name><index>[]</index></type> <name>remote</name> =<init> <expr><call><name><name>ftp</name>.<name>listFiles</name></name><argument_list>(<argument><expr><call><name>resolveFile</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name><name>remote</name>.<name>length</name></name> &gt; 0</expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>FILE_UTILS</name>.<name>setFileLastModified</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>,
                                                       <argument><expr><name><name>remote</name><index>[<expr>0</expr>]</index></name>.<call><name>getTimestamp</name><argument_list>()</argument_list></call>
                                                       .<call><name>getTime</name><argument_list>()</argument_list></call>.<call><name>getTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then></if>
            }</block></else></if>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>outstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>


    <comment type="javadoc">/**
     * List information about a single file from the remote host. &lt;code&gt;filename&lt;/code&gt;
     * may contain a relative path specification. &lt;p&gt;
     *
     * The file listing will then be retrieved using the entire relative path
     * spec - no attempt is made to change directories. It is anticipated that
     * this may eventually cause problems with some FTP servers, but it
     * simplifies the coding.&lt;/p&gt;
     * @param ftp ftp client
     * @param bw buffered writer
     * @param filename the directory one wants to list
     * @throws IOException  in unknown circumstances
     * @throws BuildException in unknown circumstances
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>listFile</name><parameter_list>(<param><decl><type><name>FTPClient</name></type> <name>ftp</name></decl></param>, <param><decl><type><name>BufferedWriter</name></type> <name>bw</name></decl></param>, <param><decl><type><name>String</name></type> <name>filename</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>verbose</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"listing " + <name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>FTPFile</name><index>[]</index></type> <name>ftpfiles</name> =<init> <expr><call><name><name>ftp</name>.<name>listFiles</name></name><argument_list>(<argument><expr><call><name>resolveFile</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>ftpfiles</name> != <name>null</name> &amp;&amp; <name><name>ftpfiles</name>.<name>length</name></name> &gt; 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>bw</name>.<name>write</name></name><argument_list>(<argument><expr><name><name>ftpfiles</name><index>[<expr>0</expr>]</index></name>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>bw</name>.<name>newLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>transferred</name>++</expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>


    <comment type="javadoc">/**
     * Create the specified directory on the remote host.
     *
     * @param ftp The FTP client connection
     * @param dir The directory to create (format must be correct for host
     *      type)
     * @throws IOException  in unknown circumstances
     * @throws BuildException if ignoreNoncriticalErrors has not been set to true
     *         and a directory could not be created, for instance because it was
     *         already existing. Precisely, the codes 521, 550 and 553 will trigger
     *         a BuildException
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>makeRemoteDir</name><parameter_list>(<param><decl><type><name>FTPClient</name></type> <name>ftp</name></decl></param>, <param><decl><type><name>String</name></type> <name>dir</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>workingDirectory</name> =<init> <expr><call><name><name>ftp</name>.<name>printWorkingDirectory</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>verbose</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name><name>dir</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"/"</expr></argument>)</argument_list></call> == 0 || <name>workingDirectory</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Creating directory: " + <name>dir</name> + " in /"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Creating directory: " + <name>dir</name> + " in " + <name>workingDirectory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>dir</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"/"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>ftp</name>.<name>changeWorkingDirectory</name></name><argument_list>(<argument><expr>"/"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>String</name></type> <name>subdir</name> =<init> <expr>""</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>StringTokenizer</name></type> <name>st</name> =<init> <expr>new <call><name>StringTokenizer</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr>"/"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>st</name>.<name>hasMoreTokens</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <expr_stmt><expr><name>subdir</name> = <call><name><name>st</name>.<name>nextToken</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Checking " + <name>subdir</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<call><name><name>ftp</name>.<name>changeWorkingDirectory</name></name><argument_list>(<argument><expr><name>subdir</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr>!<call><name><name>ftp</name>.<name>makeDirectory</name></name><argument_list>(<argument><expr><name>subdir</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <comment type="line">// codes 521, 550 and 553 can be produced by FTP Servers</comment>
                    <comment type="line">//  to indicate that an attempt to create a directory has</comment>
                    <comment type="line">//  failed because the directory already exists.</comment>
                    <decl_stmt><decl><type><name>int</name></type> <name>rc</name> =<init> <expr><call><name><name>ftp</name>.<name>getReplyCode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr>!(<name>ignoreNoncriticalErrors</name>
                          &amp;&amp; (<name>rc</name> == <name>CODE_550</name> || <name>rc</name> == <name>CODE_553</name>
                              || <name>rc</name> == <name>CODE_521</name>))</expr>)</condition><then> <block>{
                        <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"could not create directory: "
                                                 + <call><name><name>ftp</name>.<name>getReplyString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                    }</block></then></if>
                    <if>if <condition>(<expr><name>verbose</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Directory already exists"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then> <else>else <block>{
                    <if>if <condition>(<expr><name>verbose</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Directory created OK"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <expr_stmt><expr><call><name><name>ftp</name>.<name>changeWorkingDirectory</name></name><argument_list>(<argument><expr><name>subdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then></if>
        }</block></while>
        <if>if <condition>(<expr><name>workingDirectory</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>ftp</name>.<name>changeWorkingDirectory</name></name><argument_list>(<argument><expr><name>workingDirectory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * look at the response for a failed mkdir action, decide whether
     * it matters or not. If it does, we throw an exception
     * @param ftp current ftp connection
     * @throws BuildException if this is an error to signal
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>handleMkDirFailure</name><parameter_list>(<param><decl><type><name>FTPClient</name></type> <name>ftp</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>rc</name> =<init> <expr><call><name><name>ftp</name>.<name>getReplyCode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!(<name>ignoreNoncriticalErrors</name>
              &amp;&amp; (<name>rc</name> == <name>CODE_550</name> || <name>rc</name> == <name>CODE_553</name> || <name>rc</name> == <name>CODE_521</name>))</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"could not create directory: "
                                     + <call><name><name>ftp</name>.<name>getReplyString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Runs the task.
     *
     * @throws BuildException if the task fails or is not configured
     *         correctly.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>checkAttributes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>FTPClient</name></type> <name>ftp</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

        <try>try <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Opening FTP connection to " + <name>server</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>ftp</name> = new <call><name>FTPClient</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name><name>this</name>.<name>isConfigurationSet</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>ftp</name> = <call><name><name>FTPConfigurator</name>.<name>configure</name></name><argument_list>(<argument><expr><name>ftp</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><call><name><name>ftp</name>.<name>setRemoteVerificationEnabled</name></name><argument_list>(<argument><expr><name>enableRemoteVerification</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ftp</name>.<name>connect</name></name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<call><name><name>FTPReply</name>.<name>isPositiveCompletion</name></name><argument_list>(<argument><expr><call><name><name>ftp</name>.<name>getReplyCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"FTP connection failed: "
                                         + <call><name><name>ftp</name>.<name>getReplyString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"connected"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"logging in to FTP server"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr>(<name><name>this</name>.<name>account</name></name> != <name>null</name> &amp;&amp; !<call><name><name>ftp</name>.<name>login</name></name><argument_list>(<argument><expr><name>userid</name></expr></argument>, <argument><expr><name>password</name></expr></argument>, <argument><expr><name>account</name></expr></argument>)</argument_list></call>)
                || (<name><name>this</name>.<name>account</name></name> == <name>null</name> &amp;&amp; !<call><name><name>ftp</name>.<name>login</name></name><argument_list>(<argument><expr><name>userid</name></expr></argument>, <argument><expr><name>password</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Could not login to FTP server"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"login succeeded"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><name>binary</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>ftp</name>.<name>setFileType</name></name><argument_list>(<argument><expr><name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>net</name>.<name>ftp</name>.<name>FTP</name>.<name>BINARY_FILE_TYPE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<call><name><name>FTPReply</name>.<name>isPositiveCompletion</name></name><argument_list>(<argument><expr><call><name><name>ftp</name>.<name>getReplyCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"could not set transfer type: "
                                             + <call><name><name>ftp</name>.<name>getReplyString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>ftp</name>.<name>setFileType</name></name><argument_list>(<argument><expr><name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>net</name>.<name>ftp</name>.<name>FTP</name>.<name>ASCII_FILE_TYPE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<call><name><name>FTPReply</name>.<name>isPositiveCompletion</name></name><argument_list>(<argument><expr><call><name><name>ftp</name>.<name>getReplyCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"could not set transfer type: "
                                             + <call><name><name>ftp</name>.<name>getReplyString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if>
            }</block></else></if>

            <if>if <condition>(<expr><name>passive</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"entering passive mode"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ftp</name>.<name>enterLocalPassiveMode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<call><name><name>FTPReply</name>.<name>isPositiveCompletion</name></name><argument_list>(<argument><expr><call><name><name>ftp</name>.<name>getReplyCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"could not enter into passive "
                                             + "mode: " + <call><name><name>ftp</name>.<name>getReplyString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if>
            }</block></then></if>

            <comment type="line">// If an initial command was configured then send it.</comment>
            <comment type="line">// Some FTP servers offer different modes of operation,</comment>
            <comment type="line">// E.G. switching between a UNIX file system mode and</comment>
            <comment type="line">// a legacy file system.</comment>
            <if>if <condition>(<expr><name><name>this</name>.<name>initialSiteCommand</name></name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>RetryHandler</name></type> <name>h</name> =<init> <expr>new <call><name>RetryHandler</name><argument_list>(<argument><expr><name><name>this</name>.<name>retriesAllowed</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>FTPClient</name></type> <name>lftp</name> =<init> <expr><name>ftp</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>executeRetryable</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr>new <class><super><name>Retryable</name></super><argument_list>()</argument_list> <block>{
                        <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
                            <expr_stmt><expr><call><name>doSiteCommand</name><argument_list>(<argument><expr><name>lftp</name></expr></argument>, <argument><expr><name><name>FTP</name>.<name>this</name>.<name>initialSiteCommand</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></function>
                    }</block></class></expr></argument>, <argument><expr>"initial site command: " + <name><name>this</name>.<name>initialSiteCommand</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>


            <comment type="line">// For a unix ftp server you can set the default mask for all files</comment>
            <comment type="line">// created.</comment>

            <if>if <condition>(<expr><name>umask</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>RetryHandler</name></type> <name>h</name> =<init> <expr>new <call><name>RetryHandler</name><argument_list>(<argument><expr><name><name>this</name>.<name>retriesAllowed</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>FTPClient</name></type> <name>lftp</name> =<init> <expr><name>ftp</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>executeRetryable</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr>new <class><super><name>Retryable</name></super><argument_list>()</argument_list> <block>{
                        <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
                            <expr_stmt><expr><call><name>doSiteCommand</name><argument_list>(<argument><expr><name>lftp</name></expr></argument>, <argument><expr>"umask " + <name>umask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></function>
                    }</block></class></expr></argument>, <argument><expr>"umask " + <name>umask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <comment type="line">// If the action is MK_DIR, then the specified remote</comment>
            <comment type="line">// directory is the directory to create.</comment>

            <if>if <condition>(<expr><name>action</name> == <name>MK_DIR</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>RetryHandler</name></type> <name>h</name> =<init> <expr>new <call><name>RetryHandler</name><argument_list>(<argument><expr><name><name>this</name>.<name>retriesAllowed</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>FTPClient</name></type> <name>lftp</name> =<init> <expr><name>ftp</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>executeRetryable</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr>new <class><super><name>Retryable</name></super><argument_list>()</argument_list> <block>{
                        <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
                            <expr_stmt><expr><call><name>makeRemoteDir</name><argument_list>(<argument><expr><name>lftp</name></expr></argument>, <argument><expr><name>remotedir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></function>
                    }</block></class></expr></argument>, <argument><expr><name>remotedir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><name>action</name> == <name>SITE_CMD</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>RetryHandler</name></type> <name>h</name> =<init> <expr>new <call><name>RetryHandler</name><argument_list>(<argument><expr><name><name>this</name>.<name>retriesAllowed</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>FTPClient</name></type> <name>lftp</name> =<init> <expr><name>ftp</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>executeRetryable</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr>new <class><super><name>Retryable</name></super><argument_list>()</argument_list> <block>{
                        <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
                            <expr_stmt><expr><call><name>doSiteCommand</name><argument_list>(<argument><expr><name>lftp</name></expr></argument>, <argument><expr><name><name>FTP</name>.<name>this</name>.<name>siteCommand</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></function>
                    }</block></class></expr></argument>, <argument><expr>"Site Command: " + <name><name>this</name>.<name>siteCommand</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <if>if <condition>(<expr><name>remotedir</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"changing the remote directory to " + <name>remotedir</name></expr></argument>,
                        <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>ftp</name>.<name>changeWorkingDirectory</name></name><argument_list>(<argument><expr><name>remotedir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr>!<call><name><name>FTPReply</name>.<name>isPositiveCompletion</name></name><argument_list>(<argument><expr><call><name><name>ftp</name>.<name>getReplyCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"could not change remote "
                                                 + "directory: " + <call><name><name>ftp</name>.<name>getReplyString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                    }</block></then></if>
                }</block></then></if>
                <if>if <condition>(<expr><name>newerOnly</name> &amp;&amp; <name>timeDiffAuto</name></expr>)</condition><then> <block>{
                    <comment type="line">// in this case we want to find how much time span there is between local</comment>
                    <comment type="line">// and remote</comment>
                    <expr_stmt><expr><name>timeDiffMillis</name> = <call><name>getTimeDiff</name><argument_list>(<argument><expr><name>ftp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name><name>ACTION_STRS</name><index>[<expr><name>action</name></expr>]</index></name> + " " + <name><name>ACTION_TARGET_STRS</name><index>[<expr><name>action</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>transferFiles</name><argument_list>(<argument><expr><name>ftp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if></else></if>

        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ex</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"error during FTP transfer: " + <name>ex</name></expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <finally>finally <block>{
            <if>if <condition>(<expr><name>ftp</name> != <name>null</name> &amp;&amp; <call><name><name>ftp</name>.<name>isConnected</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <try>try <block>{
                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"disconnecting"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>ftp</name>.<name>logout</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>ftp</name>.<name>disconnect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ex</name></decl></param>) <block>{
                    <comment type="line">// ignore it</comment>
                }</block></catch></try>
            }</block></then></if>
        }</block></finally></try>
    }</block></function>


    <comment type="javadoc">/**
     * an action to perform, one of
     * "send", "put", "recv", "get", "del", "delete", "list", "mkdir", "chmod",
     * "rmdir"
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Action</name> <super><extends>extends <name>EnumeratedAttribute</name></extends></super> <block>{

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name><index>[]</index></type> <name>VALID_ACTIONS</name> =<init> <expr><block>{
            <expr>"send"</expr>, <expr>"put"</expr>, <expr>"recv"</expr>, <expr>"get"</expr>, <expr>"del"</expr>, <expr>"delete"</expr>, <expr>"list"</expr>, <expr>"mkdir"</expr>,
            <expr>"chmod"</expr>, <expr>"rmdir"</expr>, <expr>"site"</expr>
        }</block></expr></init></decl>;</decl_stmt>


        <comment type="javadoc">/**
         * Get the valid values
         *
         * @return an array of the valid FTP actions.
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getValues</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>VALID_ACTIONS</name></expr>;</return>
        }</block></function>


        <comment type="javadoc">/**
         * Get the symbolic equivalent of the action value.
         *
         * @return the SYMBOL representing the given action.
         */</comment>
        <function><type><specifier>public</specifier> <name>int</name></type> <name>getAction</name><parameter_list>()</parameter_list> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>actionL</name> =<init> <expr><call><name>getValue</name><argument_list>()</argument_list></call>.<call><name>toLowerCase</name><argument_list>(<argument><expr><name><name>Locale</name>.<name>ENGLISH</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>actionL</name>.<name>equals</name></name><argument_list>(<argument><expr>"send"</expr></argument>)</argument_list></call> || <call><name><name>actionL</name>.<name>equals</name></name><argument_list>(<argument><expr>"put"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><name>SEND_FILES</name></expr>;</return>
            }</block></then> <else>else <if>if <condition>(<expr><call><name><name>actionL</name>.<name>equals</name></name><argument_list>(<argument><expr>"recv"</expr></argument>)</argument_list></call> || <call><name><name>actionL</name>.<name>equals</name></name><argument_list>(<argument><expr>"get"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><name>GET_FILES</name></expr>;</return>
            }</block></then> <else>else <if>if <condition>(<expr><call><name><name>actionL</name>.<name>equals</name></name><argument_list>(<argument><expr>"del"</expr></argument>)</argument_list></call> || <call><name><name>actionL</name>.<name>equals</name></name><argument_list>(<argument><expr>"delete"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><name>DEL_FILES</name></expr>;</return>
            }</block></then> <else>else <if>if <condition>(<expr><call><name><name>actionL</name>.<name>equals</name></name><argument_list>(<argument><expr>"list"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><name>LIST_FILES</name></expr>;</return>
            }</block></then> <else>else <if>if <condition>(<expr><call><name><name>actionL</name>.<name>equals</name></name><argument_list>(<argument><expr>"chmod"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><name>CHMOD</name></expr>;</return>
            }</block></then> <else>else <if>if <condition>(<expr><call><name><name>actionL</name>.<name>equals</name></name><argument_list>(<argument><expr>"mkdir"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><name>MK_DIR</name></expr>;</return>
            }</block></then> <else>else <if>if <condition>(<expr><call><name><name>actionL</name>.<name>equals</name></name><argument_list>(<argument><expr>"rmdir"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><name>RM_DIR</name></expr>;</return>
            }</block></then> <else>else <if>if <condition>(<expr><call><name><name>actionL</name>.<name>equals</name></name><argument_list>(<argument><expr>"site"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><name>SITE_CMD</name></expr>;</return>
            }</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
            <return>return <expr><name>SEND_FILES</name></expr>;</return>
        }</block></function>
    }</block></class>
    <comment type="javadoc">/**
     * represents one of the valid timestamp adjustment values
     * recognized by the &lt;code&gt;timestampGranularity&lt;/code&gt; attribute.&lt;p&gt;

     * A timestamp adjustment may be used in file transfers for checking
     * uptodateness. MINUTE means to add one minute to the server
     * timestamp.  This is done because FTP servers typically list
     * timestamps HH:mm and client FileSystems typically use HH:mm:ss.
     *
     * The default is to use MINUTE for PUT actions and NONE for GET
     * actions, since GETs have the &lt;code&gt;preserveLastModified&lt;/code&gt;
     * option, which takes care of the problem in most use cases where
     * this level of granularity is an issue.
     *
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Granularity</name> <super><extends>extends <name>EnumeratedAttribute</name></extends></super> <block>{

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name><index>[]</index></type> <name>VALID_GRANULARITIES</name> =<init> <expr><block>{
            <expr>""</expr>, <expr>"MINUTE"</expr>, <expr>"NONE"</expr>
        }</block></expr></init></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * Get the valid values.
         * @return the list of valid Granularity values
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getValues</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>VALID_GRANULARITIES</name></expr>;</return>
        }</block></function>
        <comment type="javadoc">/**
         * returns the number of milliseconds associated with
         * the attribute, which can vary in some cases depending
         * on the value of the action parameter.
         * @param action SEND_FILES or GET_FILES
         * @return the number of milliseconds associated with
         * the attribute, in the context of the supplied action
         */</comment>
        <function><type><specifier>public</specifier> <name>long</name></type> <name>getMilliseconds</name><parameter_list>(<param><decl><type><name>int</name></type> <name>action</name></decl></param>)</parameter_list> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>granularityU</name> =<init> <expr><call><name>getValue</name><argument_list>()</argument_list></call>.<call><name>toUpperCase</name><argument_list>(<argument><expr><name><name>Locale</name>.<name>ENGLISH</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>"".<call><name>equals</name><argument_list>(<argument><expr><name>granularityU</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>action</name> == <name>SEND_FILES</name></expr>)</condition><then> <block>{
                    <return>return <expr><name>GRANULARITY_MINUTE</name></expr>;</return>
                }</block></then></if>
            }</block></then> <else>else <if>if <condition>(<expr>"MINUTE".<call><name>equals</name><argument_list>(<argument><expr><name>granularityU</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><name>GRANULARITY_MINUTE</name></expr>;</return>
            }</block></then></if></else></if>
            <return>return <expr>0L</expr>;</return>
        }</block></function>
        <function><type><specifier>static</specifier> <specifier>final</specifier> <name>Granularity</name></type> <name>getDefault</name><parameter_list>()</parameter_list> <block>{
            <decl_stmt><decl><type><name>Granularity</name></type> <name>g</name> =<init> <expr>new <call><name>Granularity</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>g</name>.<name>setValue</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>g</name></expr>;</return>
        }</block></function>

    }</block></class>
    <comment type="javadoc">/**
     * one of the valid system type keys recognized by the systemTypeKey
     * attribute.
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>FTPSystemType</name> <super><extends>extends <name>EnumeratedAttribute</name></extends></super> <block>{

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name><index>[]</index></type> <name>VALID_SYSTEM_TYPES</name> =<init> <expr><block>{
            <expr>""</expr>, <expr>"UNIX"</expr>, <expr>"VMS"</expr>, <expr>"WINDOWS"</expr>, <expr>"OS/2"</expr>, <expr>"OS/400"</expr>,
            <expr>"MVS"</expr>
        }</block></expr></init></decl>;</decl_stmt>


        <comment type="javadoc">/**
         * Get the valid values.
         * @return the list of valid system types.
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getValues</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>VALID_SYSTEM_TYPES</name></expr>;</return>
        }</block></function>

        <function><type><specifier>static</specifier> <specifier>final</specifier> <name>FTPSystemType</name></type> <name>getDefault</name><parameter_list>()</parameter_list> <block>{
            <decl_stmt><decl><type><name>FTPSystemType</name></type> <name>ftpst</name> =<init> <expr>new <call><name>FTPSystemType</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>ftpst</name>.<name>setValue</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>ftpst</name></expr>;</return>
        }</block></function>
    }</block></class>
    <comment type="javadoc">/**
     * Enumerated class for languages.
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>LanguageCode</name> <super><extends>extends <name>EnumeratedAttribute</name></extends></super> <block>{


        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name><index>[]</index></type> <name>VALID_LANGUAGE_CODES</name> =<init>
            <expr><call><name>getValidLanguageCodes</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name><index>[]</index></type> <name>getValidLanguageCodes</name><parameter_list>()</parameter_list> <block>{
            <decl_stmt><decl><type><name>Collection</name></type> <name>c</name> =<init> <expr><call><name><name>FTPClientConfig</name>.<name>getSupportedLanguageCodes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>ret</name> =<init> <expr>new <name><name>String</name><index>[<expr><call><name><name>c</name>.<name>size</name></name><argument_list>()</argument_list></call> + 1</expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>ret</name><index>[<expr><name>i</name>++</expr>]</index></name> = ""</expr>;</expr_stmt>
            <for>for (<init><decl><type><name>Iterator</name></type> <name>it</name> =<init> <expr><call><name><name>c</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>it</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <expr_stmt><expr><name><name>ret</name><index>[<expr><name>i</name></expr>]</index></name> = (<name>String</name>) <call><name><name>it</name>.<name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <return>return <expr><name>ret</name></expr>;</return>
        }</block></function>


        <comment type="javadoc">/**
         * Return the value values.
         * @return the list of valid language types.
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getValues</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>VALID_LANGUAGE_CODES</name></expr>;</return>
        }</block></function>

        <function><type><specifier>static</specifier> <specifier>final</specifier> <name>LanguageCode</name></type> <name>getDefault</name><parameter_list>()</parameter_list> <block>{
            <decl_stmt><decl><type><name>LanguageCode</name></type> <name>lc</name> =<init> <expr>new <call><name>LanguageCode</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>lc</name>.<name>setValue</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>lc</name></expr>;</return>
        }</block></function>
    }</block></class>

}</block></class>
</unit>
