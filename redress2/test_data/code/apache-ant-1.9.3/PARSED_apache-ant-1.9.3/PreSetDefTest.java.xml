<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\taskdefs\PreSetDefTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildFileTest</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>FileSet</name></name>;</import>

<comment type="javadoc">/**
 */</comment>
<class><specifier>public</specifier> class <name>PreSetDefTest</name> <super><extends>extends <name>BuildFileTest</name></extends></super> <block>{
    <constructor><specifier>public</specifier> <name>PreSetDefTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr>"src/etc/testcases/taskdefs/presetdef.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testSimple</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectLog</name><argument_list>(<argument><expr>"simple"</expr></argument>, <argument><expr>"Hello world"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testText</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectLog</name><argument_list>(<argument><expr>"text"</expr></argument>, <argument><expr>"Inner Text"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testUri</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectLog</name><argument_list>(<argument><expr>"uri"</expr></argument>, <argument><expr>"Hello world"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testDefaultTest</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectLog</name><argument_list>(<argument><expr>"defaulttest"</expr></argument>, <argument><expr>"attribute is false"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testDoubleDefault</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectLog</name><argument_list>(<argument><expr>"doubledefault"</expr></argument>, <argument><expr>"attribute is falseattribute is true"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testTextOptional</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectLog</name><argument_list>(<argument><expr>"text.optional"</expr></argument>, <argument><expr>"MyTextoverride text"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testElementOrder</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectLog</name><argument_list>(<argument><expr>"element.order"</expr></argument>, <argument><expr>"Line 1Line 2"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testElementOrder2</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectLog</name><argument_list>(<argument><expr>"element.order2"</expr></argument>, <argument><expr>"Line 1Line 2Line 3"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testAntTypeTest</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectLog</name><argument_list>(<argument><expr>"antTypeTest"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testCorrectTaskNameBadAttr</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildExceptionContaining</name><argument_list>(
            <argument><expr>"correct_taskname_badattr"</expr></argument>, <argument><expr>"attribute message"</expr></argument>, <argument><expr>"javac doesn't support the"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testCorrectTaskNameBadEl</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildExceptionContaining</name><argument_list>(
            <argument><expr>"correct_taskname_badel"</expr></argument>, <argument><expr>"element message"</expr></argument>, <argument><expr>"javac doesn't support the"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testPresetdefWithNestedElementTwice</name><parameter_list>()</parameter_list> <block>{ <comment type="line">// #38056</comment>
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"presetdef-with-nested-element-twice"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"presetdef-with-nested-element-twice"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * A test class to check default properties
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>DefaultTest</name> <super><extends>extends <name>Task</name></extends></super> <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>isSet</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>attribute</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setAttribute</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
            <if>if <condition>(<expr><name>isSet</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Attribute Already set"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <expr_stmt><expr><name>attribute</name> = <name>b</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>isSet</name> = true</expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>log</name><argument_list>(<argument><expr>"attribute is " + <name>attribute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>

    <comment type="javadoc">/**
     * A test class to check presetdef with add and addConfigured and ant-type
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>AntTypeTest</name> <super><extends>extends <name>Task</name></extends></super> <block>{
        <function><type><specifier>public</specifier> <name>void</name></type> <name>addFileSet</name><parameter_list>(<param><decl><type><name>FileSet</name></type> <name>fileset</name></decl></param>)</parameter_list> <block>{
        }</block></function>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>addConfiguredConfigured</name><parameter_list>(<param><decl><type><name>FileSet</name></type> <name>fileset</name></decl></param>)</parameter_list> <block>{
        }</block></function>
    }</block></class>
}</block></class>

</unit>
