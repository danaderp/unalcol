<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\taskdefs\StyleTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>


<import>import <name><name>java</name>.<name>io</name>.<name>FileReader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Reader</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildFileTest</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>


<comment type="javadoc">/**
 * TestCases for {@link XSLTProcess} task.
 * TODO merge with {@link XsltTest}?
 * @version 2003-08-05
 */</comment>
<class><specifier>public</specifier> class <name>StyleTest</name> <super><extends>extends <name>BuildFileTest</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>FileUtils</name></type> <name>FILE_UTILS</name> =<init> <expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>StyleTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr>"src/etc/testcases/taskdefs/style/build.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//executeTarget("setup");</comment>
        <comment type="line">//commented out for performance while target is empty</comment>
    }</block></function>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"teardown"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testStyleIsSet</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>expectSpecificBuildException</name><argument_list>(<argument><expr>"testStyleIsSet"</expr></argument>,
                <argument><expr>"no stylesheet specified"</expr></argument>, <argument><expr>"specify the " +
                "stylesheet either as a filename in style " +
                "attribute or as a nested resource"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testTransferParameterSet</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>expectFileContains</name><argument_list>(<argument><expr>"testTransferParameterSet"</expr></argument>,  <comment type="line">// target</comment>
                           <argument><expr>"out/out.xml"</expr></argument>,               <comment type="line">// file</comment>
                           <argument><expr>"set='myvalue'"</expr></argument>)</argument_list></call></expr>;</expr_stmt>            <comment type="line">// exptected string</comment>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testTransferParameterEmpty</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>expectFileContains</name><argument_list>(<argument><expr>"testTransferParameterEmpty"</expr></argument>,
                           <argument><expr>"out/out.xml"</expr></argument>,
                           <argument><expr>"empty=''"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testTransferParameterUnset</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>expectFileContains</name><argument_list>(<argument><expr>"testTransferParameterUnset"</expr></argument>,
                           <argument><expr>"out/out.xml"</expr></argument>,
                           <argument><expr>"undefined='${value}'"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testTransferParameterUnsetWithIf</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>expectFileContains</name><argument_list>(<argument><expr>"testTransferParameterUnsetWithIf"</expr></argument>,
                           <argument><expr>"out/out.xml"</expr></argument>,
                           <argument><expr>"undefined='undefined default value'"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNewerStylesheet</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>expectFileContains</name><argument_list>(<argument><expr>"testNewerStylesheet"</expr></argument>,
                           <argument><expr>"out/out.xml"</expr></argument>,
                           <argument><expr>"new-value"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testDefaultMapper</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>testDefaultMapper</name><argument_list>(<argument><expr>"testDefaultMapper"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testExplicitFileset</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>testDefaultMapper</name><argument_list>(<argument><expr>"testExplicitFileset"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testDefaultMapper</name><parameter_list>(<param><decl><type><name>String</name></type> <name>target</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>!(<call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call>.<call><name>resolveFile</name><argument_list>(
                <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr>"out/data.html"</expr></argument>)</argument_list></call>).<call><name>exists</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>expectFileContains</name><argument_list>(<argument><expr><name>target</name></expr></argument>,
                           <argument><expr>"out/data.html"</expr></argument>,
                           <argument><expr>"set='myvalue'"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testCustomMapper</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>!<call><name><name>FILE_UTILS</name>.<name>resolveFile</name></name><argument_list>(
                <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"out/out.xml"</expr></argument>)</argument_list></call>.<call><name>exists</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>expectFileContains</name><argument_list>(<argument><expr>"testCustomMapper"</expr></argument>,
                           <argument><expr>"out/out.xml"</expr></argument>,
                           <argument><expr>"set='myvalue'"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testTypedMapper</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>!<call><name><name>FILE_UTILS</name>.<name>resolveFile</name></name><argument_list>(
                <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"out/out.xml"</expr></argument>)</argument_list></call>.<call><name>exists</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>expectFileContains</name><argument_list>(<argument><expr>"testTypedMapper"</expr></argument>,
                           <argument><expr>"out/out.xml"</expr></argument>,
                           <argument><expr>"set='myvalue'"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testDirectoryHierarchyWithDirMatching</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testDirectoryHierarchyWithDirMatching"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>FILE_UTILS</name>.<name>resolveFile</name></name><argument_list>(
                <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"out/dest/level1/data.html"</expr></argument>)</argument_list></call>
                   .<call><name>exists</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testDirsWithSpaces</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testDirsWithSpaces"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>FILE_UTILS</name>.<name>resolveFile</name></name><argument_list>(
                <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"out/d est/data.html"</expr></argument>)</argument_list></call>
                   .<call><name>exists</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testWithStyleAttrAndResource</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>expectSpecificBuildException</name><argument_list>(<argument><expr>"testWithStyleAttrAndResource"</expr></argument>,
                <argument><expr>"Must throws a BuildException"</expr></argument>, <argument><expr>"specify the " +
                "stylesheet either as a filename in style " +
                "attribute or as a nested resource but not " +
                "as both"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testWithFileResource</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>expectFileContains</name><argument_list>(<argument><expr>"testWithFileResource"</expr></argument>, <argument><expr>"out/out.xml"</expr></argument>, <argument><expr>"set='value'"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testWithUrlResource</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>expectFileContains</name><argument_list>(<argument><expr>"testWithUrlResource"</expr></argument>, <argument><expr>"out/out.xml"</expr></argument>, <argument><expr>"set='value'"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFilenameAsParam</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testFilenameAsParam"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFileContains</name><argument_list>(<argument><expr>"out/out/one.txt"</expr></argument>,      <argument><expr>"filename='one.xml'"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFileContains</name><argument_list>(<argument><expr>"out/out/two.txt"</expr></argument>,      <argument><expr>"filename='two.xml'"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFileContains</name><argument_list>(<argument><expr>"out/out/three.txt"</expr></argument>,    <argument><expr>"filename='three.xml'"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFileContains</name><argument_list>(<argument><expr>"out/out/dir/four.txt"</expr></argument>, <argument><expr>"filename='four.xml'"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFileContains</name><argument_list>(<argument><expr>"out/out/dir/four.txt"</expr></argument>, <argument><expr>"filedir ='-not-set-'"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFilenameAsParamNoSetting</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testFilenameAsParamNoSetting"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFileContains</name><argument_list>(<argument><expr>"out/out/one.txt"</expr></argument>,      <argument><expr>"filename='-not-set-'"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFileContains</name><argument_list>(<argument><expr>"out/out/two.txt"</expr></argument>,      <argument><expr>"filename='-not-set-'"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFileContains</name><argument_list>(<argument><expr>"out/out/three.txt"</expr></argument>,    <argument><expr>"filename='-not-set-'"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFileContains</name><argument_list>(<argument><expr>"out/out/dir/four.txt"</expr></argument>, <argument><expr>"filename='-not-set-'"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFilenameAndFiledirAsParam</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testFilenameAndFiledirAsParam"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFileContains</name><argument_list>(<argument><expr>"out/out/one.txt"</expr></argument>,      <argument><expr>"filename='one.xml'"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFileContains</name><argument_list>(<argument><expr>"out/out/one.txt"</expr></argument>,      <argument><expr>"filedir ='.'"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFileContains</name><argument_list>(<argument><expr>"out/out/dir/four.txt"</expr></argument>, <argument><expr>"filename='four.xml'"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFileContains</name><argument_list>(<argument><expr>"out/out/dir/four.txt"</expr></argument>, <argument><expr>"filedir ='dir'"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="line">// *************  copied from ConcatTest  *************</comment>

    <comment type="line">// ------------------------------------------------------</comment>
    <comment type="line">//   Helper methods - should be in BuildFileTest</comment>
    <comment type="line">// -----------------------------------------------------</comment>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>getFileString</name><parameter_list>(<param><decl><type><name>String</name></type> <name>filename</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>Reader</name></type> <name>r</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>r</name> = new <call><name>FileReader</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>resolveFile</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return  <expr><call><name><name>FileUtils</name>.<name>readFully</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block>
        <finally>finally <block>{
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>expectFileContains</name><parameter_list>(
        <param><decl><type><name>String</name></type> <name>target</name></decl></param>, <param><decl><type><name>String</name></type> <name>filename</name></decl></param>, <param><decl><type><name>String</name></type> <name>contains</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFileContains</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>contains</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>assertFileContains</name><parameter_list>(<param><decl><type><name>String</name></type> <name>filename</name></decl></param>, <param><decl><type><name>String</name></type> <name>contains</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>content</name> =<init> <expr><call><name>getFileString</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(
              <argument><expr>"expecting file " + <name>filename</name>
            + " to contain " + <name>contains</name>
            + " but got " + <name>content</name></expr></argument>,
            <argument><expr><call><name><name>content</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>contains</name></expr></argument>)</argument_list></call> &gt; -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
