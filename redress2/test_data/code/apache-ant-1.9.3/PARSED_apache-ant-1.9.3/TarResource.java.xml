<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\types\resources\TarResource.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>OutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Resource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>tar</name>.<name>TarEntry</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>tar</name>.<name>TarInputStream</name></name>;</import>

<comment type="javadoc">/**
 * A Resource representation of an entry in a tar archive.
 * @since Ant 1.7
 */</comment>
<class><specifier>public</specifier> class <name>TarResource</name> <super><extends>extends <name>ArchiveResource</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>userName</name> =<init> <expr>""</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>groupName</name> =<init> <expr>""</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type>    <name>uid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type>    <name>gid</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Default constructor.
     */</comment>
    <constructor><specifier>public</specifier> <name>TarResource</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <comment type="javadoc">/**
     * Construct a TarResource representing the specified
     * entry in the specified archive.
     * @param a the archive as File.
     * @param e the TarEntry.
     */</comment>
    <constructor><specifier>public</specifier> <name>TarResource</name><parameter_list>(<param><decl><type><name>File</name></type> <name>a</name></decl></param>, <param><decl><type><name>TarEntry</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setEntry</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Construct a TarResource representing the specified
     * entry in the specified archive.
     * @param a the archive as Resource.
     * @param e the TarEntry.
     */</comment>
    <constructor><specifier>public</specifier> <name>TarResource</name><parameter_list>(<param><decl><type><name>Resource</name></type> <name>a</name></decl></param>, <param><decl><type><name>TarEntry</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setEntry</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Return an InputStream for reading the contents of this Resource.
     * @return an InputStream object.
     * @throws IOException if the tar file cannot be opened,
     *         or the entry cannot be read.
     */</comment>
    <function><type><specifier>public</specifier> <name>InputStream</name></type> <name>getInputStream</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>((<name>Resource</name>) <call><name>getCheckedRef</name><argument_list>()</argument_list></call>).<call><name>getInputStream</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>Resource</name></type> <name>archive</name> =<init> <expr><call><name>getArchive</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>TarInputStream</name></type> <name>i</name> =<init> <expr>new <call><name>TarInputStream</name><argument_list>(<argument><expr><call><name><name>archive</name>.<name>getInputStream</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TarEntry</name></type> <name>te</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr>(<name>te</name> = <call><name><name>i</name>.<name>getNextEntry</name></name><argument_list>()</argument_list></call>) != <name>null</name></expr>)</condition> <block>{
            <if>if <condition>(<expr><call><name><name>te</name>.<name>getName</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><name>i</name></expr>;</return>
            }</block></then></if>
        }</block></while>

        <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"no entry " + <call><name>getName</name><argument_list>()</argument_list></call> + " in "
                                 + <call><name>getArchive</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>

    <comment type="javadoc">/**
     * Get an OutputStream for the Resource.
     * @return an OutputStream to which content can be written.
     * @throws IOException if unable to provide the content of this
     *         Resource as a stream.
     * @throws UnsupportedOperationException if OutputStreams are not
     *         supported for this Resource type.
     */</comment>
    <function><type><specifier>public</specifier> <name>OutputStream</name></type> <name>getOutputStream</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>((<name>Resource</name>) <call><name>getCheckedRef</name><argument_list>()</argument_list></call>).<call><name>getOutputStream</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <throw>throw <expr>new <call><name>UnsupportedOperationException</name><argument_list>(
            <argument><expr>"Use the tar task for tar output."</expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>

    <comment type="javadoc">/**
     * @return the user name for the tar entry
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getUserName</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>((<name>TarResource</name>) <call><name>getCheckedRef</name><argument_list>()</argument_list></call>).<call><name>getUserName</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>checkEntry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>userName</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * @return the group name for the tar entry
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getGroup</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>((<name>TarResource</name>) <call><name>getCheckedRef</name><argument_list>()</argument_list></call>).<call><name>getGroup</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>checkEntry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>groupName</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * @return the uid for the tar entry
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getUid</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>((<name>TarResource</name>) <call><name>getCheckedRef</name><argument_list>()</argument_list></call>).<call><name>getUid</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>checkEntry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>uid</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * @return the gid for the tar entry
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getGid</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>((<name>TarResource</name>) <call><name>getCheckedRef</name><argument_list>()</argument_list></call>).<call><name>getGid</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>checkEntry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>gid</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * fetches information from the named entry inside the archive.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>fetchEntry</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Resource</name></type> <name>archive</name> =<init> <expr><call><name>getArchive</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TarInputStream</name></type> <name>i</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>i</name> = new <call><name>TarInputStream</name><argument_list>(<argument><expr><call><name><name>archive</name>.<name>getInputStream</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>TarEntry</name></type> <name>te</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr>(<name>te</name> = <call><name><name>i</name>.<name>getNextEntry</name></name><argument_list>()</argument_list></call>) != <name>null</name></expr>)</condition> <block>{
                <if>if <condition>(<expr><call><name><name>te</name>.<name>getName</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>setEntry</name><argument_list>(<argument><expr><name>te</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return;</return>
                }</block></then></if>
            }</block></while>
        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <finally>finally <block>{
            <if>if <condition>(<expr><name>i</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></finally></try>
        <expr_stmt><expr><call><name>setEntry</name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>setEntry</name><parameter_list>(<param><decl><type><name>TarEntry</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>e</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>setExists</name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>setName</name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setExists</name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setLastModified</name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getModTime</name></name><argument_list>()</argument_list></call>.<call><name>getTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setDirectory</name><argument_list>(<argument><expr><call><name><name>e</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setSize</name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getSize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setMode</name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getMode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>userName</name> = <call><name><name>e</name>.<name>getUserName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>groupName</name> = <call><name><name>e</name>.<name>getGroupName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>uid</name> = <call><name><name>e</name>.<name>getUserId</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>gid</name> = <call><name><name>e</name>.<name>getGroupId</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
