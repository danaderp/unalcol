<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\compilers\CompilerAdapterFactory.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>compilers</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Path</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>ClasspathUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>JavaEnvUtils</name></name>;</import>

<comment type="javadoc">/**
 * Creates the necessary compiler adapter, given basic criteria.
 *
 * @since Ant 1.3
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>CompilerAdapterFactory</name> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>MODERN_COMPILER</name> =<init> <expr>"com.sun.tools.javac.Main"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** This is a singleton -- can't create instances!! */</comment>
    <constructor><specifier>private</specifier> <name>CompilerAdapterFactory</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <comment type="javadoc">/**
     * Based on the parameter passed in, this method creates the necessary
     * factory desired.
     *
     * The current mapping for compiler names are as follows:
     * &lt;ul&gt;&lt;li&gt;jikes = jikes compiler
     * &lt;li&gt;classic, javac1.1, javac1.2 = the standard compiler from JDK
     * 1.1/1.2
     * &lt;li&gt;modern, javac1.3, javac1.4, javac1.5 = the compiler of JDK 1.3+
     * &lt;li&gt;jvc, microsoft = the command line compiler from Microsoft's SDK
     * for Java / Visual J++
     * &lt;li&gt;kjc = the kopi compiler&lt;/li&gt;
     * &lt;li&gt;gcj = the gcj compiler from gcc&lt;/li&gt;
     * &lt;li&gt;sj, symantec = the Symantec Java compiler&lt;/li&gt;
     * &lt;li&gt;&lt;i&gt;a fully qualified classname&lt;/i&gt; = the name of a compiler
     * adapter
     * &lt;/ul&gt;
     *
     * @param compilerType either the name of the desired compiler, or the
     * full classname of the compiler's adapter.
     * @param task a task to log through.
     * @return the compiler adapter
     * @throws BuildException if the compiler type could not be resolved into
     * a compiler adapter.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>CompilerAdapter</name></type> <name>getCompiler</name><parameter_list>(<param><decl><type><name>String</name></type> <name>compilerType</name></decl></param>, <param><decl><type><name>Task</name></type> <name>task</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name>getCompiler</name><argument_list>(<argument><expr><name>compilerType</name></expr></argument>, <argument><expr><name>task</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Based on the parameter passed in, this method creates the necessary
     * factory desired.
     *
     * The current mapping for compiler names are as follows:
     * &lt;ul&gt;&lt;li&gt;jikes = jikes compiler
     * &lt;li&gt;classic, javac1.1, javac1.2 = the standard compiler from JDK
     * 1.1/1.2
     * &lt;li&gt;modern, javac1.3, javac1.4, javac1.5 = the compiler of JDK 1.3+
     * &lt;li&gt;jvc, microsoft = the command line compiler from Microsoft's SDK
     * for Java / Visual J++
     * &lt;li&gt;kjc = the kopi compiler&lt;/li&gt;
     * &lt;li&gt;gcj = the gcj compiler from gcc&lt;/li&gt;
     * &lt;li&gt;sj, symantec = the Symantec Java compiler&lt;/li&gt;
     * &lt;li&gt;&lt;i&gt;a fully qualified classname&lt;/i&gt; = the name of a compiler
     * adapter
     * &lt;/ul&gt;
     *
     * @param compilerType either the name of the desired compiler, or the
     * full classname of the compiler's adapter.
     * @param task a task to log through.
     * @param classpath the classpath to use when looking up an
     * adapter class
     * @return the compiler adapter
     * @throws BuildException if the compiler type could not be resolved into
     * a compiler adapter.
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>CompilerAdapter</name></type> <name>getCompiler</name><parameter_list>(<param><decl><type><name>String</name></type> <name>compilerType</name></decl></param>, <param><decl><type><name>Task</name></type> <name>task</name></decl></param>,
                                              <param><decl><type><name>Path</name></type> <name>classpath</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
            <if>if <condition>(<expr><call><name><name>compilerType</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr>"jikes"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>new <call><name>Jikes</name><argument_list>()</argument_list></call></expr>;</return>
            }</block></then></if>
            <if>if <condition>(<expr><call><name><name>compilerType</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr>"extjavac"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>new <call><name>JavacExternal</name><argument_list>()</argument_list></call></expr>;</return>
            }</block></then></if>
            <if>if <condition>(<expr><call><name><name>compilerType</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr>"classic"</expr></argument>)</argument_list></call>
                || <call><name><name>compilerType</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr>"javac1.1"</expr></argument>)</argument_list></call>
                || <call><name><name>compilerType</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr>"javac1.2"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>task</name>.<name>log</name></name><argument_list>(<argument><expr>"This version of java does "
                                         + "not support the classic "
                                         + "compiler; upgrading to modern"</expr></argument>,
                                         <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>compilerType</name> = "modern"</expr>;</expr_stmt>
            }</block></then></if>
            <comment type="line">//on java&lt;=1.3 the modern falls back to classic if it is not found</comment>
            <comment type="line">//but on java&gt;=1.4 we just bail out early</comment>
            <if>if <condition>(<expr><call><name><name>compilerType</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr>"modern"</expr></argument>)</argument_list></call>
                || <call><name><name>compilerType</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr>"javac1.3"</expr></argument>)</argument_list></call>
                || <call><name><name>compilerType</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr>"javac1.4"</expr></argument>)</argument_list></call>
                || <call><name><name>compilerType</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr>"javac1.5"</expr></argument>)</argument_list></call>
                || <call><name><name>compilerType</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr>"javac1.6"</expr></argument>)</argument_list></call>
                || <call><name><name>compilerType</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr>"javac1.7"</expr></argument>)</argument_list></call>
                || <call><name><name>compilerType</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr>"javac1.8"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <comment type="line">// does the modern compiler exist?</comment>
                <if>if <condition>(<expr><call><name>doesModernCompilerExist</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <return>return <expr>new <call><name>Javac13</name><argument_list>()</argument_list></call></expr>;</return>
                }</block></then> <else>else <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Unable to find a javac "
                                             + "compiler;\n"
                                             + <name>MODERN_COMPILER</name>
                                             + " is not on the "
                                             + "classpath.\n"
                                             + "Perhaps JAVA_HOME does not"
                                             + " point to the JDK.\n"
                            + "It is currently set to \""
                            + <call><name><name>JavaEnvUtils</name>.<name>getJavaHome</name></name><argument_list>()</argument_list></call>
                            + "\""</expr></argument>)</argument_list></call></expr>;</throw>
                }</block></else></if>
            }</block></then></if>

            <if>if <condition>(<expr><call><name><name>compilerType</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr>"jvc"</expr></argument>)</argument_list></call>
                || <call><name><name>compilerType</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr>"microsoft"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>new <call><name>Jvc</name><argument_list>()</argument_list></call></expr>;</return>
            }</block></then></if>
            <if>if <condition>(<expr><call><name><name>compilerType</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr>"kjc"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>new <call><name>Kjc</name><argument_list>()</argument_list></call></expr>;</return>
            }</block></then></if>
            <if>if <condition>(<expr><call><name><name>compilerType</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr>"gcj"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>new <call><name>Gcj</name><argument_list>()</argument_list></call></expr>;</return>
            }</block></then></if>
            <if>if <condition>(<expr><call><name><name>compilerType</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr>"sj"</expr></argument>)</argument_list></call>
                || <call><name><name>compilerType</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr>"symantec"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>new <call><name>Sj</name><argument_list>()</argument_list></call></expr>;</return>
            }</block></then></if>
            <return>return <expr><call><name>resolveClassName</name><argument_list>(<argument><expr><name>compilerType</name></expr></argument>,
                                    <comment type="line">// Memory-Leak in line below</comment>
                                <argument><expr><call><name><name>task</name>.<name>getProject</name></name><argument_list>()</argument_list></call>.<call><name>createClassLoader</name><argument_list>(<argument><expr><name>classpath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

    <comment type="javadoc">/**
     * query for the Modern compiler existing
     * @return true if classic os on the classpath
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>doesModernCompilerExist</name><parameter_list>()</parameter_list> <block>{
        <try>try <block>{
            <expr_stmt><expr><call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr><name>MODERN_COMPILER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>true</expr>;</return>
        }</block> <catch>catch (<param><decl><type><name>ClassNotFoundException</name></type> <name>cnfe</name></decl></param>) <block>{
            <try>try <block>{
                <decl_stmt><decl><type><name>ClassLoader</name></type> <name>cl</name> =<init> <expr><name><name>CompilerAdapterFactory</name>.<name><name/></name></name>class.<call><name>getClassLoader</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>cl</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>cl</name>.<name>loadClass</name></name><argument_list>(<argument><expr><name>MODERN_COMPILER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr>true</expr>;</return>
                }</block></then></if>
            }</block> <catch>catch (<param><decl><type><name>ClassNotFoundException</name></type> <name>cnfe2</name></decl></param>) <block>{
                <comment type="line">// Ignore Exception</comment>
            }</block></catch></try>
        }</block></catch></try>
        <return>return <expr>false</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Tries to resolve the given classname into a compiler adapter.
     * Throws a fit if it can't.
     *
     * @param className The fully qualified classname to be created.
     * @param loader the classloader to use
     * @throws BuildException This is the fit that is thrown if className
     * isn't an instance of CompilerAdapter.
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>CompilerAdapter</name></type> <name>resolveClassName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>className</name></decl></param>,
                                                    <param><decl><type><name>ClassLoader</name></type> <name>loader</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <return>return <expr>(<name>CompilerAdapter</name>) <call><name><name>ClasspathUtils</name>.<name>newInstance</name></name><argument_list>(<argument><expr><name>className</name></expr></argument>,
                <argument><expr><name>loader</name> != <name>null</name> ? <name>loader</name> :
                <name><name>CompilerAdapterFactory</name>.<name><name/></name></name>class.<call><name>getClassLoader</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><name><name>CompilerAdapter</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

}</block></class>
</unit>
