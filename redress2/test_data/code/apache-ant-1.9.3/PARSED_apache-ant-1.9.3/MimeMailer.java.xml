<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\email\MimeMailer.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>email</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>PrintStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>OutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ByteArrayInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ByteArrayOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>UnsupportedEncodingException</name></name>;</import>

<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Locale</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Properties</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>StringTokenizer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>

<import>import <name><name>java</name>.<name>security</name>.<name>Provider</name></name>;</import>
<import>import <name><name>java</name>.<name>security</name>.<name>Security</name></name>;</import>

<import>import <name><name>javax</name>.<name>activation</name>.<name>DataHandler</name></name>;</import>
<import>import <name><name>javax</name>.<name>activation</name>.<name>FileDataSource</name></name>;</import>

<import>import <name><name>javax</name>.<name>mail</name>.<name>Authenticator</name></name>;</import>
<import>import <name><name>javax</name>.<name>mail</name>.<name>Address</name></name>;</import>
<import>import <name><name>javax</name>.<name>mail</name>.<name>Message</name></name>;</import>
<import>import <name><name>javax</name>.<name>mail</name>.<name>MessagingException</name></name>;</import>
<import>import <name><name>javax</name>.<name>mail</name>.<name>PasswordAuthentication</name></name>;</import>
<import>import <name><name>javax</name>.<name>mail</name>.<name>SendFailedException</name></name>;</import>
<import>import <name><name>javax</name>.<name>mail</name>.<name>Session</name></name>;</import>
<import>import <name><name>javax</name>.<name>mail</name>.<name>Transport</name></name>;</import>
<import>import <name><name>javax</name>.<name>mail</name>.<name>internet</name>.<name>AddressException</name></name>;</import>
<import>import <name><name>javax</name>.<name>mail</name>.<name>internet</name>.<name>InternetAddress</name></name>;</import>
<import>import <name><name>javax</name>.<name>mail</name>.<name>internet</name>.<name>MimeBodyPart</name></name>;</import>
<import>import <name><name>javax</name>.<name>mail</name>.<name>internet</name>.<name>MimeMessage</name></name>;</import>
<import>import <name><name>javax</name>.<name>mail</name>.<name>internet</name>.<name>MimeMultipart</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>

<comment type="javadoc">/**
 * Uses the JavaMail classes to send Mime format email.
 *
 * @since Ant 1.5
 */</comment>
<class><specifier>public</specifier> class <name>MimeMailer</name> <super><extends>extends <name>Mailer</name></extends></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SSL_FACTORY</name> =<init> <expr>"javax.net.ssl.SSLSocketFactory"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>GENERIC_ERROR</name> =<init>
        <expr>"Problem while sending mime mail:"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Default character set */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEFAULT_CHARSET</name>
        =<init> <expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"file.encoding"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// To work properly with national charsets we have to use</comment>
    <comment type="line">// implementation of interface javax.activation.DataSource</comment>
    <comment type="javadoc">/**
     * String data source implementation.
     * @since Ant 1.6
     */</comment>
    <class>class <name>StringDataSource</name> <super><implements>implements <name>javax</name>.<name>activation</name>.<name>DataSource</name></implements></super> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>data</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>type</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>charset</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>ByteArrayOutputStream</name></type> <name>out</name></decl>;</decl_stmt>

        <function><type><specifier>public</specifier> <name>InputStream</name></type> <name>getInputStream</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
            <if>if <condition>(<expr><name>data</name> == <name>null</name> &amp;&amp; <name>out</name> == <name>null</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>IOException</name><argument_list>(<argument><expr>"No data"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <if>if <condition>(<expr><name>out</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>encodedOut</name> =<init> <expr><call><name><name>out</name>.<name>toString</name></name><argument_list>(<argument><expr><name>charset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>data</name> = (<name>data</name> != <name>null</name>) ? <call><name><name>data</name>.<name>concat</name></name><argument_list>(<argument><expr><name>encodedOut</name></expr></argument>)</argument_list></call> : <name>encodedOut</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>out</name> = <name>null</name></expr>;</expr_stmt>
            }</block></then></if>
            <return>return <expr>new <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><call><name><name>data</name>.<name>getBytes</name></name><argument_list>(<argument><expr><name>charset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>OutputStream</name></type> <name>getOutputStream</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
            <expr_stmt><expr><name>out</name> = (<name>out</name> == <name>null</name>) ? new <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call> : <name>out</name></expr>;</expr_stmt>
            <return>return <expr><name>out</name></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>setContentType</name><parameter_list>(<param><decl><type><name>String</name></type> <name>type</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>type</name></name> = <call><name><name>type</name>.<name>toLowerCase</name></name><argument_list>(<argument><expr><name><name>Locale</name>.<name>ENGLISH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>String</name></type> <name>getContentType</name><parameter_list>()</parameter_list> <block>{
            <if>if <condition>(<expr><name>type</name> != <name>null</name> &amp;&amp; <call><name><name>type</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"charset"</expr></argument>)</argument_list></call> &gt; 0
                &amp;&amp; <call><name><name>type</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"text/"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><name>type</name></expr>;</return>
            }</block></then></if>
            <comment type="line">// Must be like "text/plain; charset=windows-1251"</comment>
            <return>return <expr>new <call><name>StringBuffer</name><argument_list>(<argument><expr><name>type</name> != <name>null</name> ? <name>type</name> : "text/plain"</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(
                <argument><expr>"; charset="</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><name>charset</name></expr></argument>)</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr>"StringDataSource"</expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>setCharset</name><parameter_list>(<param><decl><type><name>String</name></type> <name>charset</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>charset</name></name> = <name>charset</name></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>String</name></type> <name>getCharset</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>charset</name></expr>;</return>
        }</block></function>
    }</block></class>

    <comment type="javadoc">/**
     * Send the email.
     *
     * @throws BuildException if the email can't be sent.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>send</name><parameter_list>()</parameter_list> <block>{
        <try>try <block>{
            <decl_stmt><decl><type><name>Properties</name></type> <name>props</name> =<init> <expr>new <call><name>Properties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>props</name>.<name>put</name></name><argument_list>(<argument><expr>"mail.smtp.host"</expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>props</name>.<name>put</name></name><argument_list>(<argument><expr>"mail.smtp.port"</expr></argument>, <argument><expr><call><name><name>String</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Aside, the JDK is clearly unaware of the Scottish</comment>
            <comment type="line">// 'session', which involves excessive quantities of</comment>
            <comment type="line">// alcohol :-)</comment>
            <decl_stmt><decl><type><name>Session</name></type> <name>sesh</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Authenticator</name></type> <name>auth</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>SSL</name></expr>)</condition><then> <block>{
                <try>try <block>{
                    <decl_stmt><decl><type><name>Provider</name></type> <name>p</name> =<init> <expr>(<name>Provider</name>) <call><name><name>Class</name>.<name>forName</name></name><argument_list>(
                        <argument><expr>"com.sun.net.ssl.internal.ssl.Provider"</expr></argument>)</argument_list></call>.<call><name>newInstance</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>Security</name>.<name>addProvider</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"could not instantiate ssl "
                        + "security provider, check that you have JSSE in "
                        + "your classpath"</expr></argument>)</argument_list></call></expr>;</throw>
                }</block></catch></try>
                <comment type="line">// SMTP provider</comment>
                <expr_stmt><expr><call><name><name>props</name>.<name>put</name></name><argument_list>(<argument><expr>"mail.smtp.socketFactory.class"</expr></argument>, <argument><expr><name>SSL_FACTORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>props</name>.<name>put</name></name><argument_list>(<argument><expr>"mail.smtp.socketFactory.fallback"</expr></argument>, <argument><expr>"false"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>props</name>.<name>put</name></name><argument_list>(<argument><expr>"mail.smtps.host"</expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><call><name>isPortExplicitlySpecified</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>props</name>.<name>put</name></name><argument_list>(<argument><expr>"mail.smtps.port"</expr></argument>, <argument><expr><call><name><name>String</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>props</name>.<name>put</name></name><argument_list>(<argument><expr>"mail.smtp.socketFactory.port"</expr></argument>,
                              <argument><expr><call><name><name>String</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
            <if>if <condition>(<expr><name>user</name> != <name>null</name> || <name>password</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>props</name>.<name>put</name></name><argument_list>(<argument><expr>"mail.smtp.auth"</expr></argument>, <argument><expr>"true"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>auth</name> = new <call><name>SimpleAuthenticator</name><argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><call><name>isStartTLSEnabled</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>props</name>.<name>put</name></name><argument_list>(<argument><expr>"mail.smtp.starttls.enable"</expr></argument>, <argument><expr>"true"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>sesh</name> = <call><name><name>Session</name>.<name>getInstance</name></name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">//create the message</comment>
            <decl_stmt><decl><type><name>MimeMessage</name></type> <name>msg</name> =<init> <expr>new <call><name>MimeMessage</name><argument_list>(<argument><expr><name>sesh</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>MimeMultipart</name></type> <name>attachments</name> =<init> <expr>new <call><name>MimeMultipart</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">//set the sender</comment>
            <if>if <condition>(<expr><call><name><name>from</name>.<name>getName</name></name><argument_list>()</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>msg</name>.<name>setFrom</name></name><argument_list>(<argument><expr>new <call><name>InternetAddress</name><argument_list>(<argument><expr><call><name><name>from</name>.<name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>msg</name>.<name>setFrom</name></name><argument_list>(<argument><expr>new <call><name>InternetAddress</name><argument_list>(<argument><expr><call><name><name>from</name>.<name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><call><name><name>from</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <comment type="line">// set the reply to addresses</comment>
            <expr_stmt><expr><call><name><name>msg</name>.<name>setReplyTo</name></name><argument_list>(<argument><expr><call><name>internetAddresses</name><argument_list>(<argument><expr><name>replyToList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>msg</name>.<name>setRecipients</name></name><argument_list>(<argument><expr><name><name>Message</name>.<name>RecipientType</name>.<name>TO</name></name></expr></argument>,
                <argument><expr><call><name>internetAddresses</name><argument_list>(<argument><expr><name>toList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>msg</name>.<name>setRecipients</name></name><argument_list>(<argument><expr><name><name>Message</name>.<name>RecipientType</name>.<name>CC</name></name></expr></argument>,
                <argument><expr><call><name>internetAddresses</name><argument_list>(<argument><expr><name>ccList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>msg</name>.<name>setRecipients</name></name><argument_list>(<argument><expr><name><name>Message</name>.<name>RecipientType</name>.<name>BCC</name></name></expr></argument>,
                <argument><expr><call><name>internetAddresses</name><argument_list>(<argument><expr><name>bccList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Choosing character set of the mail message</comment>
            <comment type="line">// First: looking it from MimeType</comment>
            <decl_stmt><decl><type><name>String</name></type> <name>charset</name> =<init> <expr><call><name>parseCharSetFromMimeType</name><argument_list>(<argument><expr><call><name><name>message</name>.<name>getMimeType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>charset</name> != <name>null</name></expr>)</condition><then> <block>{
                <comment type="line">// Assign/reassign message charset from MimeType</comment>
                <expr_stmt><expr><call><name><name>message</name>.<name>setCharset</name></name><argument_list>(<argument><expr><name>charset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <comment type="line">// Next: looking if charset having explicit definition</comment>
                <expr_stmt><expr><name>charset</name> = <call><name><name>message</name>.<name>getCharset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>charset</name> == <name>null</name></expr>)</condition><then> <block>{
                    <comment type="line">// Using default</comment>
                    <expr_stmt><expr><name>charset</name> = <name>DEFAULT_CHARSET</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>message</name>.<name>setCharset</name></name><argument_list>(<argument><expr><name>charset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></else></if>
            <comment type="line">// Using javax.activation.DataSource paradigm</comment>
            <decl_stmt><decl><type><name>StringDataSource</name></type> <name>sds</name> =<init> <expr>new <call><name>StringDataSource</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>sds</name>.<name>setContentType</name></name><argument_list>(<argument><expr><call><name><name>message</name>.<name>getMimeType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sds</name>.<name>setCharset</name></name><argument_list>(<argument><expr><name>charset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><name>subject</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>msg</name>.<name>setSubject</name></name><argument_list>(<argument><expr><name>subject</name></expr></argument>, <argument><expr><name>charset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>msg</name>.<name>addHeader</name></name><argument_list>(<argument><expr>"Date"</expr></argument>, <argument><expr><call><name>getDate</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><name>headers</name> != <name>null</name></expr>)</condition><then> <block>{
                <for>for (<init><decl><type><name>Iterator</name></type> <name>iter</name> =<init> <expr><call><name><name>headers</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>iter</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
                    <decl_stmt><decl><type><name>Header</name></type> <name>h</name> =<init> <expr>(<name>Header</name>) <call><name><name>iter</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>msg</name>.<name>addHeader</name></name><argument_list>(<argument><expr><call><name><name>h</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>h</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
            }</block></then></if>
            <decl_stmt><decl><type><name>PrintStream</name></type> <name>out</name> =<init> <expr>new <call><name>PrintStream</name><argument_list>(<argument><expr><call><name><name>sds</name>.<name>getOutputStream</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>message</name>.<name>print</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>MimeBodyPart</name></type> <name>textbody</name> =<init> <expr>new <call><name>MimeBodyPart</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>textbody</name>.<name>setDataHandler</name></name><argument_list>(<argument><expr>new <call><name>DataHandler</name><argument_list>(<argument><expr><name>sds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>attachments</name>.<name>addBodyPart</name></name><argument_list>(<argument><expr><name>textbody</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>Enumeration</name></type> <name>e</name> =<init> <expr><call><name><name>files</name>.<name>elements</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <while>while <condition>(<expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <decl_stmt><decl><type><name>File</name></type> <name>file</name> =<init> <expr>(<name>File</name>) <call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name>MimeBodyPart</name></type> <name>body</name></decl>;</decl_stmt>

                <expr_stmt><expr><name>body</name> = new <call><name>MimeBodyPart</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<call><name><name>file</name>.<name>exists</name></name><argument_list>()</argument_list></call> || !<call><name><name>file</name>.<name>canRead</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"File \"" + <call><name><name>file</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call>
                         + "\" does not exist or is not "
                         + "readable."</expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if>
                <decl_stmt><decl><type><name>FileDataSource</name></type> <name>fileData</name> =<init> <expr>new <call><name>FileDataSource</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>DataHandler</name></type> <name>fileDataHandler</name> =<init> <expr>new <call><name>DataHandler</name><argument_list>(<argument><expr><name>fileData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name><name>body</name>.<name>setDataHandler</name></name><argument_list>(<argument><expr><name>fileDataHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>body</name>.<name>setFileName</name></name><argument_list>(<argument><expr><call><name><name>file</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>attachments</name>.<name>addBodyPart</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
            <expr_stmt><expr><call><name><name>msg</name>.<name>setContent</name></name><argument_list>(<argument><expr><name>attachments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <try>try <block>{
                <comment type="line">// Send the message using SMTP, or SMTPS if the host uses SSL</comment>
                <decl_stmt><decl><type><name>Transport</name></type> <name>transport</name> =<init> <expr><call><name><name>sesh</name>.<name>getTransport</name></name><argument_list>(<argument><expr><name>SSL</name> ? "smtps" : "smtp"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>transport</name>.<name>connect</name></name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>transport</name>.<name>sendMessage</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><call><name><name>msg</name>.<name>getAllRecipients</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>SendFailedException</name></type> <name>sfe</name></decl></param>) <block>{
                <if>if <condition>(<expr>!<call><name>shouldIgnoreInvalidRecipients</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>GENERIC_ERROR</name></expr></argument>, <argument><expr><name>sfe</name></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then> <else>else <if>if <condition>(<expr><call><name><name>sfe</name>.<name>getValidSentAddresses</name></name><argument_list>()</argument_list></call> == <name>null</name>
                           || <call><name><name>sfe</name>.<name>getValidSentAddresses</name></name><argument_list>()</argument_list></call>.<name>length</name> == 0</expr>)</condition><then> <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Couldn't reach any recipient"</expr></argument>,
                                             <argument><expr><name>sfe</name></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then> <else>else <block>{
                    <decl_stmt><decl><type><name>Address</name><index>[]</index></type> <name>invalid</name> =<init> <expr><call><name><name>sfe</name>.<name>getInvalidAddresses</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>invalid</name> == <name>null</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>invalid</name> = new <name><name>Address</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
                    }</block></then></if>
                    <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>invalid</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                        <expr_stmt><expr><call><name>didntReach</name><argument_list>(<argument><expr><name><name>invalid</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr>"invalid"</expr></argument>, <argument><expr><name>sfe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></for>
                    <decl_stmt><decl><type><name>Address</name><index>[]</index></type> <name>validUnsent</name> =<init> <expr><call><name><name>sfe</name>.<name>getValidUnsentAddresses</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>validUnsent</name> == <name>null</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>validUnsent</name> = new <name><name>Address</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
                    }</block></then></if>
                    <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>validUnsent</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                        <expr_stmt><expr><call><name>didntReach</name><argument_list>(<argument><expr><name><name>validUnsent</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr>"valid"</expr></argument>, <argument><expr><name>sfe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></for>
                }</block></else></if></else></if>
            }</block></catch></try>
        }</block> <catch>catch (<param><decl><type><name>MessagingException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>GENERIC_ERROR</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>GENERIC_ERROR</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>InternetAddress</name><index>[]</index></type> <name>internetAddresses</name><parameter_list>(<param><decl><type><name>Vector</name></type> <name>list</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>AddressException</name></expr></argument>, <argument><expr><name>UnsupportedEncodingException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>size</name> =<init> <expr><call><name><name>list</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>InternetAddress</name><index>[]</index></type> <name>addrs</name> =<init> <expr>new <name><name>InternetAddress</name><index>[<expr><name>size</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>size</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
            <decl_stmt><decl><type><name>EmailAddress</name></type> <name>addr</name> =<init> <expr>(<name>EmailAddress</name>) <call><name><name>list</name>.<name>elementAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>String</name></type> <name>name</name> =<init> <expr><call><name><name>addr</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>addrs</name><index>[<expr><name>i</name></expr>]</index></name> = (<name>name</name> == <name>null</name>)
                ? new <call><name>InternetAddress</name><argument_list>(<argument><expr><call><name><name>addr</name>.<name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                : new <call><name>InternetAddress</name><argument_list>(<argument><expr><call><name><name>addr</name>.<name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>addrs</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>parseCharSetFromMimeType</name><parameter_list>(<param><decl><type><name>String</name></type> <name>type</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>type</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>pos</name> =<init> <expr><call><name><name>type</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"charset"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>pos</name> &lt; 0</expr>)</condition><then> <block>{
          <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <comment type="line">// Assuming mime type in form "text/XXXX; charset=XXXXXX"</comment>
        <decl_stmt><decl><type><name>StringTokenizer</name></type> <name>token</name> =<init> <expr>new <call><name>StringTokenizer</name><argument_list>(<argument><expr><call><name><name>type</name>.<name>substring</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"=; "</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>token</name>.<name>nextToken</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// Skip 'charset='</comment>
        <return>return <expr><call><name><name>token</name>.<name>nextToken</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>didntReach</name><parameter_list>(<param><decl><type><name>Address</name></type> <name>addr</name></decl></param>, <param><decl><type><name>String</name></type> <name>category</name></decl></param>,
                            <param><decl><type><name>MessagingException</name></type> <name>ex</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>msg</name> =<init> <expr>"Failed to send mail to " + <name>category</name> + " address "
            + <name>addr</name> + " because of " + <call><name><name>ex</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>task</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>task</name>.<name>log</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <class><specifier>static</specifier> class <name>SimpleAuthenticator</name> <super><extends>extends <name>Authenticator</name></extends></super> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>user</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>password</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <constructor><specifier>public</specifier> <name>SimpleAuthenticator</name><parameter_list>(<param><decl><type><name>String</name></type> <name>user</name></decl></param>, <param><decl><type><name>String</name></type> <name>password</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>user</name></name> = <name>user</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>password</name></name> = <name>password</name></expr>;</expr_stmt>
        }</block></constructor>
        <function><type><specifier>public</specifier> <name>PasswordAuthentication</name></type> <name>getPasswordAuthentication</name><parameter_list>()</parameter_list> <block>{

            <return>return <expr>new <call><name>PasswordAuthentication</name><argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}</block></class>

</unit>
