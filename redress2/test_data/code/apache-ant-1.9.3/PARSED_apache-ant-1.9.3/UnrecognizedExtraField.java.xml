<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\zip\UnrecognizedExtraField.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>zip</name></name>;</package>

<comment type="javadoc">/**
 * Simple placeholder for all those extra fields we don't want to deal
 * with.
 *
 * &lt;p&gt;Assumes local file data and central directory entries are
 * identical - unless told the opposite.&lt;/p&gt;
 *
 */</comment>
<class><specifier>public</specifier> class <name>UnrecognizedExtraField</name>
    <super><implements>implements <name>CentralDirectoryParsingZipExtraField</name></implements></super> <block>{

    <comment type="javadoc">/**
     * The Header-ID.
     *
     * @since 1.1
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ZipShort</name></type> <name>headerId</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Set the header id.
     * @param headerId the header id to use
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setHeaderId</name><parameter_list>(<param><decl><type><name>ZipShort</name></type> <name>headerId</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>headerId</name></name> = <name>headerId</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the header id.
     * @return the header id
     */</comment>
    <function><type><specifier>public</specifier> <name>ZipShort</name></type> <name>getHeaderId</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>headerId</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Extra field data in local file data - without
     * Header-ID or length specifier.
     *
     * @since 1.1
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>byte</name><index>[]</index></type> <name>localData</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Set the extra field data in the local file data -
     * without Header-ID or length specifier.
     * @param data the field data to use
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLocalFileDataData</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>localData</name> = <call><name><name>ZipUtil</name>.<name>copy</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the length of the local data.
     * @return the length of the local data
     */</comment>
    <function><type><specifier>public</specifier> <name>ZipShort</name></type> <name>getLocalFileDataLength</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>new <call><name>ZipShort</name><argument_list>(<argument><expr><name><name>localData</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the local data.
     * @return the local data
     */</comment>
    <function><type><specifier>public</specifier> <name>byte</name><index>[]</index></type> <name>getLocalFileDataData</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>ZipUtil</name>.<name>copy</name></name><argument_list>(<argument><expr><name>localData</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Extra field data in central directory - without
     * Header-ID or length specifier.
     *
     * @since 1.1
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>byte</name><index>[]</index></type> <name>centralData</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Set the extra field data in central directory.
     * @param data the data to use
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCentralDirectoryData</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>centralData</name> = <call><name><name>ZipUtil</name>.<name>copy</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the central data length.
     * If there is no central data, get the local file data length.
     * @return the central data length
     */</comment>
    <function><type><specifier>public</specifier> <name>ZipShort</name></type> <name>getCentralDirectoryLength</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>centralData</name> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr>new <call><name>ZipShort</name><argument_list>(<argument><expr><name><name>centralData</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name>getLocalFileDataLength</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the central data.
     * @return the central data if present, else return the local file data
     */</comment>
    <function><type><specifier>public</specifier> <name>byte</name><index>[]</index></type> <name>getCentralDirectoryData</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>centralData</name> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>ZipUtil</name>.<name>copy</name></name><argument_list>(<argument><expr><name>centralData</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name>getLocalFileDataData</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * @param data the array of bytes.
     * @param offset the source location in the data array.
     * @param length the number of bytes to use in the data array.
     * @see ZipExtraField#parseFromLocalFileData(byte[], int, int)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>parseFromLocalFileData</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></param>, <param><decl><type><name>int</name></type> <name>offset</name></decl></param>, <param><decl><type><name>int</name></type> <name>length</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>tmp</name> =<init> <expr>new <name><name>byte</name><index>[<expr><name>length</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setLocalFileDataData</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * @param data the array of bytes.
     * @param offset the source location in the data array.
     * @param length the number of bytes to use in the data array.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>parseFromCentralDirectoryData</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></param>, <param><decl><type><name>int</name></type> <name>offset</name></decl></param>,
                                              <param><decl><type><name>int</name></type> <name>length</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>tmp</name> =<init> <expr>new <name><name>byte</name><index>[<expr><name>length</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setCentralDirectoryData</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>localData</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>setLocalFileDataData</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

}</block></class>
</unit>
