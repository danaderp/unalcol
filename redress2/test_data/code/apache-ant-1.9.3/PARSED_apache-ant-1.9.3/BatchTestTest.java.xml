<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\taskdefs\optional\junit\BatchTestTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>junit</name></name>;</package>

<import>import <name><name>junit</name>.<name>framework</name>.<name>ComparisonFailure</name></name>;</import>
<import>import <name><name>junit</name>.<name>framework</name>.<name>TestCase</name></name>;</import>

<comment type="javadoc">/**
 *
 * @author  Marian Petras
 */</comment>
<class><specifier>public</specifier> class <name>BatchTestTest</name> <super><extends>extends <name>TestCase</name></extends></super> <block>{
    
    <constructor><specifier>public</specifier> <name>BatchTestTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>testName</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>testName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>testParseTestMethodNamesList</name><parameter_list>()</parameter_list> <block>{
        <try>try <block>{
            <expr_stmt><expr><call><name><name>JUnitTest</name>.<name>parseTestMethodNamesList</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"IllegalArgumentException expected when the param is &lt;null&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>IllegalArgumentException</name></type> <name>ex</name></decl></param>) <block>{
            <comment type="line">//this is an expected exception</comment>
        }</block></catch></try>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>new <name><name>String</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><call><name><name>JUnitTest</name>.<name>parseTestMethodNamesList</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>new <name><name>String</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><call><name><name>JUnitTest</name>.<name>parseTestMethodNamesList</name></name><argument_list>(<argument><expr>" "</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>new <name><name>String</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><call><name><name>JUnitTest</name>.<name>parseTestMethodNamesList</name></name><argument_list>(<argument><expr>"  "</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>checkParseCausesIAE</name><argument_list>(<argument><expr>","</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkParseCausesIAE</name><argument_list>(<argument><expr>" ,"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkParseCausesIAE</name><argument_list>(<argument><expr>", "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkParseCausesIAE</name><argument_list>(<argument><expr>" , "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkParseCausesIAE</name><argument_list>(<argument><expr>",a"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkParseCausesIAE</name><argument_list>(<argument><expr>" ,a"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkParseCausesIAE</name><argument_list>(<argument><expr>"  ,a"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkParseCausesIAE</name><argument_list>(<argument><expr>"  , a"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkParseCausesIAE</name><argument_list>(<argument><expr>"  ,a  "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkParseCausesIAE</name><argument_list>(<argument><expr>"  ,a  ,"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkParseCausesIAE</name><argument_list>(<argument><expr>"ab,,cd"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkParseCausesIAE</name><argument_list>(<argument><expr>"ab, ,cd"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkParseCausesIAE</name><argument_list>(<argument><expr>"ab,  ,cd"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkParseCausesIAE</name><argument_list>(<argument><expr>"ab,  ,cd,"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkParseCausesIAE</name><argument_list>(<argument><expr>",ab,  ,cd,"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"abc"</expr>}</block></expr></argument>, <argument><expr><call><name><name>JUnitTest</name>.<name>parseTestMethodNamesList</name></name><argument_list>(<argument><expr>"abc"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"abc"</expr>}</block></expr></argument>, <argument><expr><call><name><name>JUnitTest</name>.<name>parseTestMethodNamesList</name></name><argument_list>(<argument><expr>"abc "</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"abc"</expr>}</block></expr></argument>, <argument><expr><call><name><name>JUnitTest</name>.<name>parseTestMethodNamesList</name></name><argument_list>(<argument><expr>" abc"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"abc"</expr>}</block></expr></argument>, <argument><expr><call><name><name>JUnitTest</name>.<name>parseTestMethodNamesList</name></name><argument_list>(<argument><expr>" abc "</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"abc"</expr>}</block></expr></argument>, <argument><expr><call><name><name>JUnitTest</name>.<name>parseTestMethodNamesList</name></name><argument_list>(<argument><expr>"abc  "</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"abc"</expr>}</block></expr></argument>, <argument><expr><call><name><name>JUnitTest</name>.<name>parseTestMethodNamesList</name></name><argument_list>(<argument><expr>"abc,"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"abc"</expr>}</block></expr></argument>, <argument><expr><call><name><name>JUnitTest</name>.<name>parseTestMethodNamesList</name></name><argument_list>(<argument><expr>"abc, "</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"abc"</expr>}</block></expr></argument>, <argument><expr><call><name><name>JUnitTest</name>.<name>parseTestMethodNamesList</name></name><argument_list>(<argument><expr>"abc ,"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"abc"</expr>}</block></expr></argument>, <argument><expr><call><name><name>JUnitTest</name>.<name>parseTestMethodNamesList</name></name><argument_list>(<argument><expr>"abc , "</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"abc"</expr>}</block></expr></argument>, <argument><expr><call><name><name>JUnitTest</name>.<name>parseTestMethodNamesList</name></name><argument_list>(<argument><expr>" abc  ,"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* legal Java identifiers: */</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"a"</expr>}</block></expr></argument>, <argument><expr><call><name><name>JUnitTest</name>.<name>parseTestMethodNamesList</name></name><argument_list>(<argument><expr>"a"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"a1"</expr>}</block></expr></argument>, <argument><expr><call><name><name>JUnitTest</name>.<name>parseTestMethodNamesList</name></name><argument_list>(<argument><expr>"a1"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"a$"</expr>}</block></expr></argument>, <argument><expr><call><name><name>JUnitTest</name>.<name>parseTestMethodNamesList</name></name><argument_list>(<argument><expr>"a$"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"a$1"</expr>}</block></expr></argument>, <argument><expr><call><name><name>JUnitTest</name>.<name>parseTestMethodNamesList</name></name><argument_list>(<argument><expr>"a$1"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"_bc"</expr>}</block></expr></argument>, <argument><expr><call><name><name>JUnitTest</name>.<name>parseTestMethodNamesList</name></name><argument_list>(<argument><expr>"_bc"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"___"</expr>}</block></expr></argument>, <argument><expr><call><name><name>JUnitTest</name>.<name>parseTestMethodNamesList</name></name><argument_list>(<argument><expr>"___"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* illegal Java identifiers: */</comment>
        <expr_stmt><expr><call><name>checkParseCausesIAE</name><argument_list>(<argument><expr>"1"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkParseCausesIAE</name><argument_list>(<argument><expr>"1a"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkParseCausesIAE</name><argument_list>(<argument><expr>"1ab"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkParseCausesIAE</name><argument_list>(<argument><expr>"1abc"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkParseCausesIAE</name><argument_list>(<argument><expr>"1abc d"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkParseCausesIAE</name><argument_list>(<argument><expr>"1abc de"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkParseCausesIAE</name><argument_list>(<argument><expr>"1abc def"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkParseCausesIAE</name><argument_list>(<argument><expr>"1abc def,"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkParseCausesIAE</name><argument_list>(<argument><expr>",1abc def"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"abc"</expr>, <expr>"def"</expr>}</block></expr></argument>, <argument><expr><call><name><name>JUnitTest</name>.<name>parseTestMethodNamesList</name></name><argument_list>(<argument><expr>"abc,def"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"abc"</expr>, <expr>"def"</expr>}</block></expr></argument>, <argument><expr><call><name><name>JUnitTest</name>.<name>parseTestMethodNamesList</name></name><argument_list>(<argument><expr>"abc,def,"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"abc"</expr>, <expr>"def"</expr>}</block></expr></argument>, <argument><expr><call><name><name>JUnitTest</name>.<name>parseTestMethodNamesList</name></name><argument_list>(<argument><expr>"abc,def "</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"abc"</expr>, <expr>"def"</expr>}</block></expr></argument>, <argument><expr><call><name><name>JUnitTest</name>.<name>parseTestMethodNamesList</name></name><argument_list>(<argument><expr>"abc, def"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"abc"</expr>, <expr>"def"</expr>}</block></expr></argument>, <argument><expr><call><name><name>JUnitTest</name>.<name>parseTestMethodNamesList</name></name><argument_list>(<argument><expr>"abc, def "</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"abc"</expr>, <expr>"def"</expr>}</block></expr></argument>, <argument><expr><call><name><name>JUnitTest</name>.<name>parseTestMethodNamesList</name></name><argument_list>(<argument><expr>"abc ,def"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"abc"</expr>, <expr>"def"</expr>}</block></expr></argument>, <argument><expr><call><name><name>JUnitTest</name>.<name>parseTestMethodNamesList</name></name><argument_list>(<argument><expr>"abc ,def "</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"abc"</expr>, <expr>"def"</expr>}</block></expr></argument>, <argument><expr><call><name><name>JUnitTest</name>.<name>parseTestMethodNamesList</name></name><argument_list>(<argument><expr>"abc , def"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"abc"</expr>, <expr>"def"</expr>}</block></expr></argument>, <argument><expr><call><name><name>JUnitTest</name>.<name>parseTestMethodNamesList</name></name><argument_list>(<argument><expr>"abc , def "</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"abc"</expr>, <expr>"def"</expr>}</block></expr></argument>, <argument><expr><call><name><name>JUnitTest</name>.<name>parseTestMethodNamesList</name></name><argument_list>(<argument><expr>" abc,def"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"abc"</expr>, <expr>"def"</expr>}</block></expr></argument>, <argument><expr><call><name><name>JUnitTest</name>.<name>parseTestMethodNamesList</name></name><argument_list>(<argument><expr>" abc,def "</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"abc"</expr>, <expr>"def"</expr>}</block></expr></argument>, <argument><expr><call><name><name>JUnitTest</name>.<name>parseTestMethodNamesList</name></name><argument_list>(<argument><expr>" abc, def"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"abc"</expr>, <expr>"def"</expr>}</block></expr></argument>, <argument><expr><call><name><name>JUnitTest</name>.<name>parseTestMethodNamesList</name></name><argument_list>(<argument><expr>" abc, def "</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"abc"</expr>, <expr>"def"</expr>}</block></expr></argument>, <argument><expr><call><name><name>JUnitTest</name>.<name>parseTestMethodNamesList</name></name><argument_list>(<argument><expr>" abc ,def"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"abc"</expr>, <expr>"def"</expr>}</block></expr></argument>, <argument><expr><call><name><name>JUnitTest</name>.<name>parseTestMethodNamesList</name></name><argument_list>(<argument><expr>" abc ,def "</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"abc"</expr>, <expr>"def"</expr>}</block></expr></argument>, <argument><expr><call><name><name>JUnitTest</name>.<name>parseTestMethodNamesList</name></name><argument_list>(<argument><expr>" abc , def"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"abc"</expr>, <expr>"def"</expr>}</block></expr></argument>, <argument><expr><call><name><name>JUnitTest</name>.<name>parseTestMethodNamesList</name></name><argument_list>(<argument><expr>" abc , def "</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"abc"</expr>, <expr>"def"</expr>}</block></expr></argument>, <argument><expr><call><name><name>JUnitTest</name>.<name>parseTestMethodNamesList</name></name><argument_list>(<argument><expr>" abc , def ,"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>checkParseCausesIAE</name><parameter_list>(<param><decl><type><name>String</name></type> <name>param</name></decl></param>)</parameter_list> <block>{
        <try>try <block>{
            <expr_stmt><expr><call><name><name>JUnitTest</name>.<name>parseTestMethodNamesList</name></name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"IllegalArgumentException expected when the param is \"" + <name>param</name> + '"'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>IllegalArgumentException</name></type> <name>ex</name></decl></param>) <block>{
            <comment type="line">//this is an expected exception</comment>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>assertEquals</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>expected</name></decl></param>, <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>actual</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr><name>expected</name></expr></argument>, <argument><expr><name>actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>assertEquals</name><parameter_list>(<param><decl><type><name>String</name></type> <name>message</name></decl></param>,
                                     <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>expected</name></decl></param>,
                                     <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>actual</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr>(<name>expected</name> == <name>null</name>) &amp;&amp; (<name>actual</name> == <name>null</name>)</expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>expected</name>.<name>length</name></name> != <name><name>actual</name>.<name>length</name></name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>ComparisonFailure</name><argument_list>(<argument><expr><name>message</name></expr></argument>,
                                        <argument><expr><call><name><name>expected</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>,
                                        <argument><expr><call><name><name>actual</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>expected</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>expected</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>actual</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

}</block></class>
</unit>
