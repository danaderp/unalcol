<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\types\optional\depend\DependScanner.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>optional</name>.<name>depend</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Hashtable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>DirectoryScanner</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Path</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>depend</name>.<name>DependencyAnalyzer</name></name>;</import>


<comment type="javadoc">/**
 * DirectoryScanner for finding class dependencies.
 */</comment>
<class><specifier>public</specifier> class <name>DependScanner</name> <super><extends>extends <name>DirectoryScanner</name></extends></super> <block>{
    <comment type="javadoc">/**
     * The name of the analyzer to use by default.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEFAULT_ANALYZER_CLASS</name>
        =<init> <expr>"org.apache.tools.ant.util.depend.bcel.FullAnalyzer"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The root classes to drive the search for dependent classes.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>rootClasses</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The names of the classes to include in the fileset.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>included</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>File</name></argument>&gt;</argument_list></name></type> <name>additionalBaseDirs</name> =<init> <expr>new <call><name><name>Vector</name><argument_list>&lt;<argument><name>File</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The parent scanner which gives the basic set of files. Only files which
     * are in this set and which can be reached from a root class will end
     * up being included in the result set.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>DirectoryScanner</name></type> <name>parentScanner</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Create a DependScanner, using the given scanner to provide the basic
     * set of files from which class files come.
     *
     * @param parentScanner the DirectoryScanner which returns the files from
     *        which class files must come.
     */</comment>
    <constructor><specifier>public</specifier> <name>DependScanner</name><parameter_list>(<param><decl><type><name>DirectoryScanner</name></type> <name>parentScanner</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>parentScanner</name></name> = <name>parentScanner</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Sets the root classes to be used to drive the scan.
     *
     * @param rootClasses the rootClasses to be used for this scan.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>setRootClasses</name><parameter_list>(<param><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>rootClasses</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>rootClasses</name></name> = <name>rootClasses</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the names of the class files on which baseClass depends.
     *
     * @return the names of the files.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getIncludedFiles</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>files</name> =<init> <expr>new <name><name>String</name><index>[<expr><call><name>getIncludedFilesCount</name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>files</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name> = (<name>String</name>) <call><name><name>included</name>.<name>elementAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>files</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/** {@inheritDoc}. */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>int</name></type> <name>getIncludedFilesCount</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>included</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalStateException</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr><call><name><name>included</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Scans the base directory for files on which baseClass depends.
     *
     * @exception IllegalStateException when basedir was set incorrectly.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>scan</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IllegalStateException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><name>included</name> = new <call><name><name>Vector</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>analyzerClassName</name> =<init> <expr><name>DEFAULT_ANALYZER_CLASS</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DependencyAnalyzer</name></type> <name>analyzer</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <decl_stmt><decl><type><name><name>Class</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name>DependencyAnalyzer</name></extends></argument>&gt;</argument_list></name></type> <name>analyzerClass</name> =<init> <expr><call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr><name>analyzerClassName</name></expr></argument>)</argument_list></call>
                    .<call><name>asSubclass</name><argument_list>(<argument><expr><name><name>DependencyAnalyzer</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>analyzer</name> = <call><name><name>analyzerClass</name>.<name>newInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Unable to load dependency analyzer: "
                                     + <name>analyzerClassName</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
        <expr_stmt><expr><call><name><name>analyzer</name>.<name>addClassPath</name></name><argument_list>(<argument><expr>new <call><name>Path</name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr><call><name><name>basedir</name>.<name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name><name>Enumeration</name><argument_list>&lt;<argument><name>File</name></argument>&gt;</argument_list></name></type> <name>e</name> =<init> <expr><call><name><name>additionalBaseDirs</name>.<name>elements</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
            <decl_stmt><decl><type><name>File</name></type> <name>additionalBaseDir</name> =<init> <expr><call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>analyzer</name>.<name>addClassPath</name></name><argument_list>(<argument><expr>new <call><name>Path</name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr><call><name><name>additionalBaseDir</name>.<name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <for>for (<init><decl><type><name><name>Enumeration</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>e</name> =<init> <expr><call><name><name>rootClasses</name>.<name>elements</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>rootClass</name> =<init> <expr><call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>analyzer</name>.<name>addRootClass</name></name><argument_list>(<argument><expr><name>rootClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <decl_stmt><decl><type><name><name>Enumeration</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>e</name> =<init> <expr><call><name><name>analyzer</name>.<name>getClassDependencies</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>parentFiles</name> =<init> <expr><call><name><name>parentScanner</name>.<name>getIncludedFiles</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>parentSet</name> =<init> <expr>new <call><name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>parentFiles</name>.<name>length</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>parentSet</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>parentFiles</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>parentFiles</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <while>while <condition>(<expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>classname</name> =<init> <expr>(<name>String</name>) <call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>filename</name> =<init> <expr><call><name><name>classname</name>.<name>replace</name></name><argument_list>(<argument><expr>'.'</expr></argument>, <argument><expr><name><name>File</name>.<name>separatorChar</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>filename</name> = <name>filename</name> + ".class"</expr>;</expr_stmt>
            <decl_stmt><decl><type><name>File</name></type> <name>depFile</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name>basedir</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>depFile</name>.<name>exists</name></name><argument_list>()</argument_list></call> &amp;&amp; <call><name><name>parentSet</name>.<name>containsKey</name></name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <comment type="line">// This is included</comment>
                <expr_stmt><expr><call><name><name>included</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></while>
    }</block></function>

    <comment type="javadoc">/**
     * @see DirectoryScanner#addDefaultExcludes
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addDefaultExcludes</name><parameter_list>()</parameter_list> <block>{
    }</block></function>

    <comment type="javadoc">/**
     * @see DirectoryScanner#getExcludedDirectories
     */</comment>
    <comment type="javadoc">/** {@inheritDoc}. */</comment>
    <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getExcludedDirectories</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>null</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * @see DirectoryScanner#getExcludedFiles
     */</comment>
    <comment type="javadoc">/** {@inheritDoc}. */</comment>
    <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getExcludedFiles</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>null</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * @see DirectoryScanner#getIncludedDirectories
     */</comment>
    <comment type="javadoc">/** {@inheritDoc}. */</comment>
    <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getIncludedDirectories</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>new <name><name>String</name><index>[<expr>0</expr>]</index></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * @see DirectoryScanner#getIncludedDirsCount
     */</comment>
    <comment type="javadoc">/** {@inheritDoc}. */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getIncludedDirsCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>0</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * @see DirectoryScanner#getNotIncludedDirectories
     */</comment>
    <comment type="javadoc">/** {@inheritDoc}. */</comment>
    <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getNotIncludedDirectories</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>null</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * @see DirectoryScanner#getNotIncludedFiles
     */</comment>
    <comment type="javadoc">/** {@inheritDoc}. */</comment>
    <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getNotIncludedFiles</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>null</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * @see DirectoryScanner#setExcludes
     */</comment>
    <comment type="javadoc">/** {@inheritDoc}. */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setExcludes</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>excludes</name></decl></param>)</parameter_list> <block>{
    }</block></function>

    <comment type="javadoc">/**
     * @see DirectoryScanner#setIncludes
     */</comment>
    <comment type="javadoc">/** {@inheritDoc}. */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setIncludes</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>includes</name></decl></param>)</parameter_list> <block>{
    }</block></function>

    <comment type="javadoc">/**
     * @see DirectoryScanner#setCaseSensitive
     */</comment>
    <comment type="javadoc">/** {@inheritDoc}. */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCaseSensitive</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>isCaseSensitive</name></decl></param>)</parameter_list> <block>{
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addBasedir</name><parameter_list>(<param><decl><type><name>File</name></type> <name>baseDir</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>additionalBaseDirs</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>baseDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
