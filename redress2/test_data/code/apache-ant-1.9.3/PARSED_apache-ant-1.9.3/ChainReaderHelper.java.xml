<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\filters\util\ChainReaderHelper.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>filters</name>.<name>util</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>FilterReader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Reader</name></name>;</import>
<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name>.<name>Constructor</name></name>;</import>
<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name>.<name>InvocationTargetException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>AntClassLoader</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>filters</name>.<name>BaseFilterReader</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>filters</name>.<name>ChainableReader</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>AntFilterReader</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>FilterChain</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Parameter</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Parameterizable</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Path</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>

<comment type="javadoc">/**
 * Process a FilterReader chain.
 *
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>ChainReaderHelper</name> <block>{

    <comment type="line">// default buffer size</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DEFAULT_BUFFER_SIZE</name> =<init> <expr>8192</expr></init></decl>;</decl_stmt>
    <comment type="line">// CheckStyle:VisibilityModifier OFF - bc</comment>
    <comment type="javadoc">/**
     * The primary reader to which the reader chain is to be attached.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>Reader</name></type> <name>primaryReader</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The size of the buffer to be used.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>bufferSize</name> =<init> <expr><name>DEFAULT_BUFFER_SIZE</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Chain of filters
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>FilterChain</name></argument>&gt;</argument_list></name></type> <name>filterChains</name> =<init> <expr>new <call><name><name>Vector</name><argument_list>&lt;<argument><name>FilterChain</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The Ant project */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Project</name></type> <name>project</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// CheckStyle:VisibilityModifier ON</comment>

    <comment type="javadoc">/**
     * Sets the primary reader
     * @param rdr the reader object
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPrimaryReader</name><parameter_list>(<param><decl><type><name>Reader</name></type> <name>rdr</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>primaryReader</name> = <name>rdr</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the project to work with
     * @param project the current project
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setProject</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Project</name></type> <name>project</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>project</name></name> = <name>project</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the project
     *
     * @return the current project
     */</comment>
    <function><type><specifier>public</specifier> <name>Project</name></type> <name>getProject</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>project</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the buffer size to be used.  Defaults to 8192,
     * if this method is not invoked.
     * @param size the buffer size to use
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBufferSize</name><parameter_list>(<param><decl><type><name>int</name></type> <name>size</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>bufferSize</name> = <name>size</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the collection of filter reader sets
     *
     * @param fchain the filter chains collection
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFilterChains</name><parameter_list>(<param><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>FilterChain</name></argument>&gt;</argument_list></name></type> <name>fchain</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>filterChains</name> = <name>fchain</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Assemble the reader
     * @return the assembled reader
     * @exception BuildException if an error occurs
     */</comment>
    <function><type><specifier>public</specifier> <name>Reader</name></type> <name>getAssembledReader</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>primaryReader</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"primaryReader must not be null."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <decl_stmt><decl><type><name>Reader</name></type> <name>instream</name> =<init> <expr><name>primaryReader</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>filterReadersCount</name> =<init> <expr><call><name><name>filterChains</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>finalFilters</name> =<init> <expr>new <call><name><name>Vector</name><argument_list>&lt;<argument><name>Object</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>ArrayList</name><argument_list>&lt;<argument><name>AntClassLoader</name></argument>&gt;</argument_list></name></type> <name>classLoadersToCleanUp</name> =<init>
            <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>AntClassLoader</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>filterReadersCount</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>FilterChain</name></type> <name>filterchain</name> =<init>
                <expr><call><name><name>filterChains</name>.<name>elementAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>filterReaders</name> =<init> <expr><call><name><name>filterchain</name>.<name>getFilterReaders</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>readerCount</name> =<init> <expr><call><name><name>filterReaders</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>j</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>j</name> &lt; <name>readerCount</name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
                <expr_stmt><expr><call><name><name>finalFilters</name>.<name>addElement</name></name><argument_list>(<argument><expr><call><name><name>filterReaders</name>.<name>elementAt</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></for>

        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>filtersCount</name> =<init> <expr><call><name><name>finalFilters</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>filtersCount</name> &gt; 0</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>boolean</name></type> <name>success</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
            <try>try <block>{
                <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>filtersCount</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                    <decl_stmt><decl><type><name>Object</name></type> <name>o</name> =<init> <expr><call><name><name>finalFilters</name>.<name>elementAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <if>if <condition>(<expr><name>o</name> <name>instanceof</name> <name>AntFilterReader</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>instream</name> =
                            <call><name>expandReader</name><argument_list>(<argument><expr>(<name>AntFilterReader</name>) <call><name><name>finalFilters</name>.<name>elementAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,
                                         <argument><expr><name>instream</name></expr></argument>, <argument><expr><name>classLoadersToCleanUp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else>else <if>if <condition>(<expr><name>o</name> <name>instanceof</name> <name>ChainableReader</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>setProjectOnObject</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>instream</name> = ((<name>ChainableReader</name>) <name>o</name>).<call><name>chain</name><argument_list>(<argument><expr><name>instream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>setProjectOnObject</name><argument_list>(<argument><expr><name>instream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if></else></if>
                }</block></for>
                <expr_stmt><expr><name>success</name> = true</expr>;</expr_stmt>
            }</block> <finally>finally <block>{
                <if>if <condition>(<expr>!<name>success</name> &amp;&amp; <call><name><name>classLoadersToCleanUp</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>cleanUpClassLoaders</name><argument_list>(<argument><expr><name>classLoadersToCleanUp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></finally></try>
        }</block></then></if>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Reader</name></type> <name>finalReader</name> =<init> <expr><name>instream</name></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>classLoadersToCleanUp</name>.<name>size</name></name><argument_list>()</argument_list></call> == 0 ? <name>finalReader</name>
            : new <class><super><name>FilterReader</name></super><argument_list>(<argument><expr><name>finalReader</name></expr></argument>)</argument_list> <block>{
                    <function><type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
                        <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>cleanUpClassLoaders</name><argument_list>(<argument><expr><name>classLoadersToCleanUp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></function>
                    <function><type><specifier>protected</specifier> <name>void</name></type> <name>finalize</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Throwable</name></expr></argument></throws> <block>{
                        <try>try <block>{
                            <expr_stmt><expr><call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        }</block> <finally>finally <block>{
                            <expr_stmt><expr><call><name><name>super</name>.<name>finalize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        }</block></finally></try>
                    }</block></function>
                }</block></class></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * helper method to set the project on an object.
     * the reflection setProject does not work for anonymous/protected/private
     * classes, even if they have public methods.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>setProjectOnObject</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>project</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>obj</name> <name>instanceof</name> <name>BaseFilterReader</name></expr>)</condition><then> <block>{
            <expr_stmt><expr>((<name>BaseFilterReader</name>) <name>obj</name>).<call><name>setProject</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>project</name>.<name>setProjectReference</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Deregisters Classloaders from the project so GC can remove them later.
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>cleanUpClassLoaders</name><parameter_list>(<param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>AntClassLoader</name></argument>&gt;</argument_list></name></type> <name>loaders</name></decl></param>)</parameter_list> <block>{
        <for>for (<init><decl><type><name><name>Iterator</name><argument_list>&lt;<argument><name>AntClassLoader</name></argument>&gt;</argument_list></name></type> <name>it</name> =<init> <expr><call><name><name>loaders</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>it</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
            <expr_stmt><expr><call><name><name>it</name>.<name>next</name></name><argument_list>()</argument_list></call>.<call><name>cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Read data from the reader and return the
     * contents as a string.
     * @param rdr the reader object
     * @return the contents of the file as a string
     * @exception IOException if an error occurs
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>readFully</name><parameter_list>(<param><decl><type><name>Reader</name></type> <name>rdr</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name><name>FileUtils</name>.<name>readFully</name></name><argument_list>(<argument><expr><name>rdr</name></expr></argument>, <argument><expr><name>bufferSize</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Creates and parameterizes a new FilterReader from a
     * &amp;lt;filterreader&amp;gt; element.
     *
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>private</specifier> <name>Reader</name></type> <name>expandReader</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>AntFilterReader</name></type> <name>filter</name></decl></param>,
                                <param><decl><type><specifier>final</specifier> <name>Reader</name></type> <name>ancestor</name></decl></param>,
                                <param><decl><type><specifier>final</specifier> <name><name>List</name><argument_list>&lt;<argument><name>AntClassLoader</name></argument>&gt;</argument_list></name></type> <name>classLoadersToCleanUp</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>className</name> =<init> <expr><call><name><name>filter</name>.<name>getClassName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Path</name></type> <name>classpath</name> =<init> <expr><call><name><name>filter</name>.<name>getClasspath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Project</name></type> <name>pro</name> =<init> <expr><call><name><name>filter</name>.<name>getProject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>className</name> != <name>null</name></expr>)</condition><then> <block>{
            <try>try <block>{
                <decl_stmt><decl><type><name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>clazz</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>classpath</name> == <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>clazz</name> = <call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr><name>className</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <decl_stmt><decl><type><name>AntClassLoader</name></type> <name>al</name> =<init> <expr><call><name><name>pro</name>.<name>createClassLoader</name></name><argument_list>(<argument><expr><name>classpath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>classLoadersToCleanUp</name>.<name>add</name></name><argument_list>(<argument><expr><name>al</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>clazz</name> = <call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr><name>className</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr><name>al</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <if>if <condition>(<expr><name>clazz</name> != <name>null</name></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr>!<name><name>FilterReader</name>.<name><name/></name></name>class.<call><name>isAssignableFrom</name><argument_list>(<argument><expr><name>clazz</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>className</name> + " does not extend"
                                                 + " java.io.FilterReader"</expr></argument>)</argument_list></call></expr>;</throw>
                    }</block></then></if>
                    <decl_stmt><decl><type><specifier>final</specifier> <name><name>Constructor</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name><index>[]</index></type> <name>constructors</name> =<init> <expr><call><name><name>clazz</name>.<name>getConstructors</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>j</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>boolean</name></type> <name>consPresent</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
                    <for>for (<init>;</init> <condition><expr><name>j</name> &lt; <name><name>constructors</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
                        <decl_stmt><decl><type><name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name><index>[]</index></type> <name>types</name> =<init> <expr><name><name>constructors</name><index>[<expr><name>j</name></expr>]</index></name>.<call><name>getParameterTypes</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if>if <condition>(<expr><name><name>types</name>.<name>length</name></name> == 1
                            &amp;&amp; <name><name>types</name><index>[<expr>0</expr>]</index></name>.<call><name>isAssignableFrom</name><argument_list>(<argument><expr><name><name>Reader</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                            <expr_stmt><expr><name>consPresent</name> = true</expr>;</expr_stmt>
                            <break>break;</break>
                        }</block></then></if>
                    }</block></for>
                    <if>if <condition>(<expr>!<name>consPresent</name></expr>)</condition><then> <block>{
                        <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>className</name> + " does not define"
                                                 + " a public constructor"
                                                 + " that takes in a Reader"
                                                 + " as its single argument."</expr></argument>)</argument_list></call></expr>;</throw>
                    }</block></then></if>
                    <decl_stmt><decl><type><specifier>final</specifier> <name>Reader</name><index>[]</index></type> <name>rdr</name> =<init> <expr><block>{<expr><name>ancestor</name></expr>}</block></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>Reader</name></type> <name>instream</name> =<init>
                        <expr>(<name>Reader</name>) <name><name>constructors</name><index>[<expr><name>j</name></expr>]</index></name>.<call><name>newInstance</name><argument_list>(<argument><expr>(<name><name>Object</name><index>[]</index></name>) <name>rdr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>setProjectOnObject</name><argument_list>(<argument><expr><name>instream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name><name>Parameterizable</name>.<name><name/></name></name>class.<call><name>isAssignableFrom</name><argument_list>(<argument><expr><name>clazz</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><specifier>final</specifier> <name>Parameter</name><index>[]</index></type> <name>params</name> =<init> <expr><call><name><name>filter</name>.<name>getParams</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr>((<name>Parameterizable</name>) <name>instream</name>).<call><name>setParameters</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <return>return <expr><name>instream</name></expr>;</return>
                }</block></then></if>
            }</block> <catch>catch (<param><decl><type><specifier>final</specifier> <name>ClassNotFoundException</name></type> <name>cnfe</name></decl></param>) <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>cnfe</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch> <catch>catch (<param><decl><type><specifier>final</specifier> <name>InstantiationException</name></type> <name>ie</name></decl></param>) <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>ie</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch> <catch>catch (<param><decl><type><specifier>final</specifier> <name>IllegalAccessException</name></type> <name>iae</name></decl></param>) <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>iae</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch> <catch>catch (<param><decl><type><specifier>final</specifier> <name>InvocationTargetException</name></type> <name>ite</name></decl></param>) <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>ite</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></then></if>
        <comment type="line">// Ant 1.7.1 and earlier ignore &lt;filterreader&gt; without a</comment>
        <comment type="line">// classname attribute, not sure this is a good idea -</comment>
        <comment type="line">// backwards compatibility makes it hard to change, though.</comment>
        <return>return <expr><name>ancestor</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
