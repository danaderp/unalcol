<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\jsp\compilers\JasperC.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>jsp</name>.<name>compilers</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>AntClassLoader</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>Java</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>jsp</name>.<name>JspC</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>jsp</name>.<name>JspMangler</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>CommandlineJava</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Path</name></name>;</import>

<comment type="javadoc">/**
 * The implementation of the jasper compiler.
 * This is a cut-and-paste of the original Jspc task.
 *
 * @since ant1.5
 */</comment>
<class><specifier>public</specifier> class <name>JasperC</name> <super><extends>extends <name>DefaultJspCompilerAdapter</name></extends></super> <block>{

    <comment type="line">// CheckStyle:VisibilityModifier OFF - bc</comment>

    <comment type="javadoc">/**
     * what produces java classes from .jsp files
     */</comment>
    <decl_stmt><decl><type><name>JspMangler</name></type> <name>mangler</name></decl>;</decl_stmt>

    <comment type="line">// CheckStyle:VisibilityModifier ON</comment>

    <comment type="javadoc">/**
     * Constructor for JasperC.
     * @param mangler a filename converter
     */</comment>
    <constructor><specifier>public</specifier> <name>JasperC</name><parameter_list>(<param><decl><type><name>JspMangler</name></type> <name>mangler</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>mangler</name></name> = <name>mangler</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Our execute method.
     * @return true if successful
     * @throws BuildException on error
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>execute</name><parameter_list>()</parameter_list>
        <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>getJspc</name><argument_list>()</argument_list></call>.<call><name>log</name><argument_list>(<argument><expr>"Using jasper compiler"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>CommandlineJava</name></type> <name>cmd</name> =<init> <expr><call><name>setupJasperCommand</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <try>try <block>{
            <comment type="line">// Create an instance of the compiler, redirecting output to</comment>
            <comment type="line">// the project log</comment>
            <decl_stmt><decl><type><name>Java</name></type> <name>java</name> =<init> <expr>new <call><name>Java</name><argument_list>(<argument><expr><name>owner</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Path</name></type> <name>p</name> =<init> <expr><call><name>getClasspath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name>getJspc</name><argument_list>()</argument_list></call>.<call><name>getClasspath</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>log</name><argument_list>(<argument><expr>"using user supplied classpath: " + <name>p</name></expr></argument>,
                                 <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>log</name><argument_list>(<argument><expr>"using system classpath: " + <name>p</name></expr></argument>,
                                 <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><call><name><name>java</name>.<name>setClasspath</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>java</name>.<name>setDir</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>java</name>.<name>setClassname</name></name><argument_list>(<argument><expr>"org.apache.jasper.JspC"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">//this is really irritating; we need a way to set stuff</comment>
            <decl_stmt><decl><type><name>String</name> <index>[]</index></type><name>args</name> =<init> <expr><call><name><name>cmd</name>.<name>getJavaCommand</name></name><argument_list>()</argument_list></call>.<call><name>getArguments</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>args</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <expr_stmt><expr><call><name><name>java</name>.<name>createArg</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><call><name><name>java</name>.<name>setFailonerror</name></name><argument_list>(<argument><expr><call><name>getJspc</name><argument_list>()</argument_list></call>.<call><name>getFailonerror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">//we are forking here to be sure that if JspC calls</comment>
            <comment type="line">//System.exit() it doesn't halt the build</comment>
            <expr_stmt><expr><call><name><name>java</name>.<name>setFork</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>java</name>.<name>setTaskName</name></name><argument_list>(<argument><expr>"jasperc"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>java</name>.<name>execute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>true</expr>;</return>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>ex</name></decl></param>) <block>{
            <if>if <condition>(<expr><name>ex</name> <name>instanceof</name> <name>BuildException</name></expr>)</condition><then> <block>{
                <throw>throw <expr>(<name>BuildException</name>) <name>ex</name></expr>;</throw>
            }</block></then> <else>else <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Error running jsp compiler: "</expr></argument>,
                                         <argument><expr><name>ex</name></expr></argument>, <argument><expr><call><name>getJspc</name><argument_list>()</argument_list></call>.<call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></else></if>
        }</block></catch> <finally>finally <block>{
            <expr_stmt><expr><call><name>getJspc</name><argument_list>()</argument_list></call>.<call><name>deleteEmptyJavaFiles</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>



    <comment type="javadoc">/**
     * build up a command line
     * @return a command line for jasper
     */</comment>
    <function><type><specifier>private</specifier> <name>CommandlineJava</name></type> <name>setupJasperCommand</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>CommandlineJava</name></type> <name>cmd</name> =<init> <expr>new <call><name>CommandlineJava</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>JspC</name></type> <name>jspc</name> =<init> <expr><call><name>getJspc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>addArg</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr>"-d"</expr></argument>, <argument><expr><call><name><name>jspc</name>.<name>getDestdir</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addArg</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr>"-p"</expr></argument>, <argument><expr><call><name><name>jspc</name>.<name>getPackage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr>!<call><name>isTomcat5x</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>addArg</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr>"-v" + <call><name><name>jspc</name>.<name>getVerbose</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>log</name><argument_list>(<argument><expr>"this task doesn't support Tomcat 5.x properly, "
                             + "please use the Tomcat provided jspc task "
                             + "instead"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <expr_stmt><expr><call><name>addArg</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr>"-uriroot"</expr></argument>, <argument><expr><call><name><name>jspc</name>.<name>getUriroot</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addArg</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr>"-uribase"</expr></argument>, <argument><expr><call><name><name>jspc</name>.<name>getUribase</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addArg</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr>"-ieplugin"</expr></argument>, <argument><expr><call><name><name>jspc</name>.<name>getIeplugin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addArg</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr>"-webinc"</expr></argument>, <argument><expr><call><name><name>jspc</name>.<name>getWebinc</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addArg</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr>"-webxml"</expr></argument>, <argument><expr><call><name><name>jspc</name>.<name>getWebxml</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addArg</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr>"-die9"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name><name>jspc</name>.<name>isMapped</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>addArg</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr>"-mapped"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>jspc</name>.<name>getWebApp</name></name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>File</name></type> <name>dir</name> =<init> <expr><call><name><name>jspc</name>.<name>getWebApp</name></name><argument_list>()</argument_list></call>.<call><name>getDirectory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>addArg</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr>"-webapp"</expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>logAndAddFilesToCompile</name><argument_list>(<argument><expr><call><name>getJspc</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getJspc</name><argument_list>()</argument_list></call>.<call><name>getCompileList</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>cmd</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * @return an instance of the mangler this compiler uses
     */</comment>

    <function><type><specifier>public</specifier> <name>JspMangler</name></type> <name>createMangler</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>mangler</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * @since Ant 1.6.2
     */</comment>
    <function><type><specifier>private</specifier> <name>Path</name></type> <name>getClasspath</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Path</name></type> <name>p</name> =<init> <expr><call><name>getJspc</name><argument_list>()</argument_list></call>.<call><name>getClasspath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>p</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>p</name> = new <call><name>Path</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>p</name>.<name>concatSystemClasspath</name></name><argument_list>(<argument><expr>"only"</expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
            <return>return <expr><call><name><name>p</name>.<name>concatSystemClasspath</name></name><argument_list>(<argument><expr>"ignore"</expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * @since Ant 1.6.2
     */</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>isTomcat5x</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>AntClassLoader</name></type> <name>l</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>l</name> = <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>createClassLoader</name><argument_list>(<argument><expr><call><name>getClasspath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>l</name>.<name>loadClass</name></name><argument_list>(<argument><expr>"org.apache.jasper.tagplugins.jstl.If"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>true</expr>;</return>
        }</block> <catch>catch (<param><decl><type><name>ClassNotFoundException</name></type> <name>e</name></decl></param>) <block>{
            <return>return <expr>false</expr>;</return>
        }</block></catch> <finally>finally <block>{
            <if>if <condition>(<expr><name>l</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>l</name>.<name>cleanup</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></finally></try>
    }</block></function>
}</block></class>
</unit>
