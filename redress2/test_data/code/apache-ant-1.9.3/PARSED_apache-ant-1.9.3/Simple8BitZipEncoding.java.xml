<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\zip\Simple8BitZipEncoding.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>zip</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collections</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<comment type="javadoc">/**
 * This ZipEncoding implementation implements a simple 8bit character
 * set, which mets the following restrictions:
 * 
 * &lt;ul&gt;
 * &lt;li&gt;Characters 0x0000 to 0x007f are encoded as the corresponding
 *        byte values 0x00 to 0x7f.&lt;/li&gt;
 * &lt;li&gt;All byte codes from 0x80 to 0xff are mapped to a unique unicode
 *       character in the range 0x0080 to 0x7fff. (No support for
 *       UTF-16 surrogates)
 * &lt;/ul&gt;
 * 
 * &lt;p&gt;These restrictions most notably apply to the most prominent
 * omissions of java-1.4's {@link java.nio.charset.Charset Charset}
 * implementation, Cp437 and Cp850.&lt;/p&gt;
 * 
 * &lt;p&gt;The methods of this class are reentrant.&lt;/p&gt;
 */</comment>
<class>class <name>Simple8BitZipEncoding</name> <super><implements>implements <name>ZipEncoding</name></implements></super> <block>{

    <comment type="javadoc">/**
     * A character entity, which is put to the reverse mapping table
     * of a simple encoding.
     */</comment>
    <class><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>Simple8BitChar</name> <super><implements>implements <name><name>Comparable</name><argument_list>&lt;<argument><name>Simple8BitChar</name></argument>&gt;</argument_list></name></implements></super> <block>{
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>char</name></type> <name>unicode</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>byte</name></type> <name>code</name></decl>;</decl_stmt>

        <constructor><name>Simple8BitChar</name><parameter_list>(<param><decl><type><name>byte</name></type> <name>code</name></decl></param>, <param><decl><type><name>char</name></type> <name>unicode</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>code</name></name> = <name>code</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>unicode</name></name> = <name>unicode</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<param><decl><type><name>Simple8BitChar</name></type> <name>a</name></decl></param>)</parameter_list> <block>{
            <return>return <expr><name><name>this</name>.<name>unicode</name></name> - <name><name>a</name>.<name>unicode</name></name></expr>;</return>
        }</block></function>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr>"0x" + <call><name><name>Integer</name>.<name>toHexString</name></name><argument_list>(<argument><expr>0xffff &amp; <name>unicode</name></expr></argument>)</argument_list></call>
                + "-&gt;0x" + <call><name><name>Integer</name>.<name>toHexString</name></name><argument_list>(<argument><expr>0xff &amp; <name>code</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>o</name></decl></param>)</parameter_list> <block>{
            <if>if <condition>(<expr><name>o</name> <name>instanceof</name> <name>Simple8BitChar</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>Simple8BitChar</name></type> <name>other</name> =<init> <expr>(<name>Simple8BitChar</name>) <name>o</name></expr></init></decl>;</decl_stmt>
                <return>return <expr><name>unicode</name> == <name><name>other</name>.<name>unicode</name></name> &amp;&amp; <name>code</name> == <name><name>other</name>.<name>code</name></name></expr>;</return>
            }</block></then></if>
            <return>return <expr>false</expr>;</return>
        }</block></function>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>unicode</name></expr>;</return>
        }</block></function>
    }</block></class>

    <comment type="javadoc">/**
     * The characters for byte values of 128 to 255 stored as an array of
     * 128 chars.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>char</name><index>[]</index></type> <name>highChars</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * A list of {@link Simple8BitChar} objects sorted by the unicode
     * field.  This list is used to binary search reverse mapping of
     * unicode characters with a character code greater than 127.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list>&lt;<argument><name>Simple8BitChar</name></argument>&gt;</argument_list></name></type> <name>reverseMapping</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * @param highChars The characters for byte values of 128 to 255
     * stored as an array of 128 chars.
     */</comment>
    <constructor><specifier>public</specifier> <name>Simple8BitZipEncoding</name><parameter_list>(<param><decl><type><name><name>char</name><index>[]</index></name></type> <name>highChars</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>highChars</name></name> = <call><name><name>highChars</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list>&lt;<argument><name>Simple8BitChar</name></argument>&gt;</argument_list></name></type> <name>temp</name> =<init>
            <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>Simple8BitChar</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>this</name>.<name>highChars</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>byte</name></type> <name>code</name> =<init> <expr>127</expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>this</name>.<name>highChars</name>.<name>length</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>temp</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>Simple8BitChar</name><argument_list>(<argument><expr>++<name>code</name></expr></argument>, <argument><expr><name><name>this</name>.<name>highChars</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <expr_stmt><expr><call><name><name>Collections</name>.<name>sort</name></name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>reverseMapping</name></name> = <call><name><name>Collections</name>.<name>unmodifiableList</name></name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Return the character code for a given encoded byte.
     * 
     * @param b The byte to decode.
     * @return The associated character value.
     */</comment>
    <function><type><specifier>public</specifier> <name>char</name></type> <name>decodeByte</name><parameter_list>(<param><decl><type><name>byte</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// code 0-127</comment>
        <if>if <condition>(<expr><name>b</name> &gt;= 0</expr>)</condition><then> <block>{
            <return>return <expr>(<name>char</name>) <name>b</name></expr>;</return>
        }</block></then></if>

        <comment type="line">// byte is signed, so 128 == -128 and 255 == -1</comment>
        <return>return <expr><name><name>this</name>.<name>highChars</name><index>[<expr>128 + <name>b</name></expr>]</index></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * @param c The character to encode.
     * @return Whether the given unicode character is covered by this encoding.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>canEncodeChar</name><parameter_list>(<param><decl><type><name>char</name></type> <name>c</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name>c</name> &gt;= 0 &amp;&amp; <name>c</name> &lt; 128</expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>Simple8BitChar</name></type> <name>r</name> =<init> <expr><call><name><name>this</name>.<name>encodeHighChar</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>r</name> != <name>null</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Pushes the encoded form of the given character to the given byte buffer.
     * 
     * @param bb The byte buffer to write to.
     * @param c The character to encode.
     * @return Whether the given unicode character is covered by this encoding.
     *         If {@code false} is returned, nothing is pushed to the
     *         byte buffer. 
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>pushEncodedChar</name><parameter_list>(<param><decl><type><name>ByteBuffer</name></type> <name>bb</name></decl></param>, <param><decl><type><name>char</name></type> <name>c</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name>c</name> &gt;= 0 &amp;&amp; <name>c</name> &lt; 128</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>bb</name>.<name>put</name></name><argument_list>(<argument><expr>(<name>byte</name>) <name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>true</expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>Simple8BitChar</name></type> <name>r</name> =<init> <expr><call><name><name>this</name>.<name>encodeHighChar</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>r</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>bb</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>r</name>.<name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>true</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * @param c A unicode character in the range from 0x0080 to 0x7f00
     * @return A Simple8BitChar, if this character is covered by this encoding.
     *         A {@code null} value is returned, if this character is not
     *         covered by this encoding.
     */</comment>
    <function><type><specifier>private</specifier> <name>Simple8BitChar</name></type> <name>encodeHighChar</name><parameter_list>(<param><decl><type><name>char</name></type> <name>c</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// for performance an simplicity, yet another reincarnation of</comment>
        <comment type="line">// binary search...</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>i0</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i1</name> =<init> <expr><call><name><name>this</name>.<name>reverseMapping</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <while>while <condition>(<expr><name>i1</name> &gt; <name>i0</name></expr>)</condition> <block>{

            <decl_stmt><decl><type><name>int</name></type> <name>i</name> =<init> <expr><name>i0</name> + (<name>i1</name> - <name>i0</name>) / 2</expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>Simple8BitChar</name></type> <name>m</name> =<init> <expr><call><name><name>this</name>.<name>reverseMapping</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name><name>m</name>.<name>unicode</name></name> == <name>c</name></expr>)</condition><then> <block>{
                <return>return <expr><name>m</name></expr>;</return>
            }</block></then></if>

            <if>if <condition>(<expr><name><name>m</name>.<name>unicode</name></name> &lt; <name>c</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>i0</name> = <name>i</name> + 1</expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>i1</name> = <name>i</name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></while>

        <if>if <condition>(<expr><name>i0</name> &gt;= <call><name><name>this</name>.<name>reverseMapping</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>Simple8BitChar</name></type> <name>r</name> =<init> <expr><call><name><name>this</name>.<name>reverseMapping</name>.<name>get</name></name><argument_list>(<argument><expr><name>i0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name><name>r</name>.<name>unicode</name></name> != <name>c</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>

        <return>return <expr><name>r</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * @see
     * org.apache.tools.zip.ZipEncoding#canEncode(java.lang.String)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>canEncode</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{

        <for>for (<init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init><condition><expr><name>i</name>&lt;<call><name><name>name</name>.<name>length</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr>++<name>i</name></expr></incr>) <block>{

            <decl_stmt><decl><type><name>char</name></type> <name>c</name> =<init> <expr><call><name><name>name</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr>!<call><name><name>this</name>.<name>canEncodeChar</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>
            }</block></then></if>
        }</block></for>

        <return>return <expr>true</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * @see
     * org.apache.tools.zip.ZipEncoding#encode(java.lang.String)
     */</comment>
    <function><type><specifier>public</specifier> <name>ByteBuffer</name></type> <name>encode</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>out</name> =<init> <expr><call><name><name>ByteBuffer</name>.<name>allocate</name></name><argument_list>(<argument><expr><call><name><name>name</name>.<name>length</name></name><argument_list>()</argument_list></call>
                                             + 6 + (<call><name><name>name</name>.<name>length</name></name><argument_list>()</argument_list></call> + 1) / 2</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init><condition><expr><name>i</name>&lt;<call><name><name>name</name>.<name>length</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr>++<name>i</name></expr></incr>) <block>{

            <decl_stmt><decl><type><name>char</name></type> <name>c</name> =<init> <expr><call><name><name>name</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><call><name><name>out</name>.<name>remaining</name></name><argument_list>()</argument_list></call> &lt; 6</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>out</name> = <call><name><name>ZipEncodingHelper</name>.<name>growBuffer</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>,<argument><expr><call><name><name>out</name>.<name>position</name></name><argument_list>()</argument_list></call> + 6</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <if>if <condition>(<expr>!<call><name><name>this</name>.<name>pushEncodedChar</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{

                <expr_stmt><expr><call><name><name>ZipEncodingHelper</name>.<name>appendSurrogate</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>

        <expr_stmt><expr><call><name><name>out</name>.<name>limit</name></name><argument_list>(<argument><expr><call><name><name>out</name>.<name>position</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>out</name>.<name>rewind</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>out</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * @see
     * org.apache.tools.zip.ZipEncoding#decode(byte[])
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>decode</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>char</name> <index>[]</index></type> <name>ret</name> =<init> <expr>new <name><name>char</name><index>[<expr><name><name>data</name>.<name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>;</init><condition><expr><name>i</name>&lt;<name><name>data</name>.<name>length</name></name></expr>;</condition><incr><expr>++<name>i</name></expr></incr>) <block>{
            <expr_stmt><expr><name><name>ret</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name><name>this</name>.<name>decodeByte</name></name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <return>return <expr>new <call><name>String</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


}</block></class>
</unit>
