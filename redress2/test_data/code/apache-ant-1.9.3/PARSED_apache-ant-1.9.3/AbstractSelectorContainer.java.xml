<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\types\selectors\AbstractSelectorContainer.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Stack</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>DataType</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>modifiedselector</name>.<name>ModifiedSelector</name></name>;</import>

<comment type="javadoc">/**
 * This is the a base class a container of selectors - it does
 * not need do be a selector itself.
 *
 * @since 1.7
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>AbstractSelectorContainer</name> <super><extends>extends <name>DataType</name></extends>
    <implements>implements <name>Cloneable</name>, <name>SelectorContainer</name></implements></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>FileSelector</name></argument>&gt;</argument_list></name></type> <name>selectorsList</name> =<init> <expr>new <call><name><name>Vector</name><argument_list>&lt;<argument><name>FileSelector</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Indicates whether there are any selectors here.
     * @return true if there are selectors
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasSelectors</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>((<name>AbstractSelectorContainer</name>) <call><name>getCheckedRef</name><argument_list>()</argument_list></call>).<call><name>hasSelectors</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>dieOnCircularReference</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>!(<call><name><name>selectorsList</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call>)</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Gives the count of the number of selectors in this container
     * @return the number of selectors
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>selectorCount</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>((<name>AbstractSelectorContainer</name>) <call><name>getCheckedRef</name><argument_list>()</argument_list></call>).<call><name>selectorCount</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>dieOnCircularReference</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>selectorsList</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the set of selectors as an array.
     * @param p the current project
     * @return an array of selectors
     */</comment>
    <function><type><specifier>public</specifier> <name>FileSelector</name><index>[]</index></type> <name>getSelectors</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>p</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>((<name>AbstractSelectorContainer</name>) <call><name>getCheckedRef</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call>)
                .<call><name>getSelectors</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>dieOnCircularReference</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>FileSelector</name><index>[]</index></type> <name>result</name> =<init> <expr>new <name><name>FileSelector</name><index>[<expr><call><name><name>selectorsList</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>selectorsList</name>.<name>copyInto</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns an enumerator for accessing the set of selectors.
     * @return an enumerator for the selectors
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Enumeration</name><argument_list>&lt;<argument><name>FileSelector</name></argument>&gt;</argument_list></name></type> <name>selectorElements</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>((<name>AbstractSelectorContainer</name>) <call><name>getCheckedRef</name><argument_list>()</argument_list></call>)
                .<call><name>selectorElements</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>dieOnCircularReference</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>selectorsList</name>.<name>elements</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Convert the Selectors within this container to a string. This will
     * just be a helper class for the subclasses that put their own name
     * around the contents listed here.
     *
     * @return comma separated list of Selectors contained in this one
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>buf</name> =<init> <expr>new <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Enumeration</name><argument_list>&lt;<argument><name>FileSelector</name></argument>&gt;</argument_list></name></type> <name>e</name> =<init> <expr><call><name>selectorElements</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <while>while <condition>(<expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr>", "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></while>
        }</block></then></if>

        <return>return <expr><call><name><name>buf</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Add a new selector into this container.
     *
     * @param selector the new selector to add
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>appendSelector</name><parameter_list>(<param><decl><type><name>FileSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr><call><name>noChildrenAllowed</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>selectorsList</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setChecked</name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * &lt;p&gt;
     * This validates each contained selector
     * provided that the selector implements the validate interface.
     * &lt;/p&gt;
     * &lt;p&gt;Ordinarily, this will validate all the elements of a selector
     * container even if the isSelected() method of some elements is
     * never called. This has two effects:&lt;/p&gt;
     * &lt;ul&gt;
     * &lt;li&gt;Validation will often occur twice.
     * &lt;li&gt;Since it is not required that selectors derive from
     * BaseSelector, there could be selectors in the container whose
     * error conditions are not detected if their isSelected() call
     * is never made.
     * &lt;/ul&gt;
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>validate</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr>((<name>AbstractSelectorContainer</name>) <call><name>getCheckedRef</name><argument_list>()</argument_list></call>).<call><name>validate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>dieOnCircularReference</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>Enumeration</name><argument_list>&lt;<argument><name>FileSelector</name></argument>&gt;</argument_list></name></type> <name>e</name> =<init> <expr><call><name>selectorElements</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>Object</name></type> <name>o</name> =<init> <expr><call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>o</name> <name>instanceof</name> <name>BaseSelector</name></expr>)</condition><then> <block>{
                <expr_stmt><expr>((<name>BaseSelector</name>) <name>o</name>).<call><name>validate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></while>
    }</block></function>


    <comment type="block">/* Methods below all add specific selectors */</comment>

    <comment type="javadoc">/**
     * add a "Select" selector entry on the selector list
     * @param selector the selector to add
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addSelector</name><parameter_list>(<param><decl><type><name>SelectSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>appendSelector</name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * add an "And" selector entry on the selector list
     * @param selector the selector to add
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addAnd</name><parameter_list>(<param><decl><type><name>AndSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>appendSelector</name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * add an "Or" selector entry on the selector list
     * @param selector the selector to add
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addOr</name><parameter_list>(<param><decl><type><name>OrSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>appendSelector</name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * add a "Not" selector entry on the selector list
     * @param selector the selector to add
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addNot</name><parameter_list>(<param><decl><type><name>NotSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>appendSelector</name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * add a "None" selector entry on the selector list
     * @param selector the selector to add
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addNone</name><parameter_list>(<param><decl><type><name>NoneSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>appendSelector</name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * add a majority selector entry on the selector list
     * @param selector the selector to add
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addMajority</name><parameter_list>(<param><decl><type><name>MajoritySelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>appendSelector</name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * add a selector date entry on the selector list
     * @param selector the selector to add
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addDate</name><parameter_list>(<param><decl><type><name>DateSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>appendSelector</name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * add a selector size entry on the selector list
     * @param selector the selector to add
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addSize</name><parameter_list>(<param><decl><type><name>SizeSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>appendSelector</name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * add a selector filename entry on the selector list
     * @param selector the selector to add
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addFilename</name><parameter_list>(<param><decl><type><name>FilenameSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>appendSelector</name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * add an extended selector entry on the selector list
     * @param selector the selector to add
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addCustom</name><parameter_list>(<param><decl><type><name>ExtendSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>appendSelector</name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * add a contains selector entry on the selector list
     * @param selector the selector to add
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addContains</name><parameter_list>(<param><decl><type><name>ContainsSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>appendSelector</name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * add a present selector entry on the selector list
     * @param selector the selector to add
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addPresent</name><parameter_list>(<param><decl><type><name>PresentSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>appendSelector</name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * add a depth selector entry on the selector list
     * @param selector the selector to add
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addDepth</name><parameter_list>(<param><decl><type><name>DepthSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>appendSelector</name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * add a depends selector entry on the selector list
     * @param selector the selector to add
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addDepend</name><parameter_list>(<param><decl><type><name>DependSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>appendSelector</name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * adds a different selector to the selector list
     * @param selector the selector to add
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addDifferent</name><parameter_list>(<param><decl><type><name>DifferentSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>appendSelector</name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * adds a type selector to the selector list
     * @param selector the selector to add
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addType</name><parameter_list>(<param><decl><type><name>TypeSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>appendSelector</name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * add a regular expression selector entry on the selector list
     * @param selector the selector to add
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addContainsRegexp</name><parameter_list>(<param><decl><type><name>ContainsRegexpSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>appendSelector</name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * add the modified selector
     * @param selector the selector to add
     * @since ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addModified</name><parameter_list>(<param><decl><type><name>ModifiedSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>appendSelector</name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addReadable</name><parameter_list>(<param><decl><type><name>ReadableSelector</name></type> <name>r</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>appendSelector</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addWritable</name><parameter_list>(<param><decl><type><name>WritableSelector</name></type> <name>w</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>appendSelector</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * add an arbitrary selector
     * @param selector the selector to add
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>FileSelector</name></type> <name>selector</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>appendSelector</name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>protected</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>dieOnCircularReference</name><parameter_list>(<param><decl><type><name><name>Stack</name><argument_list>&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>stk</name></decl></param>, <param><decl><type><name>Project</name></type> <name>p</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isChecked</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>super</name>.<name>dieOnCircularReference</name></name><argument_list>(<argument><expr><name>stk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <for>for (<init><decl><type><name>FileSelector</name></type> <name>fileSelector</name> :<range> <expr><name>selectorsList</name></expr></range></decl></init>) <block>{
                <if>if <condition>(<expr><name>fileSelector</name> <name>instanceof</name> <name>DataType</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>pushAndInvokeCircularReferenceCheck</name><argument_list>(<argument><expr>(<name>DataType</name>) <name>fileSelector</name></expr></argument>, <argument><expr><name>stk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
            <expr_stmt><expr><call><name>setChecked</name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>((<name>AbstractSelectorContainer</name>) <call><name>getCheckedRef</name><argument_list>()</argument_list></call>).<call><name>clone</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <try>try <block>{
            <decl_stmt><decl><type><name>AbstractSelectorContainer</name></type> <name>sc</name> =<init>
                <expr>(<name>AbstractSelectorContainer</name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>sc</name>.<name>selectorsList</name></name> = new <call><name><name>Vector</name><argument_list>&lt;<argument><name>FileSelector</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>selectorsList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>sc</name></expr>;</return>
        }</block> <catch>catch (<param><decl><type><name>CloneNotSupportedException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>
}</block></class>
</unit>
