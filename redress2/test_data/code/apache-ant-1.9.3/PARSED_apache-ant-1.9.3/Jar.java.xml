<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\Jar.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>ByteArrayInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ByteArrayOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStreamReader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>OutputStreamWriter</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>PrintWriter</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Reader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>UnsupportedEncodingException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collections</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Comparator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashSet</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>StringTokenizer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>TreeMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>zip</name>.<name>ZipEntry</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>zip</name>.<name>ZipFile</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>Manifest</name>.<name>Section</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>ArchiveFileSet</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>EnumeratedAttribute</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>FileSet</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Path</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Resource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>ResourceCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>ZipFileSet</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>spi</name>.<name>Service</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>zip</name>.<name>JarMarker</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>zip</name>.<name>ZipExtraField</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>zip</name>.<name>ZipOutputStream</name></name>;</import>

<comment type="javadoc">/**
 * Creates a JAR archive.
 *
 * @since Ant 1.1
 *
 * @ant.task category="packaging"
 */</comment>
<class><specifier>public</specifier> class <name>Jar</name> <super><extends>extends <name>Zip</name></extends></super> <block>{
    <comment type="javadoc">/** The index file name. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>INDEX_NAME</name> =<init> <expr>"META-INF/INDEX.LIST"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The manifest file name. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>MANIFEST_NAME</name> =<init> <expr>"META-INF/MANIFEST.MF"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * List of all known SPI Services
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>List</name><argument_list>&lt;<argument><name>Service</name></argument>&gt;</argument_list></name></type> <name>serviceList</name> =<init> <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>Service</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** merged manifests added through addConfiguredManifest */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Manifest</name></type> <name>configuredManifest</name></decl>;</decl_stmt>

    <comment type="javadoc">/** shadow of the above if upToDate check alters the value */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Manifest</name></type> <name>savedConfiguredManifest</name></decl>;</decl_stmt>

    <comment type="javadoc">/**  merged manifests added through filesets */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Manifest</name></type> <name>filesetManifest</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Manifest of original archive, will be set to null if not in
     * update mode.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Manifest</name></type> <name>originalManifest</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     *  whether to merge fileset manifests;
     *  value is true if filesetmanifest is 'merge' or 'mergewithoutmain'
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>FilesetManifestConfig</name></type> <name>filesetManifestConfig</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * whether to merge the main section of fileset manifests;
     * value is true if filesetmanifest is 'merge'
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>mergeManifestsMain</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** the manifest specified by the 'manifest' attribute **/</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Manifest</name></type> <name>manifest</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The encoding to use when reading in a manifest file */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>manifestEncoding</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The file found from the 'manifest' attribute.  This can be
     * either the location of a manifest, or the name of a jar added
     * through a fileset.  If its the name of an added jar, the
     * manifest is looked for in META-INF/MANIFEST.MF
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>manifestFile</name></decl>;</decl_stmt>

    <comment type="javadoc">/** jar index is JDK 1.3+ only */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>index</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Whether to index META-INF/ and its children */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>indexMetaInf</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * whether to really create the archive in createEmptyZip, will
     * get set in getResourcesToAdd.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>createEmpty</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Stores all files that are in the root of the archive (i.e. that
     * have a name that doesn't contain a slash) so they can get
     * listed in the index.
     *
     * Will not be filled unless the user has asked for an index.
     *
     * @since Ant 1.6
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>rootEntries</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Path containing jars that shall be indexed in addition to this archive.
     *
     * @since Ant 1.6.2
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Path</name></type> <name>indexJars</name></decl>;</decl_stmt>

    <comment type="line">// CheckStyle:LineLength OFF - Link is too long.</comment>
    <comment type="javadoc">/**
     * Strict mode for checking rules of the JAR-Specification.
     * @see http://java.sun.com/j2se/1.3/docs/guide/versioning/spec/VersioningSpecification.html#PackageVersioning
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>StrictMode</name></type> <name>strict</name> =<init> <expr>new <call><name>StrictMode</name><argument_list>(<argument><expr>"ignore"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// CheckStyle:LineLength ON</comment>

    <comment type="javadoc">/**
     * whether to merge Class-Path attributes.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>mergeClassPaths</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * whether to flatten Class-Path attributes into a single one.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>flattenClassPaths</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Extra fields needed to make Solaris recognize the archive as a jar file.
     *
     * @since Ant 1.6.3
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ZipExtraField</name><index>[]</index></type> <name>JAR_MARKER</name> =<init> <expr>new <name><name>ZipExtraField</name><index>[]</index></name> <block>{
        <expr><call><name><name>JarMarker</name>.<name>getInstance</name></name><argument_list>()</argument_list></call></expr>
    }</block></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** constructor */</comment>
    <constructor><specifier>public</specifier> <name>Jar</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>archiveType</name> = "jar"</expr>;</expr_stmt>
        <expr_stmt><expr><name>emptyBehavior</name> = "create"</expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setEncoding</name><argument_list>(<argument><expr>"UTF8"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setZip64Mode</name><argument_list>(<argument><expr><name><name>Zip64ModeAttribute</name>.<name>NEVER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rootEntries</name> = new <call><name><name>Vector</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Not used for jar files.
     * @param we not used
     * @ant.attribute ignore="true"
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setWhenempty</name><parameter_list>(<param><decl><type><name>WhenEmpty</name></type> <name>we</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"JARs are never empty, they contain at least a manifest file"</expr></argument>,
            <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Indicates if a jar file should be created when it would only contain a
     * manifest file.
     * Possible values are: &lt;code&gt;fail&lt;/code&gt; (throw an exception
     * and halt the build); &lt;code&gt;skip&lt;/code&gt; (do not create
     * any archive, but issue a warning); &lt;code&gt;create&lt;/code&gt;
     * (make an archive with only a manifest file).
     * Default is &lt;code&gt;create&lt;/code&gt;;
     * @param we a &lt;code&gt;WhenEmpty&lt;/code&gt; enumerated value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setWhenmanifestonly</name><parameter_list>(<param><decl><type><name>WhenEmpty</name></type> <name>we</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>emptyBehavior</name> = <call><name><name>we</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Activate the strict mode. When set to &lt;i&gt;true&lt;/i&gt; a BuildException
     * will be thrown if the Jar-Packaging specification was broken.
     * @param strict New value of the strict mode.
     * @since Ant 1.7.1
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setStrict</name><parameter_list>(<param><decl><type><name>StrictMode</name></type> <name>strict</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>strict</name></name> = <name>strict</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the destination file.
     * @param jarFile the destination file
     * @deprecated since 1.5.x.
     *             Use setDestFile(File) instead.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setJarfile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>jarFile</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setDestFile</name><argument_list>(<argument><expr><name>jarFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set whether or not to create an index list for classes.
     * This may speed up classloading in some cases.
     * @param flag a &lt;code&gt;boolean&lt;/code&gt; value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setIndex</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>index</name> = <name>flag</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set whether or not to add META-INF and its children to the index.
     *
     * &lt;p&gt;Doesn't have any effect if index is false.&lt;/p&gt;
     *
     * &lt;p&gt;Sun's jar implementation used to skip the META-INF directory
     * and Ant followed that example.  The behavior has been changed
     * with Java 5.  In order to avoid problems with Ant generated
     * jars on Java 1.4 or earlier Ant will not include META-INF
     * unless explicitly asked to.&lt;/p&gt;
     *
     * @see &lt;a href="http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4408526"&gt;
     * jar -i omits service providers in index.list&lt;/a&gt;
     * @since Ant 1.8.0
     * @param flag a &lt;code&gt;boolean&lt;/code&gt; value, defaults to false
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setIndexMetaInf</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>indexMetaInf</name> = <name>flag</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The character encoding to use in the manifest file.
     *
     * @param manifestEncoding the character encoding
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setManifestEncoding</name><parameter_list>(<param><decl><type><name>String</name></type> <name>manifestEncoding</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>manifestEncoding</name></name> = <name>manifestEncoding</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Allows the manifest for the archive file to be provided inline
     * in the build file rather than in an external file.
     *
     * @param newManifest an embedded manifest element
     * @throws ManifestException on error
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addConfiguredManifest</name><parameter_list>(<param><decl><type><name>Manifest</name></type> <name>newManifest</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>ManifestException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>configuredManifest</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>configuredManifest</name> = <name>newManifest</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>configuredManifest</name>.<name>merge</name></name><argument_list>(<argument><expr><name>newManifest</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr><name>mergeClassPaths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>savedConfiguredManifest</name> = <name>configuredManifest</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The manifest file to use. This can be either the location of a manifest,
     * or the name of a jar added through a fileset. If its the name of an added
     * jar, the task expects the manifest to be in the jar at META-INF/MANIFEST.MF.
     *
     * @param manifestFile the manifest file to use.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setManifest</name><parameter_list>(<param><decl><type><name>File</name></type> <name>manifestFile</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr>!<call><name><name>manifestFile</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Manifest file: " + <name>manifestFile</name>
                                     + " does not exist."</expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <expr_stmt><expr><name><name>this</name>.<name>manifestFile</name></name> = <name>manifestFile</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>Manifest</name></type> <name>getManifest</name><parameter_list>(<param><decl><type><name>File</name></type> <name>manifestFile</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>Manifest</name></type> <name>newManifest</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FileInputStream</name></type> <name>fis</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>InputStreamReader</name></type> <name>isr</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>fis</name> = new <call><name>FileInputStream</name><argument_list>(<argument><expr><name>manifestFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>manifestEncoding</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>isr</name> = new <call><name>InputStreamReader</name><argument_list>(<argument><expr><name>fis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>isr</name> = new <call><name>InputStreamReader</name><argument_list>(<argument><expr><name>fis</name></expr></argument>, <argument><expr><name>manifestEncoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><name>newManifest</name> = <call><name>getManifest</name><argument_list>(<argument><expr><name>isr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>UnsupportedEncodingException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Unsupported encoding while reading manifest: "
                                     + <call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Unable to read manifest file: "
                                     + <name>manifestFile</name>
                                     + " (" + <call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call> + ")"</expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>isr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
        <return>return <expr><name>newManifest</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * @return null if jarFile doesn't contain a manifest, the
     * manifest otherwise.
     * @since Ant 1.5.2
     */</comment>
    <function><type><specifier>private</specifier> <name>Manifest</name></type> <name>getManifestFromJar</name><parameter_list>(<param><decl><type><name>File</name></type> <name>jarFile</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>ZipFile</name></type> <name>zf</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>zf</name> = new <call><name>ZipFile</name><argument_list>(<argument><expr><name>jarFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// must not use getEntry as "well behaving" applications</comment>
            <comment type="line">// must accept the manifest in any capitalization</comment>
            <decl_stmt><decl><type><name><name>Enumeration</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name>ZipEntry</name></extends></argument>&gt;</argument_list></name></type> <name>e</name> =<init> <expr><call><name><name>zf</name>.<name>entries</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <decl_stmt><decl><type><name>ZipEntry</name></type> <name>ze</name> =<init> <expr><call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>ze</name>.<name>getName</name></name><argument_list>()</argument_list></call>.<call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><name>MANIFEST_NAME</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>InputStreamReader</name></type> <name>isr</name> =<init>
                        <expr>new <call><name>InputStreamReader</name><argument_list>(<argument><expr><call><name><name>zf</name>.<name>getInputStream</name></name><argument_list>(<argument><expr><name>ze</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"UTF-8"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <return>return <expr><call><name>getManifest</name><argument_list>(<argument><expr><name>isr</name></expr></argument>)</argument_list></call></expr>;</return>
                }</block></then></if>
            }</block></while>
            <return>return <expr><name>null</name></expr>;</return>
        }</block> <finally>finally <block>{
            <if>if <condition>(<expr><name>zf</name> != <name>null</name></expr>)</condition><then> <block>{
                <try>try <block>{
                    <expr_stmt><expr><call><name><name>zf</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
                    <comment type="line">// TODO - log an error?  throw an exception?</comment>
                }</block></catch></try>
            }</block></then></if>
        }</block></finally></try>
    }</block></function>

    <function><type><specifier>private</specifier> <name>Manifest</name></type> <name>getManifest</name><parameter_list>(<param><decl><type><name>Reader</name></type> <name>r</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>Manifest</name></type> <name>newManifest</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>newManifest</name> = new <call><name>Manifest</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>ManifestException</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Manifest is invalid: " + <call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_ERR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Invalid Manifest: " + <name>manifestFile</name></expr></argument>,
                                     <argument><expr><name>e</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Unable to read manifest file"
                                     + " (" + <call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call> + ")"</expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
        <return>return <expr><name>newManifest</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>jarHasIndex</name><parameter_list>(<param><decl><type><name>File</name></type> <name>jarFile</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>ZipFile</name></type> <name>zf</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>zf</name> = new <call><name>ZipFile</name><argument_list>(<argument><expr><name>jarFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>Enumeration</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name>ZipEntry</name></extends></argument>&gt;</argument_list></name></type> <name>e</name> =<init> <expr><call><name><name>zf</name>.<name>entries</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <decl_stmt><decl><type><name>ZipEntry</name></type> <name>ze</name> =<init> <expr><call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>ze</name>.<name>getName</name></name><argument_list>()</argument_list></call>.<call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><name>INDEX_NAME</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <return>return <expr>true</expr>;</return>
                }</block></then></if>
            }</block></while>
            <return>return <expr>false</expr>;</return>
        }</block> <finally>finally <block>{
            <if>if <condition>(<expr><name>zf</name> != <name>null</name></expr>)</condition><then> <block>{
                <try>try <block>{
                    <expr_stmt><expr><call><name><name>zf</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
                    <comment type="line">// TODO - log an error?  throw an exception?</comment>
                }</block></catch></try>
            }</block></then></if>
        }</block></finally></try>
    }</block></function>

    <comment type="javadoc">/**
     * Behavior when a Manifest is found in a zipfileset or zipgroupfileset file.
     * Valid values are "skip", "merge", and "mergewithoutmain".
     * "merge" will merge all of manifests together, and merge this into any
     * other specified manifests.
     * "mergewithoutmain" merges everything but the Main section of the manifests.
     * Default value is "skip".
     *
     * Note: if this attribute's value is not "skip", the created jar will not
     * be readable by using java.util.jar.JarInputStream
     *
     * @param config setting for found manifest behavior.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFilesetmanifest</name><parameter_list>(<param><decl><type><name>FilesetManifestConfig</name></type> <name>config</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>filesetManifestConfig</name> = <name>config</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>mergeManifestsMain</name> = "merge".<call><name>equals</name><argument_list>(<argument><expr><call><name><name>config</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>filesetManifestConfig</name> != <name>null</name>
            &amp;&amp; !<call><name><name>filesetManifestConfig</name>.<name>getValue</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr>"skip"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{

            <expr_stmt><expr><name>doubleFilePass</name> = true</expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a zipfileset to include in the META-INF directory.
     *
     * @param fs zipfileset to add
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addMetainf</name><parameter_list>(<param><decl><type><name>ZipFileSet</name></type> <name>fs</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// We just set the prefix for this fileset, and pass it up.</comment>
        <expr_stmt><expr><call><name><name>fs</name>.<name>setPrefix</name></name><argument_list>(<argument><expr>"META-INF/"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name>.<name>addFileset</name></name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a path to index jars.
     * @param p a path
     * @since Ant 1.6.2
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addConfiguredIndexJars</name><parameter_list>(<param><decl><type><name>Path</name></type> <name>p</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>indexJars</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>indexJars</name> = new <call><name>Path</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>indexJars</name>.<name>append</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * A nested SPI service element.
     * @param service the nested element.
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addConfiguredService</name><parameter_list>(<param><decl><type><name>Service</name></type> <name>service</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// Check if the service is configured correctly</comment>
        <expr_stmt><expr><call><name><name>service</name>.<name>check</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>serviceList</name>.<name>add</name></name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Write SPI Information to JAR
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeServices</name><parameter_list>(<param><decl><type><name>ZipOutputStream</name></type> <name>zOut</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <for>for (<init><decl><type><name>Service</name></type> <name>service</name> :<range> <expr><name>serviceList</name></expr></range></decl></init>) <block>{
           <decl_stmt><decl><type><name>InputStream</name></type> <name>is</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
           <try>try <block>{
               <expr_stmt><expr><name>is</name> = <call><name><name>service</name>.<name>getAsStream</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
               <comment type="line">//stolen from writeManifest</comment>
               <expr_stmt><expr><call><name><name>super</name>.<name>zipFile</name></name><argument_list>(<argument><expr><name>is</name></expr></argument>, <argument><expr><name>zOut</name></expr></argument>,
                             <argument><expr>"META-INF/services/" + <call><name><name>service</name>.<name>getType</name></name><argument_list>()</argument_list></call></expr></argument>,
                             <argument><expr><call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>null</name></expr></argument>,
                             <argument><expr><name><name>ZipFileSet</name>.<name>DEFAULT_FILE_MODE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           }</block> <finally>finally <block>{
               <comment type="line">// technically this is unnecessary since</comment>
               <comment type="line">// Service.getAsStream returns a ByteArrayInputStream</comment>
               <comment type="line">// and not closing it wouldn't do any harm.</comment>
               <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           }</block></finally></try>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Whether to merge Class-Path attributes.
     *
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMergeClassPathAttributes</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>mergeClassPaths</name> = <name>b</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Whether to flatten multi-valued attributes (i.e. Class-Path)
     * into a single one.
     *
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFlattenAttributes</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>flattenClassPaths</name> = <name>b</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Initialize the zip output stream.
     * @param zOut the zip output stream
     * @throws IOException on I/O errors
     * @throws BuildException on other errors
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>initZipOutputStream</name><parameter_list>(<param><decl><type><name>ZipOutputStream</name></type> <name>zOut</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>BuildException</name></expr></argument></throws> <block>{

        <if>if <condition>(<expr>!<name>skipWriting</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Manifest</name></type> <name>jarManifest</name> =<init> <expr><call><name>createManifest</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>writeManifest</name><argument_list>(<argument><expr><name>zOut</name></expr></argument>, <argument><expr><name>jarManifest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>writeServices</name><argument_list>(<argument><expr><name>zOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>private</specifier> <name>Manifest</name></type> <name>createManifest</name><parameter_list>()</parameter_list>
        <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <try>try <block>{
            <decl_stmt><decl><type><name>Manifest</name></type> <name>finalManifest</name> =<init> <expr><call><name><name>Manifest</name>.<name>getDefaultManifest</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>manifest</name> == <name>null</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>manifestFile</name> != <name>null</name></expr>)</condition><then> <block>{
                    <comment type="line">// if we haven't got the manifest yet, attempt to</comment>
                    <comment type="line">// get it now and have manifest be the final merge</comment>
                    <expr_stmt><expr><name>manifest</name> = <call><name>getManifest</name><argument_list>(<argument><expr><name>manifestFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>

            <comment type="block">/*
             * Precedence: manifestFile wins over inline manifest,
             * over manifests read from the filesets over the original
             * manifest.
             *
             * merge with null argument is a no-op
             */</comment>

            <if>if <condition>(<expr><call><name>isInUpdateMode</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>finalManifest</name>.<name>merge</name></name><argument_list>(<argument><expr><name>originalManifest</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr><name>mergeClassPaths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>finalManifest</name>.<name>merge</name></name><argument_list>(<argument><expr><name>filesetManifest</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr><name>mergeClassPaths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>finalManifest</name>.<name>merge</name></name><argument_list>(<argument><expr><name>configuredManifest</name></expr></argument>, <argument><expr>!<name>mergeManifestsMain</name></expr></argument>,
                                <argument><expr><name>mergeClassPaths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>finalManifest</name>.<name>merge</name></name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr>!<name>mergeManifestsMain</name></expr></argument>,
                                <argument><expr><name>mergeClassPaths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return>return <expr><name>finalManifest</name></expr>;</return>

        }</block> <catch>catch (<param><decl><type><name>ManifestException</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Manifest is invalid: " + <call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_ERR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Invalid Manifest"</expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeManifest</name><parameter_list>(<param><decl><type><name>ZipOutputStream</name></type> <name>zOut</name></decl></param>, <param><decl><type><name>Manifest</name></type> <name>manifest</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <for>for (<init><decl><type><name><name>Enumeration</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>e</name> =<init> <expr><call><name><name>manifest</name>.<name>getWarnings</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init>
             <condition><expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Manifest warning: " + <call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <expr_stmt><expr><call><name>zipDir</name><argument_list>(<argument><expr>(<name>Resource</name>) <name>null</name></expr></argument>, <argument><expr><name>zOut</name></expr></argument>, <argument><expr>"META-INF/"</expr></argument>, <argument><expr><name><name>ZipFileSet</name>.<name>DEFAULT_DIR_MODE</name></name></expr></argument>,
               <argument><expr><name>JAR_MARKER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// time to write the manifest</comment>
        <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>baos</name> =<init> <expr>new <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>OutputStreamWriter</name></type> <name>osw</name> =<init> <expr>new <call><name>OutputStreamWriter</name><argument_list>(<argument><expr><name>baos</name></expr></argument>, <argument><expr><name><name>Manifest</name>.<name>JAR_ENCODING</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PrintWriter</name></type> <name>writer</name> =<init> <expr>new <call><name>PrintWriter</name><argument_list>(<argument><expr><name>osw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>manifest</name>.<name>write</name></name><argument_list>(<argument><expr><name>writer</name></expr></argument>, <argument><expr><name>flattenClassPaths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>writer</name>.<name>checkError</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IOException</name><argument_list>(<argument><expr>"Encountered an error writing the manifest"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>writer</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ByteArrayInputStream</name></type> <name>bais</name> =<init>
            <expr>new <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><call><name><name>baos</name>.<name>toByteArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>super</name>.<name>zipFile</name></name><argument_list>(<argument><expr><name>bais</name></expr></argument>, <argument><expr><name>zOut</name></expr></argument>, <argument><expr><name>MANIFEST_NAME</name></expr></argument>,
                          <argument><expr><call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>null</name></expr></argument>,
                          <argument><expr><name><name>ZipFileSet</name>.<name>DEFAULT_FILE_MODE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
            <comment type="line">// not really required</comment>
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>bais</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
        <expr_stmt><expr><call><name><name>super</name>.<name>initZipOutputStream</name></name><argument_list>(<argument><expr><name>zOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Finalize the zip output stream.
     * This creates an index list if the index attribute is true.
     * @param zOut the zip output stream
     * @throws IOException on I/O errors
     * @throws BuildException on other errors
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>finalizeZipOutputStream</name><parameter_list>(<param><decl><type><name>ZipOutputStream</name></type> <name>zOut</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>BuildException</name></expr></argument></throws> <block>{

        <if>if <condition>(<expr><name>index</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>createIndexList</name><argument_list>(<argument><expr><name>zOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Create the index list to speed up classloading.
     * This is a JDK 1.3+ specific feature and is enabled by default. See
     * &lt;a href="http://java.sun.com/j2se/1.3/docs/guide/jar/jar.html#JAR%20Index"&gt;
     * the JAR index specification&lt;/a&gt; for more details.
     *
     * @param zOut the zip stream representing the jar being built.
     * @throws IOException thrown if there is an error while creating the
     * index and adding it to the zip stream.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>createIndexList</name><parameter_list>(<param><decl><type><name>ZipOutputStream</name></type> <name>zOut</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>baos</name> =<init> <expr>new <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// encoding must be UTF8 as specified in the specs.</comment>
        <decl_stmt><decl><type><name>PrintWriter</name></type> <name>writer</name> =<init> <expr>new <call><name>PrintWriter</name><argument_list>(<argument><expr>new <call><name>OutputStreamWriter</name><argument_list>(<argument><expr><name>baos</name></expr></argument>,
                                                                    <argument><expr>"UTF8"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// version-info blankline</comment>
        <expr_stmt><expr><call><name><name>writer</name>.<name>println</name></name><argument_list>(<argument><expr>"JarIndex-Version: 1.0"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>writer</name>.<name>println</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// header newline</comment>
        <expr_stmt><expr><call><name><name>writer</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>zipFile</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>writeIndexLikeList</name><argument_list>(<argument><expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>addedDirs</name>.<name>keySet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                           <argument><expr><name>rootEntries</name></expr></argument>, <argument><expr><name>writer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>writer</name>.<name>println</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>indexJars</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Manifest</name></type> <name>mf</name> =<init> <expr><call><name>createManifest</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Manifest</name>.<name>Attribute</name></name></type> <name>classpath</name> =<init>
                <expr><call><name><name>mf</name>.<name>getMainSection</name></name><argument_list>()</argument_list></call>.<call><name>getAttribute</name><argument_list>(<argument><expr><name><name>Manifest</name>.<name>ATTRIBUTE_CLASSPATH</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>cpEntries</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>classpath</name> != <name>null</name> &amp;&amp; <call><name><name>classpath</name>.<name>getValue</name></name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>StringTokenizer</name></type> <name>tok</name> =<init> <expr>new <call><name>StringTokenizer</name><argument_list>(<argument><expr><call><name><name>classpath</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                          <argument><expr>" "</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>cpEntries</name> = new <name><name>String</name><index>[<expr><call><name><name>tok</name>.<name>countTokens</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>c</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><call><name><name>tok</name>.<name>hasMoreTokens</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                    <expr_stmt><expr><name><name>cpEntries</name><index>[<expr><name>c</name>++</expr>]</index></name> = <call><name><name>tok</name>.<name>nextToken</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></while>
            }</block></then></if>
            <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>indexJarEntries</name> =<init> <expr><call><name><name>indexJars</name>.<name>list</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>indexJarEntries</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>name</name> =<init> <expr><call><name>findJarName</name><argument_list>(<argument><expr><name><name>indexJarEntries</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>cpEntries</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>name</name> != <name>null</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name><name>ArrayList</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>dirs</name> =<init> <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name>ArrayList</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>files</name> =<init> <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>grabFilesAndDirs</name><argument_list>(<argument><expr><name><name>indexJarEntries</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>dirs</name></expr></argument>, <argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><call><name><name>dirs</name>.<name>size</name></name><argument_list>()</argument_list></call> + <call><name><name>files</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>writer</name>.<name>println</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>writeIndexLikeList</name><argument_list>(<argument><expr><name>dirs</name></expr></argument>, <argument><expr><name>files</name></expr></argument>, <argument><expr><name>writer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>writer</name>.<name>println</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then></if>
            }</block></for>
        }</block></then></if>

        <if>if <condition>(<expr><call><name><name>writer</name>.<name>checkError</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IOException</name><argument_list>(<argument><expr>"Encountered an error writing jar index"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>writer</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ByteArrayInputStream</name></type> <name>bais</name> =<init>
            <expr>new <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><call><name><name>baos</name>.<name>toByteArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>super</name>.<name>zipFile</name></name><argument_list>(<argument><expr><name>bais</name></expr></argument>, <argument><expr><name>zOut</name></expr></argument>, <argument><expr><name>INDEX_NAME</name></expr></argument>, <argument><expr><call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>,
                          <argument><expr><name>null</name></expr></argument>, <argument><expr><name><name>ZipFileSet</name>.<name>DEFAULT_FILE_MODE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
            <comment type="line">// not really required</comment>
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>bais</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <comment type="javadoc">/**
     * Overridden from Zip class to deal with manifests and index lists.
     * @param is the stream to read data for the entry from.  The
     * caller of the method is responsible for closing the stream.
     * @param zOut the zip output stream
     * @param vPath the name this entry shall have in the archive
     * @param lastModified last modification time for the entry.
     * @param fromArchive the original archive we are copying this
     *                    entry from, will be null if we are not copying from an archive.
     * @param mode the Unix permissions to set.
     * @throws IOException on error
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>zipFile</name><parameter_list>(<param><decl><type><name>InputStream</name></type> <name>is</name></decl></param>, <param><decl><type><name>ZipOutputStream</name></type> <name>zOut</name></decl></param>, <param><decl><type><name>String</name></type> <name>vPath</name></decl></param>,
                           <param><decl><type><name>long</name></type> <name>lastModified</name></decl></param>, <param><decl><type><name>File</name></type> <name>fromArchive</name></decl></param>, <param><decl><type><name>int</name></type> <name>mode</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><call><name><name>MANIFEST_NAME</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>vPath</name></expr></argument>)</argument_list></call></expr>)</condition><then>  <block>{
            <if>if <condition>(<expr><call><name>isFirstPass</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>filesetManifest</name><argument_list>(<argument><expr><name>fromArchive</name></expr></argument>, <argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>INDEX_NAME</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>vPath</name></expr></argument>)</argument_list></call> &amp;&amp; <name>index</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>logWhenWriting</name><argument_list>(<argument><expr>"Warning: selected " + <name>archiveType</name>
                           + " files include a " + <name>INDEX_NAME</name> + " which will"
                           + " be replaced by a newly generated one."</expr></argument>,
                           <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <if>if <condition>(<expr><name>index</name> &amp;&amp; <call><name><name>vPath</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"/"</expr></argument>)</argument_list></call> == -1</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>rootEntries</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>vPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>super</name>.<name>zipFile</name></name><argument_list>(<argument><expr><name>is</name></expr></argument>, <argument><expr><name>zOut</name></expr></argument>, <argument><expr><name>vPath</name></expr></argument>, <argument><expr><name>lastModified</name></expr></argument>, <argument><expr><name>fromArchive</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if></else></if>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>filesetManifest</name><parameter_list>(<param><decl><type><name>File</name></type> <name>file</name></decl></param>, <param><decl><type><name>InputStream</name></type> <name>is</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>manifestFile</name> != <name>null</name> &amp;&amp; <call><name><name>manifestFile</name>.<name>equals</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">// If this is the same name specified in 'manifest', this</comment>
            <comment type="line">// is the manifest to use</comment>
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Found manifest " + <name>file</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <try>try <block>{
                <if>if <condition>(<expr><name>is</name> != <name>null</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>InputStreamReader</name></type> <name>isr</name></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>manifestEncoding</name> == <name>null</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>isr</name> = new <call><name>InputStreamReader</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <expr_stmt><expr><name>isr</name> = new <call><name>InputStreamReader</name><argument_list>(<argument><expr><name>is</name></expr></argument>, <argument><expr><name>manifestEncoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                    <expr_stmt><expr><name>manifest</name> = <call><name>getManifest</name><argument_list>(<argument><expr><name>isr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><name>manifest</name> = <call><name>getManifest</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block> <catch>catch (<param><decl><type><name>UnsupportedEncodingException</name></type> <name>e</name></decl></param>) <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Unsupported encoding while reading "
                    + "manifest: " + <call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></then> <else>else <if>if <condition>(<expr><name>filesetManifestConfig</name> != <name>null</name>
                    &amp;&amp; !<call><name><name>filesetManifestConfig</name>.<name>getValue</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr>"skip"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">// we add this to our group of fileset manifests</comment>
            <expr_stmt><expr><call><name>logWhenWriting</name><argument_list>(<argument><expr>"Found manifest to merge in file " + <name>file</name></expr></argument>,
                           <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <try>try <block>{
                <decl_stmt><decl><type><name>Manifest</name></type> <name>newManifest</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>is</name> != <name>null</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>InputStreamReader</name></type> <name>isr</name></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>manifestEncoding</name> == <name>null</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>isr</name> = new <call><name>InputStreamReader</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <expr_stmt><expr><name>isr</name> = new <call><name>InputStreamReader</name><argument_list>(<argument><expr><name>is</name></expr></argument>, <argument><expr><name>manifestEncoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                    <expr_stmt><expr><name>newManifest</name> = <call><name>getManifest</name><argument_list>(<argument><expr><name>isr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><name>newManifest</name> = <call><name>getManifest</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>

                <if>if <condition>(<expr><name>filesetManifest</name> == <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>filesetManifest</name> = <name>newManifest</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name><name>filesetManifest</name>.<name>merge</name></name><argument_list>(<argument><expr><name>newManifest</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr><name>mergeClassPaths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block> <catch>catch (<param><decl><type><name>UnsupportedEncodingException</name></type> <name>e</name></decl></param>) <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Unsupported encoding while reading "
                    + "manifest: " + <call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch> <catch>catch (<param><decl><type><name>ManifestException</name></type> <name>e</name></decl></param>) <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Manifest in file " + <name>file</name> + " is invalid: "
                    + <call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_ERR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Invalid Manifest"</expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></then> <else>else <block>{
            <comment type="line">// assuming 'skip' otherwise</comment>
            <comment type="line">// don't warn if skip has been requested explicitly, warn if user</comment>
            <comment type="line">// didn't set the attribute</comment>

            <comment type="line">// Hide warning also as it makes no sense since</comment>
            <comment type="line">// the filesetmanifest attribute itself has been</comment>
            <comment type="line">// hidden</comment>

            <comment type="line">//int logLevel = filesetManifestConfig == null ?</comment>
            <comment type="line">//    Project.MSG_WARN : Project.MSG_VERBOSE;</comment>
            <comment type="line">//log("File " + file</comment>
            <comment type="line">//    + " includes a META-INF/MANIFEST.MF which will be ignored. "</comment>
            <comment type="line">//    + "To include this file, set filesetManifest to a value other "</comment>
            <comment type="line">//    + "than 'skip'.", logLevel);</comment>
        }</block></else></if></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Collect the resources that are newer than the corresponding
     * entries (or missing) in the original archive.
     *
     * &lt;p&gt;If we are going to recreate the archive instead of updating
     * it, all resources should be considered as new, if a single one
     * is.  Because of this, subclasses overriding this method must
     * call &lt;code&gt;super.getResourcesToAdd&lt;/code&gt; and indicate with the
     * third arg if they already know that the archive is
     * out-of-date.&lt;/p&gt;
     *
     * @param rcs The resource collections to grab resources from
     * @param zipFile intended archive file (may or may not exist)
     * @param needsUpdate whether we already know that the archive is
     * out-of-date.  Subclasses overriding this method are supposed to
     * set this value correctly in their call to
     * super.getResourcesToAdd.
     * @return an array of resources to add for each fileset passed in as well
     *         as a flag that indicates whether the archive is uptodate.
     *
     * @exception BuildException if it likes
     */</comment>
    <function><type><specifier>protected</specifier> <name>ArchiveState</name></type> <name>getResourcesToAdd</name><parameter_list>(<param><decl><type><name><name>ResourceCollection</name><index>[]</index></name></type> <name>rcs</name></decl></param>,
                                             <param><decl><type><name>File</name></type> <name>zipFile</name></decl></param>,
                                             <param><decl><type><name>boolean</name></type> <name>needsUpdate</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{

        <if>if <condition>(<expr><name>skipWriting</name></expr>)</condition><then> <block>{
            <comment type="line">// this pass is only there to construct the merged</comment>
            <comment type="line">// manifest this means we claim an update was needed and</comment>
            <comment type="line">// only include the manifests, skipping any uptodate</comment>
            <comment type="line">// checks here defering them for the second run</comment>
            <decl_stmt><decl><type><name>Resource</name><index>[]</index><index>[]</index></type> <name>manifests</name> =<init> <expr><call><name>grabManifests</name><argument_list>(<argument><expr><name>rcs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>count</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>manifests</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <expr_stmt><expr><name>count</name> += <name><name>manifests</name><index>[<expr><name>i</name></expr>]</index></name>.<name>length</name></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"found a total of " + <name>count</name> + " manifests in "
                + <name><name>manifests</name>.<name>length</name></name> + " resource collections"</expr></argument>,
                <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>new <call><name>ArchiveState</name><argument_list>(<argument><expr>true</expr></argument>, <argument><expr><name>manifests</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>

        <comment type="line">// need to handle manifest as a special check</comment>
        <if>if <condition>(<expr><call><name><name>zipFile</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">// if it doesn't exist, it will get created anyway, don't</comment>
            <comment type="line">// bother with any up-to-date checks.</comment>

            <try>try <block>{
                <expr_stmt><expr><name>originalManifest</name> = <call><name>getManifestFromJar</name><argument_list>(<argument><expr><name>zipFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>originalManifest</name> == <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Updating jar since the current jar has"
                                   + " no manifest"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>needsUpdate</name> = true</expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <decl_stmt><decl><type><name>Manifest</name></type> <name>mf</name> =<init> <expr><call><name>createManifest</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr>!<call><name><name>mf</name>.<name>equals</name></name><argument_list>(<argument><expr><name>originalManifest</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Updating jar since jar manifest has"
                                       + " changed"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>needsUpdate</name> = true</expr>;</expr_stmt>
                    }</block></then></if>
                }</block></else></if>
            }</block> <catch>catch (<param><decl><type><name>Throwable</name></type> <name>t</name></decl></param>) <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"error while reading original manifest in file: "
                    + <call><name><name>zipFile</name>.<name>toString</name></name><argument_list>()</argument_list></call> + " due to " + <call><name><name>t</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>needsUpdate</name> = true</expr>;</expr_stmt>
            }</block></catch></try>

        }</block></then> <else>else <block>{
            <comment type="line">// no existing archive</comment>
            <expr_stmt><expr><name>needsUpdate</name> = true</expr>;</expr_stmt>
        }</block></else></if>

        <expr_stmt><expr><name>createEmpty</name> = <name>needsUpdate</name></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>needsUpdate</name> &amp;&amp; <name>index</name></expr>)</condition><then> <block>{
            <try>try <block>{
                <expr_stmt><expr><name>needsUpdate</name> = !<call><name>jarHasIndex</name><argument_list>(<argument><expr><name>zipFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
                <comment type="line">//if we couldn't read it, we might as well recreate it?</comment>
                <expr_stmt><expr><name>needsUpdate</name> = true</expr>;</expr_stmt>
            }</block></catch></try>
        }</block></then></if>
        <return>return <expr><call><name><name>super</name>.<name>getResourcesToAdd</name></name><argument_list>(<argument><expr><name>rcs</name></expr></argument>, <argument><expr><name>zipFile</name></expr></argument>, <argument><expr><name>needsUpdate</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Create an empty jar file.
     * @param zipFile the file to create
     * @return true for historic reasons
     * @throws BuildException on error
     */</comment>
    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>createEmptyZip</name><parameter_list>(<param><decl><type><name>File</name></type> <name>zipFile</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr>!<name>createEmpty</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>

        <if>if <condition>(<expr><call><name><name>emptyBehavior</name>.<name>equals</name></name><argument_list>(<argument><expr>"skip"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <if>if <condition>(<expr>!<name>skipWriting</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Warning: skipping " + <name>archiveType</name> + " archive "
                    + <name>zipFile</name> + " because no files were included."</expr></argument>,
                    <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <return>return <expr>true</expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>emptyBehavior</name>.<name>equals</name></name><argument_list>(<argument><expr>"fail"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Cannot create " + <name>archiveType</name>
                                     + " archive " + <name>zipFile</name>
                                     + ": no files were included."</expr></argument>,
                                     <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if></else></if>

        <decl_stmt><decl><type><name>ZipOutputStream</name></type> <name>zOut</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <if>if <condition>(<expr>!<name>skipWriting</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Building MANIFEST-only jar: "
                    + <call><name>getDestFile</name><argument_list>()</argument_list></call>.<call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>zOut</name> = new <call><name>ZipOutputStream</name><argument_list>(<argument><expr><call><name>getDestFile</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>zOut</name>.<name>setEncoding</name></name><argument_list>(<argument><expr><call><name>getEncoding</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name>isCompress</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>zOut</name>.<name>setMethod</name></name><argument_list>(<argument><expr><name><name>ZipOutputStream</name>.<name>DEFLATED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>zOut</name>.<name>setMethod</name></name><argument_list>(<argument><expr><name><name>ZipOutputStream</name>.<name>STORED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><call><name>initZipOutputStream</name><argument_list>(<argument><expr><name>zOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>finalizeZipOutputStream</name><argument_list>(<argument><expr><name>zOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ioe</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Could not create almost empty JAR archive"
                                     + " (" + <call><name><name>ioe</name>.<name>getMessage</name></name><argument_list>()</argument_list></call> + ")"</expr></argument>, <argument><expr><name>ioe</name></expr></argument>,
                                     <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <finally>finally <block>{
            <comment type="line">// Close the output stream.</comment>
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>zOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>createEmpty</name> = false</expr>;</expr_stmt>
        }</block></finally></try>
        <return>return <expr>true</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Make sure we don't think we already have a MANIFEST next time this task
     * gets executed.
     *
     * @see Zip#cleanUp
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>cleanUp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name>.<name>cleanUp</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkJarSpec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// we want to save this info if we are going to make another pass</comment>
        <if>if <condition>(<expr>!<name>doubleFilePass</name> || !<name>skipWriting</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>manifest</name> = <name>null</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>configuredManifest</name> = <name>savedConfiguredManifest</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>filesetManifest</name> = <name>null</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>originalManifest</name> = <name>null</name></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>rootEntries</name>.<name>removeAllElements</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// CheckStyle:LineLength OFF - Link is too long.</comment>
    <comment type="javadoc">/**
     * Check against packaging spec
     * @see http://java.sun.com/j2se/1.3/docs/guide/versioning/spec/VersioningSpecification.html#PackageVersioning
     */</comment>
    <comment type="line">// CheckStyle:LineLength ON</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>checkJarSpec</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>br</name> =<init> <expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"line.separator"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>message</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Section</name></type> <name>mainSection</name> =<init> <expr>(<name>configuredManifest</name> == <name>null</name>)
                            ? <name>null</name>
                            : <call><name><name>configuredManifest</name>.<name>getMainSection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>mainSection</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>message</name>.<name>append</name></name><argument_list>(<argument><expr>"No Implementation-Title set."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>message</name>.<name>append</name></name><argument_list>(<argument><expr>"No Implementation-Version set."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>message</name>.<name>append</name></name><argument_list>(<argument><expr>"No Implementation-Vendor set."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <if>if <condition>(<expr><call><name><name>mainSection</name>.<name>getAttribute</name></name><argument_list>(<argument><expr>"Implementation-Title"</expr></argument>)</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>message</name>.<name>append</name></name><argument_list>(<argument><expr>"No Implementation-Title set."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><call><name><name>mainSection</name>.<name>getAttribute</name></name><argument_list>(<argument><expr>"Implementation-Version"</expr></argument>)</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>message</name>.<name>append</name></name><argument_list>(<argument><expr>"No Implementation-Version set."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><call><name><name>mainSection</name>.<name>getAttribute</name></name><argument_list>(<argument><expr>"Implementation-Vendor"</expr></argument>)</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>message</name>.<name>append</name></name><argument_list>(<argument><expr>"No Implementation-Vendor set."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></else></if>

        <if>if <condition>(<expr><call><name><name>message</name>.<name>length</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>message</name>.<name>append</name></name><argument_list>(<argument><expr><name>br</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>message</name>.<name>append</name></name><argument_list>(<argument><expr>"Location: "</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>message</name>.<name>append</name></name><argument_list>(<argument><expr><name>br</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name><name>strict</name>.<name>getValue</name></name><argument_list>()</argument_list></call>.<call><name>equalsIgnoreCase</name><argument_list>(<argument><expr>"fail"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><call><name><name>message</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>logWhenWriting</name><argument_list>(<argument><expr><call><name><name>message</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>strict</name>.<name>getLogLevel</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * reset to default values.
     *
     * @see Zip#reset
     *
     * @since 1.44, Ant 1.5
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>reset</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name>.<name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>emptyBehavior</name> = "create"</expr>;</expr_stmt>
        <expr_stmt><expr><name>configuredManifest</name> = <name>null</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>filesetManifestConfig</name> = <name>null</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>mergeManifestsMain</name> = false</expr>;</expr_stmt>
        <expr_stmt><expr><name>manifestFile</name> = <name>null</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>index</name> = false</expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The manifest config enumerated type.
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>FilesetManifestConfig</name> <super><extends>extends <name>EnumeratedAttribute</name></extends></super> <block>{
        <comment type="javadoc">/**
         * Get the list of valid strings.
         * @return the list of values - "skip", "merge" and "mergewithoutmain"
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getValues</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"skip"</expr>, <expr>"merge"</expr>, <expr>"mergewithoutmain"</expr>}</block></expr>;</return>
        }</block></function>
    }</block></class>

    <comment type="javadoc">/**
     * Writes the directory entries from the first and the filenames
     * from the second list to the given writer, one entry per line.
     *
     * @param dirs a list of directories
     * @param files a list of files
     * @param writer the writer to write to
     * @throws IOException on error
     * @since Ant 1.6.2
     */</comment>
    <function><type><specifier>protected</specifier> <specifier>final</specifier> <name>void</name></type> <name>writeIndexLikeList</name><parameter_list>(<param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>dirs</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>files</name></decl></param>,
                                            <param><decl><type><name>PrintWriter</name></type> <name>writer</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <comment type="line">// JarIndex is sorting the directories by ascending order.</comment>
        <comment type="line">// it has no value but cosmetic since it will be read into a</comment>
        <comment type="line">// hashtable by the classloader, but we'll do so anyway.</comment>
        <expr_stmt><expr><call><name><name>Collections</name>.<name>sort</name></name><argument_list>(<argument><expr><name>dirs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Collections</name>.<name>sort</name></name><argument_list>(<argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>String</name></type> <name>dir</name> :<range> <expr><name>dirs</name></expr></range></decl></init>) <block>{
            <comment type="line">// try to be smart, not to be fooled by a weird directory name</comment>
            <expr_stmt><expr><name>dir</name> = <call><name><name>dir</name>.<name>replace</name></name><argument_list>(<argument><expr>'\\'</expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name><name>dir</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"./"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>dir</name> = <call><name><name>dir</name>.<name>substring</name></name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <while>while <condition>(<expr><call><name><name>dir</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"/"</expr></argument>)</argument_list></call></expr>)</condition> <block>{
                <expr_stmt><expr><name>dir</name> = <call><name><name>dir</name>.<name>substring</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
            <decl_stmt><decl><type><name>int</name></type> <name>pos</name> =<init> <expr><call><name><name>dir</name>.<name>lastIndexOf</name></name><argument_list>(<argument><expr>'/'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>pos</name> != -1</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>dir</name> = <call><name><name>dir</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <comment type="line">// looks like nothing from META-INF should be added</comment>
            <comment type="line">// and the check is not case insensitive.</comment>
            <comment type="line">// see sun.misc.JarIndex</comment>
            <comment type="line">// see also</comment>
            <comment type="line">// http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4408526</comment>
            <if>if <condition>(<expr>!<name>indexMetaInf</name> &amp;&amp; <call><name><name>dir</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"META-INF"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <continue>continue;</continue>
            }</block></then></if>
            <comment type="line">// name newline</comment>
            <expr_stmt><expr><call><name><name>writer</name>.<name>println</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <for>for (<init><decl><type><name>String</name></type> <name>file</name> :<range> <expr><name>files</name></expr></range></decl></init>) <block>{
            <expr_stmt><expr><call><name><name>writer</name>.<name>println</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * try to guess the name of the given file.
     *
     * &lt;p&gt;If this jar has a classpath attribute in its manifest, we
     * can assume that it will only require an index of jars listed
     * there.  try to find which classpath entry is most likely the
     * one the given file name points to.&lt;/p&gt;
     *
     * &lt;p&gt;In the absence of a classpath attribute, assume the other
     * files will be placed inside the same directory as this jar and
     * use their basename.&lt;/p&gt;
     *
     * &lt;p&gt;if there is a classpath and the given file doesn't match any
     * of its entries, return null.&lt;/p&gt;
     *
     * @param fileName the name to look for
     * @param classpath the classpath to look in (may be null)
     * @return the matching entry, or null if the file is not found
     * @since Ant 1.6.2
     */</comment>
    <function><type><specifier>protected</specifier> <specifier>static</specifier> <name>String</name></type> <name>findJarName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>fileName</name></decl></param>,
                                              <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>classpath</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>classpath</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr>(new <call><name>File</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call>).<call><name>getName</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>fileName</name> = <call><name><name>fileName</name>.<name>replace</name></name><argument_list>(<argument><expr><name><name>File</name>.<name>separatorChar</name></name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>TreeMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>matches</name> =<init> <expr>new <call><name><name>TreeMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr>new <class><super><name><name>Comparator</name><argument_list>&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
                <comment type="line">// longest match comes first</comment>
                <function><type><specifier>public</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>o1</name></decl></param>, <param><decl><type><name>Object</name></type> <name>o2</name></decl></param>)</parameter_list> <block>{
                    <if>if <condition>(<expr><name>o1</name> <name>instanceof</name> <name>String</name> &amp;&amp; <name>o2</name> <name>instanceof</name> <name>String</name></expr>)</condition><then> <block>{
                        <return>return <expr>((<name>String</name>) <name>o2</name>).<call><name>length</name><argument_list>()</argument_list></call>
                            - ((<name>String</name>) <name>o1</name>).<call><name>length</name><argument_list>()</argument_list></call></expr>;</return>
                    }</block></then></if>
                    <return>return <expr>0</expr>;</return>
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>classpath</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <if>if <condition>(<expr><call><name><name>fileName</name>.<name>endsWith</name></name><argument_list>(<argument><expr><name><name>classpath</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>matches</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>classpath</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>classpath</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>slash</name> =<init> <expr><name><name>classpath</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>indexOf</name><argument_list>(<argument><expr>"/"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>candidate</name> =<init> <expr><name><name>classpath</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><name>slash</name> &gt; -1</expr>)</condition> <block>{
                    <expr_stmt><expr><name>candidate</name> = <call><name><name>candidate</name>.<name>substring</name></name><argument_list>(<argument><expr><name>slash</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><call><name><name>fileName</name>.<name>endsWith</name></name><argument_list>(<argument><expr><name>candidate</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>matches</name>.<name>put</name></name><argument_list>(<argument><expr><name>candidate</name></expr></argument>, <argument><expr><name><name>classpath</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    }</block></then></if>
                    <expr_stmt><expr><name>slash</name> = <call><name><name>candidate</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"/"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></while>
            }</block></else></if>
        }</block></for>

        <return>return <expr><call><name><name>matches</name>.<name>size</name></name><argument_list>()</argument_list></call> == 0
            ? <name>null</name> : (<name>String</name>) <call><name><name>matches</name>.<name>get</name></name><argument_list>(<argument><expr><call><name><name>matches</name>.<name>firstKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Grab lists of all root-level files and all directories
     * contained in the given archive.
     * @param file the zip file to examine
     * @param dirs where to place the directories found
     * @param files where to place the files found
     * @since Ant 1.7
     * @throws IOException on error
     */</comment>
    <function><type><specifier>protected</specifier> <specifier>static</specifier> <name>void</name></type> <name>grabFilesAndDirs</name><parameter_list>(<param><decl><type><name>String</name></type> <name>file</name></decl></param>, <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>dirs</name></decl></param>,
                                                 <param><decl><type><name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>files</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>zip</name>.<name>ZipFile</name></name></type> <name>zf</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>zf</name> = new <call><name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>zip</name>.<name>ZipFile</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr>"utf-8"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>Enumeration</name><argument_list>&lt;<argument><name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>zip</name>.<name>ZipEntry</name></name></argument>&gt;</argument_list></name></type> <name>entries</name> =<init> <expr><call><name><name>zf</name>.<name>getEntries</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>HashSet</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>dirSet</name> =<init> <expr>new <call><name><name>HashSet</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>entries</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <decl_stmt><decl><type><name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>zip</name>.<name>ZipEntry</name></name></type> <name>ze</name> =<init>
                    <expr><call><name><name>entries</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>name</name> =<init> <expr><call><name><name>ze</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>ze</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>dirSet</name>.<name>add</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <if>if <condition>(<expr><call><name><name>name</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"/"</expr></argument>)</argument_list></call> == -1</expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>files</name>.<name>add</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <comment type="line">// a file, not in the root</comment>
                    <comment type="line">// since the jar may be one without directory</comment>
                    <comment type="line">// entries, add the parent dir of this file as</comment>
                    <comment type="line">// well.</comment>
                    <expr_stmt><expr><call><name><name>dirSet</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>name</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>name</name>.<name>lastIndexOf</name></name><argument_list>(<argument><expr>"/"</expr></argument>)</argument_list></call> + 1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if></else></if>
            }</block></while>
            <expr_stmt><expr><call><name><name>dirs</name>.<name>addAll</name></name><argument_list>(<argument><expr><name>dirSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
            <if>if <condition>(<expr><name>zf</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>zf</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></finally></try>
    }</block></function>

    <function><type><specifier>private</specifier> <name>Resource</name><index>[]</index><index>[]</index></type> <name>grabManifests</name><parameter_list>(<param><decl><type><name><name>ResourceCollection</name><index>[]</index></name></type> <name>rcs</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Resource</name><index>[]</index><index>[]</index></type> <name>manifests</name> =<init> <expr>new <name><name>Resource</name><index>[<expr><name><name>rcs</name>.<name>length</name></name></expr>]</index><index>[]</index></name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>rcs</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>Resource</name><index>[]</index><index>[]</index></type> <name>resources</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>rcs</name><index>[<expr><name>i</name></expr>]</index></name> <name>instanceof</name> <name>FileSet</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>resources</name> = <call><name>grabResources</name><argument_list>(<argument><expr>new <name><name>FileSet</name><index>[]</index></name> <block>{<expr>(<name>FileSet</name>) <name><name>rcs</name><index>[<expr><name>i</name></expr>]</index></name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>resources</name> = <call><name>grabNonFileSetResources</name><argument_list>(<argument><expr>new <name><name>ResourceCollection</name><index>[]</index></name> <block>{
                        <expr><name><name>rcs</name><index>[<expr><name>i</name></expr>]</index></name></expr>
                    }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <for>for (<init><decl><type><name>int</name></type> <name>j</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>j</name> &lt; <name><name>resources</name><index>[<expr>0</expr>]</index></name>.<name>length</name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>name</name> =<init> <expr><name><name>resources</name><index>[<expr>0</expr>]</index><index>[<expr><name>j</name></expr>]</index></name>.<call><name>getName</name><argument_list>()</argument_list></call>.<call><name>replace</name><argument_list>(<argument><expr>'\\'</expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name><name>rcs</name><index>[<expr><name>i</name></expr>]</index></name> <name>instanceof</name> <name>ArchiveFileSet</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>ArchiveFileSet</name></type> <name>afs</name> =<init> <expr>(<name>ArchiveFileSet</name>) <name><name>rcs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr>!"".<call><name>equals</name><argument_list>(<argument><expr><call><name><name>afs</name>.<name>getFullpath</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>name</name> = <call><name><name>afs</name>.<name>getFullpath</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else>else <if>if <condition>(<expr>!"".<call><name>equals</name><argument_list>(<argument><expr><call><name><name>afs</name>.<name>getPrefix</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>String</name></type> <name>prefix</name> =<init> <expr><call><name><name>afs</name>.<name>getPrefix</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if>if <condition>(<expr>!<call><name><name>prefix</name>.<name>endsWith</name></name><argument_list>(<argument><expr>"/"</expr></argument>)</argument_list></call> &amp;&amp; !<call><name><name>prefix</name>.<name>endsWith</name></name><argument_list>(<argument><expr>"\\"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                            <expr_stmt><expr><name>prefix</name> += "/"</expr>;</expr_stmt>
                        }</block></then></if>
                        <expr_stmt><expr><name>name</name> = <name>prefix</name> + <name>name</name></expr>;</expr_stmt>
                    }</block></then></if></else></if>
                }</block></then></if>
                <if>if <condition>(<expr><call><name><name>name</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>MANIFEST_NAME</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>manifests</name><index>[<expr><name>i</name></expr>]</index></name> = new <name><name>Resource</name><index>[]</index></name> <block>{<expr><name><name>resources</name><index>[<expr>0</expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>}</block></expr>;</expr_stmt>
                    <break>break;</break>
                }</block></then></if>
            }</block></for>
            <if>if <condition>(<expr><name><name>manifests</name><index>[<expr><name>i</name></expr>]</index></name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>manifests</name><index>[<expr><name>i</name></expr>]</index></name> = new <name><name>Resource</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <return>return <expr><name>manifests</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/** The strict enumerated type. */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>StrictMode</name> <super><extends>extends <name>EnumeratedAttribute</name></extends></super> <block>{
        <comment type="javadoc">/** Public no arg constructor. */</comment>
        <constructor><specifier>public</specifier> <name>StrictMode</name><parameter_list>()</parameter_list> <block>{
        }</block></constructor>
        <comment type="javadoc">/**
         * Constructor with an arg.
         * @param value the enumerated value as a string.
         */</comment>
        <constructor><specifier>public</specifier> <name>StrictMode</name><parameter_list>(<param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>setValue</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>
        <comment type="javadoc">/**
         * Get List of valid strings.
         * @return the list of values.
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getValues</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr>new <name><name>String</name><index>[]</index></name><block>{<expr>"fail"</expr>, <expr>"warn"</expr>, <expr>"ignore"</expr>}</block></expr>;</return>
        }</block></function>
        <comment type="javadoc">/**
         * @return The log level according to the strict mode.
         */</comment>
        <function><type><specifier>public</specifier> <name>int</name></type> <name>getLogLevel</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr>(<call><name>getValue</name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr>"ignore"</expr></argument>)</argument_list></call>) ? <name><name>Project</name>.<name>MSG_VERBOSE</name></name> : <name><name>Project</name>.<name>MSG_WARN</name></name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
