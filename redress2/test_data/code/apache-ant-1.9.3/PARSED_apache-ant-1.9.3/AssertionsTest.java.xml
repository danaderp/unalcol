<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\types\AssertionsTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildFileTest</name></name>;</import>

<comment type="javadoc">/**
 * test assertion handling
 */</comment>
<class><specifier>public</specifier> class <name>AssertionsTest</name> <super><extends>extends <name>BuildFileTest</name></extends></super> <block>{

    <constructor><specifier>public</specifier> <name>AssertionsTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr>"src/etc/testcases/types/assertions.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"teardown"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * runs a test and expects an assertion thrown in forked code
     * @param target
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>expectAssertion</name><parameter_list>(<param><decl><type><name>String</name></type> <name>target</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildExceptionContaining</name><argument_list>(<argument><expr><name>target</name></expr></argument>,
                <argument><expr>"assertion not thrown in "+<name>target</name></expr></argument>,
                <argument><expr>"Java returned: 1"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testClassname</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectAssertion</name><argument_list>(<argument><expr>"test-classname"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testPackage</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectAssertion</name><argument_list>(<argument><expr>"test-package"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testEmptyAssertions</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"test-empty-assertions"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testDisable</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"test-disable"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testOverride</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectAssertion</name><argument_list>(<argument><expr>"test-override"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testOverride2</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"test-override2"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testReferences</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectAssertion</name><argument_list>(<argument><expr>"test-references"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testMultipleAssertions</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildExceptionContaining</name><argument_list>(<argument><expr>"test-multiple-assertions"</expr></argument>,
                <argument><expr>"multiple assertions rejected"</expr></argument>,
                <argument><expr>"Only one assertion declaration is allowed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testReferenceAbuse</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildExceptionContaining</name><argument_list>(<argument><expr>"test-reference-abuse"</expr></argument>,
                <argument><expr>"reference abuse rejected"</expr></argument>,
                <argument><expr>"You must not specify"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNofork</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>AssertionsTest</name>.<name><name/></name></name>class.<call><name>desiredAssertionStatus</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return> <comment type="line">// ran Ant tests with -ea and this would fail spuriously</comment>
        }</block></then></if>
        <expr_stmt><expr><call><name>expectLogContaining</name><argument_list>(<argument><expr>"test-nofork"</expr></argument>,
                <argument><expr>"Assertion statements are currently ignored in non-forked mode"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>testJUnit</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"test-junit"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>


</unit>
