<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\ManifestClassPath.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>UnsupportedEncodingException</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Path</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>launch</name>.<name>Locator</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>

<comment type="javadoc">/**
 * Converts a Path into a property suitable as a Manifest classpath.
 *
 * @since Ant 1.7
 *
 * @ant.task category="property"
 */</comment>
<class><specifier>public</specifier> class <name>ManifestClassPath</name> <super><extends>extends <name>Task</name></extends></super> <block>{

    <comment type="javadoc">/** The property name to hold the classpath value. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>name</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The directory the classpath will be relative from. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>dir</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The maximum parent directory level to traverse. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>maxParentLevels</name> =<init> <expr>2</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The classpath to convert. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Path</name></type> <name>path</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Sets a property, which must not already exist, with a space
     * separated list of files and directories relative to the jar
     * file's parent directory.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>name</name> == <name>null</name></expr>)</condition><then> <block>{
          <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Missing 'property' attribute!"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>dir</name> == <name>null</name></expr>)</condition><then> <block>{
          <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Missing 'jarfile' attribute!"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getProperty</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
          <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Property '" + <name>name</name> + "' already set!"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>path</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Missing nested &lt;classpath&gt;!"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>tooLongSb</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>maxParentLevels</name> + 1</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>tooLongSb</name>.<name>append</name></name><argument_list>(<argument><expr>"../"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>tooLongPrefix</name> =<init> <expr><call><name><name>tooLongSb</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Normalize the reference directory (containing the jar)</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>FileUtils</name></type> <name>fileUtils</name> =<init> <expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>dir</name> = <call><name><name>fileUtils</name>.<name>normalize</name></name><argument_list>(<argument><expr><call><name><name>dir</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>elements</name> =<init> <expr><call><name><name>path</name>.<name>list</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>buffer</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>elements</name>.<name>length</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
            <comment type="line">// Normalize the current file</comment>
            <decl_stmt><decl><type><name>File</name></type> <name>pathEntry</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name><name>elements</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>fullPath</name> =<init> <expr><call><name><name>pathEntry</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>pathEntry</name> = <call><name><name>fileUtils</name>.<name>normalize</name></name><argument_list>(<argument><expr><name>fullPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>String</name></type> <name>relPath</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>canonicalPath</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <try>try <block>{
                <expr_stmt><expr><name>relPath</name> = <call><name><name>FileUtils</name>.<name>getRelativePath</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>pathEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>canonicalPath</name> = <call><name><name>pathEntry</name>.<name>getCanonicalPath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// getRelativePath always uses '/' as separator, adapt</comment>
                <if>if <condition>(<expr><name><name>File</name>.<name>separatorChar</name></name> != '/'</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>canonicalPath</name> =
                        <call><name><name>canonicalPath</name>.<name>replace</name></name><argument_list>(<argument><expr><name><name>File</name>.<name>separatorChar</name></name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"error trying to get the relative path"
                                         + " from " + <name>dir</name> + " to " + <name>fullPath</name></expr></argument>,
                                         <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>

            <comment type="line">// No match, so bail out!</comment>
            <if>if <condition>(<expr><call><name><name>relPath</name>.<name>equals</name></name><argument_list>(<argument><expr><name>canonicalPath</name></expr></argument>)</argument_list></call>
                || <call><name><name>relPath</name>.<name>startsWith</name></name><argument_list>(<argument><expr><name>tooLongPrefix</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                    <argument><expr>"No suitable relative path from "
                    + <name>dir</name> + " to " + <name>fullPath</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <if>if <condition>(<expr><call><name><name>pathEntry</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call> &amp;&amp; !<call><name><name>relPath</name>.<name>endsWith</name></name><argument_list>(<argument><expr>"/"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>relPath</name> = <name>relPath</name> + '/'</expr>;</expr_stmt>
            }</block></then></if>
            <try>try <block>{
                <expr_stmt><expr><name>relPath</name> = <call><name><name>Locator</name>.<name>encodeURI</name></name><argument_list>(<argument><expr><name>relPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>UnsupportedEncodingException</name></type> <name>exc</name></decl></param>) <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>exc</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
            <comment type="line">// Manifest's ClassPath: attribute always uses forward</comment>
            <comment type="line">// slashes '/', and is space-separated. Ant will properly</comment>
            <comment type="line">// format it on 72 columns with proper line continuation</comment>
            <expr_stmt><expr><call><name><name>buffer</name>.<name>append</name></name><argument_list>(<argument><expr><name>relPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>buffer</name>.<name>append</name></name><argument_list>(<argument><expr>' '</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <comment type="line">// Finally assign the property with the manifest classpath</comment>
        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>setNewProperty</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>buffer</name>.<name>toString</name></name><argument_list>()</argument_list></call>.<call><name>trim</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the property name to hold the classpath value.
     *
     * @param  name the property name
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setProperty</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>name</name></name> = <name>name</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The JAR file to contain the classpath attribute in its manifest.
     *
     * @param  jarfile the JAR file. Need not exist yet, but its parent
     *         directory must exist on the other hand.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setJarFile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>jarfile</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>parent</name> =<init> <expr><call><name><name>jarfile</name>.<name>getParentFile</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>parent</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Jar's directory not found: " + <name>parent</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>dir</name></name> = <name>parent</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the maximum parent directory levels allowed when computing
     * a relative path.
     *
     * @param  levels the max level. Defaults to 2.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMaxParentLevels</name><parameter_list>(<param><decl><type><name>int</name></type> <name>levels</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>levels</name> &lt; 0</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"maxParentLevels must not be a negative"
                                     + " number"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>maxParentLevels</name></name> = <name>levels</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Adds the classpath to convert.
     *
     * @param  path the classpath to convert.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addClassPath</name><parameter_list>(<param><decl><type><name>Path</name></type> <name>path</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>path</name></name> = <name>path</name></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
