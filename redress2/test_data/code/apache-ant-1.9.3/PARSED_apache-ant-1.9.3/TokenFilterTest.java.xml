<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\filters\TokenFilterTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>filters</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>Reader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileReader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildFileTest</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>

<comment type="javadoc">/**
 */</comment>
<class><specifier>public</specifier> class <name>TokenFilterTest</name> <super><extends>extends <name>BuildFileTest</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>FileUtils</name></type> <name>FILE_UTILS</name> =<init> <expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <constructor><specifier>public</specifier> <name>TokenFilterTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr>"src/etc/testcases/filters/tokenfilter.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"init"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"cleanup"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/** make sure tokenfilter exists */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testTokenfilter</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"tokenfilter"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testTrimignore</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>expectLogContaining</name><argument_list>(<argument><expr>"trimignore"</expr></argument>, <argument><expr>"Hello-World"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testStringTokenizer</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>expectLogContaining</name><argument_list>(
            <argument><expr>"stringtokenizer"</expr></argument>, <argument><expr>"#This#is#a#number#of#words#"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testUnixLineOutput</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>expectFileContains</name><argument_list>(
            <argument><expr>"unixlineoutput"</expr></argument>, <argument><expr>"result/unixlineoutput"</expr></argument>,
            <argument><expr>"\nThis\nis\na\nnumber\nof\nwords\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testDosLineOutput</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>expectFileContains</name><argument_list>(
            <argument><expr>"doslineoutput"</expr></argument>, <argument><expr>"result/doslineoutput"</expr></argument>,
            <argument><expr>"\r\nThis\r\nis\r\na\r\nnumber\r\nof\r\nwords\r\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFileTokenizer</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>contents</name> =<init> <expr><call><name>getFileString</name><argument_list>(
            <argument><expr>"filetokenizer"</expr></argument>, <argument><expr>"result/filetokenizer"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertStringContains</name><argument_list>(<argument><expr><name>contents</name></expr></argument>, <argument><expr>"   of words"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertStringNotContains</name><argument_list>(<argument><expr><name>contents</name></expr></argument>, <argument><expr>" This is"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testReplaceString</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>expectFileContains</name><argument_list>(
            <argument><expr>"replacestring"</expr></argument>, <argument><expr>"result/replacestring"</expr></argument>,
            <argument><expr>"this is the moon"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testReplaceStrings</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>expectLogContaining</name><argument_list>(<argument><expr>"replacestrings"</expr></argument>, <argument><expr>"bar bar bar"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testContainsString</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>contents</name> =<init> <expr><call><name>getFileString</name><argument_list>(
            <argument><expr>"containsstring"</expr></argument>, <argument><expr>"result/containsstring"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertStringContains</name><argument_list>(<argument><expr><name>contents</name></expr></argument>, <argument><expr>"this is a line contains foo"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertStringNotContains</name><argument_list>(<argument><expr><name>contents</name></expr></argument>, <argument><expr>"this line does not"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testReplaceRegex</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr>! <call><name>hasRegex</name><argument_list>(<argument><expr>"testReplaceRegex"</expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return;</return></then></if>
        <decl_stmt><decl><type><name>String</name></type> <name>contents</name> =<init> <expr><call><name>getFileString</name><argument_list>(
            <argument><expr>"replaceregex"</expr></argument>, <argument><expr>"result/replaceregex"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertStringContains</name><argument_list>(<argument><expr><name>contents</name></expr></argument>, <argument><expr>"world world world world"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertStringContains</name><argument_list>(<argument><expr><name>contents</name></expr></argument>, <argument><expr>"dog Cat dog"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertStringContains</name><argument_list>(<argument><expr><name>contents</name></expr></argument>, <argument><expr>"moon Sun Sun"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertStringContains</name><argument_list>(<argument><expr><name>contents</name></expr></argument>, <argument><expr>"found WhiteSpace"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertStringContains</name><argument_list>(<argument><expr><name>contents</name></expr></argument>, <argument><expr>"Found digits [1234]"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertStringNotContains</name><argument_list>(<argument><expr><name>contents</name></expr></argument>, <argument><expr>"This is a line with digits"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFilterReplaceRegex</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr>! <call><name>hasRegex</name><argument_list>(<argument><expr>"testFilterReplaceRegex"</expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return;</return></then></if>
        <decl_stmt><decl><type><name>String</name></type> <name>contents</name> =<init> <expr><call><name>getFileString</name><argument_list>(
            <argument><expr>"filterreplaceregex"</expr></argument>, <argument><expr>"result/filterreplaceregex"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertStringContains</name><argument_list>(<argument><expr><name>contents</name></expr></argument>, <argument><expr>"world world world world"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testHandleDollerMatch</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr>! <call><name>hasRegex</name><argument_list>(<argument><expr>"testFilterReplaceRegex"</expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return;</return></then></if>
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"dollermatch"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testTrimFile</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>contents</name> =<init> <expr><call><name>getFileString</name><argument_list>(
            <argument><expr>"trimfile"</expr></argument>, <argument><expr>"result/trimfile"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"no ws at start"</expr></argument>, <argument><expr><call><name><name>contents</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"This is th"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"no ws at end"</expr></argument>, <argument><expr><call><name><name>contents</name>.<name>endsWith</name></name><argument_list>(<argument><expr>"second line."</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertStringContains</name><argument_list>(<argument><expr><name>contents</name></expr></argument>, <argument><expr>"  This is the second"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testTrimFileByLine</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>contents</name> =<init> <expr><call><name>getFileString</name><argument_list>(
            <argument><expr>"trimfilebyline"</expr></argument>, <argument><expr>"result/trimfilebyline"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr>"no ws at start"</expr></argument>, <argument><expr><call><name><name>contents</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"This is th"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr>"no ws at end"</expr></argument>, <argument><expr><call><name><name>contents</name>.<name>endsWith</name></name><argument_list>(<argument><expr>"second line."</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertStringNotContains</name><argument_list>(<argument><expr><name>contents</name></expr></argument>, <argument><expr>"  This is the second"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertStringContains</name><argument_list>(<argument><expr><name>contents</name></expr></argument>, <argument><expr>"file.\nThis is the second"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFilterReplaceString</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>contents</name> =<init> <expr><call><name>getFileString</name><argument_list>(
            <argument><expr>"filterreplacestring"</expr></argument>, <argument><expr>"result/filterreplacestring"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertStringContains</name><argument_list>(<argument><expr><name>contents</name></expr></argument>, <argument><expr>"This is the moon"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFilterReplaceStrings</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>expectLogContaining</name><argument_list>(<argument><expr>"filterreplacestrings"</expr></argument>, <argument><expr>"bar bar bar"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testContainsRegex</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr>! <call><name>hasRegex</name><argument_list>(<argument><expr>"testContainsRegex"</expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return;</return></then></if>
        <decl_stmt><decl><type><name>String</name></type> <name>contents</name> =<init> <expr><call><name>getFileString</name><argument_list>(
            <argument><expr>"containsregex"</expr></argument>, <argument><expr>"result/containsregex"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertStringContains</name><argument_list>(<argument><expr><name>contents</name></expr></argument>, <argument><expr>"hello world"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertStringNotContains</name><argument_list>(<argument><expr><name>contents</name></expr></argument>, <argument><expr>"this is the moon"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertStringContains</name><argument_list>(<argument><expr><name>contents</name></expr></argument>, <argument><expr>"World here"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFilterContainsRegex</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr>! <call><name>hasRegex</name><argument_list>(<argument><expr>"testFilterContainsRegex"</expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return;</return></then></if>
        <decl_stmt><decl><type><name>String</name></type> <name>contents</name> =<init> <expr><call><name>getFileString</name><argument_list>(
            <argument><expr>"filtercontainsregex"</expr></argument>, <argument><expr>"result/filtercontainsregex"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertStringContains</name><argument_list>(<argument><expr><name>contents</name></expr></argument>, <argument><expr>"hello world"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertStringNotContains</name><argument_list>(<argument><expr><name>contents</name></expr></argument>, <argument><expr>"this is the moon"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertStringContains</name><argument_list>(<argument><expr><name>contents</name></expr></argument>, <argument><expr>"World here"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testContainsRegex2</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr>! <call><name>hasRegex</name><argument_list>(<argument><expr>"testContainsRegex2"</expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return;</return></then></if>
        <decl_stmt><decl><type><name>String</name></type> <name>contents</name> =<init> <expr><call><name>getFileString</name><argument_list>(
            <argument><expr>"containsregex2"</expr></argument>, <argument><expr>"result/containsregex2"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertStringContains</name><argument_list>(<argument><expr><name>contents</name></expr></argument>, <argument><expr>"void register_bits();"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testDeleteCharacters</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>contents</name> =<init> <expr><call><name>getFileString</name><argument_list>(
            <argument><expr>"deletecharacters"</expr></argument>, <argument><expr>"result/deletechars"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertStringNotContains</name><argument_list>(<argument><expr><name>contents</name></expr></argument>, <argument><expr>"#"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertStringNotContains</name><argument_list>(<argument><expr><name>contents</name></expr></argument>, <argument><expr>"*"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertStringContains</name><argument_list>(<argument><expr><name>contents</name></expr></argument>, <argument><expr>"This is some "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testScriptFilter</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr>! <call><name>hasScript</name><argument_list>(<argument><expr>"testScriptFilter"</expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return;</return></then></if>

        <expr_stmt><expr><call><name>expectFileContains</name><argument_list>(<argument><expr>"scriptfilter"</expr></argument>, <argument><expr>"result/scriptfilter"</expr></argument>,
                           <argument><expr>"HELLO WORLD"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>testScriptFilter2</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr>! <call><name>hasScript</name><argument_list>(<argument><expr>"testScriptFilter"</expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return;</return></then></if>

        <expr_stmt><expr><call><name>expectFileContains</name><argument_list>(<argument><expr>"scriptfilter2"</expr></argument>, <argument><expr>"result/scriptfilter2"</expr></argument>,
                           <argument><expr>"HELLO MOON"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testCustomTokenFilter</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>expectFileContains</name><argument_list>(<argument><expr>"customtokenfilter"</expr></argument>, <argument><expr>"result/custom"</expr></argument>,
                           <argument><expr>"Hello World"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// ------------------------------------------------------</comment>
    <comment type="line">//   Helper methods</comment>
    <comment type="line">// -----------------------------------------------------</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>hasScript</name><parameter_list>(<param><decl><type><name>String</name></type> <name>test</name></decl></param>)</parameter_list> <block>{
        <try>try <block>{
            <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"hasscript"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch (<param><decl><type><name>Throwable</name></type> <name>ex</name></decl></param>) <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(
                <argument><expr><name>test</name> + ": skipped - script not present "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>false</expr>;</return>
        }</block></catch></try>
        <return>return <expr>true</expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>hasRegex</name><parameter_list>(<param><decl><type><name>String</name></type> <name>test</name></decl></param>)</parameter_list> <block>{
        <try>try <block>{
            <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"hasregex"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>expectFileContains</name><argument_list>(<argument><expr>"result/replaceregexp"</expr></argument>, <argument><expr>"bye world"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch (<param><decl><type><name>Throwable</name></type> <name>ex</name></decl></param>) <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><name>test</name> + ": skipped - regex not present "
                               + <name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>false</expr>;</return>
        }</block></catch></try>
        <return>return <expr>true</expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>assertStringContains</name><parameter_list>(<param><decl><type><name>String</name></type> <name>string</name></decl></param>, <param><decl><type><name>String</name></type> <name>contains</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"[" + <name>string</name> + "] does not contain [" + <name>contains</name> +"]"</expr></argument>,
                   <argument><expr><call><name><name>string</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>contains</name></expr></argument>)</argument_list></call> &gt; -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>assertStringNotContains</name><parameter_list>(<param><decl><type><name>String</name></type> <name>string</name></decl></param>, <param><decl><type><name>String</name></type> <name>contains</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"[" + <name>string</name> + "] does contain [" + <name>contains</name> +"]"</expr></argument>,
                   <argument><expr><call><name><name>string</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>contains</name></expr></argument>)</argument_list></call> == -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>getFileString</name><parameter_list>(<param><decl><type><name>String</name></type> <name>filename</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>Reader</name></type> <name>r</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>r</name> = new <call><name>FileReader</name><argument_list>(<argument><expr><call><name><name>FILE_UTILS</name>.<name>resolveFile</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return  <expr><call><name><name>FileUtils</name>.<name>readFully</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block>
        <finally>finally <block>{
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>

    }</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>getFileString</name><parameter_list>(<param><decl><type><name>String</name></type> <name>target</name></decl></param>, <param><decl><type><name>String</name></type> <name>filename</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>getFileString</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>expectFileContains</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>, <param><decl><type><name>String</name></type> <name>contains</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>content</name> =<init> <expr><call><name>getFileString</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(
            <argument><expr>"expecting file " + <name>name</name> + " to contain " + <name>contains</name> +
            " but got " + <name>content</name></expr></argument>, <argument><expr><call><name><name>content</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>contains</name></expr></argument>)</argument_list></call> &gt; -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>expectFileContains</name><parameter_list>(
        <param><decl><type><name>String</name></type> <name>target</name></decl></param>, <param><decl><type><name>String</name></type> <name>name</name></decl></param>, <param><decl><type><name>String</name></type> <name>contains</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>expectFileContains</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>contains</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Capitalize</name>
        <super><implements>implements <name>TokenFilter</name>.<name>Filter</name></implements></super>
    <block>{
        <function><type><specifier>public</specifier> <name>String</name></type> <name>filter</name><parameter_list>(<param><decl><type><name>String</name></type> <name>token</name></decl></param>)</parameter_list> <block>{
            <if>if <condition>(<expr><call><name><name>token</name>.<name>length</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then>
                <return>return <expr><name>token</name></expr>;</return></then></if>
            <return>return <expr><call><name><name>token</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call>.<call><name>toUpperCase</name><argument_list>()</argument_list></call> +
                <call><name><name>token</name>.<name>substring</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>

}</block></class>
</unit>
