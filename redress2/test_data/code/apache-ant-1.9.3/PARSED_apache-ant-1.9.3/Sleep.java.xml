<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\Sleep.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>

<comment type="javadoc">/**
 * Sleep, or pause, for a period of time.
 *
 * A task for sleeping a short period of time, useful when a
 * build or deployment process requires an interval between tasks.
 *&lt;p&gt;
 * A negative value can be supplied to any of attributes provided the total sleep time
 * is positive, pending fundamental changes in physics and JVM
 * execution times&lt;/p&gt;
 * Note that sleep times are always hints to be interpreted by the OS how it feels
 * small times may either be ignored or rounded up to a minimum timeslice. Note
 * also that the system clocks often have a fairly low granularity too, which complicates
 * measuring how long a sleep actually took.&lt;/p&gt;
 *
 * @since Ant 1.4
 * @ant.task category="utility"
 */</comment>

<class><specifier>public</specifier> class <name>Sleep</name> <super><extends>extends <name>Task</name></extends></super> <block>{
    <comment type="javadoc">/**
     * failure flag
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>failOnError</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * sleep seconds
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>seconds</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * sleep hours
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>hours</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * sleep minutes
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>minutes</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * sleep milliseconds
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>milliseconds</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>



    <comment type="javadoc">/**
     * Creates new instance
     */</comment>
    <constructor><specifier>public</specifier> <name>Sleep</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>


    <comment type="javadoc">/**
     * seconds to add to the sleep time
     *
     * @param seconds The new Seconds value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSeconds</name><parameter_list>(<param><decl><type><name>int</name></type> <name>seconds</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>seconds</name></name> = <name>seconds</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * hours to add to the sleep time.
     *
     * @param hours The new Hours value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setHours</name><parameter_list>(<param><decl><type><name>int</name></type> <name>hours</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>hours</name></name> = <name>hours</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * minutes to add to the sleep time
     *
     * @param minutes The new Minutes value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMinutes</name><parameter_list>(<param><decl><type><name>int</name></type> <name>minutes</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>minutes</name></name> = <name>minutes</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * milliseconds to add to the sleep time
     *
     * @param milliseconds The new Milliseconds value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMilliseconds</name><parameter_list>(<param><decl><type><name>int</name></type> <name>milliseconds</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>milliseconds</name></name> = <name>milliseconds</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * sleep for a period of time
     *
     * @param millis time to sleep
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>doSleep</name><parameter_list>(<param><decl><type><name>long</name></type> <name>millis</name></decl></param>)</parameter_list> <block>{
        <try>try <block>{
            <expr_stmt><expr><call><name><name>Thread</name>.<name>sleep</name></name><argument_list>(<argument><expr><name>millis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>InterruptedException</name></type> <name>ie</name></decl></param>) <block>{
            <comment type="line">// Ignore Exception</comment>
        }</block></catch></try>
    }</block></function>


    <comment type="javadoc">/**
     * flag controlling whether to break the build on an error.
     *
     * @param failOnError The new FailOnError value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFailOnError</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>failOnError</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>failOnError</name></name> = <name>failOnError</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * return time to sleep
     *
     * @return sleep time. if below 0 then there is an error
     */</comment>

    <function><type><specifier>private</specifier> <name>long</name></type> <name>getSleepTime</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// CheckStyle:MagicNumber OFF</comment>
        <return>return <expr>((((<name>long</name>) <name>hours</name> * 60) + <name>minutes</name>) * 60 + <name>seconds</name>) * 1000
            + <name>milliseconds</name></expr>;</return>
        <comment type="line">// CheckStyle:MagicNumber ON</comment>
    }</block></function>


    <comment type="javadoc">/**
     * verify parameters
     *
     * @throws BuildException if something is invalid
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>validate</name><parameter_list>()</parameter_list>
        <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><call><name>getSleepTime</name><argument_list>()</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Negative sleep periods are not "
                                     + "supported"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
    }</block></function>


    <comment type="javadoc">/**
     * Executes this build task. Throws org.apache.tools.ant.BuildException
     * if there is an error during task execution.
     *
     * @exception BuildException Description of Exception
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list>
        <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <try>try <block>{
            <expr_stmt><expr><call><name>validate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>sleepTime</name> =<init> <expr><call><name>getSleepTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"sleeping for " + <name>sleepTime</name> + " milliseconds"</expr></argument>,
                <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>doSleep</name><argument_list>(<argument><expr><name>sleepTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
            <if>if <condition>(<expr><name>failOnError</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then> <else>else <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>text</name> =<init> <expr><call><name><name>e</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_ERR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></catch></try>
    }</block></function>

}</block></class>

</unit>
