<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\Javadoc.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>BufferedReader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>BufferedWriter</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileNotFoundException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileReader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileWriter</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FilenameFilter</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStreamReader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>OutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>OutputStreamWriter</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>MalformedURLException</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>URL</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashSet</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Locale</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>StringTokenizer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>DirectoryScanner</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>MagicNames</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>ProjectComponent</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Commandline</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>DirSet</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>EnumeratedAttribute</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>FileSet</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Path</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>PatternSet</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Reference</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Resource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>ResourceCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>FileProvider</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>StringUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>JavaEnvUtils</name></name>;</import>

<comment type="javadoc">/**
 * Generates Javadoc documentation for a collection
 * of source code.
 *
 * &lt;p&gt;Current known limitations are:
 *
 * &lt;p&gt;&lt;ul&gt;
 *    &lt;li&gt;patterns must be of the form "xxx.*", every other pattern doesn't
 *        work.
 *    &lt;li&gt;there is no control on arguments sanity since they are left
 *        to the Javadoc implementation.
 * &lt;/ul&gt;
 *
 * &lt;p&gt;If no &lt;code&gt;doclet&lt;/code&gt; is set, then the &lt;code&gt;version&lt;/code&gt; and
 * &lt;code&gt;author&lt;/code&gt; are by default &lt;code&gt;"yes"&lt;/code&gt;.
 *
 * &lt;p&gt;Note: This task is run on another VM because the Javadoc code calls
 * &lt;code&gt;System.exit()&lt;/code&gt; which would break Ant functionality.
 *
 * @since Ant 1.1
 *
 * @ant.task category="java"
 */</comment>
<class><specifier>public</specifier> class <name>Javadoc</name> <super><extends>extends <name>Task</name></extends></super> <block>{
    <comment type="line">// Whether *this VM* is 1.4+ (but also check executable != null).</comment>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>JAVADOC_5</name> =<init>
        <expr>!<call><name><name>JavaEnvUtils</name>.<name>isJavaVersion</name></name><argument_list>(<argument><expr><name><name>JavaEnvUtils</name>.<name>JAVA_1_4</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>LOAD_FRAME</name> =<init> <expr>"function loadFrames() {"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>LOAD_FRAME_LEN</name> =<init> <expr><call><name><name>LOAD_FRAME</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Inner class used to manage doclet parameters.
     */</comment>
    <class><specifier>public</specifier> class <name>DocletParam</name> <block>{
        <comment type="javadoc">/** The parameter name */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>name</name></decl>;</decl_stmt>

        <comment type="javadoc">/** The parameter value */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>value</name></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * Set the name of the parameter.
         *
         * @param name the name of the doclet parameter
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>name</name></name> = <name>name</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * Get the parameter name.
         *
         * @return the parameter's name.
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>name</name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Set the parameter value.
         *
         * Note that only string values are supported. No resolution of file
         * paths is performed.
         *
         * @param value the parameter value.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setValue</name><parameter_list>(<param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>value</name></name> = <name>value</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * Get the parameter value.
         *
         * @return the parameter value.
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getValue</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>value</name></expr>;</return>
        }</block></function>
    }</block></class>

    <comment type="javadoc">/**
     * A project aware class used for Javadoc extensions which take a name
     * and a path such as doclet and taglet arguments.
     *
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>ExtensionInfo</name> <super><extends>extends <name>ProjectComponent</name></extends></super> <block>{
        <comment type="javadoc">/** The name of the extension */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>name</name></decl>;</decl_stmt>

        <comment type="javadoc">/** The optional path to use to load the extension */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>Path</name></type> <name>path</name></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * Set the name of the extension
         *
         * @param name the extension's name.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>name</name></name> = <name>name</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * Get the name of the extension.
         *
         * @return the extension's name.
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>name</name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Set the path to use when loading the component.
         *
         * @param path a Path instance containing the classpath to use.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setPath</name><parameter_list>(<param><decl><type><name>Path</name></type> <name>path</name></decl></param>)</parameter_list> <block>{
            <if>if <condition>(<expr><name><name>this</name>.<name>path</name></name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>this</name>.<name>path</name></name> = <name>path</name></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>this</name>.<name>path</name>.<name>append</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></function>

        <comment type="javadoc">/**
         * Get the extension's path.
         *
         * @return the path to be used to load the extension.
         * May be &lt;code&gt;null&lt;/code&gt;
         */</comment>
        <function><type><specifier>public</specifier> <name>Path</name></type> <name>getPath</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>path</name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Create an empty nested path to be configured by Ant with the
         * classpath for the extension.
         *
         * @return a new Path instance to be configured.
         */</comment>
        <function><type><specifier>public</specifier> <name>Path</name></type> <name>createPath</name><parameter_list>()</parameter_list> <block>{
            <if>if <condition>(<expr><name>path</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>path</name> = new <call><name>Path</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <return>return <expr><call><name><name>path</name>.<name>createPath</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Adds a reference to a CLASSPATH defined elsewhere.
         *
         * @param r the reference containing the path.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setPathRef</name><parameter_list>(<param><decl><type><name>Reference</name></type> <name>r</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>createPath</name><argument_list>()</argument_list></call>.<call><name>setRefid</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>

    <comment type="javadoc">/**
     * This class stores info about doclets.
     *
     */</comment>
    <class><specifier>public</specifier> class <name>DocletInfo</name> <super><extends>extends <name>ExtensionInfo</name></extends></super> <block>{

        <comment type="javadoc">/** Collection of doclet parameters. */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>DocletParam</name></argument>&gt;</argument_list></name></type> <name>params</name> =<init> <expr>new <call><name><name>Vector</name><argument_list>&lt;<argument><name>DocletParam</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * Create a doclet parameter to be configured by Ant.
         *
         * @return a new DocletParam instance to be configured.
         */</comment>
        <function><type><specifier>public</specifier> <name>DocletParam</name></type> <name>createParam</name><parameter_list>()</parameter_list> <block>{
            <decl_stmt><decl><type><name>DocletParam</name></type> <name>param</name> =<init> <expr>new <call><name>DocletParam</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>params</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return>return <expr><name>param</name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Get the doclet's parameters.
         *
         * @return an Enumeration of DocletParam instances.
         */</comment>
        <function><type><specifier>public</specifier> <name><name>Enumeration</name><argument_list>&lt;<argument><name>DocletParam</name></argument>&gt;</argument_list></name></type> <name>getParams</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><call><name><name>params</name>.<name>elements</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>

    <comment type="javadoc">/**
     * Used to track info about the packages to be javadoc'd
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>PackageName</name> <block>{
        <comment type="javadoc">/** The package name */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>name</name></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * Set the name of the package
         *
         * @param name the package name.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>name</name></name> = <call><name><name>name</name>.<name>trim</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * Get the package name.
         *
         * @return the package's name.
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>name</name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Return a string rep for this object.
         * @return the package name.
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><call><name>getName</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>

    <comment type="javadoc">/**
     * This class is used to manage the source files to be processed.
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>SourceFile</name> <block>{
        <comment type="javadoc">/** The source file */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>file</name></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * Default constructor
         */</comment>
        <constructor><specifier>public</specifier> <name>SourceFile</name><parameter_list>()</parameter_list> <block>{
            <comment type="line">//empty</comment>
        }</block></constructor>

        <comment type="javadoc">/**
         * Constructor specifying the source file directly
         *
         * @param file the source file
         */</comment>
        <constructor><specifier>public</specifier> <name>SourceFile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>file</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>file</name></name> = <name>file</name></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="javadoc">/**
         * Set the source file.
         *
         * @param file the source file.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setFile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>file</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>file</name></name> = <name>file</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * Get the source file.
         *
         * @return the source file.
         */</comment>
        <function><type><specifier>public</specifier> <name>File</name></type> <name>getFile</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>file</name></expr>;</return>
        }</block></function>
    }</block></class>

    <comment type="javadoc">/**
     * An HTML element in the Javadoc.
     *
     * This class is used for those Javadoc elements which contain HTML such as
     * footers, headers, etc.
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Html</name> <block>{
        <comment type="javadoc">/** The text for the element */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>StringBuffer</name></type> <name>text</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * Add text to the element.
         *
         * @param t the text to be added.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>addText</name><parameter_list>(<param><decl><type><name>String</name></type> <name>t</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>text</name>.<name>append</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * Get the current text for the element.
         *
         * @return the current text.
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getText</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><call><name><name>text</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>

    <comment type="javadoc">/**
     * EnumeratedAttribute implementation supporting the Javadoc scoping
     * values.
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>AccessType</name> <super><extends>extends <name>EnumeratedAttribute</name></extends></super> <block>{
        <comment type="javadoc">/**
         * @return the allowed values for the access type.
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getValues</name><parameter_list>()</parameter_list> <block>{
            <comment type="line">// Protected first so if any GUI tool offers a default</comment>
            <comment type="line">// based on enum #0, it will be right.</comment>
            <return>return <expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"protected"</expr>, <expr>"public"</expr>, <expr>"package"</expr>, <expr>"private"</expr>}</block></expr>;</return>
        }</block></function>
    }</block></class>

    <comment type="javadoc">/**
     * Holds a collection of ResourceCollections.
     *
     * &lt;p&gt;A separate kind of container is needed since this task
     * contains special handling for FileSets that has to occur at
     * task runtime.&lt;/p&gt;
     */</comment>
    <class><specifier>public</specifier> class <name>ResourceCollectionContainer</name> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name><name>ArrayList</name><argument_list>&lt;<argument><name>ResourceCollection</name></argument>&gt;</argument_list></name></type> <name>rcs</name> =<init> <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>ResourceCollection</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="javadoc">/**
         * Add a resource collection to the container.
         * @param rc the collection to add.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>ResourceCollection</name></type> <name>rc</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>rcs</name>.<name>add</name></name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * Get an iterator on the collection.
         * @return an iterator.
         */</comment>
        <function><type><specifier>private</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name>ResourceCollection</name></argument>&gt;</argument_list></name></type> <name>iterator</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><call><name><name>rcs</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>FileUtils</name></type> <name>FILE_UTILS</name> =<init> <expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The command line built to execute Javadoc. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Commandline</name></type> <name>cmd</name> =<init> <expr>new <call><name>Commandline</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Utility method to add an argument to the command line conditionally
     * based on the given flag.
     *
     * @param b the flag which controls if the argument is added.
     * @param arg the argument value.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>addArgIf</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>, <param><decl><type><name>String</name></type> <name>arg</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>b</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Utility method to add a Javadoc argument.
     *
     * @param key the argument name.
     * @param value the argument value.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>addArgIfNotEmpty</name><parameter_list>(<param><decl><type><name>String</name></type> <name>key</name></decl></param>, <param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>value</name> != <name>null</name> &amp;&amp; <call><name><name>value</name>.<name>length</name></name><argument_list>()</argument_list></call> != 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Warning: Leaving out empty argument '" + <name>key</name> + "'"</expr></argument>,
                <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Flag which indicates if the task should fail if there is a
     * Javadoc error.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>failOnError</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Path</name></type> <name>sourcePath</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>destDir</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>SourceFile</name></argument>&gt;</argument_list></name></type> <name>sourceFiles</name> =<init> <expr>new <call><name><name>Vector</name><argument_list>&lt;<argument><name>SourceFile</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>PackageName</name></argument>&gt;</argument_list></name></type> <name>packageNames</name> =<init> <expr>new <call><name><name>Vector</name><argument_list>&lt;<argument><name>PackageName</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>PackageName</name></argument>&gt;</argument_list></name></type> <name>excludePackageNames</name> =<init> <expr>new <call><name><name>Vector</name><argument_list>&lt;<argument><name>PackageName</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>author</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>version</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>DocletInfo</name></type> <name>doclet</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Path</name></type> <name>classpath</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Path</name></type> <name>bootclasspath</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>group</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>packageList</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>LinkArgument</name></argument>&gt;</argument_list></name></type> <name>links</name> =<init> <expr>new <call><name><name>Vector</name><argument_list>&lt;<argument><name>LinkArgument</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>GroupArgument</name></argument>&gt;</argument_list></name></type> <name>groups</name> =<init> <expr>new <call><name><name>Vector</name><argument_list>&lt;<argument><name>GroupArgument</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>tags</name> =<init> <expr>new <call><name><name>Vector</name><argument_list>&lt;<argument><name>Object</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>useDefaultExcludes</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Html</name></type> <name>doctitle</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Html</name></type> <name>header</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Html</name></type> <name>footer</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Html</name></type> <name>bottom</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>useExternalFile</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>source</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>linksource</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>breakiterator</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>noqualifier</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>includeNoSourcePackages</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>executable</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>docFilesSubDirs</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>excludeDocFilesSubDir</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>docEncoding</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>postProcessGeneratedJavadocs</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>ResourceCollectionContainer</name></type> <name>nestedSourceFiles</name>
        =<init> <expr>new <call><name>ResourceCollectionContainer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>DirSet</name></argument>&gt;</argument_list></name></type> <name>packageSets</name> =<init> <expr>new <call><name><name>Vector</name><argument_list>&lt;<argument><name>DirSet</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Work around command line length limit by using an external file
     * for the sourcefiles.
     *
     * @param b true if an external file is to be used.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUseExternalFile</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>useExternalFile</name> = <name>b</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets whether default exclusions should be used or not.
     *
     * @param useDefaultExcludes "true"|"on"|"yes" when default exclusions
     *                           should be used, "false"|"off"|"no" when they
     *                           shouldn't be used.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDefaultexcludes</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>useDefaultExcludes</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>useDefaultExcludes</name></name> = <name>useDefaultExcludes</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the maximum memory to be used by the javadoc process
     *
     * @param max a string indicating the maximum memory according to the
     *        JVM conventions (e.g. 128m is 128 Megabytes)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMaxmemory</name><parameter_list>(<param><decl><type><name>String</name></type> <name>max</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-J-Xmx" + <name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set an additional parameter on the command line
     *
     * @param add the additional command line parameter for the javadoc task.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAdditionalparam</name><parameter_list>(<param><decl><type><name>String</name></type> <name>add</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setLine</name><argument_list>(<argument><expr><name>add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a command-line argument.
     * @return a command-line argument to configure
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Commandline</name>.<name>Argument</name></name></type> <name>createArg</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Specify where to find source file
     *
     * @param src a Path instance containing the various source directories.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSourcepath</name><parameter_list>(<param><decl><type><name>Path</name></type> <name>src</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>sourcePath</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>sourcePath</name> = <name>src</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>sourcePath</name>.<name>append</name></name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Create a path to be configured with the locations of the source
     * files.
     *
     * @return a new Path instance to be configured by the Ant core.
     */</comment>
    <function><type><specifier>public</specifier> <name>Path</name></type> <name>createSourcepath</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>sourcePath</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>sourcePath</name> = new <call><name>Path</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><call><name><name>sourcePath</name>.<name>createPath</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a reference to a CLASSPATH defined elsewhere.
     *
     * @param r the reference containing the source path definition.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSourcepathRef</name><parameter_list>(<param><decl><type><name>Reference</name></type> <name>r</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>createSourcepath</name><argument_list>()</argument_list></call>.<call><name>setRefid</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the directory where the Javadoc output will be generated.
     *
     * @param dir the destination directory.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDestdir</name><parameter_list>(<param><decl><type><name>File</name></type> <name>dir</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>destDir</name> = <name>dir</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-d"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setFile</name><argument_list>(<argument><expr><name>destDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the list of source files to process.
     *
     * @param src a comma separated list of source files.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSourcefiles</name><parameter_list>(<param><decl><type><name>String</name></type> <name>src</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>StringTokenizer</name></type> <name>tok</name> =<init> <expr>new <call><name>StringTokenizer</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr>","</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>tok</name>.<name>hasMoreTokens</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>f</name> =<init> <expr><call><name><name>tok</name>.<name>nextToken</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>SourceFile</name></type> <name>sf</name> =<init> <expr>new <call><name>SourceFile</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>sf</name>.<name>setFile</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>resolveFile</name><argument_list>(<argument><expr><call><name><name>f</name>.<name>trim</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>addSource</name><argument_list>(<argument><expr><name>sf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
    }</block></function>

    <comment type="javadoc">/**
     * Add a single source file.
     *
     * @param sf the source file to be processed.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addSource</name><parameter_list>(<param><decl><type><name>SourceFile</name></type> <name>sf</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>sourceFiles</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>sf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the package names to be processed.
     *
     * @param packages a comma separated list of packages specs
     *        (may be wildcarded).
     *
     * @see #addPackage for wildcard information.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPackagenames</name><parameter_list>(<param><decl><type><name>String</name></type> <name>packages</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>StringTokenizer</name></type> <name>tok</name> =<init> <expr>new <call><name>StringTokenizer</name><argument_list>(<argument><expr><name>packages</name></expr></argument>, <argument><expr>","</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>tok</name>.<name>hasMoreTokens</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>p</name> =<init> <expr><call><name><name>tok</name>.<name>nextToken</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>PackageName</name></type> <name>pn</name> =<init> <expr>new <call><name>PackageName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>pn</name>.<name>setName</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>addPackage</name><argument_list>(<argument><expr><name>pn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
    }</block></function>

    <comment type="javadoc">/**
     * Add a single package to be processed.
     *
     * If the package name ends with &amp;quot;.*&amp;quot; the Javadoc task
     * will find and process all subpackages.
     *
     * @param pn the package name, possibly wildcarded.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addPackage</name><parameter_list>(<param><decl><type><name>PackageName</name></type> <name>pn</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>packageNames</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>pn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the list of packages to be excluded.
     *
     * @param packages a comma separated list of packages to be excluded.
     *        This may not include wildcards.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setExcludePackageNames</name><parameter_list>(<param><decl><type><name>String</name></type> <name>packages</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>StringTokenizer</name></type> <name>tok</name> =<init> <expr>new <call><name>StringTokenizer</name><argument_list>(<argument><expr><name>packages</name></expr></argument>, <argument><expr>","</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>tok</name>.<name>hasMoreTokens</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>p</name> =<init> <expr><call><name><name>tok</name>.<name>nextToken</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>PackageName</name></type> <name>pn</name> =<init> <expr>new <call><name>PackageName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>pn</name>.<name>setName</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>addExcludePackage</name><argument_list>(<argument><expr><name>pn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
    }</block></function>

    <comment type="javadoc">/**
     * Add a package to be excluded from the Javadoc run.
     *
     * @param pn the name of the package (wildcards are not permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addExcludePackage</name><parameter_list>(<param><decl><type><name>PackageName</name></type> <name>pn</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>excludePackageNames</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>pn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Specify the file containing the overview to be included in the generated
     * documentation.
     *
     * @param f the file containing the overview.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOverview</name><parameter_list>(<param><decl><type><name>File</name></type> <name>f</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-overview"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setFile</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Indicate whether only public classes and members are to be included in
     * the scope processed
     *
     * @param b true if scope is to be public.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPublic</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>addArgIf</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr>"-public"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Indicate whether only protected and public classes and members are to
     * be included in the scope processed
     *
     * @param b true if scope is to be protected.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setProtected</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>addArgIf</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr>"-protected"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Indicate whether only package, protected and public classes and
     * members are to be included in the scope processed
     *
     * @param b true if scope is to be package level.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPackage</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>addArgIf</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr>"-package"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Indicate whether all classes and
     * members are to be included in the scope processed
     *
     * @param b true if scope is to be private level.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPrivate</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>addArgIf</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr>"-private"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the scope to be processed. This is an alternative to the
     * use of the setPublic, setPrivate, etc methods. It gives better build
     * file control over what scope is processed.
     *
     * @param at the scope to be processed.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAccess</name><parameter_list>(<param><decl><type><name>AccessType</name></type> <name>at</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-" + <call><name><name>at</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the class that starts the doclet used in generating the
     * documentation.
     *
     * @param docletName the name of the doclet class.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDoclet</name><parameter_list>(<param><decl><type><name>String</name></type> <name>docletName</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>doclet</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>doclet</name> = new <call><name>DocletInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>doclet</name>.<name>setProject</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>doclet</name>.<name>setName</name></name><argument_list>(<argument><expr><name>docletName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the classpath used to find the doclet class.
     *
     * @param docletPath the doclet classpath.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDocletPath</name><parameter_list>(<param><decl><type><name>Path</name></type> <name>docletPath</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>doclet</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>doclet</name> = new <call><name>DocletInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>doclet</name>.<name>setProject</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>doclet</name>.<name>setPath</name></name><argument_list>(<argument><expr><name>docletPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the classpath used to find the doclet class by reference.
     *
     * @param r the reference to the Path instance to use as the doclet
     *        classpath.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDocletPathRef</name><parameter_list>(<param><decl><type><name>Reference</name></type> <name>r</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>doclet</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>doclet</name> = new <call><name>DocletInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>doclet</name>.<name>setProject</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>doclet</name>.<name>createPath</name></name><argument_list>()</argument_list></call>.<call><name>setRefid</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Create a doclet to be used in the documentation generation.
     *
     * @return a new DocletInfo instance to be configured.
     */</comment>
    <function><type><specifier>public</specifier> <name>DocletInfo</name></type> <name>createDoclet</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>doclet</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>doclet</name> = new <call><name>DocletInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>doclet</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Add a taglet
     *
     * @param tagletInfo information about the taglet.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addTaglet</name><parameter_list>(<param><decl><type><name>ExtensionInfo</name></type> <name>tagletInfo</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>tags</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>tagletInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Indicate whether Javadoc should produce old style (JDK 1.1)
     * documentation.
     *
     * This is not supported by JDK 1.1 and has been phased out in JDK 1.4
     *
     * @param b if true attempt to generate old style documentation.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOld</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Javadoc 1.4 doesn't support the -1.1 switch anymore"</expr></argument>,
            <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the classpath to be used for this Javadoc run.
     *
     * @param path an Ant Path object containing the compilation
     *        classpath.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setClasspath</name><parameter_list>(<param><decl><type><name>Path</name></type> <name>path</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>classpath</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>classpath</name> = <name>path</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>classpath</name>.<name>append</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Create a Path to be configured with the classpath to use
     *
     * @return a new Path instance to be configured with the classpath.
     */</comment>
    <function><type><specifier>public</specifier> <name>Path</name></type> <name>createClasspath</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>classpath</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>classpath</name> = new <call><name>Path</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><call><name><name>classpath</name>.<name>createPath</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a reference to a CLASSPATH defined elsewhere.
     *
     * @param r the reference to an instance defining the classpath.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setClasspathRef</name><parameter_list>(<param><decl><type><name>Reference</name></type> <name>r</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>createClasspath</name><argument_list>()</argument_list></call>.<call><name>setRefid</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the boot classpath to use.
     *
     * @param path the boot classpath.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBootclasspath</name><parameter_list>(<param><decl><type><name>Path</name></type> <name>path</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>bootclasspath</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>bootclasspath</name> = <name>path</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>bootclasspath</name>.<name>append</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Create a Path to be configured with the boot classpath
     *
     * @return a new Path instance to be configured with the boot classpath.
     */</comment>
    <function><type><specifier>public</specifier> <name>Path</name></type> <name>createBootclasspath</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>bootclasspath</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>bootclasspath</name> = new <call><name>Path</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><call><name><name>bootclasspath</name>.<name>createPath</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a reference to a CLASSPATH defined elsewhere.
     *
     * @param r the reference to an instance defining the bootclasspath.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBootClasspathRef</name><parameter_list>(<param><decl><type><name>Reference</name></type> <name>r</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>createBootclasspath</name><argument_list>()</argument_list></call>.<call><name>setRefid</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the location of the extensions directories.
     *
     * @param path the string version of the path.
     * @deprecated since 1.5.x.
     *             Use the {@link #setExtdirs(Path)} version.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setExtdirs</name><parameter_list>(<param><decl><type><name>String</name></type> <name>path</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-extdirs"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the location of the extensions directories.
     *
     * @param path a path containing the extension directories.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setExtdirs</name><parameter_list>(<param><decl><type><name>Path</name></type> <name>path</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-extdirs"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setPath</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Run javadoc in verbose mode
     *
     * @param b true if operation is to be verbose.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setVerbose</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>addArgIf</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr>"-verbose"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the local to use in documentation generation.
     *
     * @param locale the locale to use.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLocale</name><parameter_list>(<param><decl><type><name>String</name></type> <name>locale</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// createArgument(true) is necessary to make sure -locale</comment>
        <comment type="line">// is the first argument (required in 1.3+).</comment>
        <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>locale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-locale"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the encoding name of the source files,
     *
     * @param enc the name of the encoding for the source files.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setEncoding</name><parameter_list>(<param><decl><type><name>String</name></type> <name>enc</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-encoding"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Include the version tag in the generated documentation.
     *
     * @param b true if the version tag should be included.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setVersion</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>version</name></name> = <name>b</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Generate the &amp;quot;use&amp;quot page for each package.
     *
     * @param b true if the use page should be generated.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUse</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>addArgIf</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr>"-use"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Include the author tag in the generated documentation.
     *
     * @param b true if the author tag should be included.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAuthor</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>author</name> = <name>b</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Generate a split index
     *
     * @param b true if the index should be split into a file per letter.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSplitindex</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>addArgIf</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr>"-splitindex"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the title to be placed in the HTML &amp;lt;title&amp;gt; tag of the
     * generated documentation.
     *
     * @param title the window title to use.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setWindowtitle</name><parameter_list>(<param><decl><type><name>String</name></type> <name>title</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>addArgIfNotEmpty</name><argument_list>(<argument><expr>"-windowtitle"</expr></argument>, <argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the title of the generated overview page.
     *
     * @param doctitle the Document title.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDoctitle</name><parameter_list>(<param><decl><type><name>String</name></type> <name>doctitle</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Html</name></type> <name>h</name> =<init> <expr>new <call><name>Html</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>h</name>.<name>addText</name></name><argument_list>(<argument><expr><name>doctitle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addDoctitle</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a document title to use for the overview page.
     *
     * @param text the HTML element containing the document title.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addDoctitle</name><parameter_list>(<param><decl><type><name>Html</name></type> <name>text</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>doctitle</name> = <name>text</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the header text to be placed at the top of each output file.
     *
     * @param header the header text
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setHeader</name><parameter_list>(<param><decl><type><name>String</name></type> <name>header</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Html</name></type> <name>h</name> =<init> <expr>new <call><name>Html</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>h</name>.<name>addText</name></name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addHeader</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the header text to be placed at the top of each output file.
     *
     * @param text the header text
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addHeader</name><parameter_list>(<param><decl><type><name>Html</name></type> <name>text</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>header</name> = <name>text</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the footer text to be placed at the bottom of each output file.
     *
     * @param footer the footer text.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFooter</name><parameter_list>(<param><decl><type><name>String</name></type> <name>footer</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Html</name></type> <name>h</name> =<init> <expr>new <call><name>Html</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>h</name>.<name>addText</name></name><argument_list>(<argument><expr><name>footer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addFooter</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the footer text to be placed at the bottom of each output file.
     *
     * @param text the footer text.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addFooter</name><parameter_list>(<param><decl><type><name>Html</name></type> <name>text</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>footer</name> = <name>text</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the text to be placed at the bottom of each output file.
     *
     * @param bottom the bottom text.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBottom</name><parameter_list>(<param><decl><type><name>String</name></type> <name>bottom</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Html</name></type> <name>h</name> =<init> <expr>new <call><name>Html</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>h</name>.<name>addText</name></name><argument_list>(<argument><expr><name>bottom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addBottom</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the text to be placed at the bottom of each output file.
     *
     * @param text the bottom text.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addBottom</name><parameter_list>(<param><decl><type><name>Html</name></type> <name>text</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>bottom</name> = <name>text</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Link to docs at "url" using package list at "url2"
     * - separate the URLs by using a space character.
     *
     * @param src the offline link specification (url and package list)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLinkoffline</name><parameter_list>(<param><decl><type><name>String</name></type> <name>src</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>LinkArgument</name></type> <name>le</name> =<init> <expr><call><name>createLink</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>le</name>.<name>setOffline</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>linkOfflineError</name> =<init> <expr>"The linkoffline attribute must include"
            + " a URL and a package-list file location separated by a"
            + " space"</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>src</name>.<name>trim</name></name><argument_list>()</argument_list></call>.<call><name>length</name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>linkOfflineError</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>StringTokenizer</name></type> <name>tok</name> =<init> <expr>new <call><name>StringTokenizer</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr>" "</expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>le</name>.<name>setHref</name></name><argument_list>(<argument><expr><call><name><name>tok</name>.<name>nextToken</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr>!<call><name><name>tok</name>.<name>hasMoreTokens</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>linkOfflineError</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>le</name>.<name>setPackagelistLoc</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>resolveFile</name><argument_list>(<argument><expr><call><name><name>tok</name>.<name>nextToken</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Group specified packages together in overview page.
     *
     * @param src the group packages - a command separated list of group specs,
     *        each one being a group name and package specification separated
     *        by a space.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setGroup</name><parameter_list>(<param><decl><type><name>String</name></type> <name>src</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>group</name> = <name>src</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Create links to Javadoc output at the given URL.
     * @param src the URL to link to
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLink</name><parameter_list>(<param><decl><type><name>String</name></type> <name>src</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>createLink</name><argument_list>()</argument_list></call>.<call><name>setHref</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Control deprecation information
     *
     * @param b If true, do not include deprecated information.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setNodeprecated</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>addArgIf</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr>"-nodeprecated"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Control deprecated list generation
     *
     * @param b if true, do not generate deprecated list.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setNodeprecatedlist</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>addArgIf</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr>"-nodeprecatedlist"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Control class tree generation.
     *
     * @param b if true, do not generate class hierarchy.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setNotree</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>addArgIf</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr>"-notree"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Control generation of index.
     *
     * @param b if true, do not generate index.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setNoindex</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>addArgIf</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr>"-noindex"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Control generation of help link.
     *
     * @param b if true, do not generate help link
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setNohelp</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>addArgIf</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr>"-nohelp"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Control generation of the navigation bar.
     *
     * @param b if true, do not generate navigation bar.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setNonavbar</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>addArgIf</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr>"-nonavbar"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Control warnings about serial tag.
     *
     * @param b if true, generate warning about the serial tag.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSerialwarn</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>addArgIf</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr>"-serialwarn"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Specifies the CSS stylesheet file to use.
     *
     * @param f the file with the CSS to use.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setStylesheetfile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>f</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-stylesheetfile"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setFile</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Specifies the HTML help file to use.
     *
     * @param f the file containing help content.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setHelpfile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>f</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-helpfile"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setFile</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Output file encoding name.
     *
     * @param enc name of the encoding to use.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDocencoding</name><parameter_list>(<param><decl><type><name>String</name></type> <name>enc</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-docencoding"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cmd</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>docEncoding</name> = <name>enc</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The name of a file containing the packages to process.
     *
     * @param src the file containing the package list.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPackageList</name><parameter_list>(<param><decl><type><name>String</name></type> <name>src</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>packageList</name> = <name>src</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Create link to Javadoc output at the given URL.
     *
     * @return link argument to configure
     */</comment>
    <function><type><specifier>public</specifier> <name>LinkArgument</name></type> <name>createLink</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>LinkArgument</name></type> <name>la</name> =<init> <expr>new <call><name>LinkArgument</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>links</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>la</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>la</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Represents a link triplet (href, whether link is offline,
     * location of the package list if off line)
     */</comment>
    <class><specifier>public</specifier> class <name>LinkArgument</name> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>href</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>offline</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>packagelistLoc</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>URL</name></type> <name>packagelistURL</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>resolveLink</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

        <comment type="javadoc">/** Constructor for LinkArgument */</comment>
        <constructor><specifier>public</specifier> <name>LinkArgument</name><parameter_list>()</parameter_list> <block>{
            <comment type="line">//empty</comment>
        }</block></constructor>

        <comment type="javadoc">/**
         * Set the href attribute.
         * @param hr a &lt;code&gt;String&lt;/code&gt; value
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setHref</name><parameter_list>(<param><decl><type><name>String</name></type> <name>hr</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name>href</name> = <name>hr</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * Get the href attribute.
         * @return the href attribute.
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getHref</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>href</name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Set the packetlist location attribute.
         * @param src a &lt;code&gt;File&lt;/code&gt; value
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setPackagelistLoc</name><parameter_list>(<param><decl><type><name>File</name></type> <name>src</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name>packagelistLoc</name> = <name>src</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * Get the packetList location attribute.
         * @return the packetList location attribute.
         */</comment>
        <function><type><specifier>public</specifier> <name>File</name></type> <name>getPackagelistLoc</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>packagelistLoc</name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Set the packetlist location attribute.
         * @param src an &lt;code&gt;URL&lt;/code&gt; value
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setPackagelistURL</name><parameter_list>(<param><decl><type><name>URL</name></type> <name>src</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name>packagelistURL</name> = <name>src</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * Get the packetList location attribute.
         * @return the packetList location attribute.
         */</comment>
        <function><type><specifier>public</specifier> <name>URL</name></type> <name>getPackagelistURL</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>packagelistURL</name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Set the offline attribute.
         * @param offline a &lt;code&gt;boolean&lt;/code&gt; value
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setOffline</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>offline</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>offline</name></name> = <name>offline</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * Get the linkOffline attribute.
         * @return the linkOffline attribute.
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isLinkOffline</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>offline</name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Sets whether Ant should resolve the link attribute relative
         * to the current basedir.
         * @param resolve a &lt;code&gt;boolean&lt;/code&gt; value
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setResolveLink</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>resolve</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>resolveLink</name></name> = <name>resolve</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * should Ant resolve the link attribute relative to the
         * current basedir?
         * @return the resolveLink attribute.
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>shouldResolveLink</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>resolveLink</name></expr>;</return>
        }</block></function>

    }</block></class>

    <comment type="javadoc">/**
     * Creates and adds a -tag argument. This is used to specify
     * custom tags. This argument is only available for Javadoc 1.4,
     * and will generate a verbose message (and then be ignored)
     * when run on Java versions below 1.4.
     * @return tag argument to be configured
     */</comment>
    <function><type><specifier>public</specifier> <name>TagArgument</name></type> <name>createTag</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>TagArgument</name></type> <name>ta</name> =<init> <expr>new <call><name>TagArgument</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>tags</name>.<name>addElement</name></name> <argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>ta</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Scope element verbose names. (Defined here as fields
     * cannot be static in inner classes.) The first letter
     * from each element is used to build up the scope string.
     */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>String</name><index>[]</index></type> <name>SCOPE_ELEMENTS</name> =<init> <expr><block>{
        <expr>"overview"</expr>, <expr>"packages"</expr>, <expr>"types"</expr>, <expr>"constructors"</expr>,
        <expr>"methods"</expr>, <expr>"fields"</expr>
    }</block></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Class representing a -tag argument.
     */</comment>
    <class><specifier>public</specifier> class <name>TagArgument</name> <super><extends>extends <name>FileSet</name></extends></super> <block>{
        <comment type="javadoc">/** Name of the tag. */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>name</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <comment type="javadoc">/** Whether or not the tag is enabled. */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>enabled</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
        <comment type="javadoc">/**
         * Scope string of the tag. This will form the middle
         * argument of the -tag parameter when the tag is enabled
         * (with an X prepended for and is parsed from human-readable form.
         */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>scope</name> =<init> <expr>"a"</expr></init></decl>;</decl_stmt>

        <comment type="javadoc">/** Sole constructor. */</comment>
        <constructor><specifier>public</specifier> <name>TagArgument</name> <parameter_list>()</parameter_list> <block>{
            <comment type="line">//empty</comment>
        }</block></constructor>

        <comment type="javadoc">/**
         * Sets the name of the tag.
         *
         * @param name The name of the tag.
         *             Must not be &lt;code&gt;null&lt;/code&gt; or empty.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setName</name> <parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>name</name></name> = <name>name</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * Sets the scope of the tag. This is in comma-separated
         * form, with each element being one of "all" (the default),
         * "overview", "packages", "types", "constructors", "methods",
         * "fields". The elements are treated in a case-insensitive
         * manner.
         *
         * @param verboseScope The scope of the tag.
         *                     Must not be &lt;code&gt;null&lt;/code&gt;,
         *                     should not be empty.
         *
         * @exception BuildException if all is specified along with
         * other elements, if any elements are repeated, if no
         * elements are specified, or if any unrecognised elements are
         * specified.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setScope</name> <parameter_list>(<param><decl><type><name>String</name></type> <name>verboseScope</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
            <expr_stmt><expr><name>verboseScope</name> = <call><name><name>verboseScope</name>.<name>toLowerCase</name></name><argument_list>(<argument><expr><name><name>Locale</name>.<name>ENGLISH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>boolean</name><index>[]</index></type> <name>elements</name> =<init> <expr>new <name><name>boolean</name><index>[<expr><name><name>SCOPE_ELEMENTS</name>.<name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>boolean</name></type> <name>gotAll</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>gotNotAll</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

            <comment type="line">// Go through the tokens one at a time, updating the</comment>
            <comment type="line">// elements array and issuing warnings where appropriate.</comment>
            <decl_stmt><decl><type><name>StringTokenizer</name></type> <name>tok</name> =<init> <expr>new <call><name>StringTokenizer</name> <argument_list>(<argument><expr><name>verboseScope</name></expr></argument>, <argument><expr>","</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>tok</name>.<name>hasMoreTokens</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>next</name> =<init> <expr><call><name><name>tok</name>.<name>nextToken</name></name><argument_list>()</argument_list></call>.<call><name>trim</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>next</name>.<name>equals</name></name><argument_list>(<argument><expr>"all"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><name>gotAll</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>log</name> <argument_list>(<argument><expr>"Repeated tag scope element: all"</expr></argument>,
                                          <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <expr_stmt><expr><name>gotAll</name> = true</expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
                    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>SCOPE_ELEMENTS</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                        <if>if <condition>(<expr><call><name><name>next</name>.<name>equals</name></name> <argument_list>(<argument><expr><name><name>SCOPE_ELEMENTS</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                            <break>break;</break>
                        }</block></then></if>
                    }</block></for>
                    <if>if <condition>(<expr><name>i</name> == <name><name>SCOPE_ELEMENTS</name>.<name>length</name></name></expr>)</condition><then> <block>{
                        <throw>throw <expr>new <call><name>BuildException</name> <argument_list>(<argument><expr>"Unrecognised scope element: "
                                                  + <name>next</name></expr></argument>)</argument_list></call></expr>;</throw>
                    }</block></then> <else>else <block>{
                        <if>if <condition>(<expr><name><name>elements</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
                            <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>log</name> <argument_list>(<argument><expr>"Repeated tag scope element: "
                                              + <name>next</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                        <expr_stmt><expr><name><name>elements</name><index>[<expr><name>i</name></expr>]</index></name> = true</expr>;</expr_stmt>
                        <expr_stmt><expr><name>gotNotAll</name> = true</expr>;</expr_stmt>
                    }</block></else></if>
                }</block></else></if>
            }</block></while>

            <if>if <condition>(<expr><name>gotNotAll</name> &amp;&amp; <name>gotAll</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name> <argument_list>(<argument><expr>"Mixture of \"all\" and other scope "
                                          + "elements in tag parameter."</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <if>if <condition>(<expr>!<name>gotNotAll</name> &amp;&amp; !<name>gotAll</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name> <argument_list>(<argument><expr>"No scope elements specified in tag "
                                          + "parameter."</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <if>if <condition>(<expr><name>gotAll</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>this</name>.<name>scope</name></name> = "a"</expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <decl_stmt><decl><type><name>StringBuffer</name></type> <name>buff</name> =<init> <expr>new <call><name>StringBuffer</name> <argument_list>(<argument><expr><name><name>elements</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>elements</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                    <if>if <condition>(<expr><name><name>elements</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>buff</name>.<name>append</name></name> <argument_list>(<argument><expr><name><name>SCOPE_ELEMENTS</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>charAt</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></for>
                <expr_stmt><expr><name><name>this</name>.<name>scope</name></name> = <call><name><name>buff</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></function>

        <comment type="javadoc">/**
         * Sets whether or not the tag is enabled.
         *
         * @param enabled Whether or not this tag is enabled.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setEnabled</name> <parameter_list>(<param><decl><type><name>boolean</name></type> <name>enabled</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>enabled</name></name> = <name>enabled</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * Returns the -tag parameter this argument represented.
         * @return the -tag parameter as a string
         * @exception BuildException if either the name or description
         *                           is &lt;code&gt;null&lt;/code&gt; or empty.
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getParameter</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
            <if>if <condition>(<expr><name>name</name> == <name>null</name> || <call><name><name>name</name>.<name>equals</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name> <argument_list>(<argument><expr>"No name specified for custom tag."</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <if>if <condition>(<expr><call><name>getDescription</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                <return>return <expr><name>name</name> + ":" + (<name>enabled</name> ? "" : "X")
                    + <name>scope</name> + ":" + <call><name>getDescription</name><argument_list>()</argument_list></call></expr>;</return>
            }</block></then> <else>else <if>if <condition>(<expr>!<name>enabled</name> || !"a".<call><name>equals</name><argument_list>(<argument><expr><name>scope</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><name>name</name> + ":" + (<name>enabled</name> ? "" : "X") + <name>scope</name></expr>;</return>
            }</block></then> <else>else <block>{
                <return>return <expr><name>name</name></expr>;</return>
            }</block></else></if></else></if>
        }</block></function>
    }</block></class>

    <comment type="javadoc">/**
     * Separates packages on the overview page into whatever
     * groups you specify, one group per table.
     * @return a group argument to be configured
     */</comment>
    <function><type><specifier>public</specifier> <name>GroupArgument</name></type> <name>createGroup</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>GroupArgument</name></type> <name>ga</name> =<init> <expr>new <call><name>GroupArgument</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>groups</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>ga</name></expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     * A class corresponding to the group nested element.
     */</comment>
    <class><specifier>public</specifier> class <name>GroupArgument</name> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>Html</name></type> <name>title</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>PackageName</name></argument>&gt;</argument_list></name></type> <name>packages</name> =<init> <expr>new <call><name><name>Vector</name><argument_list>&lt;<argument><name>PackageName</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="javadoc">/** Constructor for GroupArgument */</comment>
        <constructor><specifier>public</specifier> <name>GroupArgument</name><parameter_list>()</parameter_list> <block>{
            <comment type="line">//empty</comment>
        }</block></constructor>

        <comment type="javadoc">/**
         * Set the title attribute using a string.
         * @param src a &lt;code&gt;String&lt;/code&gt; value
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setTitle</name><parameter_list>(<param><decl><type><name>String</name></type> <name>src</name></decl></param>)</parameter_list> <block>{
            <decl_stmt><decl><type><name>Html</name></type> <name>h</name> =<init> <expr>new <call><name>Html</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>h</name>.<name>addText</name></name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>addTitle</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        <comment type="javadoc">/**
         * Set the title attribute using a nested Html value.
         * @param text a &lt;code&gt;Html&lt;/code&gt; value
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>addTitle</name><parameter_list>(<param><decl><type><name>Html</name></type> <name>text</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name>title</name> = <name>text</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * Get the title.
         * @return the title
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getTitle</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>title</name> != <name>null</name> ? <call><name><name>title</name>.<name>getText</name></name><argument_list>()</argument_list></call> : <name>null</name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Set the packages to Javadoc on.
         * @param src a comma separated list of packages
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setPackages</name><parameter_list>(<param><decl><type><name>String</name></type> <name>src</name></decl></param>)</parameter_list> <block>{
            <decl_stmt><decl><type><name>StringTokenizer</name></type> <name>tok</name> =<init> <expr>new <call><name>StringTokenizer</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr>","</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>tok</name>.<name>hasMoreTokens</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>p</name> =<init> <expr><call><name><name>tok</name>.<name>nextToken</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>PackageName</name></type> <name>pn</name> =<init> <expr>new <call><name>PackageName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>pn</name>.<name>setName</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>addPackage</name><argument_list>(<argument><expr><name>pn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
        }</block></function>
        <comment type="javadoc">/**
         * Add a package nested element.
         * @param pn a nested element specifying the package.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>addPackage</name><parameter_list>(<param><decl><type><name>PackageName</name></type> <name>pn</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>packages</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>pn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * Get the packages as a colon separated list.
         * @return the packages as a string
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getPackages</name><parameter_list>()</parameter_list> <block>{
            <decl_stmt><decl><type><name>StringBuffer</name></type> <name>p</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>size</name> =<init> <expr><call><name><name>packages</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>size</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <if>if <condition>(<expr><name>i</name> &gt; 0</expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>p</name>.<name>append</name></name><argument_list>(<argument><expr>":"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><call><name><name>p</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>packages</name>.<name>elementAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <return>return <expr><call><name><name>p</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>

    <comment type="javadoc">/**
     * Charset for cross-platform viewing of generated documentation.
     * @param src the name of the charset
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCharset</name><parameter_list>(<param><decl><type><name>String</name></type> <name>src</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>addArgIfNotEmpty</name></name><argument_list>(<argument><expr>"-charset"</expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Should the build process fail if Javadoc fails (as indicated by
     * a non zero return code)?
     *
     * &lt;p&gt;Default is false.&lt;/p&gt;
     * @param b a &lt;code&gt;boolean&lt;/code&gt; value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFailonerror</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>failOnError</name> = <name>b</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Enables the -source switch, will be ignored if Javadoc is not
     * the 1.4 version.
     * @param source a &lt;code&gt;String&lt;/code&gt; value
     * @since Ant 1.5
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSource</name><parameter_list>(<param><decl><type><name>String</name></type> <name>source</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>source</name></name> = <name>source</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the actual executable command to invoke, instead of the binary
     * &lt;code&gt;javadoc&lt;/code&gt; found in Ant's JDK.
     * @param executable the command to invoke.
     * @since Ant 1.6.3
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setExecutable</name><parameter_list>(<param><decl><type><name>String</name></type> <name>executable</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>executable</name></name> = <name>executable</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a packageset.
     *
     * &lt;p&gt;All included directories will be translated into package
     * names be converting the directory separator into dots.&lt;/p&gt;
     * @param packageSet a directory set
     * @since 1.5
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addPackageset</name><parameter_list>(<param><decl><type><name>DirSet</name></type> <name>packageSet</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>packageSets</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>packageSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a fileset.
     *
     * &lt;p&gt;All included files will be added as sourcefiles.  The task
     * will automatically add
     * &lt;code&gt;includes=&amp;quot;**&amp;#47;*.java&amp;quot;&lt;/code&gt; to the
     * fileset.&lt;/p&gt;
     * @param fs a file set
     * @since 1.5
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addFileset</name><parameter_list>(<param><decl><type><name>FileSet</name></type> <name>fs</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>createSourceFiles</name><argument_list>()</argument_list></call>.<call><name>add</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a container for resource collections.
     *
     * &lt;p&gt;All included files will be added as sourcefiles.&lt;/p&gt;
     * @return the source files to configure.
     * @since 1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>ResourceCollectionContainer</name></type> <name>createSourceFiles</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>nestedSourceFiles</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Enables the -linksource switch, will be ignored if Javadoc is not
     * the 1.4 version. Default is false
     * @param b a &lt;code&gt;String&lt;/code&gt; value
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLinksource</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>linksource</name></name> = <name>b</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Enables the -linksource switch, will be ignored if Javadoc is not
     * the 1.4 version. Default is false
     * @param b a &lt;code&gt;String&lt;/code&gt; value
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBreakiterator</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>breakiterator</name></name> = <name>b</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Enables the -noqualifier switch, will be ignored if Javadoc is not
     * the 1.4 version.
     * @param noqualifier the parameter to the -noqualifier switch
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setNoqualifier</name><parameter_list>(<param><decl><type><name>String</name></type> <name>noqualifier</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>noqualifier</name></name> = <name>noqualifier</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * If set to true, Ant will also accept packages that only hold
     * package.html files but no Java sources.
     * @param b a &lt;code&gt;boolean&lt;/code&gt; value.
     * @since Ant 1.6.3
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setIncludeNoSourcePackages</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>includeNoSourcePackages</name></name> = <name>b</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Enables deep-copying of &lt;code&gt;doc-files&lt;/code&gt; directories.
     *
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDocFilesSubDirs</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>docFilesSubDirs</name> = <name>b</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Colon-separated list of &lt;code&gt;doc-files&lt;/code&gt; subdirectories
     * to skip if {@link #setDocFilesSubDirs docFilesSubDirs is true}.
     *
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setExcludeDocFilesSubDir</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>excludeDocFilesSubDir</name> = <name>s</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Whether to post-process the generated javadocs in order to mitigate CVE-2013-1571.
     * @since Ant 1.9.2
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPostProcessGeneratedJavadocs</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>postProcessGeneratedJavadocs</name> = <name>b</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Execute the task.
     * @throws BuildException on error
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>checkTaskName</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>packagesToDoc</name> =<init> <expr>new <call><name><name>Vector</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Path</name></type> <name>sourceDirs</name> =<init> <expr>new <call><name>Path</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>checkPackageAndSourcePath</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>sourcePath</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>sourceDirs</name>.<name>addExisting</name></name><argument_list>(<argument><expr><name>sourcePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name>parsePackages</name><argument_list>(<argument><expr><name>packagesToDoc</name></expr></argument>, <argument><expr><name>sourceDirs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkPackages</name><argument_list>(<argument><expr><name>packagesToDoc</name></expr></argument>, <argument><expr><name>sourceDirs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><annotation>@<name>SuppressWarnings</name><argument_list>("unchecked")</argument_list></annotation>
        <name><name>Vector</name><argument_list>&lt;<argument><name>SourceFile</name></argument>&gt;</argument_list></name></type> <name>sourceFilesToDoc</name> =<init> <expr>(<name><name>Vector</name><argument_list>&lt;<argument><name>SourceFile</name></argument>&gt;</argument_list></name>) <call><name><name>sourceFiles</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>addSourceFiles</name><argument_list>(<argument><expr><name>sourceFilesToDoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>checkPackagesToDoc</name><argument_list>(<argument><expr><name>packagesToDoc</name></expr></argument>, <argument><expr><name>sourceFilesToDoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Generating Javadoc"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Commandline</name></type> <name>toExecute</name> =<init> <expr>(<name>Commandline</name>) <call><name><name>cmd</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>executable</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>toExecute</name>.<name>setExecutable</name></name><argument_list>(<argument><expr><name>executable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>toExecute</name>.<name>setExecutable</name></name><argument_list>(<argument><expr><call><name><name>JavaEnvUtils</name>.<name>getJdkExecutable</name></name><argument_list>(<argument><expr>"javadoc"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <comment type="line">//  Javadoc arguments</comment>
        <expr_stmt><expr><call><name>generalJavadocArguments</name><argument_list>(<argument><expr><name>toExecute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// general Javadoc arguments</comment>
        <expr_stmt><expr><call><name>doSourcePath</name><argument_list>(<argument><expr><name>toExecute</name></expr></argument>, <argument><expr><name>sourceDirs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// sourcepath</comment>
        <expr_stmt><expr><call><name>doDoclet</name><argument_list>(<argument><expr><name>toExecute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="line">// arguments for default doclet</comment>
        <expr_stmt><expr><call><name>doBootPath</name><argument_list>(<argument><expr><name>toExecute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// bootpath</comment>
        <expr_stmt><expr><call><name>doLinks</name><argument_list>(<argument><expr><name>toExecute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="line">// links arguments</comment>
        <expr_stmt><expr><call><name>doGroup</name><argument_list>(<argument><expr><name>toExecute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="line">// group attribute</comment>
        <expr_stmt><expr><call><name>doGroups</name><argument_list>(<argument><expr><name>toExecute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// groups attribute</comment>
        <expr_stmt><expr><call><name>doDocFilesSubDirs</name><argument_list>(<argument><expr><name>toExecute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// docfilessubdir attribute</comment>

        <expr_stmt><expr><call><name>doJava14</name><argument_list>(<argument><expr><name>toExecute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>breakiterator</name> &amp;&amp; (<name>doclet</name> == <name>null</name> || <name>JAVADOC_5</name>)</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-breakiterator"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <comment type="line">// If using an external file, write the command line options to it</comment>
        <if>if <condition>(<expr><name>useExternalFile</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>writeExternalArgs</name><argument_list>(<argument><expr><name>toExecute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name>File</name></type> <name>tmpList</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FileWriter</name></type> <name>wr</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <comment type="javadoc">/**
             * Write sourcefiles and package names to a temporary file
             * if requested.
             */</comment>
            <decl_stmt><decl><type><name>BufferedWriter</name></type> <name>srcListWriter</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>useExternalFile</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>tmpList</name> = <call><name><name>FILE_UTILS</name>.<name>createTempFile</name></name><argument_list>(<argument><expr>"javadoc"</expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>
                    .<call><name>setValue</name><argument_list>(<argument><expr>"@" + <call><name><name>tmpList</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>wr</name> = new <call><name>FileWriter</name><argument_list>(<argument><expr><call><name><name>tmpList</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>srcListWriter</name> = new <call><name>BufferedWriter</name><argument_list>(<argument><expr><name>wr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><call><name>doSourceAndPackageNames</name><argument_list>(
                <argument><expr><name>toExecute</name></expr></argument>, <argument><expr><name>packagesToDoc</name></expr></argument>, <argument><expr><name>sourceFilesToDoc</name></expr></argument>,
                <argument><expr><name>useExternalFile</name></expr></argument>, <argument><expr><name>tmpList</name></expr></argument>, <argument><expr><name>srcListWriter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><name>useExternalFile</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>srcListWriter</name>.<name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name><name>tmpList</name>.<name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Error creating temporary file"</expr></argument>,
                                     <argument><expr><name>e</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>wr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>

        <if>if <condition>(<expr><name>packageList</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"@" + <name>packageList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><call><name><name>toExecute</name>.<name>describeCommand</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Javadoc execution"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>JavadocOutputStream</name></type> <name>out</name> =<init> <expr>new <call><name>JavadocOutputStream</name><argument_list>(<argument><expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>JavadocOutputStream</name></type> <name>err</name> =<init> <expr>new <call><name>JavadocOutputStream</name><argument_list>(<argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Execute</name></type> <name>exe</name> =<init> <expr>new <call><name>Execute</name><argument_list>(<argument><expr>new <call><name>PumpStreamHandler</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>exe</name>.<name>setAntRun</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*
         * No reason to change the working directory as all filenames and
         * path components have been resolved already.
         *
         * Avoid problems with command line length in some environments.
         */</comment>
        <expr_stmt><expr><call><name><name>exe</name>.<name>setWorkingDirectory</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>exe</name>.<name>setCommandline</name></name><argument_list>(<argument><expr><call><name><name>toExecute</name>.<name>getCommandline</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>ret</name> =<init> <expr><call><name><name>exe</name>.<name>execute</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>ret</name> != 0 &amp;&amp; <name>failOnError</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Javadoc returned " + <name>ret</name></expr></argument>,
                                         <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <expr_stmt><expr><call><name>postProcessGeneratedJavadocs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Javadoc failed: " + <name>e</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <finally>finally <block>{
            <if>if <condition>(<expr><name>tmpList</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>tmpList</name>.<name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>tmpList</name> = <name>null</name></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><call><name><name>out</name>.<name>logFlush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>err</name>.<name>logFlush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <try>try <block>{
                <expr_stmt><expr><call><name><name>out</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>err</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
                <comment type="line">// ignore</comment>
            }</block></catch></try>
        }</block></finally></try>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>checkTaskName</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr>"javadoc2".<call><name>equals</name><argument_list>(<argument><expr><call><name>getTaskType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Warning: the task name &lt;javadoc2&gt; is deprecated."
                + " Use &lt;javadoc&gt; instead."</expr></argument>,
                <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>checkPackageAndSourcePath</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>packageList</name> != <name>null</name> &amp;&amp; <name>sourcePath</name> == <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>msg</name> =<init> <expr>"sourcePath attribute must be set when "
                + "specifying packagelist."</expr></init></decl>;</decl_stmt>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>checkPackages</name><parameter_list>(<param><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>packagesToDoc</name></decl></param>, <param><decl><type><name>Path</name></type> <name>sourceDirs</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>packagesToDoc</name>.<name>size</name></name><argument_list>()</argument_list></call> != 0 &amp;&amp; <call><name><name>sourceDirs</name>.<name>size</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>msg</name> =<init> <expr>"sourcePath attribute must be set when "
                + "specifying package names."</expr></init></decl>;</decl_stmt>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>checkPackagesToDoc</name><parameter_list>(
        <param><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>packagesToDoc</name></decl></param>, <param><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>SourceFile</name></argument>&gt;</argument_list></name></type> <name>sourceFilesToDoc</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>packageList</name> == <name>null</name> &amp;&amp; <call><name><name>packagesToDoc</name>.<name>size</name></name><argument_list>()</argument_list></call> == 0
            &amp;&amp; <call><name><name>sourceFilesToDoc</name>.<name>size</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"No source files and no packages have "
                                     + "been specified."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>doSourcePath</name><parameter_list>(<param><decl><type><name>Commandline</name></type> <name>toExecute</name></decl></param>, <param><decl><type><name>Path</name></type> <name>sourceDirs</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>sourceDirs</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-sourcepath"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setPath</name><argument_list>(<argument><expr><name>sourceDirs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>generalJavadocArguments</name><parameter_list>(<param><decl><type><name>Commandline</name></type> <name>toExecute</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>doctitle</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-doctitle"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name>expand</name><argument_list>(<argument><expr><call><name><name>doctitle</name>.<name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>header</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-header"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name>expand</name><argument_list>(<argument><expr><call><name><name>header</name>.<name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>footer</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-footer"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name>expand</name><argument_list>(<argument><expr><call><name><name>footer</name>.<name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>bottom</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-bottom"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name>expand</name><argument_list>(<argument><expr><call><name><name>bottom</name>.<name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>classpath</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>classpath</name> = (new <call><name>Path</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>).<call><name>concatSystemClasspath</name><argument_list>(<argument><expr>"last"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>classpath</name> = <call><name><name>classpath</name>.<name>concatSystemClasspath</name></name><argument_list>(<argument><expr>"ignore"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <if>if <condition>(<expr><call><name><name>classpath</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-classpath"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setPath</name><argument_list>(<argument><expr><name>classpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>version</name> &amp;&amp; <name>doclet</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-version"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>author</name> &amp;&amp; <name>doclet</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-author"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>doclet</name> == <name>null</name> &amp;&amp; <name>destDir</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"destdir attribute must be set!"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>doDoclet</name><parameter_list>(<param><decl><type><name>Commandline</name></type> <name>toExecute</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>doclet</name> != <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name><name>doclet</name>.<name>getName</name></name><argument_list>()</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"The doclet name must be "
                                         + "specified."</expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-doclet"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name><name>doclet</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><call><name><name>doclet</name>.<name>getPath</name></name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>Path</name></type> <name>docletPath</name>
                        =<init> <expr><call><name><name>doclet</name>.<name>getPath</name></name><argument_list>()</argument_list></call>.<call><name>concatSystemClasspath</name><argument_list>(<argument><expr>"ignore"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><call><name><name>docletPath</name>.<name>size</name></name><argument_list>()</argument_list></call> != 0</expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-docletpath"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setPath</name><argument_list>(<argument><expr><name>docletPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then></if>
                <for>for (<init><decl><type><name><name>Enumeration</name><argument_list>&lt;<argument><name>DocletParam</name></argument>&gt;</argument_list></name></type> <name>e</name> =<init> <expr><call><name><name>doclet</name>.<name>getParams</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init>
                     <condition><expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
                    <decl_stmt><decl><type><name>DocletParam</name></type> <name>param</name> =<init> <expr><call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><call><name><name>param</name>.<name>getName</name></name><argument_list>()</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
                        <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Doclet parameters must "
                                                 + "have a name"</expr></argument>)</argument_list></call></expr>;</throw>
                    }</block></then></if>

                    <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name><name>param</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><call><name><name>param</name>.<name>getValue</name></name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>
                            .<call><name>setValue</name><argument_list>(<argument><expr><call><name><name>param</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></for>
            }</block></else></if>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeExternalArgs</name><parameter_list>(<param><decl><type><name>Commandline</name></type> <name>toExecute</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// If using an external file, write the command line options to it</comment>
        <decl_stmt><decl><type><name>File</name></type> <name>optionsTmpFile</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BufferedWriter</name></type> <name>optionsListWriter</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>optionsTmpFile</name> = <call><name><name>FILE_UTILS</name>.<name>createTempFile</name></name><argument_list>(
                <argument><expr>"javadocOptions"</expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>listOpt</name> =<init> <expr><call><name><name>toExecute</name>.<name>getArguments</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>toExecute</name>.<name>clearArgs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(
                <argument><expr>"@" + <call><name><name>optionsTmpFile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>optionsListWriter</name> = new <call><name>BufferedWriter</name><argument_list>(
                <argument><expr>new <call><name>FileWriter</name><argument_list>(<argument><expr><call><name><name>optionsTmpFile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>listOpt</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>string</name> =<init> <expr><name><name>listOpt</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>string</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"-J-"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else  <block>{
                    <if>if <condition>(<expr><call><name><name>string</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"-"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>optionsListWriter</name>.<name>write</name></name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>optionsListWriter</name>.<name>write</name></name><argument_list>(<argument><expr>" "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name><name>optionsListWriter</name>.<name>write</name></name><argument_list>(<argument><expr><call><name>quoteString</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>optionsListWriter</name>.<name>newLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></else></if>
            }</block></for>
            <expr_stmt><expr><call><name><name>optionsListWriter</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ex</name></decl></param>) <block>{
            <if>if <condition>(<expr><name>optionsTmpFile</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>optionsTmpFile</name>.<name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                <argument><expr>"Error creating or writing temporary file for javadoc options"</expr></argument>,
                <argument><expr><name>ex</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>optionsListWriter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>doBootPath</name><parameter_list>(<param><decl><type><name>Commandline</name></type> <name>toExecute</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Path</name></type> <name>bcp</name> =<init> <expr>new <call><name>Path</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>bootclasspath</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>bcp</name>.<name>append</name></name><argument_list>(<argument><expr><name>bootclasspath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>bcp</name> = <call><name><name>bcp</name>.<name>concatSystemBootClasspath</name></name><argument_list>(<argument><expr>"ignore"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>bcp</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-bootclasspath"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setPath</name><argument_list>(<argument><expr><name>bcp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>doLinks</name><parameter_list>(<param><decl><type><name>Commandline</name></type> <name>toExecute</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>links</name>.<name>size</name></name><argument_list>()</argument_list></call> != 0</expr>)</condition><then> <block>{
            <for>for (<init><decl><type><name><name>Enumeration</name><argument_list>&lt;<argument><name>LinkArgument</name></argument>&gt;</argument_list></name></type> <name>e</name> =<init> <expr><call><name><name>links</name>.<name>elements</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
                <decl_stmt><decl><type><name>LinkArgument</name></type> <name>la</name> =<init> <expr><call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name><name>la</name>.<name>getHref</name></name><argument_list>()</argument_list></call> == <name>null</name> || <call><name><name>la</name>.<name>getHref</name></name><argument_list>()</argument_list></call>.<call><name>length</name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"No href was given for the link - skipping"</expr></argument>,
                        <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <continue>continue;</continue>
                }</block></then></if>
                <decl_stmt><decl><type><name>String</name></type> <name>link</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>la</name>.<name>shouldResolveLink</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>File</name></type> <name>hrefAsFile</name> =<init>
                        <expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>resolveFile</name><argument_list>(<argument><expr><call><name><name>la</name>.<name>getHref</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><call><name><name>hrefAsFile</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                        <try>try <block>{
                            <expr_stmt><expr><name>link</name> = <call><name><name>FILE_UTILS</name>.<name>getFileURL</name></name><argument_list>(<argument><expr><name>hrefAsFile</name></expr></argument>)</argument_list></call>
                                .<call><name>toExternalForm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        }</block> <catch>catch (<param><decl><type><name>MalformedURLException</name></type> <name>ex</name></decl></param>) <block>{
                            <comment type="line">// should be impossible</comment>
                            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Warning: link location was invalid "
                                + <name>hrefAsFile</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></catch></try>
                    }</block></then></if>
                }</block></then></if>
                <if>if <condition>(<expr><name>link</name> == <name>null</name></expr>)</condition><then> <block>{
                    <comment type="line">// is the href a valid URL</comment>
                    <try>try <block>{
                        <decl_stmt><decl><type><name>URL</name></type> <name>base</name> =<init> <expr>new <call><name>URL</name><argument_list>(<argument><expr>"file://."</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr>new <call><name>URL</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><call><name><name>la</name>.<name>getHref</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>link</name> = <call><name><name>la</name>.<name>getHref</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block> <catch>catch (<param><decl><type><name>MalformedURLException</name></type> <name>mue</name></decl></param>) <block>{
                        <comment type="line">// ok - just skip</comment>
                        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Link href \"" + <call><name><name>la</name>.<name>getHref</name></name><argument_list>()</argument_list></call>
                            + "\" is not a valid url - skipping link"</expr></argument>,
                            <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <continue>continue;</continue>
                    }</block></catch></try>
                }</block></then></if>

                <if>if <condition>(<expr><call><name><name>la</name>.<name>isLinkOffline</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>File</name></type> <name>packageListLocation</name> =<init> <expr><call><name><name>la</name>.<name>getPackagelistLoc</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>URL</name></type> <name>packageListURL</name> =<init> <expr><call><name><name>la</name>.<name>getPackagelistURL</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>packageListLocation</name> == <name>null</name>
                        &amp;&amp; <name>packageListURL</name> == <name>null</name></expr>)</condition><then> <block>{
                        <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"The package list"
                                                 + " location for link "
                                                 + <call><name><name>la</name>.<name>getHref</name></name><argument_list>()</argument_list></call>
                                                 + " must be provided "
                                                 + "because the link is "
                                                 + "offline"</expr></argument>)</argument_list></call></expr>;</throw>
                    }</block></then></if>
                    <if>if <condition>(<expr><name>packageListLocation</name> != <name>null</name></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>File</name></type> <name>packageListFile</name> =<init>
                            <expr>new <call><name>File</name><argument_list>(<argument><expr><name>packageListLocation</name></expr></argument>, <argument><expr>"package-list"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if>if <condition>(<expr><call><name><name>packageListFile</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                            <try>try <block>{
                                <expr_stmt><expr><name>packageListURL</name> =
                                    <call><name><name>FILE_UTILS</name>.<name>getFileURL</name></name><argument_list>(<argument><expr><name>packageListLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block> <catch>catch (<param><decl><type><name>MalformedURLException</name></type> <name>ex</name></decl></param>) <block>{
                                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Warning: Package list location was "
                                    + "invalid " + <name>packageListLocation</name></expr></argument>,
                                    <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></catch></try>
                        }</block></then> <else>else <block>{
                            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Warning: No package list was found at "
                                + <name>packageListLocation</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></else></if>
                    }</block></then></if>
                    <if>if <condition>(<expr><name>packageListURL</name> != <name>null</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-linkoffline"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>
                            .<call><name>setValue</name><argument_list>(<argument><expr><call><name><name>packageListURL</name>.<name>toExternalForm</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-link"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></for>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>doGroup</name><parameter_list>(<param><decl><type><name>Commandline</name></type> <name>toExecute</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// add the single group arguments</comment>
        <comment type="line">// Javadoc 1.2 rules:</comment>
        <comment type="line">//   Multiple -group args allowed.</comment>
        <comment type="line">//   Each arg includes 3 strings: -group [name] [packagelist].</comment>
        <comment type="line">//   Elements in [packagelist] are colon-delimited.</comment>
        <comment type="line">//   An element in [packagelist] may end with the * wildcard.</comment>

        <comment type="line">// Ant javadoc task rules for group attribute:</comment>
        <comment type="line">//   Args are comma-delimited.</comment>
        <comment type="line">//   Each arg is 2 space-delimited strings.</comment>
        <comment type="line">//   E.g., group="XSLT_Packages org.apache.xalan.xslt*,</comment>
        <comment type="line">//                XPath_Packages org.apache.xalan.xpath*"</comment>
        <if>if <condition>(<expr><name>group</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>StringTokenizer</name></type> <name>tok</name> =<init> <expr>new <call><name>StringTokenizer</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr>","</expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>tok</name>.<name>hasMoreTokens</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>grp</name> =<init> <expr><call><name><name>tok</name>.<name>nextToken</name></name><argument_list>()</argument_list></call>.<call><name>trim</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>space</name> =<init> <expr><call><name><name>grp</name>.<name>indexOf</name></name><argument_list>(<argument><expr>" "</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>space</name> &gt; 0</expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>String</name></type> <name>name</name> =<init> <expr><call><name><name>grp</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>space</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>pkgList</name> =<init> <expr><call><name><name>grp</name>.<name>substring</name></name><argument_list>(<argument><expr><name>space</name> + 1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-group"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>pkgList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></while>
        }</block></then></if>
    }</block></function>

    <comment type="line">// add the group arguments</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>doGroups</name><parameter_list>(<param><decl><type><name>Commandline</name></type> <name>toExecute</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>groups</name>.<name>size</name></name><argument_list>()</argument_list></call> != 0</expr>)</condition><then> <block>{
            <for>for (<init><decl><type><name><name>Enumeration</name><argument_list>&lt;<argument><name>GroupArgument</name></argument>&gt;</argument_list></name></type> <name>e</name> =<init> <expr><call><name><name>groups</name>.<name>elements</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
                <decl_stmt><decl><type><name>GroupArgument</name></type> <name>ga</name> =<init> <expr><call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>title</name> =<init> <expr><call><name><name>ga</name>.<name>getTitle</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>packages</name> =<init> <expr><call><name><name>ga</name>.<name>getPackages</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>title</name> == <name>null</name> || <name>packages</name> == <name>null</name></expr>)</condition><then> <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"The title and packages must "
                                             + "be specified for group "
                                             + "elements."</expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if>
                <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-group"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name>expand</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>packages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></then></if>
    }</block></function>

    <comment type="line">// Do java1.4 arguments</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>doJava14</name><parameter_list>(<param><decl><type><name>Commandline</name></type> <name>toExecute</name></decl></param>)</parameter_list> <block>{
        <for>for (<init><decl><type><name><name>Enumeration</name><argument_list>&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>e</name> =<init> <expr><call><name><name>tags</name>.<name>elements</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
            <decl_stmt><decl><type><name>Object</name></type> <name>element</name> =<init> <expr><call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>element</name> <name>instanceof</name> <name>TagArgument</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>TagArgument</name></type> <name>ta</name> =<init> <expr>(<name>TagArgument</name>) <name>element</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>File</name></type> <name>tagDir</name> =<init> <expr><call><name><name>ta</name>.<name>getDir</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>tagDir</name> == <name>null</name></expr>)</condition><then> <block>{
                    <comment type="line">// The tag element is not used as a fileset,</comment>
                    <comment type="line">// but specifies the tag directly.</comment>
                    <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name> <argument_list>(<argument><expr>"-tag"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>
                        .<call><name>setValue</name> <argument_list>(<argument><expr><call><name><name>ta</name>.<name>getParameter</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <comment type="line">// The tag element is used as a</comment>
                    <comment type="line">// fileset. Parse all the files and create</comment>
                    <comment type="line">// -tag arguments.</comment>
                    <decl_stmt><decl><type><name>DirectoryScanner</name></type> <name>tagDefScanner</name> =<init>
                        <expr><call><name><name>ta</name>.<name>getDirectoryScanner</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>files</name> =<init> <expr><call><name><name>tagDefScanner</name>.<name>getIncludedFiles</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>files</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                        <decl_stmt><decl><type><name>File</name></type> <name>tagDefFile</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name>tagDir</name></expr></argument>, <argument><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <try>try <block>{
                            <decl_stmt><decl><type><name>BufferedReader</name></type> <name>in</name>
                                =<init> <expr>new <call><name>BufferedReader</name><argument_list>(
                                    <argument><expr>new <call><name>FileReader</name><argument_list>(<argument><expr><name>tagDefFile</name></expr></argument>)</argument_list></call></expr></argument>
                                                     )</argument_list></call></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name>String</name></type> <name>line</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                            <while>while <condition>(<expr>(<name>line</name> = <call><name><name>in</name>.<name>readLine</name></name><argument_list>()</argument_list></call>) != <name>null</name></expr>)</condition> <block>{
                                <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>
                                    .<call><name>setValue</name><argument_list>(<argument><expr>"-tag"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>
                                    .<call><name>setValue</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></while>
                            <expr_stmt><expr><call><name><name>in</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ioe</name></decl></param>) <block>{
                            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                                <argument><expr>"Couldn't read "
                                + " tag file from "
                                + <call><name><name>tagDefFile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ioe</name></expr></argument>)</argument_list></call></expr>;</throw>
                        }</block></catch></try>
                    }</block></for>
                }</block></else></if>
            }</block></then> <else>else <block>{
                <decl_stmt><decl><type><name>ExtensionInfo</name></type> <name>tagletInfo</name> =<init> <expr>(<name>ExtensionInfo</name>) <name>element</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-taglet"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><call><name><name>tagletInfo</name>
                                                    .<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><call><name><name>tagletInfo</name>.<name>getPath</name></name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>Path</name></type> <name>tagletPath</name> =<init> <expr><call><name><name>tagletInfo</name>.<name>getPath</name></name><argument_list>()</argument_list></call>
                        .<call><name>concatSystemClasspath</name><argument_list>(<argument><expr>"ignore"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><call><name><name>tagletPath</name>.<name>size</name></name><argument_list>()</argument_list></call> != 0</expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>
                            .<call><name>setValue</name><argument_list>(<argument><expr>"-tagletpath"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setPath</name><argument_list>(<argument><expr><name>tagletPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then></if>
            }</block></else></if>
        }</block></for>

        <decl_stmt><decl><type><name>String</name></type> <name>sourceArg</name> =<init> <expr><name>source</name> != <name>null</name> ? <name>source</name>
            : <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getProperty</name><argument_list>(<argument><expr><name><name>MagicNames</name>.<name>BUILD_JAVAC_SOURCE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>sourceArg</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-source"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>sourceArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>linksource</name> &amp;&amp; <name>doclet</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-linksource"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>noqualifier</name> != <name>null</name> &amp;&amp; <name>doclet</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-noqualifier"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>noqualifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>doDocFilesSubDirs</name><parameter_list>(<param><decl><type><name>Commandline</name></type> <name>toExecute</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>docFilesSubDirs</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-docfilessubdirs"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>excludeDocFilesSubDir</name> != <name>null</name>
                &amp;&amp; <call><name><name>excludeDocFilesSubDir</name>.<name>trim</name></name><argument_list>()</argument_list></call>.<call><name>length</name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr>"-excludedocfilessubdir"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>excludeDocFilesSubDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>doSourceAndPackageNames</name><parameter_list>(
        <param><decl><type><name>Commandline</name></type> <name>toExecute</name></decl></param>,
        <param><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>packagesToDoc</name></decl></param>,
        <param><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>SourceFile</name></argument>&gt;</argument_list></name></type> <name>sourceFilesToDoc</name></decl></param>,
        <param><decl><type><name>boolean</name></type> <name>useExternalFile</name></decl></param>,
        <param><decl><type><name>File</name></type>    <name>tmpList</name></decl></param>,
        <param><decl><type><name>BufferedWriter</name></type> <name>srcListWriter</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <for>for (<init><decl><type><name>String</name></type> <name>packageName</name> :<range> <expr><name>packagesToDoc</name></expr></range></decl></init>) <block>{
            <if>if <condition>(<expr><name>useExternalFile</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>srcListWriter</name>.<name>write</name></name><argument_list>(<argument><expr><name>packageName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>srcListWriter</name>.<name>newLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>packageName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></for>

        <for>for (<init><decl><type><name>SourceFile</name></type> <name>sf</name> :<range> <expr><name>sourceFilesToDoc</name></expr></range></decl></init>) <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>sourceFileName</name> =<init> <expr><call><name><name>sf</name>.<name>getFile</name></name><argument_list>()</argument_list></call>.<call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>useExternalFile</name></expr>)</condition><then> <block>{
                <comment type="line">// TODO what is the following doing?</comment>
                <comment type="line">//     should it run if !javadoc4 &amp;&amp; executable != null?</comment>
                <if>if <condition>(<expr><call><name><name>sourceFileName</name>.<name>indexOf</name></name><argument_list>(<argument><expr>" "</expr></argument>)</argument_list></call> &gt; -1</expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>String</name></type> <name>name</name> =<init> <expr><name>sourceFileName</name></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name><name>File</name>.<name>separatorChar</name></name> == '\\'</expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>name</name> = <call><name><name>sourceFileName</name>.<name>replace</name></name><argument_list>(<argument><expr><name><name>File</name>.<name>separatorChar</name></name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <expr_stmt><expr><call><name><name>srcListWriter</name>.<name>write</name></name><argument_list>(<argument><expr>"\"" + <name>name</name> + "\""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name><name>srcListWriter</name>.<name>write</name></name><argument_list>(<argument><expr><name>sourceFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr><call><name><name>srcListWriter</name>.<name>newLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>toExecute</name>.<name>createArgument</name></name><argument_list>()</argument_list></call>.<call><name>setValue</name><argument_list>(<argument><expr><name>sourceFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Quote a string to place in a @ file.
     * @param str the string to quote
     * @return the quoted string, if there is no need to quote the string,
     *         return the original string.
     */</comment>
    <function><type><specifier>private</specifier> <name>String</name></type> <name>quoteString</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>str</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr>!<call><name>containsWhitespace</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call>
            &amp;&amp; <call><name><name>str</name>.<name>indexOf</name></name><argument_list>(<argument><expr>'\''</expr></argument>)</argument_list></call> == -1
            &amp;&amp; <call><name><name>str</name>.<name>indexOf</name></name><argument_list>(<argument><expr>'"'</expr></argument>)</argument_list></call> == -1</expr>)</condition><then> <block>{
            <return>return <expr><name>str</name></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>str</name>.<name>indexOf</name></name><argument_list>(<argument><expr>'\''</expr></argument>)</argument_list></call> == -1</expr>)</condition><then> <block>{
            <return>return <expr><call><name>quoteString</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr>'\''</expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
            <return>return <expr><call><name>quoteString</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr>'"'</expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>containsWhitespace</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>len</name> =<init> <expr><call><name><name>s</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <if>if <condition>(<expr><call><name><name>Character</name>.<name>isWhitespace</name></name><argument_list>(<argument><expr><call><name><name>s</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>true</expr>;</return>
            }</block></then></if>
        }</block></for>
        <return>return <expr>false</expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>quoteString</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>str</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>char</name></type> <name>delim</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>buf</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>(<argument><expr><call><name><name>str</name>.<name>length</name></name><argument_list>()</argument_list></call> * 2</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr><name>delim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>len</name> =<init> <expr><call><name><name>str</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>lastCharWasCR</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>char</name></type> <name>c</name> =<init> <expr><call><name><name>str</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>c</name> == <name>delim</name></expr>)</condition><then> <block>{ <comment type="line">// can't put the non-constant delim into a case</comment>
                <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr>'\\'</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>lastCharWasCR</name> = false</expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{
                <case>case <expr>'\\'</expr>:
                    <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr>"\\\\"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>lastCharWasCR</name> = false</expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr>'\r'</expr>:
                    <comment type="line">// insert a line continuation marker</comment>
                    <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr>"\\\r"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>lastCharWasCR</name> = true</expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr>'\n'</expr>:
                    <comment type="line">// insert a line continuation marker unless this</comment>
                    <comment type="line">// is a \r\n sequence in which case \r already has</comment>
                    <comment type="line">// created the marker</comment>
                    <if>if <condition>(<expr>!<name>lastCharWasCR</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr>"\\\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr>"\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                    <expr_stmt><expr><name>lastCharWasCR</name> = false</expr>;</expr_stmt>
                    <break>break;</break>
                </case><default>default:
                    <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>lastCharWasCR</name> = false</expr>;</expr_stmt>
                    <break>break;</break>
                </default>}</block></switch>
            }</block></else></if>
        }</block></for>
        <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr><name>delim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>buf</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Add the files matched by the nested source files to the Vector
     * as SourceFile instances.
     *
     * @since 1.7
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>addSourceFiles</name><parameter_list>(<param><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>SourceFile</name></argument>&gt;</argument_list></name></type> <name>sf</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>Iterator</name><argument_list>&lt;<argument><name>ResourceCollection</name></argument>&gt;</argument_list></name></type> <name>e</name> =<init> <expr><call><name><name>nestedSourceFiles</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>e</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>ResourceCollection</name></type> <name>rc</name> =<init> <expr><call><name><name>e</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<call><name><name>rc</name>.<name>isFilesystemOnly</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"only file system based resources are"
                                         + " supported by javadoc"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <if>if <condition>(<expr><name>rc</name> <name>instanceof</name> <name>FileSet</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>FileSet</name></type> <name>fs</name> =<init> <expr>(<name>FileSet</name>) <name>rc</name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr>!<call><name><name>fs</name>.<name>hasPatterns</name></name><argument_list>()</argument_list></call> &amp;&amp; !<call><name><name>fs</name>.<name>hasSelectors</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>FileSet</name></type> <name>fs2</name> =<init> <expr>(<name>FileSet</name>) <call><name><name>fs</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>fs2</name>.<name>createInclude</name></name><argument_list>()</argument_list></call>.<call><name>setName</name><argument_list>(<argument><expr>"**/*.java"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>includeNoSourcePackages</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>fs2</name>.<name>createInclude</name></name><argument_list>()</argument_list></call>.<call><name>setName</name><argument_list>(<argument><expr>"**/package.html"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <expr_stmt><expr><name>rc</name> = <name>fs2</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
            <for>for (<init><decl><type><name>Resource</name></type> <name>r</name> :<range> <expr><name>rc</name></expr></range></decl></init>) <block>{
                <expr_stmt><expr><call><name><name>sf</name>.<name>addElement</name></name><argument_list>(<argument><expr>new <call><name>SourceFile</name><argument_list>(<argument><expr><call><name><name>r</name>.<name>as</name></name><argument_list>(<argument><expr><name><name>FileProvider</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call>.<call><name>getFile</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></while>
    }</block></function>

    <comment type="javadoc">/**
     * Add the directories matched by the nested dirsets to the Vector
     * and the base directories of the dirsets to the Path.  It also
     * handles the packages and excludepackages attributes and
     * elements.
     *
     * @since 1.5
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>parsePackages</name><parameter_list>(<param><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>pn</name></decl></param>, <param><decl><type><name>Path</name></type> <name>sp</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>HashSet</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>addedPackages</name> =<init> <expr>new <call><name><name>HashSet</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><annotation>@<name>SuppressWarnings</name><argument_list>("unchecked")</argument_list></annotation>
        <name><name>Vector</name><argument_list>&lt;<argument><name>DirSet</name></argument>&gt;</argument_list></name></type> <name>dirSets</name> =<init> <expr>(<name><name>Vector</name><argument_list>&lt;<argument><name>DirSet</name></argument>&gt;</argument_list></name>) <call><name><name>packageSets</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// for each sourcePath entry, add a directoryset with includes</comment>
        <comment type="line">// taken from packagenames attribute and nested package</comment>
        <comment type="line">// elements and excludes taken from excludepackages attribute</comment>
        <comment type="line">// and nested excludepackage elements</comment>
        <if>if <condition>(<expr><name>sourcePath</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>PatternSet</name></type> <name>ps</name> =<init> <expr>new <call><name>PatternSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>ps</name>.<name>setProject</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name><name>packageNames</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name><name>Enumeration</name><argument_list>&lt;<argument><name>PackageName</name></argument>&gt;</argument_list></name></type> <name>e</name> =<init> <expr><call><name><name>packageNames</name>.<name>elements</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                    <decl_stmt><decl><type><name>PackageName</name></type> <name>p</name> =<init> <expr><call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>pkg</name> =<init> <expr><call><name><name>p</name>.<name>getName</name></name><argument_list>()</argument_list></call>.<call><name>replace</name><argument_list>(<argument><expr>'.'</expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><call><name><name>pkg</name>.<name>endsWith</name></name><argument_list>(<argument><expr>"*"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>pkg</name> += "*"</expr>;</expr_stmt>
                    }</block></then></if>
                    <expr_stmt><expr><call><name><name>ps</name>.<name>createInclude</name></name><argument_list>()</argument_list></call>.<call><name>setName</name><argument_list>(<argument><expr><name>pkg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></while>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>ps</name>.<name>createInclude</name></name><argument_list>()</argument_list></call>.<call><name>setName</name><argument_list>(<argument><expr>"**"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

            <decl_stmt><decl><type><name><name>Enumeration</name><argument_list>&lt;<argument><name>PackageName</name></argument>&gt;</argument_list></name></type> <name>e</name> =<init> <expr><call><name><name>excludePackageNames</name>.<name>elements</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <decl_stmt><decl><type><name>PackageName</name></type> <name>p</name> =<init> <expr><call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>pkg</name> =<init> <expr><call><name><name>p</name>.<name>getName</name></name><argument_list>()</argument_list></call>.<call><name>replace</name><argument_list>(<argument><expr>'.'</expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>pkg</name>.<name>endsWith</name></name><argument_list>(<argument><expr>"*"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>pkg</name> += "*"</expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><call><name><name>ps</name>.<name>createExclude</name></name><argument_list>()</argument_list></call>.<call><name>setName</name><argument_list>(<argument><expr><name>pkg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>


            <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>pathElements</name> =<init> <expr><call><name><name>sourcePath</name>.<name>list</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>pathElements</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>File</name></type> <name>dir</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name><name>pathElements</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>dir</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>DirSet</name></type> <name>ds</name> =<init> <expr>new <call><name>DirSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>ds</name>.<name>setProject</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>ds</name>.<name>setDefaultexcludes</name></name><argument_list>(<argument><expr><name>useDefaultExcludes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>ds</name>.<name>setDir</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>ds</name>.<name>createPatternSet</name></name><argument_list>()</argument_list></call>.<call><name>addConfiguredPatternset</name><argument_list>(<argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>dirSets</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Skipping " + <name><name>pathElements</name><index>[<expr><name>i</name></expr>]</index></name>
                        + " since it is no directory."</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></for>
        }</block></then></if>

        <decl_stmt><decl><type><name><name>Enumeration</name><argument_list>&lt;<argument><name>DirSet</name></argument>&gt;</argument_list></name></type> <name>e</name> =<init> <expr><call><name><name>dirSets</name>.<name>elements</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>DirSet</name></type> <name>ds</name> =<init> <expr><call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>File</name></type> <name>baseDir</name> =<init> <expr><call><name><name>ds</name>.<name>getDir</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"scanning " + <name>baseDir</name> + " for packages."</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>DirectoryScanner</name></type> <name>dsc</name> =<init> <expr><call><name><name>ds</name>.<name>getDirectoryScanner</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>dirs</name> =<init> <expr><call><name><name>dsc</name>.<name>getIncludedDirectories</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>containsPackages</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>dirs</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <comment type="line">// are there any java files in this directory?</comment>
                <decl_stmt><decl><type><name>File</name></type> <name>pd</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><name>baseDir</name></expr></argument>, <argument><expr><name><name>dirs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>files</name> =<init> <expr><call><name><name>pd</name>.<name>list</name></name><argument_list>(<argument><expr>new <class><super><name>FilenameFilter</name></super> <argument_list>()</argument_list> <block>{
                        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>accept</name><parameter_list>(<param><decl><type><name>File</name></type> <name>dir1</name></decl></param>, <param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
                            <return>return <expr><call><name><name>name</name>.<name>endsWith</name></name><argument_list>(<argument><expr>".java"</expr></argument>)</argument_list></call>
                                || (<name>includeNoSourcePackages</name>
                                    &amp;&amp; <call><name><name>name</name>.<name>equals</name></name><argument_list>(<argument><expr>"package.html"</expr></argument>)</argument_list></call>)</expr>;</return>
                        }</block></function>
                    }</block></class></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if>if <condition>(<expr><name><name>files</name>.<name>length</name></name> &gt; 0</expr>)</condition><then> <block>{
                    <if>if <condition>(<expr>"".<call><name>equals</name><argument_list>(<argument><expr><name><name>dirs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>baseDir</name>
                            + " contains source files in the default package,"
                            + " you must specify them as source files"
                            + " not packages."</expr></argument>,
                            <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <expr_stmt><expr><name>containsPackages</name> = true</expr>;</expr_stmt>
                        <decl_stmt><decl><type><name>String</name></type> <name>packageName</name> =<init>
                            <expr><name><name>dirs</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>replace</name><argument_list>(<argument><expr><name><name>File</name>.<name>separatorChar</name></name></expr></argument>, <argument><expr>'.'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if>if <condition>(<expr>!<call><name><name>addedPackages</name>.<name>contains</name></name><argument_list>(<argument><expr><name>packageName</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                            <expr_stmt><expr><call><name><name>addedPackages</name>.<name>add</name></name><argument_list>(<argument><expr><name>packageName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>pn</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>packageName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                    }</block></else></if>
                }</block></then></if>
            }</block></for>
            <if>if <condition>(<expr><name>containsPackages</name></expr>)</condition><then> <block>{
                <comment type="line">// We don't need to care for duplicates here,</comment>
                <comment type="line">// Path.list does it for us.</comment>
                <expr_stmt><expr><call><name><name>sp</name>.<name>createPathElement</name></name><argument_list>()</argument_list></call>.<call><name>setLocation</name><argument_list>(<argument><expr><name>baseDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>baseDir</name> + " doesn\'t contain any packages, dropping it."</expr></argument>,
                    <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></while>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>postProcessGeneratedJavadocs</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr>!<name>postProcessGeneratedJavadocs</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>destDir</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"No javadoc created, no need to post-process anything"</expr></argument>,
                <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>fixData</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>InputStream</name></type> <name>in</name> =<init> <expr><call><name>getClass</name><argument_list>()</argument_list></call>
            .<call><name>getResourceAsStream</name><argument_list>(<argument><expr>"javadoc-frame-injections-fix.txt"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>in</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>FileNotFoundException</name><argument_list>(<argument><expr>"Missing resource "
                                            + "'javadoc-frame-injections-fix.txt' in "
                                            + "classpath."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <try>try <block>{
            <expr_stmt><expr><name>fixData</name> =
                <call><name>fixLineFeeds</name><argument_list>(<argument><expr><call><name><name>FileUtils</name>
                             .<name>readFully</name></name><argument_list>(<argument><expr>new <call><name>InputStreamReader</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr>"US-ASCII"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                .<call><name>trim</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>

        <decl_stmt><decl><type><specifier>final</specifier> <name>DirectoryScanner</name></type> <name>ds</name> =<init> <expr>new <call><name>DirectoryScanner</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setBasedir</name></name><argument_list>(<argument><expr><name>destDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setCaseSensitive</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>setIncludes</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{
                <expr>"**/index.html"</expr>, <expr>"**/index.htm"</expr>, <expr>"**/toc.html"</expr>, <expr>"**/toc.htm"</expr>
            }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>addDefaultExcludes</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>patched</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>String</name></type> <name>f</name> :<range> <expr><call><name><name>ds</name>.<name>getIncludedFiles</name></name><argument_list>()</argument_list></call></expr></range></decl></init>) <block>{
            <expr_stmt><expr><name>patched</name> += <call><name>postProcess</name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><name>destDir</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fixData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <if>if <condition>(<expr><name>patched</name> &gt; 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Patched " + <name>patched</name> + " link injection vulnerable javadocs"</expr></argument>,
                <argument><expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>private</specifier> <name>int</name></type> <name>postProcess</name><parameter_list>(<param><decl><type><name>File</name></type> <name>file</name></decl></param>, <param><decl><type><name>String</name></type> <name>fixData</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>enc</name> =<init> <expr><name>docEncoding</name> != <name>null</name> ? <name>docEncoding</name>
            : <call><name><name>FILE_UTILS</name>.<name>getDefaultEncoding</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// we load the whole file as one String (toc/index files are</comment>
        <comment type="line">// generally small, because they only contain frameset declaration):</comment>
        <decl_stmt><decl><type><name>InputStream</name></type> <name>fin</name> =<init> <expr>new <call><name>FileInputStream</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>fileContents</name></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>fileContents</name> =
                <call><name>fixLineFeeds</name><argument_list>(<argument><expr><call><name><name>FileUtils</name>
                             .<name>safeReadFully</name></name><argument_list>(<argument><expr>new <call><name>InputStreamReader</name><argument_list>(<argument><expr><name>fin</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>fin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>

        <comment type="line">// check if file may be vulnerable because it was not</comment>
        <comment type="line">// patched with "validURL(url)":</comment>
        <if>if <condition>(<expr><call><name><name>fileContents</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"function validURL(url) {"</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
            <comment type="line">// we need to patch the file!</comment>
            <decl_stmt><decl><type><name>String</name></type> <name>patchedFileContents</name> =<init> <expr><call><name>patchContent</name><argument_list>(<argument><expr><name>fileContents</name></expr></argument>, <argument><expr><name>fixData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<call><name><name>patchedFileContents</name>.<name>equals</name></name><argument_list>(<argument><expr><name>fileContents</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>FileOutputStream</name></type> <name>fos</name> =<init> <expr>new <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <try>try <block>{
                    <decl_stmt><decl><type><name>OutputStreamWriter</name></type> <name>w</name> =<init> <expr>new <call><name>OutputStreamWriter</name><argument_list>(<argument><expr><name>fos</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>w</name>.<name>write</name></name><argument_list>(<argument><expr><name>patchedFileContents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>w</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr>1</expr>;</return>
                }</block> <finally>finally <block>{
                    <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>fos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></finally></try>
            }</block></then></if>
        }</block></then></if>
        <return>return <expr>0</expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>fixLineFeeds</name><parameter_list>(<param><decl><type><name>String</name></type> <name>orig</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>orig</name>.<name>replace</name></name><argument_list>(<argument><expr>"\r\n"</expr></argument>, <argument><expr>"\n"</expr></argument>)</argument_list></call>
            .<call><name>replace</name><argument_list>(<argument><expr>"\n"</expr></argument>, <argument><expr><name><name>StringUtils</name>.<name>LINE_SEP</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>patchContent</name><parameter_list>(<param><decl><type><name>String</name></type> <name>fileContents</name></decl></param>, <param><decl><type><name>String</name></type> <name>fixData</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// using regexes here looks like overkill</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>start</name> =<init> <expr><call><name><name>fileContents</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>LOAD_FRAME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>start</name> &gt;= 0</expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>fileContents</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call> + <name>fixData</name>
                + <call><name><name>fileContents</name>.<name>substring</name></name><argument_list>(<argument><expr><name>start</name> + <name>LOAD_FRAME_LEN</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <return>return <expr><name>fileContents</name></expr>;</return>
    }</block></function>

    <class><specifier>private</specifier> class <name>JavadocOutputStream</name> <super><extends>extends <name>LogOutputStream</name></extends></super> <block>{
        <constructor><name>JavadocOutputStream</name><parameter_list>(<param><decl><type><name>int</name></type> <name>level</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name><name>Javadoc</name>.<name>this</name></name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="line">//</comment>
        <comment type="line">// Override the logging of output in order to filter out Generating</comment>
        <comment type="line">// messages.  Generating messages are set to a priority of VERBOSE</comment>
        <comment type="line">// unless they appear after what could be an informational message.</comment>
        <comment type="line">//</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>queuedLine</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <function><type><specifier>protected</specifier> <name>void</name></type> <name>processLine</name><parameter_list>(<param><decl><type><name>String</name></type> <name>line</name></decl></param>, <param><decl><type><name>int</name></type> <name>messageLevel</name></decl></param>)</parameter_list> <block>{
            <if>if <condition>(<expr><name>messageLevel</name> == <name><name>Project</name>.<name>MSG_INFO</name></name>
                &amp;&amp; <call><name><name>line</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"Generating "</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>queuedLine</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>super</name>.<name>processLine</name></name><argument_list>(<argument><expr><name>queuedLine</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name>queuedLine</name> = <name>line</name></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <if>if <condition>(<expr><name>queuedLine</name> != <name>null</name></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><call><name><name>line</name>.<name>startsWith</name></name><argument_list>(<argument><expr>"Building "</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>super</name>.<name>processLine</name></name><argument_list>(<argument><expr><name>queuedLine</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name><name>super</name>.<name>processLine</name></name><argument_list>(<argument><expr><name>queuedLine</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                    <expr_stmt><expr><name>queuedLine</name> = <name>null</name></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><call><name><name>super</name>.<name>processLine</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>messageLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></function>


        <function><type><specifier>protected</specifier> <name>void</name></type> <name>logFlush</name><parameter_list>()</parameter_list> <block>{
            <if>if <condition>(<expr><name>queuedLine</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>super</name>.<name>processLine</name></name><argument_list>(<argument><expr><name>queuedLine</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>queuedLine</name> = <name>null</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>
    }</block></class>

    <comment type="javadoc">/**
     * Convenience method to expand properties.
     * @param content the string to expand
     * @return the converted string
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>expand</name><parameter_list>(<param><decl><type><name>String</name></type> <name>content</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>replaceProperties</name><argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

}</block></class>
</unit>
