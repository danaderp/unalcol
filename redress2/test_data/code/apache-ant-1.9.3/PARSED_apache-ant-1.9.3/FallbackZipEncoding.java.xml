<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\zip\FallbackZipEncoding.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>zip</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>

<comment type="javadoc">/**
 * A fallback ZipEncoding, which uses a java.io means to encode names.
 *
 * &lt;p&gt;This implementation is not favorable for encodings other than
 * utf-8, because java.io encodes unmappable character as question
 * marks leading to unreadable ZIP entries on some operating
 * systems.&lt;/p&gt;
 * 
 * &lt;p&gt;Furthermore this implementation is unable to tell whether a
 * given name can be safely encoded or not.&lt;/p&gt;
 * 
 * &lt;p&gt;This implementation acts as a last resort implementation, when
 * neither {@link Simple8BitZipEnoding} nor {@link NioZipEncoding} is
 * available.&lt;/p&gt;
 * 
 * &lt;p&gt;The methods of this class are reentrant.&lt;/p&gt;
 */</comment>
<class>class <name>FallbackZipEncoding</name> <super><implements>implements <name>ZipEncoding</name></implements></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>charset</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Construct a fallback zip encoding, which uses the platform's
     * default charset.
     */</comment>
    <constructor><specifier>public</specifier> <name>FallbackZipEncoding</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>charset</name></name> = <name>null</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Construct a fallback zip encoding, which uses the given charset.
     * 
     * @param charset The name of the charset or {@code null} for
     *                the platform's default character set.
     */</comment>
    <constructor><specifier>public</specifier> <name>FallbackZipEncoding</name><parameter_list>(<param><decl><type><name>String</name></type> <name>charset</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>charset</name></name> = <name>charset</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * @see
     * org.apache.tools.zip.ZipEncoding#canEncode(java.lang.String)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>canEncode</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>true</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * @see
     * org.apache.tools.zip.ZipEncoding#encode(java.lang.String)
     */</comment>
    <function><type><specifier>public</specifier> <name>ByteBuffer</name></type> <name>encode</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>charset</name></name> == <name>null</name></expr>)</condition><then> <block>{ <comment type="line">// i.e. use default charset, see no-args constructor</comment>
            <return>return <expr><call><name><name>ByteBuffer</name>.<name>wrap</name></name><argument_list>(<argument><expr><call><name><name>name</name>.<name>getBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
            <return>return <expr><call><name><name>ByteBuffer</name>.<name>wrap</name></name><argument_list>(<argument><expr><call><name><name>name</name>.<name>getBytes</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>charset</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * @see
     * org.apache.tools.zip.ZipEncoding#decode(byte[])
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>decode</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>charset</name></name> == <name>null</name></expr>)</condition><then> <block>{ <comment type="line">// i.e. use default charset, see no-args constructor</comment>
            <return>return <expr>new <call><name>String</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
            <return>return <expr>new <call><name>String</name><argument_list>(<argument><expr><name>data</name></expr></argument>,<argument><expr><name><name>this</name>.<name>charset</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>
}</block></class>
</unit>
