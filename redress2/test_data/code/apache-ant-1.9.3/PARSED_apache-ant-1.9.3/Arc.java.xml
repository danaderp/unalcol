<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\types\optional\image\Arc.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>optional</name>.<name>image</name></name>;</package>

<import>import <name><name>javax</name>.<name>media</name>.<name>jai</name>.<name>PlanarImage</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>BasicStroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Arc2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>image</name>.<name>BufferedImage</name></name>;</import>

<comment type="javadoc">/**
 * Draw an arc.
 */</comment>
<class><specifier>public</specifier> class <name>Arc</name> <super><extends>extends <name>BasicShape</name></extends> <implements>implements <name>DrawOperation</name></implements></super> <block>{
    <comment type="line">// CheckStyle:VisibilityModifier OFF - bc</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>width</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>height</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>start</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>stop</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>type</name> =<init> <expr><name><name>Arc2D</name>.<name>OPEN</name></name></expr></init></decl>;</decl_stmt>
    <comment type="line">// CheckStyle:VisibilityModifier ON</comment>

    <comment type="javadoc">/**
     * Set the width.
     * @param width the width of the arc.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setWidth</name><parameter_list>(<param><decl><type><name>int</name></type> <name>width</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>width</name></name> = <name>width</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the height.
     * @param height the height of the arc.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setHeight</name><parameter_list>(<param><decl><type><name>int</name></type> <name>height</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>height</name></name> = <name>height</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the start of the arc.
     * @param start the start of the arc.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setStart</name><parameter_list>(<param><decl><type><name>int</name></type> <name>start</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>start</name></name> = <name>start</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the stop of the arc.
     * @param stop the stop of the arc.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setStop</name><parameter_list>(<param><decl><type><name>int</name></type> <name>stop</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>stop</name></name> = <name>stop</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the type of arc.
     * @param strType the type to use - open, pie or chord.
     * @todo refactor using an EnumeratedAttribute
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setType</name><parameter_list>(<param><decl><type><name>String</name></type> <name>strType</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>strType</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr>"open"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>type</name> = <name><name>Arc2D</name>.<name>OPEN</name></name></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>strType</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr>"pie"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>type</name> = <name><name>Arc2D</name>.<name>PIE</name></name></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>strType</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr>"chord"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>type</name> = <name><name>Arc2D</name>.<name>CHORD</name></name></expr>;</expr_stmt>
        }</block></then></if></else></if></else></if>
    }</block></function>

    <comment type="javadoc">/** {@inheritDoc}. */</comment>
    <function><type><specifier>public</specifier> <name>PlanarImage</name></type> <name>executeDrawOperation</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>BufferedImage</name></type> <name>bi</name> =<init> <expr>new <call><name>BufferedImage</name><argument_list>(<argument><expr><name>width</name> + (<name>stroke_width</name> * 2)</expr></argument>,
            <argument><expr><name>height</name> + (<name>stroke_width</name> * 2)</expr></argument>, <argument><expr><name><name>BufferedImage</name>.<name>TYPE_4BYTE_ABGR_PRE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Graphics2D</name></type> <name>graphics</name> =<init> <expr>(<name>Graphics2D</name>) <call><name><name>bi</name>.<name>getGraphics</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr>!<call><name><name>stroke</name>.<name>equals</name></name><argument_list>(<argument><expr>"transparent"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>BasicStroke</name></type> <name>bStroke</name> =<init> <expr>new <call><name>BasicStroke</name><argument_list>(<argument><expr><name>stroke_width</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>graphics</name>.<name>setColor</name></name><argument_list>(<argument><expr><call><name><name>ColorMapper</name>.<name>getColorByName</name></name><argument_list>(<argument><expr><name>stroke</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>graphics</name>.<name>setStroke</name></name><argument_list>(<argument><expr><name>bStroke</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>graphics</name>.<name>draw</name></name><argument_list>(<argument><expr>new <call><name><name>Arc2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>stroke_width</name></expr></argument>, <argument><expr><name>stroke_width</name></expr></argument>, <argument><expr><name>width</name></expr></argument>,
                <argument><expr><name>height</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>stop</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr>!<call><name><name>fill</name>.<name>equals</name></name><argument_list>(<argument><expr>"transparent"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>graphics</name>.<name>setColor</name></name><argument_list>(<argument><expr><call><name><name>ColorMapper</name>.<name>getColorByName</name></name><argument_list>(<argument><expr><name>fill</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>graphics</name>.<name>fill</name></name><argument_list>(<argument><expr>new <call><name><name>Arc2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>stroke_width</name></expr></argument>, <argument><expr><name>stroke_width</name></expr></argument>,
                <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>stop</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>


        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>size</name> =<init> <expr><call><name><name>instructions</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>size</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>ImageOperation</name></type> <name>instr</name> =<init> <expr>((<name>ImageOperation</name>) <call><name><name>instructions</name>.<name>elementAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>)</expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>instr</name> <name>instanceof</name> <name>DrawOperation</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>PlanarImage</name></type> <name>img</name> =<init> <expr>((<name>DrawOperation</name>) <name>instr</name>).<call><name>executeDrawOperation</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>graphics</name>.<name>drawImage</name></name><argument_list>(<argument><expr><call><name><name>img</name>.<name>getAsBufferedImage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><name>instr</name> <name>instanceof</name> <name>TransformOperation</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>graphics</name> = (<name>Graphics2D</name>) <call><name><name>bi</name>.<name>getGraphics</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>PlanarImage</name></type> <name>image</name> =<init> <expr>((<name>TransformOperation</name>) <name>instr</name>)
                    .<call><name>executeTransformOperation</name><argument_list>(<argument><expr><call><name><name>PlanarImage</name>.<name>wrapRenderedImage</name></name><argument_list>(<argument><expr><name>bi</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>bi</name> = <call><name><name>image</name>.<name>getAsBufferedImage</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if>
        }</block></for>
        <return>return <expr><call><name><name>PlanarImage</name>.<name>wrapRenderedImage</name></name><argument_list>(<argument><expr><name>bi</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
