<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\types\ArchiveScanner.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>TreeMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>DirectoryScanner</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>FileResource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>FileResourceIterator</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>FileProvider</name></name>;</import>

<comment type="javadoc">/**
 * ArchiveScanner accesses the pattern matching algorithm in DirectoryScanner,
 * which are protected methods that can only be accessed by subclassing.
 *
 * This implementation of FileScanner defines getIncludedFiles to return
 * the matching archive entries.
 *
 * @since Ant 1.7
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>ArchiveScanner</name> <super><extends>extends <name>DirectoryScanner</name></extends></super> <block>{
    <comment type="line">// CheckStyle:VisibilityModifier OFF - bc</comment>

    <comment type="javadoc">/**
     * The archive file which should be scanned.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>File</name></type> <name>srcFile</name></decl>;</decl_stmt>

    <comment type="line">// CheckStyle:VisibilityModifier ON</comment>

    <comment type="javadoc">/**
     * The archive resource which should be scanned.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Resource</name></type> <name>src</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * to record the last scanned zip file with its modification date
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Resource</name></type> <name>lastScannedResource</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * record list of all file zip entries
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Resource</name></argument>&gt;</argument_list></name></type> <name>fileEntries</name> =<init> <expr>new <call><name><name>TreeMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Resource</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * record list of all directory zip entries
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Resource</name></argument>&gt;</argument_list></name></type> <name>dirEntries</name> =<init> <expr>new <call><name><name>TreeMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Resource</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * record list of matching file zip entries
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Resource</name></argument>&gt;</argument_list></name></type> <name>matchFileEntries</name> =<init> <expr>new <call><name><name>TreeMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Resource</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * record list of matching directory zip entries
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Resource</name></argument>&gt;</argument_list></name></type> <name>matchDirEntries</name> =<init> <expr>new <call><name><name>TreeMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Resource</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * encoding of file names.
     *
     * @since Ant 1.6
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>encoding</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * @since Ant 1.8.0
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>errorOnMissingArchive</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Sets whether an error is thrown if an archive does not exist.
     *
     * @param errorOnMissingArchive true if missing archives cause errors,
     *                        false if not.
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setErrorOnMissingArchive</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>errorOnMissingArchive</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>errorOnMissingArchive</name></name> = <name>errorOnMissingArchive</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Don't scan when we have no zipfile.
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>scan</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>src</name> == <name>null</name> || (!<call><name><name>src</name>.<name>isExists</name></name><argument_list>()</argument_list></call> &amp;&amp; !<name>errorOnMissingArchive</name>)</expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>super</name>.<name>scan</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the srcFile for scanning. This is the jar or zip file that
     * is scanned for matching entries.
     *
     * @param srcFile the (non-null) archive file name for scanning
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSrc</name><parameter_list>(<param><decl><type><name>File</name></type> <name>srcFile</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setSrc</name><argument_list>(<argument><expr>new <call><name>FileResource</name><argument_list>(<argument><expr><name>srcFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the src for scanning. This is the jar or zip file that
     * is scanned for matching entries.
     *
     * @param src the (non-null) archive resource
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSrc</name><parameter_list>(<param><decl><type><name>Resource</name></type> <name>src</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>src</name></name> = <name>src</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>FileProvider</name></type> <name>fp</name> =<init> <expr><call><name><name>src</name>.<name>as</name></name><argument_list>(<argument><expr><name><name>FileProvider</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>fp</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>srcFile</name> = <call><name><name>fp</name>.<name>getFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Sets encoding of file names.
     * @param encoding the encoding format
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setEncoding</name><parameter_list>(<param><decl><type><name>String</name></type> <name>encoding</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>encoding</name></name> = <name>encoding</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the names of the files which matched at least one of the
     * include patterns and none of the exclude patterns.
     * The names are relative to the base directory.
     *
     * @return the names of the files which matched at least one of the
     *         include patterns and none of the exclude patterns.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getIncludedFiles</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>src</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>super</name>.<name>getIncludedFiles</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>scanme</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>matchFileEntries</name>.<name>keySet</name></name><argument_list>()</argument_list></call>.<call><name>toArray</name><argument_list>(<argument><expr>new <name><name>String</name><index>[<expr><call><name><name>matchFileEntries</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Override parent implementation.
     * @return count of included files.
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getIncludedFilesCount</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>src</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>super</name>.<name>getIncludedFilesCount</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>scanme</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>matchFileEntries</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the names of the directories which matched at least one of the
     * include patterns and none of the exclude patterns.
     * The names are relative to the base directory.
     *
     * @return the names of the directories which matched at least one of the
     * include patterns and none of the exclude patterns.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getIncludedDirectories</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>src</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>super</name>.<name>getIncludedDirectories</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>scanme</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>matchDirEntries</name>.<name>keySet</name></name><argument_list>()</argument_list></call>.<call><name>toArray</name><argument_list>(<argument><expr>new <name><name>String</name><index>[<expr><call><name><name>matchDirEntries</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Override parent implementation.
     * @return count of included directories.
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getIncludedDirsCount</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>src</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>super</name>.<name>getIncludedDirsCount</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>scanme</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>matchDirEntries</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the set of Resources that represent files.
     * @param project since Ant 1.8
     * @return an Iterator of Resources.
     * @since Ant 1.7
     */</comment>
    <comment type="block">/* package-private for now */</comment> <function><type><name><name>Iterator</name><argument_list>&lt;<argument><name>Resource</name></argument>&gt;</argument_list></name></type> <name>getResourceFiles</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>src</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr>new <call><name>FileResourceIterator</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr><call><name>getBasedir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getIncludedFiles</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>scanme</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>matchFileEntries</name>.<name>values</name></name><argument_list>()</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the set of Resources that represent directories.
     * @param project since Ant 1.8
     * @return an Iterator of Resources.
     * @since Ant 1.7
     */</comment>
    <comment type="block">/* package-private for now */</comment>  <function><type><name><name>Iterator</name><argument_list>&lt;<argument><name>Resource</name></argument>&gt;</argument_list></name></type> <name>getResourceDirectories</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>src</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr>new <call><name>FileResourceIterator</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr><call><name>getBasedir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getIncludedDirectories</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>scanme</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>matchDirEntries</name>.<name>values</name></name><argument_list>()</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Initialize DirectoryScanner data structures.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>init</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>includes</name> == <name>null</name></expr>)</condition><then> <block>{
            <comment type="line">// No includes supplied, so set it to 'matches all'</comment>
            <expr_stmt><expr><name>includes</name> = new <name><name>String</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>includes</name><index>[<expr>0</expr>]</index></name> = "**"</expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>excludes</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>excludes</name> = new <name><name>String</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Matches a jar entry against the includes/excludes list,
     * normalizing the path separator.
     *
     * @param path the (non-null) path name to test for inclusion
     *
     * @return &lt;code&gt;true&lt;/code&gt; if the path should be included
     *         &lt;code&gt;false&lt;/code&gt; otherwise.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>match</name><parameter_list>(<param><decl><type><name>String</name></type> <name>path</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>vpath</name> =<init> <expr><call><name><name>path</name>.<name>replace</name></name><argument_list>(<argument><expr>'/'</expr></argument>, <argument><expr><name><name>File</name>.<name>separatorChar</name></name></expr></argument>)</argument_list></call>.
            <call><name>replace</name><argument_list>(<argument><expr>'\\'</expr></argument>, <argument><expr><name><name>File</name>.<name>separatorChar</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>isIncluded</name><argument_list>(<argument><expr><name>vpath</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>isExcluded</name><argument_list>(<argument><expr><name>vpath</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the named Resource.
     * @param name path name of the file sought in the archive
     * @return the resource
     * @since Ant 1.5.2
     */</comment>
    <function><type><specifier>public</specifier> <name>Resource</name></type> <name>getResource</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>src</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>super</name>.<name>getResource</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>name</name>.<name>equals</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">// special case in ZIPs, we do not want this thing included</comment>
            <return>return <expr>new <call><name>Resource</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr>true</expr></argument>, <argument><expr><name><name>Long</name>.<name>MAX_VALUE</name></name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <comment type="line">// first check if the archive needs to be scanned again</comment>
        <expr_stmt><expr><call><name>scanme</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>fileEntries</name>.<name>containsKey</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>fileEntries</name>.<name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>name</name> = <call><name>trimSeparator</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name><name>dirEntries</name>.<name>containsKey</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>dirEntries</name>.<name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <return>return <expr>new <call><name>Resource</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Fills the file and directory maps with resources read from the archive.
     *
     * @param archive the archive to scan.
     * @param encoding encoding used to encode file names inside the archive.
     * @param fileEntries Map (name to resource) of non-directory
     * resources found inside the archive.
     * @param matchFileEntries Map (name to resource) of non-directory
     * resources found inside the archive that matched all include
     * patterns and didn't match any exclude patterns.
     * @param dirEntries Map (name to resource) of directory
     * resources found inside the archive.
     * @param matchDirEntries Map (name to resource) of directory
     * resources found inside the archive that matched all include
     * patterns and didn't match any exclude patterns.
     */</comment>
    <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>fillMapsFromArchive</name><parameter_list>(<param><decl><type><name>Resource</name></type> <name>archive</name></decl></param>,
                                                <param><decl><type><name>String</name></type> <name>encoding</name></decl></param>,
                                                <param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Resource</name></argument>&gt;</argument_list></name></type> <name>fileEntries</name></decl></param>,
                                                <param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Resource</name></argument>&gt;</argument_list></name></type> <name>matchFileEntries</name></decl></param>,
                                                <param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Resource</name></argument>&gt;</argument_list></name></type> <name>dirEntries</name></decl></param>,
                                                <param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Resource</name></argument>&gt;</argument_list></name></type> <name>matchDirEntries</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="javadoc">/**
     * if the datetime of the archive did not change since
     * lastScannedResource was initialized returns immediately else if
     * the archive has not been scanned yet, then all the zip entries
     * are put into the appropriate tables.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>scanme</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr>!<call><name><name>src</name>.<name>isExists</name></name><argument_list>()</argument_list></call> &amp;&amp; !<name>errorOnMissingArchive</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>

        <comment type="line">//do not use a FileResource b/c it pulls File info from the filesystem:</comment>
        <decl_stmt><decl><type><name>Resource</name></type> <name>thisresource</name> =<init> <expr>new <call><name>Resource</name><argument_list>(<argument><expr><call><name><name>src</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                                             <argument><expr><call><name><name>src</name>.<name>isExists</name></name><argument_list>()</argument_list></call></expr></argument>,
                                             <argument><expr><call><name><name>src</name>.<name>getLastModified</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// spare scanning again and again</comment>
        <if>if <condition>(<expr><name>lastScannedResource</name> != <name>null</name>
            &amp;&amp; <call><name><name>lastScannedResource</name>.<name>getName</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><call><name><name>thisresource</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
            &amp;&amp; <call><name><name>lastScannedResource</name>.<name>getLastModified</name></name><argument_list>()</argument_list></call>
            == <call><name><name>thisresource</name>.<name>getLastModified</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>fileEntries</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dirEntries</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>matchFileEntries</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>matchDirEntries</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fillMapsFromArchive</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>, <argument><expr><name>fileEntries</name></expr></argument>, <argument><expr><name>matchFileEntries</name></expr></argument>,
                            <argument><expr><name>dirEntries</name></expr></argument>, <argument><expr><name>matchDirEntries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// record data about the last scanned resource</comment>
        <expr_stmt><expr><name>lastScannedResource</name> = <name>thisresource</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Remove trailing slash if present.
     * @param s the file name to trim.
     * @return the trimmed file name.
     */</comment>
    <function><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>trimSeparator</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>s</name>.<name>endsWith</name></name><argument_list>(<argument><expr>"/"</expr></argument>)</argument_list></call> ? <call><name><name>s</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>s</name>.<name>length</name></name><argument_list>()</argument_list></call> - 1</expr></argument>)</argument_list></call> : <name>s</name></expr>;</return>
    }</block></function>

}</block></class>
</unit>
