<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\util\LinkedHashtable.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>Collection</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Hashtable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>LinkedHashMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Set</name></name>;</import>

<comment type="javadoc">/**
 * Subclass of Hashtable that wraps a LinkedHashMap to provide
 * predictable iteration order.
 *
 * &lt;p&gt;This is not a general purpose class but has been written because
 * the protected members of {@link org.apache.tools.ant.taskdefs.Copy
 * Copy} prohibited later revisions from using a more predictable
 * collection.&lt;/p&gt;
 *
 * &lt;p&gt;Methods are synchronized to keep Hashtable's contract.&lt;/p&gt;
 *
 * @since Ant 1.8.2
 */</comment>
<class><specifier>public</specifier> class <name><name>LinkedHashtable</name><argument_list>&lt;<argument><name>K</name></argument>, <argument><name>V</name></argument>&gt;</argument_list></name> <super><extends>extends <name><name>Hashtable</name><argument_list>&lt;<argument><name>K</name></argument>, <argument><name>V</name></argument>&gt;</argument_list></name></extends></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>1L</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>LinkedHashMap</name><argument_list>&lt;<argument><name>K</name></argument>, <argument><name>V</name></argument>&gt;</argument_list></name></type> <name>map</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>LinkedHashtable</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>map</name> = new <call><name><name>LinkedHashMap</name><argument_list>&lt;<argument><name>K</name></argument>, <argument><name>V</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>LinkedHashtable</name><parameter_list>(<param><decl><type><name>int</name></type> <name>initialCapacity</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>map</name> = new <call><name><name>LinkedHashMap</name><argument_list>&lt;<argument><name>K</name></argument>, <argument><name>V</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>initialCapacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>LinkedHashtable</name><parameter_list>(<param><decl><type><name>int</name></type> <name>initialCapacity</name></decl></param>, <param><decl><type><name>float</name></type> <name>loadFactor</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>map</name> = new <call><name><name>LinkedHashMap</name><argument_list>&lt;<argument><name>K</name></argument>, <argument><name>V</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>initialCapacity</name></expr></argument>, <argument><expr><name>loadFactor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>LinkedHashtable</name><parameter_list>(<param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>K</name></argument>, <argument><name>V</name></argument>&gt;</argument_list></name></type> <name>m</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>map</name> = new <call><name><name>LinkedHashMap</name><argument_list>&lt;<argument><name>K</name></argument>, <argument><name>V</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>map</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>contains</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>containsKey</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>boolean</name></type> <name>containsKey</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>map</name>.<name>containsKey</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>boolean</name></type> <name>containsValue</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>map</name>.<name>containsValue</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Enumeration</name><argument_list>&lt;<argument><name>V</name></argument>&gt;</argument_list></name></type> <name>elements</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>CollectionUtils</name>.<name>asEnumeration</name></name><argument_list>(<argument><expr><call><name>values</name><argument_list>()</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name><name>Set</name><argument_list>&lt;<argument><name><name>Map</name>.<name><name>Entry</name><argument_list>&lt;<argument><name>K</name></argument>, <argument><name>V</name></argument>&gt;</argument_list></name></name></argument>&gt;</argument_list></name></type> <name>entrySet</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>map</name>.<name>entrySet</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>o</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>map</name>.<name>equals</name></name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>V</name></type> <name>get</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>k</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>map</name>.<name>get</name></name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>map</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>boolean</name></type> <name>isEmpty</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>map</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name><name>Enumeration</name><argument_list>&lt;<argument><name>K</name></argument>&gt;</argument_list></name></type> <name>keys</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>CollectionUtils</name>.<name>asEnumeration</name></name><argument_list>(<argument><expr><call><name>keySet</name><argument_list>()</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name><name>Set</name><argument_list>&lt;<argument><name>K</name></argument>&gt;</argument_list></name></type> <name>keySet</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>map</name>.<name>keySet</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>V</name></type> <name>put</name><parameter_list>(<param><decl><type><name>K</name></type> <name>k</name></decl></param>, <param><decl><type><name>V</name></type> <name>v</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>map</name>.<name>put</name></name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>putAll</name><parameter_list>(<param><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>?</name> <extends>extends <name>K</name></extends></argument>, <argument><name>?</name> <extends>extends <name>V</name></extends></argument>&gt;</argument_list></name></type> <name>m</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>map</name>.<name>putAll</name></name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>V</name></type> <name>remove</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>k</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>map</name>.<name>remove</name></name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>int</name></type> <name>size</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>map</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>map</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name><name>Collection</name><argument_list>&lt;<argument><name>V</name></argument>&gt;</argument_list></name></type> <name>values</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>map</name>.<name>values</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
