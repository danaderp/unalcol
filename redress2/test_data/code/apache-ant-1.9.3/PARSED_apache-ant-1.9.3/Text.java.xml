<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\types\optional\image\Text.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>optional</name>.<name>image</name></name>;</package>

<import>import <name><name>javax</name>.<name>media</name>.<name>jai</name>.<name>PlanarImage</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Color</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Font</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>FontMetrics</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>RenderingHints</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>image</name>.<name>BufferedImage</name></name>;</import>

<comment type="javadoc">/**
 *
 * @see org.apache.tools.ant.taskdefs.optional.image.Image
 */</comment>
<class><specifier>public</specifier> class <name>Text</name> <super><extends>extends <name>ImageOperation</name></extends> <implements>implements <name>DrawOperation</name></implements></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DEFAULT_POINT</name> =<init> <expr>10</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>strText</name> =<init> <expr>""</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>font</name> =<init> <expr>"Arial"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>point</name> =<init> <expr><name>DEFAULT_POINT</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>bold</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>italic</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>color</name> =<init> <expr>"black"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Set the string to be used as text.
     * @param str the string to be used.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setString</name><parameter_list>(<param><decl><type><name>String</name></type> <name>str</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>strText</name> = <name>str</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the font to be used to draw the text.
     * @param f the font to be used.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFont</name><parameter_list>(<param><decl><type><name>String</name></type> <name>f</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>font</name> = <name>f</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the number of points to be used.
     * @param p an integer value as a string.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPoint</name><parameter_list>(<param><decl><type><name>String</name></type> <name>p</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>point</name> = <call><name><name>Integer</name>.<name>parseInt</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the color of the text.
     * @param c the color name.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setColor</name><parameter_list>(<param><decl><type><name>String</name></type> <name>c</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>color</name> = <name>c</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * @todo is this used?
     * @param state not used at the moment.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBold</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>state</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>bold</name> = <name>state</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * @todo is this used?
     * @param state not used at the moment.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setItalic</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>state</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>italic</name> = <name>state</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Draw the text.
     * @return the resultant image.
     */</comment>
    <function><type><specifier>public</specifier> <name>PlanarImage</name></type> <name>executeDrawOperation</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"\tCreating Text \"" + <name>strText</name> + "\""</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Color</name></type> <name>couloir</name> =<init> <expr><call><name><name>ColorMapper</name>.<name>getColorByName</name></name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>width</name> =<init> <expr>1</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>height</name> =<init> <expr>1</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>BufferedImage</name></type> <name>bi</name> =<init> <expr>new <call><name>BufferedImage</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name><name>BufferedImage</name>.<name>TYPE_4BYTE_ABGR_PRE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Graphics2D</name></type> <name>graphics</name> =<init> <expr>(<name>Graphics2D</name>) <call><name><name>bi</name>.<name>getGraphics</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>graphics</name>.<name>setRenderingHint</name></name><argument_list>(
            <argument><expr><name><name>RenderingHints</name>.<name>KEY_ANTIALIASING</name></name></expr></argument>, <argument><expr><name><name>RenderingHints</name>.<name>VALUE_ANTIALIAS_ON</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>graphics</name>.<name>setRenderingHint</name></name><argument_list>(
            <argument><expr><name><name>RenderingHints</name>.<name>KEY_FRACTIONALMETRICS</name></name></expr></argument>, <argument><expr><name><name>RenderingHints</name>.<name>VALUE_FRACTIONALMETRICS_ON</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Font</name></type> <name>f</name> =<init> <expr>new <call><name>Font</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name><name>Font</name>.<name>PLAIN</name></name></expr></argument>, <argument><expr><name>point</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FontMetrics</name></type> <name>fmetrics</name> =<init> <expr><call><name><name>graphics</name>.<name>getFontMetrics</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>height</name> = <call><name><name>fmetrics</name>.<name>getMaxAscent</name></name><argument_list>()</argument_list></call> + <call><name><name>fmetrics</name>.<name>getMaxDescent</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>width</name> = <call><name><name>fmetrics</name>.<name>stringWidth</name></name><argument_list>(<argument><expr><name>strText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        <expr_stmt><expr><name>bi</name> = new <call><name>BufferedImage</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name><name>BufferedImage</name>.<name>TYPE_4BYTE_ABGR_PRE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>graphics</name> = (<name>Graphics2D</name>) <call><name><name>bi</name>.<name>getGraphics</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>graphics</name>.<name>setRenderingHint</name></name><argument_list>(
            <argument><expr><name><name>RenderingHints</name>.<name>KEY_ANTIALIASING</name></name></expr></argument>, <argument><expr><name><name>RenderingHints</name>.<name>VALUE_ANTIALIAS_ON</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>graphics</name>.<name>setRenderingHint</name></name><argument_list>(
            <argument><expr><name><name>RenderingHints</name>.<name>KEY_FRACTIONALMETRICS</name></name></expr></argument>, <argument><expr><name><name>RenderingHints</name>.<name>VALUE_FRACTIONALMETRICS_ON</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>graphics</name>.<name>setFont</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>graphics</name>.<name>setColor</name></name><argument_list>(<argument><expr><name>couloir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>graphics</name>.<name>drawString</name></name><argument_list>(<argument><expr><name>strText</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>height</name> - <call><name><name>fmetrics</name>.<name>getMaxDescent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>PlanarImage</name></type> <name>image</name> =<init> <expr><call><name><name>PlanarImage</name>.<name>wrapRenderedImage</name></name><argument_list>(<argument><expr><name>bi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>image</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
