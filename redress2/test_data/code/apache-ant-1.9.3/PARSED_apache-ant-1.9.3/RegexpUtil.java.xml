<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\util\regexp\RegexpUtil.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>regexp</name></name>;</package>

<comment type="line">// CheckStyle:HideUtilityClassConstructorCheck OFF - bc</comment>

<comment type="javadoc">/***
 * Regular expression utilities class which handles flag operations.
 *
 */</comment>
<class><specifier>public</specifier> class <name>RegexpUtil</name> <block>{

    <comment type="javadoc">/**
     * Check the options has a particular flag set.
     *
     * @param options an &lt;code&gt;int&lt;/code&gt; value
     * @param flag an &lt;code&gt;int&lt;/code&gt; value
     * @return true if the flag is set
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>hasFlag</name><parameter_list>(<param><decl><type><name>int</name></type> <name>options</name></decl></param>, <param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>((<name>options</name> &amp; <name>flag</name>) &gt; 0)</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Remove a particular flag from an int value contains the option flags.
     *
     * @param options an &lt;code&gt;int&lt;/code&gt; value
     * @param flag an &lt;code&gt;int&lt;/code&gt; value
     * @return the options with the flag unset
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>removeFlag</name><parameter_list>(<param><decl><type><name>int</name></type> <name>options</name></decl></param>, <param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>(<name>options</name> &amp; (0xFFFFFFFF - <name>flag</name>))</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * convert regex option flag characters to regex options
     * &lt;dl&gt;
     *   &lt;li&gt;g -  Regexp.REPLACE_ALL&lt;/li&gt;
     *   &lt;li&gt;i -  RegexpMatcher.MATCH_CASE_INSENSITIVE&lt;/li&gt;
     *   &lt;li&gt;m -  RegexpMatcher.MATCH_MULTILINE&lt;/li&gt;
     *   &lt;li&gt;s -  RegexpMatcher.MATCH_SINGLELINE&lt;/li&gt;
     * &lt;/dl&gt;
     * @param flags the string containing the flags
     * @return the Regexp option bits
     * @since Ant 1.8.2
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>asOptions</name><parameter_list>(<param><decl><type><name>String</name></type> <name>flags</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>options</name> =<init> <expr><name><name>RegexpMatcher</name>.<name>MATCH_DEFAULT</name></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>flags</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>options</name> = <call><name>asOptions</name><argument_list>(<argument><expr><call><name><name>flags</name>.<name>indexOf</name></name><argument_list>(<argument><expr>'i'</expr></argument>)</argument_list></call> == -1</expr></argument>,
                                <argument><expr><call><name><name>flags</name>.<name>indexOf</name></name><argument_list>(<argument><expr>'m'</expr></argument>)</argument_list></call> != -1</expr></argument>,
                                <argument><expr><call><name><name>flags</name>.<name>indexOf</name></name><argument_list>(<argument><expr>'s'</expr></argument>)</argument_list></call> != -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name><name>flags</name>.<name>indexOf</name></name><argument_list>(<argument><expr>'g'</expr></argument>)</argument_list></call> != -1</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>options</name> |= <name><name>Regexp</name>.<name>REPLACE_ALL</name></name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <return>return <expr><name>options</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Convert flag to regex options.
     *
     * @param caseSensitive opposite of RegexpMatcher.MATCH_CASE_INSENSITIVE
     * @return the Regexp option bits
     * @since Ant 1.8.2
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>asOptions</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>caseSensitive</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>asOptions</name><argument_list>(<argument><expr><name>caseSensitive</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Convert flags to regex options.
     *
     * @param caseSensitive opposite of RegexpMatcher.MATCH_CASE_INSENSITIVE
     * @param multiLine RegexpMatcher.MATCH_MULTILINE
     * @param singleLine RegexpMatcher.MATCH_SINGLELINE
     * @return the Regexp option bits
     * @since Ant 1.8.2
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>asOptions</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>caseSensitive</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>multiLine</name></decl></param>,
                                <param><decl><type><name>boolean</name></type> <name>singleLine</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>options</name> =<init> <expr><name><name>RegexpMatcher</name>.<name>MATCH_DEFAULT</name></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>caseSensitive</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>options</name> = <name>options</name> | <name><name>RegexpMatcher</name>.<name>MATCH_CASE_INSENSITIVE</name></name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>multiLine</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>options</name> = <name>options</name> | <name><name>RegexpMatcher</name>.<name>MATCH_MULTILINE</name></name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>singleLine</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>options</name> = <name>options</name> | <name><name>RegexpMatcher</name>.<name>MATCH_SINGLELINE</name></name></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>options</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
