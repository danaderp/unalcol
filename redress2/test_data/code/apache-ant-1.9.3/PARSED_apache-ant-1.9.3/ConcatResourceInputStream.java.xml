<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\util\ConcatResourceInputStream.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>BufferedInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>ProjectComponent</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Resource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>ResourceCollection</name></name>;</import>

<comment type="javadoc">/**
 * Special &lt;code&gt;InputStream&lt;/code&gt; that will
 * concatenate the contents of Resources from a single ResourceCollection.
 * @since Ant 1.7
 */</comment>
<class><specifier>public</specifier> class <name>ConcatResourceInputStream</name> <super><extends>extends <name>InputStream</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>EOF</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>eof</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name>Resource</name></argument>&gt;</argument_list></name></type> <name>iter</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>InputStream</name></type> <name>currentStream</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ProjectComponent</name></type> <name>managingPc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>ignoreErrors</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

  <comment type="javadoc">/**
   * Construct a new ConcatResourceInputStream
   * for the specified ResourceCollection.
   * @param rc the ResourceCollection to combine.
   */</comment>
    <constructor><specifier>public</specifier> <name>ConcatResourceInputStream</name><parameter_list>(<param><decl><type><name>ResourceCollection</name></type> <name>rc</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>iter</name> = <call><name><name>rc</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Set whether this ConcatResourceInputStream ignores errors.
     * @param b whether to ignore errors.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setIgnoreErrors</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>ignoreErrors</name> = <name>b</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Find out whether this ConcatResourceInputStream ignores errors.
     * @return boolean ignore-errors flag.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isIgnoreErrors</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>ignoreErrors</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Close the stream.
     * @throws IOException if there is an error.
     */</comment>
     <function><type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>closeCurrent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>eof</name> = true</expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Read a byte.
     * @return the byte (0 - 255) or -1 if this is the end of the stream.
     * @throws IOException if there is an error.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>read</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>eof</name></expr>)</condition><then> <block>{
            <return>return <expr><name>EOF</name></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> =<init> <expr><call><name>readCurrent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>result</name> == <name>EOF</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>nextResource</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>result</name> = <call><name>readCurrent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set a managing &lt;code&gt;ProjectComponent&lt;/code&gt; for
     * this &lt;code&gt;ConcatResourceInputStream&lt;/code&gt;.
     * @param pc   the managing &lt;code&gt;ProjectComponent&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setManagingComponent</name><parameter_list>(<param><decl><type><name>ProjectComponent</name></type> <name>pc</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>managingPc</name></name> = <name>pc</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Log a message with the specified logging level.
     * @param message    the &lt;code&gt;String&lt;/code&gt; message.
     * @param loglevel   the &lt;code&gt;int&lt;/code&gt; logging level.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>log</name><parameter_list>(<param><decl><type><name>String</name></type> <name>message</name></decl></param>, <param><decl><type><name>int</name></type> <name>loglevel</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>managingPc</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>managingPc</name>.<name>log</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>loglevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr>(<name>loglevel</name> &gt; <name><name>Project</name>.<name>MSG_WARN</name></name> ? <name><name>System</name>.<name>out</name></name> : <name><name>System</name>.<name>err</name></name>).<call><name>println</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <function><type><specifier>private</specifier> <name>int</name></type> <name>readCurrent</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <return>return <expr><name>eof</name> || <name>currentStream</name> == <name>null</name> ? <name>EOF</name> : <call><name><name>currentStream</name>.<name>read</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>nextResource</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>closeCurrent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><call><name><name>iter</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>Resource</name></type> <name>r</name> =<init> <expr>(<name>Resource</name>) <call><name><name>iter</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<call><name><name>r</name>.<name>isExists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <continue>continue;</continue>
            }</block></then></if>
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Concating " + <call><name><name>r</name>.<name>toLongString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <try>try <block>{
                <expr_stmt><expr><name>currentStream</name> = new <call><name>BufferedInputStream</name><argument_list>(<argument><expr><call><name><name>r</name>.<name>getInputStream</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>eyeOhEx</name></decl></param>) <block>{
                <if>if <condition>(<expr>!<name>ignoreErrors</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Failed to get input stream for " + <name>r</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_ERR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <throw>throw <expr><name>eyeOhEx</name></expr>;</throw>
                }</block></then></if>
            }</block></catch></try>
        }</block></while>
        <expr_stmt><expr><name>eof</name> = true</expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>closeCurrent</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>currentStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>currentStream</name> = <name>null</name></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
