<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\Xalan2TraceSupport.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>PrintWriter</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>TooManyListenersException</name></name>;</import>
<import>import <name><name>javax</name>.<name>xml</name>.<name>transform</name>.<name>Transformer</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>XSLTProcess</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>xalan</name>.<name>trace</name>.<name>PrintTraceListener</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>xalan</name>.<name>transformer</name>.<name>TransformerImpl</name></name>;</import>

<comment type="javadoc">/**
 * Sets up trace support for a given transformer.
 *
 * @since Ant 1.8.0
 */</comment>
<class><specifier>public</specifier> class <name>Xalan2TraceSupport</name> <super><implements>implements <name>XSLTTraceSupport</name></implements></super> <block>{
    <function><type><specifier>public</specifier> <name>void</name></type> <name>configureTrace</name><parameter_list>(<param><decl><type><name>Transformer</name></type> <name>t</name></decl></param>,
                               <param><decl><type><name><name>XSLTProcess</name>.<name>TraceConfiguration</name></name></type> <name>conf</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>t</name> <name>instanceof</name> <name>TransformerImpl</name> &amp;&amp; <name>conf</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>PrintWriter</name></type> <name>w</name> =<init> <expr>new <call><name>PrintWriter</name><argument_list>(<argument><expr><call><name><name>conf</name>.<name>getOutputStream</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>PrintTraceListener</name></type> <name>tl</name> =<init> <expr>new <call><name>PrintTraceListener</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>tl</name>.<name>m_traceElements</name></name> = <call><name><name>conf</name>.<name>getElements</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>tl</name>.<name>m_traceExtension</name></name> = <call><name><name>conf</name>.<name>getExtension</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>tl</name>.<name>m_traceGeneration</name></name> = <call><name><name>conf</name>.<name>getGeneration</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>tl</name>.<name>m_traceSelection</name></name> = <call><name><name>conf</name>.<name>getSelection</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>tl</name>.<name>m_traceTemplates</name></name> = <call><name><name>conf</name>.<name>getTemplates</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <try>try <block>{
                <expr_stmt><expr>((<name>TransformerImpl</name>) <name>t</name>).<call><name>getTraceManager</name><argument_list>()</argument_list></call>.<call><name>addTraceListener</name><argument_list>(<argument><expr><name>tl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>TooManyListenersException</name></type> <name>tml</name></decl></param>) <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>tml</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></then></if>
    }</block></function>
}</block></class>
</unit>
