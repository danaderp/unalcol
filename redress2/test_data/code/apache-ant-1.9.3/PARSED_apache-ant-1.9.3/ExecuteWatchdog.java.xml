<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\ExecuteWatchdog.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>TimeoutObserver</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>Watchdog</name></name>;</import>

<comment type="javadoc">/**
 * Destroys a process running for too long.
 * For example:
 * &lt;pre&gt;
 * ExecuteWatchdog watchdog = new ExecuteWatchdog(30000);
 * Execute exec = new Execute(myloghandler, watchdog);
 * exec.setCommandLine(mycmdline);
 * int exitvalue = exec.execute();
 * if (Execute.isFailure(exitvalue) &amp;amp;&amp;amp; watchdog.killedProcess()) {
 *              // it was killed on purpose by the watchdog
 * }
 * &lt;/pre&gt;

 * @see Execute
 * @see org.apache.tools.ant.util.Watchdog
 * @since Ant 1.2
 */</comment>
<class><specifier>public</specifier> class <name>ExecuteWatchdog</name> <super><implements>implements <name>TimeoutObserver</name></implements></super> <block>{

    <comment type="javadoc">/** the process to execute and watch for duration */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Process</name></type> <name>process</name></decl>;</decl_stmt>

    <comment type="javadoc">/** say whether or not the watchdog is currently monitoring a process */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>volatile</name> <name>boolean</name></type> <name>watch</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** exception that might be thrown during the process execution */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Exception</name></type> <name>caught</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** say whether or not the process was killed due to running overtime */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>volatile</name> <name>boolean</name></type> <name>killedProcess</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** will tell us whether timeout has occurred */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Watchdog</name></type> <name>watchdog</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a new watchdog with a given timeout.
     *
     * @param timeout the timeout for the process in milliseconds.
     * It must be greater than 0.
     */</comment>
    <constructor><specifier>public</specifier> <name>ExecuteWatchdog</name><parameter_list>(<param><decl><type><name>long</name></type> <name>timeout</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>watchdog</name> = new <call><name>Watchdog</name><argument_list>(<argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>watchdog</name>.<name>addTimeoutObserver</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * @param timeout the timeout value to use in milliseconds.
     * @see #ExecuteWatchdog(long)
     * @deprecated since 1.5.x.
     *             Use constructor with a long type instead.
     * (1.4.x compatibility)
     */</comment>
    <constructor><specifier>public</specifier> <name>ExecuteWatchdog</name><parameter_list>(<param><decl><type><name>int</name></type> <name>timeout</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>(<name>long</name>) <name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Watches the given process and terminates it, if it runs for too long.
     * All information from the previous run are reset.
     * @param process the process to monitor. It cannot be &lt;tt&gt;null&lt;/tt&gt;
     * @throws IllegalStateException if a process is still being monitored.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>start</name><parameter_list>(<param><decl><type><name>Process</name></type> <name>process</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>process</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>NullPointerException</name><argument_list>(<argument><expr>"process is null."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>process</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalStateException</name><argument_list>(<argument><expr>"Already running."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>caught</name></name> = <name>null</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>killedProcess</name></name> = false</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>watch</name></name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>process</name></name> = <name>process</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>watchdog</name>.<name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Stops the watcher. It will notify all threads possibly waiting
     * on this object.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>stop</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>watchdog</name>.<name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>cleanUp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Called after watchdog has finished.
     * This can be called in the watchdog thread
     * @param w the watchdog
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>timeoutOccured</name><parameter_list>(<param><decl><type><name>Watchdog</name></type> <name>w</name></decl></param>)</parameter_list> <block>{
        <try>try <block>{
            <try>try <block>{
                <comment type="line">// We must check if the process was not stopped</comment>
                <comment type="line">// before being here</comment>
                <expr_stmt><expr><call><name><name>process</name>.<name>exitValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>IllegalThreadStateException</name></type> <name>itse</name></decl></param>) <block>{
                <comment type="line">// the process is not terminated, if this is really</comment>
                <comment type="line">// a timeout and not a manual stop then kill it.</comment>
                <if>if <condition>(<expr><name>watch</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>killedProcess</name> = true</expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>process</name>.<name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></catch></try>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><name>caught</name> = <name>e</name></expr>;</expr_stmt>
        }</block></catch> <finally>finally <block>{
            <expr_stmt><expr><call><name>cleanUp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <comment type="javadoc">/**
     * reset the monitor flag and the process.
     */</comment>
    <function><type><specifier>protected</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>cleanUp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>watch</name> = false</expr>;</expr_stmt>
        <expr_stmt><expr><name>process</name> = <name>null</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * This method will rethrow the exception that was possibly caught during
     * the run of the process. It will only remains valid once the process has
     * been terminated either by 'error', timeout or manual intervention.
     * Information will be discarded once a new process is ran.
     * @throws  BuildException  a wrapped exception over the one that was
     * silently swallowed and stored during the process run.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>checkException</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>caught</name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Exception in ExecuteWatchdog.run: "
                                     + <call><name><name>caught</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>caught</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Indicates whether or not the watchdog is still monitoring the process.
     * @return  &lt;tt&gt;true&lt;/tt&gt; if the process is still running, otherwise
     *          &lt;tt&gt;false&lt;/tt&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isWatching</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>watch</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Indicates whether the last process run was killed on timeout or not.
     * @return  &lt;tt&gt;true&lt;/tt&gt; if the process was killed otherwise
     *          &lt;tt&gt;false&lt;/tt&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>killedProcess</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>killedProcess</name></expr>;</return>
    }</block></function>
}</block></class>

</unit>
