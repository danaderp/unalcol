<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\ejb\InnerClassFilenameFilter.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>ejb</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FilenameFilter</name></name>;</import>

<comment type="javadoc">/**
 * A filename filter for inner class files of a particular class.
 */</comment>
<class><specifier>public</specifier> class <name>InnerClassFilenameFilter</name> <super><implements>implements <name>FilenameFilter</name></implements></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>baseClassName</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructor of filter.
     * @param baseclass the class to filter inner classes on.
     */</comment>
    <constructor><name>InnerClassFilenameFilter</name><parameter_list>(<param><decl><type><name>String</name></type> <name>baseclass</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>extidx</name> =<init> <expr><call><name><name>baseclass</name>.<name>lastIndexOf</name></name><argument_list>(<argument><expr>".class"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>extidx</name> == -1</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>extidx</name> = <call><name><name>baseclass</name>.<name>length</name></name><argument_list>()</argument_list></call> - 1</expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>baseClassName</name> = <call><name><name>baseclass</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>extidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Check if the file name passes the filter.
     * @param dir not used.
     * @param filename the filename to filter on.
     * @return true if the filename is an inner class of the base class.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>accept</name><parameter_list>(<param><decl><type><name>File</name></type> <name>dir</name></decl></param>, <param><decl><type><name>String</name></type> <name>filename</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr>(<call><name><name>filename</name>.<name>lastIndexOf</name></name><argument_list>(<argument><expr>"."</expr></argument>)</argument_list></call> != <call><name><name>filename</name>.<name>lastIndexOf</name></name><argument_list>(<argument><expr>".class"</expr></argument>)</argument_list></call>)
            || (<call><name><name>filename</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>baseClassName</name> + "$"</expr></argument>)</argument_list></call> != 0)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>
}</block></class>
</unit>
