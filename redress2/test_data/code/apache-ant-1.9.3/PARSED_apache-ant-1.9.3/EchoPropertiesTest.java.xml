<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\taskdefs\optional\EchoPropertiesTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildFileTest</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>regexp</name>.<name>RegexpMatcherFactory</name></name>;</import>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>BufferedInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileReader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>BufferedReader</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Properties</name></name>;</import>

<comment type="javadoc">/**
 * Tests the EchoProperties task.
 *
 * @created   17-Jan-2002
 * @since     Ant 1.5
 */</comment>
<class><specifier>public</specifier> class <name>EchoPropertiesTest</name> <super><extends>extends <name>BuildFileTest</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>TASKDEFS_DIR</name> =<init> <expr>"src/etc/testcases/taskdefs/optional/"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>GOOD_OUTFILE</name> =<init> <expr>"test.properties"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>GOOD_OUTFILE_XML</name> =<init> <expr>"test.xml"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PREFIX_OUTFILE</name> =<init> <expr>"test-prefix.properties"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TEST_VALUE</name> =<init> <expr>"isSet"</expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>EchoPropertiesTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr><name>TASKDEFS_DIR</name> + "echoproperties.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>setProperty</name></name><argument_list>( <argument><expr>"test.property"</expr></argument>, <argument><expr><name>TEST_VALUE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"cleanup"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>testEchoToLog</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectLogContaining</name><argument_list>(<argument><expr>"testEchoToLog"</expr></argument>, <argument><expr>"test.property="+<name>TEST_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testEchoWithEmptyPrefixToLog</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectLogContaining</name><argument_list>(<argument><expr>"testEchoWithEmptyPrefixToLog"</expr></argument>, <argument><expr>"test.property="+<name>TEST_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>testReadBadFile</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildExceptionContaining</name><argument_list>( <argument><expr>"testReadBadFile"</expr></argument>,
            <argument><expr>"srcfile is a directory"</expr></argument>, <argument><expr>"srcfile is a directory!"</expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>testReadBadFileFail</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildExceptionContaining</name><argument_list>( <argument><expr>"testReadBadFile"</expr></argument>,
            <argument><expr>"srcfile is a directory"</expr></argument>, <argument><expr>"srcfile is a directory!"</expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>testReadBadFileNoFail</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectLog</name><argument_list>( <argument><expr>"testReadBadFileNoFail"</expr></argument>, <argument><expr>"srcfile is a directory!"</expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>testEchoToBadFile</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildExceptionContaining</name><argument_list>( <argument><expr>"testEchoToBadFile"</expr></argument>,
            <argument><expr>"destfile is a directory"</expr></argument>, <argument><expr>"destfile is a directory!"</expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>testEchoToBadFileFail</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildExceptionContaining</name><argument_list>( <argument><expr>"testEchoToBadFileFail"</expr></argument>,
            <argument><expr>"destfile is a directory"</expr></argument>, <argument><expr>"destfile is a directory!"</expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>testEchoToBadFileNoFail</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectLog</name><argument_list>( <argument><expr>"testEchoToBadFileNoFail"</expr></argument>, <argument><expr>"destfile is a directory!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>testEchoToGoodFile</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>( <argument><expr>"testEchoToGoodFile"</expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertGoodFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>testEchoToGoodFileXml</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>( <argument><expr>"testEchoToGoodFileXml"</expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// read in the file</comment>
        <decl_stmt><decl><type><name>File</name></type> <name>f</name> =<init> <expr><call><name>createRelativeFile</name><argument_list>( <argument><expr><name>GOOD_OUTFILE_XML</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FileReader</name></type> <name>fr</name> =<init> <expr>new <call><name>FileReader</name><argument_list>( <argument><expr><name>f</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <decl_stmt><decl><type><name>BufferedReader</name></type> <name>br</name> =<init> <expr>new <call><name>BufferedReader</name><argument_list>( <argument><expr><name>fr</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>read</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <while>while <condition>( <expr>(<name>read</name> = <call><name><name>br</name>.<name>readLine</name></name><argument_list>()</argument_list></call>) != <name>null</name></expr>)</condition> <block>{
                <if>if <condition>(<expr><call><name><name>read</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"&lt;property name=\"test.property\" value=\""+<name>TEST_VALUE</name>+"\" /&gt;"</expr></argument>)</argument_list></call> &gt;= 0</expr>)</condition><then> <block>{
                    <comment type="line">// found the property we set - it's good.</comment>
                    <return>return;</return>
                }</block></then></if>
            }</block></while>
            <expr_stmt><expr><call><name>fail</name><argument_list>( <argument><expr>"did not encounter set property in generated file."</expr></argument> )</argument_list></call></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
            <try>try <block>{
                <expr_stmt><expr><call><name><name>fr</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{}</block></catch></try>
        }</block></finally></try>
    }</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>testEchoToGoodFileFail</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>( <argument><expr>"testEchoToGoodFileFail"</expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertGoodFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>testEchoToGoodFileNoFail</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>( <argument><expr>"testEchoToGoodFileNoFail"</expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertGoodFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>testEchoPrefix</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>testEchoPrefixVarious</name><argument_list>(<argument><expr>"testEchoPrefix"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testEchoPrefixAsPropertyset</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>testEchoPrefixVarious</name><argument_list>(<argument><expr>"testEchoPrefixAsPropertyset"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testEchoPrefixAsNegatedPropertyset</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>testEchoPrefixVarious</name><argument_list>(<argument><expr>"testEchoPrefixAsNegatedPropertyset"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testEchoPrefixAsDoublyNegatedPropertyset</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>testEchoPrefixVarious</name><argument_list>(<argument><expr>"testEchoPrefixAsDoublyNegatedPropertyset"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testWithPrefixAndRegex</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>expectSpecificBuildException</name><argument_list>(<argument><expr>"testWithPrefixAndRegex"</expr></argument>,
                <argument><expr>"The target must fail with prefix and regex attributes set"</expr></argument>,
                <argument><expr>"Please specify either prefix or regex, but not both"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testWithEmptyPrefixAndRegex</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>expectLogContaining</name><argument_list>(<argument><expr>"testEchoWithEmptyPrefixToLog"</expr></argument>, <argument><expr>"test.property="+<name>TEST_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testWithRegex</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr>!<call><name><name>RegexpMatcherFactory</name>.<name>regexpMatcherPresent</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Test 'testWithRegex' skipped because no regexp matcher is present."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testWithRegex"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertDebuglogContaining</name><argument_list>(<argument><expr>"ant.home="</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>testEchoPrefixVarious</name><parameter_list>(<param><decl><type><name>String</name></type> <name>target</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Properties</name></type> <name>props</name> =<init> <expr><call><name>loadPropFile</name><argument_list>(<argument><expr><name>PREFIX_OUTFILE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"prefix didn't include 'a.set' property"</expr></argument>,
            <argument><expr>"true"</expr></argument>, <argument><expr><call><name><name>props</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"a.set"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr>"prefix failed to filter out property 'b.set'"</expr></argument>,
            <argument><expr><call><name><name>props</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"b.set"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>protected</specifier> <name>Properties</name></type> <name>loadPropFile</name><parameter_list>(<param><decl><type><name>String</name></type> <name>relativeFilename</name></decl></param>)</parameter_list>
            <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>f</name> =<init> <expr><call><name>createRelativeFile</name><argument_list>( <argument><expr><name>relativeFilename</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Properties</name></type> <name>props</name>=<init><expr>new <call><name>Properties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>InputStream</name></type> <name>in</name>=<init><expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try  <block>{
            <expr_stmt><expr><name>in</name>=new <call><name>BufferedInputStream</name><argument_list>(<argument><expr>new <call><name>FileInputStream</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>props</name>.<name>load</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
            <if>if<condition>(<expr><name>in</name>!=<name>null</name></expr>)</condition><then> <block>{
                <try>try <block>{ <expr_stmt><expr><call><name><name>in</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> }</block> <catch>catch(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{}</block></catch></try>
            }</block></then></if>
        }</block></finally></try>
        <return>return <expr><name>props</name></expr>;</return>
    }</block></function>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>assertGoodFile</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>f</name> =<init> <expr><call><name>createRelativeFile</name><argument_list>( <argument><expr><name>GOOD_OUTFILE</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(
            <argument><expr>"Did not create "+<call><name><name>f</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>,
            <argument><expr><call><name><name>f</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Properties</name></type> <name>props</name>=<init><expr><call><name>loadPropFile</name><argument_list>(<argument><expr><name>GOOD_OUTFILE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>props</name>.<name>list</name></name><argument_list>(<argument><expr><name><name>System</name>.<name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"test property not found "</expr></argument>,
                     <argument><expr><name>TEST_VALUE</name></expr></argument>, <argument><expr><call><name><name>props</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"test.property"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="block">/*
        // read in the file
        FileReader fr = new FileReader( f );
        try {
            BufferedReader br = new BufferedReader( fr );
            String read = null;
            while ( (read = br.readLine()) != null)
            {
                if (read.indexOf("test.property" + TEST_VALUE) &gt;= 0)
                {
                    // found the property we set - it's good.
                    return;
                }
            }
            fail( "did not encounter set property in generated file." );
        } finally {
            try { fr.close(); } catch(IOException e) {}
        }
*/</comment>
    }</block></function>


    <function><type><specifier>protected</specifier> <name>String</name></type> <name>toAbsolute</name><parameter_list>( <param><decl><type><name>String</name></type> <name>filename</name></decl></param> )</parameter_list> <block>{
        <return>return <expr><call><name>createRelativeFile</name><argument_list>( <argument><expr><name>filename</name></expr></argument> )</argument_list></call>.<call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>


    <function><type><specifier>protected</specifier> <name>File</name></type> <name>createRelativeFile</name><parameter_list>( <param><decl><type><name>String</name></type> <name>filename</name></decl></param> )</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>filename</name>.<name>equals</name></name><argument_list>( <argument><expr>"."</expr></argument> )</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name>getProjectDir</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <comment type="line">// else</comment>
        <return>return <expr>new <call><name>File</name><argument_list>( <argument><expr><call><name>getProjectDir</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>filename</name></expr></argument> )</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>

</unit>
