<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\BuildFileTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>PrintStream</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>URL</name></name>;</import>

<import>import <name><name>junit</name>.<name>framework</name>.<name>TestCase</name></name>;</import>

<comment type="javadoc">/**
 * A BuildFileTest is a TestCase which executes targets from an Ant buildfile
 * for testing.
 *
 * This class provides a number of utility methods for particular build file
 * tests which extend this class.
 *
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>BuildFileTest</name> <super><extends>extends <name>TestCase</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>protected</specifier> <name>Project</name></type> <name>project</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>StringBuffer</name></type> <name>logBuffer</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>StringBuffer</name></type> <name>fullLogBuffer</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>StringBuffer</name></type> <name>outBuffer</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>StringBuffer</name></type> <name>errBuffer</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>BuildException</name></type> <name>buildException</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Default constructor for the BuildFileTest object.
     */</comment>
    <constructor><specifier>public</specifier> <name>BuildFileTest</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructor for the BuildFileTest object.
     *
     * @param  name string to pass up to TestCase constructor
     */</comment>
    <constructor><specifier>public</specifier> <name>BuildFileTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Automatically calls the target called "tearDown"
     * from the build file tested if it exits.
     *
     * This allows to use Ant tasks directly in the build file
     * to clean up after each test. Note that no "setUp" target
     * is automatically called, since it's trivial to have a
     * test target depend on it.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>project</name> == <name>null</name></expr>)</condition><then> <block>{
            <comment type="block">/*
             * Maybe the BuildFileTest was subclassed and there is
             * no initialized project. So we could avoid getting a
             * NPE.
             * If there is an initialized project getTargets() does
             * not return null as it is initialized by an empty
             * HashSet.
             */</comment>
            <return>return;</return>
        }</block></then></if>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>tearDown</name> =<init> <expr>"tearDown"</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>project</name>.<name>getTargets</name></name><argument_list>()</argument_list></call>.<call><name>containsKey</name><argument_list>(<argument><expr><name>tearDown</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>project</name>.<name>executeTarget</name></name><argument_list>(<argument><expr><name>tearDown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * run a target, expect for any build exception
     *
     * @param  target target to run
     * @param  cause  information string to reader of report
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>expectBuildException</name><parameter_list>(<param><decl><type><name>String</name></type> <name>target</name></decl></param>, <param><decl><type><name>String</name></type> <name>cause</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectSpecificBuildException</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>cause</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Assert that only the given message has been logged with a
     * priority &amp;lt;= INFO when running the given target.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>expectLog</name><parameter_list>(<param><decl><type><name>String</name></type> <name>target</name></decl></param>, <param><decl><type><name>String</name></type> <name>log</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>realLog</name> =<init> <expr><call><name>getLog</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>log</name></expr></argument>, <argument><expr><name>realLog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Assert that the given substring is in the log messages.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>assertLogContaining</name><parameter_list>(<param><decl><type><name>String</name></type> <name>substring</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>realLog</name> =<init> <expr><call><name>getLog</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"expecting log to contain \"" + <name>substring</name> + "\" log was \""
                   + <name>realLog</name> + "\""</expr></argument>,
                   <argument><expr><call><name><name>realLog</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>substring</name></expr></argument>)</argument_list></call> &gt;= 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Assert that the given substring is not in the log messages.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>assertLogNotContaining</name><parameter_list>(<param><decl><type><name>String</name></type> <name>substring</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>realLog</name> =<init> <expr><call><name>getLog</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr>"didn't expect log to contain \"" + <name>substring</name> + "\" log was \""
                    + <name>realLog</name> + "\""</expr></argument>,
                    <argument><expr><call><name><name>realLog</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>substring</name></expr></argument>)</argument_list></call> &gt;= 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Assert that the given substring is in the output messages.
     * @since Ant1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>assertOutputContaining</name><parameter_list>(<param><decl><type><name>String</name></type> <name>substring</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertOutputContaining</name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr><name>substring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Assert that the given substring is in the output messages.
     * @param message Print this message if the test fails. Defaults to 
     *                a meaningful text if &lt;tt&gt;null&lt;/tt&gt; is passed.  
     * @since Ant1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>assertOutputContaining</name><parameter_list>(<param><decl><type><name>String</name></type> <name>message</name></decl></param>, <param><decl><type><name>String</name></type> <name>substring</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>realOutput</name> =<init> <expr><call><name>getOutput</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>realMessage</name> =<init> <expr>(<name>message</name> != <name>null</name>) 
            ? <name>message</name> 
            : "expecting output to contain \"" + <name>substring</name> + "\" output was \"" + <name>realOutput</name> + "\""</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>realMessage</name></expr></argument>, <argument><expr><call><name><name>realOutput</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>substring</name></expr></argument>)</argument_list></call> &gt;= 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Assert that the given substring is not in the output messages.
     * @param message Print this message if the test fails. Defaults to 
     *                a meaningful text if &lt;tt&gt;null&lt;/tt&gt; is passed.  
     * @since Ant1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>assertOutputNotContaining</name><parameter_list>(<param><decl><type><name>String</name></type> <name>message</name></decl></param>, <param><decl><type><name>String</name></type> <name>substring</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>realOutput</name> =<init> <expr><call><name>getOutput</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>realMessage</name> =<init> <expr>(<name>message</name> != <name>null</name>) 
            ? <name>message</name> 
            : "expecting output to not contain \"" + <name>substring</name> + "\" output was \"" + <name>realOutput</name> + "\""</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><name>realMessage</name></expr></argument>, <argument><expr><call><name><name>realOutput</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>substring</name></expr></argument>)</argument_list></call> &gt;= 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Assert that the given message has been logged with a priority &amp;lt;= INFO when running the
     * given target.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>expectLogContaining</name><parameter_list>(<param><decl><type><name>String</name></type> <name>target</name></decl></param>, <param><decl><type><name>String</name></type> <name>log</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertLogContaining</name><argument_list>(<argument><expr><name>log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Assert that the given message has not been logged with a
     * priority &amp;lt;= INFO when running the given target.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>expectLogNotContaining</name><parameter_list>(<param><decl><type><name>String</name></type> <name>target</name></decl></param>, <param><decl><type><name>String</name></type> <name>log</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertLogNotContaining</name><argument_list>(<argument><expr><name>log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Gets the log the BuildFileTest object.
     * Only valid if configureProject() has been called.
     *
     * @pre logBuffer!=null
     * @return    The log value
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getLog</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>logBuffer</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Assert that the given message has been logged with a priority
     * &amp;gt;= VERBOSE when running the given target.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>expectDebuglog</name><parameter_list>(<param><decl><type><name>String</name></type> <name>target</name></decl></param>, <param><decl><type><name>String</name></type> <name>log</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>realLog</name> =<init> <expr><call><name>getFullLog</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>log</name></expr></argument>, <argument><expr><name>realLog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Assert that the given substring is in the log messages.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>assertDebuglogContaining</name><parameter_list>(<param><decl><type><name>String</name></type> <name>substring</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>realLog</name> =<init> <expr><call><name>getFullLog</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"expecting debug log to contain \"" + <name>substring</name> 
                   + "\" log was \""
                   + <name>realLog</name> + "\""</expr></argument>,
                   <argument><expr><call><name><name>realLog</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>substring</name></expr></argument>)</argument_list></call> &gt;= 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Gets the log the BuildFileTest object.
     *
     * Only valid if configureProject() has been called.
     *
     * @pre fullLogBuffer!=null
     * @return    The log value
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getFullLog</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>fullLogBuffer</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * execute the target, verify output matches expectations
     *
     * @param  target  target to execute
     * @param  output  output to look for
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>expectOutput</name><parameter_list>(<param><decl><type><name>String</name></type> <name>target</name></decl></param>, <param><decl><type><name>String</name></type> <name>output</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>realOutput</name> =<init> <expr><call><name>getOutput</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><call><name><name>realOutput</name>.<name>trim</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Executes the target, verify output matches expectations
     * and that we got the named error at the end
     *
     * @param  target  target to execute
     * @param  output  output to look for
     * @param  error   Description of Parameter
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>expectOutputAndError</name><parameter_list>(<param><decl><type><name>String</name></type> <name>target</name></decl></param>, <param><decl><type><name>String</name></type> <name>output</name></decl></param>, <param><decl><type><name>String</name></type> <name>error</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>realOutput</name> =<init> <expr><call><name>getOutput</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>realOutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>realError</name> =<init> <expr><call><name>getError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>realError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getOutput</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>cleanBuffer</name><argument_list>(<argument><expr><name>outBuffer</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getError</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>cleanBuffer</name><argument_list>(<argument><expr><name>errBuffer</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>BuildException</name></type> <name>getBuildException</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>buildException</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>cleanBuffer</name><parameter_list>(<param><decl><type><name>StringBuffer</name></type> <name>buffer</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>cleanedBuffer</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>buffer</name>.<name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>char</name></type> <name>ch</name> =<init> <expr><call><name><name>buffer</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>ch</name> != '\r'</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>cleanedBuffer</name>.<name>append</name></name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <return>return <expr><call><name><name>cleanedBuffer</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets up to run the named project
     *
     * @param  filename name of project file to run
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>configureProject</name><parameter_list>(<param><decl><type><name>String</name></type> <name>filename</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets up to run the named project
     *
     * @param  filename name of project file to run
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>configureProject</name><parameter_list>(<param><decl><type><name>String</name></type> <name>filename</name></decl></param>, <param><decl><type><name>int</name></type> <name>logLevel</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><name>logBuffer</name> = new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>fullLogBuffer</name> = new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>project</name> = new <call><name>Project</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>antFile</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>setUserProperty</name></name><argument_list>(<argument><expr>"ant.file"</expr></argument> , <argument><expr><call><name><name>antFile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>addBuildListener</name></name><argument_list>(<argument><expr>new <call><name>AntTestListener</name><argument_list>(<argument><expr><name>logLevel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ProjectHelper</name>.<name>configureProject</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr><name>antFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Executes a target we have set up
     *
     * @pre configureProject has been called
     * @param  targetName  target to run
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>executeTarget</name><parameter_list>(<param><decl><type><name>String</name></type> <name>targetName</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>PrintStream</name></type> <name>sysOut</name> =<init> <expr><name><name>System</name>.<name>out</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PrintStream</name></type> <name>sysErr</name> =<init> <expr><name><name>System</name>.<name>err</name></name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>sysOut</name>.<name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sysErr</name>.<name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>outBuffer</name> = new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>PrintStream</name></type> <name>out</name> =<init> <expr>new <call><name>PrintStream</name><argument_list>(<argument><expr>new <call><name>AntOutputStream</name><argument_list>(<argument><expr><name>outBuffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>setOut</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>errBuffer</name> = new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>PrintStream</name></type> <name>err</name> =<init> <expr>new <call><name>PrintStream</name><argument_list>(<argument><expr>new <call><name>AntOutputStream</name><argument_list>(<argument><expr><name>errBuffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>setErr</name></name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>logBuffer</name> = new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>fullLogBuffer</name> = new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>buildException</name> = <name>null</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>project</name>.<name>executeTarget</name></name><argument_list>(<argument><expr><name>targetName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>setOut</name></name><argument_list>(<argument><expr><name>sysOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>setErr</name></name><argument_list>(<argument><expr><name>sysErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>

    }</block></function>

    <comment type="javadoc">/**
     * Get the project which has been configured for a test.
     *
     * @return the Project instance for this test.
     */</comment>
    <function><type><specifier>public</specifier> <name>Project</name></type> <name>getProject</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>project</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Gets the directory of the project.
     *
     * @return the base dir of the project
     */</comment>
    <function><type><specifier>public</specifier> <name>File</name></type> <name>getProjectDir</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>project</name>.<name>getBaseDir</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Runs a target, wait for a build exception.
     *
     * @param  target target to run
     * @param  cause  information string to reader of report
     * @param  msg    the message value of the build exception we are waiting
     *         for set to null for any build exception to be valid
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>expectSpecificBuildException</name><parameter_list>(<param><decl><type><name>String</name></type> <name>target</name></decl></param>, <param><decl><type><name>String</name></type> <name>cause</name></decl></param>, <param><decl><type><name>String</name></type> <name>msg</name></decl></param>)</parameter_list> <block>{
        <try>try <block>{
            <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name></type> <name>ex</name></decl></param>) <block>{
            <expr_stmt><expr><name>buildException</name> = <name>ex</name></expr>;</expr_stmt>
            <if>if <condition>(<expr>(<name>null</name> != <name>msg</name>) &amp;&amp; (!<call><name><name>ex</name>.<name>getMessage</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Should throw BuildException because '" + <name>cause</name>
                        + "' with message '" + <name>msg</name>
                        + "' (actual message '" + <call><name><name>ex</name>.<name>getMessage</name></name><argument_list>()</argument_list></call> + "' instead)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <return>return;</return>
        }</block></catch></try>
        <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Should throw BuildException because: " + <name>cause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * run a target, expect an exception string
     * containing the substring we look for (case sensitive match)
     *
     * @param  target target to run
     * @param  cause  information string to reader of report
     * @param  contains  substring of the build exception to look for
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>expectBuildExceptionContaining</name><parameter_list>(<param><decl><type><name>String</name></type> <name>target</name></decl></param>, <param><decl><type><name>String</name></type> <name>cause</name></decl></param>, <param><decl><type><name>String</name></type> <name>contains</name></decl></param>)</parameter_list> <block>{
        <try>try <block>{
            <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name></type> <name>ex</name></decl></param>) <block>{
            <expr_stmt><expr><name>buildException</name> = <name>ex</name></expr>;</expr_stmt>
            <if>if <condition>(<expr>(<name>null</name> != <name>contains</name>) &amp;&amp; (<call><name><name>ex</name>.<name>getMessage</name></name><argument_list>()</argument_list></call>.<call><name>indexOf</name><argument_list>(<argument><expr><name>contains</name></expr></argument>)</argument_list></call> == -1)</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Should throw BuildException because '" + <name>cause</name> + "' with message containing '" + <name>contains</name> + "' (actual message '" + <call><name><name>ex</name>.<name>getMessage</name></name><argument_list>()</argument_list></call> + "' instead)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <return>return;</return>
        }</block></catch></try>
        <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Should throw BuildException because: " + <name>cause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * call a target, verify property is as expected
     *
     * @param target build file target
     * @param property property name
     * @param value expected value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>expectPropertySet</name><parameter_list>(<param><decl><type><name>String</name></type> <name>target</name></decl></param>, <param><decl><type><name>String</name></type> <name>property</name></decl></param>, <param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertPropertyEquals</name><argument_list>(<argument><expr><name>property</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * assert that a property equals a value; comparison is case sensitive.
     *
     * @param property property name
     * @param value expected value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>assertPropertyEquals</name><parameter_list>(<param><decl><type><name>String</name></type> <name>property</name></decl></param>, <param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>result</name> =<init> <expr><call><name><name>project</name>.<name>getProperty</name></name><argument_list>(<argument><expr><name>property</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"property " + <name>property</name></expr></argument>,<argument><expr><name>value</name></expr></argument>,<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * assert that a property equals "true".
     *
     * @param property property name
     */</comment>
    <function><type><specifier>public</specifier>  <name>void</name></type> <name>assertPropertySet</name><parameter_list>(<param><decl><type><name>String</name></type> <name>property</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertPropertyEquals</name><argument_list>(<argument><expr><name>property</name></expr></argument>, <argument><expr>"true"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * assert that a property is null.
     *
     * @param property property name
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>assertPropertyUnset</name><parameter_list>(<param><decl><type><name>String</name></type> <name>property</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>result</name> =<init> <expr><call><name><name>project</name>.<name>getProperty</name></name><argument_list>(<argument><expr><name>property</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>result</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Expected property " + <name>property</name>
                    + " to be unset, but it is set to the value: " + <name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * call a target, verify named property is "true".
     *
     * @param target build file target
     * @param property property name
     */</comment>
    <function><type><specifier>public</specifier>  <name>void</name></type> <name>expectPropertySet</name><parameter_list>(<param><decl><type><name>String</name></type> <name>target</name></decl></param>, <param><decl><type><name>String</name></type> <name>property</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectPropertySet</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>property</name></expr></argument>, <argument><expr>"true"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Call a target, verify property is null.
     *
     * @param target build file target
     * @param property property name
     */</comment>
    <function><type><specifier>public</specifier>  <name>void</name></type> <name>expectPropertyUnset</name><parameter_list>(<param><decl><type><name>String</name></type> <name>target</name></decl></param>, <param><decl><type><name>String</name></type> <name>property</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectPropertySet</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>property</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Retrieve a resource from the caller classloader to avoid
     * assuming a vm working directory. The resource path must be
     * relative to the package name or absolute from the root path.
     *
     * @param resource the resource to retrieve its url.
     * @throws junit.framework.AssertionFailedError if the resource is not found.
     */</comment>
    <function><type><specifier>public</specifier>  <name>URL</name></type> <name>getResource</name><parameter_list>(<param><decl><type><name>String</name></type> <name>resource</name></decl></param>)</parameter_list><block>{
        <decl_stmt><decl><type><name>URL</name></type> <name>url</name> =<init> <expr><call><name>getClass</name><argument_list>()</argument_list></call>.<call><name>getResource</name><argument_list>(<argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr>"Could not find resource :" + <name>resource</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>url</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * an output stream which saves stuff to our buffer.
     */</comment>
    <class><specifier>protected</specifier> <specifier>static</specifier> class <name>AntOutputStream</name> <super><extends>extends <name>java</name>.<name>io</name>.<name>OutputStream</name></extends></super> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>StringBuffer</name></type> <name>buffer</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>AntOutputStream</name><parameter_list>( <param><decl><type><name>StringBuffer</name></type> <name>buffer</name></decl></param> )</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>buffer</name></name> = <name>buffer</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<param><decl><type><name>int</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>buffer</name>.<name>append</name></name><argument_list>(<argument><expr>(<name>char</name>)<name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>

    <comment type="javadoc">/**
     * Our own personal build listener.
     */</comment>
    <class><specifier>private</specifier> class <name>AntTestListener</name> <super><implements>implements <name>BuildListener</name></implements></super> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>logLevel</name></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * Constructs a test listener which will ignore log events
         * above the given level.
         */</comment>
        <constructor><specifier>public</specifier> <name>AntTestListener</name><parameter_list>(<param><decl><type><name>int</name></type> <name>logLevel</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>logLevel</name></name> = <name>logLevel</name></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="javadoc">/**
         * Fired before any targets are started.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>buildStarted</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
        }</block></function>

        <comment type="javadoc">/**
         * Fired after the last target has finished. This event
         * will still be thrown if an error occurred during the build.
         *
         * @see BuildEvent#getException()
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>buildFinished</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
        }</block></function>

        <comment type="javadoc">/**
         * Fired when a target is started.
         *
         * @see BuildEvent#getTarget()
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>targetStarted</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
            <comment type="line">//System.out.println("targetStarted " + event.getTarget().getName());</comment>
        }</block></function>

        <comment type="javadoc">/**
         * Fired when a target has finished. This event will
         * still be thrown if an error occurred during the build.
         *
         * @see BuildEvent#getException()
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>targetFinished</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
            <comment type="line">//System.out.println("targetFinished " + event.getTarget().getName());</comment>
        }</block></function>

        <comment type="javadoc">/**
         * Fired when a task is started.
         *
         * @see BuildEvent#getTask()
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>taskStarted</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
            <comment type="line">//System.out.println("taskStarted " + event.getTask().getTaskName());</comment>
        }</block></function>

        <comment type="javadoc">/**
         * Fired when a task has finished. This event will still
         * be throw if an error occurred during the build.
         *
         * @see BuildEvent#getException()
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>taskFinished</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
            <comment type="line">//System.out.println("taskFinished " + event.getTask().getTaskName());</comment>
        }</block></function>

        <comment type="javadoc">/**
         * Fired whenever a message is logged.
         *
         * @see BuildEvent#getMessage()
         * @see BuildEvent#getPriority()
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>messageLogged</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
            <if>if <condition>(<expr><call><name><name>event</name>.<name>getPriority</name></name><argument_list>()</argument_list></call> &gt; <name>logLevel</name></expr>)</condition><then> <block>{
                <comment type="line">// ignore event</comment>
                <return>return;</return>
            }</block></then></if>

            <if>if <condition>(<expr><call><name><name>event</name>.<name>getPriority</name></name><argument_list>()</argument_list></call> == <name><name>Project</name>.<name>MSG_INFO</name></name> ||
                <call><name><name>event</name>.<name>getPriority</name></name><argument_list>()</argument_list></call> == <name><name>Project</name>.<name>MSG_WARN</name></name> ||
                <call><name><name>event</name>.<name>getPriority</name></name><argument_list>()</argument_list></call> == <name><name>Project</name>.<name>MSG_ERR</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>logBuffer</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>event</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>fullLogBuffer</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>event</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>

}</block></class>
</unit>
