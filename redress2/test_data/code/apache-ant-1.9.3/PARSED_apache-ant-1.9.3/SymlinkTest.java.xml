<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\taskdefs\optional\unix\SymlinkTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<comment type="block">/*
 * Since the initial version of this file was deveolped on the clock on
 * an NSF grant I should say the following boilerplate:
 *
 * This material is based upon work supported by the National Science
 * Foundaton under Grant No. EIA-0196404. Any opinions, findings, and
 * conclusions or recommendations expressed in this material are those
 * of the author and do not necessarily reflect the views of the
 * National Science Foundation.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>unix</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>condition</name>.<name>Os</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildFileTest</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>SymbolicLinkUtils</name></name>;</import>

<comment type="javadoc">/**
 * Test cases for the Symlink task. Link creation, link deletion, recording
 * of links in multiple directories, and restoration of links recorded are
 * all tested. A separate test for the utility method Symlink.deleteSymlink
 * is not included because action="delete" only prints a message and calls
 * Symlink.deleteSymlink, making a separate test redundant.
 *
 */</comment>

<class><specifier>public</specifier> class <name>SymlinkTest</name> <super><extends>extends <name>BuildFileTest</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>Project</name></type> <name>p</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>supportsSymlinks</name> =<init> <expr><call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr>"unix"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>SymlinkTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>supportsSymlinks</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr>"src/etc/testcases/taskdefs/optional/unix/symlink.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"setup"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>testSingle</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>supportsSymlinks</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"test-single"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>p</name> = <call><name>getProject</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr>"Failed to create file"</expr></argument>,
                          <argument><expr><call><name><name>p</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"test.single.file.created"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr>"Failed to create link"</expr></argument>,
                          <argument><expr><call><name><name>p</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"test.single.link.created"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testDelete</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>supportsSymlinks</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"test-delete"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>p</name> = <call><name>getProject</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>linkDeleted</name> =<init> <expr><call><name><name>p</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"test.delete.link.still.there"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr>"Actual file deleted by symlink"</expr></argument>,
                          <argument><expr><call><name><name>p</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"test.delete.file.still.there"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>linkDeleted</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><name>linkDeleted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testRecord</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>supportsSymlinks</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"test-record"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>p</name> = <call><name>getProject</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr>"Failed to create dir1"</expr></argument>,
                          <argument><expr><call><name><name>p</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"test.record.dir1.created"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr>"Failed to create dir2"</expr></argument>,
                          <argument><expr><call><name><name>p</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"test.record.dir2.created"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr>"Failed to create file1"</expr></argument>,
                          <argument><expr><call><name><name>p</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"test.record.file1.created"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr>"Failed to create file2"</expr></argument>,
                          <argument><expr><call><name><name>p</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"test.record.file2.created"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr>"Failed to create fileA"</expr></argument>,
                          <argument><expr><call><name><name>p</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"test.record.fileA.created"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr>"Failed to create fileB"</expr></argument>,
                          <argument><expr><call><name><name>p</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"test.record.fileB.created"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr>"Failed to create fileC"</expr></argument>,
                          <argument><expr><call><name><name>p</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"test.record.fileC.created"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr>"Failed to create link1"</expr></argument>,
                          <argument><expr><call><name><name>p</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"test.record.link1.created"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr>"Failed to create link2"</expr></argument>,
                          <argument><expr><call><name><name>p</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"test.record.link2.created"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr>"Failed to create link3"</expr></argument>,
                          <argument><expr><call><name><name>p</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"test.record.link3.created"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr>"Failed to create dirlink"</expr></argument>,
                          <argument><expr><call><name><name>p</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"test.record.dirlink.created"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr>"Failed to create dirlink2"</expr></argument>,
                          <argument><expr><call><name><name>p</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"test.record.dirlink2.created"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr>"Couldn't record links in dir1"</expr></argument>,
                          <argument><expr><call><name><name>p</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"test.record.dir1.recorded"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr>"Couldn't record links in dir2"</expr></argument>,
                          <argument><expr><call><name><name>p</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"test.record.dir2.recorded"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>String</name></type> <name>dir3rec</name> =<init> <expr><call><name><name>p</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"test.record.dir3.recorded"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>dir3rec</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><name>dir3rec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

        }</block></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testRecreate</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>supportsSymlinks</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"test-recreate"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>p</name> = <call><name>getProject</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>link1Rem</name> =<init> <expr><call><name><name>p</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"test.recreate.link1.not.removed"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>link2Rem</name> =<init> <expr><call><name><name>p</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"test.recreate.link2.not.removed"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>link3Rem</name> =<init> <expr><call><name><name>p</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"test.recreate.link3.not.removed"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>dirlinkRem</name> =<init> <expr><call><name><name>p</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"test.recreate.dirlink.not.removed"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>link1Rem</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><name>link1Rem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name>link2Rem</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><name>link2Rem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name>link3Rem</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><name>link3Rem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name>dirlinkRem</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><name>dirlinkRem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr>"Failed to recreate link1"</expr></argument>,
                          <argument><expr><call><name><name>p</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"test.recreate.link1.recreated"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr>"Failed to recreate link2"</expr></argument>,
                          <argument><expr><call><name><name>p</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"test.recreate.link2.recreated"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr>"Failed to recreate link3"</expr></argument>,
                          <argument><expr><call><name><name>p</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"test.recreate.link3.recreated"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr>"Failed to recreate dirlink"</expr></argument>,
                          <argument><expr><call><name><name>p</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"test.recreate.dirlink.recreated"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <decl_stmt><decl><type><name>String</name></type> <name>doubleRecreate</name> =<init> <expr><call><name><name>p</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"test.recreate.dirlink2.recreated.twice"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>doubleRecreate</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr><name>doubleRecreate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr>"Failed to alter dirlink3"</expr></argument>,
                          <argument><expr><call><name><name>p</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"test.recreate.dirlink3.was.altered"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        }</block></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testSymbolicLinkUtilsMethods</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>supportsSymlinks</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"test-fileutils"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>SymbolicLinkUtils</name></type> <name>su</name> =<init> <expr><call><name><name>SymbolicLinkUtils</name>.<name>getSymbolicLinkUtils</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name><name>java</name>.<name>io</name>.<name>File</name></name></type> <name>f</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>resolveFile</name><argument_list>(<argument><expr>"test-working/file1"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>f</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>f</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>f</name>.<name>isFile</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>su</name>.<name>isSymbolicLink</name></name><argument_list>(<argument><expr><call><name><name>f</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>su</name>.<name>isSymbolicLink</name></name><argument_list>(<argument><expr><call><name><name>f</name>.<name>getParentFile</name></name><argument_list>()</argument_list></call></expr></argument>,
                                          <argument><expr><call><name><name>f</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>su</name>.<name>isDanglingSymbolicLink</name></name><argument_list>(<argument><expr><call><name><name>f</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>su</name>.<name>isDanglingSymbolicLink</name></name><argument_list>(<argument><expr><call><name><name>f</name>.<name>getParentFile</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                  <argument><expr><call><name><name>f</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>f</name> = <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>resolveFile</name><argument_list>(<argument><expr>"test-working/dir1"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>f</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>f</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>f</name>.<name>isFile</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>su</name>.<name>isSymbolicLink</name></name><argument_list>(<argument><expr><call><name><name>f</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>su</name>.<name>isSymbolicLink</name></name><argument_list>(<argument><expr><call><name><name>f</name>.<name>getParentFile</name></name><argument_list>()</argument_list></call></expr></argument>,
                                          <argument><expr><call><name><name>f</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>su</name>.<name>isDanglingSymbolicLink</name></name><argument_list>(<argument><expr><call><name><name>f</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>su</name>.<name>isDanglingSymbolicLink</name></name><argument_list>(<argument><expr><call><name><name>f</name>.<name>getParentFile</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                  <argument><expr><call><name><name>f</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>f</name> = <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>resolveFile</name><argument_list>(<argument><expr>"test-working/file2"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>f</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>f</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>f</name>.<name>isFile</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>su</name>.<name>isSymbolicLink</name></name><argument_list>(<argument><expr><call><name><name>f</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>su</name>.<name>isSymbolicLink</name></name><argument_list>(<argument><expr><call><name><name>f</name>.<name>getParentFile</name></name><argument_list>()</argument_list></call></expr></argument>,
                                          <argument><expr><call><name><name>f</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>su</name>.<name>isDanglingSymbolicLink</name></name><argument_list>(<argument><expr><call><name><name>f</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>su</name>.<name>isDanglingSymbolicLink</name></name><argument_list>(<argument><expr><call><name><name>f</name>.<name>getParentFile</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                  <argument><expr><call><name><name>f</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>f</name> = <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>resolveFile</name><argument_list>(<argument><expr>"test-working/dir2"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>f</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>f</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>f</name>.<name>isFile</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>su</name>.<name>isSymbolicLink</name></name><argument_list>(<argument><expr><call><name><name>f</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>su</name>.<name>isSymbolicLink</name></name><argument_list>(<argument><expr><call><name><name>f</name>.<name>getParentFile</name></name><argument_list>()</argument_list></call></expr></argument>,
                                          <argument><expr><call><name><name>f</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>su</name>.<name>isDanglingSymbolicLink</name></name><argument_list>(<argument><expr><call><name><name>f</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>su</name>.<name>isDanglingSymbolicLink</name></name><argument_list>(<argument><expr><call><name><name>f</name>.<name>getParentFile</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                  <argument><expr><call><name><name>f</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


            <expr_stmt><expr><name>f</name> = <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>resolveFile</name><argument_list>(<argument><expr>"test-working/file.there"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>f</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>f</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>f</name>.<name>isFile</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>su</name>.<name>isSymbolicLink</name></name><argument_list>(<argument><expr><call><name><name>f</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>su</name>.<name>isSymbolicLink</name></name><argument_list>(<argument><expr><call><name><name>f</name>.<name>getParentFile</name></name><argument_list>()</argument_list></call></expr></argument>,
                                         <argument><expr><call><name><name>f</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>su</name>.<name>isDanglingSymbolicLink</name></name><argument_list>(<argument><expr><call><name><name>f</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>su</name>.<name>isDanglingSymbolicLink</name></name><argument_list>(<argument><expr><call><name><name>f</name>.<name>getParentFile</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                  <argument><expr><call><name><name>f</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>f</name> = <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>resolveFile</name><argument_list>(<argument><expr>"test-working/dir.there"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>f</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>f</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>f</name>.<name>isFile</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>su</name>.<name>isSymbolicLink</name></name><argument_list>(<argument><expr><call><name><name>f</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>su</name>.<name>isSymbolicLink</name></name><argument_list>(<argument><expr><call><name><name>f</name>.<name>getParentFile</name></name><argument_list>()</argument_list></call></expr></argument>,
                                         <argument><expr><call><name><name>f</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>su</name>.<name>isDanglingSymbolicLink</name></name><argument_list>(<argument><expr><call><name><name>f</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>su</name>.<name>isDanglingSymbolicLink</name></name><argument_list>(<argument><expr><call><name><name>f</name>.<name>getParentFile</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                  <argument><expr><call><name><name>f</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// it is not possible to find out that symbolic links pointing</comment>
            <comment type="line">// to inexistent files or directories are symbolic links</comment>
            <comment type="line">// it used to be possible to detect this on Mac</comment>
            <comment type="line">// this is not true under Snow Leopard and JDK 1.5</comment>
            <comment type="line">// Removing special handling of MacOS until someone shouts</comment>
            <comment type="line">// Antoine</comment>
            <expr_stmt><expr><name>f</name> = <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>resolveFile</name><argument_list>(<argument><expr>"test-working/file.notthere"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>f</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>f</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>f</name>.<name>isFile</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>su</name>.<name>isSymbolicLink</name></name><argument_list>(<argument><expr><call><name><name>f</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> == false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>su</name>.<name>isSymbolicLink</name></name><argument_list>(<argument><expr><call><name><name>f</name>.<name>getParentFile</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>f</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> == false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>su</name>.<name>isDanglingSymbolicLink</name></name><argument_list>(<argument><expr><call><name><name>f</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>su</name>.<name>isDanglingSymbolicLink</name></name><argument_list>(<argument><expr><call><name><name>f</name>.<name>getParentFile</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                 <argument><expr><call><name><name>f</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>f</name> = <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>resolveFile</name><argument_list>(<argument><expr>"test-working/dir.notthere"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>f</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>f</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>f</name>.<name>isFile</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>su</name>.<name>isSymbolicLink</name></name><argument_list>(<argument><expr><call><name><name>f</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> == false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>su</name>.<name>isSymbolicLink</name></name><argument_list>(<argument><expr><call><name><name>f</name>.<name>getParentFile</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>f</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> == false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>su</name>.<name>isDanglingSymbolicLink</name></name><argument_list>(<argument><expr><call><name><name>f</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>su</name>.<name>isDanglingSymbolicLink</name></name><argument_list>(<argument><expr><call><name><name>f</name>.<name>getParentFile</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                 <argument><expr><call><name><name>f</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        }</block></then></if>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>supportsSymlinks</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"teardown"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

}</block></class>
</unit>
