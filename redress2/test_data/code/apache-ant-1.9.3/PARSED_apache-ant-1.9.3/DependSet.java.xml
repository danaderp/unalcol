<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\DependSet.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Date</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Path</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>FileSet</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>FileList</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Resource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>TimeComparison</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>ResourceCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>Union</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>Restrict</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>Resources</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>selectors</name>.<name>Not</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>selectors</name>.<name>Exists</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>selectors</name>.<name>ResourceSelector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>comparators</name>.<name>Reverse</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>comparators</name>.<name>ResourceComparator</name></name>;</import>

<comment type="javadoc">/**
 * Examines and removes out of date target files.  If any of the target files
 * are out of date with respect to any of the source files, all target
 * files are removed.  This is useful where dependencies cannot be
 * computed (for example, dynamically interpreted parameters or files
 * that need to stay in synch but are not directly linked) or where
 * the ant task in question could compute them but does not (for
 * example, the linked DTD for an XML file using the XSLT task).
 *
 * nested arguments:
 * &lt;ul&gt;
 * &lt;li&gt;sources        (resource union describing the source resources to examine)
 * &lt;li&gt;srcfileset     (fileset describing the source files to examine)
 * &lt;li&gt;srcfilelist    (filelist describing the source files to examine)
 * &lt;li&gt;targets        (path describing the target files to examine)
 * &lt;li&gt;targetfileset  (fileset describing the target files to examine)
 * &lt;li&gt;targetfilelist (filelist describing the target files to examine)
 * &lt;/ul&gt;
 * At least one of both source and target entities is required.
 * &lt;p&gt;
 * This task will examine each of the sources against each of the target files. If
 * any target files are out of date with respect to any of the sources, all targets
 * are removed. If any sources or targets do not exist, all targets are removed.
 * Hint: If missing files should be ignored, specify them as include patterns
 * in filesets, rather than using filelists.
 * &lt;/p&gt;&lt;p&gt;
 * This task attempts to optimize speed of dependency checking
 * by comparing only the dates of the oldest target file and the newest source.
 * &lt;/p&gt;&lt;p&gt;
 * Example uses:
 * &lt;ul&gt;&lt;li&gt;
 * Record the fact that an XML file must be up to date with respect to its XSD
 * (Schema file), even though the XML file itself includes no reference to its XSD.
 * &lt;/li&gt;&lt;li&gt;
 * Record the fact that an XSL stylesheet includes other sub-stylesheets
 * &lt;/li&gt;&lt;li&gt;
 * Record the fact that java files must be recompiled if the ant build file changes
 * &lt;/li&gt;&lt;/ul&gt;
 *
 * @ant.task category="filesystem"
 * @since Ant 1.4
 */</comment>
<class><specifier>public</specifier> class <name>DependSet</name> <super><extends>extends <name>MatchingTask</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ResourceSelector</name></type> <name>NOT_EXISTS</name> =<init> <expr>new <call><name>Not</name><argument_list>(<argument><expr>new <call><name>Exists</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ResourceComparator</name></type> <name>DATE</name>
        =<init> <expr>new <call><name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>comparators</name>.<name>Date</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ResourceComparator</name></type> <name>REVERSE_DATE</name> =<init> <expr>new <call><name>Reverse</name><argument_list>(<argument><expr><name>DATE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <class><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>NonExistent</name> <super><extends>extends <name>Restrict</name></extends></super> <block>{
        <constructor><specifier>private</specifier> <name>NonExistent</name><parameter_list>(<param><decl><type><name>ResourceCollection</name></type> <name>rc</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>super</name>.<name>add</name></name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>super</name>.<name>add</name></name><argument_list>(<argument><expr><name>NOT_EXISTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>
    }</block></class>

    <class><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>HideMissingBasedir</name>
        <super><implements>implements <name>ResourceCollection</name></implements></super> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>FileSet</name></type> <name>fs</name></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>HideMissingBasedir</name><parameter_list>(<param><decl><type><name>FileSet</name></type> <name>fs</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>fs</name></name> = <name>fs</name></expr>;</expr_stmt>
        }</block></constructor>
        <function><type><specifier>public</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name>Resource</name></argument>&gt;</argument_list></name></type> <name>iterator</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><call><name>basedirExists</name><argument_list>()</argument_list></call> ? <call><name><name>fs</name>.<name>iterator</name></name><argument_list>()</argument_list></call> : <name><name>Resources</name>.<name>EMPTY_ITERATOR</name></name></expr>;</return>
        }</block></function>
        <function><type><specifier>public</specifier> <name>int</name></type> <name>size</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><call><name>basedirExists</name><argument_list>()</argument_list></call> ? <call><name><name>fs</name>.<name>size</name></name><argument_list>()</argument_list></call> : 0</expr>;</return>
        }</block></function>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isFilesystemOnly</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></function>
        <function><type><specifier>private</specifier> <name>boolean</name></type> <name>basedirExists</name><parameter_list>()</parameter_list> <block>{
            <decl_stmt><decl><type><name>File</name></type> <name>basedir</name> =<init> <expr><call><name><name>fs</name>.<name>getDir</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">//trick to evoke "basedir not set" if null:</comment>
            <return>return <expr><name>basedir</name> == <name>null</name> || <call><name><name>basedir</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Union</name></type> <name>sources</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Path</name></type> <name>targets</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>verbose</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Create a nested sources element.
     * @return a Union instance.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>Union</name></type> <name>createSources</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>sources</name> = (<name>sources</name> == <name>null</name>) ? new <call><name>Union</name><argument_list>()</argument_list></call> : <name>sources</name></expr>;</expr_stmt>
        <return>return <expr><name>sources</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Add a set of source files.
     * @param fs the FileSet to add.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addSrcfileset</name><parameter_list>(<param><decl><type><name>FileSet</name></type> <name>fs</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>createSources</name><argument_list>()</argument_list></call>.<call><name>add</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a list of source files.
     * @param fl the FileList to add.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addSrcfilelist</name><parameter_list>(<param><decl><type><name>FileList</name></type> <name>fl</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>createSources</name><argument_list>()</argument_list></call>.<call><name>add</name><argument_list>(<argument><expr><name>fl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Create a nested targets element.
     * @return a Union instance.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>Path</name></type> <name>createTargets</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>targets</name> = (<name>targets</name> == <name>null</name>) ? new <call><name>Path</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> : <name>targets</name></expr>;</expr_stmt>
        <return>return <expr><name>targets</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Add a set of target files.
     * @param fs the FileSet to add.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addTargetfileset</name><parameter_list>(<param><decl><type><name>FileSet</name></type> <name>fs</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>createTargets</name><argument_list>()</argument_list></call>.<call><name>add</name><argument_list>(<argument><expr>new <call><name>HideMissingBasedir</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a list of target files.
     * @param fl the FileList to add.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addTargetfilelist</name><parameter_list>(<param><decl><type><name>FileList</name></type> <name>fl</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>createTargets</name><argument_list>()</argument_list></call>.<call><name>add</name><argument_list>(<argument><expr><name>fl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * In verbose mode missing targets and sources as well as the
     * modification times of the newest source and latest target will
     * be logged as info.
     *
     * &lt;p&gt;All deleted files will be logged as well.&lt;/p&gt;
     *
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setVerbose</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>verbose</name> = <name>b</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Execute the task.
     * @throws BuildException if errors occur.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>sources</name> == <name>null</name></expr>)</condition><then> <block>{
          <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
              <argument><expr>"At least one set of source resources must be specified"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>targets</name> == <name>null</name></expr>)</condition><then> <block>{
          <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
              <argument><expr>"At least one set of target files must be specified"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <comment type="line">//no sources = nothing to compare; no targets = nothing to delete:</comment>
        <if>if <condition>(<expr><call><name><name>sources</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 0 &amp;&amp; <call><name><name>targets</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 0 &amp;&amp; !<call><name>uptodate</name><argument_list>(<argument><expr><name>sources</name></expr></argument>, <argument><expr><name>targets</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
           <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Deleting all target files."</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <if>if <condition>(<expr><name>verbose</name></expr>)</condition><then> <block>{
               <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>t</name> =<init> <expr><call><name><name>targets</name>.<name>list</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
               <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>t</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                   <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Deleting " + <name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               }</block></for>
           }</block></then></if>
           <decl_stmt><decl><type><name>Delete</name></type> <name>delete</name> =<init> <expr>new <call><name>Delete</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
           <expr_stmt><expr><call><name><name>delete</name>.<name>bindToOwner</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><call><name><name>delete</name>.<name>add</name></name><argument_list>(<argument><expr><name>targets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><call><name><name>delete</name>.<name>perform</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>uptodate</name><parameter_list>(<param><decl><type><name>ResourceCollection</name></type> <name>src</name></decl></param>, <param><decl><type><name>ResourceCollection</name></type> <name>target</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>selectors</name>.<name>Date</name></name></type> <name>datesel</name>
            =<init> <expr>new <call><name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name>.<name>selectors</name>.<name>Date</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>datesel</name>.<name>setMillis</name></name><argument_list>(<argument><expr><call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>datesel</name>.<name>setWhen</name></name><argument_list>(<argument><expr><name><name>TimeComparison</name>.<name>AFTER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// don't whine because a file has changed during the last</comment>
        <comment type="line">// second (or whathever our current granularity may be)</comment>
        <expr_stmt><expr><call><name><name>datesel</name>.<name>setGranularity</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>logFuture</name><argument_list>(<argument><expr><name>targets</name></expr></argument>, <argument><expr><name>datesel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>NonExistent</name></type> <name>missingTargets</name> =<init> <expr>new <call><name>NonExistent</name><argument_list>(<argument><expr><name>targets</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>neTargets</name> =<init> <expr><call><name><name>missingTargets</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>neTargets</name> &gt; 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>neTargets</name> + " nonexistent targets"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>logMissing</name><argument_list>(<argument><expr><name>missingTargets</name></expr></argument>, <argument><expr>"target"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>Resource</name></type> <name>oldestTarget</name> =<init> <expr><call><name>getOldest</name><argument_list>(<argument><expr><name>targets</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>logWithModificationTime</name><argument_list>(<argument><expr><name>oldestTarget</name></expr></argument>, <argument><expr>"oldest target file"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>logFuture</name><argument_list>(<argument><expr><name>sources</name></expr></argument>, <argument><expr><name>datesel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>NonExistent</name></type> <name>missingSources</name> =<init> <expr>new <call><name>NonExistent</name><argument_list>(<argument><expr><name>sources</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>neSources</name> =<init> <expr><call><name><name>missingSources</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>neSources</name> &gt; 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>neSources</name> + " nonexistent sources"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>logMissing</name><argument_list>(<argument><expr><name>missingSources</name></expr></argument>, <argument><expr>"source"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>Resource</name></type> <name>newestSource</name> =<init> <expr>(<name>Resource</name>) <call><name>getNewest</name><argument_list>(<argument><expr><name>sources</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>logWithModificationTime</name><argument_list>(<argument><expr><name>newestSource</name></expr></argument>, <argument><expr>"newest source"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>oldestTarget</name>.<name>getLastModified</name></name><argument_list>()</argument_list></call> &gt;= <call><name><name>newestSource</name>.<name>getLastModified</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>logFuture</name><parameter_list>(<param><decl><type><name>ResourceCollection</name></type> <name>rc</name></decl></param>, <param><decl><type><name>ResourceSelector</name></type> <name>rsel</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Restrict</name></type> <name>r</name> =<init> <expr>new <call><name>Restrict</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>r</name>.<name>add</name></name><argument_list>(<argument><expr><name>rsel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>r</name>.<name>add</name></name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>Resource</name></type> <name>res</name> :<range> <expr><name>r</name></expr></range></decl></init>) <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Warning: " + <name>res</name> + " modified in the future."</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><type><specifier>private</specifier> <name>Resource</name></type> <name>getXest</name><parameter_list>(<param><decl><type><name>ResourceCollection</name></type> <name>rc</name></decl></param>, <param><decl><type><name>ResourceComparator</name></type> <name>c</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>Iterator</name><argument_list>&lt;<argument><name>Resource</name></argument>&gt;</argument_list></name></type> <name>i</name> =<init> <expr><call><name><name>rc</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>i</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>

        }</block></then></if>
        <decl_stmt><decl><type><name>Resource</name></type> <name>xest</name> =<init> <expr><call><name><name>i</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>i</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>Resource</name></type> <name>next</name> =<init> <expr><call><name><name>i</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>c</name>.<name>compare</name></name><argument_list>(<argument><expr><name>xest</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>xest</name> = <name>next</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></while>
        <return>return <expr><name>xest</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>Resource</name></type> <name>getOldest</name><parameter_list>(<param><decl><type><name>ResourceCollection</name></type> <name>rc</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>getXest</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>REVERSE_DATE</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>Resource</name></type> <name>getNewest</name><parameter_list>(<param><decl><type><name>ResourceCollection</name></type> <name>rc</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>getXest</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>DATE</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>logWithModificationTime</name><parameter_list>(<param><decl><type><name>Resource</name></type> <name>r</name></decl></param>, <param><decl><type><name>String</name></type> <name>what</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><call><name><name>r</name>.<name>toLongString</name></name><argument_list>()</argument_list></call> + " is " + <name>what</name> + ", modified at "
            + new <call><name>Date</name><argument_list>(<argument><expr><call><name><name>r</name>.<name>getLastModified</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>verbose</name> ? <name><name>Project</name>.<name>MSG_INFO</name></name> : <name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>logMissing</name><parameter_list>(<param><decl><type><name>ResourceCollection</name></type> <name>missing</name></decl></param>, <param><decl><type><name>String</name></type> <name>what</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>verbose</name></expr>)</condition><then> <block>{
            <for>for (<init><decl><type><name>Resource</name></type> <name>r</name> :<range> <expr><name>missing</name></expr></range></decl></init>) <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Expected " + <name>what</name> + " " + <call><name><name>r</name>.<name>toLongString</name></name><argument_list>()</argument_list></call>
                    + " is missing."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></then></if>
    }</block></function>
}</block></class>
</unit>
