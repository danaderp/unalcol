<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\types\selectors\TokenizedPath.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>SymbolicLinkUtils</name></name>;</import>

<comment type="javadoc">/**
 * Container for a path that has been split into its components.
 * @since 1.8.0
 */</comment>
<class><specifier>public</specifier> class <name>TokenizedPath</name> <block>{

    <comment type="javadoc">/**
     * Instance that holds no tokens at all.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TokenizedPath</name></type> <name>EMPTY_PATH</name> =<init>
        <expr>new <call><name>TokenizedPath</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr>new <name><name>String</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Helper. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>FileUtils</name></type> <name>FILE_UTILS</name> =<init> <expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** Helper. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>SymbolicLinkUtils</name></type> <name>SYMLINK_UTILS</name> =<init>
        <expr><call><name><name>SymbolicLinkUtils</name>.<name>getSymbolicLinkUtils</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** iterations for case-sensitive scanning. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>boolean</name><index>[]</index></type> <name>CS_SCAN_ONLY</name> =<init> <expr>new <name><name>boolean</name><index>[]</index></name> <block>{<expr>true</expr>}</block></expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/** iterations for non-case-sensitive scanning. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>boolean</name><index>[]</index></type> <name>CS_THEN_NON_CS</name> =<init> <expr>new <name><name>boolean</name><index>[]</index></name> <block>{<expr>true</expr>, <expr>false</expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>path</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name><index>[]</index></type> <name>tokenizedPath</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
    * Initialize the TokenizedPath by parsing it. 
    * @param path The path to tokenize. Must not be
    *                &lt;code&gt;null&lt;/code&gt;.
    */</comment>
    <constructor><specifier>public</specifier> <name>TokenizedPath</name><parameter_list>(<param><decl><type><name>String</name></type> <name>path</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><call><name><name>SelectorUtils</name>.<name>tokenizePathAsArray</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new path as a child of another path.
     *
     * @param parent the parent path
     * @param child the child, must not contain the file separator
     */</comment>
    <constructor><specifier>public</specifier> <name>TokenizedPath</name><parameter_list>(<param><decl><type><name>TokenizedPath</name></type> <name>parent</name></decl></param>, <param><decl><type><name>String</name></type> <name>child</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>parent</name>.<name>path</name>.<name>length</name></name><argument_list>()</argument_list></call> &gt; 0
            &amp;&amp; <call><name><name>parent</name>.<name>path</name>.<name>charAt</name></name><argument_list>(<argument><expr><call><name><name>parent</name>.<name>path</name>.<name>length</name></name><argument_list>()</argument_list></call> - 1</expr></argument>)</argument_list></call>
               != <name><name>File</name>.<name>separatorChar</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>path</name> = <name><name>parent</name>.<name>path</name></name> + <name><name>File</name>.<name>separatorChar</name></name> + <name>child</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>path</name> = <name><name>parent</name>.<name>path</name></name> + <name>child</name></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>tokenizedPath</name> = new <name><name>String</name><index>[<expr><name><name>parent</name>.<name>tokenizedPath</name>.<name>length</name></name> + 1</expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name><name>parent</name>.<name>tokenizedPath</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>tokenizedPath</name></expr></argument>, <argument><expr>0</expr></argument>,
                         <argument><expr><name><name>parent</name>.<name>tokenizedPath</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>tokenizedPath</name><index>[<expr><name><name>parent</name>.<name>tokenizedPath</name>.<name>length</name></name></expr>]</index></name> = <name>child</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="block">/* package */</comment> <constructor><name>TokenizedPath</name><parameter_list>(<param><decl><type><name>String</name></type> <name>path</name></decl></param>, <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>tokens</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>path</name></name> = <name>path</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>tokenizedPath</name></name> = <name>tokens</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * @return The original path String
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>path</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * The depth (or length) of a path.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>depth</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>tokenizedPath</name>.<name>length</name></name></expr>;</return>
    }</block></function>

    <comment type="block">/* package */</comment> <function><type><name>String</name><index>[]</index></type> <name>getTokens</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>tokenizedPath</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * From &lt;code&gt;base&lt;/code&gt; traverse the filesystem in order to find
     * a file that matches the given name.
     *
     * @param base base File (dir).
     * @param cs whether to scan case-sensitively.
     * @return File object that points to the file in question or null.
     */</comment>
    <function><type><specifier>public</specifier> <name>File</name></type> <name>findFile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>base</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>cs</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>tokens</name> =<init> <expr><name>tokenizedPath</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>FileUtils</name>.<name>isAbsolutePath</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>base</name> == <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>s</name> =<init> <expr><call><name><name>FILE_UTILS</name>.<name>dissect</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>base</name> = new <call><name>File</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>tokens</name> = <call><name><name>SelectorUtils</name>.<name>tokenizePathAsArray</name></name><argument_list>(<argument><expr><name><name>s</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <decl_stmt><decl><type><name>File</name></type> <name>f</name> =<init> <expr><call><name><name>FILE_UTILS</name>.<name>normalize</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>s</name> =<init> <expr><call><name><name>FILE_UTILS</name>.<name>removeLeadingPath</name></name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>s</name>.<name>equals</name></name><argument_list>(<argument><expr><call><name><name>f</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <comment type="line">//removing base from path yields no change; path</comment>
                    <comment type="line">//not child of base</comment>
                    <return>return <expr><name>null</name></expr>;</return>
                }</block></then></if>
                <expr_stmt><expr><name>tokens</name> = <call><name><name>SelectorUtils</name>.<name>tokenizePathAsArray</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if>
        <return>return <expr><call><name>findFile</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>cs</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Do we have to traverse a symlink when trying to reach path from
     * basedir?
     * @param base base File (dir).
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSymlink</name><parameter_list>(<param><decl><type><name>File</name></type> <name>base</name></decl></param>)</parameter_list> <block>{
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>tokenizedPath</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <try>try <block>{
                <if>if <condition>(<expr>(<name>base</name> != <name>null</name>
                     &amp;&amp; <call><name><name>SYMLINK_UTILS</name>.<name>isSymbolicLink</name></name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name><name>tokenizedPath</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call>)
                    ||
                    (<name>base</name> == <name>null</name>
                     &amp;&amp; <call><name><name>SYMLINK_UTILS</name>.<name>isSymbolicLink</name></name><argument_list>(<argument><expr><name><name>tokenizedPath</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call>)</expr>
                    )</condition><then> <block>{
                    <return>return <expr>true</expr>;</return>
                }</block></then></if>
                <expr_stmt><expr><name>base</name> = new <call><name>File</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name><name>tokenizedPath</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name><name>java</name>.<name>io</name>.<name>IOException</name></name></type> <name>ioe</name></decl></param>) <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>msg</name> =<init> <expr>"IOException caught while checking "
                    + "for links, couldn't get canonical path!"</expr></init></decl>;</decl_stmt>
                <comment type="line">// will be caught and redirected to Ant's logging system</comment>
                <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></for>
        <return>return <expr>false</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * true if the original paths are equal.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>o</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name>o</name> <name>instanceof</name> <name>TokenizedPath</name>
            &amp;&amp; <call><name><name>path</name>.<name>equals</name></name><argument_list>(<argument><expr>((<name>TokenizedPath</name>) <name>o</name>).<name>path</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>path</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * From &lt;code&gt;base&lt;/code&gt; traverse the filesystem in order to find
     * a file that matches the given stack of names.
     *
     * @param base base File (dir) - must not be null.
     * @param pathElements array of path elements (dirs...file).
     * @param cs whether to scan case-sensitively.
     * @return File object that points to the file in question or null.
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>File</name></type> <name>findFile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>base</name></decl></param>, <param><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>pathElements</name></decl></param>,
                                 <param><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>cs</name></decl></param>)</parameter_list> <block>{
        <for>for (<init><decl><type><name>int</name></type> <name>current</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>current</name> &lt; <name><name>pathElements</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>current</name>++</expr></incr>) <block>{
            <if>if <condition>(<expr>!<call><name><name>base</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><name>null</name></expr>;</return>
            }</block></then></if>
            <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>files</name> =<init> <expr><call><name><name>base</name>.<name>list</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>files</name> == <name>null</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"IO error scanning directory "
                                         + <call><name><name>base</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <decl_stmt><decl><type><name>boolean</name></type> <name>found</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name><index>[]</index></type> <name>matchCase</name> =<init> <expr><name>cs</name> ? <name>CS_SCAN_ONLY</name> : <name>CS_THEN_NON_CS</name></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr>!<name>found</name> &amp;&amp; <name>i</name> &lt; <name><name>matchCase</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <for>for (<init><decl><type><name>int</name></type> <name>j</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr>!<name>found</name> &amp;&amp; <name>j</name> &lt; <name><name>files</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
                    <if>if <condition>(<expr><name><name>matchCase</name><index>[<expr><name>i</name></expr>]</index></name>
                        ? <name><name>files</name><index>[<expr><name>j</name></expr>]</index></name>.<call><name>equals</name><argument_list>(<argument><expr><name><name>pathElements</name><index>[<expr><name>current</name></expr>]</index></name></expr></argument>)</argument_list></call>
                        : <name><name>files</name><index>[<expr><name>j</name></expr>]</index></name>.<call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><name><name>pathElements</name><index>[<expr><name>current</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>base</name> = new <call><name>File</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name><name>files</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>found</name> = true</expr>;</expr_stmt>
                    }</block></then></if>
                }</block></for>
            }</block></for>
            <if>if <condition>(<expr>!<name>found</name></expr>)</condition><then> <block>{
                <return>return <expr><name>null</name></expr>;</return>
            }</block></then></if>
        }</block></for>
        <return>return <expr><name><name>pathElements</name>.<name>length</name></name> == 0 &amp;&amp; !<call><name><name>base</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call> ? <name>null</name> : <name>base</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Creates a TokenizedPattern from the same tokens that make up
     * this path.
     */</comment>
    <function><type><specifier>public</specifier> <name>TokenizedPattern</name></type> <name>toPattern</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>new <call><name>TokenizedPattern</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>tokenizedPath</name></expr></argument>)</argument_list></call></expr>;</return> 
    }</block></function>

}</block></class>
</unit>
