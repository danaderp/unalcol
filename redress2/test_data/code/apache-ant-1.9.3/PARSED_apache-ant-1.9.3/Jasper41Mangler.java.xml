<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\jsp\Jasper41Mangler.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>jsp</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>

<comment type="javadoc">/**
 * this class implements the name mangling rules of the jasper in tomcat4.1.x
 * which is likely to remain for some time
 * @see "org.apache.jasper.JspCompilationContext"
 */</comment>
<class><specifier>public</specifier> class <name>Jasper41Mangler</name> <super><implements>implements <name>JspMangler</name></implements></super> <block>{


    <comment type="javadoc">/**
     * map from a jsp file to a java filename; does not do packages
     *
     * @param jspFile file
     * @return java filename
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>mapJspToJavaName</name><parameter_list>(<param><decl><type><name>File</name></type> <name>jspFile</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>jspUri</name> =<init> <expr><call><name><name>jspFile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>start</name> =<init> <expr><call><name><name>jspUri</name>.<name>lastIndexOf</name></name><argument_list>(<argument><expr><name><name>File</name>.<name>separatorChar</name></name></expr></argument>)</argument_list></call> + 1</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>end</name> =<init> <expr><call><name><name>jspUri</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>modifiedClassName</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>modifiedClassName</name> = new <call><name>StringBuffer</name><argument_list>(<argument><expr><call><name><name>jspUri</name>.<name>length</name></name><argument_list>()</argument_list></call> - <name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name><name>Character</name>.<name>isJavaIdentifierStart</name></name><argument_list>(<argument><expr><call><name><name>jspUri</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
            || <call><name><name>jspUri</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call> == '_'</expr>)</condition><then> <block>{
            <comment type="line">// If the first char is not a start of Java identifier or is _</comment>
            <comment type="line">// prepend a '_'.</comment>
            <expr_stmt><expr><call><name><name>modifiedClassName</name>.<name>append</name></name><argument_list>(<argument><expr>'_'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>end</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>char</name></type> <name>ch</name> =<init> <expr><call><name><name>jspUri</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>Character</name>.<name>isJavaIdentifierPart</name></name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>modifiedClassName</name>.<name>append</name></name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><name>ch</name> == '.'</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>modifiedClassName</name>.<name>append</name></name><argument_list>(<argument><expr>'_'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>modifiedClassName</name>.<name>append</name></name><argument_list>(<argument><expr><call><name>mangleChar</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if></else></if>
        }</block></for>
        <return>return <expr><call><name><name>modifiedClassName</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Mangle the specified character to create a legal Java class name.
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>mangleChar</name><parameter_list>(<param><decl><type><name>char</name></type> <name>ch</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// CheckStyle:MagicNumber OFF</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>s</name> =<init> <expr><call><name><name>Integer</name>.<name>toHexString</name></name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>nzeros</name> =<init> <expr>5 - <call><name><name>s</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name><index>[]</index></type> <name>result</name> =<init> <expr>new <name><name>char</name><index>[<expr>6</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>result</name><index>[<expr>0</expr>]</index></name> = '_'</expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>1</expr></init></decl>;</init> <condition><expr><name>i</name> &lt;= <name>nzeros</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name><name>result</name><index>[<expr><name>i</name></expr>]</index></name> = '0'</expr>;</expr_stmt>
        }</block></for>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr><name>nzeros</name> + 1</expr></init>, <name>j</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; 6</expr>;</condition> <incr><expr><name>i</name>++</expr>, <expr><name>j</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name><name>result</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name><name>s</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr>new <call><name>String</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
        <comment type="line">// CheckStyle:MagicNumber ON</comment>
    }</block></function>


    <comment type="javadoc">/**
     * taking in the substring representing the path relative to the source dir
     * return a new string representing the destination path
     * @param path not used.
     * @return null as this is not implemented.
     * @todo
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>mapPath</name><parameter_list>(<param><decl><type><name>String</name></type> <name>path</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name>null</name></expr>;</return>
    }</block></function>

}</block></class>
</unit>
