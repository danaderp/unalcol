<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\property\LocalProperties.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>property</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>PropertyHelper</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>MagicNames</name></name>;</import>

<comment type="javadoc">/**
 * Thread local class containing local properties.
 * @since Ant 1.8.0
 */</comment>
<class><specifier>public</specifier> class <name>LocalProperties</name>
    <super><extends>extends <name><name>InheritableThreadLocal</name><argument_list>&lt;<argument><name>LocalPropertyStack</name></argument>&gt;</argument_list></name></extends>
    <implements>implements <name>PropertyHelper</name>.<name>PropertyEvaluator</name>,
    <name>PropertyHelper</name>.<name>PropertySetter</name></implements></super> <block>{

    <comment type="javadoc">/**
     * Get a localproperties for the given project.
     * @param project the project to retrieve the localproperties for.
     * @return the localproperties.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>synchronized</specifier> <name>LocalProperties</name></type> <name>get</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>LocalProperties</name></type> <name>l</name> =<init> <expr>(<name>LocalProperties</name>) <call><name><name>project</name>.<name>getReference</name></name><argument_list>(
            <argument><expr><name><name>MagicNames</name>.<name>REFID_LOCAL_PROPERTIES</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>l</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>l</name> = new <call><name>LocalProperties</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>project</name>.<name>addReference</name></name><argument_list>(<argument><expr><name><name>MagicNames</name>.<name>REFID_LOCAL_PROPERTIES</name></name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>PropertyHelper</name>.<name>getPropertyHelper</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call>.<call><name>add</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>l</name></expr>;</return>
    }</block></function>

    <comment type="line">// --------------------------------------------------</comment>
    <comment type="line">//</comment>
    <comment type="line">//  Thread stuff</comment>
    <comment type="line">//</comment>
    <comment type="line">// --------------------------------------------------</comment>

    <comment type="javadoc">/**
     * Construct a new LocalProperties object.
     */</comment>
    <constructor><specifier>private</specifier> <name>LocalProperties</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <comment type="javadoc">/**
     * Get the initial value.
     * @return a new localproperties stack.
     */</comment>
    <function><type><specifier>protected</specifier> <specifier>synchronized</specifier> <name>LocalPropertyStack</name></type> <name>initialValue</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>new <call><name>LocalPropertyStack</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>LocalPropertyStack</name></type> <name>current</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>(<name>LocalPropertyStack</name>) <call><name>get</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="line">// --------------------------------------------------</comment>
    <comment type="line">//</comment>
    <comment type="line">//  Local property adding and scoping</comment>
    <comment type="line">//</comment>
    <comment type="line">// --------------------------------------------------</comment>

    <comment type="javadoc">/**
     * Add a local property to the current scope.
     * @param property the property name to add.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addLocal</name><parameter_list>(<param><decl><type><name>String</name></type> <name>property</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>current</name><argument_list>()</argument_list></call>.<call><name>addLocal</name><argument_list>(<argument><expr><name>property</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/** enter the scope */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>enterScope</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>current</name><argument_list>()</argument_list></call>.<call><name>enterScope</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/** exit the scope */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>exitScope</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>current</name><argument_list>()</argument_list></call>.<call><name>exitScope</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// --------------------------------------------------</comment>
    <comment type="line">//</comment>
    <comment type="line">//  Copy - used in parallel to make a new stack</comment>
    <comment type="line">//</comment>
    <comment type="line">// --------------------------------------------------</comment>

    <comment type="javadoc">/**
     * Copy the stack for a parallel thread.
     * To be called from the parallel thread itself.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>copy</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>set</name><argument_list>(<argument><expr><call><name>current</name><argument_list>()</argument_list></call>.<call><name>copy</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// --------------------------------------------------</comment>
    <comment type="line">//</comment>
    <comment type="line">//  PropertyHelper delegate methods</comment>
    <comment type="line">//</comment>
    <comment type="line">// --------------------------------------------------</comment>

    <comment type="javadoc">/**
     * Evaluate a property.
     * @param property the property's String "identifier".
     * @param helper the invoking PropertyHelper.
     * @return Object value.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>evaluate</name><parameter_list>(<param><decl><type><name>String</name></type> <name>property</name></decl></param>, <param><decl><type><name>PropertyHelper</name></type> <name>helper</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>current</name><argument_list>()</argument_list></call>.<call><name>evaluate</name><argument_list>(<argument><expr><name>property</name></expr></argument>, <argument><expr><name>helper</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set a *new" property.
     * @param property the property's String "identifier".
     * @param value    the value to set.
     * @param propertyHelper the invoking PropertyHelper.
     * @return true if this entity 'owns' the property.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>setNew</name><parameter_list>(
        <param><decl><type><name>String</name></type> <name>property</name></decl></param>, <param><decl><type><name>Object</name></type> <name>value</name></decl></param>, <param><decl><type><name>PropertyHelper</name></type> <name>propertyHelper</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>current</name><argument_list>()</argument_list></call>.<call><name>setNew</name><argument_list>(<argument><expr><name>property</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>propertyHelper</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set a property.
     * @param property the property's String "identifier".
     * @param value    the value to set.
     * @param propertyHelper the invoking PropertyHelper.
     * @return true if this entity 'owns' the property.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>set</name><parameter_list>(
        <param><decl><type><name>String</name></type> <name>property</name></decl></param>, <param><decl><type><name>Object</name></type> <name>value</name></decl></param>, <param><decl><type><name>PropertyHelper</name></type> <name>propertyHelper</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>current</name><argument_list>()</argument_list></call>.<call><name>set</name><argument_list>(<argument><expr><name>property</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>propertyHelper</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>


</unit>
