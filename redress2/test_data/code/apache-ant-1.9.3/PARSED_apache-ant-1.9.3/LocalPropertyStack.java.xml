<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\property\LocalPropertyStack.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>property</name></name>;</package>


<import>import <name><name>java</name>.<name>util</name>.<name>HashMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>LinkedList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>PropertyHelper</name></name>;</import>

<comment type="javadoc">/**
 * A stack of local property maps.
 * There is a map for each scope (target, sequential, macro).
 * @since Ant 1.8.0
 */</comment>
<class><specifier>public</specifier> class <name>LocalPropertyStack</name> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>LinkedList</name><argument_list>&lt;<argument><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>stack</name> =<init> <expr>new <call><name><name>LinkedList</name><argument_list>&lt;<argument><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// --------------------------------------------------</comment>
    <comment type="line">//</comment>
    <comment type="line">//  Local property adding and scoping</comment>
    <comment type="line">//</comment>
    <comment type="line">// --------------------------------------------------</comment>

    <comment type="javadoc">/**
     * Add a local property.
     * @param property the name of the local property.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addLocal</name><parameter_list>(<param><decl><type><name>String</name></type> <name>property</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr>!<call><name><name>stack</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>stack</name>.<name>getFirst</name></name><argument_list>()</argument_list></call>.<call><name>put</name><argument_list>(<argument><expr><name>property</name></expr></argument>, <argument><expr><name><name>NullReturn</name>.<name>NULL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Enter the local scope.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>enterScope</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>stack</name>.<name>addFirst</name></name><argument_list>(<argument><expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Exit the local scope.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>exitScope</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>stack</name>.<name>removeFirst</name></name><argument_list>()</argument_list></call>.<call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// --------------------------------------------------</comment>
    <comment type="line">//</comment>
    <comment type="line">//  Copy - used in parallel to make a new stack</comment>
    <comment type="line">//</comment>
    <comment type="line">// --------------------------------------------------</comment>

    <comment type="javadoc">/**
     * Copy the stack for a parallel thread.
     * @return a copy.
     */</comment>
    <function><type><specifier>public</specifier> <name>LocalPropertyStack</name></type> <name>copy</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>LocalPropertyStack</name></type> <name>ret</name> =<init> <expr>new <call><name>LocalPropertyStack</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ret</name>.<name>stack</name>.<name>addAll</name></name><argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>ret</name></expr>;</return>
    }</block></function>

    <comment type="line">// --------------------------------------------------</comment>
    <comment type="line">//</comment>
    <comment type="line">//  PropertyHelper delegate methods</comment>
    <comment type="line">//</comment>
    <comment type="line">// --------------------------------------------------</comment>

    <comment type="javadoc">/**
     * Evaluate a property.
     * @param property the property's String "identifier".
     * @param helper the invoking PropertyHelper.
     * @return Object value.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>evaluate</name><parameter_list>(<param><decl><type><name>String</name></type> <name>property</name></decl></param>, <param><decl><type><name>PropertyHelper</name></type> <name>helper</name></decl></param>)</parameter_list> <block>{
        <for>for (<init><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>map</name> :<range> <expr><name>stack</name></expr></range></decl></init>) <block>{
            <decl_stmt><decl><type><name>Object</name></type> <name>ret</name> =<init> <expr><call><name><name>map</name>.<name>get</name></name><argument_list>(<argument><expr><name>property</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>ret</name> != <name>null</name></expr>)</condition><then> <block>{
                <return>return <expr><name>ret</name></expr>;</return>
            }</block></then></if>
        }</block></for>
        <return>return <expr><name>null</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set a *new" property.
     * @param property the property's String "identifier".
     * @param value    the value to set.
     * @param propertyHelper the invoking PropertyHelper.
     * @return true if this entity 'owns' the property.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>setNew</name><parameter_list>(
        <param><decl><type><name>String</name></type> <name>property</name></decl></param>, <param><decl><type><name>Object</name></type> <name>value</name></decl></param>, <param><decl><type><name>PropertyHelper</name></type> <name>propertyHelper</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>map</name> =<init> <expr><call><name>getMapForProperty</name><argument_list>(<argument><expr><name>property</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>map</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>Object</name></type> <name>currValue</name> =<init> <expr><call><name><name>map</name>.<name>get</name></name><argument_list>(<argument><expr><name>property</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>currValue</name> == <name><name>NullReturn</name>.<name>NULL</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>map</name>.<name>put</name></name><argument_list>(<argument><expr><name>property</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set a property.
     * @param property the property's String "identifier".
     * @param value    the value to set.
     * @param propertyHelper the invoking PropertyHelper.
     * @return true if this entity 'owns' the property.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>set</name><parameter_list>(<param><decl><type><name>String</name></type> <name>property</name></decl></param>, <param><decl><type><name>Object</name></type> <name>value</name></decl></param>, <param><decl><type><name>PropertyHelper</name></type> <name>propertyHelper</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>map</name> =<init> <expr><call><name>getMapForProperty</name><argument_list>(<argument><expr><name>property</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>map</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>map</name>.<name>put</name></name><argument_list>(<argument><expr><name>property</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>true</expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>getMapForProperty</name><parameter_list>(<param><decl><type><name>String</name></type> <name>property</name></decl></param>)</parameter_list> <block>{
        <for>for (<init><decl><type><name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>map</name> :<range> <expr><name>stack</name></expr></range></decl></init>) <block>{
            <if>if <condition>(<expr><call><name><name>map</name>.<name>get</name></name><argument_list>(<argument><expr><name>property</name></expr></argument>)</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                <return>return <expr><name>map</name></expr>;</return>
            }</block></then></if>
        }</block></for>
        <return>return <expr><name>null</name></expr>;</return>
    }</block></function>
}</block></class>

</unit>
