<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\TaskConfigurationChecker.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<comment type="javadoc">/**
 * &lt;p&gt;Helper class for the check of the configuration of a given task.
 * This class provides methods for making assumptions about the task configuration.
 * After collecting all violations with &lt;tt&gt;assert*&lt;/tt&gt; and &lt;tt&gt;fail&lt;/tt&gt;
 * methods the &lt;tt&gt;checkErrors&lt;/tt&gt; will throw a BuildException with all collected
 * messages or does nothing if there wasn't any error.&lt;/p&gt;
 *
 * &lt;p&gt;Example:&lt;/p&gt;
 *
 * &lt;pre&gt;
 *     public class MyTask extends Task {
 *         ...
 *         public void execute() {
 *             TaskConfigurationChecker checker = TaskConfigurationChecker(this);
 *             checker.assertConfig(
 *                 srcdir != null,
 *                 "Attribute 'srcdir' must be set.
 *             );
 *             checker.assertConfig(
 *                 srcdir.exists(),
 *                 "Srcdir (" + srcdir + ") must exist."
 *             );
 *             if (someComplexCondition()) {
 *                 fail("Complex condition failed.");
 *             }
 *             checker.checkErrors();
 *         }
 *     }
 * &lt;/pre&gt;
 *
 * @see &lt;a href="http://martinfowler.com/eaaDev/Notification.html"&gt;Notification Pattern&lt;/a&gt;
 */</comment>
<class><specifier>public</specifier> class <name>TaskConfigurationChecker</name> <block>{

    <comment type="javadoc">/** List of all collected error messages. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>List</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>errors</name> =<init> <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Task for which the configuration should be checked. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Task</name></type> <name>task</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructor.
     * @param task which task should be checked
     */</comment>
    <constructor><specifier>public</specifier> <name>TaskConfigurationChecker</name><parameter_list>(<param><decl><type><name>Task</name></type> <name>task</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>task</name></name> = <name>task</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Asserts that a condition is true.
     * @param condition     which condition to check
     * @param errormessage  errormessage to throw if a condition failed
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>assertConfig</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>condition</name></decl></param>, <param><decl><type><name>String</name></type> <name>errormessage</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr>!<name>condition</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>errors</name>.<name>add</name></name><argument_list>(<argument><expr><name>errormessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Registers an error.
     * @param errormessage the message for the registered error
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>fail</name><parameter_list>(<param><decl><type><name>String</name></type> <name>errormessage</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>errors</name>.<name>add</name></name><argument_list>(<argument><expr><name>errormessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Checks if there are any collected errors and throws a BuildException
     * with all messages if there was one or more.
     * @throws BuildException if one or more errors were registered
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>checkErrors</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr>!<call><name><name>errors</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>StringBuffer</name></type> <name>sb</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>"Configurationerror on &lt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>task</name>.<name>getTaskName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>"&gt;:"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"line.separator"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for (<init><decl><type><name>String</name></type> <name>msg</name> :<range> <expr><name>errors</name></expr></range></decl></init>) <block>{
                <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>"- "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"line.separator"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><call><name><name>sb</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>task</name>.<name>getLocation</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
    }</block></function>

}</block></class>
</unit>
