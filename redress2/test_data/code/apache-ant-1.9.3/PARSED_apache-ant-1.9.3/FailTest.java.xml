<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\taskdefs\FailTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildFileTest</name></name>;</import>

<comment type="javadoc">/**
 */</comment>
<class><specifier>public</specifier> class <name>FailTest</name> <super><extends>extends <name>BuildFileTest</name></extends></super> <block>{

    <constructor><specifier>public</specifier> <name>FailTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr>"src/etc/testcases/taskdefs/fail.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>test1</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildExceptionContaining</name><argument_list>(<argument><expr>"test1"</expr></argument>,
                <argument><expr>"it is required to fail :-)"</expr></argument>,
                <argument><expr>"No message"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>test2</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectSpecificBuildException</name><argument_list>(<argument><expr>"test2"</expr></argument>,
            <argument><expr>"it is required to fail :-)"</expr></argument>,
            <argument><expr>"test2"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testText</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectSpecificBuildException</name><argument_list>(<argument><expr>"testText"</expr></argument>,
            <argument><expr>"it is required to fail :-)"</expr></argument>,
            <argument><expr>"testText"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testIf</name><parameter_list>()</parameter_list> <block>{
        <try>try <block>{
            <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testIf"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"foo has not been defined, testIf must not fail"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <expr_stmt><expr><call><name><name>project</name>.<name>setProperty</name></name><argument_list>(<argument><expr>"foo"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>expectBuildException</name><argument_list>(<argument><expr>"testIf"</expr></argument>, <argument><expr>"testIf must fail if foo has been set"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testUnless</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildException</name><argument_list>(<argument><expr>"testUnless"</expr></argument>,
                             <argument><expr>"testUnless must fail unless foo has been set"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>setProperty</name></name><argument_list>(<argument><expr>"foo"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testUnless"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"foo has been defined, testUnless must not fail"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * see that the different combinations work, and
     * that the autogenerated text contains information
     * about which condition was not met
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testIfAndUnless</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">//neither</comment>
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testIfAndUnless"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>setProperty</name></name><argument_list>(<argument><expr>"if"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>expectBuildExceptionContaining</name><argument_list>(<argument><expr>"testIfAndUnless"</expr></argument>,
                <argument><expr>"expect fail on defined(if)"</expr></argument>,
                <argument><expr>"if=if and unless=unless"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>project</name>.<name>setProperty</name></name><argument_list>(<argument><expr>"unless"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//this call should succeed as unless overrides if</comment>
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testIfAndUnless"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <comment type="javadoc">/**
     * see that the different combinations work, and
     * that the autogenerated text contains information
     * about which condition was not met
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testIfAndUnless2</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>project</name>.<name>setProperty</name></name><argument_list>(<argument><expr>"unless"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testIfAndUnless"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"defined(if) &amp;&amp; !defined(unless); testIfAndUnless must not fail"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNested1</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectSpecificBuildException</name><argument_list>(<argument><expr>"testNested1"</expr></argument>,
            <argument><expr>"it is required to fail :-)"</expr></argument>,
            <argument><expr>"condition satisfied"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNested2</name><parameter_list>()</parameter_list> <block>{
        <try>try <block>{
            <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testNested2"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"condition not satisfied; testNested2 must not fail"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNested3</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectSpecificBuildException</name><argument_list>(<argument><expr>"testNested3"</expr></argument>,
            <argument><expr>"it is required to fail :-)"</expr></argument>,
            <argument><expr>"testNested3"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNested4</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>specificMessage</name> =<init> <expr>"Nested conditions "
          + "not permitted in conjunction with if/unless attributes"</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>char</name><index>[]</index></type> <name>c</name> =<init> <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>, <expr>'c'</expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>target</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>(<argument><expr>"testNested4x"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>c</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>target</name>.<name>setCharAt</name></name><argument_list>(<argument><expr><call><name><name>target</name>.<name>length</name></name><argument_list>()</argument_list></call> - 1</expr></argument>, <argument><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>expectSpecificBuildException</name><argument_list>(<argument><expr><call><name><name>target</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr>"it is required to fail :-)"</expr></argument>, <argument><expr><name>specificMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNested5</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectSpecificBuildException</name><argument_list>(<argument><expr>"testNested5"</expr></argument>,
            <argument><expr>"it is required to fail :-)"</expr></argument>,
            <argument><expr>"Only one nested condition is allowed."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNested6</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectSpecificBuildException</name><argument_list>(<argument><expr>"testNested6"</expr></argument>,
            <argument><expr>"it is required to fail :-)"</expr></argument>,
            <argument><expr>"testNested6\ntestNested6\ntestNested6"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNested7</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>specificMessage</name> =<init> <expr>"A single nested condition is required."</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>char</name><index>[]</index></type> <name>c</name> =<init> <expr><block>{<expr>'a'</expr>, <expr>'b'</expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>target</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>(<argument><expr>"testNested7x"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>c</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>target</name>.<name>setCharAt</name></name><argument_list>(<argument><expr><call><name><name>target</name>.<name>length</name></name><argument_list>()</argument_list></call> - 1</expr></argument>, <argument><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>expectSpecificBuildException</name><argument_list>(<argument><expr><call><name><name>target</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr>"it is required to fail :-)"</expr></argument>, <argument><expr><name>specificMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

}</block></class>
</unit>
