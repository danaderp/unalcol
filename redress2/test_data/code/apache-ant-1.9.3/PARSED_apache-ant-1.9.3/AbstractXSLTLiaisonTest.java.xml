<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\taskdefs\optional\AbstractXSLTLiaisonTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileNotFoundException</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>URL</name></name>;</import>
<import>import <name><name>javax</name>.<name>xml</name>.<name>parsers</name>.<name>DocumentBuilder</name></name>;</import>
<import>import <name><name>javax</name>.<name>xml</name>.<name>parsers</name>.<name>DocumentBuilderFactory</name></name>;</import>
<import>import <name><name>junit</name>.<name>framework</name>.<name>TestCase</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>XSLTLiaison</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>w3c</name>.<name>dom</name>.<name>Document</name></name>;</import>

<comment type="javadoc">/**
 * Abtract testcase for XSLTLiaison.
 * Override createLiaison for each XSLTLiaison.
 *
 * &lt;a href="sbailliez@apache.org"&gt;Stephane Bailliez&lt;/a&gt;
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>AbstractXSLTLiaisonTest</name> <super><extends>extends <name>TestCase</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>FileUtils</name></type> <name>FILE_UTILS</name> =<init> <expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><specifier>protected</specifier> <name>XSLTLiaison</name></type> <name>liaison</name></decl>;</decl_stmt>

    <constructor><specifier>protected</specifier>  <name>AbstractXSLTLiaisonTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list><block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><name>liaison</name> = <call><name>createLiaison</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// to override</comment>
    <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>XSLTLiaison</name></type> <name>createLiaison</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> ;</function_decl>

    <comment type="javadoc">/** load the file from the caller classloader that loaded this class */</comment>
    <function><type><specifier>protected</specifier> <name>File</name></type> <name>getFile</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>FileNotFoundException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>URL</name></type> <name>url</name> =<init> <expr><call><name>getClass</name><argument_list>()</argument_list></call>.<call><name>getResource</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>url</name> == <name>null</name></expr>)</condition><then><block>{
          <throw>throw <expr>new <call><name>FileNotFoundException</name><argument_list>(<argument><expr>"Unable to load '" + <name>name</name> + "' from classpath"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>FILE_UTILS</name>.<name>fromURI</name></name><argument_list>(<argument><expr><call><name><name>url</name>.<name>toExternalForm</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/** keep it simple stupid */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testTransform</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>xsl</name> =<init> <expr><call><name>getFile</name><argument_list>(<argument><expr>"/taskdefs/optional/xsltliaison-in.xsl"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>liaison</name>.<name>setStylesheet</name></name><argument_list>(<argument><expr><name>xsl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>liaison</name>.<name>addParam</name></name><argument_list>(<argument><expr>"param"</expr></argument>, <argument><expr>"value"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>in</name> =<init> <expr><call><name>getFile</name><argument_list>(<argument><expr>"/taskdefs/optional/xsltliaison-in.xml"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>out</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr>"xsltliaison.tmp"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>out</name>.<name>deleteOnExit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// just to be sure</comment>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>liaison</name>.<name>transform</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>out</name>.<name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testEncoding</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>xsl</name> =<init> <expr><call><name>getFile</name><argument_list>(<argument><expr>"/taskdefs/optional/xsltliaison-encoding-in.xsl"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>liaison</name>.<name>setStylesheet</name></name><argument_list>(<argument><expr><name>xsl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>in</name> =<init> <expr><call><name>getFile</name><argument_list>(<argument><expr>"/taskdefs/optional/xsltliaison-encoding-in.xml"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>out</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr>"xsltliaison-encoding.tmp"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>out</name>.<name>deleteOnExit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// just to be sure</comment>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>liaison</name>.<name>transform</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Document</name></type> <name>doc</name> =<init> <expr><call><name>parseXML</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"root"</expr></argument>,<argument><expr><call><name><name>doc</name>.<name>getDocumentElement</name></name><argument_list>()</argument_list></call>.<call><name>getNodeName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"message"</expr></argument>,<argument><expr><call><name><name>doc</name>.<name>getDocumentElement</name></name><argument_list>()</argument_list></call>.<call><name>getFirstChild</name><argument_list>()</argument_list></call>.<call><name>getNodeName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"\u00E9\u00E0\u00E8\u00EF\u00F9"</expr></argument>,<argument><expr><call><name><name>doc</name>.<name>getDocumentElement</name></name><argument_list>()</argument_list></call>.<call><name>getFirstChild</name><argument_list>()</argument_list></call>.<call><name>getFirstChild</name><argument_list>()</argument_list></call>.<call><name>getNodeValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>out</name>.<name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>Document</name></type> <name>parseXML</name><parameter_list>(<param><decl><type><name>File</name></type> <name>file</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>DocumentBuilderFactory</name></type> <name>dbfactory</name> =<init> <expr><call><name><name>DocumentBuilderFactory</name>.<name>newInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DocumentBuilder</name></type> <name>dbuilder</name> =<init> <expr><call><name><name>dbfactory</name>.<name>newDocumentBuilder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>dbuilder</name>.<name>parse</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
