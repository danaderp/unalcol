<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\zip\ZipEncodingTest.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>zip</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>ByteBuffer</name></name>;</import>

<import>import <name><name>junit</name>.<name>framework</name>.<name>TestCase</name></name>;</import>

<comment type="javadoc">/**
 * Test zip encodings.
 */</comment>
<class><specifier>public</specifier> class <name>ZipEncodingTest</name> <super><extends>extends <name>TestCase</name></extends></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>UNENC_STRING</name> =<init> <expr>"\u2016"</expr></init></decl>;</decl_stmt>

    <comment type="line">// stress test for internal grow method.</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>BAD_STRING</name> =<init>
        <expr>"\u2016\u2015\u2016\u2015\u2016\u2015\u2016\u2015\u2016\u2015\u2016"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>BAD_STRING_ENC</name> =<init>
        <expr>"%U2016%U2015%U2016%U2015%U2016%U2015%U2016%U2015%U2016%U2015%U2016"</expr></init></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testSimpleCp437Encoding</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{

        <expr_stmt><expr><call><name>doSimpleEncodingTest</name><argument_list>(<argument><expr>"Cp437"</expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testSimpleCp850Encoding</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{

        <expr_stmt><expr><call><name>doSimpleEncodingTest</name><argument_list>(<argument><expr>"Cp850"</expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNioCp1252Encoding</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <comment type="line">// CP1252 has some undefined code points, these are</comment>
        <comment type="line">// the defined ones</comment>
        <comment type="line">// retrieved by</comment>
        <comment type="line">//    awk '/^0x/ &amp;&amp; NF&gt;2 {print $1;}' CP1252.TXT</comment>
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>b</name> =<init>
            <expr>new <name><name>byte</name><index>[]</index></name> <block>{ <expr>0x00</expr>, <expr>0x01</expr>, <expr>0x02</expr>, <expr>0x03</expr>, <expr>0x04</expr>, <expr>0x05</expr>, <expr>0x06</expr>, <expr>0x07</expr>,
                         <expr>0x08</expr>, <expr>0x09</expr>, <expr>0x0A</expr>, <expr>0x0B</expr>, <expr>0x0C</expr>, <expr>0x0D</expr>, <expr>0x0E</expr>, <expr>0x0F</expr>,
                         <expr>0x10</expr>, <expr>0x11</expr>, <expr>0x12</expr>, <expr>0x13</expr>, <expr>0x14</expr>, <expr>0x15</expr>, <expr>0x16</expr>, <expr>0x17</expr>,
                         <expr>0x18</expr>, <expr>0x19</expr>, <expr>0x1A</expr>, <expr>0x1B</expr>, <expr>0x1C</expr>, <expr>0x1D</expr>, <expr>0x1E</expr>, <expr>0x1F</expr>,
                         <expr>0x20</expr>, <expr>0x21</expr>, <expr>0x22</expr>, <expr>0x23</expr>, <expr>0x24</expr>, <expr>0x25</expr>, <expr>0x26</expr>, <expr>0x27</expr>,
                         <expr>0x28</expr>, <expr>0x29</expr>, <expr>0x2A</expr>, <expr>0x2B</expr>, <expr>0x2C</expr>, <expr>0x2D</expr>, <expr>0x2E</expr>, <expr>0x2F</expr>,
                         <expr>0x30</expr>, <expr>0x31</expr>, <expr>0x32</expr>, <expr>0x33</expr>, <expr>0x34</expr>, <expr>0x35</expr>, <expr>0x36</expr>, <expr>0x37</expr>,
                         <expr>0x38</expr>, <expr>0x39</expr>, <expr>0x3A</expr>, <expr>0x3B</expr>, <expr>0x3C</expr>, <expr>0x3D</expr>, <expr>0x3E</expr>, <expr>0x3F</expr>,
                         <expr>0x40</expr>, <expr>0x41</expr>, <expr>0x42</expr>, <expr>0x43</expr>, <expr>0x44</expr>, <expr>0x45</expr>, <expr>0x46</expr>, <expr>0x47</expr>,
                         <expr>0x48</expr>, <expr>0x49</expr>, <expr>0x4A</expr>, <expr>0x4B</expr>, <expr>0x4C</expr>, <expr>0x4D</expr>, <expr>0x4E</expr>, <expr>0x4F</expr>,
                         <expr>0x50</expr>, <expr>0x51</expr>, <expr>0x52</expr>, <expr>0x53</expr>, <expr>0x54</expr>, <expr>0x55</expr>, <expr>0x56</expr>, <expr>0x57</expr>,
                         <expr>0x58</expr>, <expr>0x59</expr>, <expr>0x5A</expr>, <expr>0x5B</expr>, <expr>0x5C</expr>, <expr>0x5D</expr>, <expr>0x5E</expr>, <expr>0x5F</expr>,
                         <expr>0x60</expr>, <expr>0x61</expr>, <expr>0x62</expr>, <expr>0x63</expr>, <expr>0x64</expr>, <expr>0x65</expr>, <expr>0x66</expr>, <expr>0x67</expr>,
                         <expr>0x68</expr>, <expr>0x69</expr>, <expr>0x6A</expr>, <expr>0x6B</expr>, <expr>0x6C</expr>, <expr>0x6D</expr>, <expr>0x6E</expr>, <expr>0x6F</expr>,
                         <expr>0x70</expr>, <expr>0x71</expr>, <expr>0x72</expr>, <expr>0x73</expr>, <expr>0x74</expr>, <expr>0x75</expr>, <expr>0x76</expr>, <expr>0x77</expr>,
                         <expr>0x78</expr>, <expr>0x79</expr>, <expr>0x7A</expr>, <expr>0x7B</expr>, <expr>0x7C</expr>, <expr>0x7D</expr>, <expr>0x7E</expr>, <expr>0x7F</expr>,
                         <expr>(<name>byte</name>) 0x80</expr>, <expr>(<name>byte</name>) 0x82</expr>, <expr>(<name>byte</name>) 0x83</expr>, <expr>(<name>byte</name>) 0x84</expr>,
                         <expr>(<name>byte</name>) 0x85</expr>, <expr>(<name>byte</name>) 0x86</expr>, <expr>(<name>byte</name>) 0x87</expr>, <expr>(<name>byte</name>) 0x88</expr>,
                         <expr>(<name>byte</name>) 0x89</expr>, <expr>(<name>byte</name>) 0x8A</expr>, <expr>(<name>byte</name>) 0x8B</expr>, <expr>(<name>byte</name>) 0x8C</expr>,
                         <expr>(<name>byte</name>) 0x8E</expr>, <expr>(<name>byte</name>) 0x91</expr>, <expr>(<name>byte</name>) 0x92</expr>, <expr>(<name>byte</name>) 0x93</expr>,
                         <expr>(<name>byte</name>) 0x94</expr>, <expr>(<name>byte</name>) 0x95</expr>, <expr>(<name>byte</name>) 0x96</expr>, <expr>(<name>byte</name>) 0x97</expr>,
                         <expr>(<name>byte</name>) 0x98</expr>, <expr>(<name>byte</name>) 0x99</expr>, <expr>(<name>byte</name>) 0x9A</expr>, <expr>(<name>byte</name>) 0x9B</expr>,
                         <expr>(<name>byte</name>) 0x9C</expr>, <expr>(<name>byte</name>) 0x9E</expr>, <expr>(<name>byte</name>) 0x9F</expr>, <expr>(<name>byte</name>) 0xA0</expr>,
                         <expr>(<name>byte</name>) 0xA1</expr>, <expr>(<name>byte</name>) 0xA2</expr>, <expr>(<name>byte</name>) 0xA3</expr>, <expr>(<name>byte</name>) 0xA4</expr>,
                         <expr>(<name>byte</name>) 0xA5</expr>, <expr>(<name>byte</name>) 0xA6</expr>, <expr>(<name>byte</name>) 0xA7</expr>, <expr>(<name>byte</name>) 0xA8</expr>,
                         <expr>(<name>byte</name>) 0xA9</expr>, <expr>(<name>byte</name>) 0xAA</expr>, <expr>(<name>byte</name>) 0xAB</expr>, <expr>(<name>byte</name>) 0xAC</expr>,
                         <expr>(<name>byte</name>) 0xAD</expr>, <expr>(<name>byte</name>) 0xAE</expr>, <expr>(<name>byte</name>) 0xAF</expr>, <expr>(<name>byte</name>) 0xB0</expr>,
                         <expr>(<name>byte</name>) 0xB1</expr>, <expr>(<name>byte</name>) 0xB2</expr>, <expr>(<name>byte</name>) 0xB3</expr>, <expr>(<name>byte</name>) 0xB4</expr>,
                         <expr>(<name>byte</name>) 0xB5</expr>, <expr>(<name>byte</name>) 0xB6</expr>, <expr>(<name>byte</name>) 0xB7</expr>, <expr>(<name>byte</name>) 0xB8</expr>,
                         <expr>(<name>byte</name>) 0xB9</expr>, <expr>(<name>byte</name>) 0xBA</expr>, <expr>(<name>byte</name>) 0xBB</expr>, <expr>(<name>byte</name>) 0xBC</expr>,
                         <expr>(<name>byte</name>) 0xBD</expr>, <expr>(<name>byte</name>) 0xBE</expr>, <expr>(<name>byte</name>) 0xBF</expr>, <expr>(<name>byte</name>) 0xC0</expr>,
                         <expr>(<name>byte</name>) 0xC1</expr>, <expr>(<name>byte</name>) 0xC2</expr>, <expr>(<name>byte</name>) 0xC3</expr>, <expr>(<name>byte</name>) 0xC4</expr>,
                         <expr>(<name>byte</name>) 0xC5</expr>, <expr>(<name>byte</name>) 0xC6</expr>, <expr>(<name>byte</name>) 0xC7</expr>, <expr>(<name>byte</name>) 0xC8</expr>,
                         <expr>(<name>byte</name>) 0xC9</expr>, <expr>(<name>byte</name>) 0xCA</expr>, <expr>(<name>byte</name>) 0xCB</expr>, <expr>(<name>byte</name>) 0xCC</expr>,
                         <expr>(<name>byte</name>) 0xCD</expr>, <expr>(<name>byte</name>) 0xCE</expr>, <expr>(<name>byte</name>) 0xCF</expr>, <expr>(<name>byte</name>) 0xD0</expr>,
                         <expr>(<name>byte</name>) 0xD1</expr>, <expr>(<name>byte</name>) 0xD2</expr>, <expr>(<name>byte</name>) 0xD3</expr>, <expr>(<name>byte</name>) 0xD4</expr>,
                         <expr>(<name>byte</name>) 0xD5</expr>, <expr>(<name>byte</name>) 0xD6</expr>, <expr>(<name>byte</name>) 0xD7</expr>, <expr>(<name>byte</name>) 0xD8</expr>,
                         <expr>(<name>byte</name>) 0xD9</expr>, <expr>(<name>byte</name>) 0xDA</expr>, <expr>(<name>byte</name>) 0xDB</expr>, <expr>(<name>byte</name>) 0xDC</expr>,
                         <expr>(<name>byte</name>) 0xDD</expr>, <expr>(<name>byte</name>) 0xDE</expr>, <expr>(<name>byte</name>) 0xDF</expr>, <expr>(<name>byte</name>) 0xE0</expr>,
                         <expr>(<name>byte</name>) 0xE1</expr>, <expr>(<name>byte</name>) 0xE2</expr>, <expr>(<name>byte</name>) 0xE3</expr>, <expr>(<name>byte</name>) 0xE4</expr>,
                         <expr>(<name>byte</name>) 0xE5</expr>, <expr>(<name>byte</name>) 0xE6</expr>, <expr>(<name>byte</name>) 0xE7</expr>, <expr>(<name>byte</name>) 0xE8</expr>,
                         <expr>(<name>byte</name>) 0xE9</expr>, <expr>(<name>byte</name>) 0xEA</expr>, <expr>(<name>byte</name>) 0xEB</expr>, <expr>(<name>byte</name>) 0xEC</expr>,
                         <expr>(<name>byte</name>) 0xED</expr>, <expr>(<name>byte</name>) 0xEE</expr>, <expr>(<name>byte</name>) 0xEF</expr>, <expr>(<name>byte</name>) 0xF0</expr>,
                         <expr>(<name>byte</name>) 0xF1</expr>, <expr>(<name>byte</name>) 0xF2</expr>, <expr>(<name>byte</name>) 0xF3</expr>, <expr>(<name>byte</name>) 0xF4</expr>,
                         <expr>(<name>byte</name>) 0xF5</expr>, <expr>(<name>byte</name>) 0xF6</expr>, <expr>(<name>byte</name>) 0xF7</expr>, <expr>(<name>byte</name>) 0xF8</expr>,
                         <expr>(<name>byte</name>) 0xF9</expr>, <expr>(<name>byte</name>) 0xFA</expr>, <expr>(<name>byte</name>) 0xFB</expr>, <expr>(<name>byte</name>) 0xFC</expr>,
                         <expr>(<name>byte</name>) 0xFD</expr>, <expr>(<name>byte</name>) 0xFE</expr>, <expr>(<name>byte</name>) 0xFF</expr> }</block></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>doSimpleEncodingTest</name><argument_list>(<argument><expr>"Cp1252"</expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>void</name></type> <name>assertEquals</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>expected</name></decl></param>, <param><decl><type><name>ByteBuffer</name></type> <name>actual</name></decl></param>)</parameter_list> <block>{

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>expected</name>.<name>length</name></name></expr></argument>, <argument><expr><call><name><name>actual</name>.<name>limit</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>expected</name>.<name>length</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{

            <decl_stmt><decl><type><name>byte</name></type> <name>a</name> =<init> <expr><call><name><name>actual</name>.<name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>expected</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>doSimpleEncodingTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>, <param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>testBytes</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{

        <decl_stmt><decl><type><name>ZipEncoding</name></type> <name>enc</name> =<init> <expr><call><name><name>ZipEncodingHelper</name>.<name>getZipEncoding</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>testBytes</name> == <name>null</name></expr>)</condition><then> <block>{

            <expr_stmt><expr><name>testBytes</name> = new <name><name>byte</name><index>[<expr>256</expr>]</index></name></expr>;</expr_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; 256</expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
                <expr_stmt><expr><name><name>testBytes</name><index>[<expr><name>i</name></expr>]</index></name> = (<name>byte</name>) <name>i</name></expr>;</expr_stmt>
            }</block></for>
        }</block></then></if>

        <decl_stmt><decl><type><name>String</name></type> <name>decoded</name> =<init> <expr><call><name><name>enc</name>.<name>decode</name></name><argument_list>(<argument><expr><name>testBytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>true</expr></argument>, <argument><expr><call><name><name>enc</name>.<name>canEncode</name></name><argument_list>(<argument><expr><name>decoded</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>encoded</name> =<init> <expr><call><name><name>enc</name>.<name>encode</name></name><argument_list>(<argument><expr><name>decoded</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>testBytes</name></expr></argument>, <argument><expr><name>encoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>false</expr></argument>, <argument><expr><call><name><name>enc</name>.<name>canEncode</name></name><argument_list>(<argument><expr><name>UNENC_STRING</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"%U2016".<call><name>getBytes</name><argument_list>(<argument><expr>"US-ASCII"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>enc</name>.<name>encode</name></name><argument_list>(<argument><expr><name>UNENC_STRING</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>false</expr></argument>, <argument><expr><call><name><name>enc</name>.<name>canEncode</name></name><argument_list>(<argument><expr><name>BAD_STRING</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>BAD_STRING_ENC</name>.<name>getBytes</name></name><argument_list>(<argument><expr>"US-ASCII"</expr></argument>)</argument_list></call></expr></argument>,
                     <argument><expr><call><name><name>enc</name>.<name>encode</name></name><argument_list>(<argument><expr><name>BAD_STRING</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
