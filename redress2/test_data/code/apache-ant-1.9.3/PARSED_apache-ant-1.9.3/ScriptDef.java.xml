<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\script\ScriptDef.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>script</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>AntTypeDefinition</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>ComponentHelper</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>MagicNames</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>ProjectHelper</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>ResourceCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>DefBase</name></name>;</import>

<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Locale</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Set</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashSet</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>ClasspathUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>ScriptRunnerBase</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>ScriptRunnerHelper</name></name>;</import>

<comment type="javadoc">/**
 * Define a task using a script
 *
 * @since Ant 1.6
 */</comment>
<class><specifier>public</specifier> class <name>ScriptDef</name> <super><extends>extends <name>DefBase</name></extends></super> <block>{
    <comment type="javadoc">/**
     * script runner helper
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ScriptRunnerHelper</name></type> <name>helper</name> =<init> <expr>new <call><name>ScriptRunnerHelper</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** the name by which this script will be activated */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>name</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Attributes definitions of this script */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>List</name></type> <name>attributes</name> =<init> <expr>new <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Nested Element definitions of this script */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>List</name></type> <name>nestedElements</name> =<init> <expr>new <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The attribute names as a set */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Set</name></type> <name>attributeSet</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The nested element definitions indexed by their names */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Map</name></type> <name>nestedElementMap</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Set the project.
     * @param project the project that this def belows to.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setProject</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name>.<name>setProject</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>helper</name>.<name>setProjectComponent</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>helper</name>.<name>setSetBeans</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * set the name under which this script will be activated in a build
     * file
     *
     * @param name the name of the script
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>name</name></name> = <name>name</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Indicates whether the task supports a given attribute name
     *
     * @param attributeName the name of the attribute.
     *
     * @return true if the attribute is supported by the script.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isAttributeSupported</name><parameter_list>(<param><decl><type><name>String</name></type> <name>attributeName</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>attributeSet</name>.<name>contains</name></name><argument_list>(<argument><expr><name>attributeName</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Class representing an attribute definition
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Attribute</name> <block>{
        <comment type="javadoc">/** The attribute name */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>name</name></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * Set the attribute name
         *
         * @param name the attribute name
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>name</name></name> = <call><name><name>name</name>.<name>toLowerCase</name></name><argument_list>(<argument><expr><name><name>Locale</name>.<name>ENGLISH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>

    <comment type="javadoc">/**
     * Add an attribute definition to this script.
     *
     * @param attribute the attribute definition.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addAttribute</name><parameter_list>(<param><decl><type><name>Attribute</name></type> <name>attribute</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>attributes</name>.<name>add</name></name><argument_list>(<argument><expr><name>attribute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Class to represent a nested element definition
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>NestedElement</name> <block>{
        <comment type="javadoc">/** The name of the nested element */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>name</name></decl>;</decl_stmt>

        <comment type="javadoc">/** The Ant type to which this nested element corresponds. */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>type</name></decl>;</decl_stmt>

        <comment type="javadoc">/** The class to be created for this nested element */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>className</name></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * set the tag name for this nested element
         *
         * @param name the name of this nested element
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>name</name></name> = <call><name><name>name</name>.<name>toLowerCase</name></name><argument_list>(<argument><expr><name><name>Locale</name>.<name>ENGLISH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * Set the type of this element. This is the name of an
         * Ant task or type which is to be used when this element is to be
         * created. This is an alternative to specifying the class name directly
         *
         * @param type the name of an Ant type, or task, to use for this nested
         * element.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setType</name><parameter_list>(<param><decl><type><name>String</name></type> <name>type</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>type</name></name> = <name>type</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * Set the classname of the class to be used for the nested element.
         * This specifies the class directly and is an alternative to specifying
         * the Ant type name.
         *
         * @param className the name of the class to use for this nested
         * element.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setClassName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>className</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>className</name></name> = <name>className</name></expr>;</expr_stmt>
        }</block></function>
    }</block></class>

    <comment type="javadoc">/**
     * Add a nested element definition.
     *
     * @param nestedElement the nested element definition.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addElement</name><parameter_list>(<param><decl><type><name>NestedElement</name></type> <name>nestedElement</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>nestedElements</name>.<name>add</name></name><argument_list>(<argument><expr><name>nestedElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Define the script.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>name</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"scriptdef requires a name attribute to "
                + "name the script"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr><call><name><name>helper</name>.<name>getLanguage</name></name><argument_list>()</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"&lt;scriptdef&gt; requires a language attribute "
                + "to specify the script language"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <comment type="line">// Check if need to set the loader</comment>
        <if>if <condition>(<expr><call><name>getAntlibClassLoader</name><argument_list>()</argument_list></call> != <name>null</name> || <call><name>hasCpDelegate</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>helper</name>.<name>setClassLoader</name></name><argument_list>(<argument><expr><call><name>createLoader</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><name>attributeSet</name> = new <call><name>HashSet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>Iterator</name></type> <name>i</name> =<init> <expr><call><name><name>attributes</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>i</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
            <decl_stmt><decl><type><name>Attribute</name></type> <name>attribute</name> =<init> <expr>(<name>Attribute</name>) <call><name><name>i</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>attribute</name>.<name>name</name></name> == <name>null</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"scriptdef &lt;attribute&gt; elements "
                    + "must specify an attribute name"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <if>if <condition>(<expr><call><name><name>attributeSet</name>.<name>contains</name></name><argument_list>(<argument><expr><name><name>attribute</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"scriptdef &lt;" + <name>name</name> + "&gt; declares "
                    + "the " + <name><name>attribute</name>.<name>name</name></name> + " attribute more than once"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>attributeSet</name>.<name>add</name></name><argument_list>(<argument><expr><name><name>attribute</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <expr_stmt><expr><name>nestedElementMap</name> = new <call><name>HashMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>Iterator</name></type> <name>i</name> =<init> <expr><call><name><name>nestedElements</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>i</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
            <decl_stmt><decl><type><name>NestedElement</name></type> <name>nestedElement</name> =<init> <expr>(<name>NestedElement</name>) <call><name><name>i</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>nestedElement</name>.<name>name</name></name> == <name>null</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"scriptdef &lt;element&gt; elements "
                    + "must specify an element name"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <if>if <condition>(<expr><call><name><name>nestedElementMap</name>.<name>containsKey</name></name><argument_list>(<argument><expr><name><name>nestedElement</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"scriptdef &lt;" + <name>name</name> + "&gt; declares "
                    + "the " + <name><name>nestedElement</name>.<name>name</name></name> + " nested element more "
                    + "than once"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <if>if <condition>(<expr><name><name>nestedElement</name>.<name>className</name></name> == <name>null</name>
                &amp;&amp; <name><name>nestedElement</name>.<name>type</name></name> == <name>null</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"scriptdef &lt;element&gt; elements "
                    + "must specify either a classname or type attribute"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <if>if <condition>(<expr><name><name>nestedElement</name>.<name>className</name></name> != <name>null</name>
                &amp;&amp; <name><name>nestedElement</name>.<name>type</name></name> != <name>null</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"scriptdef &lt;element&gt; elements "
                    + "must specify only one of the classname and type "
                    + "attributes"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>


            <expr_stmt><expr><call><name><name>nestedElementMap</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>nestedElement</name>.<name>name</name></name></expr></argument>, <argument><expr><name>nestedElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <comment type="line">// find the script repository - it is stored in the project</comment>
        <decl_stmt><decl><type><name>Map</name></type> <name>scriptRepository</name> =<init> <expr><call><name>lookupScriptRepository</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>name</name> = <call><name><name>ProjectHelper</name>.<name>genComponentName</name></name><argument_list>(<argument><expr><call><name>getURI</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>scriptRepository</name>.<name>put</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>AntTypeDefinition</name></type> <name>def</name> =<init> <expr>new <call><name>AntTypeDefinition</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>def</name>.<name>setName</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>def</name>.<name>setClass</name></name><argument_list>(<argument><expr><name><name>ScriptDefBase</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ComponentHelper</name>.<name>getComponentHelper</name></name><argument_list>(
            <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>addDataTypeDefinition</name><argument_list>(<argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Find or create the script repository - it is stored in the project.
     * This method is synchronized on the project under {@link MagicNames#SCRIPT_REPOSITORY}
     * @return the current script repository registered as a reference.
     */</comment>
    <function><type><specifier>private</specifier> <name>Map</name></type> <name>lookupScriptRepository</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Map</name></type> <name>scriptRepository</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Project</name></type> <name>p</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <synchronized>synchronized (<expr><name>p</name></expr>) <block>{
            <expr_stmt><expr><name>scriptRepository</name> =
                    (<name>Map</name>) <call><name><name>p</name>.<name>getReference</name></name><argument_list>(<argument><expr><name><name>MagicNames</name>.<name>SCRIPT_REPOSITORY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>scriptRepository</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>scriptRepository</name> = new <call><name>HashMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>p</name>.<name>addReference</name></name><argument_list>(<argument><expr><name><name>MagicNames</name>.<name>SCRIPT_REPOSITORY</name></name></expr></argument>,
                        <argument><expr><name>scriptRepository</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></synchronized>
        <return>return <expr><name>scriptRepository</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Create a nested element to be configured.
     *
     * @param elementName the name of the nested element.
     * @return object representing the element name.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>createNestedElement</name><parameter_list>(<param><decl><type><name>String</name></type> <name>elementName</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>NestedElement</name></type> <name>definition</name>
            =<init> <expr>(<name>NestedElement</name>) <call><name><name>nestedElementMap</name>.<name>get</name></name><argument_list>(<argument><expr><name>elementName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>definition</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"&lt;" + <name>name</name> + "&gt; does not support "
                + "the &lt;" + <name>elementName</name> + "&gt; nested element"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <decl_stmt><decl><type><name>Object</name></type> <name>instance</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>classname</name> =<init> <expr><name><name>definition</name>.<name>className</name></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>classname</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>instance</name> = <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>createTask</name><argument_list>(<argument><expr><name><name>definition</name>.<name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>instance</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>instance</name> = <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>createDataType</name><argument_list>(<argument><expr><name><name>definition</name>.<name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then> <else>else <block>{
            <comment type="block">/*
            // try the context classloader
            ClassLoader loader
                = Thread.currentThread().getContextClassLoader();
            */</comment>
            <decl_stmt><decl><type><name>ClassLoader</name></type> <name>loader</name> =<init> <expr><call><name>createLoader</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <try>try <block>{
                <expr_stmt><expr><name>instance</name> = <call><name><name>ClasspathUtils</name>.<name>newInstance</name></name><argument_list>(<argument><expr><name>classname</name></expr></argument>, <argument><expr><name>loader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>e</name></decl></param>) <block>{
                <expr_stmt><expr><name>instance</name> = <call><name><name>ClasspathUtils</name>.<name>newInstance</name></name><argument_list>(<argument><expr><name>classname</name></expr></argument>, <argument><expr><name><name>ScriptDef</name>.<name><name/></name></name>class.<call><name>getClassLoader</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>

            <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>setProjectReference</name><argument_list>(<argument><expr><name>instance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <if>if <condition>(<expr><name>instance</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"&lt;" + <name>name</name> + "&gt; is unable to create "
                + "the &lt;" + <name>elementName</name> + "&gt; nested element"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr><name>instance</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Execute the script.
     *
     * @param attributes collection of attributes
     * @param elements a list of nested element values.
     * @deprecated since 1.7.
     *             Use executeScript(attribute, elements, instance) instead.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>executeScript</name><parameter_list>(<param><decl><type><name>Map</name></type> <name>attributes</name></decl></param>, <param><decl><type><name>Map</name></type> <name>elements</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeScript</name><argument_list>(<argument><expr><name>attributes</name></expr></argument>, <argument><expr><name>elements</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Execute the script.
     * This is called by the script instance to execute the script for this
     * definition.
     *
     * @param attributes collection of attributes
     * @param elements   a list of nested element values.
     * @param instance   the script instance; can be null
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>executeScript</name><parameter_list>(<param><decl><type><name>Map</name></type> <name>attributes</name></decl></param>, <param><decl><type><name>Map</name></type> <name>elements</name></decl></param>, <param><decl><type><name>ScriptDefBase</name></type> <name>instance</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>ScriptRunnerBase</name></type> <name>runner</name> =<init> <expr><call><name><name>helper</name>.<name>getScriptRunner</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>runner</name>.<name>addBean</name></name><argument_list>(<argument><expr>"attributes"</expr></argument>, <argument><expr><name>attributes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>runner</name>.<name>addBean</name></name><argument_list>(<argument><expr>"elements"</expr></argument>, <argument><expr><name>elements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>runner</name>.<name>addBean</name></name><argument_list>(<argument><expr>"project"</expr></argument>, <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>instance</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>runner</name>.<name>addBean</name></name><argument_list>(<argument><expr>"self"</expr></argument>, <argument><expr><name>instance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>runner</name>.<name>executeScript</name></name><argument_list>(<argument><expr>"scriptdef_" + <name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Defines the manager.
     *
     * @param manager the scripting manager.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setManager</name><parameter_list>(<param><decl><type><name>String</name></type> <name>manager</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>helper</name>.<name>setManager</name></name><argument_list>(<argument><expr><name>manager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Defines the language (required).
     *
     * @param language the scripting language name for the script.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLanguage</name><parameter_list>(<param><decl><type><name>String</name></type> <name>language</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>helper</name>.<name>setLanguage</name></name><argument_list>(<argument><expr><name>language</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Load the script from an external file ; optional.
     *
     * @param file the file containing the script source.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSrc</name><parameter_list>(<param><decl><type><name>File</name></type> <name>file</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>helper</name>.<name>setSrc</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the script text.
     *
     * @param text a component of the script text to be added.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addText</name><parameter_list>(<param><decl><type><name>String</name></type> <name>text</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>helper</name>.<name>addText</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add any source resource.
     * @since Ant1.7.1
     * @param resource source of script
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>ResourceCollection</name></type> <name>resource</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>helper</name>.<name>add</name></name><argument_list>(<argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>

</unit>
