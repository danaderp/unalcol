<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\Mkdir.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>

<comment type="javadoc">/**
 * Creates a given directory.
 * Creates a directory and any non-existent parent directories, when
 * necessary
 *
 * @since Ant 1.1
 *
 * @ant.task category="filesystem"
 */</comment>

<class><specifier>public</specifier> class <name>Mkdir</name> <super><extends>extends <name>Task</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MKDIR_RETRY_SLEEP_MILLIS</name> =<init> <expr>10</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * our little directory
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>dir</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * create the directory and all parents
     * @throws BuildException if dir is somehow invalid, or creation failed.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>dir</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"dir attribute is required"</expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr><call><name><name>dir</name>.<name>isFile</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Unable to create directory as a file "
                                     + "already exists with that name: "
                                     + <call><name><name>dir</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr>!<call><name><name>dir</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>boolean</name></type> <name>result</name> =<init> <expr><call><name>mkdirs</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><call><name><name>dir</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"A different process or task has already created "
                        + "dir " + <call><name><name>dir</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>,
                        <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return;</return>
                }</block></then></if>
                <decl_stmt><decl><type><name>String</name></type> <name>msg</name> =<init> <expr>"Directory " + <call><name><name>dir</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call>
                    + " creation was not successful for an unknown reason"</expr></init></decl>;</decl_stmt>
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Created dir: " + <call><name><name>dir</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Skipping " + <call><name><name>dir</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call>
                + " because it already exists."</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * the directory to create; required.
     *
     * @param dir the directory to be made.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDir</name><parameter_list>(<param><decl><type><name>File</name></type> <name>dir</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>dir</name></name> = <name>dir</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the directory to create.
     * @return File
     */</comment>
    <function><type><specifier>public</specifier> <name>File</name></type> <name>getDir</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>dir</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Attempt to fix possible race condition when creating
     * directories on WinXP. If the mkdirs does not work,
     * wait a little and try again.
     */</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>mkdirs</name><parameter_list>(<param><decl><type><name>File</name></type> <name>f</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr>!<call><name><name>f</name>.<name>mkdirs</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <try>try <block>{
                <expr_stmt><expr><call><name><name>Thread</name>.<name>sleep</name></name><argument_list>(<argument><expr><name>MKDIR_RETRY_SLEEP_MILLIS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><call><name><name>f</name>.<name>mkdirs</name></name><argument_list>()</argument_list></call></expr>;</return>
            }</block> <catch>catch (<param><decl><type><name>InterruptedException</name></type> <name>ex</name></decl></param>) <block>{
                <return>return <expr><call><name><name>f</name>.<name>mkdirs</name></name><argument_list>()</argument_list></call></expr>;</return>
            }</block></catch></try>
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>
}</block></class>

</unit>
