<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\taskdefs\cvslib\ChangeLogParserTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>cvslib</name></name>;</package>

<import>import <name><name>junit</name>.<name>framework</name>.<name>TestCase</name></name>;</import>

<import>import <name><name>java</name>.<name>util</name>.<name>Calendar</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Locale</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>TimeZone</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Date</name></name>;</import>

<comment type="javadoc">/**
 * Minimal test of the parser implementation
 */</comment>
<class><specifier>public</specifier> class <name>ChangeLogParserTest</name> <super><extends>extends <name>TestCase</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>protected</specifier> <name>ChangeLogParser</name></type> <name>parser</name> =<init> <expr>new <call><name>ChangeLogParser</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testOldCvsFormat</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>parser</name>.<name>stdout</name></name><argument_list>(<argument><expr>"Working file: build.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parser</name>.<name>stdout</name></name><argument_list>(<argument><expr>"revision 1.475"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parser</name>.<name>stdout</name></name><argument_list>(<argument><expr>"date: 2004/06/05 16:10:32;  author: somebody;  state: Exp;  lines: +2 -2"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parser</name>.<name>stdout</name></name><argument_list>(<argument><expr>"I have done something. I swear."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parser</name>.<name>stdout</name></name><argument_list>(<argument><expr>"============================================================================="</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>CVSEntry</name><index>[]</index></type> <name>entries</name> =<init> <expr><call><name><name>parser</name>.<name>getEntrySetAsArray</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"somebody"</expr></argument>, <argument><expr><name><name>entries</name><index>[<expr>0</expr>]</index></name>.<call><name>getAuthor</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Calendar</name></type> <name>cal</name> =<init> <expr><call><name><name>Calendar</name>.<name>getInstance</name></name><argument_list>(<argument><expr><call><name><name>TimeZone</name>.<name>getTimeZone</name></name><argument_list>(<argument><expr>"UTC"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Locale</name>.<name>US</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>cal</name>.<name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>MILLISECOND</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cal</name>.<name>set</name></name><argument_list>(<argument><expr>2004</expr></argument>, <argument><expr><name><name>Calendar</name>.<name>JUNE</name></name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>16</expr></argument>, <argument><expr>10</expr></argument>, <argument><expr>32</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>date</name> =<init> <expr><call><name><name>cal</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name><name>entries</name><index>[<expr>0</expr>]</index></name>.<call><name>getDate</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testCvs112Format</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>parser</name>.<name>stdout</name></name><argument_list>(<argument><expr>"Working file: build.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parser</name>.<name>stdout</name></name><argument_list>(<argument><expr>"revision 1.475"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parser</name>.<name>stdout</name></name><argument_list>(<argument><expr>"date: 2004-06-05 16:10:32 +0000; author: somebody; state: Exp;  lines: +2 -2"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parser</name>.<name>stdout</name></name><argument_list>(<argument><expr>"I have done something. I swear."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parser</name>.<name>stdout</name></name><argument_list>(<argument><expr>"============================================================================="</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>CVSEntry</name><index>[]</index></type> <name>entries</name> =<init> <expr><call><name><name>parser</name>.<name>getEntrySetAsArray</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"somebody"</expr></argument>, <argument><expr><name><name>entries</name><index>[<expr>0</expr>]</index></name>.<call><name>getAuthor</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Calendar</name></type> <name>cal</name> =<init> <expr><call><name><name>Calendar</name>.<name>getInstance</name></name><argument_list>(<argument><expr><call><name><name>TimeZone</name>.<name>getTimeZone</name></name><argument_list>(<argument><expr>"UTC"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Locale</name>.<name>US</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>cal</name>.<name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>MILLISECOND</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cal</name>.<name>set</name></name><argument_list>(<argument><expr>2004</expr></argument>, <argument><expr><name><name>Calendar</name>.<name>JUNE</name></name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>16</expr></argument>, <argument><expr>10</expr></argument>, <argument><expr>32</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>date</name> =<init> <expr><call><name><name>cal</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name><name>entries</name><index>[<expr>0</expr>]</index></name>.<call><name>getDate</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
