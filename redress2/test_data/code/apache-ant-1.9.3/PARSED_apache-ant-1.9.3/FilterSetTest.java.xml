<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\types\FilterSetTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Hashtable</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildFileTest</name></name>;</import>

<comment type="javadoc">/**
 * FilterSet testing
 *
 */</comment>
<class><specifier>public</specifier> class <name>FilterSetTest</name> <super><extends>extends <name>BuildFileTest</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>static</specifier> <specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>BUF_SIZE</name> =<init> <expr>32768</expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>FilterSetTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr>"src/etc/testcases/types/filterset.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"cleanup"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>test1</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"test1"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Filterset 1 failed"</expr></argument>, <argument><expr><call><name>compareFiles</name><argument_list>(<argument><expr>"src/etc/testcases/types/gold/filterset1.txt"</expr></argument>,
                                                      <argument><expr>"src/etc/testcases/types/dest1.txt"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>test2</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"test2"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Filterset 2 failed"</expr></argument>, <argument><expr><call><name>compareFiles</name><argument_list>(<argument><expr>"src/etc/testcases/types/gold/filterset2.txt"</expr></argument>,
                                                      <argument><expr>"src/etc/testcases/types/dest2.txt"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>test3</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"test3"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Filterset 3 failed"</expr></argument>, <argument><expr><call><name>compareFiles</name><argument_list>(<argument><expr>"src/etc/testcases/types/gold/filterset3.txt"</expr></argument>,
                                                      <argument><expr>"src/etc/testcases/types/dest3.txt"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * This will test the recursive FilterSet.  Which means that if
     * the filter value @test@ contains another filter value, it will
     * actually resolve.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testRecursive</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>result</name> =<init> <expr>"it works line"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>line</name>=<init><expr>"@test@ line"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FilterSet</name></type> <name>fs</name> =<init> <expr>new <call><name>FilterSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>fs</name>.<name>addFilter</name></name><argument_list>(<argument><expr>"test"</expr></argument>, <argument><expr>"@test1@"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>fs</name>.<name>addFilter</name></name><argument_list>(<argument><expr>"test1"</expr></argument>,<argument><expr>"@test2@"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>fs</name>.<name>addFilter</name></name><argument_list>(<argument><expr>"test2"</expr></argument>, <argument><expr>"it works"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>fs</name>.<name>setBeginToken</name></name><argument_list>(<argument><expr>"@"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>fs</name>.<name>setEndToken</name></name><argument_list>(<argument><expr>"@"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name><name>fs</name>.<name>replaceTokens</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Test to see what happens when the resolving occurs in an
     * infinite loop.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testInfinite</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>result</name> =<init> <expr>"@test@ line testvalue"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>line</name> =<init> <expr>"@test@ line @test3@"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FilterSet</name></type> <name>fs</name> =<init> <expr>new <call><name>FilterSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>fs</name>.<name>addFilter</name></name><argument_list>(<argument><expr>"test"</expr></argument>, <argument><expr>"@test1@"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>fs</name>.<name>addFilter</name></name><argument_list>(<argument><expr>"test1"</expr></argument>,<argument><expr>"@test2@"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>fs</name>.<name>addFilter</name></name><argument_list>(<argument><expr>"test2"</expr></argument>, <argument><expr>"@test@"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>fs</name>.<name>addFilter</name></name><argument_list>(<argument><expr>"test3"</expr></argument>, <argument><expr>"testvalue"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>fs</name>.<name>setBeginToken</name></name><argument_list>(<argument><expr>"@"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>fs</name>.<name>setEndToken</name></name><argument_list>(<argument><expr>"@"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name><name>fs</name>.<name>replaceTokens</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Test to see what happens when the resolving occurs in
     * what would be an infinite loop, but with recursion disabled.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testRecursionDisabled</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>result</name> =<init> <expr>"@test1@ line testvalue"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>line</name> =<init> <expr>"@test@ line @test2@"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FilterSet</name></type> <name>fs</name> =<init> <expr>new <call><name>FilterSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>fs</name>.<name>addFilter</name></name><argument_list>(<argument><expr>"test"</expr></argument>, <argument><expr>"@test1@"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>fs</name>.<name>addFilter</name></name><argument_list>(<argument><expr>"test1"</expr></argument>,<argument><expr>"@test@"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>fs</name>.<name>addFilter</name></name><argument_list>(<argument><expr>"test2"</expr></argument>, <argument><expr>"testvalue"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>fs</name>.<name>setBeginToken</name></name><argument_list>(<argument><expr>"@"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>fs</name>.<name>setEndToken</name></name><argument_list>(<argument><expr>"@"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>fs</name>.<name>setRecurse</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name><name>fs</name>.<name>replaceTokens</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNonInfiniteRecursiveMultipleOnSingleLine</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>FilterSet</name></type> <name>filters</name> =<init> <expr>new <call><name>FilterSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>filters</name>.<name>setBeginToken</name></name><argument_list>(<argument><expr>"&lt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>filters</name>.<name>setEndToken</name></name><argument_list>(<argument><expr>"&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>filters</name>.<name>addFilter</name></name><argument_list>(<argument><expr>"ul"</expr></argument>, <argument><expr>"&lt;itemizedlist&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>filters</name>.<name>addFilter</name></name><argument_list>(<argument><expr>"/ul"</expr></argument>, <argument><expr>"&lt;/itemizedList&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>filters</name>.<name>addFilter</name></name><argument_list>(<argument><expr>"li"</expr></argument>, <argument><expr>"&lt;listitem&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>filters</name>.<name>addFilter</name></name><argument_list>(<argument><expr>"/li"</expr></argument>, <argument><expr>"&lt;/listitem&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>result</name> =<init> <expr>"&lt;itemizedlist&gt;&lt;listitem&gt;Item 1&lt;/listitem&gt; &lt;listitem&gt;Item 2&lt;/listitem&gt;&lt;/itemizedList&gt;"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>line</name> =<init> <expr>"&lt;ul&gt;&lt;li&gt;Item 1&lt;/li&gt; &lt;li&gt;Item 2&lt;/li&gt;&lt;/ul&gt;"</expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name><name>filters</name>.<name>replaceTokens</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNestedFilterSets</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"test-nested-filtersets"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>FilterSet</name></type> <name>fs</name> =<init> <expr>(<name>FilterSet</name>) <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getReference</name><argument_list>(<argument><expr>"1"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Hashtable</name></type> <name>filters</name> =<init> <expr><call><name><name>fs</name>.<name>getFilterHash</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><call><name><name>filters</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"value1"</expr></argument>, <argument><expr><call><name><name>filters</name>.<name>get</name></name><argument_list>(<argument><expr>"token1"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>fs</name> = (<name>FilterSet</name>) <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getReference</name><argument_list>(<argument><expr>"2"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>filters</name> = <call><name><name>fs</name>.<name>getFilterHash</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr><call><name><name>filters</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"1111"</expr></argument>, <argument><expr><call><name><name>filters</name>.<name>get</name></name><argument_list>(<argument><expr>"aaaa"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"2222"</expr></argument>, <argument><expr><call><name><name>filters</name>.<name>get</name></name><argument_list>(<argument><expr>"bbbb"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>fs</name> = (<name>FilterSet</name>) <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getReference</name><argument_list>(<argument><expr>"3"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>filters</name> = <call><name><name>fs</name>.<name>getFilterHash</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><call><name><name>filters</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"value4"</expr></argument>, <argument><expr><call><name><name>filters</name>.<name>get</name></name><argument_list>(<argument><expr>"token4"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>fs</name> = (<name>FilterSet</name>) <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getReference</name><argument_list>(<argument><expr>"5"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>filters</name> = <call><name><name>fs</name>.<name>getFilterHash</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><call><name><name>filters</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"value1"</expr></argument>, <argument><expr><call><name><name>filters</name>.<name>get</name></name><argument_list>(<argument><expr>"token1"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFiltersFileElement</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testFiltersFileElement"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testFiltersFileAttribute</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testFiltersFileAttribute"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testMultipleFiltersFiles</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testMultipleFiltersFiles"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testMissingFiltersFile</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>expectBuildException</name><argument_list>(<argument><expr>"testMissingFiltersFile"</expr></argument>,
            <argument><expr>"should fail due to missing filtersfile"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testAllowMissingFiltersFile</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testAllowMissingFiltersFile"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>compareFiles</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name1</name></decl></param>, <param><decl><type><name>String</name></type> <name>name2</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>file1</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>file2</name> =<init> <expr>new <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"root"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <try>try <block>{
            <if>if <condition>(<expr>!<call><name><name>file1</name>.<name>exists</name></name><argument_list>()</argument_list></call> || !<call><name><name>file2</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"One or both files do not exist:" + <name>name1</name> + ", " + <name>name2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr>false</expr>;</return>
            }</block></then></if>

            <if>if <condition>(<expr><call><name><name>file1</name>.<name>length</name></name><argument_list>()</argument_list></call> != <call><name><name>file2</name>.<name>length</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"File size mismatch:" + <name>name1</name> + "(" + <call><name><name>file1</name>.<name>length</name></name><argument_list>()</argument_list></call> + "), " +
                                   <name>name2</name>  + "(" + <call><name><name>file2</name>.<name>length</name></name><argument_list>()</argument_list></call> + ")"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr>false</expr>;</return>
            }</block></then></if>

            <comment type="line">// byte - byte compare</comment>
            <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>buffer1</name> =<init> <expr>new <name><name>byte</name><index>[<expr><name>BUF_SIZE</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>buffer2</name> =<init> <expr>new <name><name>byte</name><index>[<expr><name>BUF_SIZE</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>FileInputStream</name></type> <name>fis1</name> =<init> <expr>new <call><name>FileInputStream</name><argument_list>(<argument><expr><name>file1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>FileInputStream</name></type> <name>fis2</name> =<init> <expr>new <call><name>FileInputStream</name><argument_list>(<argument><expr><name>file2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>index</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>read</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr>(<name>read</name> = <call><name><name>fis1</name>.<name>read</name></name><argument_list>(<argument><expr><name>buffer1</name></expr></argument>)</argument_list></call>) != -1</expr>)</condition> <block>{
                <expr_stmt><expr><call><name><name>fis2</name>.<name>read</name></name><argument_list>(<argument><expr><name>buffer2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>read</name></expr>;</condition> <incr><expr>++<name>i</name></expr>, <expr>++<name>index</name></expr></incr>) <block>{
                    <if>if <condition>(<expr><name><name>buffer1</name><index>[<expr><name>i</name></expr>]</index></name> != <name><name>buffer2</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"Bytes mismatch:" + <name>name1</name> + ", " + <name>name2</name> +
                                           " at byte " + <name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr>false</expr>;</return>
                    }</block></then></if>
                }</block></for>
            }</block></while>
            <return>return <expr>true</expr>;</return>
        }</block>
        <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"IOException comparing files: " + <name>name1</name> + ", " + <name>name2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>false</expr>;</return>
        }</block></catch></try>
    }</block></function>
}</block></class>
</unit>
