<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\util\optional\JavaxScriptRunner.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>optional</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>

<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>ScriptRunnerBase</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>ReflectWrapper</name></name>;</import>

<comment type="javadoc">/**
 * This class is used to run scripts using JSR 223.
 * @since Ant 1.7.0
 */</comment>
<class><specifier>public</specifier> class <name>JavaxScriptRunner</name> <super><extends>extends <name>ScriptRunnerBase</name></extends></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>ReflectWrapper</name></type> <name>engine</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Get the name of the manager prefix.
     * @return "javax"
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getManagerName</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>"javax"</expr>;</return>
    }</block></function>

    <comment type="javadoc">/** {@inheritDoc}. */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>supportsLanguage</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>engine</name> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>checkLanguage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ClassLoader</name></type> <name>origLoader</name> =<init> <expr><call><name>replaceContextLoader</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <return>return <expr><call><name>createEngine</name><argument_list>()</argument_list></call> != <name>null</name></expr>;</return>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>ex</name></decl></param>) <block>{
            <return>return <expr>false</expr>;</return>
        }</block></catch> <finally>finally <block>{
            <expr_stmt><expr><call><name>restoreContextLoader</name><argument_list>(<argument><expr><name>origLoader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <comment type="javadoc">/**
     * Do the work to run the script.
     *
     * @param execName the name that will be passed to the
     *                 scripting engine for this script execution.
     *
     * @exception BuildException if something goes wrong executing the script.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>executeScript</name><parameter_list>(<param><decl><type><name>String</name></type> <name>execName</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>evaluateScript</name><argument_list>(<argument><expr><name>execName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Do the work to eval the script.
     *
     * @param execName the name that will be passed to the
     *                 scripting engine for this script execution.
     * @return the result of the evaluation
     * @exception BuildException if something goes wrong executing the script.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>evaluateScript</name><parameter_list>(<param><decl><type><name>String</name></type> <name>execName</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>checkLanguage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ClassLoader</name></type> <name>origLoader</name> =<init> <expr><call><name>replaceContextLoader</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <decl_stmt><decl><type><name>ReflectWrapper</name></type> <name>engine</name> =<init> <expr><call><name>createEngine</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>engine</name> == <name>null</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                    <argument><expr>"Unable to create javax script engine for "
                    + <call><name>getLanguage</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <for>for (<init><decl><type><name>Iterator</name></type> <name>i</name> =<init> <expr><call><name>getBeans</name><argument_list>()</argument_list></call>.<call><name>keySet</name><argument_list>()</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>i</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>key</name> =<init> <expr>(<name>String</name>) <call><name><name>i</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Object</name></type> <name>value</name> =<init> <expr><call><name>getBeans</name><argument_list>()</argument_list></call>.<call><name>get</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr>"FX".<call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><call><name>getLanguage</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>engine</name>.<name>invoke</name></name><argument_list>(
                        <argument><expr>"put"</expr></argument>, <argument><expr><name><name>String</name>.<name><name/></name></name>class</expr></argument>, <argument><expr><name>key</name>
                        + ":" + <call><name><name>value</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                        <argument><expr><name><name>Object</name>.<name><name/></name></name>class</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name><name>engine</name>.<name>invoke</name></name><argument_list>(
                        <argument><expr>"put"</expr></argument>, <argument><expr><name><name>String</name>.<name><name/></name></name>class</expr></argument>, <argument><expr><name>key</name></expr></argument>,
                        <argument><expr><name><name>Object</name>.<name><name/></name></name>class</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></for>
            <comment type="line">// execute the script</comment>
            <return>return <expr><call><name><name>engine</name>.<name>invoke</name></name><argument_list>(<argument><expr>"eval"</expr></argument>, <argument><expr><name><name>String</name>.<name><name/></name></name>class</expr></argument>, <argument><expr><call><name>getScript</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>be</name></decl></param>) <block>{
            <comment type="line">//catch and rethrow build exceptions</comment>

            <comment type="line">// this may be a BuildException wrapping a ScriptException</comment>
            <comment type="line">// deeply wrapping yet another BuildException - for</comment>
            <comment type="line">// example because of self.fail() - see</comment>
            <comment type="line">// https://issues.apache.org/bugzilla/show_bug.cgi?id=47509</comment>
            <throw>throw <expr><call><name>unwrap</name><argument_list>(<argument><expr><name>be</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <catch>catch (<param><decl><type><name>Exception</name></type> <name>be</name></decl></param>) <block>{
            <comment type="line">//any other exception? Get its cause</comment>
            <decl_stmt><decl><type><name>Throwable</name></type> <name>t</name> =<init> <expr><name>be</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Throwable</name></type> <name>te</name> =<init> <expr><call><name><name>be</name>.<name>getCause</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>te</name> != <name>null</name></expr>)</condition><then> <block>{
                <if>if  <condition>(<expr><name>te</name> <name>instanceof</name> <name>BuildException</name></expr>)</condition><then> <block>{
                    <throw>throw <expr>(<name>BuildException</name>) <name>te</name></expr>;</throw>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><name>t</name> = <name>te</name></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then></if>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <finally>finally <block>{
            <expr_stmt><expr><call><name>restoreContextLoader</name><argument_list>(<argument><expr><name>origLoader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <function><type><specifier>private</specifier> <name>ReflectWrapper</name></type> <name>createEngine</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>engine</name> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>engine</name></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>ReflectWrapper</name></type> <name>manager</name> =<init> <expr>new <call><name>ReflectWrapper</name><argument_list>(
            <argument><expr><call><name>getClass</name><argument_list>()</argument_list></call>.<call><name>getClassLoader</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"javax.script.ScriptEngineManager"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Object</name></type> <name>e</name> =<init> <expr><call><name><name>manager</name>.<name>invoke</name></name><argument_list>(
            <argument><expr>"getEngineByName"</expr></argument>, <argument><expr><name><name>String</name>.<name><name/></name></name>class</expr></argument>, <argument><expr><call><name>getLanguage</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>e</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>ReflectWrapper</name></type> <name>ret</name> =<init> <expr>new <call><name>ReflectWrapper</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>getKeepEngine</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>engine</name></name> = <name>ret</name></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>ret</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Traverse a Throwable's cause(s) and return the BuildException
     * most deeply nested into it - if any.
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>BuildException</name></type> <name>unwrap</name><parameter_list>(<param><decl><type><name>Throwable</name></type> <name>t</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>BuildException</name></type> <name>deepest</name> =<init>
            <expr><name>t</name> <name>instanceof</name> <name>BuildException</name> ? (<name>BuildException</name>) <name>t</name> : <name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Throwable</name></type> <name>current</name> =<init> <expr><name>t</name></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>current</name>.<name>getCause</name></name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition> <block>{
            <expr_stmt><expr><name>current</name> = <call><name><name>current</name>.<name>getCause</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>current</name> <name>instanceof</name> <name>BuildException</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>deepest</name> = (<name>BuildException</name>) <name>current</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></while>
        <return>return <expr><name>deepest</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
