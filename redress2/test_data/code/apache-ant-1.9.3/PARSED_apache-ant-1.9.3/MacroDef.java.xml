<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\MacroDef.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Locale</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashMap</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>AntTypeDefinition</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>ComponentHelper</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>ProjectHelper</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>RuntimeConfigurable</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>TaskContainer</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>UnknownElement</name></name>;</import>

<comment type="javadoc">/**
 * Describe class &lt;code&gt;MacroDef&lt;/code&gt; here.
 *
 * @since Ant 1.6
 */</comment>
<class><specifier>public</specifier> class <name>MacroDef</name> <super><extends>extends <name>AntlibDefinition</name></extends></super>  <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>NestedSequential</name></type> <name>nestedSequential</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type>     <name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type>    <name>backTrace</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>List</name><argument_list>&lt;<argument><name>Attribute</name></argument>&gt;</argument_list></name></type>       <name>attributes</name> =<init> <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>Attribute</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>TemplateElement</name></argument>&gt;</argument_list></name></type>        <name>elements</name>   =<init> <expr>new <call><name><name>HashMap</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>TemplateElement</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type>     <name>textName</name>   =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Text</name></type>       <name>text</name>       =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type>    <name>hasImplicitElement</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Name of the definition
     * @param name the name of the definition
     */</comment>
     <function><type><specifier>public</specifier> <name>void</name></type> <name>setName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>name</name></name> = <name>name</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add the text element.
     * @param text the nested text element to add
     * @since ant 1.6.1
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addConfiguredText</name><parameter_list>(<param><decl><type><name>Text</name></type> <name>text</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>text</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                <argument><expr>"Only one nested text element allowed"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>text</name>.<name>getName</name></name><argument_list>()</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                <argument><expr>"the text nested element needed a \"name\" attribute"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <comment type="line">// Check if used by attributes</comment>
        <for>for (<init><decl><type><name>Attribute</name></type> <name>attribute</name> :<range> <expr><name>attributes</name></expr></range></decl></init>) <block>{
            <if>if <condition>(<expr><call><name><name>text</name>.<name>getName</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><call><name><name>attribute</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                    <argument><expr>"the name \"" + <call><name><name>text</name>.<name>getName</name></name><argument_list>()</argument_list></call>
                    + "\" is already used as an attribute"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
        }</block></for>
        <expr_stmt><expr><name><name>this</name>.<name>text</name></name> = <name>text</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>textName</name></name> = <call><name><name>text</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * @return the nested text element
     * @since ant 1.6.1
     */</comment>
    <function><type><specifier>public</specifier> <name>Text</name></type> <name>getText</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>text</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the backTrace attribute.
     *
     * @param backTrace if true and the macro instance generates
     *                  an error, a backtrace of the location within
     *                  the macro and call to the macro will be output.
     *                  if false, only the location of the call to the
     *                  macro will be shown. Default is true.
     * @since ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBackTrace</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>backTrace</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>backTrace</name></name> = <name>backTrace</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * @return the backTrace attribute.
     * @since ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getBackTrace</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>backTrace</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * This is the sequential nested element of the macrodef.
     *
     * @return a sequential element to be configured.
     */</comment>
    <function><type><specifier>public</specifier> <name>NestedSequential</name></type> <name>createSequential</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>nestedSequential</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Only one sequential allowed"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>nestedSequential</name></name> = new <call><name>NestedSequential</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name><name>this</name>.<name>nestedSequential</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * The class corresponding to the sequential nested element.
     * This is a simple task container.
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>NestedSequential</name> <super><implements>implements <name>TaskContainer</name></implements></super> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name><name>List</name><argument_list>&lt;<argument><name>Task</name></argument>&gt;</argument_list></name></type> <name>nested</name> =<init> <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>Task</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * Add a task or type to the container.
         *
         * @param task an unknown element.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>addTask</name><parameter_list>(<param><decl><type><name>Task</name></type> <name>task</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>nested</name>.<name>add</name></name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * @return the list of unknown elements
         */</comment>
        <function><type><specifier>public</specifier> <name><name>List</name><argument_list>&lt;<argument><name>Task</name></argument>&gt;</argument_list></name></type> <name>getNested</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>nested</name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * A compare function to compare this with another
         * NestedSequential.
         * It calls similar on the nested unknown elements.
         *
         * @param other the nested sequential to compare with.
         * @return true if they are similar, false otherwise
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>similar</name><parameter_list>(<param><decl><type><name>NestedSequential</name></type> <name>other</name></decl></param>)</parameter_list> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>size</name> =<init> <expr><call><name><name>nested</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>size</name> != <call><name><name>other</name>.<name>nested</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>
            }</block></then></if>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>size</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
                <decl_stmt><decl><type><name>UnknownElement</name></type> <name>me</name> =<init> <expr>(<name>UnknownElement</name>) <call><name><name>nested</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>UnknownElement</name></type> <name>o</name> =<init> <expr>(<name>UnknownElement</name>) <call><name><name>other</name>.<name>nested</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr>!<call><name><name>me</name>.<name>similar</name></name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <return>return <expr>false</expr>;</return>
                }</block></then></if>
            }</block></for>
            <return>return <expr>true</expr>;</return>
        }</block></function>
    }</block></class>

    <comment type="javadoc">/**
     * Convert the nested sequential to an unknown element
     * @return the nested sequential as an unknown element.
     */</comment>
    <function><type><specifier>public</specifier> <name>UnknownElement</name></type> <name>getNestedTask</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>UnknownElement</name></type> <name>ret</name> =<init> <expr>new <call><name>UnknownElement</name><argument_list>(<argument><expr>"sequential"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ret</name>.<name>setTaskName</name></name><argument_list>(<argument><expr>"sequential"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ret</name>.<name>setNamespace</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ret</name>.<name>setQName</name></name><argument_list>(<argument><expr>"sequential"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr>new <call><name>RuntimeConfigurable</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr>"sequential"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>size</name> =<init> <expr><call><name><name>nestedSequential</name>.<name>getNested</name></name><argument_list>()</argument_list></call>.<call><name>size</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>size</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
            <decl_stmt><decl><type><name>UnknownElement</name></type> <name>e</name> =<init>
                <expr>(<name>UnknownElement</name>) <call><name><name>nestedSequential</name>.<name>getNested</name></name><argument_list>()</argument_list></call>.<call><name>get</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>ret</name>.<name>addChild</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ret</name>.<name>getWrapper</name></name><argument_list>()</argument_list></call>.<call><name>addChild</name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getWrapper</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>ret</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Gets this macro's attribute (and define?) list.
     *
     * @return the nested Attributes
     */</comment>
    <function><type><specifier>public</specifier> <name><name>List</name><argument_list>&lt;<argument><name>Attribute</name></argument>&gt;</argument_list></name></type> <name>getAttributes</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>attributes</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Gets this macro's elements.
     *
     * @return the map nested elements, keyed by element name, with
     *         {@link TemplateElement} values.
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>TemplateElement</name></argument>&gt;</argument_list></name></type> <name>getElements</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>elements</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Check if a character is a valid character for an element or
     * attribute name.
     *
     * @param c the character to check
     * @return true if the character is a letter or digit or '.' or '-'
     *         attribute name
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isValidNameCharacter</name><parameter_list>(<param><decl><type><name>char</name></type> <name>c</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// ? is there an xml api for this ?</comment>
        <return>return <expr><call><name><name>Character</name>.<name>isLetterOrDigit</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> || <name>c</name> == '.' || <name>c</name> == '-'</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Check if a string is a valid name for an element or attribute.
     *
     * @param name the string to check
     * @return true if the name consists of valid name characters
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isValidName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>name</name>.<name>length</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>name</name>.<name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
            <if>if <condition>(<expr>!<call><name>isValidNameCharacter</name><argument_list>(<argument><expr><call><name><name>name</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>
            }</block></then></if>
        }</block></for>
        <return>return <expr>true</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Add an attribute element.
     *
     * @param attribute an attribute nested element.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addConfiguredAttribute</name><parameter_list>(<param><decl><type><name>Attribute</name></type> <name>attribute</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>attribute</name>.<name>getName</name></name><argument_list>()</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                <argument><expr>"the attribute nested element needed a \"name\" attribute"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>attribute</name>.<name>getName</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><name>textName</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                <argument><expr>"the name \"" + <call><name><name>attribute</name>.<name>getName</name></name><argument_list>()</argument_list></call>
                + "\" has already been used by the text element"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>size</name> =<init> <expr><call><name><name>attributes</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>size</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
            <decl_stmt><decl><type><name>Attribute</name></type> <name>att</name> =<init> <expr>(<name>Attribute</name>) <call><name><name>attributes</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>att</name>.<name>getName</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><call><name><name>attribute</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                    <argument><expr>"the name \"" + <call><name><name>attribute</name>.<name>getName</name></name><argument_list>()</argument_list></call>
                        + "\" has already been used in "
                        + "another attribute element"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
        }</block></for>
        <expr_stmt><expr><call><name><name>attributes</name>.<name>add</name></name><argument_list>(<argument><expr><name>attribute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add an element element.
     *
     * @param element an element nested element.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addConfiguredElement</name><parameter_list>(<param><decl><type><name>TemplateElement</name></type> <name>element</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>element</name>.<name>getName</name></name><argument_list>()</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                <argument><expr>"the element nested element needed a \"name\" attribute"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>elements</name>.<name>get</name></name><argument_list>(<argument><expr><call><name><name>element</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                <argument><expr>"the element " + <call><name><name>element</name>.<name>getName</name></name><argument_list>()</argument_list></call>
                + " has already been specified"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>hasImplicitElement</name>
            || (<call><name><name>element</name>.<name>isImplicit</name></name><argument_list>()</argument_list></call> &amp;&amp; <call><name><name>elements</name>.<name>size</name></name><argument_list>()</argument_list></call> != 0)</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                <argument><expr>"Only one element allowed when using implicit elements"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name>hasImplicitElement</name> = <call><name><name>element</name>.<name>isImplicit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>elements</name>.<name>put</name></name><argument_list>(<argument><expr><call><name><name>element</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Create a new ant type based on the embedded tasks and types.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>nestedSequential</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Missing sequential element"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>name</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Name not specified"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <expr_stmt><expr><name>name</name> = <call><name><name>ProjectHelper</name>.<name>genComponentName</name></name><argument_list>(<argument><expr><call><name>getURI</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>MyAntTypeDefinition</name></type> <name>def</name> =<init> <expr>new <call><name>MyAntTypeDefinition</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>def</name>.<name>setName</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>def</name>.<name>setClass</name></name><argument_list>(<argument><expr><name><name>MacroInstance</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ComponentHelper</name></type> <name>helper</name> =<init> <expr><call><name><name>ComponentHelper</name>.<name>getComponentHelper</name></name><argument_list>(
            <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>helper</name>.<name>addDataTypeDefinition</name></name><argument_list>(<argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"creating macro  " + <name>name</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * An attribute for the MacroDef task.
     *
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Attribute</name> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>name</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>defaultValue</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>description</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>doubleExpanding</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * The name of the attribute.
         *
         * @param name the name of the attribute
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
            <if>if <condition>(<expr>!<call><name>isValidName</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                    <argument><expr>"Illegal name [" + <name>name</name> + "] for attribute"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <expr_stmt><expr><name><name>this</name>.<name>name</name></name> = <call><name><name>name</name>.<name>toLowerCase</name></name><argument_list>(<argument><expr><name><name>Locale</name>.<name>ENGLISH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * @return the name of the attribute
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>name</name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * The default value to use if the parameter is not
         * used in the templated instance.
         *
         * @param defaultValue the default value
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setDefault</name><parameter_list>(<param><decl><type><name>String</name></type> <name>defaultValue</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>defaultValue</name></name> = <name>defaultValue</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * @return the default value, null if not set
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getDefault</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>defaultValue</name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * @param desc Description of the element.
         * @since ant 1.6.1
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setDescription</name><parameter_list>(<param><decl><type><name>String</name></type> <name>desc</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name>description</name> = <name>desc</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * @return the description of the element, or &lt;code&gt;null&lt;/code&gt; if
         *         no description is available.
         * @since ant 1.6.1
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getDescription</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>description</name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * See {@link #isDoubleExpanding} for explanation.
         * @param doubleExpanding true to expand twice, false for just once
         * @since Ant 1.8.3
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setDoubleExpanding</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>doubleExpanding</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>doubleExpanding</name></name> = <name>doubleExpanding</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * Determines whether {@link RuntimeConfigurable#maybeConfigure(Project, boolean)} will reevaluate this property.
         * For compatibility reasons (#52621) it will, though for most applications (#42046) it should not.
         * @return true if expanding twice (the default), false for just once
         * @since Ant 1.8.3
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isDoubleExpanding</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>doubleExpanding</name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * equality method
         *
         * @param obj an &lt;code&gt;Object&lt;/code&gt; value
         * @return a &lt;code&gt;boolean&lt;/code&gt; value
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
            <if>if <condition>(<expr><name>obj</name> == <name>null</name></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>
            }</block></then></if>
            <if>if <condition>(<expr><call><name><name>obj</name>.<name>getClass</name></name><argument_list>()</argument_list></call> != <call><name>getClass</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>
            }</block></then></if>
            <decl_stmt><decl><type><name>Attribute</name></type> <name>other</name> =<init> <expr>(<name>Attribute</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>name</name> == <name>null</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name><name>other</name>.<name>name</name></name> != <name>null</name></expr>)</condition><then> <block>{
                    <return>return <expr>false</expr>;</return>
                }</block></then></if>
            }</block></then> <else>else <if>if <condition>(<expr>!<call><name><name>name</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>other</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>
            }</block></then></if></else></if>
            <if>if <condition>(<expr><name>defaultValue</name> == <name>null</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name><name>other</name>.<name>defaultValue</name></name> != <name>null</name></expr>)</condition><then> <block>{
                    <return>return <expr>false</expr>;</return>
                }</block></then></if>
            }</block></then> <else>else <if>if <condition>(<expr>!<call><name><name>defaultValue</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>other</name>.<name>defaultValue</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>
            }</block></then></if></else></if>
            <return>return <expr>true</expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * @return a hash code value for this object.
         */</comment>
        <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><call><name>objectHashCode</name><argument_list>(<argument><expr><name>defaultValue</name></expr></argument>)</argument_list></call> + <call><name>objectHashCode</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>

    <comment type="javadoc">/**
     * A nested text element for the MacroDef task.
     * @since ant 1.6.1
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Text</name> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type>  <name>name</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>optional</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>trim</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type>  <name>description</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type>  <name>defaultString</name></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * The name of the attribute.
         *
         * @param name the name of the attribute
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
            <if>if <condition>(<expr>!<call><name>isValidName</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                    <argument><expr>"Illegal name [" + <name>name</name> + "] for attribute"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <expr_stmt><expr><name><name>this</name>.<name>name</name></name> = <call><name><name>name</name>.<name>toLowerCase</name></name><argument_list>(<argument><expr><name><name>Locale</name>.<name>ENGLISH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * @return the name of the attribute
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>name</name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * The optional attribute of the text element.
         *
         * @param optional if true this is optional
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setOptional</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>optional</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>optional</name></name> = <name>optional</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * @return true if the text is optional
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getOptional</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>optional</name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * The trim attribute of the text element.
         *
         * @param trim if true this String.trim() is called on
         *             the contents of the text element.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setTrim</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>trim</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>trim</name></name> = <name>trim</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * @return true if the text is trim
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getTrim</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>trim</name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * @param desc Description of the text.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setDescription</name><parameter_list>(<param><decl><type><name>String</name></type> <name>desc</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name>description</name> = <name>desc</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * @return the description of the text, or &lt;code&gt;null&lt;/code&gt; if
         *         no description is available.
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getDescription</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>description</name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * @param defaultString default text for the string.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setDefault</name><parameter_list>(<param><decl><type><name>String</name></type> <name>defaultString</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>defaultString</name></name> = <name>defaultString</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * @return the default text if set, null otherwise.
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getDefault</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>defaultString</name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * equality method
         *
         * @param obj an &lt;code&gt;Object&lt;/code&gt; value
         * @return a &lt;code&gt;boolean&lt;/code&gt; value
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
            <if>if <condition>(<expr><name>obj</name> == <name>null</name></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>
            }</block></then></if>
            <if>if <condition>(<expr><call><name><name>obj</name>.<name>getClass</name></name><argument_list>()</argument_list></call> != <call><name>getClass</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>
            }</block></then></if>
            <decl_stmt><decl><type><name>Text</name></type> <name>other</name> =<init> <expr>(<name>Text</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name>safeCompare</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>other</name>.<name>name</name></name></expr></argument>)</argument_list></call>
                &amp;&amp; <name>optional</name> == <name><name>other</name>.<name>optional</name></name>
                &amp;&amp; <name>trim</name> == <name><name>other</name>.<name>trim</name></name>
                &amp;&amp; <call><name>safeCompare</name><argument_list>(<argument><expr><name>defaultString</name></expr></argument>, <argument><expr><name><name>other</name>.<name>defaultString</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * @return a hash code value for this object.
         */</comment>
        <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><call><name>objectHashCode</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>safeCompare</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>a</name></decl></param>, <param><decl><type><name>Object</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name>a</name> == <name>null</name> ? <name>b</name> == <name>null</name> : <call><name><name>a</name>.<name>equals</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * A nested element for the MacroDef task.
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>TemplateElement</name> <block>{

        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>name</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>description</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>optional</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>implicit</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * Sets the name of this element.
         *
         * @param name the name of the element
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
            <if>if <condition>(<expr>!<call><name>isValidName</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                    <argument><expr>"Illegal name [" + <name>name</name> + "] for macro element"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <expr_stmt><expr><name><name>this</name>.<name>name</name></name> = <call><name><name>name</name>.<name>toLowerCase</name></name><argument_list>(<argument><expr><name><name>Locale</name>.<name>ENGLISH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * Gets the name of this element.
         *
         * @return the name of the element.
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>name</name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Sets a textual description of this element,
         * for build documentation purposes only.
         *
         * @param desc Description of the element.
         * @since ant 1.6.1
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setDescription</name><parameter_list>(<param><decl><type><name>String</name></type> <name>desc</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name>description</name> = <name>desc</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * Gets the description of this element.
         *
         * @return the description of the element, or &lt;code&gt;null&lt;/code&gt; if
         *         no description is available.
         * @since ant 1.6.1
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getDescription</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>description</name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Sets whether this element is optional.
         *
         * @param optional if true this element may be left out, default
         *                 is false.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setOptional</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>optional</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>optional</name></name> = <name>optional</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * Gets whether this element is optional.
         *
         * @return the optional attribute
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isOptional</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>optional</name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Sets whether this element is implicit.
         *
         * @param implicit if true this element may be left out, default
         *                 is false.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setImplicit</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>implicit</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>implicit</name></name> = <name>implicit</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * Gets whether this element is implicit.
         *
         * @return the implicit attribute
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isImplicit</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>implicit</name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * equality method.
         *
         * @param obj an &lt;code&gt;Object&lt;/code&gt; value
         * @return a &lt;code&gt;boolean&lt;/code&gt; value
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
            <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
              <return>return <expr>true</expr>;</return>
            }</block></then></if>
            <if>if <condition>(<expr><name>obj</name> == <name>null</name> || !<call><name><name>obj</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>
            }</block></then></if>
            <decl_stmt><decl><type><name>TemplateElement</name></type> <name>t</name> =<init> <expr>(<name>TemplateElement</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
            <return>return
                <expr>(<name>name</name> == <name>null</name> ? <name><name>t</name>.<name>name</name></name> == <name>null</name> : <call><name><name>name</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>t</name>.<name>name</name></name></expr></argument>)</argument_list></call>)
                &amp;&amp; <name>optional</name> == <name><name>t</name>.<name>optional</name></name>
                &amp;&amp; <name>implicit</name> == <name><name>t</name>.<name>implicit</name></name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * @return a hash code value for this object.
         */</comment>
        <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><call><name>objectHashCode</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call>
                + (<name>optional</name> ? 1 : 0) + (<name>implicit</name> ? 1 : 0)</expr>;</return>
        }</block></function>

    }</block></class> <comment type="line">// END static class TemplateElement</comment>

    <comment type="javadoc">/**
     * same or similar equality method for macrodef, ignores project and
     * runtime info.
     *
     * @param obj an &lt;code&gt;Object&lt;/code&gt; value
     * @param same if true test for sameness, otherwise just similiar
     * @return a &lt;code&gt;boolean&lt;/code&gt; value
     */</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>sameOrSimilar</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>same</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>

        <if>if <condition>(<expr><name>obj</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>obj</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>MacroDef</name></type> <name>other</name> =<init> <expr>(<name>MacroDef</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>name</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name><name>other</name>.<name>name</name></name> == <name>null</name></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>name</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>other</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <comment type="line">// Allow two macro definitions with the same location</comment>
        <comment type="line">// to be treated as similar - bugzilla 31215</comment>
        <if>if <condition>(<expr><call><name><name>other</name>.<name>getLocation</name></name><argument_list>()</argument_list></call> != <name>null</name>
            &amp;&amp; <call><name><name>other</name>.<name>getLocation</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
            &amp;&amp; !<name>same</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>text</name> == <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name><name>other</name>.<name>text</name></name> != <name>null</name></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>
            }</block></then></if>
        }</block></then> <else>else <block>{
            <if>if <condition>(<expr>!<call><name><name>text</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>other</name>.<name>text</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>
            }</block></then></if>
        }</block></else></if>
        <if>if <condition>(<expr><call><name>getURI</name><argument_list>()</argument_list></call> == <name>null</name> || <call><name>getURI</name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call>
            || <call><name>getURI</name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><name><name>ProjectHelper</name>.<name>ANT_CORE_URI</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <if>if <condition>(<expr>!(<call><name><name>other</name>.<name>getURI</name></name><argument_list>()</argument_list></call> == <name>null</name> || <call><name><name>other</name>.<name>getURI</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call>
                  || <call><name><name>other</name>.<name>getURI</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><name><name>ProjectHelper</name>.<name>ANT_CORE_URI</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>
            }</block></then></if>
        }</block></then> <else>else <block>{
            <if>if <condition>(<expr>!<call><name>getURI</name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><call><name><name>other</name>.<name>getURI</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>
            }</block></then></if>
        }</block></else></if>

        <if>if <condition>(<expr>!<call><name><name>nestedSequential</name>.<name>similar</name></name><argument_list>(<argument><expr><name><name>other</name>.<name>nestedSequential</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>attributes</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>other</name>.<name>attributes</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>elements</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>other</name>.<name>elements</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Similar method for this definition
     *
     * @param obj another definition
     * @return true if the definitions are similar
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>similar</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>sameOrSimilar</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Equality method for this definition
     *
     * @param obj another definition
     * @return true if the definitions are the same
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>sameDefinition</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>sameOrSimilar</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * extends AntTypeDefinition, on create
     * of the object, the template macro definition
     * is given.
     */</comment>
    <class><specifier>private</specifier> <specifier>static</specifier> class <name>MyAntTypeDefinition</name> <super><extends>extends <name>AntTypeDefinition</name></extends></super> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>MacroDef</name></type> <name>macroDef</name></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * Creates a new &lt;code&gt;MyAntTypeDefinition&lt;/code&gt; instance.
         *
         * @param macroDef a &lt;code&gt;MacroDef&lt;/code&gt; value
         */</comment>
        <constructor><specifier>public</specifier> <name>MyAntTypeDefinition</name><parameter_list>(<param><decl><type><name>MacroDef</name></type> <name>macroDef</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>macroDef</name></name> = <name>macroDef</name></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="javadoc">/**
         * Create an instance of the definition.
         * The instance may be wrapped in a proxy class.
         * @param project the current project
         * @return the created object
         */</comment>
        <function><type><specifier>public</specifier> <name>Object</name></type> <name>create</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>)</parameter_list> <block>{
            <decl_stmt><decl><type><name>Object</name></type> <name>o</name> =<init> <expr><call><name><name>super</name>.<name>create</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>o</name> == <name>null</name></expr>)</condition><then> <block>{
                <return>return <expr><name>null</name></expr>;</return>
            }</block></then></if>
            <expr_stmt><expr>((<name>MacroInstance</name>) <name>o</name>).<call><name>setMacroDef</name><argument_list>(<argument><expr><name>macroDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>o</name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Equality method for this definition
         *
         * @param other another definition
         * @param project the current project
         * @return true if the definitions are the same
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>sameDefinition</name><parameter_list>(<param><decl><type><name>AntTypeDefinition</name></type> <name>other</name></decl></param>, <param><decl><type><name>Project</name></type> <name>project</name></decl></param>)</parameter_list> <block>{
            <if>if <condition>(<expr>!<call><name><name>super</name>.<name>sameDefinition</name></name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>
            }</block></then></if>
            <decl_stmt><decl><type><name>MyAntTypeDefinition</name></type> <name>otherDef</name> =<init> <expr>(<name>MyAntTypeDefinition</name>) <name>other</name></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>macroDef</name>.<name>sameDefinition</name></name><argument_list>(<argument><expr><name><name>otherDef</name>.<name>macroDef</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Similar method for this definition
         *
         * @param other another definition
         * @param project the current project
         * @return true if the definitions are the same
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>similarDefinition</name><parameter_list>(
            <param><decl><type><name>AntTypeDefinition</name></type> <name>other</name></decl></param>, <param><decl><type><name>Project</name></type> <name>project</name></decl></param>)</parameter_list> <block>{
            <if>if <condition>(<expr>!<call><name><name>super</name>.<name>similarDefinition</name></name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>
            }</block></then></if>
            <decl_stmt><decl><type><name>MyAntTypeDefinition</name></type> <name>otherDef</name> =<init> <expr>(<name>MyAntTypeDefinition</name>) <name>other</name></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>macroDef</name>.<name>similar</name></name><argument_list>(<argument><expr><name><name>otherDef</name>.<name>macroDef</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>objectHashCode</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>o</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>o</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr>0</expr>;</return>
        }</block></then> <else>else <block>{
            <return>return <expr><call><name><name>o</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>

}</block></class>
</unit>
