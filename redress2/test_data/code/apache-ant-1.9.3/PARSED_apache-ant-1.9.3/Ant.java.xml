<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\Ant.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>PrintStream</name></name>;</import>
<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name>.<name>Method</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Hashtable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Set</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashSet</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildListener</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>DefaultLogger</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>ProjectComponent</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>ProjectHelper</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Target</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>MagicNames</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Main</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>PropertySet</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>VectorSet</name></name>;</import>

<comment type="javadoc">/**
 * Build a sub-project.
 *
 *  &lt;pre&gt;
 *  &amp;lt;target name=&amp;quot;foo&amp;quot; depends=&amp;quot;init&amp;quot;&amp;gt;
 *    &amp;lt;ant antfile=&amp;quot;build.xml&amp;quot; target=&amp;quot;bar&amp;quot; &amp;gt;
 *      &amp;lt;property name=&amp;quot;property1&amp;quot; value=&amp;quot;aaaaa&amp;quot; /&amp;gt;
 *      &amp;lt;property name=&amp;quot;foo&amp;quot; value=&amp;quot;baz&amp;quot; /&amp;gt;
 *    &amp;lt;/ant&amp;gt;&lt;/span&gt;
 *  &amp;lt;/target&amp;gt;&lt;/span&gt;
 *
 *  &amp;lt;target name=&amp;quot;bar&amp;quot; depends=&amp;quot;init&amp;quot;&amp;gt;
 *    &amp;lt;echo message=&amp;quot;prop is ${property1} ${foo}&amp;quot; /&amp;gt;
 *  &amp;lt;/target&amp;gt;
 * &lt;/pre&gt;
 *
 *
 * @since Ant 1.1
 *
 * @ant.task category="control"
 */</comment>
<class><specifier>public</specifier> class <name>Ant</name> <super><extends>extends <name>Task</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>FileUtils</name></type> <name>FILE_UTILS</name> =<init> <expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** the basedir where is executed the build file */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>dir</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * the build.xml file (can be absolute) in this case dir will be
     * ignored
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>antFile</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** the output */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>output</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** should we inherit properties from the parent ? */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>inheritAll</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** should we inherit references from the parent ? */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>inheritRefs</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** the properties to pass to the new project */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>Property</name></argument>&gt;</argument_list></name></type> <name>properties</name> =<init> <expr>new <call><name><name>Vector</name><argument_list>&lt;<argument><name>Property</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** the references to pass to the new project */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>Reference</name></argument>&gt;</argument_list></name></type> <name>references</name> =<init> <expr>new <call><name><name>Vector</name><argument_list>&lt;<argument><name>Reference</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** the temporary project created to run the build file */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Project</name></type> <name>newProject</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The stream to which output is to be written. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>PrintStream</name></type> <name>out</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** the sets of properties to pass to the new project */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>PropertySet</name></argument>&gt;</argument_list></name></type> <name>propertySets</name> =<init> <expr>new <call><name><name>Vector</name><argument_list>&lt;<argument><name>PropertySet</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** the targets to call on the new project */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>targets</name> =<init> <expr>new <call><name><name>Vector</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** whether the target attribute was specified **/</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>targetAttributeSet</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Whether the basedir of the new project should be the same one
     * as it would be when running the build file directly -
     * independent of dir and/or inheritAll settings.
     *
     * @since Ant 1.8.0
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>useNativeBasedir</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * simple constructor
     */</comment>
    <constructor><specifier>public</specifier> <name>Ant</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">//default</comment>
    }</block></constructor>

    <comment type="javadoc">/**
     * create a task bound to its creator
     * @param owner owning task
     */</comment>
    <constructor><specifier>public</specifier> <name>Ant</name><parameter_list>(<param><decl><type><name>Task</name></type> <name>owner</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>bindToOwner</name><argument_list>(<argument><expr><name>owner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Whether the basedir of the new project should be the same one
     * as it would be when running the build file directly -
     * independent of dir and/or inheritAll settings.
     *
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUseNativeBasedir</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>useNativeBasedir</name> = <name>b</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * If true, pass all properties to the new Ant project.
     * Defaults to true.
     * @param value if true pass all properties to the new Ant project.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setInheritAll</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>inheritAll</name> = <name>value</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * If true, pass all references to the new Ant project.
     * Defaults to false.
     * @param value if true, pass all references to the new Ant project
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setInheritRefs</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>inheritRefs</name> = <name>value</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Creates a Project instance for the project to call.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>init</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>newProject</name> = <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>createSubProject</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>newProject</name>.<name>setJavaVersionProperty</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Called in execute or createProperty (via getNewProject())
     * if newProject is null.
     *
     * &lt;p&gt;This can happen if the same instance of this task is run
     * twice as newProject is set to null at the end of execute (to
     * save memory and help the GC).&lt;/p&gt;
     * &lt;p&gt;calls init() again&lt;/p&gt;
     *
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>reinit</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Attaches the build listeners of the current project to the new
     * project, configures a possible logfile, transfers task and
     * data-type definitions, transfers properties (either all or just
     * the ones specified as user properties to the current project,
     * depending on inheritall), transfers the input handler.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>initializeProject</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>newProject</name>.<name>setInputHandler</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getInputHandler</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>Iterator</name><argument_list>&lt;<argument><name>BuildListener</name></argument>&gt;</argument_list></name></type> <name>iter</name> =<init> <expr><call><name>getBuildListeners</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>iter</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <expr_stmt><expr><call><name><name>newProject</name>.<name>addBuildListener</name></name><argument_list>(<argument><expr>(<name>BuildListener</name>) <call><name><name>iter</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>

        <if>if <condition>(<expr><name>output</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>File</name></type> <name>outfile</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>dir</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>outfile</name> = <call><name><name>FILE_UTILS</name>.<name>resolveFile</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>outfile</name> = <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>resolveFile</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <try>try <block>{
                <expr_stmt><expr><name>out</name> = new <call><name>PrintStream</name><argument_list>(<argument><expr>new <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>DefaultLogger</name></type> <name>logger</name> =<init> <expr>new <call><name>DefaultLogger</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>logger</name>.<name>setMessageOutputLevel</name></name><argument_list>(<argument><expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>logger</name>.<name>setOutputPrintStream</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>logger</name>.<name>setErrorPrintStream</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>newProject</name>.<name>addBuildListener</name></name><argument_list>(<argument><expr><name>logger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ex</name></decl></param>) <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Ant: Can't set output to " + <name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></then></if>
        <comment type="line">// set user-defined properties</comment>
        <if>if <condition>(<expr><name>useNativeBasedir</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>addAlmostAll</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getUserProperties</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>PropertyType</name>.<name>USER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>copyUserProperties</name><argument_list>(<argument><expr><name>newProject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <if>if <condition>(<expr>!<name>inheritAll</name></expr>)</condition><then> <block>{
           <comment type="line">// set Ant's built-in properties separately,</comment>
           <comment type="line">// because they are not being inherited.</comment>
           <expr_stmt><expr><call><name><name>newProject</name>.<name>initProperties</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        }</block></then> <else>else <block>{
            <comment type="line">// set all properties from calling project</comment>
            <expr_stmt><expr><call><name>addAlmostAll</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getProperties</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>PropertyType</name>.<name>PLAIN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <for>for (<init><decl><type><name>PropertySet</name></type> <name>ps</name> :<range> <expr><name>propertySets</name></expr></range></decl></init>) <block>{
            <expr_stmt><expr><call><name>addAlmostAll</name><argument_list>(<argument><expr><call><name><name>ps</name>.<name>getProperties</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>PropertyType</name>.<name>PLAIN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Handles output.
     * Send it the the new project if is present, otherwise
     * call the super class.
     * @param outputToHandle The string output to output.
     * @see Task#handleOutput(String)
     * @since Ant 1.5
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>handleOutput</name><parameter_list>(<param><decl><type><name>String</name></type> <name>outputToHandle</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>newProject</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>newProject</name>.<name>demuxOutput</name></name><argument_list>(<argument><expr><name>outputToHandle</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>super</name>.<name>handleOutput</name></name><argument_list>(<argument><expr><name>outputToHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Handles input.
     * Delegate to the created project, if present, otherwise
     * call the super class.
     * @param buffer the buffer into which data is to be read.
     * @param offset the offset into the buffer at which data is stored.
     * @param length the amount of data to read.
     *
     * @return the number of bytes read.
     *
     * @exception IOException if the data cannot be read.
     * @see Task#handleInput(byte[], int, int)
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>handleInput</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buffer</name></decl></param>, <param><decl><type><name>int</name></type> <name>offset</name></decl></param>, <param><decl><type><name>int</name></type> <name>length</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>newProject</name> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>newProject</name>.<name>demuxInput</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name><name>super</name>.<name>handleInput</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Handles output.
     * Send it the the new project if is present, otherwise
     * call the super class.
     * @param toFlush The string to output.
     * @see Task#handleFlush(String)
     * @since Ant 1.5.2
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>handleFlush</name><parameter_list>(<param><decl><type><name>String</name></type> <name>toFlush</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>newProject</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>newProject</name>.<name>demuxFlush</name></name><argument_list>(<argument><expr><name>toFlush</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>super</name>.<name>handleFlush</name></name><argument_list>(<argument><expr><name>toFlush</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Handle error output.
     * Send it the the new project if is present, otherwise
     * call the super class.
     * @param errorOutputToHandle The string to output.
     *
     * @see Task#handleErrorOutput(String)
     * @since Ant 1.5
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>handleErrorOutput</name><parameter_list>(<param><decl><type><name>String</name></type> <name>errorOutputToHandle</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>newProject</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>newProject</name>.<name>demuxOutput</name></name><argument_list>(<argument><expr><name>errorOutputToHandle</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>super</name>.<name>handleErrorOutput</name></name><argument_list>(<argument><expr><name>errorOutputToHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Handle error output.
     * Send it the the new project if is present, otherwise
     * call the super class.
     * @param errorOutputToFlush The string to output.
     * @see Task#handleErrorFlush(String)
     * @since Ant 1.5.2
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>handleErrorFlush</name><parameter_list>(<param><decl><type><name>String</name></type> <name>errorOutputToFlush</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>newProject</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>newProject</name>.<name>demuxFlush</name></name><argument_list>(<argument><expr><name>errorOutputToFlush</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>super</name>.<name>handleErrorFlush</name></name><argument_list>(<argument><expr><name>errorOutputToFlush</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Do the execution.
     * @throws BuildException if a target tries to call itself;
     * probably also if a BuildException is thrown by the new project.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>savedDir</name> =<init> <expr><name>dir</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>savedAntFile</name> =<init> <expr><name>antFile</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Vector</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>locals</name> =<init> <expr>new <call><name><name>VectorSet</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>targets</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name>getNewProject</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><name>dir</name> == <name>null</name> &amp;&amp; <name>inheritAll</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>dir</name> = <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><call><name>initializeProject</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><name>dir</name> != <name>null</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr>!<name>useNativeBasedir</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>newProject</name>.<name>setBaseDir</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>savedDir</name> != <name>null</name></expr>)</condition><then> <block>{
                        <comment type="line">// has been set explicitly</comment>
                        <expr_stmt><expr><call><name><name>newProject</name>.<name>setInheritedProperty</name></name><argument_list>(<argument><expr><name><name>MagicNames</name>.<name>PROJECT_BASEDIR</name></name></expr></argument>,
                                                        <argument><expr><call><name><name>dir</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then></if>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>dir</name> = <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

            <expr_stmt><expr><call><name>overrideProperties</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><name>antFile</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>antFile</name> = <call><name>getDefaultBuildFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <decl_stmt><decl><type><name>File</name></type> <name>file</name> =<init> <expr><call><name><name>FILE_UTILS</name>.<name>resolveFile</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>antFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>antFile</name> = <call><name><name>file</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"calling target(s) "
                + ((<call><name><name>locals</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 0) ? <call><name><name>locals</name>.<name>toString</name></name><argument_list>()</argument_list></call> : "[default]")
                + " in build file " + <name>antFile</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>newProject</name>.<name>setUserProperty</name></name><argument_list>(<argument><expr><name><name>MagicNames</name>.<name>ANT_FILE</name></name></expr></argument> , <argument><expr><name>antFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>String</name></type> <name>thisAntFile</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getProperty</name><argument_list>(<argument><expr><name><name>MagicNames</name>.<name>ANT_FILE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// Are we trying to call the target in which we are defined (or</comment>
            <comment type="line">// the build file if this is a top level task)?</comment>
            <if>if <condition>(<expr><name>thisAntFile</name> != <name>null</name>
                &amp;&amp; <call><name><name>file</name>.<name>equals</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>resolveFile</name><argument_list>(<argument><expr><name>thisAntFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                &amp;&amp; <call><name>getOwningTarget</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{

                <if>if <condition>(<expr><call><name>getOwningTarget</name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><call><name>getTaskName</name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr>"antcall"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"antcall must not be used at"
                                                 + " the top level."</expr></argument>)</argument_list></call></expr>;</throw>
                    }</block></then></if>
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><call><name>getTaskName</name><argument_list>()</argument_list></call> + " task at the"
                                + " top level must not invoke"
                                + " its own build file."</expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if>
            }</block></then></if>

            <try>try <block>{
                <expr_stmt><expr><call><name><name>ProjectHelper</name>.<name>configureProject</name></name><argument_list>(<argument><expr><name>newProject</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>ex</name></decl></param>) <block>{
                <throw>throw <expr><call><name><name>ProjectHelper</name>.<name>addLocationToBuildException</name></name><argument_list>(
                    <argument><expr><name>ex</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>

            <if>if <condition>(<expr><call><name><name>locals</name>.<name>size</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>defaultTarget</name> =<init> <expr><call><name><name>newProject</name>.<name>getDefaultTarget</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>defaultTarget</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>locals</name>.<name>add</name></name><argument_list>(<argument><expr><name>defaultTarget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>

            <if>if <condition>(<expr><call><name><name>newProject</name>.<name>getProperty</name></name><argument_list>(<argument><expr><name><name>MagicNames</name>.<name>ANT_FILE</name></name></expr></argument>)</argument_list></call>
                .<call><name>equals</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getProperty</name><argument_list>(<argument><expr><name><name>MagicNames</name>.<name>ANT_FILE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                &amp;&amp; <call><name>getOwningTarget</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{

                <decl_stmt><decl><type><name>String</name></type> <name>owningTargetName</name> =<init> <expr><call><name>getOwningTarget</name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name><name>locals</name>.<name>contains</name></name><argument_list>(<argument><expr><name>owningTargetName</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><call><name>getTaskName</name><argument_list>()</argument_list></call> + " task calling "
                                             + "its own parent target."</expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if>
                <decl_stmt><decl><type><name>boolean</name></type> <name>circular</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
                <for>for (<init><decl><type><name><name>Iterator</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>it</name> =<init> <expr><call><name><name>locals</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init>
                     <condition><expr>!<name>circular</name> &amp;&amp; <call><name><name>it</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
                    <decl_stmt><decl><type><name>Target</name></type> <name>other</name> =<init>
                        <expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getTargets</name><argument_list>()</argument_list></call>.<call><name>get</name><argument_list>(<argument><expr><call><name><name>it</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>circular</name> |= (<name>other</name> != <name>null</name>
                                 &amp;&amp; <call><name><name>other</name>.<name>dependsOn</name></name><argument_list>(<argument><expr><name>owningTargetName</name></expr></argument>)</argument_list></call>)</expr>;</expr_stmt>
                }</block></for>
                <if>if <condition>(<expr><name>circular</name></expr>)</condition><then> <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><call><name>getTaskName</name><argument_list>()</argument_list></call>
                                             + " task calling a target"
                                             + " that depends on"
                                             + " its parent target \'"
                                             + <name>owningTargetName</name>
                                             + "\'."</expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if>
            }</block></then></if>

            <expr_stmt><expr><call><name>addReferences</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><call><name><name>locals</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 0 &amp;&amp; !(<call><name><name>locals</name>.<name>size</name></name><argument_list>()</argument_list></call> == 1
                                       &amp;&amp; "".<call><name>equals</name><argument_list>(<argument><expr><call><name><name>locals</name>.<name>get</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>BuildException</name></type> <name>be</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <try>try <block>{
                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Entering " + <name>antFile</name> + "..."</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>newProject</name>.<name>fireSubBuildStarted</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>newProject</name>.<name>executeTargets</name></name><argument_list>(<argument><expr><name>locals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>ex</name></decl></param>) <block>{
                    <expr_stmt><expr><name>be</name> = <call><name><name>ProjectHelper</name>
                        .<name>addLocationToBuildException</name></name><argument_list>(<argument><expr><name>ex</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <throw>throw <expr><name>be</name></expr>;</throw>
                }</block></catch> <finally>finally <block>{
                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Exiting " + <name>antFile</name> + "."</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>newProject</name>.<name>fireSubBuildFinished</name></name><argument_list>(<argument><expr><name>be</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></finally></try>
            }</block></then></if>
        }</block> <finally>finally <block>{
            <comment type="line">// help the gc</comment>
            <expr_stmt><expr><name>newProject</name> = <name>null</name></expr>;</expr_stmt>
            <for>for (<init><decl><type><name>Property</name></type> <name>p</name> :<range> <expr><name>properties</name></expr></range></decl></init>) <block>{
                <expr_stmt><expr><call><name><name>p</name>.<name>setProject</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>

            <if>if <condition>(<expr><name>output</name> != <name>null</name> &amp;&amp; <name>out</name> != <name>null</name></expr>)</condition><then> <block>{
                <try>try <block>{
                    <expr_stmt><expr><call><name><name>out</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><specifier>final</specifier> <name>Exception</name></type> <name>ex</name></decl></param>) <block>{
                    <comment type="line">//ignore</comment>
                }</block></catch></try>
            }</block></then></if>
            <expr_stmt><expr><name>dir</name> = <name>savedDir</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>antFile</name> = <name>savedAntFile</name></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <comment type="javadoc">/**
     * Get the default build file name to use when launching the task.
     * &lt;p&gt;
     * This function may be overrided by providers of custom ProjectHelper so they can implement easily their sub
     * launcher.
     *
     * @return the name of the default file
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>getDefaultBuildFile</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>Main</name>.<name>DEFAULT_BUILD_FILENAME</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Override the properties in the new project with the one
     * explicitly defined as nested elements here.
     * @throws BuildException under unknown circumstances.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>overrideProperties</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <comment type="line">// remove duplicate properties - last property wins</comment>
        <comment type="line">// Needed for backward compatibility</comment>
        <decl_stmt><decl><type><name><name>Set</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>set</name> =<init> <expr>new <call><name><name>HashSet</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr><call><name><name>properties</name>.<name>size</name></name><argument_list>()</argument_list></call> - 1</expr></init></decl>;</init> <condition><expr><name>i</name> &gt;= 0</expr>;</condition> <incr><expr>--<name>i</name></expr></incr>) <block>{
            <decl_stmt><decl><type><name>Property</name></type> <name>p</name> =<init> <expr><call><name><name>properties</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>p</name>.<name>getName</name></name><argument_list>()</argument_list></call> != <name>null</name> &amp;&amp; !<call><name><name>p</name>.<name>getName</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><call><name><name>set</name>.<name>contains</name></name><argument_list>(<argument><expr><call><name><name>p</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>properties</name>.<name>remove</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name><name>set</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>p</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then></if>
        }</block></for>
        <decl_stmt><decl><type><name><name>Enumeration</name><argument_list>&lt;<argument><name>Property</name></argument>&gt;</argument_list></name></type> <name>e</name> =<init> <expr><call><name><name>properties</name>.<name>elements</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>Property</name></type> <name>p</name> =<init> <expr><call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>p</name>.<name>setProject</name></name><argument_list>(<argument><expr><name>newProject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>p</name>.<name>execute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <if>if <condition>(<expr><name>useNativeBasedir</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>addAlmostAll</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getInheritedProperties</name><argument_list>()</argument_list></call></expr></argument>,
                         <argument><expr><name><name>PropertyType</name>.<name>INHERITED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>copyInheritedProperties</name><argument_list>(<argument><expr><name>newProject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Add the references explicitly defined as nested elements to the
     * new project.  Also copy over all references that don't override
     * existing references in the new project if inheritrefs has been
     * requested.
     * @throws BuildException if a reference does not have a refid.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>addReferences</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><annotation>@<name>SuppressWarnings</name><argument_list>("unchecked")</argument_list></annotation>
        <name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>thisReferences</name>
            =<init> <expr>(<name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name>) <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getReferences</name><argument_list>()</argument_list></call>.<call><name>clone</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>Reference</name></type> <name>ref</name> :<range> <expr><name>references</name></expr></range></decl></init>) <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>refid</name> =<init> <expr><call><name><name>ref</name>.<name>getRefId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>refid</name> == <name>null</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"the refid attribute is required"
                                         + " for reference elements"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <if>if <condition>(<expr>!<call><name><name>thisReferences</name>.<name>containsKey</name></name><argument_list>(<argument><expr><name>refid</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Parent project doesn't contain any reference '"
                    + <name>refid</name> + "'"</expr></argument>,
                    <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            }</block></then></if>

            <expr_stmt><expr><call><name><name>thisReferences</name>.<name>remove</name></name><argument_list>(<argument><expr><name>refid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>toRefid</name> =<init> <expr><call><name><name>ref</name>.<name>getToRefid</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>toRefid</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>toRefid</name> = <name>refid</name></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name>copyReference</name><argument_list>(<argument><expr><name>refid</name></expr></argument>, <argument><expr><name>toRefid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <comment type="line">// Now add all references that are not defined in the</comment>
        <comment type="line">// subproject, if inheritRefs is true</comment>
        <if>if <condition>(<expr><name>inheritRefs</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name><name>Hashtable</name><argument_list>&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>newReferences</name> =<init> <expr><call><name><name>newProject</name>.<name>getReferences</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>String</name></type> <name>key</name> :<range> <expr><call><name><name>thisReferences</name>.<name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>) <block>{
                <if>if <condition>(<expr><call><name><name>newReferences</name>.<name>containsKey</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <continue>continue;</continue>
                }</block></then></if>
                <expr_stmt><expr><call><name>copyReference</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>newProject</name>.<name>inheritIDReferences</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Try to clone and reconfigure the object referenced by oldkey in
     * the parent project and add it to the new project with the key newkey.
     *
     * &lt;p&gt;If we cannot clone it, copy the referenced object itself and
     * keep our fingers crossed.&lt;/p&gt;
     * @param oldKey the reference id in the current project.
     * @param newKey the reference id in the new project.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>copyReference</name><parameter_list>(<param><decl><type><name>String</name></type> <name>oldKey</name></decl></param>, <param><decl><type><name>String</name></type> <name>newKey</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Object</name></type> <name>orig</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getReference</name><argument_list>(<argument><expr><name>oldKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>orig</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"No object referenced by " + <name>oldKey</name> + ". Can't copy to "
                + <name>newKey</name></expr></argument>,
                <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>c</name> =<init> <expr><call><name><name>orig</name>.<name>getClass</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Object</name></type> <name>copy</name> =<init> <expr><name>orig</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <decl_stmt><decl><type><name>Method</name></type> <name>cloneM</name> =<init> <expr><call><name><name>c</name>.<name>getMethod</name></name><argument_list>(<argument><expr>"clone"</expr></argument>, <argument><expr>new <name><name>Class</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>cloneM</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>copy</name> = <call><name><name>cloneM</name>.<name>invoke</name></name><argument_list>(<argument><expr><name>orig</name></expr></argument>, <argument><expr>new <name><name>Object</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Adding clone of reference " + <name>oldKey</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
            <comment type="line">// not Clonable</comment>
        }</block></catch></try>


        <if>if <condition>(<expr><name>copy</name> <name>instanceof</name> <name>ProjectComponent</name></expr>)</condition><then> <block>{
            <expr_stmt><expr>((<name>ProjectComponent</name>) <name>copy</name>).<call><name>setProject</name><argument_list>(<argument><expr><name>newProject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <try>try <block>{
                <decl_stmt><decl><type><name>Method</name></type> <name>setProjectM</name> =<init>
                    <expr><call><name><name>c</name>.<name>getMethod</name></name><argument_list>(<argument><expr>"setProject"</expr></argument>, <argument><expr>new <name><name>Class</name><index>[]</index></name> <block>{<expr><name><name>Project</name>.<name><name/></name></name>class</expr>}</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>setProjectM</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>setProjectM</name>.<name>invoke</name></name><argument_list>(<argument><expr><name>copy</name></expr></argument>, <argument><expr>new <name><name>Object</name><index>[]</index></name> <block>{<expr><name>newProject</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block> <catch>catch (<param><decl><type><name>NoSuchMethodException</name></type> <name>e</name></decl></param>) <block>{
                <comment type="line">// ignore this if the class being referenced does not have</comment>
                <comment type="line">// a set project method.</comment>
            }</block></catch> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e2</name></decl></param>) <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>msg</name> =<init> <expr>"Error setting new project instance for "
                    + "reference with id " + <name>oldKey</name></expr></init></decl>;</decl_stmt>
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>e2</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></else></if>
        <expr_stmt><expr><call><name><name>newProject</name>.<name>addReference</name></name><argument_list>(<argument><expr><name>newKey</name></expr></argument>, <argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Copies all properties from the given table to the new project -
     * omitting those that have already been set in the new project as
     * well as properties named basedir or ant.file.
     * @param props properties &lt;code&gt;Hashtable&lt;/code&gt; to copy to the
     * new project.
     * @param the type of property to set (a plain Ant property, a
     * user property or an inherited property).
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>addAlmostAll</name><parameter_list>(<param><decl><type><name><name>Hashtable</name><argument_list>&lt;<argument><name>?</name></argument>, <argument><name>?</name></argument>&gt;</argument_list></name></type> <name>props</name></decl></param>, <param><decl><type><name>PropertyType</name></type> <name>type</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>Enumeration</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>e</name> =<init> <expr><call><name><name>props</name>.<name>keys</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>key</name> =<init> <expr><call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>MagicNames</name>.<name>PROJECT_BASEDIR</name>.<name>equals</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call>
                || <call><name><name>MagicNames</name>.<name>ANT_FILE</name>.<name>equals</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <comment type="line">// basedir and ant.file get special treatment in execute()</comment>
                <continue>continue;</continue>
            }</block></then></if>

            <decl_stmt><decl><type><name>String</name></type> <name>value</name> =<init> <expr><call><name><name>props</name>.<name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>type</name> == <name><name>PropertyType</name>.<name>PLAIN</name></name></expr>)</condition><then> <block>{
                <comment type="line">// don't re-set user properties, avoid the warning message</comment>
                <if>if <condition>(<expr><call><name><name>newProject</name>.<name>getProperty</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
                    <comment type="line">// no user property</comment>
                    <expr_stmt><expr><call><name><name>newProject</name>.<name>setNewProperty</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then> <else>else <if>if <condition>(<expr><name>type</name> == <name><name>PropertyType</name>.<name>USER</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>newProject</name>.<name>setUserProperty</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><name>type</name> == <name><name>PropertyType</name>.<name>INHERITED</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>newProject</name>.<name>setInheritedProperty</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if></else></if>
        }</block></while>
    }</block></function>

    <comment type="javadoc">/**
     * The directory to use as a base directory for the new Ant project.
     * Defaults to the current project's basedir, unless inheritall
     * has been set to false, in which case it doesn't have a default
     * value. This will override the basedir setting of the called project.
     * @param dir new directory as &lt;code&gt;File&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDir</name><parameter_list>(<param><decl><type><name>File</name></type> <name>dir</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>dir</name></name> = <name>dir</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The build file to use. Defaults to "build.xml". This file is expected
     * to be a filename relative to the dir attribute given.
     * @param antFile the &lt;code&gt;String&lt;/code&gt; build file name.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAntfile</name><parameter_list>(<param><decl><type><name>String</name></type> <name>antFile</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// @note: it is a string and not a file to handle relative/absolute</comment>
        <comment type="line">// otherwise a relative file will be resolved based on the current</comment>
        <comment type="line">// basedir.</comment>
        <expr_stmt><expr><name><name>this</name>.<name>antFile</name></name> = <name>antFile</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The target of the new Ant project to execute.
     * Defaults to the new project's default target.
     * @param targetToAdd the name of the target to invoke.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTarget</name><parameter_list>(<param><decl><type><name>String</name></type> <name>targetToAdd</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>targetToAdd</name>.<name>equals</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"target attribute must not be empty"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>targets</name>.<name>add</name></name><argument_list>(<argument><expr><name>targetToAdd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>targetAttributeSet</name> = true</expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the filename to write the output to. This is relative to the value
     * of the dir attribute if it has been set or to the base directory of the
     * current project otherwise.
     * @param outputFile the name of the file to which the output should go.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOutput</name><parameter_list>(<param><decl><type><name>String</name></type> <name>outputFile</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>output</name></name> = <name>outputFile</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Property to pass to the new project.
     * The property is passed as a 'user property'.
     * @return the created &lt;code&gt;Property&lt;/code&gt; object.
     */</comment>
    <function><type><specifier>public</specifier> <name>Property</name></type> <name>createProperty</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Property</name></type> <name>p</name> =<init> <expr>new <call><name>Property</name><argument_list>(<argument><expr>true</expr></argument>, <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>setProject</name></name><argument_list>(<argument><expr><call><name>getNewProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>setTaskName</name></name><argument_list>(<argument><expr>"property"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>properties</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Add a Reference element identifying a data type to carry
     * over to the new project.
     * @param ref &lt;code&gt;Reference&lt;/code&gt; to add.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addReference</name><parameter_list>(<param><decl><type><name>Reference</name></type> <name>ref</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>references</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a target to this Ant invocation.
     * @param t the &lt;code&gt;TargetElement&lt;/code&gt; to add.
     * @since Ant 1.6.3
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addConfiguredTarget</name><parameter_list>(<param><decl><type><name>TargetElement</name></type> <name>t</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>targetAttributeSet</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                <argument><expr>"nested target is incompatible with the target attribute"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> =<init> <expr><call><name><name>t</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>name</name>.<name>equals</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"target name must not be empty"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>targets</name>.<name>add</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Add a set of properties to pass to the new project.
     *
     * @param ps &lt;code&gt;PropertySet&lt;/code&gt; to add.
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addPropertyset</name><parameter_list>(<param><decl><type><name>PropertySet</name></type> <name>ps</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>propertySets</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the (sub)-Project instance currently in use.
     * @return Project
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>protected</specifier> <name>Project</name></type> <name>getNewProject</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>newProject</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>reinit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>newProject</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * @since Ant 1.6.2
     */</comment>
    <function><type><specifier>private</specifier> <name><name>Iterator</name><argument_list>&lt;<argument><name>BuildListener</name></argument>&gt;</argument_list></name></type> <name>getBuildListeners</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBuildListeners</name><argument_list>()</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Helper class that implements the nested &amp;lt;reference&amp;gt;
     * element of &amp;lt;ant&amp;gt; and &amp;lt;antcall&amp;gt;.
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Reference</name>
        <super><extends>extends <name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Reference</name></extends></super> <block>{

        <comment type="javadoc">/** Creates a reference to be configured by Ant. */</comment>
        <constructor><specifier>public</specifier> <name>Reference</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>targetid</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * Set the id that this reference to be stored under in the
         * new project.
         *
         * @param targetid the id under which this reference will be passed to
         *        the new project. */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setToRefid</name><parameter_list>(<param><decl><type><name>String</name></type> <name>targetid</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>targetid</name></name> = <name>targetid</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * Get the id under which this reference will be stored in the new
         * project.
         *
         * @return the id of the reference in the new project.
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getToRefid</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>targetid</name></expr>;</return>
        }</block></function>
    }</block></class>

    <comment type="javadoc">/**
     * Helper class that implements the nested &amp;lt;target&amp;gt;
     * element of &amp;lt;ant&amp;gt; and &amp;lt;antcall&amp;gt;.
     * @since Ant 1.6.3
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>TargetElement</name> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>name</name></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * Default constructor.
         */</comment>
        <constructor><specifier>public</specifier> <name>TargetElement</name><parameter_list>()</parameter_list> <block>{
                <comment type="line">//default</comment>
        }</block></constructor>

        <comment type="javadoc">/**
         * Set the name of this TargetElement.
         * @param name   the &lt;code&gt;String&lt;/code&gt; target name.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>name</name></name> = <name>name</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * Get the name of this TargetElement.
         * @return &lt;code&gt;String&lt;/code&gt;.
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>name</name></expr>;</return>
        }</block></function>
    }</block></class>

    <class><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>PropertyType</name> <block>{
        <constructor><specifier>private</specifier> <name>PropertyType</name><parameter_list>()</parameter_list> <block>{}</block></constructor>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>PropertyType</name></type> <name>PLAIN</name> =<init> <expr>new <call><name>PropertyType</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>PropertyType</name></type> <name>INHERITED</name> =<init> <expr>new <call><name>PropertyType</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>PropertyType</name></type> <name>USER</name> =<init> <expr>new <call><name>PropertyType</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    }</block></class>
}</block></class>
</unit>
