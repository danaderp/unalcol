<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\types\Environment.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>

<comment type="javadoc">/**
 * Wrapper for environment variables.
 *
 */</comment>
<class><specifier>public</specifier> class <name>Environment</name> <block>{
    <comment type="line">// CheckStyle:VisibilityModifier OFF - bc</comment>

    <comment type="javadoc">/**
     * a vector of type Environment.Variable
     * @see Variable
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>Variable</name></argument>&gt;</argument_list></name></type> <name>variables</name></decl>;</decl_stmt>

    <comment type="line">// CheckStyle:VisibilityModifier ON</comment>

    <comment type="javadoc">/**
     * representation of a single env value
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Variable</name> <block>{

        <comment type="javadoc">/**
         * env key and value pair; everything gets expanded to a string
         * during assignment
         */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>key</name>, <name>value</name></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * Constructor for variable
         *
         */</comment>
        <constructor><specifier>public</specifier> <name>Variable</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="javadoc">/**
         * set the key
         * @param key string
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setKey</name><parameter_list>(<param><decl><type><name>String</name></type> <name>key</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>key</name></name> = <name>key</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * set the value
         * @param value string value
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setValue</name><parameter_list>(<param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>value</name></name> = <name>value</name></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * key accessor
         * @return key
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getKey</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name><name>this</name>.<name>key</name></name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * value accessor
         * @return value
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getValue</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name><name>this</name>.<name>value</name></name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * stringify path and assign to the value.
         * The value will contain all path elements separated by the appropriate
         * separator
         * @param path path
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setPath</name><parameter_list>(<param><decl><type><name>Path</name></type> <name>path</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>value</name></name> = <call><name><name>path</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * get the absolute path of a file and assign it to the value
         * @param file file to use as the value
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setFile</name><parameter_list>(<param><decl><type><name><name>java</name>.<name>io</name>.<name>File</name></name></type> <name>file</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>value</name></name> = <call><name><name>file</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * get the assigment string
         * This is not ready for insertion into a property file without following
         * the escaping rules of the properties class.
         * @return a string of the form key=value.
         * @throws BuildException if key or value are unassigned
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getContent</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
            <expr_stmt><expr><call><name>validate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>StringBuffer</name></type> <name>sb</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>(<argument><expr><call><name><name>key</name>.<name>trim</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>"="</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><call><name><name>value</name>.<name>trim</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>sb</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * checks whether all required attributes have been specified.
         * @throws BuildException if key or value are unassigned
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>validate</name><parameter_list>()</parameter_list> <block>{
            <if>if <condition>(<expr><name>key</name> == <name>null</name> || <name>value</name> == <name>null</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"key and value must be specified "
                    + "for environment variables."</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
        }</block></function>
    }</block></class>

    <comment type="javadoc">/**
     * constructor
     */</comment>
    <constructor><specifier>public</specifier> <name>Environment</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>variables</name> = new <call><name><name>Vector</name><argument_list>&lt;<argument><name>Variable</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * add a variable.
     * Validity checking is &lt;i&gt;not&lt;/i&gt; performed at this point. Duplicates
     * are not caught either.
     * @param var new variable.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addVariable</name><parameter_list>(<param><decl><type><name>Variable</name></type> <name>var</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>variables</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * get the variable list as an array
     * @return array of key=value assignment strings
     * @throws BuildException if any variable is misconfigured
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getVariables</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><call><name><name>variables</name>.<name>size</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>result</name> =<init> <expr>new <name><name>String</name><index>[<expr><call><name><name>variables</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>result</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name><name>result</name><index>[<expr><name>i</name></expr>]</index></name> = ((<name>Variable</name>) <call><name><name>variables</name>.<name>elementAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>).<call><name>getContent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the raw vector of variables. This is not a clone.
     * @return a potentially empty (but never null) vector of elements of type
     * Variable
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Vector</name><argument_list>&lt;<argument><name>Variable</name></argument>&gt;</argument_list></name></type> <name>getVariablesVector</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>variables</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
