<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\types\optional\depend\ClassFileSetTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>optional</name>.<name>depend</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Hashtable</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildFileTest</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>DirectoryScanner</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>FileSet</name></name>;</import>

<comment type="javadoc">/**
 * Testcase for the Classfileset optional type.
 *
 */</comment>
<class><specifier>public</specifier> class <name>ClassFileSetTest</name> <super><extends>extends <name>BuildFileTest</name></extends></super> <block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>RESULT_FILESET</name> =<init> <expr>"result"</expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ClassFileSetTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// share the setup for testing the depend task</comment>
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr>"src/etc/testcases/taskdefs/optional/depend/depend.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"clean"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Test basic classfileset
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testBasicSet</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Project</name></type> <name>p</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testbasicset"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>FileSet</name></type> <name>resultFileSet</name> =<init> <expr>(<name>FileSet</name>)<call><name><name>p</name>.<name>getReference</name></name><argument_list>(<argument><expr><name>RESULT_FILESET</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DirectoryScanner</name></type> <name>scanner</name> =<init> <expr><call><name><name>resultFileSet</name>.<name>getDirectoryScanner</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>scannedFiles</name> =<init> <expr><call><name><name>scanner</name>.<name>getIncludedFiles</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Hashtable</name></type> <name>files</name> =<init> <expr>new <call><name>Hashtable</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>scannedFiles</name>.<name>length</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>files</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>scannedFiles</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>scannedFiles</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Classfileset did not pick up expected number of "
            + "class files"</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><call><name><name>files</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Result did not contain A.class"</expr></argument>,
            <argument><expr><call><name><name>files</name>.<name>containsKey</name></name><argument_list>(<argument><expr>"A.class"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Result did not contain B.class"</expr></argument>,
            <argument><expr><call><name><name>files</name>.<name>containsKey</name></name><argument_list>(<argument><expr>"B.class"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Result did not contain C.class"</expr></argument>,
            <argument><expr><call><name><name>files</name>.<name>containsKey</name></name><argument_list>(<argument><expr>"C.class"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Result did not contain D.class"</expr></argument>,
            <argument><expr><call><name><name>files</name>.<name>containsKey</name></name><argument_list>(<argument><expr>"D.class"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Test small classfileset
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testSmallSet</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Project</name></type> <name>p</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testsmallset"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>FileSet</name></type> <name>resultFileSet</name> =<init> <expr>(<name>FileSet</name>)<call><name><name>p</name>.<name>getReference</name></name><argument_list>(<argument><expr><name>RESULT_FILESET</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DirectoryScanner</name></type> <name>scanner</name> =<init> <expr><call><name><name>resultFileSet</name>.<name>getDirectoryScanner</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>scannedFiles</name> =<init> <expr><call><name><name>scanner</name>.<name>getIncludedFiles</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Hashtable</name></type> <name>files</name> =<init> <expr>new <call><name>Hashtable</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>scannedFiles</name>.<name>length</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>files</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>scannedFiles</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>scannedFiles</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Classfileset did not pick up expected number of "
            + "class files"</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><call><name><name>files</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Result did not contain B.class"</expr></argument>,
            <argument><expr><call><name><name>files</name>.<name>containsKey</name></name><argument_list>(<argument><expr>"B.class"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Result did not contain C.class"</expr></argument>,
            <argument><expr><call><name><name>files</name>.<name>containsKey</name></name><argument_list>(<argument><expr>"C.class"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Test combo classfileset
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testComboSet</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Project</name></type> <name>p</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testcomboset"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>FileSet</name></type> <name>resultFileSet</name> =<init> <expr>(<name>FileSet</name>)<call><name><name>p</name>.<name>getReference</name></name><argument_list>(<argument><expr><name>RESULT_FILESET</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DirectoryScanner</name></type> <name>scanner</name> =<init> <expr><call><name><name>resultFileSet</name>.<name>getDirectoryScanner</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>scannedFiles</name> =<init> <expr><call><name><name>scanner</name>.<name>getIncludedFiles</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Hashtable</name></type> <name>files</name> =<init> <expr>new <call><name>Hashtable</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>scannedFiles</name>.<name>length</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>files</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>scannedFiles</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>scannedFiles</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Classfileset did not pick up expected number of "
            + "class files"</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><call><name><name>files</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Result did not contain C.class"</expr></argument>,
            <argument><expr><call><name><name>files</name>.<name>containsKey</name></name><argument_list>(<argument><expr>"C.class"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Test that you can pass a classfileset by reference to a fileset.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testByReference</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testbyreference"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Test that classes included in a method "System.out.println(MyClass.class)" are included.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testMethodParam</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Project</name></type> <name>p</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testmethodparam"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>FileSet</name></type> <name>resultFileSet</name> =<init> <expr>(<name>FileSet</name>)<call><name><name>p</name>.<name>getReference</name></name><argument_list>(<argument><expr><name>RESULT_FILESET</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DirectoryScanner</name></type> <name>scanner</name> =<init> <expr><call><name><name>resultFileSet</name>.<name>getDirectoryScanner</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>scannedFiles</name> =<init> <expr><call><name><name>scanner</name>.<name>getIncludedFiles</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Hashtable</name></type> <name>files</name> =<init> <expr>new <call><name>Hashtable</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>scannedFiles</name>.<name>length</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>files</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>scannedFiles</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>scannedFiles</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Classfileset did not pick up expected number of "
            + "class files"</expr></argument>, <argument><expr>5</expr></argument>, <argument><expr><call><name><name>files</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Result did not contain A.class"</expr></argument>,
            <argument><expr><call><name><name>files</name>.<name>containsKey</name></name><argument_list>(<argument><expr>"A.class"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Result did not contain B.class"</expr></argument>,
            <argument><expr><call><name><name>files</name>.<name>containsKey</name></name><argument_list>(<argument><expr>"B.class"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Result did not contain C.class"</expr></argument>,
            <argument><expr><call><name><name>files</name>.<name>containsKey</name></name><argument_list>(<argument><expr>"C.class"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Result did not contain D.class"</expr></argument>,
            <argument><expr><call><name><name>files</name>.<name>containsKey</name></name><argument_list>(<argument><expr>"D.class"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Result did not contain E.class"</expr></argument>,
            <argument><expr><call><name><name>files</name>.<name>containsKey</name></name><argument_list>(<argument><expr>"E.class"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Test that classes included in a method "System.out.println(Outer.Inner.class)" are included.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testMethodParamInner</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Project</name></type> <name>p</name> =<init> <expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testmethodparaminner"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>FileSet</name></type> <name>resultFileSet</name> =<init> <expr>(<name>FileSet</name>)<call><name><name>p</name>.<name>getReference</name></name><argument_list>(<argument><expr><name>RESULT_FILESET</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DirectoryScanner</name></type> <name>scanner</name> =<init> <expr><call><name><name>resultFileSet</name>.<name>getDirectoryScanner</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>scannedFiles</name> =<init> <expr><call><name><name>scanner</name>.<name>getIncludedFiles</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Hashtable</name></type> <name>files</name> =<init> <expr>new <call><name>Hashtable</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>scannedFiles</name>.<name>length</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>files</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>scannedFiles</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>scannedFiles</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Classfileset did not pick up expected number of "
            + "class files"</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><call><name><name>files</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Result did not contain test" + <name><name>File</name>.<name>separator</name></name> + "Outer$Inner.class"</expr></argument>,
            <argument><expr><call><name><name>files</name>.<name>containsKey</name></name><argument_list>(<argument><expr>"test" + <name><name>File</name>.<name>separator</name></name> + "Outer$Inner.class"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Result did not contain test" + <name><name>File</name>.<name>separator</name></name> + "Outer.class"</expr></argument>,
            <argument><expr><call><name><name>files</name>.<name>containsKey</name></name><argument_list>(<argument><expr>"test" + <name><name>File</name>.<name>separator</name></name> + "Outer.class"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Result did not contain test" + <name><name>File</name>.<name>separator</name></name> + "ContainsOnlyInner.class"</expr></argument>,
            <argument><expr><call><name><name>files</name>.<name>containsKey</name></name><argument_list>(<argument><expr>"test" + <name><name>File</name>.<name>separator</name></name> + "ContainsOnlyInner.class"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Result did not contain test" + <name><name>File</name>.<name>separator</name></name> + "ContainsOnlyInner.class"</expr></argument>,
            <argument><expr><call><name><name>files</name>.<name>containsKey</name></name><argument_list>(<argument><expr>"test" + <name><name>File</name>.<name>separator</name></name> + "MethodParam.class"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testResourceCollection</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testresourcecollection"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
