<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\condition\IsFileSelected.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>condition</name></name>;</package>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>FileSelector</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>selectors</name>.<name>AbstractSelectorContainer</name></name>;</import>

<comment type="javadoc">/**
 * This is a condition that checks to see if a file passes an embedded selector.
 */</comment>
<class><specifier>public</specifier> class <name>IsFileSelected</name> <super><extends>extends <name>AbstractSelectorContainer</name></extends> <implements>implements <name>Condition</name></implements></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>FileUtils</name></type> <name>FILE_UTILS</name> =<init> <expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>file</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>baseDir</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The file to check.
     * @param file the file to check if if passes the embedded selector.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>file</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>file</name></name> = <name>file</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The base directory to use.
     * @param baseDir the base directory to use, if null use the project's
     *                basedir.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBaseDir</name><parameter_list>(<param><decl><type><name>File</name></type> <name>baseDir</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>baseDir</name></name> = <name>baseDir</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * validate the parameters.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>validate</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>selectorCount</name><argument_list>()</argument_list></call> != 1</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Only one selector allowed"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>super</name>.<name>validate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Evaluate the selector with the file.
     * @return true if the file is selected by the embedded selector.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>eval</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>file</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"file attribute not set"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name>validate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>myBaseDir</name> =<init> <expr><name>baseDir</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>myBaseDir</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>myBaseDir</name> = <call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getBaseDir</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name>FileSelector</name></type> <name>f</name> =<init> <expr><call><name>getSelectors</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><index>[<expr>0</expr>]</index></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>f</name>.<name>isSelected</name></name><argument_list>(
            <argument><expr><name>myBaseDir</name></expr></argument>, <argument><expr><call><name><name>FILE_UTILS</name>.<name>removeLeadingPath</name></name><argument_list>(<argument><expr><name>myBaseDir</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
