<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\j2ee\AbstractHotDeploymentTool.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>j2ee</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Path</name></name>;</import>

<comment type="javadoc">/**
 *  Abstract class to support vendor-specific hot deployment tools.
 *  This class will validate boilerplate attributes.
 *
 *  Subclassing this class for a vendor specific tool involves the
 *  following.
 *  &lt;ol&gt;&lt;li&gt;Implement the &lt;code&gt;isActionValid()&lt;code&gt; method to insure the
 *  action supplied as the "action" attribute of ServerDeploy is valid.
 *  &lt;li&gt;Implement the &lt;code&gt;validateAttributes()&lt;/code&gt; method to insure
 *  all required attributes are supplied, and are in the correct format.
 *  &lt;li&gt;Add a &lt;code&gt;add&amp;lt;TOOL&amp;gt;&lt;/code&gt; method to the ServerDeploy
 *  class.  This method will be called when Ant encounters a
 *  &lt;code&gt;add&amp;lt;TOOL&amp;gt;&lt;/code&gt; task nested in the
 *  &lt;code&gt;serverdeploy&lt;/code&gt; task.
 *  &lt;li&gt;Define the &lt;code&gt;deploy&lt;/code&gt; method.  This method should perform
 *  whatever task it takes to hot-deploy the component.  IE: spawn a JVM and
 *  run class, exec a native executable, run Java code...
 *
 *  @see org.apache.tools.ant.taskdefs.optional.j2ee.HotDeploymentTool
 *  @see org.apache.tools.ant.taskdefs.optional.j2ee.ServerDeploy
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>AbstractHotDeploymentTool</name> <super><implements>implements <name>HotDeploymentTool</name></implements></super> <block>{
    <comment type="javadoc">/** The parent task **/</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ServerDeploy</name></type> <name>task</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The classpath passed to the JVM on execution. **/</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Path</name></type> <name>classpath</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The username for the deployment server. **/</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>userName</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The password for the deployment server. **/</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>password</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The address of the deployment server **/</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>server</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     *  Add a classpath as a nested element.
     *  @return A Path object representing the classpath to be used.
     */</comment>
    <function><type><specifier>public</specifier> <name>Path</name></type> <name>createClasspath</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>classpath</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>classpath</name> = new <call><name>Path</name><argument_list>(<argument><expr><call><name><name>task</name>.<name>getProject</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><call><name><name>classpath</name>.<name>createPath</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     *  Determines if the "action" attribute defines a valid action.
     *  &lt;p&gt;Subclasses should determine if the action passed in is
     *  supported by the vendor's deployment tool.
     *  &lt;p&gt;Actions may by "deploy", "delete", etc... It all depends
     *  on the tool.
     *  @return true if the "action" attribute is valid, false if not.
     */</comment>
    <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>isActionValid</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="javadoc">/**
     *  Validates the passed in attributes.
     *  Subclasses should chain to this super-method to insure
     *  validation of boilerplate attributes.
     *  &lt;p&gt;Only the "action" attribute is required in the
     *  base class.  Subclasses should check attributes accordingly.
     *  @exception org.apache.tools.ant.BuildException if the attributes are invalid or incomplete.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>validateAttributes</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><call><name><name>task</name>.<name>getAction</name></name><argument_list>()</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"The \"action\" attribute must be set"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr>!<call><name>isActionValid</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Invalid action \"" + <call><name><name>task</name>.<name>getAction</name></name><argument_list>()</argument_list></call> + "\" passed"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr><name>classpath</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"The classpath attribute must be set"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     *  Perform the actual deployment.
     *  It's up to the subclasses to implement the actual behavior.
     *  @exception org.apache.tools.ant.BuildException if the attributes are invalid or incomplete.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>deploy</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws>;</function_decl>

    <comment type="javadoc">/**
     *  Sets the parent task.
     *  @param task a ServerDeploy object representing the parent task.
     *  @ant.attribute ignore="true"
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTask</name><parameter_list>(<param><decl><type><name>ServerDeploy</name></type> <name>task</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>task</name></name> = <name>task</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     *  Returns the task field, a ServerDeploy object.
     *  @return An ServerDeploy representing the parent task.
     */</comment>
    <function><type><specifier>protected</specifier> <name>ServerDeploy</name></type> <name>getTask</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>task</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     *  gets the classpath field.
     *  @return A Path representing the "classpath" attribute.
     */</comment>
    <function><type><specifier>public</specifier> <name>Path</name></type> <name>getClasspath</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>classpath</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     *  The classpath to be passed to the JVM running the tool;
     *  optional depending upon the tool.
     *  The classpath may also be supplied as a nested element.
     *  @param classpath A Path object representing the "classpath" attribute.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setClasspath</name><parameter_list>(<param><decl><type><name>Path</name></type> <name>classpath</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>classpath</name></name> = <name>classpath</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     *  Returns the userName field.
     *  @return A String representing the "userName" attribute.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getUserName</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>userName</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     *  The user with privileges to deploy applications to the server; optional.
     *  @param userName A String representing the "userName" attribute.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUserName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>userName</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>userName</name></name> = <name>userName</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     *  Returns the password field.
     *  @return A String representing the "password" attribute.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getPassword</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>password</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     *  The password of the user; optional.
     *  @param password A String representing the "password" attribute.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPassword</name><parameter_list>(<param><decl><type><name>String</name></type> <name>password</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>password</name></name> = <name>password</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     *  Returns the server field.
     *  @return A String representing the "server" attribute.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getServer</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>server</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     *  The address or URL for the server where the component will be deployed.
     *  @param server A String representing the "server" attribute.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setServer</name><parameter_list>(<param><decl><type><name>String</name></type> <name>server</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>server</name></name> = <name>server</name></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
