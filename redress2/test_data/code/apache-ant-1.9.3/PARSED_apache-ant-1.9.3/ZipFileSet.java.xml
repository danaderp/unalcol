<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\types\ZipFileSet.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>

<comment type="javadoc">/**
 * A ZipFileSet is a FileSet with extra attributes useful in the context of
 * Zip/Jar tasks.
 *
 * A ZipFileSet extends FileSets with the ability to extract a subset of the
 * entries of a Zip file for inclusion in another Zip file.  It also includes
 * a prefix attribute which is prepended to each entry in the output Zip file.
 *
 * Since ant 1.6 ZipFileSet can be defined with an id and referenced in packaging tasks
 *
 */</comment>
<class><specifier>public</specifier> class <name>ZipFileSet</name> <super><extends>extends <name>ArchiveFileSet</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>encoding</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Constructor for ZipFileSet */</comment>
    <constructor><specifier>public</specifier> <name>ZipFileSet</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructor using a fileset argument.
     * @param fileset the fileset to use
     */</comment>
    <constructor><specifier>protected</specifier> <name>ZipFileSet</name><parameter_list>(<param><decl><type><name>FileSet</name></type> <name>fileset</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>fileset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructor using a zipfileset argument.
     * @param fileset the zipfileset to use
     */</comment>
    <constructor><specifier>protected</specifier> <name>ZipFileSet</name><parameter_list>(<param><decl><type><name>ZipFileSet</name></type> <name>fileset</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>fileset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>encoding</name> = <name><name>fileset</name>.<name>encoding</name></name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Set the encoding used for this ZipFileSet.
     * @param enc encoding as String.
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setEncoding</name><parameter_list>(<param><decl><type><name>String</name></type> <name>enc</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>checkZipFileSetAttributesAllowed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>encoding</name></name> = <name>enc</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the encoding used for this ZipFileSet.
     * @return String encoding.
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getEncoding</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>AbstractFileSet</name></type> <name>ref</name> =<init> <expr><call><name>getRef</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>ref</name> <name>instanceof</name> <name>ZipFileSet</name></expr>)</condition><then> <block>{
                <return>return <expr>((<name>ZipFileSet</name>) <name>ref</name>).<call><name>getEncoding</name><argument_list>()</argument_list></call></expr>;</return>
            }</block></then> <else>else <block>{
                <return>return <expr><name>null</name></expr>;</return>
            }</block></else></if>
        }</block></then></if>
        <return>return <expr><name>encoding</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Return a new archive scanner based on this one.
     * @return a new ZipScanner with the same encoding as this one.
     */</comment>
    <function><type><specifier>protected</specifier> <name>ArchiveScanner</name></type> <name>newArchiveScanner</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>ZipScanner</name></type> <name>zs</name> =<init> <expr>new <call><name>ZipScanner</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>zs</name>.<name>setEncoding</name></name><argument_list>(<argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>zs</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * A ZipFileset accepts another ZipFileSet or a FileSet as reference
     * FileSets are often used by the war task for the lib attribute
     * @param p the project to use
     * @return the abstract fileset instance
     */</comment>
    <function><type><specifier>protected</specifier> <name>AbstractFileSet</name></type> <name>getRef</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>p</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>dieOnCircularReference</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Object</name></type> <name>o</name> =<init> <expr><call><name>getRefid</name><argument_list>()</argument_list></call>.<call><name>getReferencedObject</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>o</name> <name>instanceof</name> <name>ZipFileSet</name></expr>)</condition><then> <block>{
            <return>return <expr>(<name>AbstractFileSet</name>) <name>o</name></expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr><name>o</name> <name>instanceof</name> <name>FileSet</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>ZipFileSet</name></type> <name>zfs</name> =<init> <expr>new <call><name>ZipFileSet</name><argument_list>(<argument><expr>(<name>FileSet</name>) <name>o</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>configureFileSet</name><argument_list>(<argument><expr><name>zfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>zfs</name></expr>;</return>
        }</block></then> <else>else <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>msg</name> =<init> <expr><call><name>getRefid</name><argument_list>()</argument_list></call>.<call><name>getRefId</name><argument_list>()</argument_list></call> + " doesn\'t denote a zipfileset or a fileset"</expr></init></decl>;</decl_stmt>
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></else></if></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Return a ZipFileSet that has the same properties
     * as this one.
     * @return the cloned zipFileSet
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>((<name>ZipFileSet</name>) <call><name>getRef</name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>).<call><name>clone</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
            <return>return <expr><call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * A check attributes for zipFileSet.
     * If there is a reference, and
     * it is a ZipFileSet, the zip fileset attributes
     * cannot be used.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>checkZipFileSetAttributesAllowed</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>getProject</name><argument_list>()</argument_list></call> == <name>null</name>
            || (<call><name>isReference</name><argument_list>()</argument_list></call>
                &amp;&amp; (<call><name>getRefid</name><argument_list>()</argument_list></call>.<call><name>getReferencedObject</name><argument_list>(
                        <argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                    <name>instanceof</name> <name>ZipFileSet</name>))</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>checkAttributesAllowed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

}</block></class>
</unit>
