<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\types\resources\JavaResource.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>resources</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>FileNotFoundException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>URL</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Path</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Resource</name></name>;</import>

<comment type="javadoc">/**
 * A Resource representation of something loadable via a Java classloader.
 * @since Ant 1.7
 */</comment>
<class><specifier>public</specifier> class <name>JavaResource</name> <super><extends>extends <name>AbstractClasspathResource</name></extends>
    <implements>implements <name>URLProvider</name></implements></super> <block>{

    <comment type="javadoc">/**
     * Default constructor.
     */</comment>
    <constructor><specifier>public</specifier> <name>JavaResource</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <comment type="javadoc">/**
     * Construct a new JavaResource using the specified name and
     * classpath.
     *
     * @param name   the resource name.
     * @param path   the classpath.
     */</comment>
    <constructor><specifier>public</specifier> <name>JavaResource</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>, <param><decl><type><name>Path</name></type> <name>path</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setName</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setClasspath</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * open the input stream from a specific classloader
     * @param cl the classloader to use. Will be null if the system
     * classloader is used
     * @return an open input stream for the resource
     * @throws IOException if an error occurs.
     */</comment>
    <function><type><specifier>protected</specifier> <name>InputStream</name></type> <name>openInputStream</name><parameter_list>(<param><decl><type><name>ClassLoader</name></type> <name>cl</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>InputStream</name></type> <name>inputStream</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>cl</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>inputStream</name> = <call><name><name>ClassLoader</name>.<name>getSystemResourceAsStream</name></name><argument_list>(<argument><expr><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>inputStream</name> == <name>null</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>FileNotFoundException</name><argument_list>(<argument><expr>"No resource " + <call><name>getName</name><argument_list>()</argument_list></call>
                        + " on Ant's classpath"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>inputStream</name> = <call><name><name>cl</name>.<name>getResourceAsStream</name></name><argument_list>(<argument><expr><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>inputStream</name> == <name>null</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>FileNotFoundException</name><argument_list>(<argument><expr>"No resource " + <call><name>getName</name><argument_list>()</argument_list></call>
                        + " on the classpath " + <name>cl</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
        }</block></else></if>
        <return>return <expr><name>inputStream</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Get the URL represented by this Resource.
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>URL</name></type> <name>getURL</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>((<name>JavaResource</name>) <call><name>getCheckedRef</name><argument_list>()</argument_list></call>).<call><name>getURL</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name><name>AbstractClasspathResource</name>.<name>ClassLoaderWithFlag</name></name></type> <name>classLoader</name> =<init>
            <expr><call><name>getClassLoader</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>classLoader</name>.<name>getLoader</name></name><argument_list>()</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>ClassLoader</name>.<name>getSystemResource</name></name><argument_list>(<argument><expr><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
            <try>try <block>{
                <return>return <expr><call><name><name>classLoader</name>.<name>getLoader</name></name><argument_list>()</argument_list></call>.<call><name>getResource</name><argument_list>(<argument><expr><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            }</block> <finally>finally <block>{
                <expr_stmt><expr><call><name><name>classLoader</name>.<name>cleanup</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></finally></try>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Compare this JavaResource to another Resource.
     * @param another the other Resource against which to compare.
     * @return a negative integer, zero, or a positive integer as this
     * JavaResource is less than, equal to, or greater than the
     * specified Resource.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<param><decl><type><name>Resource</name></type> <name>another</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>((<name>Resource</name>) <call><name>getCheckedRef</name><argument_list>()</argument_list></call>).<call><name>compareTo</name><argument_list>(<argument><expr><name>another</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>another</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>JavaResource</name></type> <name>otherjr</name> =<init> <expr>(<name>JavaResource</name>) <name>another</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<call><name>getName</name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><call><name><name>otherjr</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><call><name>getName</name><argument_list>()</argument_list></call>.<call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>otherjr</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>
            <if>if <condition>(<expr><call><name>getLoader</name><argument_list>()</argument_list></call> != <call><name><name>otherjr</name>.<name>getLoader</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><call><name>getLoader</name><argument_list>()</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
                    <return>return <expr>-1</expr>;</return>
                }</block></then></if>
                <if>if <condition>(<expr><call><name><name>otherjr</name>.<name>getLoader</name></name><argument_list>()</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
                    <return>return <expr>1</expr>;</return>
                }</block></then></if>
                <return>return <expr><call><name>getLoader</name><argument_list>()</argument_list></call>.<call><name>getRefId</name><argument_list>()</argument_list></call>
                    .<call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>otherjr</name>.<name>getLoader</name></name><argument_list>()</argument_list></call>.<call><name>getRefId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>
            <decl_stmt><decl><type><name>Path</name></type> <name>p</name> =<init> <expr><call><name>getClasspath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Path</name></type> <name>op</name> =<init> <expr><call><name><name>otherjr</name>.<name>getClasspath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>p</name> != <name>op</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>p</name> == <name>null</name></expr>)</condition><then> <block>{
                    <return>return <expr>-1</expr>;</return>
                }</block></then></if>
                <if>if <condition>(<expr><name>op</name> == <name>null</name></expr>)</condition><then> <block>{
                    <return>return <expr>1</expr>;</return>
                }</block></then></if>
                <return>return <expr><call><name><name>p</name>.<name>toString</name></name><argument_list>()</argument_list></call>.<call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>op</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>
            <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name><name>super</name>.<name>compareTo</name></name><argument_list>(<argument><expr><name>another</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

}</block></class>
</unit>
