<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\util\WeakishReference.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name></name>;</package>


<import>import <name><name>java</name>.<name>lang</name>.<name>ref</name>.<name>WeakReference</name></name>;</import>

<comment type="javadoc">/**
 * These classes are part of some code to reduce memory leaks by only
 * retaining weak references to things
 * on Java1.2+, and yet still work (with leaky hard references) on Java1.1.
 * Now that Ant is 1.2+ only,
 * life is simpler and none of the classes are needed any more.
 *
 * They are only retained in case a third-party task uses them
 * @since ant1.6
 * @see org.apache.tools.ant.util.optional.WeakishReference12
 * @deprecated deprecated 1.7; will be removed in Ant1.8
 *             Just use {@link java.lang.ref.WeakReference} directly.
 */</comment>
<class><specifier>public</specifier> class <name>WeakishReference</name>  <block>{


    <decl_stmt><decl><type><specifier>private</specifier> <name>WeakReference</name></type> <name>weakref</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * create a new soft reference, which is bound to a
     * Weak reference inside
     *
     * @param reference
     * @see java.lang.ref.WeakReference
     */</comment>
    <constructor><name>WeakishReference</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>reference</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>weakref</name></name> = new <call><name>WeakReference</name><argument_list>(<argument><expr><name>reference</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns this reference object's referent.  If this reference object has
     * been cleared, then this method returns &lt;code&gt;null&lt;/code&gt;.
     *
     * @return The object to which this reference refers, or
     *         &lt;code&gt;null&lt;/code&gt; if this reference object has been cleared.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>get</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>weakref</name>.<name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * create the appropriate type of reference for the java version
     * @param object the object that the reference will refer to.
     * @return reference to the Object.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>WeakishReference</name></type> <name>createReference</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>object</name></decl></param>)</parameter_list> <block>{
            <return>return <expr>new <call><name>WeakishReference</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     * This was a hard reference for Java 1.1. Since Ant1.7,
     * @deprecated since 1.7.
     *             Hopefully nobody is using this.
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>HardReference</name> <super><extends>extends <name>WeakishReference</name></extends></super> <block>{

        <comment type="javadoc">/**
         * constructor.
         * @param object the object that the reference will refer to.
         */</comment>
        <constructor><specifier>public</specifier> <name>HardReference</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>object</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

    }</block></class>

}</block></class>
</unit>
