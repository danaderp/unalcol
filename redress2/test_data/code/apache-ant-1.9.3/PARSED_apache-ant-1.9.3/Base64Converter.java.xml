<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\util\Base64Converter.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name></name>;</package>

<comment type="javadoc">/**
 * BASE 64 encoding of a String or an array of bytes.
 *
 * Based on RFC 1421.
 *
 **/</comment>
<class><specifier>public</specifier> class <name>Base64Converter</name> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>BYTE</name>      =<init> <expr>8</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>WORD</name>      =<init> <expr>16</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>BYTE_MASK</name> =<init> <expr>0xFF</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>POS_0_MASK</name> =<init> <expr>0x0000003F</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>POS_1_MASK</name> =<init> <expr>0x00000FC0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>POS_1_SHIFT</name> =<init> <expr>6</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>POS_2_MASK</name> =<init> <expr>0x0003F000</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>POS_2_SHIFT</name> =<init> <expr>12</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>POS_3_MASK</name> =<init> <expr>0x00FC0000</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>POS_3_SHIFT</name> =<init> <expr>18</expr></init></decl>;</decl_stmt>


    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>char</name><index>[]</index></type> <name>ALPHABET</name> =<init> <expr><block>{
        <expr>'A'</expr>, <expr>'B'</expr>, <expr>'C'</expr>, <expr>'D'</expr>, <expr>'E'</expr>, <expr>'F'</expr>, <expr>'G'</expr>, <expr>'H'</expr>,  <comment type="line">//  0 to  7</comment>
        <expr>'I'</expr>, <expr>'J'</expr>, <expr>'K'</expr>, <expr>'L'</expr>, <expr>'M'</expr>, <expr>'N'</expr>, <expr>'O'</expr>, <expr>'P'</expr>,  <comment type="line">//  8 to 15</comment>
        <expr>'Q'</expr>, <expr>'R'</expr>, <expr>'S'</expr>, <expr>'T'</expr>, <expr>'U'</expr>, <expr>'V'</expr>, <expr>'W'</expr>, <expr>'X'</expr>,  <comment type="line">// 16 to 23</comment>
        <expr>'Y'</expr>, <expr>'Z'</expr>, <expr>'a'</expr>, <expr>'b'</expr>, <expr>'c'</expr>, <expr>'d'</expr>, <expr>'e'</expr>, <expr>'f'</expr>,  <comment type="line">// 24 to 31</comment>
        <expr>'g'</expr>, <expr>'h'</expr>, <expr>'i'</expr>, <expr>'j'</expr>, <expr>'k'</expr>, <expr>'l'</expr>, <expr>'m'</expr>, <expr>'n'</expr>,  <comment type="line">// 32 to 39</comment>
        <expr>'o'</expr>, <expr>'p'</expr>, <expr>'q'</expr>, <expr>'r'</expr>, <expr>'s'</expr>, <expr>'t'</expr>, <expr>'u'</expr>, <expr>'v'</expr>,  <comment type="line">// 40 to 47</comment>
        <expr>'w'</expr>, <expr>'x'</expr>, <expr>'y'</expr>, <expr>'z'</expr>, <expr>'0'</expr>, <expr>'1'</expr>, <expr>'2'</expr>, <expr>'3'</expr>,  <comment type="line">// 48 to 55</comment>
        <expr>'4'</expr>, <expr>'5'</expr>, <expr>'6'</expr>, <expr>'7'</expr>, <expr>'8'</expr>, <expr>'9'</expr>, <expr>'+'</expr>, <expr>'/'</expr>}</block></expr></init></decl>;</decl_stmt> <comment type="line">// 56 to 63</comment>

    <comment type="line">// CheckStyle:ConstantNameCheck OFF - bc</comment>
    <comment type="javadoc">/** Provided for BC purposes */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>char</name><index>[]</index></type> <name>alphabet</name> =<init> <expr><name>ALPHABET</name></expr></init></decl>;</decl_stmt>
    <comment type="line">// CheckStyle:ConstantNameCheck ON</comment>


    <comment type="javadoc">/**
     * Encode a string into base64 encoding.
     * @param s the string to encode.
     * @return the encoded string.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>encode</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>encode</name><argument_list>(<argument><expr><call><name><name>s</name>.<name>getBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Encode a byte array into base64 encoding.
     * @param octetString the byte array to encode.
     * @return the encoded string.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>encode</name><parameter_list>(<param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>octetString</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>bits24</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>bits6</name></decl>;</decl_stmt>

        <comment type="line">// CheckStyle:MagicNumber OFF</comment>
        <decl_stmt><decl><type><name>char</name><index>[]</index></type> <name>out</name> =<init> <expr>new <name><name>char</name><index>[<expr>((<name><name>octetString</name>.<name>length</name></name> - 1) / 3 + 1) * 4</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <comment type="line">// CheckStyle:MagicNumber ON</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>outIndex</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

        <comment type="line">// CheckStyle:MagicNumber OFF</comment>
        <while>while <condition>(<expr>(<name>i</name> + 3) &lt;= <name><name>octetString</name>.<name>length</name></name></expr>)</condition> <block>{
        <comment type="line">// CheckStyle:MagicNumber ON</comment>
            <comment type="line">// store the octets</comment>
            <expr_stmt><expr><name>bits24</name> = (<name><name>octetString</name><index>[<expr><name>i</name>++</expr>]</index></name> &amp; <name>BYTE_MASK</name>) &lt;&lt; <name>WORD</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>bits24</name> |= (<name><name>octetString</name><index>[<expr><name>i</name>++</expr>]</index></name> &amp; <name>BYTE_MASK</name>) &lt;&lt; <name>BYTE</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>bits24</name> |= <name><name>octetString</name><index>[<expr><name>i</name>++</expr>]</index></name> &amp; <name>BYTE_MASK</name></expr>;</expr_stmt>

            <expr_stmt><expr><name>bits6</name> = (<name>bits24</name> &amp; <name>POS_3_MASK</name>) &gt;&gt; <name>POS_3_SHIFT</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>out</name><index>[<expr><name>outIndex</name>++</expr>]</index></name> = <name><name>ALPHABET</name><index>[<expr><name>bits6</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>bits6</name> = (<name>bits24</name> &amp; <name>POS_2_MASK</name>) &gt;&gt; <name>POS_2_SHIFT</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>out</name><index>[<expr><name>outIndex</name>++</expr>]</index></name> = <name><name>ALPHABET</name><index>[<expr><name>bits6</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>bits6</name>  = (<name>bits24</name> &amp; <name>POS_1_MASK</name>) &gt;&gt; <name>POS_1_SHIFT</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>out</name><index>[<expr><name>outIndex</name>++</expr>]</index></name> = <name><name>ALPHABET</name><index>[<expr><name>bits6</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>bits6</name> = (<name>bits24</name> &amp; <name>POS_0_MASK</name>)</expr>;</expr_stmt>
            <expr_stmt><expr><name><name>out</name><index>[<expr><name>outIndex</name>++</expr>]</index></name> = <name><name>ALPHABET</name><index>[<expr><name>bits6</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></while>
        <if>if <condition>(<expr><name><name>octetString</name>.<name>length</name></name> - <name>i</name> == 2</expr>)</condition><then> <block>{
            <comment type="line">// store the octets</comment>
            <expr_stmt><expr><name>bits24</name> = (<name><name>octetString</name><index>[<expr><name>i</name></expr>]</index></name> &amp; <name>BYTE_MASK</name>) &lt;&lt; <name>WORD</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>bits24</name> |= (<name><name>octetString</name><index>[<expr><name>i</name> + 1</expr>]</index></name> &amp; <name>BYTE_MASK</name>) &lt;&lt; <name>BYTE</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>bits6</name> = (<name>bits24</name> &amp; <name>POS_3_MASK</name>) &gt;&gt; <name>POS_3_SHIFT</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>out</name><index>[<expr><name>outIndex</name>++</expr>]</index></name> = <name><name>ALPHABET</name><index>[<expr><name>bits6</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>bits6</name> = (<name>bits24</name> &amp; <name>POS_2_MASK</name>) &gt;&gt; <name>POS_2_SHIFT</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>out</name><index>[<expr><name>outIndex</name>++</expr>]</index></name> = <name><name>ALPHABET</name><index>[<expr><name>bits6</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>bits6</name> = (<name>bits24</name> &amp; <name>POS_1_MASK</name>) &gt;&gt; <name>POS_1_SHIFT</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>out</name><index>[<expr><name>outIndex</name>++</expr>]</index></name> = <name><name>ALPHABET</name><index>[<expr><name>bits6</name></expr>]</index></name></expr>;</expr_stmt>

            <comment type="line">// padding</comment>
            <expr_stmt><expr><name><name>out</name><index>[<expr><name>outIndex</name>++</expr>]</index></name> = '='</expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><name><name>octetString</name>.<name>length</name></name> - <name>i</name> == 1</expr>)</condition><then> <block>{
            <comment type="line">// store the octets</comment>
            <expr_stmt><expr><name>bits24</name> = (<name><name>octetString</name><index>[<expr><name>i</name></expr>]</index></name> &amp; <name>BYTE_MASK</name>) &lt;&lt; <name>WORD</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>bits6</name> = (<name>bits24</name> &amp; <name>POS_3_MASK</name>) &gt;&gt; <name>POS_3_SHIFT</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>out</name><index>[<expr><name>outIndex</name>++</expr>]</index></name> = <name><name>ALPHABET</name><index>[<expr><name>bits6</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>bits6</name> = (<name>bits24</name> &amp; <name>POS_2_MASK</name>) &gt;&gt; <name>POS_2_SHIFT</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>out</name><index>[<expr><name>outIndex</name>++</expr>]</index></name> = <name><name>ALPHABET</name><index>[<expr><name>bits6</name></expr>]</index></name></expr>;</expr_stmt>

            <comment type="line">// padding</comment>
            <expr_stmt><expr><name><name>out</name><index>[<expr><name>outIndex</name>++</expr>]</index></name> = '='</expr>;</expr_stmt>
            <expr_stmt><expr><name><name>out</name><index>[<expr><name>outIndex</name>++</expr>]</index></name> = '='</expr>;</expr_stmt>
        }</block></then></if></else></if>
        <return>return <expr>new <call><name>String</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
