<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\EchoProperties.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>ByteArrayOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileNotFoundException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>OutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>OutputStreamWriter</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Writer</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Hashtable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Properties</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Comparator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Set</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>TreeSet</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collections</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>javax</name>.<name>xml</name>.<name>parsers</name>.<name>DocumentBuilder</name></name>;</import>
<import>import <name><name>javax</name>.<name>xml</name>.<name>parsers</name>.<name>DocumentBuilderFactory</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Task</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>EnumeratedAttribute</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>PropertySet</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>CollectionUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>DOMElementWriter</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>JavaEnvUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>w3c</name>.<name>dom</name>.<name>Document</name></name>;</import>
<import>import <name><name>org</name>.<name>w3c</name>.<name>dom</name>.<name>Element</name></name>;</import>

<comment type="javadoc">/**
 *  Displays all the current properties in the build. The output can be sent to
 *  a file if desired. &lt;P&gt;
 *
 *  Attribute "destfile" defines a file to send the properties to. This can be
 *  processed as a standard property file later. &lt;P&gt;
 *
 *  Attribute "prefix" defines a prefix which is used to filter the properties
 *  only those properties starting with this prefix will be echoed. &lt;P&gt;
 *
 *  By default, the "failonerror" attribute is enabled. If an error occurs while
 *  writing the properties to a file, and this attribute is enabled, then a
 *  BuildException will be thrown. If disabled, then IO errors will be reported
 *  as a log statement, but no error will be thrown. &lt;P&gt;
 *
 *  Examples: &lt;pre&gt;
 *  &amp;lt;echoproperties  /&amp;gt;
 * &lt;/pre&gt; Report the current properties to the log. &lt;P&gt;
 *
 *  &lt;pre&gt;
 *  &amp;lt;echoproperties destfile="my.properties" /&amp;gt;
 * &lt;/pre&gt; Report the current properties to the file "my.properties", and will
 *  fail the build if the file could not be created or written to. &lt;P&gt;
 *
 *  &lt;pre&gt;
 *  &amp;lt;echoproperties destfile="my.properties" failonerror="false"
 *      prefix="ant" /&amp;gt;
 * &lt;/pre&gt; Report all properties beginning with 'ant' to the file
 *  "my.properties", and will log a message if the file could not be created or
 *  written to, but will still allow the build to continue.
 *
 *@since      Ant 1.5
 */</comment>
<class><specifier>public</specifier> class <name>EchoProperties</name> <super><extends>extends <name>Task</name></extends></super> <block>{

    <comment type="javadoc">/**
     * the properties element.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PROPERTIES</name> =<init> <expr>"properties"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * the property element.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PROPERTY</name> =<init> <expr>"property"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * name attribute for property, testcase and testsuite elements.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ATTR_NAME</name> =<init> <expr>"name"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * value attribute for property elements.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ATTR_VALUE</name> =<init> <expr>"value"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * the input file.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>inFile</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     *  File object pointing to the output file. If this is null, then
     *  we output to the project log, not to a file.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>destfile</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     *  If this is true, then errors generated during file output will become
     *  build errors, and if false, then such errors will be logged, but not
     *  thrown.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>failonerror</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Vector</name></type> <name>propertySets</name> =<init> <expr>new <call><name>Vector</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>format</name> =<init> <expr>"text"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>prefix</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * @since Ant 1.7
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>regex</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Sets the input file.
     *
     * @param file  the input file
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSrcfile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>file</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>inFile</name> = <name>file</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     *  Set a file to store the property output.  If this is never specified,
     *  then the output will be sent to the Ant log.
     *
     *@param destfile file to store the property output
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDestfile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>destfile</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>destfile</name></name> = <name>destfile</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * If true, the task will fail if an error occurs writing the properties
     * file, otherwise errors are just logged.
     *
     *@param  failonerror  &lt;tt&gt;true&lt;/tt&gt; if IO exceptions are reported as build
     *      exceptions, or &lt;tt&gt;false&lt;/tt&gt; if IO exceptions are ignored.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFailOnError</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>failonerror</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>failonerror</name></name> = <name>failonerror</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     *  If the prefix is set, then only properties which start with this
     *  prefix string will be recorded. If regex is not set and  if this
     *  is never set, or it is set to an empty string or &lt;tt&gt;null&lt;/tt&gt;,
     *  then all properties will be recorded. &lt;P&gt;
     *
     *  For example, if the attribute is set as:
     *    &lt;PRE&gt;&amp;lt;echoproperties  prefix="ant." /&amp;gt;&lt;/PRE&gt;
     *  then the property "ant.home" will be recorded, but "ant-example"
     *  will not.
     *
     * @param  prefix  The new prefix value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPrefix</name><parameter_list>(<param><decl><type><name>String</name></type> <name>prefix</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>prefix</name> != <name>null</name> &amp;&amp; <call><name><name>prefix</name>.<name>length</name></name><argument_list>()</argument_list></call> != 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>prefix</name></name> = <name>prefix</name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>PropertySet</name></type> <name>ps</name> =<init> <expr>new <call><name>PropertySet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>ps</name>.<name>setProject</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ps</name>.<name>appendPrefix</name></name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>addPropertyset</name><argument_list>(<argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     *  If the regex is set, then only properties whose names match it
     *  will be recorded.  If prefix is not set and if this is never set,
     *  or it is set to an empty string or &lt;tt&gt;null&lt;/tt&gt;, then all
     *  properties will be recorded.&lt;P&gt;
     *
     *  For example, if the attribute is set as:
     *    &lt;PRE&gt;&amp;lt;echoproperties  prefix=".*ant.*" /&amp;gt;&lt;/PRE&gt;
     *  then the properties "ant.home" and "user.variant" will be recorded,
     *  but "ant-example" will not.
     *
     * @param  regex  The new regex value
     *
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRegex</name><parameter_list>(<param><decl><type><name>String</name></type> <name>regex</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>regex</name> != <name>null</name> &amp;&amp; <call><name><name>regex</name>.<name>length</name></name><argument_list>()</argument_list></call> != 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>regex</name></name> = <name>regex</name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>PropertySet</name></type> <name>ps</name> =<init> <expr>new <call><name>PropertySet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>ps</name>.<name>setProject</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ps</name>.<name>appendRegex</name></name><argument_list>(<argument><expr><name>regex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>addPropertyset</name><argument_list>(<argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * A set of properties to write.
     * @param ps the property set to write
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addPropertyset</name><parameter_list>(<param><decl><type><name>PropertySet</name></type> <name>ps</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>propertySets</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Set the output format - xml or text.
     * @param ea an enumerated &lt;code&gt;FormatAttribute&lt;/code&gt; value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFormat</name><parameter_list>(<param><decl><type><name>FormatAttribute</name></type> <name>ea</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>format</name> = <call><name><name>ea</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * A enumerated type for the format attribute.
     * The values are "xml" and "text".
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>FormatAttribute</name> <super><extends>extends <name>EnumeratedAttribute</name></extends></super> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name> <index>[]</index></type> <name>formats</name> =<init> <expr>new <name><name>String</name><index>[]</index></name><block>{<expr>"xml"</expr>, <expr>"text"</expr>}</block></expr></init></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * @see EnumeratedAttribute#getValues()
         * @return accepted values
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getValues</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>formats</name></expr>;</return>
        }</block></function>
    }</block></class>

    <comment type="javadoc">/**
     *  Run the task.
     *
     *@exception  BuildException  trouble, probably file IO
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>prefix</name> != <name>null</name> &amp;&amp; <name>regex</name> != <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Please specify either prefix"
                    + " or regex, but not both"</expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <comment type="line">//copy the properties file</comment>
        <decl_stmt><decl><type><name>Hashtable</name></type> <name>allProps</name> =<init> <expr>new <call><name>Hashtable</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block">/* load properties from file if specified, otherwise
        use Ant's properties */</comment>
        <if>if <condition>(<expr><name>inFile</name> == <name>null</name> &amp;&amp; <call><name><name>propertySets</name>.<name>size</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
            <comment type="line">// add ant properties</comment>
            <expr_stmt><expr><call><name><name>allProps</name>.<name>putAll</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>getProperties</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><name>inFile</name> != <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name><name>inFile</name>.<name>exists</name></name><argument_list>()</argument_list></call> &amp;&amp; <call><name><name>inFile</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>message</name> =<init> <expr>"srcfile is a directory!"</expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>failonerror</name></expr>)</condition><then> <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_ERR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <return>return;</return>
            }</block></then></if>

            <if>if <condition>(<expr><call><name><name>inFile</name>.<name>exists</name></name><argument_list>()</argument_list></call> &amp;&amp; !<call><name><name>inFile</name>.<name>canRead</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>message</name> =<init> <expr>"Can not read from the specified srcfile!"</expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>failonerror</name></expr>)</condition><then> <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_ERR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <return>return;</return>
            }</block></then></if>

            <decl_stmt><decl><type><name>FileInputStream</name></type> <name>in</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <try>try <block>{
                <expr_stmt><expr><name>in</name> = new <call><name>FileInputStream</name><argument_list>(<argument><expr><name>inFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>Properties</name></type> <name>props</name> =<init> <expr>new <call><name>Properties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>props</name>.<name>load</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>allProps</name>.<name>putAll</name></name><argument_list>(<argument><expr><name>props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch (<param><decl><type><name>FileNotFoundException</name></type> <name>fnfe</name></decl></param>) <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>message</name> =<init>
                    <expr>"Could not find file " + <call><name><name>inFile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>failonerror</name></expr>)</condition><then> <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>fnfe</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <return>return;</return>
            }</block></catch> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ioe</name></decl></param>) <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>message</name> =<init>
                    <expr>"Could not read file " + <call><name><name>inFile</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>failonerror</name></expr>)</condition><then> <block>{
                    <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>ioe</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <return>return;</return>
            }</block></catch> <finally>finally <block>{
                <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></finally></try>
        }</block></then></if></else></if>

        <decl_stmt><decl><type><name>Enumeration</name></type> <name>e</name> =<init> <expr><call><name><name>propertySets</name>.<name>elements</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>PropertySet</name></type> <name>ps</name> =<init> <expr>(<name>PropertySet</name>) <call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>allProps</name>.<name>putAll</name></name><argument_list>(<argument><expr><call><name><name>ps</name>.<name>getProperties</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>

        <decl_stmt><decl><type><name>OutputStream</name></type> <name>os</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <if>if <condition>(<expr><name>destfile</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>os</name> = new <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>saveProperties</name><argument_list>(<argument><expr><name>allProps</name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><call><name><name>os</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <if>if <condition>(<expr><call><name><name>destfile</name>.<name>exists</name></name><argument_list>()</argument_list></call> &amp;&amp; <call><name><name>destfile</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>String</name></type> <name>message</name> =<init> <expr>"destfile is a directory!"</expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>failonerror</name></expr>)</condition><then> <block>{
                        <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                    }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_ERR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                    <return>return;</return>
                }</block></then></if>

                <if>if <condition>(<expr><call><name><name>destfile</name>.<name>exists</name></name><argument_list>()</argument_list></call> &amp;&amp; !<call><name><name>destfile</name>.<name>canWrite</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>String</name></type> <name>message</name> =<init>
                        <expr>"Can not write to the specified destfile!"</expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>failonerror</name></expr>)</condition><then> <block>{
                        <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                    }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_ERR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                    <return>return;</return>
                }</block></then></if>
                <expr_stmt><expr><name>os</name> = new <call><name>FileOutputStream</name><argument_list>(<argument><expr><name><name>this</name>.<name>destfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>saveProperties</name><argument_list>(<argument><expr><name>allProps</name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ioe</name></decl></param>) <block>{
            <if>if <condition>(<expr><name>failonerror</name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>ioe</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><call><name><name>ioe</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></catch> <finally>finally <block>{
            <if>if <condition>(<expr><name>os</name> != <name>null</name></expr>)</condition><then> <block>{
                <try>try <block>{
                    <expr_stmt><expr><call><name><name>os</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ex</name></decl></param>) <block>{
                    <comment type="line">//ignore</comment>
                }</block></catch></try>
            }</block></then></if>
        }</block></finally></try>
    }</block></function>


    <comment type="javadoc">/**
     *  Send the key/value pairs in the hashtable to the given output stream.
     *  Only those properties matching the &lt;tt&gt;prefix&lt;/tt&gt; constraint will be
     *  sent to the output stream.
     *  The output stream will be closed when this method returns.
     *
     * @param  allProps         propfile to save
     * @param  os               output stream
     * @throws IOException      on output errors
     * @throws BuildException   on other errors
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>saveProperties</name><parameter_list>(<param><decl><type><name>Hashtable</name></type> <name>allProps</name></decl></param>, <param><decl><type><name>OutputStream</name></type> <name>os</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>List</name></type> <name>keyList</name> =<init> <expr>new <call><name>ArrayList</name><argument_list>(<argument><expr><call><name><name>allProps</name>.<name>keySet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Collections</name>.<name>sort</name></name><argument_list>(<argument><expr><name>keyList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Properties</name></type> <name>props</name> =<init> <expr>new <class><super><name>Properties</name></super><argument_list>()</argument_list> <block>{
            <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>5090936442309201654L</expr></init></decl>;</decl_stmt>
            <function><type><specifier>public</specifier> <name>Enumeration</name></type> <name>keys</name><parameter_list>()</parameter_list> <block>{
                <return>return <expr><call><name><name>CollectionUtils</name>.<name>asEnumeration</name></name><argument_list>(<argument><expr><call><name><name>keyList</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
            <function><type><specifier>public</specifier> <name>Set</name></type> <name>entrySet</name><parameter_list>()</parameter_list> <block>{
                <decl_stmt><decl><type><name>Set</name></type> <name>result</name> =<init> <expr><call><name><name>super</name>.<name>entrySet</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>JavaEnvUtils</name>.<name>isKaffe</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>TreeSet</name></type> <name>t</name> =<init> <expr>new <call><name>TreeSet</name><argument_list>(<argument><expr>new <class><super><name>Comparator</name></super><argument_list>()</argument_list> <block>{
                        <function><type><specifier>public</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>o1</name></decl></param>, <param><decl><type><name>Object</name></type> <name>o2</name></decl></param>)</parameter_list> <block>{
                            <decl_stmt><decl><type><name>String</name></type> <name>key1</name> =<init> <expr><call>(<name>String</name>) <argument_list>(<argument><expr>(<name><name>Map</name>.<name>Entry</name></name>) <name>o1</name></expr></argument>)</argument_list></call>.<call><name>getKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name>String</name></type> <name>key2</name> =<init> <expr><call>(<name>String</name>) <argument_list>(<argument><expr>(<name><name>Map</name>.<name>Entry</name></name>) <name>o2</name></expr></argument>)</argument_list></call>.<call><name>getKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                            <return>return <expr><call><name><name>key1</name>.<name>compareTo</name></name><argument_list>(<argument><expr><name>key2</name></expr></argument>)</argument_list></call></expr>;</return>
                        }</block></function>
                    }</block></class></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>t</name>.<name>addAll</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>result</name> = <name>t</name></expr>;</expr_stmt>
                }</block></then></if>
                <return>return <expr><name>result</name></expr>;</return>
            }</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>size</name> =<init> <expr><call><name><name>keyList</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>size</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>name</name> =<init> <expr><call><name><name>keyList</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>value</name> =<init> <expr><call><name><name>allProps</name>.<name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>props</name>.<name>setProperty</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <if>if <condition>(<expr>"text".<call><name>equals</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>jdkSaveProperties</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>os</name></expr></argument>, <argument><expr>"Ant properties"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr>"xml".<call><name>equals</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>xmlSaveProperties</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * a tuple for the sort list.
     */</comment>
    <class><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>Tuple</name> <super><implements>implements <name>Comparable</name></implements></super> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>key</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>value</name></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>Tuple</name><parameter_list>(<param><decl><type><name>String</name></type> <name>key</name></decl></param>, <param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>key</name></name> = <name>key</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>value</name></name> = <name>value</name></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="javadoc">/**
         * Compares this object with the specified object for order.
         * @param o the Object to be compared.
         * @return a negative integer, zero, or a positive integer as this object is
         *         less than, equal to, or greater than the specified object.
         * @throws ClassCastException if the specified object's type prevents it
         *                            from being compared to this Object.
         */</comment>
        <function><type><specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>o</name></decl></param>)</parameter_list> <block>{
            <decl_stmt><decl><type><name>Tuple</name></type> <name>that</name> =<init> <expr>(<name>Tuple</name>) <name>o</name></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>key</name>.<name>compareTo</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>key</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>

    <function><type><specifier>private</specifier> <name>List</name></type> <name>sortProperties</name><parameter_list>(<param><decl><type><name>Properties</name></type> <name>props</name></decl></param>)</parameter_list> <block>{
        <comment type="line">//sort the list. Makes SCM and manual diffs easier.</comment>
        <decl_stmt><decl><type><name>List</name></type> <name>sorted</name> =<init> <expr>new <call><name>ArrayList</name><argument_list>(<argument><expr><call><name><name>props</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Enumeration</name></type> <name>e</name> =<init> <expr><call><name><name>props</name>.<name>propertyNames</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>name</name> =<init> <expr>(<name>String</name>) <call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>sorted</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>Tuple</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>props</name>.<name>getProperty</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <expr_stmt><expr><call><name><name>Collections</name>.<name>sort</name></name><argument_list>(<argument><expr><name>sorted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>sorted</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Output the properties as xml output.
     * @param props the properties to save
     * @param os    the output stream to write to (Note this gets closed)
     * @throws IOException on error in writing to the stream
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>xmlSaveProperties</name><parameter_list>(<param><decl><type><name>Properties</name></type> <name>props</name></decl></param>,
                                     <param><decl><type><name>OutputStream</name></type> <name>os</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <comment type="line">// create XML document</comment>
        <decl_stmt><decl><type><name>Document</name></type> <name>doc</name> =<init> <expr><call><name>getDocumentBuilder</name><argument_list>()</argument_list></call>.<call><name>newDocument</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Element</name></type> <name>rootElement</name> =<init> <expr><call><name><name>doc</name>.<name>createElement</name></name><argument_list>(<argument><expr><name>PROPERTIES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>List</name></type> <name>sorted</name> =<init> <expr><call><name>sortProperties</name><argument_list>(<argument><expr><name>props</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


        <comment type="line">// output properties</comment>
        <decl_stmt><decl><type><name>Iterator</name></type> <name>iten</name> =<init> <expr><call><name><name>sorted</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>iten</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>Tuple</name></type> <name>tuple</name> =<init> <expr>(<name>Tuple</name>) <call><name><name>iten</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Element</name></type> <name>propElement</name> =<init> <expr><call><name><name>doc</name>.<name>createElement</name></name><argument_list>(<argument><expr><name>PROPERTY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>propElement</name>.<name>setAttribute</name></name><argument_list>(<argument><expr><name>ATTR_NAME</name></expr></argument>, <argument><expr><name><name>tuple</name>.<name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>propElement</name>.<name>setAttribute</name></name><argument_list>(<argument><expr><name>ATTR_VALUE</name></expr></argument>, <argument><expr><name><name>tuple</name>.<name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>rootElement</name>.<name>appendChild</name></name><argument_list>(<argument><expr><name>propElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>

        <decl_stmt><decl><type><name>Writer</name></type> <name>wri</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>wri</name> = new <call><name>OutputStreamWriter</name><argument_list>(<argument><expr><name>os</name></expr></argument>, <argument><expr>"UTF8"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>wri</name>.<name>write</name></name><argument_list>(<argument><expr>"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr>(new <call><name>DOMElementWriter</name><argument_list>()</argument_list></call>).<call><name>write</name><argument_list>(<argument><expr><name>rootElement</name></expr></argument>, <argument><expr><name>wri</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>"\t"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>wri</name>.<name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ioe</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Unable to write XML file"</expr></argument>, <argument><expr><name>ioe</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>wri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <comment type="javadoc">/**
     *  JDK 1.2 allows for the safer method
     *  &lt;tt&gt;Properties.store(OutputStream, String)&lt;/tt&gt;, which throws an
     *  &lt;tt&gt;IOException&lt;/tt&gt; on an output error.
     *
     *@param props the properties to record
     *@param os record the properties to this output stream
     *@param header prepend this header to the property output
     *@exception IOException on an I/O error during a write.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>jdkSaveProperties</name><parameter_list>(<param><decl><type><name>Properties</name></type> <name>props</name></decl></param>, <param><decl><type><name>OutputStream</name></type> <name>os</name></decl></param>,
                                     <param><decl><type><name>String</name></type> <name>header</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
       <try>try <block>{
           <expr_stmt><expr><call><name><name>props</name>.<name>store</name></name><argument_list>(<argument><expr><name>os</name></expr></argument>, <argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ioe</name></decl></param>) <block>{
           <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>ioe</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
       }</block></catch> <finally>finally <block>{
           <if>if <condition>(<expr><name>os</name> != <name>null</name></expr>)</condition><then> <block>{
               <try>try <block>{
                   <expr_stmt><expr><call><name><name>os</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
               }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ioex</name></decl></param>) <block>{
                   <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Failed to close output stream"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
               }</block></catch></try>
           }</block></then></if>
       }</block></finally></try>
    }</block></function>


    <comment type="javadoc">/**
     * Uses the DocumentBuilderFactory to get a DocumentBuilder instance.
     *
     * @return   The DocumentBuilder instance
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>DocumentBuilder</name></type> <name>getDocumentBuilder</name><parameter_list>()</parameter_list> <block>{
        <try>try <block>{
            <return>return <expr><call><name><name>DocumentBuilderFactory</name>.<name>newInstance</name></name><argument_list>()</argument_list></call>.<call><name>newDocumentBuilder</name><argument_list>()</argument_list></call></expr>;</return>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>ExceptionInInitializerError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>
}</block></class>

</unit>
