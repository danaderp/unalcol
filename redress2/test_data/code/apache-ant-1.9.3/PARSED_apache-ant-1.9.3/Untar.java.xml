<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\Untar.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>BufferedInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>zip</name>.<name>GZIPInputStream</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>EnumeratedAttribute</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>Resource</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileNameMapper</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>FileUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>bzip2</name>.<name>CBZip2InputStream</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>tar</name>.<name>TarEntry</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>tar</name>.<name>TarInputStream</name></name>;</import>



<comment type="javadoc">/**
 * Untar a file.
 * &lt;p&gt;PatternSets are used to select files to extract
 * &lt;I&gt;from&lt;/I&gt; the archive.  If no patternset is used, all files are extracted.
 * &lt;/p&gt;
 * &lt;p&gt;FileSets may be used to select archived files
 * to perform unarchival upon.
 * &lt;/p&gt;
 * &lt;p&gt;File permissions will not be restored on extracted files.&lt;/p&gt;
 * &lt;p&gt;The untar task recognizes the long pathname entries used by GNU tar.&lt;p&gt;
 *
 * @since Ant 1.1
 *
 * @ant.task category="packaging"
 */</comment>
<class><specifier>public</specifier> class <name>Untar</name> <super><extends>extends <name>Expand</name></extends></super> <block>{
    <comment type="javadoc">/**
     *   compression method
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>UntarCompressionMethod</name></type> <name>compression</name> =<init> <expr>new <call><name>UntarCompressionMethod</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Set decompression algorithm to use; default=none.
     *
     * Allowable values are
     * &lt;ul&gt;
     *   &lt;li&gt;none - no compression
     *   &lt;li&gt;gzip - Gzip compression
     *   &lt;li&gt;bzip2 - Bzip2 compression
     * &lt;/ul&gt;
     *
     * @param method compression method
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCompression</name><parameter_list>(<param><decl><type><name>UntarCompressionMethod</name></type> <name>method</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>compression</name> = <name>method</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * No encoding support in Untar.
     * @param encoding not used
     * @throws BuildException always
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setEncoding</name><parameter_list>(<param><decl><type><name>String</name></type> <name>encoding</name></decl></param>)</parameter_list> <block>{
        <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"The " + <call><name>getTaskName</name><argument_list>()</argument_list></call>
                                 + " task doesn't support the encoding"
                                 + " attribute"</expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>

    <comment type="javadoc">/**
     * No unicode extra fields in tar.
     *
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setScanForUnicodeExtraFields</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"The " + <call><name>getTaskName</name><argument_list>()</argument_list></call>
                                 + " task doesn't support the encoding"
                                 + " attribute"</expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>

    <comment type="javadoc">/**
     * @see Expand#expandFile(FileUtils, File, File)
     */</comment>
    <comment type="javadoc">/** {@inheritDoc} */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>expandFile</name><parameter_list>(<param><decl><type><name>FileUtils</name></type> <name>fileUtils</name></decl></param>, <param><decl><type><name>File</name></type> <name>srcF</name></decl></param>, <param><decl><type><name>File</name></type> <name>dir</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>FileInputStream</name></type> <name>fis</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>srcF</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Unable to untar "
                    + <name>srcF</name>
                    + " as the file does not exist"</expr></argument>,
                    <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <try>try <block>{
            <expr_stmt><expr><name>fis</name> = new <call><name>FileInputStream</name><argument_list>(<argument><expr><name>srcF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>expandStream</name><argument_list>(<argument><expr><call><name><name>srcF</name>.<name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>fis</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ioe</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Error while expanding " + <call><name><name>srcF</name>.<name>getPath</name></name><argument_list>()</argument_list></call>
                                     + "\n" + <call><name><name>ioe</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>,
                                     <argument><expr><name>ioe</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>fis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <comment type="javadoc">/**
     * This method is to be overridden by extending unarchival tasks.
     *
     * @param srcR      the source resource
     * @param dir       the destination directory
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>expandResource</name><parameter_list>(<param><decl><type><name>Resource</name></type> <name>srcR</name></decl></param>, <param><decl><type><name>File</name></type> <name>dir</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr>!<call><name><name>srcR</name>.<name>isExists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Unable to untar "
                                     + <call><name><name>srcR</name>.<name>getName</name></name><argument_list>()</argument_list></call>
                                     + " as the it does not exist"</expr></argument>,
                                     <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <decl_stmt><decl><type><name>InputStream</name></type> <name>i</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>i</name> = <call><name><name>srcR</name>.<name>getInputStream</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>expandStream</name><argument_list>(<argument><expr><call><name><name>srcR</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>ioe</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"Error while expanding " + <call><name><name>srcR</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                                     <argument><expr><name>ioe</name></expr></argument>, <argument><expr><call><name>getLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <comment type="javadoc">/**
     * @since Ant 1.7
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>expandStream</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>, <param><decl><type><name>InputStream</name></type> <name>stream</name></decl></param>, <param><decl><type><name>File</name></type> <name>dir</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>TarInputStream</name></type> <name>tis</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>tis</name> =
                new <call><name>TarInputStream</name><argument_list>(<argument><expr><call><name><name>compression</name>.<name>decompress</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>,
                                                          <argument><expr>new <call><name>BufferedInputStream</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Expanding: " + <name>name</name> + " into " + <name>dir</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>TarEntry</name></type> <name>te</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>empty</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>FileNameMapper</name></type> <name>mapper</name> =<init> <expr><call><name>getMapper</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr>(<name>te</name> = <call><name><name>tis</name>.<name>getNextEntry</name></name><argument_list>()</argument_list></call>) != <name>null</name></expr>)</condition> <block>{
                <expr_stmt><expr><name>empty</name> = false</expr>;</expr_stmt>
                <expr_stmt><expr><call><name>extractFile</name><argument_list>(<argument><expr><call><name><name>FileUtils</name>.<name>getFileUtils</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>tis</name></expr></argument>,
                            <argument><expr><call><name><name>te</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>te</name>.<name>getModTime</name></name><argument_list>()</argument_list></call></expr></argument>,
                            <argument><expr><call><name><name>te</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>mapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
            <if>if <condition>(<expr><name>empty</name> &amp;&amp; <call><name>getFailOnEmptyArchive</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"archive '" + <name>name</name> + "' is empty"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"expand complete"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>FileUtils</name>.<name>close</name></name><argument_list>(<argument><expr><name>tis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <comment type="javadoc">/**
     * Valid Modes for Compression attribute to Untar Task
     *
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>UntarCompressionMethod</name>
        <super><extends>extends <name>EnumeratedAttribute</name></extends></super> <block>{

        <comment type="line">// permissible values for compression attribute</comment>
        <comment type="javadoc">/**
         *  No compression
         */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>NONE</name> =<init> <expr>"none"</expr></init></decl>;</decl_stmt>
        <comment type="javadoc">/**
         *  GZIP compression
         */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>GZIP</name> =<init> <expr>"gzip"</expr></init></decl>;</decl_stmt>
        <comment type="javadoc">/**
         *  BZIP2 compression
         */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>BZIP2</name> =<init> <expr>"bzip2"</expr></init></decl>;</decl_stmt>


        <comment type="javadoc">/**
         *  Constructor
         */</comment>
        <constructor><specifier>public</specifier> <name>UntarCompressionMethod</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setValue</name><argument_list>(<argument><expr><name>NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="javadoc">/**
         * Get valid enumeration values
         *
         * @return valid values
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getValues</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr>new <name><name>String</name><index>[]</index></name> <block>{<expr><name>NONE</name></expr>, <expr><name>GZIP</name></expr>, <expr><name>BZIP2</name></expr>}</block></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         *  This method wraps the input stream with the
         *     corresponding decompression method
         *
         *  @param name provides location information for BuildException
         *  @param istream input stream
         *  @return input stream with on-the-fly decompression
         *  @exception IOException thrown by GZIPInputStream constructor
         *  @exception BuildException thrown if bzip stream does not
         *     start with expected magic values
         */</comment>
        <function><type><specifier>public</specifier> <name>InputStream</name></type> <name>decompress</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>name</name></decl></param>,
                                       <param><decl><type><specifier>final</specifier> <name>InputStream</name></type> <name>istream</name></decl></param>)</parameter_list>
            <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>v</name> =<init> <expr><call><name>getValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>GZIP</name>.<name>equals</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>new <call><name>GZIPInputStream</name><argument_list>(<argument><expr><name>istream</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then> <else>else <block>{
                <if>if <condition>(<expr><call><name><name>BZIP2</name>.<name>equals</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><specifier>final</specifier> <name>char</name><index>[]</index></type> <name>magic</name> =<init> <expr>new <name><name>char</name><index>[]</index></name> <block>{<expr>'B'</expr>, <expr>'Z'</expr>}</block></expr></init></decl>;</decl_stmt>
                    <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>magic</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                        <if>if <condition>(<expr><call><name><name>istream</name>.<name>read</name></name><argument_list>()</argument_list></call> != <name><name>magic</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
                            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(
                                                     <argument><expr>"Invalid bz2 file." + <name>name</name></expr></argument>)</argument_list></call></expr>;</throw>
                        }</block></then></if>
                    }</block></for>
                    <return>return <expr>new <call><name>CBZip2InputStream</name><argument_list>(<argument><expr><name>istream</name></expr></argument>)</argument_list></call></expr>;</return>
                }</block></then></if>
            }</block></else></if>
            <return>return <expr><name>istream</name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
