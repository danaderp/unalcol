<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\email\Message.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>email</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>BufferedReader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>BufferedWriter</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileReader</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>OutputStreamWriter</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>PrintStream</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>ProjectComponent</name></name>;</import>

<comment type="javadoc">/**
 * Class representing an email message.
 *
 * @since Ant 1.5
 */</comment>
<class><specifier>public</specifier> class <name>Message</name> <super><extends>extends <name>ProjectComponent</name></extends></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>messageSource</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>StringBuffer</name></type> <name>buffer</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>mimeType</name> =<init> <expr>"text/plain"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>specified</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>charset</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Creates a new empty message  */</comment>
    <constructor><specifier>public</specifier> <name>Message</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>


    <comment type="javadoc">/**
     * Creates a new message based on the given string
     *
     * @param text the message
     */</comment>
    <constructor><specifier>public</specifier> <name>Message</name><parameter_list>(<param><decl><type><name>String</name></type> <name>text</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>addText</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <comment type="javadoc">/**
     * Creates a new message using the contents of the given file.
     *
     * @param file the source of the message
     */</comment>
    <constructor><specifier>public</specifier> <name>Message</name><parameter_list>(<param><decl><type><name>File</name></type> <name>file</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>messageSource</name> = <name>file</name></expr>;</expr_stmt>
    }</block></constructor>


    <comment type="javadoc">/**
     * Adds a textual part of the message
     *
     * @param text some text to add
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addText</name><parameter_list>(<param><decl><type><name>String</name></type> <name>text</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>buffer</name>.<name>append</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Sets the source file of the message
     *
     * @param src the source of the message
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSrc</name><parameter_list>(<param><decl><type><name>File</name></type> <name>src</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>messageSource</name></name> = <name>src</name></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Sets the content type for the message
     *
     * @param mimeType a mime type e.g. "text/plain"
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMimeType</name><parameter_list>(<param><decl><type><name>String</name></type> <name>mimeType</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>mimeType</name></name> = <name>mimeType</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>specified</name> = true</expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Returns the content type
     *
     * @return the mime type
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getMimeType</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>mimeType</name></expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     * Prints the message onto an output stream
     *
     * @param ps The print stream to write to
     * @throws IOException if an error occurs
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>print</name><parameter_list>(<param><decl><type><name>PrintStream</name></type> <name>ps</name></decl></param>)</parameter_list>
         <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <comment type="line">// We need character encoding aware printing here.</comment>
        <comment type="line">// So, using BufferedWriter over OutputStreamWriter instead of PrintStream</comment>
        <decl_stmt><decl><type><name>BufferedWriter</name></type> <name>out</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>out</name>
                = <name>charset</name> != <name>null</name> ? new <call><name>BufferedWriter</name><argument_list>(<argument><expr>new <call><name>OutputStreamWriter</name><argument_list>(<argument><expr><name>ps</name></expr></argument>, <argument><expr><name>charset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                : new <call><name>BufferedWriter</name><argument_list>(<argument><expr>new <call><name>OutputStreamWriter</name><argument_list>(<argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>messageSource</name> != <name>null</name></expr>)</condition><then> <block>{
                <comment type="line">// Read message from a file</comment>
                <decl_stmt><decl><type><name>FileReader</name></type> <name>freader</name> =<init> <expr>new <call><name>FileReader</name><argument_list>(<argument><expr><name>messageSource</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <try>try <block>{
                    <decl_stmt><decl><type><name>BufferedReader</name></type> <name>in</name> =<init> <expr>new <call><name>BufferedReader</name><argument_list>(<argument><expr><name>freader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>line</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                    <while>while <condition>(<expr>(<name>line</name> = <call><name><name>in</name>.<name>readLine</name></name><argument_list>()</argument_list></call>) != <name>null</name></expr>)</condition> <block>{
                        <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>replaceProperties</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>out</name>.<name>newLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></while>
                }</block> <finally>finally <block>{
                    <expr_stmt><expr><call><name><name>freader</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></finally></try>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr><call><name>getProject</name><argument_list>()</argument_list></call>.<call><name>replaceProperties</name><argument_list>(<argument><expr><call><name><name>buffer</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>out</name>.<name>newLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><call><name><name>out</name>.<name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
            <comment type="line">//do not close the out writer as it is reused afterwards by the mail task</comment>
        }</block></finally></try>
    }</block></function>


    <comment type="javadoc">/**
     * Returns true if the mimeType has been set.
     *
     * @return false if the default value is in use
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isMimeTypeSpecified</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>specified</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the character set of mail message.
     * Will be ignored if mimeType contains ....; Charset=... substring.
     * @param charset the character set name.
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCharset</name><parameter_list>(<param><decl><type><name>String</name></type> <name>charset</name></decl></param>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name>.<name>charset</name></name> = <name>charset</name></expr>;</expr_stmt>
    }</block></function>
    <comment type="javadoc">/**
     * Returns the charset of mail message.
     *
     * @return Charset of mail message.
     * @since Ant 1.6
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getCharset</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>charset</name></expr>;</return>
    }</block></function>
}</block></class>

</unit>
