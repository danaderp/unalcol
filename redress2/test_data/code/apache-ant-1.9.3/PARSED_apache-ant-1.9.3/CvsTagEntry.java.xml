<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\cvslib\CvsTagEntry.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>cvslib</name></name>;</package>

<comment type="javadoc">/**
 * Holds the information of a line of rdiff
 */</comment>
<class><specifier>public</specifier> class <name>CvsTagEntry</name> <block>{

    <comment type="javadoc">/** the filename */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>filename</name></decl>;</decl_stmt>

    <comment type="javadoc">/** the previous revision */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>prevRevision</name></decl>;</decl_stmt>

    <comment type="javadoc">/** the revision */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>revision</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a new CvsTagEntry
     * @param filename the filename to add
     */</comment>
    <constructor><specifier>public</specifier> <name>CvsTagEntry</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>filename</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a new CvsTagEntry
     * @param filename the filename to add
     * @param revision the revision
     */</comment>
    <constructor><specifier>public</specifier> <name>CvsTagEntry</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>filename</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>revision</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a new CvsTagEntry
     * @param filename the filename to add
     * @param revision the revision
     * @param prevRevision the previous revision
     */</comment>
    <constructor><specifier>public</specifier> <name>CvsTagEntry</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>filename</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>revision</name></decl></param>,
                       <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>prevRevision</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>filename</name></name> = <name>filename</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>revision</name></name> = <name>revision</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>prevRevision</name></name> = <name>prevRevision</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Gets the filename for this CvsTagEntry
     * @return the filename
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getFile</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>filename</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Gets the revision for this CvsTagEntry
     * @return the revision
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getRevision</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>revision</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Gets the previous revision for this CvsTagEntry
     * @return the previous revision
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getPreviousRevision</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>prevRevision</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Gets a String containing filename and difference from previous version
     * @return a string representation of this CVSTagEntry
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>buffer</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>buffer</name>.<name>append</name></name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>revision</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>buffer</name>.<name>append</name></name><argument_list>(<argument><expr>" was removed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>prevRevision</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>buffer</name>.<name>append</name></name><argument_list>(<argument><expr>"; previous revision was "</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><name>prevRevision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then> <else>else <if>if <condition>(<expr><name>prevRevision</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>buffer</name>.<name>append</name></name><argument_list>(<argument><expr>" is new; current revision is "</expr></argument>)</argument_list></call>
                .<call><name>append</name><argument_list>(<argument><expr><name>revision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>buffer</name>.<name>append</name></name><argument_list>(<argument><expr>" has changed from "</expr></argument>)</argument_list></call>
                .<call><name>append</name><argument_list>(<argument><expr><name>prevRevision</name></expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr>" to "</expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr><name>revision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if></else></if>
        <return>return <expr><call><name><name>buffer</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
