<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\types\PermissionsTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name></name>;</package>

<import>import <name><name>junit</name>.<name>framework</name>.<name>TestCase</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>ExitException</name></name>;</import>

<comment type="javadoc">/**
 * JUnit 3 testcases for org.apache.tools.ant.types.Permissions.
 *
 */</comment>
<class><specifier>public</specifier> class <name>PermissionsTest</name> <super><extends>extends <name>TestCase</name></extends></super> <block>{

    <decl_stmt><decl><type><name>Permissions</name></type> <name>perms</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>PermissionsTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>perms</name> = new <call><name>Permissions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>Permissions</name>.<name>Permission</name></name></type> <name>perm</name> =<init> <expr>new <call><name><name>Permissions</name>.<name>Permission</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// Grant extra permissions to read and write the user.* properties and read to the</comment>
        <comment type="line">// java.home property</comment>
        <expr_stmt><expr><call><name><name>perm</name>.<name>setActions</name></name><argument_list>(<argument><expr>"read, write"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>perm</name>.<name>setName</name></name><argument_list>(<argument><expr>"user.*"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>perm</name>.<name>setClass</name></name><argument_list>(<argument><expr>"java.util.PropertyPermission"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>perms</name>.<name>addConfiguredGrant</name></name><argument_list>(<argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>perm</name> = new <call><name><name>Permissions</name>.<name>Permission</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>perm</name>.<name>setActions</name></name><argument_list>(<argument><expr>"read"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>perm</name>.<name>setName</name></name><argument_list>(<argument><expr>"java.home"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>perm</name>.<name>setClass</name></name><argument_list>(<argument><expr>"java.util.PropertyPermission"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>perms</name>.<name>addConfiguredGrant</name></name><argument_list>(<argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>perm</name> = new <call><name><name>Permissions</name>.<name>Permission</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>perm</name>.<name>setActions</name></name><argument_list>(<argument><expr>"read"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>perm</name>.<name>setName</name></name><argument_list>(<argument><expr>"file.encoding"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>perm</name>.<name>setClass</name></name><argument_list>(<argument><expr>"java.util.PropertyPermission"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>perms</name>.<name>addConfiguredGrant</name></name><argument_list>(<argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Revoke permission to write user.home (granted above via user.*), still able to read though.</comment>
        <comment type="line">// and the default granted permission to read os.name.</comment>
        <expr_stmt><expr><name>perm</name> = new <call><name><name>Permissions</name>.<name>Permission</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>perm</name>.<name>setActions</name></name><argument_list>(<argument><expr>"write"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>perm</name>.<name>setName</name></name><argument_list>(<argument><expr>"user.home"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>perm</name>.<name>setClass</name></name><argument_list>(<argument><expr>"java.util.PropertyPermission"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>perms</name>.<name>addConfiguredRevoke</name></name><argument_list>(<argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>perm</name> = new <call><name><name>Permissions</name>.<name>Permission</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>perm</name>.<name>setActions</name></name><argument_list>(<argument><expr>"read"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>perm</name>.<name>setName</name></name><argument_list>(<argument><expr>"os.*"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>perm</name>.<name>setClass</name></name><argument_list>(<argument><expr>"java.util.PropertyPermission"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>perms</name>.<name>addConfiguredRevoke</name></name><argument_list>(<argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/** Tests a permission that is granted per default. */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testDefaultGranted</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>perms</name>.<name>setSecurityManager</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>s</name> =<init> <expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"line.separator"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>perms</name>.<name>restoreSecurityManager</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <comment type="javadoc">/** Tests a permission that has been granted later via wildcard. */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testGranted</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>perms</name>.<name>setSecurityManager</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>s</name> =<init> <expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"user.name"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>setProperty</name></name><argument_list>(<argument><expr>"user.name"</expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>perms</name>.<name>restoreSecurityManager</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <comment type="javadoc">/** Tests a permission that has been granted and revoked later. */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testGrantedAndRevoked</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>perms</name>.<name>setSecurityManager</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>s</name> =<init> <expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"user.home"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>setProperty</name></name><argument_list>(<argument><expr>"user.home"</expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Could perform an action that should have been forbidden."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>SecurityException</name></type> <name>e</name></decl></param>)<block>{
            <comment type="line">// Was expected, test passes</comment>
        }</block></catch> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>perms</name>.<name>restoreSecurityManager</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <comment type="javadoc">/** Tests a permission that is granted as per default but revoked later via wildcard. */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testDefaultRevoked</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>perms</name>.<name>setSecurityManager</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"os.name"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Could perform an action that should have been forbidden."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>SecurityException</name></type> <name>e</name></decl></param>)<block>{
            <comment type="line">// Was expected, test passes</comment>
        }</block></catch> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>perms</name>.<name>restoreSecurityManager</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>
    <comment type="javadoc">/** Tests a permission that has not been granted or revoked. */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testOther</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>ls</name> =<init> <expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"line.separator"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>perms</name>.<name>setSecurityManager</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>s</name> =<init> <expr><call><name><name>System</name>.<name>setProperty</name></name><argument_list>(<argument><expr>"line.separator"</expr></argument>,<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Could perform an action that should have been forbidden."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>SecurityException</name></type> <name>e</name></decl></param>)<block>{
            <comment type="line">// Was expected, test passes</comment>
        }</block></catch> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>perms</name>.<name>restoreSecurityManager</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <comment type="javadoc">/** Tests an exit condition. */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testExit</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>perms</name>.<name>setSecurityManager</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"If this is the last line on standard out the testExit f.a.i.l.e.d"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>exit</name></name><argument_list>(<argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Totaly impossible that this fail is ever executed. Please let me know if it is!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>ExitException</name></type> <name>e</name></decl></param>) <block>{
            <if>if <condition>(<expr><call><name><name>e</name>.<name>getStatus</name></name><argument_list>()</argument_list></call> != 3</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Received wrong exit status in Exit Exception."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"testExit successful."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>perms</name>.<name>restoreSecurityManager</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>()</parameter_list> <block>{
    }</block></function>

}</block></class>
</unit>
