<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\ProjectTest.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>input</name>.<name>DefaultInputHandler</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>input</name>.<name>InputHandler</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>input</name>.<name>PropertyFileInputHandler</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>condition</name>.<name>Os</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name></name>.*;</import>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>junit</name>.<name>framework</name>.<name>TestCase</name></name>;</import>


<comment type="javadoc">/**
 * Very limited test class for Project. Waiting to be extended.
 *
 */</comment>
<class><specifier>public</specifier> class <name>ProjectTest</name> <super><extends>extends <name>TestCase</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>Project</name></type> <name>p</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>root</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>MockBuildListener</name></type> <name>mbl</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ProjectTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>p</name> = new <call><name>Project</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>root</name> = new <call><name>File</name><argument_list>(<argument><expr><name><name>File</name>.<name>separator</name></name></expr></argument>)</argument_list></call>.<call><name>getAbsolutePath</name><argument_list>()</argument_list></call>.<call><name>toUpperCase</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mbl</name> = new <call><name>MockBuildListener</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testDataTypes</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr>"dummy is not a known data type"</expr></argument>,
                   <argument><expr><call><name><name>p</name>.<name>createDataType</name></name><argument_list>(<argument><expr>"dummy"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Object</name></type> <name>o</name> =<init> <expr><call><name><name>p</name>.<name>createDataType</name></name><argument_list>(<argument><expr>"fileset"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr>"fileset is a known type"</expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"fileset creates FileSet"</expr></argument>, <argument><expr><name>o</name> <name>instanceof</name> <name>FileSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"PatternSet"</expr></argument>,
               <argument><expr><call><name><name>p</name>.<name>createDataType</name></name><argument_list>(<argument><expr>"patternset"</expr></argument>)</argument_list></call> <name>instanceof</name> <name>PatternSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Path"</expr></argument>, <argument><expr><call><name><name>p</name>.<name>createDataType</name></name><argument_list>(<argument><expr>"path"</expr></argument>)</argument_list></call> <name>instanceof</name> <name>Path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * This test has been a starting point for moving the code to FileUtils.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testResolveFile</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr>"netware"</expr></argument>)</argument_list></call> || <call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr>"dos"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>assertEqualsIgnoreDriveCase</name><argument_list>(<argument><expr><call><name>localize</name><argument_list>(<argument><expr><name><name>File</name>.<name>separator</name></name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>p</name>.<name>resolveFile</name></name><argument_list>(<argument><expr>"/"</expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEqualsIgnoreDriveCase</name><argument_list>(<argument><expr><call><name>localize</name><argument_list>(<argument><expr><name><name>File</name>.<name>separator</name></name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>p</name>.<name>resolveFile</name></name><argument_list>(<argument><expr>"\\"</expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block">/*
             * throw in drive letters
             */</comment>
            <decl_stmt><decl><type><name>String</name></type> <name>driveSpec</name> =<init> <expr>"C:"</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>driveSpecLower</name> =<init> <expr>"c:"</expr></init></decl>;</decl_stmt>
            
            <expr_stmt><expr><call><name>assertEqualsIgnoreDriveCase</name><argument_list>(<argument><expr><name>driveSpecLower</name> + "\\"</expr></argument>,
                         <argument><expr><call><name><name>p</name>.<name>resolveFile</name></name><argument_list>(<argument><expr><name>driveSpec</name> + "/"</expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEqualsIgnoreDriveCase</name><argument_list>(<argument><expr><name>driveSpecLower</name> + "\\"</expr></argument>,
                         <argument><expr><call><name><name>p</name>.<name>resolveFile</name></name><argument_list>(<argument><expr><name>driveSpec</name> + "\\"</expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEqualsIgnoreDriveCase</name><argument_list>(<argument><expr><name>driveSpecLower</name> + "\\"</expr></argument>,
                         <argument><expr><call><name><name>p</name>.<name>resolveFile</name></name><argument_list>(<argument><expr><name>driveSpecLower</name> + "/"</expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEqualsIgnoreDriveCase</name><argument_list>(<argument><expr><name>driveSpecLower</name> + "\\"</expr></argument>,
                         <argument><expr><call><name><name>p</name>.<name>resolveFile</name></name><argument_list>(<argument><expr><name>driveSpecLower</name> + "\\"</expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block">/*
             * promised to eliminate consecutive slashes after drive letter.
             */</comment>
            <expr_stmt><expr><call><name>assertEqualsIgnoreDriveCase</name><argument_list>(<argument><expr><name>driveSpec</name> + "\\"</expr></argument>,
                         <argument><expr><call><name><name>p</name>.<name>resolveFile</name></name><argument_list>(<argument><expr><name>driveSpec</name> + "/////"</expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEqualsIgnoreDriveCase</name><argument_list>(<argument><expr><name>driveSpec</name> + "\\"</expr></argument>,
                         <argument><expr><call><name><name>p</name>.<name>resolveFile</name></name><argument_list>(<argument><expr><name>driveSpec</name> + "\\\\\\\\\\\\"</expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <comment type="block">/*
             * Start with simple absolute file names.
             */</comment>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>File</name>.<name>separator</name></name></expr></argument>,
                         <argument><expr><call><name><name>p</name>.<name>resolveFile</name></name><argument_list>(<argument><expr>"/"</expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>File</name>.<name>separator</name></name></expr></argument>,
                         <argument><expr><call><name><name>p</name>.<name>resolveFile</name></name><argument_list>(<argument><expr>"\\"</expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block">/*
             * drive letters are not used, just to be considered as normal
             * part of a name
             */</comment>
            <decl_stmt><decl><type><name>String</name></type> <name>driveSpec</name> =<init> <expr>"C:"</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>udir</name> =<init> <expr><call><name><name>System</name>.<name>getProperty</name></name><argument_list>(<argument><expr>"user.dir"</expr></argument>)</argument_list></call> + <name><name>File</name>.<name>separatorChar</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>udir</name> + <name>driveSpec</name></expr></argument>,
                         <argument><expr><call><name><name>p</name>.<name>resolveFile</name></name><argument_list>(<argument><expr><name>driveSpec</name> + "/"</expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>udir</name> + <name>driveSpec</name></expr></argument>,
                         <argument><expr><call><name><name>p</name>.<name>resolveFile</name></name><argument_list>(<argument><expr><name>driveSpec</name> + "\\"</expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>driveSpecLower</name> =<init> <expr>"c:"</expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>udir</name> + <name>driveSpecLower</name></expr></argument>,
                         <argument><expr><call><name><name>p</name>.<name>resolveFile</name></name><argument_list>(<argument><expr><name>driveSpecLower</name> + "/"</expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>udir</name> + <name>driveSpecLower</name></expr></argument>,
                         <argument><expr><call><name><name>p</name>.<name>resolveFile</name></name><argument_list>(<argument><expr><name>driveSpecLower</name> + "\\"</expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <comment type="block">/*
         * Now test some relative file name magic.
         */</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>localize</name><argument_list>(<argument><expr>"/1/2/3/4"</expr></argument>)</argument_list></call></expr></argument>,
                     <argument><expr><call><name><name>p</name>.<name>resolveFile</name></name><argument_list>(<argument><expr>"4"</expr></argument>, <argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>localize</name><argument_list>(<argument><expr>"/1/2/3"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>localize</name><argument_list>(<argument><expr>"/1/2/3/4"</expr></argument>)</argument_list></call></expr></argument>,
                     <argument><expr><call><name><name>p</name>.<name>resolveFile</name></name><argument_list>(<argument><expr>"./4"</expr></argument>, <argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>localize</name><argument_list>(<argument><expr>"/1/2/3"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>localize</name><argument_list>(<argument><expr>"/1/2/3/4"</expr></argument>)</argument_list></call></expr></argument>,
                     <argument><expr><call><name><name>p</name>.<name>resolveFile</name></name><argument_list>(<argument><expr>".\\4"</expr></argument>, <argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>localize</name><argument_list>(<argument><expr>"/1/2/3"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>localize</name><argument_list>(<argument><expr>"/1/2/3/4"</expr></argument>)</argument_list></call></expr></argument>,
                     <argument><expr><call><name><name>p</name>.<name>resolveFile</name></name><argument_list>(<argument><expr>"./.\\4"</expr></argument>, <argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>localize</name><argument_list>(<argument><expr>"/1/2/3"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>localize</name><argument_list>(<argument><expr>"/1/2/3/4"</expr></argument>)</argument_list></call></expr></argument>,
                     <argument><expr><call><name><name>p</name>.<name>resolveFile</name></name><argument_list>(<argument><expr>"../3/4"</expr></argument>, <argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>localize</name><argument_list>(<argument><expr>"/1/2/3"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>localize</name><argument_list>(<argument><expr>"/1/2/3/4"</expr></argument>)</argument_list></call></expr></argument>,
                     <argument><expr><call><name><name>p</name>.<name>resolveFile</name></name><argument_list>(<argument><expr>"..\\3\\4"</expr></argument>, <argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>localize</name><argument_list>(<argument><expr>"/1/2/3"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>localize</name><argument_list>(<argument><expr>"/1/2/3/4"</expr></argument>)</argument_list></call></expr></argument>,
                     <argument><expr><call><name><name>p</name>.<name>resolveFile</name></name><argument_list>(<argument><expr>"../../5/.././2/./3/6/../4"</expr></argument>, <argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>localize</name><argument_list>(<argument><expr>"/1/2/3"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name>localize</name><argument_list>(<argument><expr>"/1/2/3/4"</expr></argument>)</argument_list></call></expr></argument>,
                     <argument><expr><call><name><name>p</name>.<name>resolveFile</name></name><argument_list>(<argument><expr>"..\\../5/..\\./2/./3/6\\../4"</expr></argument>, <argument><expr>new <call><name>File</name><argument_list>(<argument><expr><call><name>localize</name><argument_list>(<argument><expr>"/1/2/3"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <comment type="javadoc">/**
     * adapt file separators to local conventions
     */</comment>
    <function><type><specifier>private</specifier> <name>String</name></type> <name>localize</name><parameter_list>(<param><decl><type><name>String</name></type> <name>path</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>path</name> = <name>root</name> + <call><name><name>path</name>.<name>substring</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>path</name>.<name>replace</name></name><argument_list>(<argument><expr>'\\'</expr></argument>, <argument><expr><name><name>File</name>.<name>separatorChar</name></name></expr></argument>)</argument_list></call>.<call><name>replace</name><argument_list>(<argument><expr>'/'</expr></argument>, <argument><expr><name><name>File</name>.<name>separatorChar</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * convenience method
     * the drive letter is in lower case under cygwin
     * calling this method allows tests where FileUtils.normalize
     * is called via resolveFile to pass under cygwin
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>assertEqualsIgnoreDriveCase</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s1</name></decl></param>, <param><decl><type><name>String</name></type> <name>s2</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr>(<call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr>"dos"</expr></argument>)</argument_list></call> || <call><name><name>Os</name>.<name>isFamily</name></name><argument_list>(<argument><expr>"netware"</expr></argument>)</argument_list></call>)
            &amp;&amp; <call><name><name>s1</name>.<name>length</name></name><argument_list>()</argument_list></call> &gt;= 1 &amp;&amp; <call><name><name>s2</name>.<name>length</name></name><argument_list>()</argument_list></call> &gt;= 1</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>StringBuffer</name></type> <name>sb1</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>StringBuffer</name></type> <name>sb2</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>sb1</name>.<name>setCharAt</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>Character</name>.<name>toUpperCase</name></name><argument_list>(<argument><expr><call><name><name>s1</name>.<name>charAt</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb2</name>.<name>setCharAt</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>Character</name>.<name>toUpperCase</name></name><argument_list>(<argument><expr><call><name><name>s2</name>.<name>charAt</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>sb1</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>sb2</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>assertTaskDefFails</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Class</name></type> <name>taskClass</name></decl></param>,
                                       <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>message</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>dummyName</name> =<init> <expr>"testTaskDefinitionDummy"</expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>mbl</name>.<name>addBuildEvent</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_ERR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>p</name>.<name>addTaskDefinition</name></name><argument_list>(<argument><expr><name>dummyName</name></expr></argument>, <argument><expr><name>taskClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"expected BuildException(\""+<name>message</name>+"\", Project.MSG_ERR) when adding task " + <name>taskClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch(<param><decl><type><name>BuildException</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mbl</name>.<name>assertEmpty</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>!<call><name><name>p</name>.<name>getTaskDefinitions</name></name><argument_list>()</argument_list></call>.<call><name>containsKey</name><argument_list>(<argument><expr><name>dummyName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testAddTaskDefinition</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>p</name>.<name>addBuildListener</name></name><argument_list>(<argument><expr><name>mbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>p</name>.<name>addTaskDefinition</name></name><argument_list>(<argument><expr>"Ok"</expr></argument>, <argument><expr><name><name>DummyTaskOk</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>DummyTaskOk</name>.<name><name/></name></name>class</expr></argument>, <argument><expr><call><name><name>p</name>.<name>getTaskDefinitions</name></name><argument_list>()</argument_list></call>.<call><name>get</name><argument_list>(<argument><expr>"Ok"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>addTaskDefinition</name></name><argument_list>(<argument><expr>"OkNonTask"</expr></argument>, <argument><expr><name><name>DummyTaskOkNonTask</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>DummyTaskOkNonTask</name>.<name><name/></name></name>class</expr></argument>, <argument><expr><call><name><name>p</name>.<name>getTaskDefinitions</name></name><argument_list>()</argument_list></call>.<call><name>get</name><argument_list>(<argument><expr>"OkNonTask"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mbl</name>.<name>assertEmpty</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertTaskDefFails</name><argument_list>(<argument><expr><name><name>DummyTaskPrivate</name>.<name><name/></name></name>class</expr></argument>,   <argument><expr><name><name>DummyTaskPrivate</name>.<name><name/></name></name>class   + " is not public"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertTaskDefFails</name><argument_list>(<argument><expr><name><name>DummyTaskProtected</name>.<name><name/></name></name>class</expr></argument>,
                           <argument><expr><name><name>DummyTaskProtected</name>.<name><name/></name></name>class + " is not public"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertTaskDefFails</name><argument_list>(<argument><expr><name><name>DummyTaskPackage</name>.<name><name/></name></name>class</expr></argument>,   <argument><expr><name><name>DummyTaskPackage</name>.<name><name/></name></name>class   + " is not public"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertTaskDefFails</name><argument_list>(<argument><expr><name><name>DummyTaskAbstract</name>.<name><name/></name></name>class</expr></argument>,  <argument><expr><name><name>DummyTaskAbstract</name>.<name><name/></name></name>class  + " is abstract"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTaskDefFails</name><argument_list>(<argument><expr><name><name>DummyTaskInterface</name>.<name><name/></name></name>class</expr></argument>, <argument><expr><name><name>DummyTaskInterface</name>.<name><name/></name></name>class + " is abstract"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertTaskDefFails</name><argument_list>(<argument><expr><name><name>DummyTaskWithoutDefaultConstructor</name>.<name><name/></name></name>class</expr></argument>, <argument><expr>"No public no-arg constructor in " + <name><name>DummyTaskWithoutDefaultConstructor</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTaskDefFails</name><argument_list>(<argument><expr><name><name>DummyTaskWithoutPublicConstructor</name>.<name><name/></name></name>class</expr></argument>,  <argument><expr>"No public no-arg constructor in " + <name><name>DummyTaskWithoutPublicConstructor</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertTaskDefFails</name><argument_list>(<argument><expr><name><name>DummyTaskWithoutExecute</name>.<name><name/></name></name>class</expr></argument>,       <argument><expr>"No public execute() in " + <name><name>DummyTaskWithoutExecute</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTaskDefFails</name><argument_list>(<argument><expr><name><name>DummyTaskWithNonPublicExecute</name>.<name><name/></name></name>class</expr></argument>, <argument><expr>"No public execute() in " + <name><name>DummyTaskWithNonPublicExecute</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>mbl</name>.<name>addBuildEvent</name></name><argument_list>(<argument><expr>"return type of execute() should be void but was \"int\" in " + <name><name>DummyTaskWithNonVoidExecute</name>.<name><name/></name></name>class</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>addTaskDefinition</name></name><argument_list>(<argument><expr>"NonVoidExecute"</expr></argument>, <argument><expr><name><name>DummyTaskWithNonVoidExecute</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mbl</name>.<name>assertEmpty</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>DummyTaskWithNonVoidExecute</name>.<name><name/></name></name>class</expr></argument>, <argument><expr><call><name><name>p</name>.<name>getTaskDefinitions</name></name><argument_list>()</argument_list></call>.<call><name>get</name><argument_list>(<argument><expr>"NonVoidExecute"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testInputHandler</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>InputHandler</name></type> <name>ih</name> =<init> <expr><call><name><name>p</name>.<name>getInputHandler</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>ih</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>ih</name> <name>instanceof</name> <name>DefaultInputHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>InputHandler</name></type> <name>pfih</name> =<init> <expr>new <call><name>PropertyFileInputHandler</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>setInputHandler</name></name><argument_list>(<argument><expr><name>pfih</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertSame</name><argument_list>(<argument><expr><name>pfih</name></expr></argument>, <argument><expr><call><name><name>p</name>.<name>getInputHandler</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testTaskDefinitionContainsKey</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>p</name>.<name>getTaskDefinitions</name></name><argument_list>()</argument_list></call>.<call><name>containsKey</name><argument_list>(<argument><expr>"echo"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testTaskDefinitionContains</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>p</name>.<name>getTaskDefinitions</name></name><argument_list>()</argument_list></call>.<call><name>contains</name><argument_list>(<argument><expr><name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>Echo</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testDuplicateTargets</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// fail, because buildfile contains two targets with the same name</comment>
        <try>try <block>{
            <decl_stmt><decl><type><name>BFT</name></type> <name>bft</name> =<init> <expr>new <call><name>BFT</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr>"core/duplicate-target.xml"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        }</block> <catch>catch (<param><decl><type><name>BuildException</name></type> <name>ex</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"specific message"</expr></argument>,
                         <argument><expr>"Duplicate target 'twice'"</expr></argument>,
                         <argument><expr><call><name><name>ex</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></catch></try>
        <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Should throw BuildException about duplicate target"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testDuplicateTargetsImport</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// overriding target from imported buildfile is allowed</comment>
        <decl_stmt><decl><type><name>BFT</name></type> <name>bft</name> =<init> <expr>new <call><name>BFT</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr>"core/duplicate-target2.xml"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>bft</name>.<name>expectLog</name></name><argument_list>(<argument><expr>"once"</expr></argument>, <argument><expr>"once from buildfile"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testOutputDuringMessageLoggedIsSwallowed</name><parameter_list>()</parameter_list>
        <throws>throws <argument><expr><name>InterruptedException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>FOO</name> =<init> <expr>"foo"</expr></init>, <name>BAR</name> =<init> <expr>"bar"</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>addBuildListener</name></name><argument_list>(<argument><expr>new <class><super><name>BuildListener</name></super><argument_list>()</argument_list> <block>{
                <function><type><specifier>public</specifier> <name>void</name></type> <name>buildStarted</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{}</block></function>
                <function><type><specifier>public</specifier> <name>void</name></type> <name>buildFinished</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{}</block></function>
                <function><type><specifier>public</specifier> <name>void</name></type> <name>targetStarted</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{}</block></function>
                <function><type><specifier>public</specifier> <name>void</name></type> <name>targetFinished</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{}</block></function>
                <function><type><specifier>public</specifier> <name>void</name></type> <name>taskStarted</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{}</block></function>
                <function><type><specifier>public</specifier> <name>void</name></type> <name>taskFinished</name><parameter_list>(<param><decl><type><name>BuildEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{}</block></function>
                <function><type><specifier>public</specifier> <name>void</name></type> <name>messageLogged</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>BuildEvent</name></type> <name>actual</name></decl></param>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>FOO</name></expr></argument>, <argument><expr><call><name><name>actual</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <comment type="line">// each of the following lines would cause an</comment>
                    <comment type="line">// infinite loop if the message wasn't swallowed</comment>
                    <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr><name>BAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><name>BAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>p</name>.<name>log</name></name><argument_list>(<argument><expr><name>BAR</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name><index>[]</index></type> <name>done</name> =<init> <expr>new <name><name>boolean</name><index>[]</index></name> <block>{<expr>false</expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Thread</name></type> <name>t</name> =<init> <expr>new <class><super><name>Thread</name></super><argument_list>()</argument_list> <block>{
                <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>p</name>.<name>log</name></name><argument_list>(<argument><expr><name>FOO</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_INFO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>done</name><index>[<expr>0</expr>]</index></name> = true</expr>;</expr_stmt>
                }</block></function>
            }</block></class></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>t</name>.<name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>t</name>.<name>join</name></name><argument_list>(<argument><expr>2000</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Expected logging thread to finish successfully"</expr></argument>, <argument><expr><name><name>done</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * @see https://issues.apache.org/bugzilla/show_bug.cgi?id=47623
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testNullThrowableMessageLog</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>p</name>.<name>log</name></name><argument_list>(<argument><expr>new <class><super><name>Task</name></super><argument_list>()</argument_list> <block>{}</block></class></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr>new <call><name>Throwable</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_ERR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// be content if no exception has been thrown</comment>
    }</block></function>

    <class><specifier>private</specifier> class <name>DummyTaskPrivate</name> <super><extends>extends <name>Task</name></extends></super> <block>{
        <constructor><specifier>public</specifier> <name>DummyTaskPrivate</name><parameter_list>()</parameter_list> <block>{}</block></constructor>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <block>{}</block></function>
    }</block></class>

    <class><specifier>protected</specifier> class <name>DummyTaskProtected</name> <super><extends>extends <name>Task</name></extends></super> <block>{
        <constructor><specifier>public</specifier> <name>DummyTaskProtected</name><parameter_list>()</parameter_list> <block>{}</block></constructor>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <block>{}</block></function>
    }</block></class>

    <class><specifier>private</specifier> class <name>BFT</name> <super><extends>extends <name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildFileTest</name></extends></super> <block>{
        <constructor><name>BFT</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>, <param><decl><type><name>String</name></type> <name>buildfile</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>buildfile</name></name> = <name>buildfile</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setUp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="line">// avoid multiple configurations</comment>
        <decl_stmt><decl><type><name>boolean</name></type> <name>isConfigured</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

        <comment type="line">// the buildfile to use</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>buildfile</name> =<init> <expr>""</expr></init></decl>;</decl_stmt>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
            <if>if <condition>(<expr>!<name>isConfigured</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr>"src/etc/testcases/"+<name>buildfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>isConfigured</name> = true</expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>()</parameter_list> <block>{ }</block></function>

        <comment type="line">// call a target</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>doTarget</name><parameter_list>(<param><decl><type><name>String</name></type> <name>target</name></decl></param>)</parameter_list> <block>{
            <if>if <condition>(<expr>!<name>isConfigured</name></expr>)</condition><then> <expr_stmt><expr><call><name>setUp</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
            <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name></type> <name>getProject</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><call><name><name>super</name>.<name>getProject</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class><comment type="line">//class-BFT</comment>

}</block></class>

<class>class <name>DummyTaskPackage</name> <super><extends>extends <name>Task</name></extends></super> <block>{
    <constructor><specifier>public</specifier> <name>DummyTaskPackage</name><parameter_list>()</parameter_list> <block>{}</block></constructor>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <block>{}</block></function>
}</block></class>
</unit>
