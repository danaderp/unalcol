<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\util\Watchdog.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>

<comment type="javadoc">/**
 * Generalization of &lt;code&gt;ExecuteWatchdog&lt;/code&gt;
 *
 * @since Ant 1.5
 *
 * @see org.apache.tools.ant.taskdefs.ExecuteWatchdog
 *
 */</comment>
<class><specifier>public</specifier> class <name>Watchdog</name> <super><implements>implements <name>Runnable</name></implements></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>Vector</name></type> <name>observers</name> =<init> <expr>new <call><name>Vector</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>timeout</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * marked as volatile to stop the compiler caching values or (in java1.5+,
     * reordering access)
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>volatile</name> <name>boolean</name></type> <name>stopped</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    <comment type="javadoc">/**
     * Error string.
     * {@value}
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ERROR_INVALID_TIMEOUT</name> =<init> <expr>"timeout less than 1."</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructor for Watchdog.
     * @param timeout the timeout to use in milliseconds (must be &gt;= 1).
     */</comment>
    <constructor><specifier>public</specifier> <name>Watchdog</name><parameter_list>(<param><decl><type><name>long</name></type> <name>timeout</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>timeout</name> &lt; 1</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><name>ERROR_INVALID_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>timeout</name></name> = <name>timeout</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Add a timeout observer.
     * @param to the timeout observer to add.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addTimeoutObserver</name><parameter_list>(<param><decl><type><name>TimeoutObserver</name></type> <name>to</name></decl></param>)</parameter_list> <block>{
        <comment type="line">//no need to synchronize, as Vector is always synchronized</comment>
        <expr_stmt><expr><call><name><name>observers</name>.<name>addElement</name></name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Remove a timeout observer.
     * @param to the timeout observer to remove.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeTimeoutObserver</name><parameter_list>(<param><decl><type><name>TimeoutObserver</name></type> <name>to</name></decl></param>)</parameter_list> <block>{
        <comment type="line">//no need to synchronize, as Vector is always synchronized</comment>
        <expr_stmt><expr><call><name><name>observers</name>.<name>removeElement</name></name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Inform the observers that a timeout has occurred.
     * This happens in the watchdog thread.
     */</comment>
    <function><type><specifier>protected</specifier> <specifier>final</specifier> <name>void</name></type> <name>fireTimeoutOccured</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Enumeration</name></type> <name>e</name> =<init> <expr><call><name><name>observers</name>.<name>elements</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>e</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <expr_stmt><expr>((<name>TimeoutObserver</name>) <call><name><name>e</name>.<name>nextElement</name></name><argument_list>()</argument_list></call>).<call><name>timeoutOccured</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
    }</block></function>

    <comment type="javadoc">/**
     * Start the watch dog.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>start</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>stopped</name> = false</expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Thread</name></type> <name>t</name> =<init> <expr>new <call><name>Thread</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr>"WATCHDOG"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>t</name>.<name>setDaemon</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>t</name>.<name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Stop the watch dog.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>stop</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>stopped</name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * The run method of the watch dog thread.
     * This simply does a wait for the timeout time, and
     * if the stop flag has not been set when the wait has returned or
     * has been interrupted, the watch dog listeners are informed.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>long</name></type> <name>now</name> =<init> <expr><call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>until</name> =<init> <expr><name>now</name> + <name>timeout</name></expr></init></decl>;</decl_stmt>

        <try>try <block>{
            <while>while <condition>(<expr>!<name>stopped</name> &amp;&amp; <name>until</name> &gt; <name>now</name></expr>)</condition> <block>{
                <expr_stmt><expr><call><name>wait</name><argument_list>(<argument><expr><name>until</name> - <name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>now</name> = <call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></while>
        }</block> <catch>catch (<param><decl><type><name>InterruptedException</name></type> <name>e</name></decl></param>) <block>{
            <comment type="line">// Ignore exception</comment>
        }</block></catch></try>
        <if>if <condition>(<expr>!<name>stopped</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>fireTimeoutOccured</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

}</block></class>
</unit>
