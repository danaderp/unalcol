<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\jsp\JspNameMangler.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>jsp</name></name>;</package>
<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name>.<name>StringUtils</name></name>;</import>

<comment type="javadoc">/**
 * This is a class derived from the Jasper code
 * (org.apache.jasper.compiler.CommandLineCompiler) to map from a JSP filename
 * to a valid Java classname.
 *
 */</comment>
<class><specifier>public</specifier> class <name>JspNameMangler</name> <super><implements>implements <name>JspMangler</name></implements></super> <block>{

    <comment type="line">// CheckStyle:ConstantNameCheck OFF - bc</comment>

    <comment type="javadoc">/**
     * this is the list of keywords which can not be used as classnames
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name><index>[]</index></type> <name>keywords</name> =<init> <expr><block>{
            <expr>"assert"</expr>,
            <expr>"abstract"</expr>, <expr>"boolean"</expr>, <expr>"break"</expr>, <expr>"byte"</expr>,
            <expr>"case"</expr>, <expr>"catch"</expr>, <expr>"char"</expr>, <expr>"class"</expr>,
            <expr>"const"</expr>, <expr>"continue"</expr>, <expr>"default"</expr>, <expr>"do"</expr>,
            <expr>"double"</expr>, <expr>"else"</expr>, <expr>"extends"</expr>, <expr>"final"</expr>,
            <expr>"finally"</expr>, <expr>"float"</expr>, <expr>"for"</expr>, <expr>"goto"</expr>,
            <expr>"if"</expr>, <expr>"implements"</expr>, <expr>"import"</expr>,
            <expr>"instanceof"</expr>, <expr>"int"</expr>, <expr>"interface"</expr>,
            <expr>"long"</expr>, <expr>"native"</expr>, <expr>"new"</expr>, <expr>"package"</expr>,
            <expr>"private"</expr>, <expr>"protected"</expr>, <expr>"public"</expr>,
            <expr>"return"</expr>, <expr>"short"</expr>, <expr>"static"</expr>, <expr>"super"</expr>,
            <expr>"switch"</expr>, <expr>"synchronized"</expr>, <expr>"this"</expr>,
            <expr>"throw"</expr>, <expr>"throws"</expr>, <expr>"transient"</expr>,
            <expr>"try"</expr>, <expr>"void"</expr>, <expr>"volatile"</expr>, <expr>"while"</expr>
            }</block></expr></init></decl>;</decl_stmt>

    <comment type="line">// CheckStyle:ConstantNameCheck ON</comment>

    <comment type="javadoc">/**
     * map from a jsp file to a java filename; does not do packages
     *
     * @param jspFile file
     * @return java filename
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>mapJspToJavaName</name><parameter_list>(<param><decl><type><name>File</name></type> <name>jspFile</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>mapJspToBaseName</name><argument_list>(<argument><expr><name>jspFile</name></expr></argument>)</argument_list></call> + ".java"</expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     * map from a jsp file to a base name; does not deal with extensions
     *
     * @param jspFile jspFile file
     * @return exensionless potentially remapped name
     */</comment>
    <function><type><specifier>private</specifier> <name>String</name></type> <name>mapJspToBaseName</name><parameter_list>(<param><decl><type><name>File</name></type> <name>jspFile</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>className</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>className</name> = <call><name>stripExtension</name><argument_list>(<argument><expr><name>jspFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// since we don't mangle extensions like the servlet does,</comment>
        <comment type="line">// we need to check for keywords as class names</comment>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>keywords</name>.<name>length</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
            <if>if <condition>(<expr><call><name><name>className</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>keywords</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>className</name> += "%"</expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
        }</block></for>

        <comment type="line">// Fix for invalid characters. If you think of more add to the list.</comment>
        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>modifiedClassName</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>(<argument><expr><call><name><name>className</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// first char is more restrictive than the rest</comment>
        <decl_stmt><decl><type><name>char</name></type> <name>firstChar</name> =<init> <expr><call><name><name>className</name>.<name>charAt</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>Character</name>.<name>isJavaIdentifierStart</name></name><argument_list>(<argument><expr><name>firstChar</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>modifiedClassName</name>.<name>append</name></name><argument_list>(<argument><expr><name>firstChar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>modifiedClassName</name>.<name>append</name></name><argument_list>(<argument><expr><call><name>mangleChar</name><argument_list>(<argument><expr><name>firstChar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <comment type="line">// this is the rest</comment>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>1</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>className</name>.<name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>char</name></type> <name>subChar</name> =<init> <expr><call><name><name>className</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>Character</name>.<name>isJavaIdentifierPart</name></name><argument_list>(<argument><expr><name>subChar</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>modifiedClassName</name>.<name>append</name></name><argument_list>(<argument><expr><name>subChar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>modifiedClassName</name>.<name>append</name></name><argument_list>(<argument><expr><call><name>mangleChar</name><argument_list>(<argument><expr><name>subChar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></for>
        <return>return <expr><call><name><name>modifiedClassName</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     * get short filename from file
     *
     * @param jspFile file in
     * @return file without any jsp extension
     */</comment>
    <function><type><specifier>private</specifier> <name>String</name></type> <name>stripExtension</name><parameter_list>(<param><decl><type><name>File</name></type> <name>jspFile</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>StringUtils</name>.<name>removeSuffix</name></name><argument_list>(<argument><expr><call><name><name>jspFile</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>".jsp"</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     * definition of the char escaping algorithm
     *
     * @param ch char to mangle
     * @return mangled string; 5 digit hex value
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>mangleChar</name><parameter_list>(<param><decl><type><name>char</name></type> <name>ch</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// CheckStyle:MagicNumber OFF</comment>
        <if>if <condition>(<expr><name>ch</name> == <name><name>File</name>.<name>separatorChar</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>ch</name> = '/'</expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>String</name></type> <name>s</name> =<init> <expr><call><name><name>Integer</name>.<name>toHexString</name></name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>nzeros</name> =<init> <expr>5 - <call><name><name>s</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name><index>[]</index></type> <name>result</name> =<init> <expr>new <name><name>char</name><index>[<expr>6</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>result</name><index>[<expr>0</expr>]</index></name> = '_'</expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>1</expr></init></decl>;</init> <condition><expr><name>i</name> &lt;= <name>nzeros</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
            <expr_stmt><expr><name><name>result</name><index>[<expr><name>i</name></expr>]</index></name> = '0'</expr>;</expr_stmt>
        }</block></for>
        <decl_stmt><decl><type><name>int</name></type> <name>resultIndex</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr><name>nzeros</name> + 1</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; 6</expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
            <expr_stmt><expr><name><name>result</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name><name>s</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>resultIndex</name>++</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr>new <call><name>String</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
        <comment type="line">// CheckStyle:MagicNumber ON</comment>
    }</block></function>

    <comment type="javadoc">/**
     * taking in the substring representing the path relative to the source dir
     * return a new string representing the destination path
     * not supported, as jasper in tomcat4.0 doesnt either
     * @param path not used
     * @return null always.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>mapPath</name><parameter_list>(<param><decl><type><name>String</name></type> <name>path</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name>null</name></expr>;</return>
    }</block></function>
}</block></class>

</unit>
