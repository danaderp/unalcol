<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\util\ReflectUtil.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>util</name></name>;</package>

<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name>.<name>Constructor</name></name>;</import>
<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name>.<name>InvocationTargetException</name></name>;</import>
<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name>.<name>Method</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name>.<name>Field</name></name>;</import>

<comment type="javadoc">/**
 * Utility class to handle reflection on java objects.
 * The class contains static methods to call reflection
 * methods, catch any exceptions, converting them
 * to BuildExceptions.
 */</comment>
<comment type="line">// CheckStyle:FinalClassCheck OFF - backward compatible</comment>
<class><specifier>public</specifier> class <name>ReflectUtil</name> <block>{

    <comment type="javadoc">/**  private constructor */</comment>
    <constructor><specifier>private</specifier> <name>ReflectUtil</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <comment type="javadoc">/**
     * Create an instance of a class using the constructor matching
     * the given arguments.
     * @since Ant 1.8.0
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list> <name>T</name></type> <name>newInstance</name><parameter_list>(<param><decl><type><name><name>Class</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>ofClass</name></decl></param>,
                                     <param><decl><type><name><name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name><index>[]</index></name></type> <name>argTypes</name></decl></param>,
                                     <param><decl><type><name><name>Object</name><index>[]</index></name></type> <name>args</name></decl></param>)</parameter_list> <block>{
        <try>try <block>{
            <decl_stmt><decl><type><name><name>Constructor</name><argument_list>&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>con</name> =<init> <expr><call><name><name>ofClass</name>.<name>getConstructor</name></name><argument_list>(<argument><expr><name>argTypes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>con</name>.<name>newInstance</name></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>t</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>throwBuildException</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>null</name></expr>;</return> <comment type="line">// NotReached</comment>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * Call a method on the object with no parameters.
     * @param obj  the object to invoke the method on.
     * @param methodName the name of the method to call
     * @return the object returned by the method
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Object</name></type> <name>invoke</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>, <param><decl><type><name>String</name></type> <name>methodName</name></decl></param>)</parameter_list> <block>{
        <try>try <block>{
            <decl_stmt><decl><type><name>Method</name></type> <name>method</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>method</name> = <call><name><name>obj</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getMethod</name><argument_list>(
                        <argument><expr><name>methodName</name></expr></argument>, <argument><expr>(<name><name>Class</name><index>[]</index></name>) <name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>method</name>.<name>invoke</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name><name>Object</name><index>[]</index></name>) <name>null</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>t</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>throwBuildException</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>null</name></expr>;</return> <comment type="line">// NotReached</comment>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * Call a method on the object with no parameters.
     * Note: Unlike the invoke method above, this
     * calls class or static methods, not instance methods.
     * @param obj  the object to invoke the method on.
     * @param methodName the name of the method to call
     * @return the object returned by the method
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Object</name></type> <name>invokeStatic</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>, <param><decl><type><name>String</name></type> <name>methodName</name></decl></param>)</parameter_list> <block>{
        <try>try <block>{
            <decl_stmt><decl><type><name>Method</name></type> <name>method</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>method</name> = ((<name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name>) <name>obj</name>).<call><name>getMethod</name><argument_list>(
                    <argument><expr><name>methodName</name></expr></argument>, <argument><expr>(<name><name>Class</name><index>[]</index></name>) <name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>method</name>.<name>invoke</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name><name>Object</name><index>[]</index></name>) <name>null</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block>  <catch>catch (<param><decl><type><name>Exception</name></type> <name>t</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>throwBuildException</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>null</name></expr>;</return> <comment type="line">// NotReached</comment>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * Call a method on the object with one argument.
     * @param obj  the object to invoke the method on.
     * @param methodName the name of the method to call
     * @param argType    the type of argument.
     * @param arg        the value of the argument.
     * @return the object returned by the method
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Object</name></type> <name>invoke</name><parameter_list>(
        <param><decl><type><name>Object</name></type> <name>obj</name></decl></param>, <param><decl><type><name>String</name></type> <name>methodName</name></decl></param>, <param><decl><type><name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>argType</name></decl></param>, <param><decl><type><name>Object</name></type> <name>arg</name></decl></param>)</parameter_list> <block>{
        <try>try <block>{
            <decl_stmt><decl><type><name>Method</name></type> <name>method</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>method</name> = <call><name><name>obj</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getMethod</name><argument_list>(
                <argument><expr><name>methodName</name></expr></argument>, <argument><expr>new <name><name>Class</name><index>[]</index></name> <block>{<expr><name>argType</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>method</name>.<name>invoke</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>new <name><name>Object</name><index>[]</index></name> <block>{<expr><name>arg</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</return>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>t</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>throwBuildException</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>null</name></expr>;</return> <comment type="line">// NotReached</comment>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * Call a method on the object with two argument.
     * @param obj  the object to invoke the method on.
     * @param methodName the name of the method to call
     * @param argType1   the type of the first argument.
     * @param arg1       the value of the first argument.
     * @param argType2   the type of the second argument.
     * @param arg2       the value of the second argument.
     * @return the object returned by the method
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Object</name></type> <name>invoke</name><parameter_list>(
        <param><decl><type><name>Object</name></type> <name>obj</name></decl></param>, <param><decl><type><name>String</name></type> <name>methodName</name></decl></param>, <param><decl><type><name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>argType1</name></decl></param>, <param><decl><type><name>Object</name></type> <name>arg1</name></decl></param>,
        <param><decl><type><name><name>Class</name><argument_list>&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>argType2</name></decl></param>, <param><decl><type><name>Object</name></type> <name>arg2</name></decl></param>)</parameter_list> <block>{
        <try>try <block>{
            <decl_stmt><decl><type><name>Method</name></type> <name>method</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>method</name> = <call><name><name>obj</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getMethod</name><argument_list>(
                <argument><expr><name>methodName</name></expr></argument>, <argument><expr>new <name><name>Class</name><index>[]</index></name> <block>{<expr><name>argType1</name></expr>, <expr><name>argType2</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>method</name>.<name>invoke</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>new <name><name>Object</name><index>[]</index></name> <block>{<expr><name>arg1</name></expr>, <expr><name>arg2</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</return>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>t</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>throwBuildException</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>null</name></expr>;</return> <comment type="line">// NotReached</comment>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * Get the value of a field in an object.
     * @param obj the object to look at.
     * @param fieldName the name of the field in the object.
     * @return the value of the field.
     * @throws BuildException if there is an error.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Object</name></type> <name>getField</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>, <param><decl><type><name>String</name></type> <name>fieldName</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <try>try <block>{
            <decl_stmt><decl><type><name>Field</name></type> <name>field</name> =<init> <expr><call><name><name>obj</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getDeclaredField</name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>field</name>.<name>setAccessible</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>field</name>.<name>get</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>t</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>throwBuildException</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>null</name></expr>;</return> <comment type="line">// NotReached</comment>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * A method to convert an invocationTargetException to
     * a buildexception and throw it.
     * @param t the invocation target exception.
     * @throws BuildException the converted exception.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>throwBuildException</name><parameter_list>(<param><decl><type><name>Exception</name></type> <name>t</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <throw>throw <expr><call><name>toBuildException</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>

    <comment type="javadoc">/**
     * A method to convert an invocationTargetException to
     * a buildexception.
     * @param t the invocation target exception.
     * @return the converted exception.
     * @since ant 1.7.1
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>BuildException</name></type> <name>toBuildException</name><parameter_list>(<param><decl><type><name>Exception</name></type> <name>t</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>t</name> <name>instanceof</name> <name>InvocationTargetException</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Throwable</name></type> <name>t2</name> =<init> <expr>((<name>InvocationTargetException</name>) <name>t</name>)
                .<call><name>getTargetException</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>t2</name> <name>instanceof</name> <name>BuildException</name></expr>)</condition><then> <block>{
                <return>return <expr>(<name>BuildException</name>) <name>t2</name></expr>;</return>
            }</block></then></if>
            <return>return <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
            <return>return <expr>new <call><name>BuildException</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * A method to test if an object responds to a given
     * message (method call)
     * @param o the object
     * @param methodName the method to check for
     * @return true if the object has the method.
     * @throws BuildException if there is a problem.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>respondsTo</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>o</name></decl></param>, <param><decl><type><name>String</name></type> <name>methodName</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>BuildException</name></expr></argument></throws> <block>{
        <try>try <block>{
            <decl_stmt><decl><type><name>Method</name><index>[]</index></type> <name>methods</name> =<init> <expr><call><name><name>o</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getMethods</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>methods</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <if>if <condition>(<expr><name><name>methods</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>getName</name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><name>methodName</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <return>return <expr>true</expr>;</return>
                }</block></then></if>
            }</block></for>
            <return>return <expr>false</expr>;</return>
        }</block> <catch>catch (<param><decl><type><name>Exception</name></type> <name>t</name></decl></param>) <block>{
            <throw>throw <expr><call><name>toBuildException</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>
}</block></class>
</unit>
