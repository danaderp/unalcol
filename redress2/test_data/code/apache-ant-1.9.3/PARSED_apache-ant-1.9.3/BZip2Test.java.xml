<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\tests\junit\org\apache\tools\ant\taskdefs\BZip2Test.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildFileTest</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>bzip2</name>.<name>CBZip2InputStream</name></name>;</import>

<import>import <name><name>java</name>.<name>io</name>.<name>BufferedInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>

<comment type="javadoc">/**
 */</comment>
<class><specifier>public</specifier> class <name>BZip2Test</name> <super><extends>extends <name>BuildFileTest</name></extends></super> <block>{

    <constructor><specifier>public</specifier> <name>BZip2Test</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>configureProject</name><argument_list>(<argument><expr>"src/etc/testcases/taskdefs/bzip2.xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"prepare"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>tearDown</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"cleanup"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testRealTest</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"realTest"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// doesn't work: Depending on the compression engine used,</comment>
        <comment type="line">// compressed bytes may differ. False errors would be</comment>
        <comment type="line">// reported.</comment>
        <comment type="line">// assertTrue("File content mismatch",</comment>
        <comment type="line">// FILE_UTILS.contentEquals(project.resolveFile("expected/asf-logo-huge.tar.bz2"),</comment>
        <comment type="line">// project.resolveFile("asf-logo-huge.tar.bz2")));</comment>

        <comment type="line">// We have to compare the decompressed content instead:</comment>

        <decl_stmt><decl><type><name>File</name></type> <name>originalFile</name> =<init>
            <expr><call><name><name>project</name>.<name>resolveFile</name></name><argument_list>(<argument><expr>"expected/asf-logo-huge.tar.bz2"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>actualFile</name>   =<init> <expr><call><name><name>project</name>.<name>resolveFile</name></name><argument_list>(<argument><expr>"asf-logo-huge.tar.bz2"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>InputStream</name></type> <name>originalIn</name> =<init>
            <expr>new <call><name>BufferedInputStream</name><argument_list>(<argument><expr>new <call><name>FileInputStream</name><argument_list>(<argument><expr><name>originalFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>(<name>byte</name>) 'B'</expr></argument>, <argument><expr><call><name><name>originalIn</name>.<name>read</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>(<name>byte</name>) 'Z'</expr></argument>, <argument><expr><call><name><name>originalIn</name>.<name>read</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>InputStream</name></type> <name>actualIn</name> =<init>
            <expr>new <call><name>BufferedInputStream</name><argument_list>(<argument><expr>new <call><name>FileInputStream</name><argument_list>(<argument><expr><name>actualFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>(<name>byte</name>) 'B'</expr></argument>, <argument><expr><call><name><name>actualIn</name>.<name>read</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>(<name>byte</name>) 'Z'</expr></argument>, <argument><expr><call><name><name>actualIn</name>.<name>read</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>originalIn</name> = new <call><name>CBZip2InputStream</name><argument_list>(<argument><expr><name>originalIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>actualIn</name>   = new <call><name>CBZip2InputStream</name><argument_list>(<argument><expr><name>actualIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <while>while <condition>(<expr>true</expr>)</condition> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>expected</name> =<init> <expr><call><name><name>originalIn</name>.<name>read</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>actual</name>   =<init> <expr><call><name><name>actualIn</name>.<name>read</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>expected</name> &gt;= 0</expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>expected</name> != <name>actual</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"File content mismatch"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then> <else>else <block>{
                <if>if <condition>(<expr><name>actual</name> &gt;= 0</expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"File content mismatch"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <break>break;</break>
            }</block></else></if>
        }</block></while>

        <expr_stmt><expr><call><name><name>originalIn</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>actualIn</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testResource</name><parameter_list>()</parameter_list><block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"realTestWithResource"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testDateCheck</name><parameter_list>()</parameter_list><block>{
        <expr_stmt><expr><call><name>executeTarget</name><argument_list>(<argument><expr>"testDateCheck"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>log</name> =<init> <expr><call><name>getLog</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(
            <argument><expr>"Expecting message ending with 'asf-logo.gif.bz2 is up to date.' but got '" + <name>log</name> + "'"</expr></argument>,
            <argument><expr><call><name><name>log</name>.<name>endsWith</name></name><argument_list>(<argument><expr>"asf-logo.gif.bz2 is up to date."</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
