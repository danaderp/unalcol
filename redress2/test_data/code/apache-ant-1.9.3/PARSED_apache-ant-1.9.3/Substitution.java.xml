<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\types\Substitution.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name></name>;</package>


<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>

<comment type="javadoc">/***
 * A regular expression substitution datatype.  It is an expression
 * that is meant to replace a regular expression.
 *
 * &lt;pre&gt;
 *   &amp;lt;substitution [ [id="id"] expression="expression" | refid="id" ]
 *   /&amp;gt;
 * &lt;/pre&gt;
 *
 * @see org.apache.oro.text.regex.Perl5Substitution
 */</comment>
<class><specifier>public</specifier> class <name>Substitution</name> <super><extends>extends <name>DataType</name></extends></super> <block>{
    <comment type="javadoc">/** The name of this data type */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DATA_TYPE_NAME</name> =<init> <expr>"substitution"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>expression</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Constructor for Substitution. */</comment>
    <constructor><specifier>public</specifier> <name>Substitution</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>expression</name></name> = <name>null</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Set the pattern string for this regular expression substitution.
     * @param expression the regular expression to use
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setExpression</name><parameter_list>(<param><decl><type><name>String</name></type> <name>expression</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>expression</name></name> = <name>expression</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/***
     * Gets the pattern string for this RegularExpression in the
     * given project.
     * @param p the project to look for the regular expression if this object is
     *          a reference
     * @return the pattern string
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getExpression</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>p</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name>getRef</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call>.<call><name>getExpression</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>

        <return>return <expr><name>expression</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/***
     * Get the RegularExpression this reference refers to in
     * the given project.  Check for circular references too.
     * @param p the project to look for the regular expression reference
     * @return the resolved reference
     */</comment>
    <function><type><specifier>public</specifier> <name>Substitution</name></type> <name>getRef</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>p</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>(<name>Substitution</name>) <call><name>getCheckedRef</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
