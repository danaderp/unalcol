<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\property\ParseProperties.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>property</name></name>;</package>

<import>import <name><name>java</name>.<name>text</name>.<name>ParsePosition</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collection</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>

<comment type="javadoc">/**
 * Parse properties using a collection of expanders.
 *
 * @since Ant 1.8.0
 */</comment>
<class><specifier>public</specifier> class <name>ParseProperties</name> <super><implements>implements <name>ParseNextProperty</name></implements></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Project</name></type> <name>project</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>GetProperty</name></type> <name>getProperty</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Collection</name><argument_list>&lt;<argument><name>PropertyExpander</name></argument>&gt;</argument_list></name></type> <name>expanders</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructor with a getProperty.
     * @param project the current Ant project.
     * @param expanders a sequence of expanders
     * @param getProperty property resolver.
     */</comment>
    <constructor><specifier>public</specifier> <name>ParseProperties</name><parameter_list>(<param><decl><type><name>Project</name></type> <name>project</name></decl></param>, <param><decl><type><name><name>Collection</name><argument_list>&lt;<argument><name>PropertyExpander</name></argument>&gt;</argument_list></name></type> <name>expanders</name></decl></param>, <param><decl><type><name>GetProperty</name></type> <name>getProperty</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>project</name></name> = <name>project</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>expanders</name></name> = <name>expanders</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>getProperty</name></name> = <name>getProperty</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Get the project.
     * @return the current Ant project.
     */</comment>
    <function><type><specifier>public</specifier> <name>Project</name></type> <name>getProject</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>project</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Decode properties from a String representation.
     *
     * &lt;ul&gt;
     *
     *  &lt;li&gt;This implementation starts parsing the &lt;code&gt;value&lt;/code&gt;
     *  parameter (unsurprisingly) at the beginning and asks each
     *  {@link PropertyExpander PropertyExpander} whether there is a
     *  property reference at that point.  PropertyExpanders return
     *  the name of a property they may find and may advance the parse
     *  position.&lt;/li&gt;
     *
     *  &lt;li&gt;If the PropertyExpander returns &lt;code&gt;null&lt;/code&gt; the
     *  method continues with the next PropertyExpander, otherwise it
     *  tries to look up the property's value using the configured
     *  {@link GetProperty GetProperty} instance.&lt;/li&gt;
     *
     *  &lt;li&gt;Once all PropertyExpanders have been consulted, the parse
     *  position is advanced by one character and the process repeated
     *  until &lt;code&gt;value&lt;/code&gt; is exhausted.&lt;/li&gt;
     *
     * &lt;/ul&gt;
     *
     * &lt;p&gt;If the entire contents of &lt;code&gt;value&lt;/code&gt; resolves to a
     * single property, the looked up property value is returned.
     * Otherwise a String is returned that concatenates the
     * non-property parts of &lt;code&gt;value&lt;/code&gt; and the expanded
     * values of the properties that have been found.&lt;/p&gt;
     *
     * @param value The string to be scanned for property references.
     *              May be &lt;code&gt;null&lt;/code&gt;, in which case this
     *              method returns immediately with no effect.
     *
     * @return the original string with the properties replaced, or
     *         &lt;code&gt;null&lt;/code&gt; if the original string is &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>parseProperties</name><parameter_list>(<param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>value</name> == <name>null</name> || "".<call><name>equals</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name>value</name></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>len</name> =<init> <expr><call><name><name>value</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ParsePosition</name></type> <name>pos</name> =<init> <expr>new <call><name>ParsePosition</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Object</name></type> <name>o</name> =<init> <expr><call><name>parseNextProperty</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>o</name> != <name>null</name> &amp;&amp; <call><name><name>pos</name>.<name>getIndex</name></name><argument_list>()</argument_list></call> &gt;= <name>len</name></expr>)</condition><then> <block>{
            <return>return <expr><name>o</name></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>sb</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>(<argument><expr><name>len</name> * 2</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>o</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>value</name>.<name>charAt</name></name><argument_list>(<argument><expr><call><name><name>pos</name>.<name>getIndex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>pos</name>.<name>setIndex</name></name><argument_list>(<argument><expr><call><name><name>pos</name>.<name>getIndex</name></name><argument_list>()</argument_list></call> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <while>while <condition>(<expr><call><name><name>pos</name>.<name>getIndex</name></name><argument_list>()</argument_list></call> &lt; <name>len</name></expr>)</condition> <block>{
            <expr_stmt><expr><name>o</name> = <call><name>parseNextProperty</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>o</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>value</name>.<name>charAt</name></name><argument_list>(<argument><expr><call><name><name>pos</name>.<name>getIndex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>pos</name>.<name>setIndex</name></name><argument_list>(<argument><expr><call><name><name>pos</name>.<name>getIndex</name></name><argument_list>()</argument_list></call> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></while>
        <return>return <expr><call><name><name>sb</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Learn whether a String contains replaceable properties.
     *
     * &lt;p&gt;Uses the configured {@link PropertyExpander
     *  PropertyExpanders} and scans through the string.  Returns true
     *  as soon as any expander finds a property.&lt;/p&gt;
     *
     * @param value the String to check.
     * @return &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;value&lt;/code&gt; contains property notation.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>containsProperties</name><parameter_list>(<param><decl><type><name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>value</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>len</name> =<init> <expr><call><name><name>value</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>ParsePosition</name></type> <name>pos</name> =<init> <expr>new <call><name>ParsePosition</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>pos</name>.<name>getIndex</name></name><argument_list>()</argument_list></call> &lt; <name>len</name></expr>;</condition><incr/>) <block>{
            <if>if <condition>(<expr><call><name>parsePropertyName</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                <return>return <expr>true</expr>;</return>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>pos</name>.<name>setIndex</name></name><argument_list>(<argument><expr><call><name><name>pos</name>.<name>getIndex</name></name><argument_list>()</argument_list></call> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr>false</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Return any property that can be parsed from the specified position
     * in the specified String.
     *
     * &lt;p&gt;Uses the configured {@link PropertyExpander
     *  PropertyExpanders} and {@link GetProperty GetProperty}
     *  instance .&lt;/p&gt;
     *
     * @param value String to parse
     * @param pos ParsePosition
     * @return Object or null if no property is at the current
     * location.  If a property reference has been found but the
     * property doesn't expand to a value, the property's name is
     * returned.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>parseNextProperty</name><parameter_list>(<param><decl><type><name>String</name></type> <name>value</name></decl></param>, <param><decl><type><name>ParsePosition</name></type> <name>pos</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>start</name> =<init> <expr><call><name><name>pos</name>.<name>getIndex</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>start</name> &gt; <call><name><name>value</name>.<name>length</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">// early exit, can't find any property here, no need to</comment>
            <comment type="line">// consult all the delegates.</comment>
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>String</name></type> <name>propertyName</name> =<init> <expr><call><name>parsePropertyName</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>propertyName</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Object</name></type> <name>result</name> =<init> <expr><call><name>getProperty</name><argument_list>(<argument><expr><name>propertyName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>result</name> != <name>null</name></expr>)</condition><then> <block>{
                <return>return <expr><name>result</name></expr>;</return>
            }</block></then></if>
            <if>if <condition>(<expr><name>project</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>project</name>.<name>log</name></name><argument_list>(
                    <argument><expr>"Property \"" + <name>propertyName</name>
                    + "\" has not been set"</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <return>return <expr><call><name><name>value</name>.<name>substring</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><call><name><name>pos</name>.<name>getIndex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <return>return <expr><name>null</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>parsePropertyName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>value</name></decl></param>, <param><decl><type><name>ParsePosition</name></type> <name>pos</name></decl></param>)</parameter_list> <block>{
        <for>for (<init><decl><type><name>PropertyExpander</name></type> <name>propertyExpander</name> :<range> <expr><name>expanders</name></expr></range></decl></init>) <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>propertyName</name> =<init> <expr><call><name><name>propertyExpander</name>.<name>parsePropertyName</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>propertyName</name> == <name>null</name></expr>)</condition><then> <block>{
                <continue>continue;</continue>
            }</block></then></if>
            <return>return <expr><name>propertyName</name></expr>;</return>
        }</block></for>
        <return>return <expr><name>null</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>Object</name></type> <name>getProperty</name><parameter_list>(<param><decl><type><name>String</name></type> <name>propertyName</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>getProperty</name>.<name>getProperty</name></name><argument_list>(<argument><expr><name>propertyName</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
