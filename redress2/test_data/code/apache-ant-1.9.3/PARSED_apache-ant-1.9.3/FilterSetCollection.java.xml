<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\types\FilterSetCollection.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>


<comment type="javadoc">/**
 * A FilterSetCollection is a collection of filtersets each of which may have
 * a different start/end token settings.
 *
 */</comment>
<class><specifier>public</specifier> class <name>FilterSetCollection</name> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>List</name><argument_list>&lt;<argument><name>FilterSet</name></argument>&gt;</argument_list></name></type> <name>filterSets</name> =<init> <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>FilterSet</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructor for a FilterSetCollection.
     */</comment>
    <constructor><specifier>public</specifier> <name>FilterSetCollection</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructor for a FilterSetCollection.
     * @param filterSet a filterset to start the collection with
     */</comment>
    <constructor><specifier>public</specifier> <name>FilterSetCollection</name><parameter_list>(<param><decl><type><name>FilterSet</name></type> <name>filterSet</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>addFilterSet</name><argument_list>(<argument><expr><name>filterSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <comment type="javadoc">/**
     * Add a filterset to the collection.
     *
     * @param filterSet a &lt;code&gt;FilterSet&lt;/code&gt; value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addFilterSet</name><parameter_list>(<param><decl><type><name>FilterSet</name></type> <name>filterSet</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>filterSets</name>.<name>add</name></name><argument_list>(<argument><expr><name>filterSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Does replacement on the given string with token matching.
     * This uses the defined begintoken and endtoken values which default to @ for both.
     *
     * @param line  The line to process the tokens in.
     * @return      The string with the tokens replaced.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>replaceTokens</name><parameter_list>(<param><decl><type><name>String</name></type> <name>line</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>replacedLine</name> =<init> <expr><name>line</name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>FilterSet</name></type> <name>filterSet</name> :<range> <expr><name>filterSets</name></expr></range></decl></init>) <block>{
            <expr_stmt><expr><name>replacedLine</name> = <call><name><name>filterSet</name>.<name>replaceTokens</name></name><argument_list>(<argument><expr><name>replacedLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>replacedLine</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
    * Test to see if this filter set it empty.
    *
    * @return   Return true if there are filter in this set otherwise false.
    */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasFilters</name><parameter_list>()</parameter_list> <block>{
        <for>for (<init><decl><type><name>FilterSet</name></type> <name>filterSet</name> :<range> <expr><name>filterSets</name></expr></range></decl></init>) <block>{
            <if>if <condition>(<expr><call><name><name>filterSet</name>.<name>hasFilters</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>true</expr>;</return>
            }</block></then></if>
        }</block></for>
        <return>return <expr>false</expr>;</return>
    }</block></function>
}</block></class>



</unit>
