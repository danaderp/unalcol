<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\condition\IsSigned.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>condition</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Enumeration</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>BuildException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>Project</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>ManifestTask</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>types</name>.<name>DataType</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>zip</name>.<name>ZipEntry</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>zip</name>.<name>ZipFile</name></name>;</import>

<comment type="javadoc">/**
 * Checks whether a jarfile is signed: if the name of the
 * signature is passed, the file is checked for presence of that
 * particular signature; otherwise the file is checked for the
 * existence of any signature.
 */</comment>
<class><specifier>public</specifier> class <name>IsSigned</name> <super><extends>extends <name>DataType</name></extends> <implements>implements <name>Condition</name></implements></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SIG_START</name> =<init> <expr>"META-INF/"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SIG_END</name> =<init> <expr>".SF"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type>    <name>SHORT_SIG_LIMIT</name> =<init> <expr>8</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>file</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The jarfile that is to be tested for the presence
     * of a signature.
     * @param file jarfile to be tested.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFile</name><parameter_list>(<param><decl><type><name>File</name></type> <name>file</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>file</name></name> = <name>file</name></expr>;</expr_stmt>
    }</block></function>

   <comment type="javadoc">/**
     * The signature name to check jarfile for.
     * @param name signature to look for.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setName</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>name</name></name> = <name>name</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns &lt;code&gt;true&lt;/code&gt; if the file exists and is signed with
     * the signature specified, or, if &lt;code&gt;name&lt;/code&gt; wasn't
     * specified, if the file contains a signature.
     * @param zipFile the zipfile to check
     * @param name the signature to check (may be killed)
     * @return true if the file is signed.
     * @throws IOException on error
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isSigned</name><parameter_list>(<param><decl><type><name>File</name></type> <name>zipFile</name></decl></param>, <param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>ZipFile</name></type> <name>jarFile</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>jarFile</name> = new <call><name>ZipFile</name><argument_list>(<argument><expr><name>zipFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>null</name> == <name>name</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>Enumeration</name></type> <name>entries</name> =<init> <expr><call><name><name>jarFile</name>.<name>getEntries</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><call><name><name>entries</name>.<name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                    <decl_stmt><decl><type><name>String</name></type> <name>eName</name> =<init> <expr>((<name>ZipEntry</name>) <call><name><name>entries</name>.<name>nextElement</name></name><argument_list>()</argument_list></call>).<call><name>getName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><call><name><name>eName</name>.<name>startsWith</name></name><argument_list>(<argument><expr><name>SIG_START</name></expr></argument>)</argument_list></call>
                        &amp;&amp; <call><name><name>eName</name>.<name>endsWith</name></name><argument_list>(<argument><expr><name>SIG_END</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <return>return <expr>true</expr>;</return>
                    }</block></then></if>
                }</block></while>
                <return>return <expr>false</expr>;</return>
            }</block></then></if>
            <expr_stmt><expr><name>name</name> = <call><name>replaceInvalidChars</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>shortSig</name> =<init> <expr><call><name><name>jarFile</name>.<name>getEntry</name></name><argument_list>(<argument><expr><name>SIG_START</name>
                        + <call><name><name>name</name>.<name>toUpperCase</name></name><argument_list>()</argument_list></call>
                        + <name>SIG_END</name></expr></argument>)</argument_list></call> != <name>null</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>longSig</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>name</name>.<name>length</name></name><argument_list>()</argument_list></call> &gt; <name>SHORT_SIG_LIMIT</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>longSig</name> = <call><name><name>jarFile</name>.<name>getEntry</name></name><argument_list>(
                    <argument><expr><name>SIG_START</name>
                    + <call><name><name>name</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>SHORT_SIG_LIMIT</name></expr></argument>)</argument_list></call>.<call><name>toUpperCase</name><argument_list>()</argument_list></call>
                    + <name>SIG_END</name></expr></argument>)</argument_list></call> != <name>null</name></expr>;</expr_stmt>
            }</block></then></if>

            <return>return <expr><name>shortSig</name> || <name>longSig</name></expr>;</return>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>ZipFile</name>.<name>closeQuietly</name></name><argument_list>(<argument><expr><name>jarFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <comment type="javadoc">/**
     * Returns &lt;code&gt;true&lt;/code&gt; if the file exists and is signed with
     * the signature specified, or, if &lt;code&gt;name&lt;/code&gt; wasn't
     * specified, if the file contains a signature.
     * @return true if the file is signed.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>eval</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>file</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>BuildException</name><argument_list>(<argument><expr>"The file attribute must be set."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>file</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"The file \"" + <call><name><name>file</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call>
                + "\" does not exist."</expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>false</expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>boolean</name></type> <name>r</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>r</name> = <call><name>isSigned</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"Got IOException reading file \"" + <call><name><name>file</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call>
                + "\"" + <name>e</name></expr></argument>, <argument><expr><name><name>Project</name>.<name>MSG_WARN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <if>if <condition>(<expr><name>r</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"File \"" + <call><name><name>file</name>.<name>getAbsolutePath</name></name><argument_list>()</argument_list></call> + "\" is signed."</expr></argument>,
                <argument><expr><name><name>Project</name>.<name>MSG_VERBOSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>r</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>replaceInvalidChars</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>sb</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>len</name> =<init> <expr><call><name><name>name</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>changes</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>char</name></type> <name>ch</name> =<init> <expr><call><name><name>name</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>ManifestTask</name>.<name>VALID_ATTRIBUTE_CHARS</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr>"_"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>changes</name> = true</expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></for>
        <return>return <expr><name>changes</name> ? <call><name><name>sb</name>.<name>toString</name></name><argument_list>()</argument_list></call> : <name>name</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
