<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\ojcchar\Documents\Dropbox\Classes\W14\CSC7990 - Directed Study\Implementation\EclipseProject\redress2\test_data\code\apache-ant-1.9.3\src\main\org\apache\tools\ant\taskdefs\optional\junit\JUnitTaskMirrorImpl.java"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>taskdefs</name>.<name>optional</name>.<name>junit</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>OutputStream</name></name>;</import>
<import>import <name><name>junit</name>.<name>framework</name>.<name>AssertionFailedError</name></name>;</import>
<import>import <name><name>junit</name>.<name>framework</name>.<name>TestCase</name></name>;</import>
<import>import <name><name>junit</name>.<name>framework</name>.<name>TestResult</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>tools</name>.<name>ant</name>.<name>AntClassLoader</name></name>;</import>

<comment type="javadoc">/**
 * Implementation of the part of the junit task which can directly refer to junit.* classes.
 * Public only to permit use of reflection; do not use directly.
 * @see JUnitTaskMirror
 * @see "bug #38799"
 * @since 1.7
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>JUnitTaskMirrorImpl</name> <super><implements>implements <name>JUnitTaskMirror</name></implements></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>JUnitTask</name></type> <name>task</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructor.
     * @param task the junittask that uses this mirror.
     */</comment>
    <constructor><specifier>public</specifier> <name>JUnitTaskMirrorImpl</name><parameter_list>(<param><decl><type><name>JUnitTask</name></type> <name>task</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>task</name></name> = <name>task</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/** {@inheritDoc}. */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addVmExit</name><parameter_list>(<param><decl><type><name>JUnitTest</name></type> <name>test</name></decl></param>, <param><decl><type><name><name>JUnitTaskMirror</name>.<name>JUnitResultFormatterMirror</name></name></type> <name>aFormatter</name></decl></param>,
            <param><decl><type><name>OutputStream</name></type> <name>out</name></decl></param>, <param><decl><type><name>String</name></type> <name>message</name></decl></param>, <param><decl><type><name>String</name></type> <name>testCase</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>JUnitResultFormatter</name></type> <name>formatter</name> =<init> <expr>(<name>JUnitResultFormatter</name>) <name>aFormatter</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>formatter</name>.<name>setOutput</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>formatter</name>.<name>startTestSuite</name></name><argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//the trick to integrating test output to the formatter, is to</comment>
        <comment type="line">//create a special test class that asserts an error</comment>
        <comment type="line">//and tell the formatter that it raised.</comment>
        <decl_stmt><decl><type><name>TestCase</name></type> <name>t</name> =<init> <expr>new <call><name>VmExitErrorTest</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>test</name></expr></argument>, <argument><expr><name>testCase</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>formatter</name>.<name>startTest</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>formatter</name>.<name>addError</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr>new <call><name>AssertionFailedError</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>formatter</name>.<name>endTestSuite</name></name><argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/** {@inheritDoc}. */</comment>
    <function><type><specifier>public</specifier> <name><name>JUnitTaskMirror</name>.<name>JUnitTestRunnerMirror</name></name></type> <name>newJUnitTestRunner</name><parameter_list>(<param><decl><type><name>JUnitTest</name></type> <name>test</name></decl></param>,
            <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>methods</name></decl></param>,
            <param><decl><type><name>boolean</name></type> <name>haltOnError</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>filterTrace</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>haltOnFailure</name></decl></param>,
            <param><decl><type><name>boolean</name></type> <name>showOutput</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>logTestListenerEvents</name></decl></param>, <param><decl><type><name>AntClassLoader</name></type> <name>classLoader</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>new <call><name>JUnitTestRunner</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>methods</name></expr></argument>, <argument><expr><name>haltOnError</name></expr></argument>, <argument><expr><name>filterTrace</name></expr></argument>, <argument><expr><name>haltOnFailure</name></expr></argument>,
                <argument><expr><name>showOutput</name></expr></argument>, <argument><expr><name>logTestListenerEvents</name></expr></argument>, <argument><expr><name>classLoader</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/** {@inheritDoc}. */</comment>
    <function><type><specifier>public</specifier> <name><name>JUnitTaskMirror</name>.<name>SummaryJUnitResultFormatterMirror</name></name></type> <name>newSummaryJUnitResultFormatter</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>new <call><name>SummaryJUnitResultFormatter</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <class><specifier>static</specifier> class <name>VmExitErrorTest</name> <super><extends>extends <name>TestCase</name></extends></super> <block>{

        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>message</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>JUnitTest</name></type> <name>test</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>testCase</name></decl>;</decl_stmt>

        <constructor><name>VmExitErrorTest</name><parameter_list>(<param><decl><type><name>String</name></type> <name>aMessage</name></decl></param>, <param><decl><type><name>JUnitTest</name></type> <name>anOriginalTest</name></decl></param>, <param><decl><type><name>String</name></type> <name>aTestCase</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name>message</name> = <name>aMessage</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>test</name> = <name>anOriginalTest</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>testCase</name> = <name>aTestCase</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>countTestCases</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr>1</expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>(<param><decl><type><name>TestResult</name></type> <name>r</name></decl></param>)</parameter_list> <block>{
            <throw>throw <expr>new <call><name>AssertionFailedError</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></function>

        <function><type><specifier>public</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>testCase</name></expr>;</return>
        }</block></function>

        <function><type><name>String</name></type> <name>getClassName</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><call><name><name>test</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><call><name><name>test</name>.<name>getName</name></name><argument_list>()</argument_list></call> + ":" + <name>testCase</name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
